<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>My top 3 Useful Hacks for Working from Home</title>
      <author>Bobby Iliev</author>
      <pubDate>Mon, 03 May 2021 07:58:34 +0000</pubDate>
      <link>https://dev.to/bobbyiliev/my-top-3-useful-hacks-for-working-from-home-2im8</link>
      <guid>https://dev.to/bobbyiliev/my-top-3-useful-hacks-for-working-from-home-2im8</guid>
      <description>&lt;p&gt;Many people have been working from home since the pandemic started. The world lockdown had inflicted different changes in the daily life of everyone.&lt;/p&gt;

&lt;p&gt;In order to work effectively, you will need to change some of your habits and daily routines. &lt;/p&gt;

&lt;p&gt;Here are 3 useful hacks, which will make your work from home pleasant!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%E2%98%80-create-a-morning-routine"&gt;
  &lt;/a&gt;
  ☀ Create a Morning Routine
&lt;/h2&gt;

&lt;p&gt;It can help you to boost-start your day and will give you time for yourself or for your family before work. &lt;/p&gt;

&lt;p&gt;It is important to know when your working day will start. Your morning routine could include anything from drinking a glass of coffee, doing yoga, or having a nice breakfast. &lt;/p&gt;

&lt;p&gt;The morning routine is a fundamental key for a successful start of the day. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#comfortable-chair"&gt;
  &lt;/a&gt;
  💺 Comfortable chair
&lt;/h2&gt;

&lt;p&gt;Every remote employee should have a dedicated workspace. Not everyone can afford an entire room, but I believe that having a corner of a room is good enough as well. &lt;/p&gt;

&lt;p&gt;It is important to associate a place in your house or a flat where you only do work, this would help your productivity a lot. &lt;/p&gt;

&lt;p&gt;The chair is a crucial part of your workspace. It will help you feel good during the whole working day and save you from terrible back pain.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#schedule-breaks"&gt;
  &lt;/a&gt;
  ⌚ Schedule Breaks
&lt;/h2&gt;

&lt;p&gt;Yes, an efficient working day includes breaks. Give yourself time for relaxing and standing away from your desk. &lt;/p&gt;

&lt;p&gt;You can drink a glass of water, make 5 minutes stretch, or water the flowers.&lt;/p&gt;

&lt;p&gt;You can use an app, that helps you to lock yourself out of your computer, or set a regular timer to remind you when the break starts. &lt;/p&gt;

&lt;p&gt;This will keep your mind fresh and you will be able to do more productive work.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;There are a lot of advantages to working from home. It saves us time in the traffic jam, it gives us an opportunity to wear cozy clothes, saves us money and etc. &lt;/p&gt;

&lt;p&gt;That is why it is important to find a way to make your workday at home more enjoyable with these hacks!&lt;/p&gt;

&lt;p&gt;What are your top 3 hacks? 🤔&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>homeoffice</category>
    </item>
    <item>
      <title>How to convert markdown to HTML in Laravel and Voyager?</title>
      <author>Bobby Iliev</author>
      <pubDate>Mon, 03 May 2021 07:53:45 +0000</pubDate>
      <link>https://dev.to/bobbyiliev/how-to-convert-markdown-to-html-in-laravel-and-voyager-1g0m</link>
      <guid>https://dev.to/bobbyiliev/how-to-convert-markdown-to-html-in-laravel-and-voyager-1g0m</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;Markdown was created by &lt;a href="https://en.wikipedia.org/wiki/John_Gruber"&gt;John Gruber&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/Aaron_Swartz"&gt;Aaron Swartz&lt;/a&gt; who contributed on the syntax.&lt;/p&gt;

&lt;p&gt;Nowadays Markdown is everywhere, from readme files and writing messages in online discussion forums. I'm even writing this very article in Markdown as well!&lt;/p&gt;

&lt;p&gt;Markdown widely used as it offers an easy to write and read plain text format, which then gets converted to HTML.&lt;/p&gt;

&lt;p&gt;In this tutorial, I will show you how to use Markdown with your Voyager Admin panel for your Laravel website and how to render the output to HTML on your views!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h1&gt;

&lt;p&gt;Before you start you would need to have a &lt;code&gt;composer&lt;/code&gt; and Laravel application up and running along with Voyager installed.&lt;/p&gt;

&lt;p&gt;I will be using a DigitalOcean Ubuntu Droplet for this demo, if you wish you can use my affiliate code to &lt;strong&gt;&lt;a href="https://m.do.co/c/2a9bba940f39"&gt;get free $100 DigitalOcean credit&lt;/a&gt;&lt;/strong&gt; to spin up your own servers!&lt;/p&gt;

&lt;p&gt;If you do not have that yet, you can follow the steps from this tutorial on how to do that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devdojo.com/bobbyiliev/laravel-app-on-digital-ocean-ubuntu-1904-droplet-step-by-step-guide"&gt;Install Laravel on Ubuntu Server&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Or you could use this awesome script to do the installation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devdojo.com/devdojo/larasail-laravel-on-digital-ocean"&gt;LaraSail&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once you have Laravel and Voyager installed, you are ready to follow along!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#install-the-laravel-markdown-package"&gt;
  &lt;/a&gt;
  Install the Laravel Markdown Package
&lt;/h1&gt;

&lt;p&gt;For this example, we will use the following Laravel Markdown package developed by &lt;a href="https://gjcampbell.co.uk/"&gt;Graham Campbell&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/GrahamCampbell/Laravel-Markdown"&gt;https://github.com/GrahamCampbell/Laravel-Markdown&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In order to install the package, first &lt;code&gt;cd&lt;/code&gt; into the directory of your Laravel application and run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;composer require graham-campbell/markdown
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This might take a minute or so to complete.&lt;/p&gt;

&lt;p&gt;After that, as stated in the GitHub Readme file, in case that you are not using automatic package discovery, you have to register the &lt;code&gt;GrahamCampbell\Markdown\MarkdownServiceProvider&lt;/code&gt; service provider in your &lt;code&gt;config/app.php&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can also optionally alias our facade:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        'Markdown' =&amp;gt; GrahamCampbell\Markdown\Facades\Markdown::class,
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The package also supports different configurations which you could learn more &lt;a href="https://github.com/GrahamCampbell/Laravel-Markdown#configuration"&gt;about here&lt;/a&gt;. To keep things simple, we will stick with the default settings.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#configure-your-controller"&gt;
  &lt;/a&gt;
  Configure your Controller
&lt;/h1&gt;

&lt;p&gt;Once you have the package installed, we are ready to change our Post controller and include the MArkdown facade.&lt;/p&gt;

&lt;p&gt;To do so, edit your PostController and add the following line at the top:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use GrahamCampbell\Markdown\Facades\Markdown;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As an example, my single post method looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    public function single($slug){
        $post = Post::where([['slug', '=', $slug],['status', '=' ,'published']] )-&amp;gt;firstOrFail();

      return view('blog.single', compact('post'));

    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to incorporate the Markdown changes, you just need to add the following line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$post-&amp;gt;body = Markdown::convertToHtml($post-&amp;gt;body);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So your method would look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    public function single($slug){
        $post = Post::where([['slug', '=', $slug],['status', '=' ,'published']] )-&amp;gt;firstOrFail();

      $post-&amp;gt;body = Markdown::convertToHtml($post-body);

      return view('blog.single', compact('post'));

    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All that we had to do was to first include the Markdown facade and then use the &lt;code&gt;convertToHtml&lt;/code&gt; static method to parse our Markdown to HTML and return this to our Post view.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#change-the-input-type-in-voyager"&gt;
  &lt;/a&gt;
  Change the Input type in Voyager
&lt;/h1&gt;

&lt;p&gt;Now that we have our controller configured to parse markdown to HTML, we need to make sure that we actually, store our posts as markdown in our database.&lt;/p&gt;

&lt;p&gt;Luckily Voyager makes that super easy! All you need to do is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First, go to your Voyager admin panel&lt;/li&gt;
&lt;li&gt;Then go to Tools -&amp;gt; BREAD&lt;/li&gt;
&lt;li&gt;Find your Posts table and click edit&lt;/li&gt;
&lt;li&gt;Then search for &lt;code&gt;body&lt;/code&gt; and from the dropdown change input type from &lt;code&gt;Rick text box&lt;/code&gt; to &lt;code&gt;Markdown Editor&lt;/code&gt; and then save the changes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9JeAcWb0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/july2020/laravel-markdown-voyager-devdojo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9JeAcWb0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/july2020/laravel-markdown-voyager-devdojo.png" alt="laravel-markdown-voyager-devdojo.PNG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once this has been done, go to Posts and edit or add a new post. &lt;/p&gt;

&lt;p&gt;That way you will be able to write in Markdown via your Voyager control panel and have your markdown parsed to HTML on your frontend!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Now you know how to use Voyager's Markdown Editor and write your posts in Markdown directly via Voyager!&lt;/p&gt;

&lt;p&gt;Hope that you find this helpful!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bobbyiliev.com"&gt;Bobby&lt;/a&gt;&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>php</category>
      <category>html</category>
    </item>
    <item>
      <title>Developer's Resume Template - made with Tailwind, Vite and Ionicons</title>
      <author>Christian Kozalla</author>
      <pubDate>Mon, 03 May 2021 07:43:28 +0000</pubDate>
      <link>https://dev.to/christiankozalla/developer-s-resume-template-made-with-tailwind-vite-and-ionicons-3ai2</link>
      <guid>https://dev.to/christiankozalla/developer-s-resume-template-made-with-tailwind-vite-and-ionicons-3ai2</guid>
      <description>&lt;p&gt;This is a template for you if you want to put your resume online to share it easily with future employers or clients!&lt;/p&gt;

&lt;p&gt;I've made the resume template with&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://tailwindcss.com"&gt;TailwindCSS&lt;/a&gt; - A utility-first CSS framework&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://vitejs.dev"&gt;Vite&lt;/a&gt; - Next Generation of Frontend Tooling&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://ionicons.com"&gt;Ionicons&lt;/a&gt; - Open source icons. Lovingly hand-crafted.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#resources-to-start"&gt;
  &lt;/a&gt;
  Resources to start
&lt;/h2&gt;

&lt;p&gt;Instructions on how to get the template working for your can be found along with the &lt;strong&gt;&lt;a href="https://github.com/christiankozalla/dev-resume-template"&gt;Code on GitHub&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://christiankozalla.github.io/dev-resume-template/"&gt;Live Resume Example&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#story-behind"&gt;
  &lt;/a&gt;
  Story behind
&lt;/h2&gt;

&lt;p&gt;I've redesigned my resume from the ground up, lately. I was tired of keeping a Word / PDF document always up-to-date. In addition, I enjoyed the simplicity of updating websites just by pushing new code to a repository! Plus, a website offers a lot more freedom to style and design according to your likes.&lt;/p&gt;

&lt;p&gt;I thought of several advantages of building my resume as a website instead of a PDF:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Responsive - A website looks great on all screen sizes&lt;/li&gt;
&lt;li&gt;Every design is possible - CSS offers an abundant variety&lt;/li&gt;
&lt;li&gt;Easily share the link with friends, employers or clients&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Another nice side-effect: I was waiting for an opportunity to try some tools and libraries like Tailwind and Vite. So my need for a new resume was a perfect match in this case! 😄&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#feedback"&gt;
  &lt;/a&gt;
  Feedback
&lt;/h2&gt;

&lt;p&gt;If you'd like try out the &lt;a href="https://github.com/christiankozalla/dev-resume-template"&gt;template&lt;/a&gt; or if you have any feedback about the idea whatsoever, I'll be glad to receive your feedback 🙏&lt;/p&gt;

&lt;p&gt;Hope you like the template and it can help you on your developer career! 🌱&lt;/p&gt;

&lt;p&gt;Thanks for your attention! ❤️&lt;/p&gt;

</description>
      <category>portfolio</category>
      <category>resume</category>
      <category>tailwindcss</category>
      <category>vite</category>
    </item>
    <item>
      <title>Acessibilidade na Internet</title>
      <author>Lucas Rafael</author>
      <pubDate>Mon, 03 May 2021 07:31:10 +0000</pubDate>
      <link>https://dev.to/portugues/acessibilidade-na-internet-4oll</link>
      <guid>https://dev.to/portugues/acessibilidade-na-internet-4oll</guid>
      <description>&lt;p&gt;Acessibilidade na Internet significa que pessoas com deficiência, dificuldades motoras ou cognitivas, também possam, com autonomia e segurança, utilizar a &lt;em&gt;web&lt;/em&gt;, tendo acesso à informação e à interação, podendo entender, navegar, interagir e contribuir para a &lt;em&gt;web&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Visa tornar acessível qualquer conteúdo disponível nos &lt;em&gt;sites&lt;/em&gt; para pessoas com variadas deficiências, tais como vídeo, áudio, formulário, imagem, dentre outros.&lt;/p&gt;

&lt;p&gt;Objetivando a universalidade, o acesso a todos, independentemente de deficiência, a &lt;em&gt;&lt;strong&gt;W&lt;/strong&gt;orld &lt;strong&gt;W&lt;/strong&gt;ide &lt;strong&gt;W&lt;/strong&gt;eb&lt;/em&gt;, ou simplesmente &lt;strong&gt;&lt;em&gt;Web&lt;/em&gt;&lt;/strong&gt;, desde 1991, quando foi criada por Tim Berners Lee, também criador do &lt;em&gt;W3C&lt;/em&gt;, vem sendo utilizada nas mais diversas áreas, como: educação, saúde, comércio, serviços públicos e privados, etc. &lt;a href="#w3c_brasil2015"&gt;(W3C BRASIL, 2015)&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;O poder da &lt;em&gt;web&lt;/em&gt; está em sua universalidade. Ser acessada por todos, independente de deficiência, é um aspecto essencial. — Tim Berners-Lee&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A &lt;strong&gt;&lt;em&gt;W3C&lt;/em&gt;&lt;/strong&gt; (&lt;strong&gt;W&lt;/strong&gt;orld &lt;strong&gt;W&lt;/strong&gt;ide &lt;strong&gt;W&lt;/strong&gt;eb &lt;strong&gt;C&lt;/strong&gt;onsortium), consórcio internacional em que organizações filiadas, uma equipe (tempo integral) e o público trabalham em parceria para desenvolverem padrões para a &lt;em&gt;web&lt;/em&gt;, disponibilizando-os de forma aberta e gratuita, visa garantir a evolução da &lt;em&gt;web&lt;/em&gt; e o crescimento de &lt;em&gt;interfaces&lt;/em&gt; interoperáveis. &lt;a href="#w3c_brasil2015"&gt;(W3C BRASIL, 2015)&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;É essencial que a &lt;em&gt;web&lt;/em&gt; seja acessível, de modo a prover igualdade de acesso e de oportunidades para pessoas com diferentes capacidades. A acessibilidade sustenta a inclusão social de pessoas com deficiência, idosas, residentes em áreas rurais, em países em desenvolvimento, entre outras. &lt;a href="#w3c_brasil2015"&gt;(W3C BRASIL, 2015)&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Diante desta necessidade de acessibilidade na Internet, o presente artigo busca apresentar como a população brasileira está distribuída no tocante às deficiências; quais são as diretrizes da &lt;em&gt;W3C&lt;/em&gt;, órgão de prestígio internacional; o quanto essa temática é abordada de uma maneira geral em determinado nicho do meio acadêmico e em livros; e as práticas e diretrizes em evidências adotadas nos setores público e privado.    &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lista-de-conte%C3%BAdo"&gt;
  &lt;/a&gt;
  &lt;a id="listaConteudo"&gt;&lt;/a&gt; Lista de conteúdo:
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#deficienciasComuns"&gt;Deficiências mais comuns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#censo"&gt;Censo 2010: Pessoas com Deficiência&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#wcag"&gt;Diretrizes de Acessibilidade para Conteúdo Web (WCAG)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#emag"&gt;e­MAG (Modelo de Acessibilidade em Governo Eletrônico)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gaia"&gt;GAIA: &lt;em&gt;Sites&lt;/em&gt; inclusivos a pessoas com autismo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#projAcessibilidade"&gt;Projetando para acessibilidade&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#avaliadores"&gt;Avaliadores automáticos de acessibilidade na &lt;em&gt;web&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#crescimentoTematica"&gt;Crescimento da temática acessibilidade&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#consideracoes"&gt;Considerações&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#referencias"&gt;Referências&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#lista-de-v%C3%ADdeos"&gt;
  &lt;/a&gt;
  Lista de vídeos:
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=n0ISO5qe1Ao"&gt;Acessibilidade na Web para Deficientes Visuais&lt;/a&gt; (&lt;a href="#reis2011"&gt;REIS, 2011&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=igGOeem6y4w"&gt;Acessibilidade Web Cognitiva&lt;/a&gt; (&lt;a href="#pagani2016"&gt;PAGANI, 2016&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=wjZEPeTwVL4"&gt;Entendendo o WCAG - Recomendação 1.1 - Alternativas Textuais&lt;/a&gt; (&lt;a href="#sales2017a"&gt;SALES, 2017a&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=GBipzZwXxZg"&gt;Acessibilidade Toolkit: WCAG de forma simples&lt;/a&gt; (&lt;a href="#videoToolkit"&gt;SALES, 2019&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=s2IKdGTbyIA"&gt;Palestra: Acessibilidade Toolkit - Entendendo de uma vez por todas a WCAG&lt;/a&gt; (&lt;a href="#videoPalToolkit"&gt;SALES, 2018&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#defici%C3%AAncias-mais-comuns"&gt;
  &lt;/a&gt;
  &lt;a id="deficienciasComuns"&gt;&lt;/a&gt; Deficiências mais comuns
&lt;/h2&gt;

&lt;p&gt;Abaixo são apresentadas as deficiências mais presentes e algumas formas de remover as barreiras encontradas pelos usuários que as possuem:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Visão&lt;/strong&gt; (cegueira de cores, baixa visão, etc.):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Evitar usar texto em imagem, pois dificultará a visualização do conteúdo em ampliadores de tela; e caso utilize, o texto deve ser replicado dentro de &lt;em&gt;tag html&lt;/em&gt;, para que leitores de tela interpretem corretamente;&lt;/li&gt;
&lt;li&gt;Utilizar escala de cores corretas;&lt;/li&gt;
&lt;li&gt;Não sobrescrever fontes e cores de fundos, permitindo que o usuário possa alterá-las caso deseje;&lt;/li&gt;
&lt;li&gt;Evitar o uso de &lt;em&gt;tag style&lt;/em&gt; e utilizar o código &lt;em&gt;css&lt;/em&gt; em folhas de estilo, facilitando a captura de informações pelos leitores de tela.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Audição&lt;/strong&gt; (surdez ou audição debilitada):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Adicionar legenda e transcrições para conteúdo multimídia;&lt;/li&gt;
&lt;li&gt;Linguagem de sinais (exemplo: &lt;a href="https://www.gov.br/governodigital/pt-br/vlibras"&gt;vlibras&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Deficiência Motora&lt;/strong&gt; (incapacidade de utilizar &lt;em&gt;mouse&lt;/em&gt;, tempo de reposta lento, etc.):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Possibilitar navegação pelas funcionalidades por meio do teclado;&lt;/li&gt;
&lt;li&gt;Páginas toleráveis a erros, com solicitação de confirmação, para que não sejam executadas operações acionadas acidentalmente;&lt;/li&gt;
&lt;li&gt;Adição de atalhos;&lt;/li&gt;
&lt;li&gt;Permitir uso de &lt;a href="http://webaim.org/articles/motor/assistive"&gt;tecnologias assistivas&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Cognitivo&lt;/strong&gt; (dislexia, déficit de atenção, incapacidade de se concentrar em grandes quantidades de informações, etc.):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Deixar as operações simples e breves, evitando operações longas;&lt;/li&gt;
&lt;li&gt;Informar onde o usuário está e para onde está indo na "navegação";&lt;/li&gt;
&lt;li&gt;Evitar elementos que causem distração.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="#listaConteudo"&gt;Voltar para lista de conteúdo&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#censo-2010-pessoas-com-defici%C3%AAncia"&gt;
  &lt;/a&gt;
  &lt;a id="censo"&gt;&lt;/a&gt; Censo 2010: Pessoas com Deficiência
&lt;/h2&gt;

&lt;p&gt;De acordo com último Censo realizado em 2010, pelo Instituto Brasileiro de Geografia e Estatística (IBGE), estima-se que 45.606.048 pessoas tenham algum tipo de deficiência, seja visual, auditiva, motora, mental ou intelectual, no qual corresponde a uma parcela de 23,9% da população brasileira à época da amostra. E dentre esse percentual, a deficiência visual apresentou a maior ocorrência, 18,6% da população; seguido por deficiência motora com 7% da população; terceiro a deficiência auditiva, com 5,10%; e com menor ocorrência, deficiência mental e intelectual, somando as duas 1,40%. &lt;a href="#mezzaroba2018"&gt;(MEZZAROBA et al., 2018)&lt;/a&gt;&lt;a href="#ibge2012"&gt;(IBGE, 2012)&lt;/a&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Idade&lt;/th&gt;
&lt;th&gt;Visual&lt;/th&gt;
&lt;th&gt;Auditiva&lt;/th&gt;
&lt;th&gt;Motora&lt;/th&gt;
&lt;th&gt;Mental ou Intelectual&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0 a 14 anos&lt;/td&gt;
&lt;td&gt;5,3%&lt;/td&gt;
&lt;td&gt;1,3%&lt;/td&gt;
&lt;td&gt;1,0%&lt;/td&gt;
&lt;td&gt;0,9%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15 a 64 anos&lt;/td&gt;
&lt;td&gt;20,1%&lt;/td&gt;
&lt;td&gt;4,2%&lt;/td&gt;
&lt;td&gt;5,7%&lt;/td&gt;
&lt;td&gt;1,4%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Acima de 65 anos&lt;/td&gt;
&lt;td&gt;49,8%&lt;/td&gt;
&lt;td&gt;25,6%&lt;/td&gt;
&lt;td&gt;38,3%&lt;/td&gt;
&lt;td&gt;2,9%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="#listaConteudo"&gt;Voltar para lista de conteúdo&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#diretrizes-de-acessibilidade-para-conte%C3%BAdo-web-wcag"&gt;
  &lt;/a&gt;
  &lt;a id="wcag"&gt;&lt;/a&gt; Diretrizes de Acessibilidade para Conteúdo Web (WCAG)
&lt;/h2&gt;

&lt;p&gt;Objetivando tornar a &lt;em&gt;Web&lt;/em&gt; acessível, o &lt;strong&gt;W3C&lt;/strong&gt; criou em 1999 o &lt;em&gt;&lt;strong&gt;W&lt;/strong&gt;eb &lt;strong&gt;A&lt;/strong&gt;ccessibility &lt;strong&gt;I&lt;/strong&gt;nitiative (&lt;strong&gt;WAI&lt;/strong&gt;)&lt;/em&gt;, Iniciativa para a Acessibilidade na &lt;em&gt;Web&lt;/em&gt;, formado por grupos de trabalho voltados para o desenvolvimento de diretrizes ligadas à garantia da acessibilidade do conteúdo &lt;em&gt;Web&lt;/em&gt; às pessoas com deficiência e às que acessam a rede em condições especiais. Assim surgiram as diretrizes de acessibilidade para conteúdo &lt;em&gt;Web&lt;/em&gt;, denominada &lt;em&gt;&lt;strong&gt;W&lt;/strong&gt;eb &lt;strong&gt;C&lt;/strong&gt;ontent &lt;strong&gt;A&lt;/strong&gt;ccessibility &lt;strong&gt;G&lt;/strong&gt;uidelines (WCAG)&lt;/em&gt;, sendo até hoje a principal referência em acessibilidade &lt;em&gt;Web&lt;/em&gt;. &lt;a href="#sousaLazzarin2014"&gt;(SOUSA; LAZZARIN, 2014)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A &lt;em&gt;WCAG&lt;/em&gt;, reconhecida pela &lt;em&gt;&lt;strong&gt;ISO&lt;/strong&gt; (&lt;strong&gt;I&lt;/strong&gt;nternational &lt;strong&gt;O&lt;/strong&gt;rganization for &lt;strong&gt;S&lt;/strong&gt;tandardization)&lt;/em&gt;, Organização Internacional para Padronização, como um padrão internacional para acessibilidade &lt;em&gt;Web&lt;/em&gt;, define um conjunto de orientações para: estrutura, conteúdo e apresentação das páginas &lt;em&gt;Web&lt;/em&gt;. &lt;a href="#w3c_brasil2020"&gt;(W3C BRASIL, 2020)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A versão inicial do &lt;em&gt;WCAG&lt;/em&gt; (1.0) foi disponibilizada em 1999 e a segunda em 2008 (2.0); a terceira e apresentada nesse documento é a 2.1, de 2018, no qual teve melhorias e adequações incluindo acessibilidade para conteúdos em dispositivos móveis. Recentemente foi lançada a 2.2, mas ainda não foi traduzida para o Português.&lt;/p&gt;

&lt;p&gt;O &lt;em&gt;WCAG&lt;/em&gt; 2.1 está subdividido em 4 princípios, 13 recomendações (diretrizes) e 78 critérios de sucesso &lt;a href="#toolkit2020"&gt;TOOLKIT 2020&lt;/a&gt;; e para esses critérios associados às diretrizes há uma coleção de técnicas de sucesso. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#camadas-de-orienta%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Camadas de Orientação
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tLh_3Hr5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ab66mkouo5nj231g9sm1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tLh_3Hr5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ab66mkouo5nj231g9sm1.png" alt="Estrutura do _WCAG_: Princípios seguido por recomendações e critérios de sucesso"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Fonte:&lt;/em&gt; &lt;a href="#sampaio2018"&gt;(SAMPAIO, 2018)&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#princ%C3%ADpios-com-as-respectivas-recomenda%C3%A7%C3%B5es"&gt;
  &lt;/a&gt;
  Princípios com as respectivas Recomendações
&lt;/h4&gt;

&lt;p&gt;Os princípios constituem a base da acessibilidade na &lt;em&gt;Web&lt;/em&gt; e abaixo dos princípios estão as diretrizes (recomendações), no qual são objetivos básicos que devem ser alcançados para tornar o conteúdo mais acessível aos usuários.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.w3c.br/traducoes/wcag/wcag21-pt-BR/#perceivable"&gt;Percebível&lt;/a&gt;:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As informações e os componentes da &lt;em&gt;interface&lt;/em&gt; do usuário devem ser apresentados em formas que possam ser percebidas pelo usuário. &lt;a href="#w3c_brasil2018"&gt;(W3C BRASIL, 2018)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;1.1 &lt;a href="https://www.w3c.br/traducoes/wcag/wcag21-pt-BR/#text-alternatives"&gt;Alternativas em texto&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;1.2 &lt;a href="https://www.w3c.br/traducoes/wcag/wcag21-pt-BR/#time-based-media"&gt;Mídias com base em tempo&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;1.3 &lt;a href="https://www.w3c.br/traducoes/wcag/wcag21-pt-BR/#adaptable"&gt;Adaptável&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;1.4 &lt;a href="https://www.w3c.br/traducoes/wcag/wcag21-pt-BR/#distinguishable"&gt;Discernível&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.w3c.br/traducoes/wcag/wcag21-pt-BR/#operable"&gt;Operável&lt;/a&gt;:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Os componentes de &lt;em&gt;interface&lt;/em&gt; de usuário e a navegação devem ser operáveis. &lt;a href="#w3c_brasil2018"&gt;(W3C BRASIL, 2018)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;2.1 &lt;a href="https://www.w3c.br/traducoes/wcag/wcag21-pt-BR/#keyboard-accessible"&gt;Acessível por teclado&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;2.2 &lt;a href="https://www.w3c.br/traducoes/wcag/wcag21-pt-BR/#enough-time"&gt;Tempo suficiente&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;2.3 &lt;a href="https://www.w3c.br/traducoes/wcag/wcag21-pt-BR/#seizures-and-physical-reactions"&gt;Convulsões e reações físicas&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;2.4 &lt;a href="https://www.w3c.br/traducoes/wcag/wcag21-pt-BR/#navigable"&gt;Navegável&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;2.5 &lt;a href="https://www.w3c.br/traducoes/wcag/wcag21-pt-BR/#input-modalities"&gt;Modalidades de entrada&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.w3c.br/traducoes/wcag/wcag21-pt-BR/#understandable"&gt;Compreensível&lt;/a&gt;:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A informação e a operação da &lt;em&gt;interface&lt;/em&gt; de usuário devem ser compreensíveis. &lt;a href="#w3c_brasil2018"&gt;(W3C BRASIL, 2018)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;3.1 &lt;a href="https://www.w3c.br/traducoes/wcag/wcag21-pt-BR/#readable"&gt;Legível&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;3.2 &lt;a href="https://www.w3c.br/traducoes/wcag/wcag21-pt-BR/#predictable"&gt;Previsível&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;3.3 &lt;a href="https://www.w3c.br/traducoes/wcag/wcag21-pt-BR/#input-assistance"&gt;Assistência de entrada&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.w3c.br/traducoes/wcag/wcag21-pt-BR/#robust"&gt;Robusto&lt;/a&gt;:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;O conteúdo deve ser robusto o suficiente para poder ser interpretado de forma confiável por uma ampla variedade de agentes de usuário, incluindo tecnologias assistivas. &lt;a href="#w3c_brasil2018"&gt;(W3C BRASIL, 2018)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;4.1 &lt;a href="https://www.w3c.br/traducoes/wcag/wcag21-pt-BR/#compatible"&gt;Compatível&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#crit%C3%A9rios-de-sucesso"&gt;
  &lt;/a&gt;
  Critérios de sucesso
&lt;/h4&gt;

&lt;p&gt;Cada diretriz vai ter um ou mais critério de sucesso testável e cada critério terá um nível de conformidade associado, no qual pode ser: A (o mais baixo), AA (intermediário) ou AAA (o mais elevado).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;A&lt;/strong&gt; - Solução mais simples, com pouco esforço;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;AA&lt;/strong&gt; - Solução intermediária;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;AAA&lt;/strong&gt; - Solução mais complexa, exigindo mais esforço.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Note-se que até mesmo o conteúdo que está em conformidade com o nível mais elevado (AAA) não estará acessível a pessoas com todos os tipos, graus ou combinações de deficiências, particularmente nas áreas da linguagem cognitiva e da aprendizagem. Os autores são encorajados a considerar a totalidade das técnicas, incluindo as técnicas de tipo sugerida, assim como a procurar orientação relevante sobre as atuais boas práticas, de forma a garantir que o conteúdo da &lt;em&gt;Web&lt;/em&gt; seja acessível, tanto quanto possível, a esta comunidade. &lt;a href="#w3c_brasil2018"&gt;(W3C BRASIL, 2018)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#t%C3%A9cnicas"&gt;
  &lt;/a&gt;
  Técnicas
&lt;/h4&gt;

&lt;p&gt;Para cada uma das diretrizes e critérios de sucesso existentes no &lt;em&gt;WCAG&lt;/em&gt;, há uma grande variedade de técnicas, constituídas de descrição, exemplos, código fonte e testes. Elas têm caráter informativo e enquadram-se em duas categorias &lt;a href="#w3c_brasil2018"&gt;(W3C BRASIL, 2018)&lt;/a&gt;: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Necessária:&lt;/strong&gt;&lt;br&gt;
 Satisfazem os critérios de sucesso; é fundamental.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Sugerida:&lt;/strong&gt;&lt;br&gt;
 Vão além do que é exigido pelos critérios de sucesso individuais e permitem aos autores um melhor cumprimento das diretrizes. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#acessibilidade-toolkit"&gt;
  &lt;/a&gt;
  Acessibilidade &lt;em&gt;Toolkit&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;O &lt;em&gt;WCAG&lt;/em&gt; é um guia completo, bem definido e documentado, repleto de exemplos e casos de sucesso de como aplicar as soluções, mas não é tão simples de entender e se aprofundar. Isto, pois apresenta textos rebuscados e maçantes. &lt;a href="#sales2020"&gt;(SALES, 2020)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Diante disso, &lt;a href="#sales2020"&gt;Sales (2020)&lt;/a&gt;, após vários anos trabalhando com acessibilidade, percebeu que as pessoas tinham dificuldades de entender tanto as explicações das diretrizes, como também entender a fundo os critérios de sucesso.&lt;/p&gt;

&lt;p&gt;O objetivo foi criar um material fácil de usar e simples de compreender para a maioria dos usuários, independente de suas habilidades. A ideia era que quaisquer pessoas "batessem o olho" no cartão e conseguissem identificar o que deveria ser feito. &lt;a href="#sales2020"&gt;(SALES, 2020)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Foi aí que surgiu &lt;strong&gt;Acessibilidade &lt;em&gt;Toolkit&lt;/em&gt;&lt;/strong&gt;, em formato de cartões, para facilitar o entendimento do &lt;em&gt;WCAG&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;O material pode ser usado de formas distintas. Inicialmente foi idealizado utilizá-lo em exercícios de &lt;em&gt;card sorting&lt;/em&gt;, onde as pessoas envolvidas no desenvolvimento de projetos digitais poderiam facilmente identificar &lt;em&gt;gaps&lt;/em&gt; e atividades que precisariam contemplar, mas na prática a ferramenta, que possui formato de cartões, pode ser utilizada como fonte rápida de consulta de diretrizes &lt;em&gt;WCAG&lt;/em&gt;, disseminação de conhecimento, facilitador de discussões, identificador de funcionalidades ou até mesmo como um &lt;em&gt;checklist&lt;/em&gt;. &lt;a href="#sales2020"&gt;(SALES, 2020)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;E caso não queira imprimir os cartões, tem o &lt;a href="https://guia-wcag.com"&gt;Guia de Consulta Rápida WCAG&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Abaixo segue um comparativo entre um texto original dos critérios de sucesso do &lt;em&gt;WCAG&lt;/em&gt; e suas respectivas adaptações.&lt;/p&gt;

&lt;p&gt;Os critérios apresentados são: 3.1.5 (Nível de leitura) e 2.4.5 (Várias formas).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VxqP_sEf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0jzp7a3wx9w8i73oxdoo.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VxqP_sEf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0jzp7a3wx9w8i73oxdoo.jpeg" alt="Comparativo entre dois critérios de sucesso do _WCAG_ e suas respectivas adaptações no Toolkit"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Fonte:&lt;/em&gt; &lt;a href="#sales2020"&gt;(SALES, 2020)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#listaConteudo"&gt;Voltar para lista de conteúdo&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#e%C2%ADmag-modelo-de-acessibilidade-em-governo-eletr%C3%B4nico"&gt;
  &lt;/a&gt;
  &lt;a id="emag"&gt;&lt;/a&gt; e­MAG (Modelo de Acessibilidade em Governo Eletrônico)
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Cada vez mais, órgãos dos governos federais, estaduais e municipais têm utilizado a &lt;em&gt;web&lt;/em&gt; para prover diversas categorias de serviços para os cidadãos. (&lt;a href="#arnaut2017"&gt;ARNAUT, 2017&lt;/a&gt; apud REZENDE, 2007)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Diante disso:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;O governo brasileiro, comprometido com a inclusão, buscou, através da elaboração do Modelo de acessibilidade do governo eletrônico, facilitar o acesso para todas as pessoas às informações e serviços disponibilizados nos sítios e portais do governo. &lt;a href="#brasil2014"&gt;(BRASIL, 2014)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;O eMAG, ou &lt;a href="http://emag.governoeletronico.gov.br"&gt;e-MAG&lt;/a&gt;, foi inicialmente desenvolvido em 2004 e atualmente se encontra na versão 3.1, de 2014. O modelo atual está em conformidade com os padrões internacionais e é uma versão especializada do documento internacional &lt;em&gt;WCAG (Web Content Accessibility Guidelines: Recomendações de Acessibilidade para Conteúdo Web)&lt;/em&gt;, no qual não exclui quaisquer boas práticas de acessibilidade do &lt;em&gt;WCAG&lt;/em&gt;. &lt;a href="#brasil2014"&gt;(BRASIL, 2014)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O modelo possui 45 (quarenta e cinco) recomendações de fácil entendimento, no qual mantém correlação com os &lt;em&gt;Critérios de Sucesso&lt;/em&gt; do &lt;em&gt;WCAG&lt;/em&gt; &lt;a href="#arnaut2017"&gt;(ARNAUT, 2017)&lt;/a&gt;, distribuídas em 6 (seis) seções:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Marcação:&lt;/strong&gt; 9 recomendações específicas com foco na marcação, no conjunto de &lt;em&gt;tags&lt;/em&gt; aplicadas nos textos inseridos nas páginas &lt;em&gt;HTML&lt;/em&gt;;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Comportamento&lt;/strong&gt; - &lt;em&gt;Document Object Model (DOM)&lt;/em&gt;&lt;strong&gt;:&lt;/strong&gt; 7 recomendações relacionadas com o comportamento das páginas (atualização, redirecionamento automático, &lt;em&gt;scripts&lt;/em&gt;, conteúdos dinâmicos, dentre outros);&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Conteúdo / Informação:&lt;/strong&gt; 12 recomendações voltadas para o conteúdo das páginas &lt;em&gt;HTML&lt;/em&gt; e das informações contidas, como títulos e &lt;em&gt;links&lt;/em&gt; com textos claros, curtos e significativos;  dentre outros;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Apresentação / &lt;em&gt;Design&lt;/em&gt;:&lt;/strong&gt; 4 recomendações de &lt;em&gt;design&lt;/em&gt; de páginas, como &lt;em&gt;layout&lt;/em&gt;, redimensionamento de textos, contraste, entre outros;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Multimídia:&lt;/strong&gt; 5 recomendações para inserção de elementos multimídia (áudio e vídeo) nas páginas dos &lt;em&gt;sites&lt;/em&gt;, como controles de áudio e de animação, audiodescrição, legenda, dentre outros;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Formulário:&lt;/strong&gt; 8 recomendações para formulários &lt;em&gt;HTML&lt;/em&gt;, tais como: instruções para a entrada de dados, &lt;em&gt;CAPTCHA&lt;/em&gt; acessível, alternativas textuais para botões em formato de imagens, ordem lógica de navegação/tabulação, dentre outros.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="#listaConteudo"&gt;Voltar para lista de conteúdo&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#gaia-sites-inclusivos-a-pessoas-com-autismo"&gt;
  &lt;/a&gt;
  &lt;a id="gaia"&gt;&lt;/a&gt; GAIA: Sites inclusivos a pessoas com autismo
&lt;/h2&gt;

&lt;p&gt;Em razão das recomendações gerais de acessibilidade nem sempre atender às necessidades específicas das pessoas com Transtorno do Espectro do Autismo, devido à diversidade de características entre eles, e também com o objetivo de equalizar aspectos psicopedagógicos sobre o autismo com requisitos tecnológicos para desenvolver soluções acessíveis, Talita Pagani &lt;strong&gt;*&lt;/strong&gt;, durante sua dissertação de Mestrado, desenvolveu um conjunto de 28 recomendações de acessibilidade &lt;em&gt;web&lt;/em&gt; embasadas em 10 princípios com foco nos aspectos do autismo, abordando desde a escrita de conteúdo até recursos de programação, denominando-o &lt;a href="https://gaia.wiki.br"&gt;GAIA&lt;/a&gt; (&lt;strong&gt;G&lt;/strong&gt;uia de &lt;strong&gt;A&lt;/strong&gt;cessibilidade de &lt;strong&gt;I&lt;/strong&gt;nterfaces Web com foco em aspectos do &lt;strong&gt;A&lt;/strong&gt;utismo) &lt;a href="#pagani2019"&gt;(PAGANI, 2019)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Este conjunto de recomendações acerca de &lt;em&gt;design&lt;/em&gt; digital inclusivo, que está disponível de forma &lt;a href="https://github.com/talitapagani"&gt;aberta e colaborativa&lt;/a&gt;, traz uma abordagem multidisciplinar de como desenvolver &lt;em&gt;websites&lt;/em&gt; e aplicativos mais acessíveis.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#princ%C3%ADpios"&gt;
  &lt;/a&gt;
  Princípios
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Vocabulário Visual e Textual:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://gaia.wiki.br/vocabulario-visual-e-textual/cores"&gt;G01&lt;/a&gt; (Cores); &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://gaia.wiki.br/vocabulario-visual-e-textual/textos"&gt;G02&lt;/a&gt; (Textos);&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://gaia.wiki.br/vocabulario-visual-e-textual/legibilidade"&gt;G03&lt;/a&gt; (Legibilidade);&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://gaia.wiki.br/vocabulario-visual-e-textual/compatibilidade-mundo-real"&gt;G04&lt;/a&gt; (Compatibilidade com mundo real).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Customização:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://gaia.wiki.br/customizacao/visual"&gt;G05&lt;/a&gt; (Customização visual);&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://gaia.wiki.br/customizacao/informacional"&gt;G06&lt;/a&gt; (Customização informacional);&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://gaia.wiki.br/customizacao/interfaces-flexiveis"&gt;G07&lt;/a&gt; (Interfaces flexíveis);&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://gaia.wiki.br/customizacao/modo-leitura"&gt;G08&lt;/a&gt; (Modo de leitura).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Engajamento:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://gaia.wiki.br/engajamento/eliminar-distracoes"&gt;G09&lt;/a&gt; (Eliminar distrações);&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://gaia.wiki.br/engajamento/interface-minimalista"&gt;G10&lt;/a&gt; (Interface minimalista);&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://gaia.wiki.br/engajamento/organizacao-visual"&gt;G11&lt;/a&gt; (Organização visual);&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://gaia.wiki.br/engajamento/forneca-instrucoes"&gt;G12&lt;/a&gt; (Forneça instruções).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Representações Redundantes:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://gaia.wiki.br/representacoes-redundantes/multiplos-formatos"&gt;G13&lt;/a&gt; (Múltiplos formatos);&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://gaia.wiki.br/representacoes-redundantes/equivalentes-textuais"&gt;G14&lt;/a&gt; (Equivalentes textuais);&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://gaia.wiki.br/representacoes-redundantes/legendas"&gt;G15&lt;/a&gt; (Legendas).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Multimídia:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://gaia.wiki.br/multimidia/mutiplas-midias"&gt;G16&lt;/a&gt; (Múltiplas mídias;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://gaia.wiki.br/multimidia/ampliacao-de-imagens"&gt;G17&lt;/a&gt; (Ampliação de imagens);&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://gaia.wiki.br/multimidia/evite-sons-perturbadores"&gt;G18&lt;/a&gt; (Evite sons perturbadores).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Visibilidade do Estado do Sistema:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://gaia.wiki.br/visibilidade-do-estado-do-sistema/instrucoes-de-interacao"&gt;G19&lt;/a&gt; (Instruções de interação);&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://gaia.wiki.br/visibilidade-do-estado-do-sistema/reverter-acoes"&gt;G20&lt;/a&gt; (Reverter ações);&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://gaia.wiki.br/visibilidade-do-estado-do-sistema/numeros-de-tentativas"&gt;G21&lt;/a&gt; (Número de tentativas).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Reconhecimento e Previsibilidade:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://gaia.wiki.br/reconhecimento-e-previsibilidade"&gt;G22&lt;/a&gt; (Consistência);&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://gaia.wiki.br/reconhecimento-e-previsibilidade/aparencia-clicavel"&gt;G23&lt;/a&gt; (Aparência clicável);&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://gaia.wiki.br/reconhecimento-e-previsibilidade/feedback-de-interacao"&gt;G24&lt;/a&gt; (&lt;em&gt;Feedback&lt;/em&gt; de interação).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Navegabilidade:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://gaia.wiki.br/navegabilidade/navegacao-simples"&gt;G25&lt;/a&gt; (Navegação simples);&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://gaia.wiki.br/navegabilidade/evitar-redirecionamentos"&gt;G26&lt;/a&gt; (Evitar redirecionamentos).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Resposta às Ações:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://gaia.wiki.br/resposta-as-acoes/confirmacao-de-acoes"&gt;G27&lt;/a&gt; (Confirmação de ações).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Interação com Tela Sensível ao Toque:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://gaia.wiki.br/interacao-com-tela-sensivel-ao-toque"&gt;G28&lt;/a&gt; (Sensibilidade adequada).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;*&lt;/strong&gt; &lt;em&gt;Talita também é membro do grupo de especialistas em Acessibilidade Web do W3C Brasil.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#listaConteudo"&gt;Voltar para lista de conteúdo&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#projetando-para-acessibilidade"&gt;
  &lt;/a&gt;
  &lt;a id="projAcessibilidade"&gt;&lt;/a&gt; Projetando para acessibilidade
&lt;/h2&gt;

&lt;p&gt;Karwai Pun, &lt;em&gt;designer&lt;/em&gt; de interação, juntamente com sua equipe de acessibilidade do &lt;em&gt;Home Office Digital&lt;/em&gt;, empresa governal do Reino Unido, criou 6 cartazes do que fazer e não fazer com o propósito de abordar a acessibilidade digital do ponto de vista do &lt;em&gt;design&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Os pôsteres, que estão disponibilizados de forma &lt;a href="https://github.com/UKHomeOffice/posters"&gt;aberta e colaborativa&lt;/a&gt;, por meio da licença &lt;em&gt;&lt;a href="https://creativecommons.org/licenses/by-nc-sa/3.0/br"&gt;Creative Commons BY-NC-SA&lt;/a&gt;&lt;/em&gt;, são boas práticas de &lt;em&gt;design&lt;/em&gt; para acessibilidade, uma orientação geral, diretrizes gerais, sem a presença de textos excessivamente prescritivos, abordando os usuários das áreas: baixa visão, surdez, com deficiência auditiva, dislexia, deficiência física ou motora, espectro do autismo e de leitores de tela.&lt;/p&gt;

&lt;p&gt;Em cada pôster são informadas 10 dicas divididas equalitariamente em &lt;em&gt;"o que fazer"&lt;/em&gt;  e &lt;em&gt;"o que não fazer"&lt;/em&gt;. (&lt;a href="#karwai2016"&gt;KARWAI, 2016&lt;/a&gt;) (&lt;a href="#sales2017b"&gt;SALES, 2017b&lt;/a&gt;) &lt;strong&gt;*&lt;/strong&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--au28zmlV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmm1h4ut4kn32r115x83.png" alt="Imagem: Projetando para usuários com transtorno do espectro autista" title="Transtorno do espectro autista"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---vuS4JNl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j640z99yn3sxu7ldudym.png" alt="Imagem: Projetando para usuários de leitores de tela" title="Leitores de tela"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JAGK0NdZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5qjzza3v3ix8vhjjz82s.png" alt="Imagem: Projetando para usuários com baixa visão" title="Baixa visão"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JC7-dt0p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ioxs9mp8p4fzl3lq2ktm.png" alt="Imagem: Projetando para usuários com deficiência física ou motora" title="Deficiência física ou motora"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dwB9tpgn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/duxh28v5tvkxtfi0pycq.png" alt="Imagem: Projetando para usuários que são deficientes auditivos ou surdos" title="Deficientes auditivos ou surdos"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CxgxO4pN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k1cz9k4p24r4yeyun69m.png" alt="Imagem: Projetando para usuários com dislexia" title="Dislexia"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#projetando-para"&gt;
  &lt;/a&gt;
  Projetando para:
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1. Usuário com transtorno do espectro autista:&lt;/strong&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Fazer&lt;/th&gt;
&lt;th&gt;Não fazer&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;use cores simples&lt;/td&gt;
&lt;td&gt;use cores contrastantes brilhantes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;escreva de forma clara e simples&lt;/td&gt;
&lt;td&gt;usar figuras de linguagem ou expressões idiomáticas&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;usar frases e marcadores simples&lt;/td&gt;
&lt;td&gt;usar grandes blocos de textos&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;criar botões descritivos — por exemplo, “anexar arquivos”&lt;/td&gt;
&lt;td&gt;criar botões vagos ou imprevisíveis — por exemplo, "clique aqui"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;construir &lt;em&gt;layouts&lt;/em&gt; simples e consistentes&lt;/td&gt;
&lt;td&gt;construir &lt;em&gt;layouts&lt;/em&gt; complexos e desordenados&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmm1h4ut4kn32r115x83.png"&gt;Visualizar pôster&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Usuário de leitor de tela:&lt;/strong&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Fazer&lt;/th&gt;
&lt;th&gt;Não fazer&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;descrever imagens e fornecer transcrições para vídeo&lt;/td&gt;
&lt;td&gt;mostrar informações apenas em imagem ou vídeo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;construir um &lt;em&gt;layout&lt;/em&gt; linear e lógico&lt;/td&gt;
&lt;td&gt;espalhar conteúdo por toda a página&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;estrutura de código baseado em &lt;em&gt;HTML5&lt;/em&gt;
&lt;/td&gt;
&lt;td&gt;estrutura dependente do tamanho do texto e do posicionamento&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;construir para uso apenas do teclado&lt;/td&gt;
&lt;td&gt;forçar uso do &lt;em&gt;mouse&lt;/em&gt; ou da tela&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;escrever &lt;em&gt;links&lt;/em&gt; e títulos autodescritivos&lt;/td&gt;
&lt;td&gt;escrever &lt;em&gt;links&lt;/em&gt; e títulos não informativos — por exemplo, "clique aqui"&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j640z99yn3sxu7ldudym.png"&gt;Visualizar pôster&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Usuário com baixa visão:&lt;/strong&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Fazer&lt;/th&gt;
&lt;th&gt;Não fazer&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;usar bons contrastes e um tamanho de fonte legível&lt;/td&gt;
&lt;td&gt;use baixo contraste e tamanho de fonte pequeno&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;publicar todas as informações diretamente em páginas HTML&lt;/td&gt;
&lt;td&gt;"esconder" informações em arquivos para &lt;em&gt;download&lt;/em&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;usar combinação de cores, formas e texto&lt;/td&gt;
&lt;td&gt;usar apenas cor para transmitir significado&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;construir &lt;em&gt;layout&lt;/em&gt; linear e lógico garantindo boa leitura em ampliações&lt;/td&gt;
&lt;td&gt;espalhar conteúdo por toda a página e forçar usuário a rolar a tela em ampliações&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;construir botões e notificações dentro de um contexto&lt;/td&gt;
&lt;td&gt;separar ações do seu contexto&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5qjzza3v3ix8vhjjz82s.png"&gt;Visualizar pôster&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Usuário com deficiência física:&lt;/strong&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Fazer&lt;/th&gt;
&lt;th&gt;Não fazer&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;criar grandes áreas clicáveis&lt;/td&gt;
&lt;td&gt;necessidade de precisão&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;espaçamento entre campos de formulários&lt;/td&gt;
&lt;td&gt;agrupamento de interações próximas&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;projetar para usar apenas teclado ou voz&lt;/td&gt;
&lt;td&gt;conteúdo dinâmico que requer muito movimento do mouse&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;projetar para telas móveis e tocáveis em mente&lt;/td&gt;
&lt;td&gt;exibir mensagens em um curto período de tempo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fornecer atalhos&lt;/td&gt;
&lt;td&gt;cansar usuários com muita digitação e rolagem&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ioxs9mp8p4fzl3lq2ktm.png"&gt;Visualizar pôster&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Usuário com deficiência auditiva ou surdez:&lt;/strong&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Fazer&lt;/th&gt;
&lt;th&gt;Não fazer&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;escreva de forma clara e simples&lt;/td&gt;
&lt;td&gt;usar figuras de linguagem ou expressões idiomáticas&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;usar legendas e/ou fornecer transcrições para vídeos&lt;/td&gt;
&lt;td&gt;usar conteúdo apenas em áudio ou vídeo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;construir &lt;em&gt;layouts&lt;/em&gt; simples e consistentes&lt;/td&gt;
&lt;td&gt;construir &lt;em&gt;layouts&lt;/em&gt; complexos e desordenados&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dividir o conteúdo com subtítulos, imagens e vídeos&lt;/td&gt;
&lt;td&gt;construir longos blocos de conteúdo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;permitir que o usuário escolha o seu melhor meio e comunicação&lt;/td&gt;
&lt;td&gt;não permita que o telefone seja o único meio de comunicação para usuários&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/duxh28v5tvkxtfi0pycq.png"&gt;Visualizar pôster&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. Usuário com dislexia:&lt;/strong&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Fazer&lt;/th&gt;
&lt;th&gt;Não fazer&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Usar imagens e diagramas para acompanhar texto&lt;/td&gt;
&lt;td&gt;use grandes blocos de texto&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;alinhe textos a esquerda e manter a consistência do &lt;em&gt;layout&lt;/em&gt;
&lt;/td&gt;
&lt;td&gt;sublinhar palavras, usar itálico e escrever em maiúsculas&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;considere produzir materiais em outros formatos — por exemplo: áudio e vídeo&lt;/td&gt;
&lt;td&gt;forçar usuários a lembrar coisas de páginas anteriores — forneça lembretes e avisos&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mantenha o conteúdo curto, claro e simples&lt;/td&gt;
&lt;td&gt;depender de ortografia correta e precisa — forneça autocorreção ou sugestões&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;permitir que os usuários alterem o contraste entre plano de fundo e texto&lt;/td&gt;
&lt;td&gt;colocar muita informação em um só lugar&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k1cz9k4p24r4yeyun69m.png"&gt;Visualizar pôster&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;*&lt;/strong&gt; &lt;em&gt;Tradução dos cartazes para o Português realizada por Marcelo Sales&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="#listaConteudo"&gt;Voltar para lista de conteúdo&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#avaliadores-autom%C3%A1ticos-de-acessibilidade-na-web"&gt;
  &lt;/a&gt;
  &lt;a id="avaliadores"&gt;&lt;/a&gt; Avaliadores automáticos de acessibilidade na &lt;em&gt;web&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;Avaliar manualmente todas as páginas de um &lt;em&gt;site&lt;/em&gt; ou portal é uma tarefa cansativa, demorada, dependendo dos casos chegando a ser inviável. Por isso a existência dos avaliadores automáticos. São inúmeros os existentes; em &lt;a href="https://www.w3.org/WAI/ER/tools"&gt;Web Accessibility Evaluation Tools List&lt;/a&gt; a &lt;em&gt;w3.org&lt;/em&gt; apresenta uma lista com inúmeras ferramentas de avaliação de acessibilidade.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A avaliação de acessibilidade na &lt;em&gt;web&lt;/em&gt; é um processo que verifica o quão bem as aplicações podem ser acessadas, de forma satisfatória, por pessoas com diferentes deficiências. Essa avaliação busca indicar o quanto acessível é uma aplicação &lt;em&gt;web&lt;/em&gt;, além de apontar os problemas para a aplicação de correções. &lt;a href="#arnaut2017"&gt;(ARNAUT, 2017)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Abaixo são apresentadas algumas ferramentas automáticas gratuitas para avaliação de acessibilidade na &lt;em&gt;WEB&lt;/em&gt;:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Ferramenta&lt;/th&gt;
&lt;th&gt;Critério&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://asesweb.governoeletronico.gov.br"&gt;ASES&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;eMAG&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://www.tawdis.net"&gt;TAW&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;WCAG&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.webaccessibility.com"&gt;WEB accessibility&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;WCAG&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Dentre estas ferramentas, o ASES (Avaliador e Simulador de Acessibilidade em Sítios), disponibilizada para &lt;em&gt;WEB&lt;/em&gt; e também &lt;em&gt;Desktop&lt;/em&gt;, permite avaliar, simular e corrigir a acessibilidade de páginas, sítios e portais, seguindo as recomendações do Modelo de Acessibilidade em Governo Eletrônico (eMAG); foi desenvolvido em parceria entre o Departamento de Governo Eletrônico (DGE) e o Instituto Federal de Educação, Ciência e Tecnologia do Rio Grande do Sul (IFRS).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Os resultados das avaliações realizadas pelas ferramentas automáticas são apresentados na forma de um relatório que detalha as áreas problemáticas no sítio &lt;em&gt;web&lt;/em&gt;. &lt;a href="#arnaut2017"&gt;(ARNAUT, 2017)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#listaConteudo"&gt;Voltar para lista de conteúdo&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#crescimento-da-tem%C3%A1tica-acessibilidade"&gt;
  &lt;/a&gt;
  &lt;a id="crescimentoTematica"&gt;&lt;/a&gt; Crescimento da temática acessibilidade
&lt;/h2&gt;

&lt;p&gt;&lt;a href="#sousaLazzarin2014"&gt;Sousa e Lazzarin (2014)&lt;/a&gt;, em &lt;em&gt;A questão da acessibilidade digital na literatura dos anais do ENANCIB&lt;/em&gt;, investigaram a expansão de temáticas emergentes dentro do cenário da Ciência da Informação (CI), como a Acessibilidade Digital, focando nos trabalhos publicados nos Encontros Nacionais de Pesquisa e Pós-Graduação em CI (ENANCIB), período de 1994 à 2012, utilizando uma abordagem qualiquantitativa, e os resultados revelaram que nos últimos anos da pesquisa houve um crescimento exponencial na publicação de trabalhos com a temática acessibilidade.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Trabalhos publicados&lt;/th&gt;
&lt;th&gt;1994 à 1997&lt;/th&gt;
&lt;th&gt;1998 à 2001&lt;/th&gt;
&lt;th&gt;2002 à 2005&lt;/th&gt;
&lt;th&gt;2006 à 2009&lt;/th&gt;
&lt;th&gt;2010 à 2012&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Quantidade&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Por meio da ferramenta &lt;a href="https://books.google.com/ngrams"&gt;&lt;em&gt;Books Ngram Viewer&lt;/em&gt;&lt;/a&gt; da &lt;em&gt;Google&lt;/em&gt;, utilizando um alcance maior, de 1990 à 2019, é possível visualizar uma crescente nas ocorrências do termo &lt;em&gt;"web accessibility"&lt;/em&gt; encontrados em livros no idioma Inglês (EUA) *.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OkzXrYeG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m6rp8w56v689bs6bi9mx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OkzXrYeG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m6rp8w56v689bs6bi9mx.png" alt='Ocorrências do termo "web accessibility" encontrado em livros no idioma Inglês (EUA) de 1990 à 2019 na ferramenta Books Ngram Viewer do Google'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;No momento da pesquisa não tinha disponível o idioma Português&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Agora utilizando as palavras em Português ("acessibilidade + web") e em outra ferramenta do &lt;em&gt;Google&lt;/em&gt;, seu &lt;a href="//www.google.com.br"&gt;buscador&lt;/a&gt;, foi possível observar a ocorrência em torno de 46 milhões de sítios.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GbDFadTf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mxfl1trly4zekyzffkm7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GbDFadTf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mxfl1trly4zekyzffkm7.png" alt="Ocorrências das palavras acessibilidade + web no buscador do Google: mais de 46 milhões"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Observado os dados acima seria de se esperar um crescimento na implantação da acessibilidade nos sítios, já que temos muitos materiais abordado o assunto; mas na prática não é o que ocorre.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;BigData Corp&lt;/em&gt; e &lt;em&gt;Movimento Web para Todos&lt;/em&gt; visitaram em abril de 2020 os 14,65 milhões de endereços ativos da &lt;em&gt;web&lt;/em&gt; brasileira na época, com foco na experiência do usuário com algum tipo de deficiência, para avaliar os níveis de acessibilidade, comparado-os com os resultados da análise anterior realizada em agosto de 2019, e obtiveram resultados nada satisfatórios. &lt;a href="#webParaTodos2020"&gt;(WEB PARA TODOS, 2020)&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Para este estudo foram escolhidos três recursos de páginas &lt;em&gt;Web&lt;/em&gt;: imagens, &lt;em&gt;links&lt;/em&gt; e formulários, que se tornam barreiras ao acesso se não aplicados corretamente. Imagens sem descrição são barreiras para pessoas cegas conseguirem compreender o conteúdo da foto ou figura publicada. Formulários com problemas de acessibilidade dificultam o acesso de pessoas cegas e também de pessoas com mobilidade reduzida que não conseguem usar &lt;em&gt;mouse&lt;/em&gt;. A verificação de &lt;em&gt;markup&lt;/em&gt; do padrão do &lt;em&gt;W3C&lt;/em&gt; possibilita encontrar erros na estrutura da página que eventualmente trazem barreiras para pessoas com deficiência. Vale lembrar que outras barreiras não foram verificadas nesta pesquisa e podem estar presentes nas páginas. &lt;a href="#webParaTodos2020"&gt;(WEB PARA TODOS, 2020)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Abaixo seguem as estatísticas de alguns dos resultados apurados:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Categoria analisada&lt;/th&gt;
&lt;th&gt;ago/2019&lt;/th&gt;
&lt;th&gt;ago/2019&lt;/th&gt;
&lt;th&gt;abr/2020&lt;/th&gt;
&lt;th&gt;abr/2020&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Com problema&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Sem problema&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Com problema&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Sem problema&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Formulário &lt;em&gt;(forms)&lt;/em&gt;
&lt;/td&gt;
&lt;td&gt;52,38%&lt;/td&gt;
&lt;td&gt;47,62%&lt;/td&gt;
&lt;td&gt;55,19%&lt;/td&gt;
&lt;td&gt;44,81%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Links&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;83,56%&lt;/td&gt;
&lt;td&gt;16,44%&lt;/td&gt;
&lt;td&gt;93,65%&lt;/td&gt;
&lt;td&gt;6,35%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Imagens&lt;/td&gt;
&lt;td&gt;83,25%&lt;/td&gt;
&lt;td&gt;16,75%&lt;/td&gt;
&lt;td&gt;83,36%&lt;/td&gt;
&lt;td&gt;16,64%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Verificação de &lt;em&gt;markup&lt;/em&gt; do &lt;em&gt;W3C&lt;/em&gt;
&lt;/td&gt;
&lt;td&gt;95,18%&lt;/td&gt;
&lt;td&gt;4,82%&lt;/td&gt;
&lt;td&gt;97,22%&lt;/td&gt;
&lt;td&gt;2,78%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Mais detalhes podem ser obtidos em: &lt;a href="https://mwpt.com.br/numero-de-sites-que-falham-nos-testes-do-web-para-todos-cai-mas-ainda-preocupa"&gt;web para todos&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="#listaConteudo"&gt;Voltar para lista de conteúdo&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#considera%C3%A7%C3%B5es"&gt;
  &lt;/a&gt;
  &lt;a id="consideracoes"&gt;&lt;/a&gt; Considerações
&lt;/h2&gt;

&lt;p&gt;Aumentando a acessibilidade dos &lt;em&gt;sites&lt;/em&gt; melhora a navegação, as experiências para todos os usuários, não apenas para as pessoas que têm alguma deficiência, pois o &lt;em&gt;site&lt;/em&gt; estará mais bem feito; acessibilidade em &lt;em&gt;sites&lt;/em&gt; tem mais correlação com organização e boas práticas do que com elementos técnicos propriamente ditos.&lt;/p&gt;

&lt;p&gt;Mesmo havendo diretrizes de acessibilidade, como o &lt;em&gt;WCAG&lt;/em&gt; da &lt;em&gt;W3C&lt;/em&gt; e leis federais relacionadas à acessibilidade &lt;em&gt;web&lt;/em&gt;, ainda existem inúmeros &lt;em&gt;sites&lt;/em&gt; com problemas de acessibilidade. &lt;/p&gt;

&lt;p&gt;Conforme &lt;a href="#sousaLazzarin2014"&gt;Sousa e Lazzarin (2014)&lt;/a&gt;, "embora o poder da &lt;em&gt;Web&lt;/em&gt; esteja em sua universalidade, e sua idealização tenha tido como primeira concepção o objetivo de fornecer conteúdo a todas as pessoas, desenvolvedores de &lt;em&gt;websites&lt;/em&gt;, por inúmeros motivos – entre eles falta de formação na área e escassez de tempo – passaram a não seguir recomendações que facilitassem o acesso ao conteúdo com a utilização de produtos de &lt;em&gt;software&lt;/em&gt; não convencionais, como, por exemplo, os leitores de tela."&lt;/p&gt;

&lt;p&gt;No tocante aos usuários com autismo, que abrange um conjunto mais específico de acessibilidade, segundo &lt;a href="#pagani2016"&gt;Pagani (2016)&lt;/a&gt;, "a principal dificuldade é que profissionais de tecnologia tendem a não ter conhecimento sobre o assunto, e muitas empresas do setor não consideram estes usuários como parte do público-alvo dos projetos, o que é uma informação alarmante." E acrescenta, com base em pesquisa realizada com profissionais de tecnologia durante seu mestrado, que "84% não consideram ou consideram parcialmente pessoas com deficiências cognitivas em seus projetos. 75% dos que não consideram o fazem porque não têm conhecimento suficiente sobre essas deficiências para aplicar em seus projetos, e 54% dizem que a empresa em que atuam não considera que estes usuários seriam parte do público-alvo dos projetos."&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A mudança da &lt;em&gt;web&lt;/em&gt; brasileira em prol das pessoas com deficiências depende, basicamente, da adesão das empresas e instituições à causa. A transformação seria muito mais rápida se a legislação especificasse quais critérios de acessibilidade um &lt;em&gt;site&lt;/em&gt; deve atender. Por enquanto, a legislação nacional não passa de uma declaração de boa vontade do legislador, mas sem nenhuma aplicação prática, ressalta. &lt;a href="#webParaTodos2020"&gt;(WEB PARA TODOS, 2020)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Neste artigo foram mostradas iniciativas, diretrizes internacionais e nacionais, visando uma Internet mais universal; cada um abordando o assunto de uma maneira particular, mas todos chegando no mesmo objetivo, no mesmo resultado.&lt;/p&gt;

&lt;p&gt;O material apresentando não se aprofunda nas diretrizes, em como fazer, no passo a passo, o objetivo foi dar uma direção, um rumo, mostrar os conceitos principais para quem ainda não tinha pensado em uma &lt;em&gt;WEB&lt;/em&gt; inclusiva, instigar uma reflexão no leitor.&lt;/p&gt;

&lt;p&gt;&lt;a href="#listaConteudo"&gt;Voltar para lista de conteúdo&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#refer%C3%AAncias"&gt;
  &lt;/a&gt;
  &lt;a id="referencias"&gt;&lt;/a&gt; Referências
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a id="arnaut2017"&gt;&lt;/a&gt; ARNAUT, F. F. S. 2017. &lt;strong&gt;Acessibilidade web em sítios da rede federal de educação: uma avaliação dos Institutos Federais.&lt;/strong&gt; 87 f. Dissertação (Mestrado em Gestão e Tecnologia Aplicadas à Educação) – Setor de Educação, Universidade do Estado da Bahia, Salvador (BA), 2017. Disponível em: &amp;lt;&lt;a href="http://www.cdi.uneb.br/site/wp-content/uploads/2018/03/Dissertacao_Mestrado_Gestec_France.pdf"&gt;http://www.cdi.uneb.br/site/wp-content/uploads/2018/03/Dissertacao_Mestrado_Gestec_France.pdf&lt;/a&gt;&amp;gt;. Acesso em: 29 abr. 2021.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;BRASIL. &lt;strong&gt;ASES (Avaliador e Simulador de Acessibilidade em Sítios).&lt;/strong&gt; Disponível em: &amp;lt;&lt;a href="https://softwarepublico.gov.br/social/ases"&gt;https://softwarepublico.gov.br/social/ases&lt;/a&gt;&amp;gt;. Acesso em: 1 mai. 2021.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a id="brasil2014"&gt;&lt;/a&gt; BRASIL. 2014. &lt;strong&gt;eMAG - Modelo de Acessibilidade em Governo Eletrônico.&lt;/strong&gt; Disponível em: &amp;lt;&lt;a href="http://emag.governoeletronico.gov.br"&gt;http://emag.governoeletronico.gov.br&lt;/a&gt;&amp;gt;. Acesso em: 28 abr 2021.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a id="ibge2012"&gt;&lt;/a&gt; IBGE (Instituto Brasileiro de Geografia e Estatística). 2012. &lt;strong&gt;Cartilha do Censo 2010: Pessoas com Deficiência.&lt;/strong&gt; Disponível em: &amp;lt;&lt;a href="https://inclusao.enap.gov.br/wp-content/uploads/2018/05/cartilha-censo-2010-pessoas-com-deficienciareduzido-original-eleitoral.pdf"&gt;https://inclusao.enap.gov.br/wp-content/uploads/2018/05/cartilha-censo-2010-pessoas-com-deficienciareduzido-original-eleitoral.pdf&lt;/a&gt;. Acesso em: 28 abr. 2021.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a id="karwai2016"&gt;&lt;/a&gt; KARWAI, P. 2016. &lt;strong&gt;Dos and don'ts on designing for accessibility.&lt;/strong&gt; Disponível em: &amp;lt;&lt;a href="https://accessibility.blog.gov.uk/2016/09/02/dos-and-donts-on-designing-for-accessibility"&gt;https://accessibility.blog.gov.uk/2016/09/02/dos-and-donts-on-designing-for-accessibility&lt;/a&gt;&amp;gt;. Acesso em: 27 abr. 2021.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a id="mezzaroba2018"&gt;&lt;/a&gt; MEZZAROBA M. P.; ALMEIDA, T. C.; ULBRICHT, V. R.; VANZIN, T.; FADE, L. M. 2018. &lt;strong&gt;Acessibilidade em portais de Governo Eletrônico do Poder Judiciário.&lt;/strong&gt; Disponível em: &amp;lt;&lt;a href="https://www.infodesign.org.br/infodesign/article/view/369/280"&gt;https://www.infodesign.org.br/infodesign/article/view/369/280&lt;/a&gt;&amp;gt;. Acesso em: 28 abr. 2021. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a id="pagani2016"&gt;&lt;/a&gt; PAGANI, T. C. 2016. &lt;strong&gt;Acessibilidade Web Cognitiva - BrazilJS Conf 2016.&lt;/strong&gt; Disponível em: &amp;lt;&lt;a href="https://www.youtube.com/watch?v=igGOeem6y4w"&gt;https://www.youtube.com/watch?v=igGOeem6y4w&lt;/a&gt;&amp;gt;. Acesso em: 27 abr. 2021.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a id="pagani2019"&gt;&lt;/a&gt; PAGANI, T. C. 2019. &lt;strong&gt;GAIA: um Guia de Recomendações Sobre Design Digital Inclusivo Para Pessoas com Autismo.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a id="reis2011"&gt;&lt;/a&gt; REIS, A. 2011. &lt;strong&gt;Acessibilidade na Web para Deficientes Visuais - Parte 1/2.&lt;/strong&gt; Disponível em: &amp;lt;&lt;a href="https://www.youtube.com/watch?v=n0ISO5qe1Ao"&gt;https://www.youtube.com/watch?v=n0ISO5qe1Ao&lt;/a&gt;&amp;gt;. Acesso em: 27 abr. 2021.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a id="sales2017a"&gt;&lt;/a&gt; SALES, M. 2017a. &lt;strong&gt;Entendendo o WCAG - Recomendação 1.1 - Alternativas Textuais.&lt;/strong&gt; Disponível em: &amp;lt;&lt;a href="https://www.youtube.com/watch?v=wjZEPeTwVL4"&gt;https://www.youtube.com/watch?v=wjZEPeTwVL4&lt;/a&gt;&amp;gt;. Acesso em: 27 abr. 2021.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a id="sales2017b"&gt;&lt;/a&gt; SALES, M. 2017b. &lt;strong&gt;"O que fazer" e "o que não fazer" ao projetar para Acessibilidade.&lt;/strong&gt; Disponível em: &amp;lt;&lt;a href="https://uxdesign.blog.br/o-que-fazer-e-o-que-n%C3%A3o-fazer-ao-projetar-para-acessibilidade-7da75261fa7b"&gt;https://uxdesign.blog.br/o-que-fazer-e-o-que-n%C3%A3o-fazer-ao-projetar-para-acessibilidade-7da75261fa7b&lt;/a&gt;&amp;gt;. Acesso em: 27 abr. 2021.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a id="videoPalToolkit"&gt;&lt;/a&gt; SALES, M. 2018. &lt;strong&gt;Palestra: Acessibilidade Toolkit - Entendendo de uma vez por todas a WCAG.&lt;/strong&gt; Disponível em: &amp;lt;&lt;a href="https://www.youtube.com/watch?v=s2IKdGTbyIA"&gt;https://www.youtube.com/watch?v=s2IKdGTbyIA&lt;/a&gt;&amp;gt;. Acesso em: 27 abr. 2021.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a id="videoToolkit"&gt;&lt;/a&gt; SALES, M. 2019. &lt;strong&gt;Acessibilidade Toolkit: WCAG de forma simples.&lt;/strong&gt; Disponível em: &amp;lt;&lt;a href="https://www.youtube.com/watch?v=GBipzZwXxZg"&gt;https://www.youtube.com/watch?v=GBipzZwXxZg&lt;/a&gt;&amp;gt;. Acesso em: 27 abr. 2021.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a id="sales2020"&gt;&lt;/a&gt; SALES, M. 2020. &lt;strong&gt;Acessibilidade Toolkit: Entendendo de uma vez por todas a WCAG.&lt;/strong&gt; Disponível em: &amp;lt;&lt;a href="https://uxdesign.blog.br/acessibilidade-toolkit-entendendo-de-uma-vez-por-todas-a-wcag-e2714120d80"&gt;https://uxdesign.blog.br/acessibilidade-toolkit-entendendo-de-uma-vez-por-todas-a-wcag-e2714120d80&lt;/a&gt;&amp;gt;. Acesso em: 2 mai. 2021.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a id="sampaio2018"&gt;&lt;/a&gt; SAMPAIO, M. 2018. &lt;strong&gt;Entenda o WCAG 2.0 de forma simples e rápida.&lt;/strong&gt; Disponível em: &amp;lt;&lt;a href="https://blog.handtalk.me/wcag-2-0"&gt;https://blog.handtalk.me/wcag-2-0&lt;/a&gt;&amp;gt;. Acesso em: 29 de abr. 2021.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a id="sousaLazzarin2014"&gt;&lt;/a&gt; SOUSA, M. R. F.; F. A. LAZZARIN. 2014. &lt;strong&gt;A questão da acessibilidade digital na literatura dos anais do ENANCIB (1994-2012).&lt;/strong&gt; Disponível em: &amp;lt;&lt;a href="https://doaj.org/article/8de32ce920be4a1b831d1d8865f39b00"&gt;https://doaj.org/article/8de32ce920be4a1b831d1d8865f39b00&lt;/a&gt;&amp;gt;. Acesso em: 28 abr. 2021.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a id="toolkit2020"&gt;&lt;/a&gt; TOOLKIT. 2020. &lt;strong&gt;Acessibilida.de Toolkit.&lt;/strong&gt; Disponível em: &amp;lt;&lt;a href="https://github.com/acessibilidade/toolkit"&gt;https://github.com/acessibilidade/toolkit&lt;/a&gt;&amp;gt;. Acesso em: 1 mai. 2021.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a id="w3c_brasil2015"&gt;&lt;/a&gt; W3C BRASIL. 2015. &lt;strong&gt;Cartilha de acessibilidade na &lt;em&gt;web&lt;/em&gt;: &lt;em&gt;w3c&lt;/em&gt; brasil.&lt;/strong&gt; Fascículo I. Disponível em: &amp;lt;&lt;a href="http://www.w3c.br/pub/Materiais/PublicacoesW3C/cartilha-w3cbr-acessibilidade-web-fasciculo-I.html"&gt;http://www.w3c.br/pub/Materiais/PublicacoesW3C/cartilha-w3cbr-acessibilidade-web-fasciculo-I.html&lt;/a&gt;&amp;gt;. Acesso em: 28 abr. 2021.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a id="w3c_brasil2018"&gt;&lt;/a&gt; W3C BRASIL. 2018. &lt;strong&gt;Diretrizes de Acessibilidade para Conteúdo Web (WCAG) 2.1.&lt;/strong&gt; Disponível em: &amp;lt;&lt;a href="https://www.w3c.br/traducoes/wcag/wcag21-pt-BR"&gt;https://www.w3c.br/traducoes/wcag/wcag21-pt-BR&lt;/a&gt;&amp;gt;. Acesso em: 2 mai. 2021.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a id="w3c_brasil2020"&gt;&lt;/a&gt; W3C BRASIL. 2020. &lt;strong&gt;Cartilha de acessibilidade na &lt;em&gt;web&lt;/em&gt;: &lt;em&gt;w3c&lt;/em&gt; brasil.&lt;/strong&gt; Fascículo IV. Disponível em: &amp;lt;&lt;a href="https://www.w3c.br//pub/Materiais/PublicacoesW3C/cartilha-w3cbr-acessibilidade-web-fasciculo-IV.html"&gt;https://www.w3c.br//pub/Materiais/PublicacoesW3C/cartilha-w3cbr-acessibilidade-web-fasciculo-IV.html&lt;/a&gt;&amp;gt;. Acesso em: 28 abr. 2021.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a id="webParaTodos2020"&gt;&lt;/a&gt; WEB PARA TODOS. 2020. &lt;strong&gt;Número de sites que falham nos testes do Web para Todos cai, mas ainda preocupa.&lt;/strong&gt; Disponível em: &amp;lt;&lt;a href="https://mwpt.com.br/numero-de-sites-que-falham-nos-testes-do-web-para-todos-cai-mas-ainda-preocupa"&gt;https://mwpt.com.br/numero-de-sites-que-falham-nos-testes-do-web-para-todos-cai-mas-ainda-preocupa&lt;/a&gt;&amp;gt;. Acesso em: 1 mai. 2021.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="#listaConteudo"&gt;Voltar para lista de conteúdo&lt;/a&gt;&lt;/p&gt;

</description>
      <category>acessibilidade</category>
      <category>web</category>
      <category>site</category>
      <category>internet</category>
    </item>
    <item>
      <title>Start your own Fantasy Sports Platform like Dream11</title>
      <author>Santosh Devnath</author>
      <pubDate>Mon, 03 May 2021 07:23:14 +0000</pubDate>
      <link>https://dev.to/santosh3700/start-your-own-fantasy-sports-platform-like-dream11-4af2</link>
      <guid>https://dev.to/santosh3700/start-your-own-fantasy-sports-platform-like-dream11-4af2</guid>
      <description>&lt;p&gt;For the last 5 years, it's a boom in the fantasy sports platform. As you know the biggest company in this field is Dream11 who took this initiate. Dream11 started in 2008 and till now they have almost 30M+ user base. That's huge right.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#this-was-not-an-easy-start"&gt;
  &lt;/a&gt;
  This was not an easy start
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W9FspXTj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.incimages.com/uploaded_files/image/1920x1080/getty_179575244_2000133320009280110_182236.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W9FspXTj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.incimages.com/uploaded_files/image/1920x1080/getty_179575244_2000133320009280110_182236.jpg" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This was not an easy start for the Dream11 to make understand users, what is Fantasy Sports? How to play it? Literally, Dream11 runs a humongous advertisement to make to know it. It took 4 to 5 years just to make them know.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#patience-is-bitter-but-its-fruit-is-sweet"&gt;
  &lt;/a&gt;
  Patience is bitter, but its fruit is sweet
&lt;/h2&gt;

&lt;p&gt;Finally, after a long time, Dream11 get successful to elaborate their idea. And now they are the number one company in this field in India. Still, they are trying to reach as many as users and they continue investing in advertising.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dinner-is-ready"&gt;
  &lt;/a&gt;
  Dinner is Ready
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UoS5MVIu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k9fl2e6vcoesklvqi5y2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UoS5MVIu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k9fl2e6vcoesklvqi5y2.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So now for you, the market is ready and you just need to build your own Fantasy Sports Platform and need to manage it with your business knowledge.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#things-you-need-to-start-it"&gt;
  &lt;/a&gt;
  Things you need to Start it
&lt;/h2&gt;

&lt;p&gt;If you really understand this market and want to start your own Fantasy Sports Like Dream11 then you need a few basic things to start this. &lt;/p&gt;

&lt;p&gt;As I have experience of more than 3 years of this fantasy sports market so I will tell you what the necessary thing you need to start.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8vaCix3a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fziygiifnhwecjwjlucw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8vaCix3a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fziygiifnhwecjwjlucw.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A Website and two APPs (Android &amp;amp; IOS) for the user frontend.&lt;/li&gt;
&lt;li&gt;A Backend to manage the whole system with the role-based management system.&lt;/li&gt;
&lt;li&gt;Scorecard APIs.&lt;/li&gt;
&lt;li&gt;Employees to manage KYC, withdrawal, contest handling, match handling, customer support, and more.&lt;/li&gt;
&lt;li&gt;A server to host all the things on the internet.&lt;/li&gt;
&lt;li&gt;A server manager who can manage the server as it grows.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#dont-worry"&gt;
  &lt;/a&gt;
  Don't worry
&lt;/h2&gt;

&lt;p&gt;If you think that handling all the above things is not easy for you or you need a lot of time to manage all those stuff, then do not worry, I am always here to help you to achieve this. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#but-why-santosh-devnath"&gt;
  &lt;/a&gt;
  But why Santosh Devnath
&lt;/h2&gt;

&lt;p&gt;Haha, that's a good question. Why me? Because I have already helped to run a few fantasy platforms, and also I am already working with so many other businesses, so I understand the basics of the market and the most important thing the IT. &lt;/p&gt;

&lt;p&gt;I am running a fully experienced IT company, so you don't need to worry about how things will go.&lt;/p&gt;

&lt;p&gt;If you wanted to work with me then you can contact me&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Email - &lt;a href="mailto:santoshdevnath15@gmail.com"&gt;santoshdevnath15@gmail.com&lt;/a&gt;&lt;br&gt;
Whatsapp = Call = Telegram = +91 8077775266&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Fantasy sports has a big opportunity for the startup because the market is already ready for you. If you have the skills to run a business and have a basic idea of cricket, football, or any other sports, then you can run it in a very master way with your business expertise. &lt;/p&gt;

&lt;p&gt;You can hire software engineers too to build the whole online infrastructure, but it is really expensive. So that's why I am here. You can connect with me if you want more discussion.&lt;/p&gt;

&lt;p&gt;Having enjoyed this article, then share it with your community. &lt;/p&gt;

&lt;p&gt;And if you want to read my future articles then you can follow me too.&lt;/p&gt;

</description>
      <category>dream11</category>
      <category>fantasysports</category>
      <category>react</category>
      <category>flutter</category>
    </item>
    <item>
      <title>Introduction to JavaScript: Basics</title>
      <author>Neha Soni</author>
      <pubDate>Mon, 03 May 2021 06:49:16 +0000</pubDate>
      <link>https://dev.to/nehasoni__/introduction-to-javascript-basics-g6n</link>
      <guid>https://dev.to/nehasoni__/introduction-to-javascript-basics-g6n</guid>
      <description>&lt;p&gt;Hello, amazing people 👋,&lt;br&gt;&lt;br&gt;
In this blog article, I am going to explain the basics of javascript.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Let's get started.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#this-blog-post-will-cover"&gt;
  &lt;/a&gt;
  This Blog post will cover:
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- What is JavaScript?
- How JavaScript is different from other programming languages 
  like Java or C?
- How to include JavaScript in your HTML page?
- How to Write Comments in JavaScript?
- Variables in JavaScript
- Data types in JavaScript
- Operators in JavaScript
- Conditional Statements in JS
- Loops in JavaScript
- Functions in JavaScript 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;Before starting this article, you don't need any previous JavaScript knowledge, but you should have some familiarity with HTML and CSS.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://html.com/"&gt;Introduction to HTML&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.w3schools.com/css/css_intro.asp"&gt;Introduction to CSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#what-is-javascript"&gt;
  &lt;/a&gt;
  What is JavaScript?
&lt;/h2&gt;

&lt;p&gt;JavaScript is a scripting language used to create and control dynamic web content.&lt;br&gt;
It is an interpreted, lightweight object-oriented programming language that enables dynamic interactivity on websites. It can be anything from animated graphics to an automatically generated Facebook timeline. Once you have created your basic structure(HTML)  and elegant vibe(CSS), JavaScript makes your website dynamic(automatically updateable).&lt;/p&gt;

&lt;p&gt;If you are a software developer gravitated towards web development then you must learn javascript and once you have learned JavaScript there are many frameworks available which you can use to create multiple web applications. Nowadays javascript is also used in mobile app development, desktop app development, and game development. This opens many possibilities for you as a JavaScript developer.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-javascript-is-different-from-other-programming-languages-like-java-or-c"&gt;
  &lt;/a&gt;
  How JavaScript is different from other programming languages like Java or C++?
&lt;/h2&gt;

&lt;p&gt;The major difference is that JavaScript is a scripting language i.e it is not compiled and executed like C++ and java. It is dynamically typed whereas Java or C++ is statically typed. JavaScript is traditionally used to write scripts for web applications. The client receives the whole source of the script and the browser executes it - the browser has a JavaScript interpreter while the browser couldn't execute Java or C++ programs. Javascript does not support multithreading while java or C++ is a multi-threaded language.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Now, javascript can run on the server via Node.js.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-to-include-javascript-in-your-html-page"&gt;
  &lt;/a&gt;
  How to include JavaScript in your HTML page?
&lt;/h2&gt;

&lt;p&gt;JavaScript can either be embedded directly inside the HTML page or placed in an external script file and referenced inside the HTML page. There are three places to put javascript code-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;between head tag of HTML page&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Example-&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset="utf-8"&amp;gt;
    &amp;lt;title&amp;gt;Embedding JavaScript&amp;lt;/title&amp;gt;
    &amp;lt;script&amp;gt;
        document.getElementById("greet").innerHTML = "Hello World!";
    &amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div id="greet"&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;between body tag of HTML page&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset="utf-8"&amp;gt;
    &amp;lt;title&amp;gt;Embedding JavaScript&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div id="greet"&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;script&amp;gt;
        document.getElementById("greet").innerHTML = "Hello World!";
    &amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;In .js file(external javascript file)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Example-&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;index.html&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset="utf-8"&amp;gt;
    &amp;lt;title&amp;gt;Linking External JavaScript&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div id="greet"&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;button onclick="greet()"&amp;gt;Show message&amp;lt;/button&amp;gt; 
    &amp;lt;script src="script.js"&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;script.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function greet()
{
    document.getElementById("greet").innerHTML = "Hello World!";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#how-to-write-comments-in-javascript"&gt;
  &lt;/a&gt;
  How to Write Comments in JavaScript?
&lt;/h2&gt;

&lt;p&gt;Comments are a meaningful way to deliver messages. It is not necessary but recommended to use comments to add information about the code, warnings, or suggestions so that others can easily understand and interpret your code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Types of comments in javascript&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Single-line comment =&amp;gt; Single-line comments are represented by double forward slashes (&lt;code&gt;//&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;  
var x=1;  
var y=2;  
var z=x+y;              // It adds values of x and y variable  
document.write(z);      // prints sum of x and y  
&amp;lt;/script&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Multi-line comment =&amp;gt; It is represented by forward slash with an asterisk(&lt;code&gt;/*&lt;/code&gt;) then asterisk with forward slash(&lt;code&gt;*/&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
/*
The code below will change the heading with id = "myP" and the 
paragraph with id = "myP" in my web page:
*/
document.getElementById("myH").innerHTML = "My First Page";
document.getElementById("myP").innerHTML = "My first paragraph.";
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#variables-in-javascript"&gt;
  &lt;/a&gt;
  Variables in JavaScript
&lt;/h2&gt;

&lt;p&gt;Variable means anything that can vary. These are the containers for storing data values. Also, JavaScript variables are loosely typed which means it does not require a data type to be declared. There are some rules while declaring a variable in js:-&lt;br&gt;&lt;br&gt;
1.) variable name must starts letter (a to z or A to Z), underscore( _ ), or dollar( $ ) sign.&lt;br&gt;
2.) after the first letter we can use digits (0 to 9), for example- abc1&lt;br&gt;
3.) javascript variables are case sensitive(x and X are different variables)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example of JavaScript variables&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
Correct JavaScript variables=&amp;gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
var x=10;
var _value=1.1;
var flag1=true;
var Name;               //declaration of variable
Name="neha";            //initialization of variable
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Incorrect JavaScript variables=&amp;gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
var  123=30;  
var *aa=320;  
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are two types of variables in javascript:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.)&lt;/strong&gt; Local variables&lt;br&gt;
&lt;strong&gt;2.)&lt;/strong&gt; Global Variables&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#javascript-local-variable-gt"&gt;
  &lt;/a&gt;
  JavaScript local variable =&amp;gt;
&lt;/h3&gt;

&lt;p&gt;Local variables are the variables that are defined inside block or function. They have a local scope which means that they are accessible within the function or block.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example-&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;  
function fun()
{  
var x=10;    //local variable
console.log(x);   
}  
&amp;lt;/script&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#javascript-global-variable-gt"&gt;
  &lt;/a&gt;
  JavaScript global variable =&amp;gt;
&lt;/h3&gt;

&lt;p&gt;Global variables are the variables that are defined outside the functions or declared with a window object. They can be accessed from any function.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example-&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;  
var data=200;     //global variable  
function a()
{  
console.log(data); 
}  
function b()
{  
console.log(data); 
}  
a();               //calling JavaScript function  
b();  
&amp;lt;/script&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#data-types-in-javascript"&gt;
  &lt;/a&gt;
  Data types in JavaScript
&lt;/h2&gt;

&lt;p&gt;Data types basically specify what kind of data can be stored and manipulated within a program. JavaScript provides different data types to hold different types of values. In JS we don't need to specify the type of the variable because it is dynamically used by the JavaScript engine.&lt;br&gt;
Mainly there are two types of data types in javascript:-&lt;br&gt;&lt;br&gt;
&lt;strong&gt;1.)&lt;/strong&gt; Primitive data types&lt;br&gt;
&lt;strong&gt;2.)&lt;/strong&gt; Non-Primitive data types&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#primitive-data-types"&gt;
  &lt;/a&gt;
  Primitive data types:-
&lt;/h3&gt;

&lt;p&gt;Primitive data types can hold only one value at a time. There are five types of primitive data types in JS:-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iEpXpFRa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619252845495/2eo93cdro.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iEpXpFRa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619252845495/2eo93cdro.png" alt="Screenshot (197).png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#nonprimitive-data-types"&gt;
  &lt;/a&gt;
  Non-primitive data types:-
&lt;/h3&gt;

&lt;p&gt;Non-primitive data types can hold collections of values and more complex entities. There are mainly three types of non-primitive data types:-&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZGLG_bnX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619162112017/CCBnpMfmG.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZGLG_bnX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619162112017/CCBnpMfmG.png" alt="Screenshot (182).png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#operators-in-javascript"&gt;
  &lt;/a&gt;
  Operators in JavaScript
&lt;/h2&gt;

&lt;p&gt;Operators are special symbols used to perform operations on operands.  For example,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var a=10,b=20;
var sum=a+b;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, the &lt;code&gt;+&lt;/code&gt; operator that performs addition, and 'a' and 'b' are operands.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CxfMSVa6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619161821046/-8oruaIfm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CxfMSVa6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619161821046/-8oruaIfm.png" alt="Screenshot (179).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#javascript-arithmetic-operators"&gt;
  &lt;/a&gt;
  JavaScript Arithmetic Operators
&lt;/h3&gt;

&lt;p&gt;Arithmetic operators are used to perform arithmetic calculations. The arithmetic operators are as follows:-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S0gbUigD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619163530442/Xmaj1-sgX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S0gbUigD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619163530442/Xmaj1-sgX.png" alt="Screenshot (184).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#javascript-assignment-operators"&gt;
  &lt;/a&gt;
  JavaScript Assignment Operators
&lt;/h3&gt;

&lt;p&gt;Assignment operators are used to assign values to variables. The following are assignment operators in js:-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4iGbnQM0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619164140746/itG8_jWNg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4iGbnQM0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619164140746/itG8_jWNg.png" alt="Screenshot (185).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#javascript-comparison-operators"&gt;
  &lt;/a&gt;
  JavaScript Comparison Operators
&lt;/h3&gt;

&lt;p&gt;Comparison operators compare two values and return a boolean value, either &lt;strong&gt;true&lt;/strong&gt; or &lt;strong&gt;false&lt;/strong&gt;. The following are Comparison operators in js:-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2SHtB-uv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619165543820/R6yvOr5DL.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2SHtB-uv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619165543820/R6yvOr5DL.png" alt="Screenshot (187).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#javascript-bitwise-operators"&gt;
  &lt;/a&gt;
  JavaScript Bitwise Operators
&lt;/h3&gt;

&lt;p&gt;Bitwise operators perform operations on binary representations of numbers. The bitwise operators are as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RI6rgCJg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619170486373/T_xg9TlAl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RI6rgCJg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619170486373/T_xg9TlAl.png" alt="Screenshot (188).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#javascript-logical-operators"&gt;
  &lt;/a&gt;
  JavaScript Logical Operators
&lt;/h3&gt;

&lt;p&gt;Logical operators perform logical operations and return a boolean value, either true or false. The following are logical operators in js:-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GbVx0UUD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619171500674/7fDGnNoAO.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GbVx0UUD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619171500674/7fDGnNoAO.png" alt="Screenshot (190).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conditional-statements-in-js"&gt;
  &lt;/a&gt;
  Conditional Statements in JS
&lt;/h2&gt;

&lt;p&gt;Conditional statements control behavior in JavaScript and determine whether or not pieces of code can run.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#js-if-statement"&gt;
  &lt;/a&gt;
  JS if Statement
&lt;/h3&gt;

&lt;p&gt;The most common type of conditional statement is the &lt;strong&gt;if-else&lt;/strong&gt; statement. This statement only runs if the condition enclosed in parentheses () is true. There are three forms of if statement in JavaScript:-&lt;br&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If Statement&lt;/li&gt;
&lt;li&gt;If else statement&lt;/li&gt;
&lt;li&gt;if else if statement&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;If statement example&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;  
   var a=20;  
   if(a&amp;gt;=20)
   {  
      alert("value of a is greater and equal to 20");  
   }  
&amp;lt;/script&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;if-else statement example&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;  
   var a=20;  
   if(a&amp;gt;=20)
   {  
      alert("value of a is greater and equal to 20");  
   }  
   else
   {
      alert("value of a is less than 20"); 
   }
&amp;lt;/script&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;if-else if statement example&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;  
   var a=20;  
   if(a&amp;gt;20)
   {  
      alert("value of a is greater than 20");  
   }  
   else if(a==20)
   {
      alert("value of a is equal to 20");
   }
   else
   {
      alert("value of a is less than 20"); 
   }
&amp;lt;/script&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#js-switch-statement"&gt;
  &lt;/a&gt;
  JS switch Statement
&lt;/h3&gt;

&lt;p&gt;Switch statement is used to execute one code from multiple expressions. If there is a match, the associated block of code is executed and if there is no match, the default code block is executed.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Example:-&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;  
   var grade='C';  
   var result;  
   switch(grade){  
     case 'A':  
       result="A Grade";  
       break;  
     case 'B':  
       result="B Grade";  
       break;  
    case 'C':  
      result="C Grade";  
      break;  
    default:  
      result="No Grade";  
}  
alert(result);  
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#loops-in-javascript"&gt;
  &lt;/a&gt;
  Loops in JavaScript
&lt;/h2&gt;

&lt;p&gt;Loops are used for executing a block of statements repeatedly until a particular condition is satisfied. It makes the code compact. JavaScript supports different kinds of loops:&lt;br&gt;&lt;br&gt;
1.) for loop&lt;br&gt;
2.) for-in loop&lt;br&gt;
3.) while loop&lt;br&gt;
4.) do-while loop&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#js-for-loop"&gt;
  &lt;/a&gt;
  JS For loop
&lt;/h3&gt;

&lt;p&gt;The for loop iterates the elements for the fixed number of times. Syntax of &lt;code&gt;for&lt;/code&gt; loop is as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for(initialization; condition; increment)
{
     //code block to be executed
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Example:-&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
     for(i=0;I&amp;lt;10;i++)
     {
          document.write(i + " ")  
     }
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output:-&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;1 2 3 4 5 6 7 8 9&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#js-forin-loop"&gt;
  &lt;/a&gt;
  JS For-in loop
&lt;/h3&gt;

&lt;p&gt;The for-in loop iterates through the properties of an Object. Syntax of &lt;code&gt;for&lt;/code&gt; loop is as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for (key in object) {
  // code block to be executed
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Example:-&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
var user = "";
var person = {fname:"Neha", lname:"Soni", age:20}; 
var x;
for (x in person) {
  user += person[x] + " ";
}
document.write(user);
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output:-&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;Neha Soni 20&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#js-while-loop"&gt;
  &lt;/a&gt;
  JS while loop
&lt;/h3&gt;

&lt;p&gt;The while loop iterates through a block of code as long as a specified condition is true. Syntax of &lt;code&gt;while&lt;/code&gt; loop is as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;while (condition)  
{  
   // code to be executed  
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Example:-&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;  
var count=0;  
while (count&amp;lt;=5)  
{  
document.write(count + " ");  
count++;  
}  
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output:-&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;0 1 2 3 4 5&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#js-dowhile-loop"&gt;
  &lt;/a&gt;
  JS do-while loop
&lt;/h2&gt;

&lt;p&gt;A do-while loop is similar to a while loop with one exception that the code is executed at least once whether condition is true or false. Syntax of &lt;code&gt;do-while&lt;/code&gt; loop is as follows:-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;do
{  
   //code to be executed  
}while (condition);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Example:-&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;  
var i=1;  
do{  
document.write(i + "&amp;lt;br/&amp;gt;");  
i++;  
}while (i&amp;lt;=5);  
&amp;lt;/script&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output:-&lt;/strong&gt;&lt;code&gt;1 2 3 4 5&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you want to learn more about loops,  &lt;a href="https://data-flair.training/blogs/loop-in-javascript/"&gt;Click here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#functions-in-javascript"&gt;
  &lt;/a&gt;
  Functions in JavaScript
&lt;/h2&gt;

&lt;p&gt;Functions are one of the major pillars of JavaScript. It is a set of statements that performs some tasks or does some computation and then returns the result to the user. It helps you to divide a large program into small and makes a program a lot more efficient. The syntax of declaring a function is given below:-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function functionName(arg1, arg2, ...argN)
{  
 //code to be executed  
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Let’s first see the simple example of a function in JS that doesn't have any arguments.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;html&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;input type="button" onclick="msg()" value="call function"/&amp;gt; 

    &amp;lt;script&amp;gt;
      function msg(){              //function definition 
        alert("Hello amazing people!");   //create an alert in browser
      }
    &amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Function Parameters and Arguments=&amp;gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When you begin programming you may get confused between these two terms, but it is crucial to understand what they are and how are they different from each other.&lt;br&gt;
So Let's understand the difference between these two:-&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QCnTZVvA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619245459181/EgG16kRsK.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QCnTZVvA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619245459181/EgG16kRsK.png" alt="Screenshot (191).png"&gt;&lt;/a&gt;&lt;br&gt;
To learn more about parameters and arguments  &lt;a href="https://www.geeksforgeeks.org/javascript-function-parameters/"&gt;Click here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Function with Return Value=&amp;gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is an optional JavaScript statement that returns a value from the function. We use the keyword return, followed by the statement or expression we want to return.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;&lt;em&gt;Example:-&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;p&amp;gt;What is the value of PI?&amp;lt;/p&amp;gt;

Ans:-&amp;lt;span id="demo"&amp;gt;&amp;lt;/span&amp;gt;

&amp;lt;script&amp;gt;
document.getElementById("demo").innerHTML = getPI();

function getPI() {
  return Math.PI;
}
&amp;lt;/script&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note:- Return statement should be written in the last because it skips all code in the block written after that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Function Scope=&amp;gt;&lt;/strong&gt;&lt;br&gt;
As we know there are two types of variables in JS, local variables and global variables. Local variables are defined inside a function and cannot be accessed outside it. But a function can access any variable defined as a global variable.&lt;br&gt;&lt;br&gt;
&lt;em&gt;Let's understand exactly what I mean with the help of following code:&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;html&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;h3&amp;gt;Function Scope&amp;lt;/h3&amp;gt;

    &amp;lt;script&amp;gt;
      var num1 = 2;     //global variable
      document.write("Value of number 1 is " + num1 + "&amp;lt;/br&amp;gt;");  //global scope
      function parentFunction(){
        var num2 = 4;       //local variable
        num1 = 8;
        document.write("Number 1 is " + num1 + "&amp;lt;/br&amp;gt;");  //inside parent func.  
        document.write("Number 2 is " + num2 + "&amp;lt;/br&amp;gt;");  //local scope

        childFunction();      //child function called

        function childFunction(){      //nested function
          var num3 = 0;
          document.write("Number 2 is " + num2 + "&amp;lt;/br&amp;gt;");  // inside child func.
          document.write("Number 3 is " + num3 + "&amp;lt;/br&amp;gt;");  //local scope
        }
      }
      parentFunction(); //parent function called
    &amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output:-&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_o_gYWMW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619248613698/KXTCDVlFw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_o_gYWMW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619248613698/KXTCDVlFw.png" alt="Screenshot (193).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:-
&lt;/h2&gt;

&lt;p&gt;HTML is the language of web content, but JavaScript is the language of web functionality. It is one of the fastest evolving languages, in terms of practices, tooling, and ecosystem. It’s an incredibly exciting language to be using right now. &lt;/p&gt;

&lt;p&gt;In this blog, we have just scratched the surface of JavaScript. If you enjoyed learning and find it useful please do like and share so that, it reaches others as well 🤝&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading 😃
&lt;/h3&gt;

&lt;p&gt;I would ❤ to connect with you at  &lt;a href="https://twitter.com/nehasoni__"&gt;Twitter&lt;/a&gt;  |  &lt;a href="https://www.linkedin.com/in/neha-soni-70a6231b1/"&gt;LinkedIn&lt;/a&gt; | &lt;a href="https://github.com/nehasoni05"&gt;GitHub&lt;/a&gt;&lt;br&gt;
Let me know in the comment section if you have any doubt or feedback.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://data-flair.training/blogs/javascript-tutorial/"&gt;https://data-flair.training/blogs/javascript-tutorial/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.javatpoint.com/javascript-tutorial"&gt;https://www.javatpoint.com/javascript-tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/JavaScript_basics"&gt;https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/JavaScript_basics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>devops</category>
    </item>
    <item>
      <title>Learn DevOps Better and Faster!</title>
      <author>Davide Benvegnù</author>
      <pubDate>Mon, 03 May 2021 06:38:00 +0000</pubDate>
      <link>https://dev.to/n3wt0n/learn-devops-better-and-faster-3ake</link>
      <guid>https://dev.to/n3wt0n/learn-devops-better-and-faster-3ake</guid>
      <description>&lt;p&gt;There are many ways to learn DevOps, but the best one is learning by doing! In this live stream, we talk with Sid Palas (DevOps Directive) about using the Zone of Proximal Development to improve your DevOps skills.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/RlhlE3WcpVU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This is probably the best way to learn DevOps, and actually the best way to learn anything. Learn by practice (or learn by doing) and you will learn more!&lt;/p&gt;

&lt;p&gt;Learn DevOps better with these tips.&lt;/p&gt;

&lt;p&gt;Check Sid Palas out:&lt;br&gt;
► YouTube: DevOps Directive &lt;a href="https://www.youtube.com/c/DevOpsDirective"&gt;https://www.youtube.com/c/DevOpsDirective&lt;/a&gt;&lt;br&gt;
► Blog: &lt;a href="https://devopsdirective.com"&gt;https://devopsdirective.com&lt;/a&gt;&lt;br&gt;
► GitHub: &lt;a href="https://github.com/sidpalas"&gt;https://github.com/sidpalas&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devops</category>
      <category>learning</category>
      <category>live</category>
      <category>skills</category>
    </item>
    <item>
      <title>Are we all YAML engineers now?</title>
      <author>Dvir Segal</author>
      <pubDate>Mon, 03 May 2021 06:27:10 +0000</pubDate>
      <link>https://dev.to/dejavo/are-we-all-yaml-engineers-now-538j</link>
      <guid>https://dev.to/dejavo/are-we-all-yaml-engineers-now-538j</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c_3DKFmG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1024/0%2AyLW7GHOOakdTxUQA" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c_3DKFmG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1024/0%2AyLW7GHOOakdTxUQA" alt=""&gt;&lt;/a&gt;Photo by &lt;a href="https://unsplash.com/@louishansel?utm_source=medium&amp;amp;utm_medium=referral"&gt;Louis Hansel&lt;/a&gt; on &lt;a href="https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-is-yaml-and-how-it-works"&gt;
  &lt;/a&gt;
  What is YAML? And how it works?
&lt;/h4&gt;

&lt;p&gt;Recently I switched jobs, and as part of this change, I’ve been introduced to a whole new tech stack. RabbitMQ 🐰, Java Spring, Docker, etc. (meaning more subjects to write about 😂). Most of the technologies I use on a daily basis consume YAML as their configuration. In this post, I’ll try to illustrate what I’ve learned (and from where) while trying to understand this new world.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T9mVsU8M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/430/0%2A_as2PgoE1whljRRq.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T9mVsU8M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/430/0%2A_as2PgoE1whljRRq.jpg" alt=""&gt;&lt;/a&gt;Learn the YAML way — &lt;a href="https://www.memecreator.org/meme/hey-kid-wanna-format-some-yaml/"&gt;src&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#it-is-what-it-is"&gt;
  &lt;/a&gt;
  It is what it is 🤨
&lt;/h4&gt;

&lt;p&gt;YAML stands for &lt;strong&gt;Y&lt;/strong&gt; AML &lt;strong&gt;A&lt;/strong&gt; in’t &lt;strong&gt;M&lt;/strong&gt; arkup &lt;strong&gt;L&lt;/strong&gt; anguage, originally named Yet Another Markup Language. The name was chosen because it requires much less markup than other traditional languages, such as XML. It distinguishes it as more data-oriented rather than markup-oriented. &lt;a href="https://yaml.org/spec/"&gt;YAML spec&lt;/a&gt; says it better:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;YAML™ (rhymes with “camel”) is a human-friendly, cross language, Unicode based data serialization language designed around the common native data structures of agile programming languages.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#well-what-is-it-used-for"&gt;
  &lt;/a&gt;
  Well, what is it used for? 😒
&lt;/h4&gt;

&lt;p&gt;It has become widespread for writing configuration files because it uses a human-readable, intuitive, and flexible language. It can be used with almost any application that needs to send or store data (and has no code execution capabilities — Secure?). YAML is a superset of JSON, which means any valid JSON is a valid YAML file. It has several advantages over JSON; it can self-reference, support complex datatypes, embedded block literals, support comments, &lt;a href="https://www.json2yaml.com/yaml-vs-json"&gt;and more&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FXlchz6t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1024/1%2Ar4xnH5tf3qKh4kRZPtXPZQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FXlchz6t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1024/1%2Ar4xnH5tf3qKh4kRZPtXPZQ.png" alt=""&gt;&lt;/a&gt;JSON VS YAML&lt;/p&gt;

&lt;p&gt;Furthermore, I’ve recently learned that one of the most common usages for YAML in the java world is an autogenerated code using &lt;a href="https://swagger.io/docs/specification/2-0/what-is-swagger/"&gt;swagger&lt;/a&gt; (API deployment). YAML defines the classes, and swagger generates the code. But that is a separate story for a different post.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-does-it-work"&gt;
  &lt;/a&gt;
  How does it work? 💪🏻
&lt;/h3&gt;

&lt;p&gt;The basic building block of YAML documents is a key-value pair. The nesting is based on indentation (similar to Python), making it resistant to delimiter collision. Just keep in mind, whatever you do, DO NOT USE TABS. Yaml hates tabs, and it won’t work. Tip: use a YAML linter, whether an &lt;a href="http://www.yamllint.com/"&gt;online&lt;/a&gt; one or a &lt;a href="https://plugins.jetbrains.com/plugin/15349-yamllint"&gt;plugin&lt;/a&gt; in your &lt;a href="https://marketplace.visualstudio.com/items?itemName=redhat.vscode-yaml"&gt;IDE&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZJeU5UkF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1024/0%2A_ZJk9J6azqXo0riC.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZJeU5UkF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1024/0%2A_ZJk9J6azqXo0riC.jpg" alt=""&gt;&lt;/a&gt;Writing YAML — &lt;a href="https://i.redd.it/0lg04ovga0m11.jpg"&gt;src&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is insensitive to quotes and brackets, making special characters more easily defined, especially for strings. To better explain the above concepts, you can find below some simple examples, which I found essential to know when starting to use YAML:&lt;/p&gt;

&lt;p&gt;Variables are defined using a &lt;strong&gt;colon&lt;/strong&gt; and  &lt;strong&gt;space&lt;/strong&gt; :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;integer: 17 
string: "17" 
float: 17.0 
boolean: Yes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A list or array can be defined using an &lt;strong&gt;inline&lt;/strong&gt; format that’s similar to JSON or a conventional &lt;strong&gt;block&lt;/strong&gt;  format:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;-------- # To Do List in Block Format 

- Homework 
- Walk with the dog 
- Dog should eat homework  

-------- # To Do List in Inline Format 

[Homework, Walk with the dog, Dog should eat homework]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can denote a string with a | symbol, which keeps &lt;strong&gt;newlines&lt;/strong&gt; , or a &amp;gt; symbol, which &lt;strong&gt;folds&lt;/strong&gt;  them:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;data: |    
Each of these    
Newlines    
Will be broken up  

data: &amp;gt;    
This text is    
wrapped and will    
be formed into    
a single paragraph
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OFIITg7l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/474/0%2AdnEcv2X56KOBGGew" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OFIITg7l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/474/0%2AdnEcv2X56KOBGGew" alt=""&gt;&lt;/a&gt;Do you want to know more? -&lt;a href="http://4.bp.blogspot.com/-erLVwTj3cA4/UaFHnIiBFYI/AAAAAAAAYBQ/NQzrb7iyDiM/s1600/1+starship+troopers+2.jpg"&gt;src&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The YAML complete documentation can be found on its &lt;a href="https://yaml.org/spec/1.2/spec.html"&gt;official site&lt;/a&gt;. It is worth going over to be familiar with it. Also, there are plenty of online tutorials; I’ve found this one to be a great source:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/1uFVr15xDGg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#to-wrap-up"&gt;
  &lt;/a&gt;
  To Wrap Up 🌯
&lt;/h4&gt;

&lt;p&gt;YAML is a data-oriented language and a superset of JSON that comes with multiple built-in advantages. It became an industry standard for configuration files. But overall, it is human-readable, which makes it easy to use and maintain. Just be gentle with these whitespaces.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O-KpC0ec--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/400/0%2A2Eqc7HVTmNMiqP2-.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O-KpC0ec--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/400/0%2A2Eqc7HVTmNMiqP2-.jpg" alt=""&gt;&lt;/a&gt;YAML -&lt;a href="https://memegenerator.net/instance/52839223/i-know-kung-fu-i-know-yaml"&gt;src&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devops</category>
      <category>softwaredevelopment</category>
      <category>configuration</category>
      <category>yaml</category>
    </item>
    <item>
      <title>An Enhanced Shell With ZSH</title>
      <author>Simon</author>
      <pubDate>Mon, 03 May 2021 06:25:42 +0000</pubDate>
      <link>https://dev.to/simondosda/an-enhanced-shell-with-zsh-4lmf</link>
      <guid>https://dev.to/simondosda/an-enhanced-shell-with-zsh-4lmf</guid>
      <description>&lt;p&gt;When I started my first work as a developer, the rules were clear:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We request our employees to work on Unix systems so they get used to our servers environment.&lt;/p&gt;

&lt;p&gt;&lt;cite&gt;My New Boss&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Which meant I had to switch to Linux...&lt;/p&gt;

&lt;p&gt;Not that I never tried it before but every time I couldn't see a real benefit to it, while hardware recognition was often a problem and it lacked some software like the Adobe suite.&lt;/p&gt;

&lt;p&gt;So I jumped on the Linux bandwagon, ... &lt;em&gt;and I loved it!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When it comes to coding, Linux is amazing.&lt;br&gt;
You have incredible scripting functionalities and an easy use of main developer tools like git, node, python, docker, ...&lt;/p&gt;

&lt;p&gt;All of this is greatly due to the shell! While most of the humanity has totally forgotten about command line interfaces to the benefit of more accessible graphical user interfaces, the shell remains an incredible tool for developers seeking automation and efficiency.&lt;/p&gt;

&lt;p&gt;As one of our main tools, it would be too bad not to shape it to our needs. In this article I will present my current setup. I am very interested to know yours though, do not hesitate to share it in the comment section.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#meet-the-z-shell"&gt;
  &lt;/a&gt;
  Meet the Z shell
&lt;/h2&gt;

&lt;p&gt;While the default bash shell does a great job, there are several reasons to prefer its younger cousin, zsh.&lt;/p&gt;

&lt;p&gt;Among those, it comes with a better auto-completion feature, combined with a spelling correction and approximate completion when a command is entered.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MqspKFuj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/enpmxtwpki0z200xnnia.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MqspKFuj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/enpmxtwpki0z200xnnia.png" alt="zsh autocorrect"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;zsh spelling correction in action&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It also provides interesting usage features such as &lt;a href="https://linuxaria.com/howto/globbing-con-zsh"&gt;convenient search patterns using globbing&lt;/a&gt; or the use of &lt;em&gt;vi&lt;/em&gt; when typing a command (you can enable it with &lt;code&gt;set -o vi&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Last but not least, it provides a lot of customization of the prompt or functionalities with plugins, which I will come back to shortly.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-to-install-it-"&gt;
  &lt;/a&gt;
  How to install it ?
&lt;/h2&gt;

&lt;p&gt;Before starting to customize our shell, we need to set zsh as our default shell.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;chsh &lt;span class="nt"&gt;-s&lt;/span&gt; /bin/zsh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For customization, the easiest way is to use a framework, the most well known being &lt;a href="https://ohmyz.sh/"&gt;Oh My ZSH&lt;/a&gt;. You can install it with a simple command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl &lt;span class="nt"&gt;-L&lt;/span&gt; https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And... That's it!&lt;/p&gt;

&lt;p&gt;Now let's dive into the customization of our z shell.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#some-useful-plugins"&gt;
  &lt;/a&gt;
  Some useful plugins
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins"&gt;A lot of plugins&lt;/a&gt; are already downloaded by Oh My Zsh, you just need to enable the one you want by adding them to the plugins list of your zshrc file.&lt;/p&gt;

&lt;p&gt;Here are the plugins I use on my end:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/git"&gt;git&lt;/a&gt;: provides a set of shell aliases for git (&lt;code&gt;g: git&lt;/code&gt;, &lt;code&gt;gco: git checkout&lt;/code&gt;, &lt;code&gt;gcb: git checkout -b&lt;/code&gt;, ...).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/extract"&gt;extract&lt;/a&gt;: allows you to extract a file by doing &lt;code&gt;extract file.tar.gz&lt;/code&gt; (can be used with the option &lt;code&gt;-r&lt;/code&gt; to remove the original file). Much easier to remember than &lt;code&gt;tar zxvf file.tar.gz&lt;/code&gt;!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/virtualenv"&gt;virtualenv&lt;/a&gt;: displays the current python virtual environment name in the prompt&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/zsh-users/zsh-autosuggestions"&gt;zsh-autosuggestion&lt;/a&gt;: the one I can't live without anymore! It displays auto completion based on the previous commands typed. I use it with an extra configuration, &lt;code&gt;bindkey '^ ' forward-word&lt;/code&gt;, that allows you to accept a suggestion word for word by typing &lt;code&gt;ctrl + space&lt;/code&gt; (while hitting the right arrow accepts the complete line).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0cSDFjX1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hog63ewgkilx113a76ti.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0cSDFjX1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hog63ewgkilx113a76ti.png" alt="zsh-autosuggestion"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;zsh autosuggestion, once you have tried it, there is no coming back&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#a-custom-display"&gt;
  &lt;/a&gt;
  A custom display
&lt;/h2&gt;

&lt;p&gt;Oh My Zsh comes with a lot of &lt;a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes"&gt;predefined themes&lt;/a&gt; for your prompt, and you might just find the one you want there.&lt;/p&gt;

&lt;p&gt;This is how I started, but I was quickly frustrated. Either I liked the colors of one but not the information displayed, or I liked the display but something was missing and the colors were not to my taste.&lt;/p&gt;

&lt;p&gt;Trying several themes can be quite time consuming, so I decided to start from a theme I liked and customized it to get what suited me. In my case this is how it looks like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dNNIsFUj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8hoz36f0d4nu3pc31q2c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dNNIsFUj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8hoz36f0d4nu3pc31q2c.png" alt="zsh display"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is pretty straight forward. It displays (when relevant) the name of your python environment (as python is one of my main programming language), then the name of the computer, the local directory in relative format and the current git branch (when relevant as well).&lt;/p&gt;

&lt;p&gt;I like the simplicity and compactness of it: all the information that I need is here, on one line and with no loss of space. This is very personal and I strongly advise you to configure your own theme.&lt;/p&gt;

&lt;p&gt;For this, there's nothing easier, just go to the theme file that you want to modify (in my case &lt;em&gt;~/.oh-my-zsh/themes/geoffgraside.zsh-theme&lt;/em&gt;) and adapt it to your need. Here is what I came up with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;PROMPT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'%{$fg[red]%}$(virtualenv_prompt_info)%{$reset_color%}% %{$fg[cyan]%}%n%{$reset_color%}:%{$fg[green]%}%~%{$reset_color%}$(git_prompt_info) %(!.#.$) '&lt;/span&gt;
&lt;span class="nv"&gt;ZSH_THEME_GIT_PROMPT_PREFIX&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;" %{&lt;/span&gt;&lt;span class="nv"&gt;$fg&lt;/span&gt;&lt;span class="s2"&gt;[yellow]%}("&lt;/span&gt;
&lt;span class="nv"&gt;ZSH_THEME_GIT_PROMPT_SUFFIX&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;")%{&lt;/span&gt;&lt;span class="nv"&gt;$reset_color&lt;/span&gt;&lt;span class="s2"&gt;%}"&lt;/span&gt;&amp;lt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Each value is framed with &lt;code&gt;%{$fg[&amp;lt;color&amp;gt;]%}&amp;lt;value&amp;gt;{$reset_color%}&lt;/code&gt; to set the foreground color. I use &lt;code&gt;$(virtualenv_prompt_info)&lt;/code&gt; to display my virtual environment (thanks to the virtualenv plugin presented above), &lt;code&gt;%n&lt;/code&gt; to display the computer name and &lt;code&gt;%~&lt;/code&gt; for the relative path.&lt;/p&gt;

&lt;p&gt;For the display of the git branch name, I use &lt;code&gt;$(git_prompt_info)&lt;/code&gt; with a specific prefix and suffix that allows me to get rid of displaying &lt;code&gt;git:&lt;/code&gt; before the branch name.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I will stop here. There is much more to discover about zsh, and I hope I gave you a desire to take ownership of your shell.&lt;/p&gt;

&lt;p&gt;The best thing I can advise you is to give it a try and then progressively add functionalities that suit you.&lt;/p&gt;

</description>
      <category>tooling</category>
      <category>bash</category>
      <category>linux</category>
      <category>productivity</category>
    </item>
    <item>
      <title>React useEffect Hook Made Simple</title>
      <author>Alex Devero</author>
      <pubDate>Mon, 03 May 2021 06:15:39 +0000</pubDate>
      <link>https://dev.to/alexdevero/react-useeffect-hook-made-simple-50ha</link>
      <guid>https://dev.to/alexdevero/react-useeffect-hook-made-simple-50ha</guid>
      <description>&lt;p&gt;The React useEffect Hook helps you manage side-effects in functional React components. It also makes this task much easier than it used to be. In this tutorial you will learn about what useEffect hook is and how it works. You will also learn how to use it in your React applications.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction-to-react-useeffect-hook"&gt;
  &lt;/a&gt;
  Introduction to React useEffect hook
&lt;/h2&gt;

&lt;p&gt;If you are familiar with React class components you know there are lifecycle methods available to use. You can use these methods to execute code at a specific moment you need. You can execute your code only when on component's initial render. You can also execute it on very re-render of the component, or if only some data change.&lt;/p&gt;

&lt;p&gt;These lifecycle methods, along with other features of class components, don't work with functions. These methods don't exist in their scope or environment. React hooks made it possible to bring many of these features from classes to functional components so you can use them here as well.&lt;/p&gt;

&lt;p&gt;The React useEffect hook is a hook that brings the functionality of lifecycle methods to functional components. To make this easier, you can think about the useEffect hook as &lt;code&gt;componentDidMount&lt;/code&gt;, &lt;code&gt;componentDidUpdate&lt;/code&gt; and &lt;code&gt;componentWillUnmount&lt;/code&gt; lifecycle methods in one package.&lt;/p&gt;

&lt;p&gt;That said, there are some differences between useEffect hook and lifecycle method. One difference is that useEffect hook runs after render. It runs after the first render, and also after every next update. It doesn't run before it. This makes it easy to execute any code right after a component is rendered.&lt;/p&gt;

&lt;p&gt;Another difference is that, by default, useEffect hook runs after every render. Fortunately, there is a way to prevent this behavior. When you use the useEffect hook, there is an option you can use to say when you want the useEffect hook to run. The hook will than run only under correct conditions and ignore others.&lt;/p&gt;

&lt;p&gt;Another useful feature of useEffect hook is that it can also clean up after itself. This cleanup happens automatically before the hook is executed again. One example when cleanup can be handy is removing attached event listeners when you "change" page in your React application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-word-on-sideeffects"&gt;
  &lt;/a&gt;
  A word on side-effects
&lt;/h3&gt;

&lt;p&gt;The name useEffect is based on the idea of &lt;a href="https://dzone.com/articles/side-effects-1"&gt;side-effects&lt;/a&gt;. Put simply, side-effects are changes made by a function to anything other than inputs provided to that function. This usually means changes made to the outside world. Some examples of side-effects can be fetch requests and direct manipulation with DOM.&lt;/p&gt;

&lt;p&gt;Another example can be using timer functions like &lt;code&gt;setTimeout()&lt;/code&gt; and &lt;code&gt;setTimeout()&lt;/code&gt;. One problem can be synchronizing the rendering of a component with side-effect you want to make. These two things happen independently and component rendering is outside of your control. This is one thing the React useEffect hook is trying solve.&lt;/p&gt;

&lt;p&gt;The useEffect hook allows you to extract side-effects into a function that is provided and managed by React itself. All you have to do is to say what is the side-effect you want and when it should be executed. React will take care of the rest. This function provided and managed by React is the useEffect hook.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-syntax"&gt;
  &lt;/a&gt;
  The syntax
&lt;/h2&gt;

&lt;p&gt;The useEffect hook accepts two arguments. The first argument is a callback function. This callback function contains the code you want to execute. This is the side-effect you want to make. The useEffect hook executes this callback function after the component is rendered. The second argument is for array of dependencies.&lt;/p&gt;

&lt;p&gt;This argument is optional. Whether you use it or not will depend on when you want the useEffect hook to execute the callback function. Above, I mentioned that there is an option to specify when the useEffect hook should run. This array of dependencies is this option. By working with it you change how the useEffect hook behaves.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Syntax of useEffect hook:&lt;/span&gt;
&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;dependencies&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;


&lt;span class="c1"&gt;// Simple example:&lt;/span&gt;
&lt;span class="c1"&gt;// Import useEffect hook from React:&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Use useEffect hook:&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Execute some code.&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;

  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#dependencies-and-when-useeffect-runs"&gt;
  &lt;/a&gt;
  Dependencies and when useEffect runs
&lt;/h2&gt;

&lt;p&gt;The dependencies array is an optional argument. Nonetheless, it is a very powerful feature. By providing different values, or omitting it, you can fundamentally change when the useEffect hook will run. Dependencies give you three options for when the useEffect hook should run.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#no1-run-after-every-render"&gt;
  &lt;/a&gt;
  No.1: Run after every render
&lt;/h3&gt;

&lt;p&gt;THe first option is to run the useEffect hook after every render of your component. For this, omit the dependencies array and provide only the callback function. From now, every time React renders your component, it will also run the useEffect hook and execute the code inside it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Import useEffect hook from React:&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Use useEffect hook:&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Run something after every render.&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;= Omit the dependencies argument.&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#no2-run-after-initial-render"&gt;
  &lt;/a&gt;
  No.2: Run after initial render
&lt;/h3&gt;

&lt;p&gt;Another option is to run the useEffect hook only once, after the initial render. This is the very first render of the component. From now, if React re-renders the component, the useEffect hook will not run again.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Import useEffect hook from React:&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Use useEffect hook:&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Run something only after initial render.&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;= Pass [] as dependencies argument.&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#no3-run-when-specific-value-changes"&gt;
  &lt;/a&gt;
  No.3: Run when specific value changes
&lt;/h3&gt;

&lt;p&gt;The third and last option is to watch specific value and run the useEffect hook when this value changes. This value can be almost anything. It can be all component props or just one specific prop. It can be some variable. It can also be a state created with &lt;a href="https://blog.alexdevero.com/react-usestate-hook-in-action/"&gt;useState hook&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When you know what value you want to watch, you pass that value into the dependencies array. What if you want to watch more than one value? No problem. You can pass as many values to the dependencies array as you want. Then, when just one of these values changes, the useEffect hook will run.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Import useEffect and useState hooks from React:&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Create states:&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setAge&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;// Use useEffect hook:&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Run something only when props.isLoading prop,&lt;/span&gt;
    &lt;span class="c1"&gt;// name state or age state change.&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;= Pass props.isLoading, name, age as dependencies argument.&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#simple-useeffect-and-fetch-example"&gt;
  &lt;/a&gt;
  Simple useEffect and fetch example
&lt;/h2&gt;

&lt;p&gt;In the beginning, when we talked about side effects, I mentioned fetch requests. Fetching data is one thing that is done frequently. It is also one example where useEffect hook can be very handy. Let's create a simple component that will use the React useEffect hook to perform a simple fetching.&lt;/p&gt;

&lt;p&gt;We will use an &lt;a href="https://blog.alexdevero.com/javascript-async-await/"&gt;async function&lt;/a&gt; to fetch Reddit posts from specific reddit. Then, we will extract some information from received data and store them in its state. When all this is done and the data are ready, we will render all posts with authors in a simple list. Below is one example of how to do this.&lt;/p&gt;

&lt;p&gt;In this example, we will fetch the posts only on initial render. In a real app, you could add some value to dependencies array that you want to watch. For example, you could provide a way to change reddit from which to fetch posts. Then, you could watch for this and run the useEffect to fetch new posts, with modified URL to fetch.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Import useEffect and useState hooks from React:&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Create state for Reddit feed:&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;feed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setFeed&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt;

  &lt;span class="c1"&gt;// Use useEffect hook:&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Create async function to fetch Reactjs posts from Reddit:&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetchRedditFeed&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Make a request to fetch Reactjs posts from Reddit:&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;redditResponse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://www.reddit.com/r/reactjs.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="c1"&gt;// Check if data are available (response code is 200-299):&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;redditResponse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Translate received response (promise) to JSON:&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;redditJSON&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;redditResponse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="c1"&gt;// Extract title, author and post id:&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;redditJSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;

        &lt;span class="c1"&gt;// Save posts to feed state:&lt;/span&gt;
        &lt;span class="nx"&gt;setFeed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// Invoke the fetchRedditFeed function:&lt;/span&gt;
    &lt;span class="nx"&gt;fetchRedditFeed&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;= Run only on initial render.&lt;/span&gt;

  &lt;span class="c1"&gt;// Render a list of posts&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;feed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;feedItem&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;feedItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;feedItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; by &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;feedItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Note 1: You don't have to put the whole fetching function to useEffect hook. You can just as well put it outside it, and then only call it from the useEffect hook.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note 2: You can't use promises and async with useEffect hook directly (&lt;code&gt;(async () =&amp;gt; ...)&lt;/code&gt;). This is not supported and React will warn you if you try it. The reason is that useEffect callbacks are synchronous to prevent &lt;a href="https://medium.com/@slavik57/async-race-conditions-in-javascript-526f6ed80665"&gt;race conditions&lt;/a&gt;. If you want to make an async call inside the useEffect hook you still can.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What you can do is to use the async function inside the useEffect hook and call it. This is why we created another function, now async, inside the useEffect hook callback function and used it to make the fetch request. So, remember that the useEffect callback itself must be always synchronous ... but the content doesn't.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cleaning-up-sideeffects"&gt;
  &lt;/a&gt;
  Cleaning up side-effects
&lt;/h2&gt;

&lt;p&gt;One interesting feature of the useEffect hook is automatic cleanup. This cleanup allows you to execute code right before the next useEffect run or before the component unmounts. Some scenarios where this can be useful are removing attached event listeners, clearing timers and closing external subscriptions and connections.&lt;/p&gt;

&lt;p&gt;This cleanup is specified by a function and this function must be returned from the useEffect hook. This function can be a regular function, arrow function, and/or unnamed function. The only thing that is important is that it must be returned from the hook. Inside this function is a code you want to execute during the cleanup.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Syntax:&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Use useEffect hook:&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Do something on every render&lt;/span&gt;

    &lt;span class="c1"&gt;// Specify returned cleanup function:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Do something during cleanup procedure.&lt;/span&gt;
      &lt;span class="c1"&gt;// Clean up will happen before next run&lt;/span&gt;
      &lt;span class="c1"&gt;// of this hook and before component unmounts.&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;= Run on every render.&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="c1"&gt;// Example with event listener:&lt;/span&gt;
&lt;span class="c1"&gt;// Import useEffect hook from React:&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Use useEffect hook:&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Create function to invoke when window resizes:&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleResize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Log message when window is resized:&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Resize! New width is: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// Attach event listener for "resize" event to window:&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;resize&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleResize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;// Add cleanup function:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Remove event listener from window&lt;/span&gt;
      &lt;span class="c1"&gt;// when component unmounts:&lt;/span&gt;
      &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;handleResize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;= Run only on initial render&lt;/span&gt;

  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#one-is-not-necessarily-better"&gt;
  &lt;/a&gt;
  One is not necessarily better
&lt;/h2&gt;

&lt;p&gt;If you are coming from class components you might be used to having just one lifecycle method and one state. This approach is not necessary when it comes to React hooks and functional component. There is no rule saying that you have to use every hook only once. In fact, the opposite might be better.&lt;/p&gt;

&lt;p&gt;It is often better to use the same hook multiple times. Having multiple smaller states can help you make application state easier to work with. The same applies to useEffect hook. If you need to create multiple side-effects, don't be afraid of using multiple useEffect hooks.&lt;/p&gt;

&lt;p&gt;Using multiple useEffect to manage multiple side-effect can make your code more manageable, easier to read and work with.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Import useEffect and useState hooks from React:&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Create few states:&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setFirstName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLastName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setAge&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setEmail&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;// Use few useEffect hooks to manage multiple side-effects:&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Run something only on initial render.&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;= Pass [] as dependencies argument.&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Run something only when firstName and lastName change.&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;= Pass firstName and lastName as dependencies argument.&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Run something only when age changes.&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;= Pass age as dependencies argument.&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Run something only when email changes.&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;= Pass email as dependencies argument.&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion-react-useeffect-hook-made-simple"&gt;
  &lt;/a&gt;
  Conclusion: React useEffect Hook Made Simple
&lt;/h2&gt;

&lt;p&gt;The React useEffect hook provides a friendly way to work with side-effects in your React components. It also makes it easier to manage these side-effects and keep them synchronized with the component itself. I hope that this tutorial helped you understand what useEffect hook is, how it works and how to use it.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>JavaScript Project</title>
      <author>hanaxdo</author>
      <pubDate>Mon, 03 May 2021 06:13:29 +0000</pubDate>
      <link>https://dev.to/hanaxdo/javascript-project-483f</link>
      <guid>https://dev.to/hanaxdo/javascript-project-483f</guid>
      <description>&lt;p&gt;For my first project at Flatiron School, I was given a task to build a Single Page Application (SPA) by using only HTML, CSS, and JavaScript. The data had to be accessed from a public API. All communication would be through JSON fetch requests. Before coming up with a plan, we must understand what an API is. An API stands for Application Programming Interfaces. It provides an easier syntax to use by allowing difficult features to be more easy to use. After carefully planning my project, I started building my HTML file. It is used to format my structure of the application. Unfortunately, you don’t get to see your work come alive yet. Here’s where JavaScript comes in! JavaScript is an object orient programming language designed to allow users to create interactive and responsive web pages. Now here comes the fun part! Creating the CSS file allows you to customize the HTML elements by defining styles that includes the layout, the design, and much more. You can play around with the features until the application is the way you want it to be!&lt;/p&gt;

&lt;p&gt;Here is my full code:&lt;br&gt;
&lt;a href="https://github.com/hanaxdo/phase-1-javascript-project-mode"&gt;https://github.com/hanaxdo/phase-1-javascript-project-mode&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>css</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Why you should definitely use NgRx Store</title>
      <author>Armen Vardanyan</author>
      <pubDate>Mon, 03 May 2021 06:11:56 +0000</pubDate>
      <link>https://dev.to/this-is-angular/why-you-should-definitely-use-ngrx-2pf2</link>
      <guid>https://dev.to/this-is-angular/why-you-should-definitely-use-ngrx-2pf2</guid>
      <description>&lt;p&gt;When I &lt;a href="https://www.youtube.com/watch?v=UxDb0exmp5I&amp;amp;t=2171"&gt;&lt;em&gt;was a guest&lt;/em&gt;&lt;/a&gt; on &lt;a href="https://www.youtube.com/c/TechTalksWithSantosh"&gt;&lt;em&gt;Tech Talks with Santosh&lt;/em&gt;&lt;/a&gt;, a&lt;br&gt;
great talk show hosted by &lt;a href="https://twitter.com/santoshyadavdev"&gt;&lt;em&gt;Santosh Yadav&lt;/em&gt;&lt;/a&gt;, I expressed a very&lt;br&gt;
controversial opinion:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If your application is big enough to use Angular, it is big enough to use NgRx&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Of course, this is &lt;em&gt;my opinion,&lt;/em&gt; and in general this is an opinionated article, but I will try my best to provide arguments why I think it is right for &lt;em&gt;every&lt;/em&gt; Angular application to use NgRx&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-reward-is-much-larger-than-the-risk"&gt;
  &lt;/a&gt;
  &lt;strong&gt;The reward is much larger than the risk&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Of course, if you have a team of people that have never worked with NgRx, starting a new project using another technology (and a new way of thinking!) can seem like a big challenge; and surely, some aspects of reactive programming and Flux design pattern (and the need to use RxJS extensively) can be somewhat confusing, but my experience with NgRx made me think, that with some dedication it is possible to switch from an imperative mindset to functional programming. It is truly possible to come to a decent level of understanding of Flux (and NgRx) within several days, because:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Concepts are not as complex as they sound at first. Actions, Reducers and Effects are scary words, it seems, but in reality, an action is a unique object representing an event in state, a reducer is a pure function that changes the state according to an action (pure functions are especially easy to understand) and so on. In essence, learning NgRx is not &lt;strong&gt;very&lt;/strong&gt; easy, but it is not as challenging as learning an entire new framework like Angular itself; and definitely worth the time invested in it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Once one of the concepts is mastered, the next is much easier to understand. When you learn about actions, and then see them dispatched, it becomes easy to understand what a reducer is, then what a selector is, and after we have learned all of those concepts, it will be easy to understand Effects, and then suddenly we know NgRx and use on a daily basis.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: I would suggest &lt;strong&gt;not&lt;/strong&gt; using NgRx only when there is a lack of&lt;br&gt;
basic knowledge of RxJS; but if you know basic operators&lt;br&gt;
(map/filter/startWith) and Observable combination&lt;br&gt;
(combineLatest/mergeMap), you are good to go to start learning NgRx&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So basically NgRx is not as hard to learn as one might imagine, and learning it will yield immense benefits. So if your (or your teams) policy on NgRx is "it is too much overhead to learn and switch to it", then it is time to rethink that policy.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-reward-is-not-only-larger-than-the-risk-but-it-is-also-huge"&gt;
  &lt;/a&gt;
  &lt;strong&gt;The reward is not only larger than the risk, but it is also huge&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;NgRx allows us to have three important things in our applications:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;A single source of truth for all our data. This means we can easily understand where and when the data changed and how it affected our UI. Because of its centralized structure, problems are easy to detect: if the state changes in an unexpected way, then the problem is in the reducer function; if the state is transformed in a wrong way, then the problem is in the selector; and so on.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It provides a clear, almost mechanical pathway of solving frontend related challenges, making applications &lt;em&gt;extremely&lt;/em&gt; scalable. In other words, NgRx provides a simple, yet very strict structure for how our frontend application should function (even on the folder structure level). It also makes 90% of tasks and UI pieces very straightforward.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Because of its awesome devtools it is very easy to debug, follow, and understand when and where something went wrong.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Essentially these three points help us have an application that is as maintainable and scalable as possible. And this is not something theoretical - you will become convinced of this as soon as you get your first feature requirement change after a certain feature is already built. Imagine scenario: we have an app where once a user selects a value from a dropdown in one component, an HTTP request is performed, and if it is successful, another HTTP request should be performed and update a piece of UI in &lt;em&gt;another&lt;/em&gt; component. &lt;/p&gt;

&lt;p&gt;Now imagine changing the codebase according to this requirement in an application that does &lt;strong&gt;not&lt;/strong&gt; use NgRx. First we would need a transport mechanism to notify the other component of the dropdown value change (a service-with-a-subject or something like that), then we would need to subscribe to that notification in the other component (and don't forget to takeUntil to unsubscribe!), then inject a new data service into that component, perform the HTTP call, get the data, store in the local state, update UI. Lots of steps, is it not? &lt;/p&gt;

&lt;p&gt;Now imagine the same in NgRx: if the state is already selected in the second component, we would just need to dispatch another action in the corresponding Effects class (probably 1-3 lines of code); if not, then add a select method call (most probably just 1 line of code) and it is all done. Understandable, clean, easy to reason about, almost bug free.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#in-reality-angular-apps-with-ngrx-are-more-understandable"&gt;
  &lt;/a&gt;
  &lt;strong&gt;In reality, Angular apps with NgRx are more understandable&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Sometimes developers may think that introducing a new framework of thinking will just increase complexity and make applications harder to navigate and perceive.&lt;/p&gt;

&lt;p&gt;But the NgRx experience proves yet again that it is better to have more lines of code that are explicit and strict, rather than a short, but disorganized one. Without NgRx, the application's overall situation is not readily understandable. It is not clear, on what data the components depend, also, it is hard to tell only from code, how components affect each other. But with NgRx, the connections are very clear, data flows only from one place, through one place, and is immutable. All of this makes our applications very easy to get into; if you want to know how the state can change, take a look at action names; if you want to know exactly how, read the reducer function (which is usually very obvious - as most pure functions are); if you want to know which data is loaded from external sources, read an Effect.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#in-conclusion"&gt;
  &lt;/a&gt;
  &lt;strong&gt;In conclusion&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;NgRx is not just a library or a tool - it is a way of thinking, and before you start doing it, there is a learning curve to ascend, and concepts to accept; but in the end, when the learning process is done, you will find out how much it benefits your development process. In several months, it will be harder to do Angular &lt;em&gt;without&lt;/em&gt; NgRx.&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
