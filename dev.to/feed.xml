<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Add bookmark links to your headings to make your blog easy to reference</title>
      <author>Rob OLeary</author>
      <pubDate>Mon, 17 Jan 2022 18:40:33 +0000</pubDate>
      <link>https://dev.to/robole/add-bookmark-links-to-your-headings-to-make-your-blog-easy-to-reference-2dm7</link>
      <guid>https://dev.to/robole/add-bookmark-links-to-your-headings-to-make-your-blog-easy-to-reference-2dm7</guid>
      <description>&lt;p&gt;It is kind of an informal industry standard to have a bookmark link in the headings of a page. The link text is typically a link icon (🔗) or a hash symbol (#). The idea is that you can click this link and get an URL that points to that section of the page. It is a bit odd to click a link, have the page scroll down to the section exactly, and then copy the link from the address bar to share it with others. But that is what is done usually.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hcUxGMGc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9vj93l0r7au0sllwmaxg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hcUxGMGc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9vj93l0r7au0sllwmaxg.gif" alt="demonstration of clicking on bookmark link" width="590" height="569"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see how some websites have implemented the links in figure 1-0 below. GitHub only shows the link when you hover on the heading. CSS Tricks and Smashing Magazine always show the link, however the link text has a lower color contrast ratio than the rest of the text, but when you hover over it, it gets brighter. GitHub and CSS Tricks place the link at the very beginning of the heading, Smashing Magazine places it right at the end of the heading. Variations on the theme.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uITxt3Us--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hzcpqgr8bolb3gidpdf2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uITxt3Us--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hzcpqgr8bolb3gidpdf2.png" alt="simple cover image featuring a copy content icon" width="781" height="694"&gt;&lt;/a&gt;&lt;/p&gt;
Figure 1-0. Examples of bookmark links from around the web (GitHub, CSS Tricks, Smashing Magazine)



&lt;p&gt;Today, I will show you how you can write some code to add these links to a page. And I will offer an alternative version, why not just add a button that will copy the URL to the system clipboard for you?&lt;/p&gt;

&lt;p&gt;And now, there is a web specification that adds some &lt;a href="https://wicg.github.io/scroll-to-text-fragment/#navigating-to-text-fragment"&gt;query powers to text fragments&lt;/a&gt;, so you can reference &lt;em&gt;any&lt;/em&gt; part of a webpage in an URL, and you don't have to rely on the page-author to do anything for you!&lt;/p&gt;

&lt;p&gt;Let's explore these options.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-standard-way-a-bookmark-link"&gt;
  &lt;/a&gt;
  The "standard" way - a bookmark link
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/robjoeol/embed/rNGRLvW?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;N.B. Codepen runs code in a &lt;code&gt;iframe&lt;/code&gt;, so the bookmark links don't point to a valid external URL. If you run the same code in a page, the links are perfectly valid.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To create a bookmark, we add an unique ID to an element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"my-bookmark"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;How to create a bookmark&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Remember that there are a &lt;a href="https://stackoverflow.com/questions/70579/what-are-valid-values-for-the-id-attribute-in-html"&gt;few rules&lt;/a&gt; for a valid ID name:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it must contain at least one character,&lt;/li&gt;
&lt;li&gt;it cannot start with a number, and&lt;/li&gt;
&lt;li&gt;must not contain whitespaces (spaces, tabs, etc.).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To create a link to that heading, the URL must contain a text fragment that matches our ID. A text fragment is specified by a hash.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#my-bookmark"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Jump to the heading&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above example is only valid within the same page. You must use an absolute URL if you want to share it with others e.g. &lt;a href="https://www.roboleary.net/2022/01/13/copy-code-to-clipboard-blog.html/#my-bookmark"&gt;https://www.roboleary.net/2022/01/13/copy-code-to-clipboard-blog.html/#my-bookmark&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So, to create bookmark links for all of our headings, we need to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add unique IDs to all of our headings except &lt;code&gt;h1&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Insert a link into these headings, set the &lt;code&gt;href&lt;/code&gt; to an absolute URL that includes the ID as a text fragment.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's write the code then!&lt;/p&gt;

&lt;p&gt;We can get all of our headings with &lt;code&gt;document.querySelectorAll("h2, h3, h4, h5, h6")&lt;/code&gt;. We want to loop through each of these headings and add an &lt;code&gt;id&lt;/code&gt;. We must come up with a way to create an unique ID for each heading, a common way to do this is to use the text of the heading to generate a "slug" (that's what the cool kids call it). We will discuss the &lt;code&gt;slugify&lt;/code&gt; function in more detail below.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A slug is a human-readable, unique identifier, used to identify a resource instead of a less human-readable identifier like an id. You use a slug when you want to refer to an item while preserving the ability to see, at a glance, what the item is.&lt;/p&gt;

&lt;p&gt;-- &lt;a href="https://itnext.io/whats-a-slug-f7e74b6c23e0"&gt;What’s a slug and why would I use one? by Dave Sag&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For each heading, we must create an anchor element (&lt;code&gt;a&lt;/code&gt;) and set its &lt;code&gt;href&lt;/code&gt; attribute to the current URL plus the slug as a text fragment. We use the global object &lt;code&gt;window.location&lt;/code&gt; to get the page's URL info. We build our own URL from the pieces rather than use &lt;code&gt;window.location.href&lt;/code&gt;. We do this because &lt;code&gt;window.location.href&lt;/code&gt; includes the text fragment, if someone were to follow a link with a text fragment to the page and we used &lt;code&gt;window.location.href&lt;/code&gt; in our code, we would create a bookmark link with 2 text fragments. Not the outcome we want! Once the link is created correctly, we append it to the heading.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;headings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;h2, h3, h4, h5, h6&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// we construct this URL ourselves to exclude the text fragment&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;currentURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;protocol&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;//&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;host&lt;/span&gt;&lt;span class="p"&gt;}${&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pathname&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;headings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;slugify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bookmarkLink&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;bookmarkLink&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;bookmarkLink&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;href&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;currentURL&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;#&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bookmarkLink&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In our &lt;code&gt;slugify&lt;/code&gt; function, we want to generate a slug that has no whitespace, and does not have any unwanted punctuation characters. While all punctuation characters are allowed in an &lt;code&gt;id&lt;/code&gt; name, it is common practice to only include hyphens and underscores, probably for the sake of readability. We can use a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions"&gt;regular expression (regex)&lt;/a&gt; in the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace"&gt;replace() function&lt;/a&gt; to remove the unwanted charcters, and replace any spaces with hyphens. I will use something similar to GitHub's algorithm, which uses a weird-looking regex, but no doubt it has been battle-tested by now!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;slugify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Everything except our "safe" characters&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PUNCTUATION_REGEXP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;[^\p&lt;/span&gt;&lt;span class="sr"&gt;{L}&lt;/span&gt;&lt;span class="se"&gt;\p&lt;/span&gt;&lt;span class="sr"&gt;{M}&lt;/span&gt;&lt;span class="se"&gt;\p&lt;/span&gt;&lt;span class="sr"&gt;{N}&lt;/span&gt;&lt;span class="se"&gt;\p&lt;/span&gt;&lt;span class="sr"&gt;{Pc}&lt;/span&gt;&lt;span class="se"&gt;\-&lt;/span&gt;&lt;span class="sr"&gt; &lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;/gu&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PUNCTUATION_REGEXP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/ /g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is a literal description of the &lt;code&gt;PUNCTUATION_REGEXP&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;" Globally match a single character not present in the list below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;\p{L}&lt;/em&gt;: any kind of letter from any language,&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;\p{M}&lt;/em&gt;: a character intended to be combined with another character (e.g. accents, umlauts, enclosing boxes, etc.),&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;\p{N}&lt;/em&gt;: any kind of numeric character in any script,&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;\p{Pc}&lt;/em&gt;: a punctuation character such as an underscore that connects words,&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;\-&lt;/em&gt;: a hyphen,&lt;/li&gt;
&lt;li&gt;and an empty space (which we replace later)."&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We use the regex to remove anything that is not in our "character safe list". When you use a regex which contains &lt;a href="https://javascript.info/regexp-unicode#unicode-properties-p"&gt;unicode properties&lt;/a&gt;, any expression in the form of &lt;code&gt;\p{}&lt;/code&gt;, you must use the &lt;code&gt;/u&lt;/code&gt; flag also. We do a second replacement to replace spaces with a hyphen.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#an-alternative-way-a-copy-bookmark-link-to-clipboard-button"&gt;
  &lt;/a&gt;
  An alternative way - a "copy bookmark link to clipboard" button
&lt;/h2&gt;

&lt;p&gt;My proposed alternative is to use a button instead of a link. The button copies the bookmark URL to the system clipboard. A &lt;a href="https://material.io/components/snackbars"&gt;snackbar message&lt;/a&gt; informs the user that the URL has been copied to the clipboard. I think this is a more convenient way of doings things.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/robjoeol/embed/JjrzLLJ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;N.B. Codepen runs code in a &lt;code&gt;iframe&lt;/code&gt;, so the bookmark links don't point to a valid external URL. If you run the same code in a page, the links are perfectly valid.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;copyLink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;srcElement&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;data-href&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clipboard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;showSnackbar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can asynchronously write to the system clipboard through the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Clipboard_API"&gt;Clipboard API&lt;/a&gt;, using the &lt;code&gt;writeText()&lt;/code&gt; function. The &lt;a href="https://caniuse.com/async-clipboard"&gt;browser support is excellent (for writing to the clipboard)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We show a snackbar message when the button is pressed. We use the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API/Using_the_Web_Animations_API"&gt;Web Animations API&lt;/a&gt; to fade in and move the snackbar further into view. The Web Animations API is a cleaner of way of running a once-off animation, the alternative is to add a class that has an associated CSS animation, and then remove it via &lt;code&gt;setTimeout()&lt;/code&gt; a few seconds later. You can see the function &lt;code&gt;showSnackbar()&lt;/code&gt; for the details.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#text-fragment-directive-specification"&gt;
  &lt;/a&gt;
  Text fragment directive specification
&lt;/h2&gt;

&lt;p&gt;Text fragments &lt;a href="https://wicg.github.io/scroll-to-text-fragment/#navigating-to-text-fragment"&gt;can now include a text query&lt;/a&gt;. Upon clicking a link with a text query, the browser finds that text in the webpage, scrolls it into view, and highlights the matched text. This enables links to specify which portion of the page is being linked to, without relying on the page-author annotating the page with ID attributes.&lt;/p&gt;

&lt;p&gt;The fragment format is: &lt;code&gt;#:~:text=\[prefix-,]textStart[,textEnd\][,-suffix]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In its simplest form, the syntax is as follows: The hash symbol &lt;code&gt;#&lt;/code&gt; followed by :&lt;code&gt;~:text=&lt;/code&gt; and finally &lt;code&gt;textStart&lt;/code&gt;, which is the percent-encoded text I want to link to. Here is a simple example you can test in your browser to take you to the text "how do we get the text of the code element" from my last article:&lt;br&gt;
&lt;a href="https://www.roboleary.net/2022/01/13/copy-code-to-clipboard-blog.html#:%7E:text=how%20do%20we%20get%20the%20text%20of%20the%20code%20element?"&gt;https://www.roboleary.net/2022/01/13/copy-code-to-clipboard-blog.html#:~:text=how%20do%20we%20get%20the%20text%20of%20the%20code%20element?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---l-4XUxi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u86romqroo6evccc49nz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---l-4XUxi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u86romqroo6evccc49nz.jpg" alt="navigating to an URL with a text fragment showing the highlighted text in the body of the webpage" width="800" height="515"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can check out the article, &lt;a href="https://web.dev/text-fragments/#text-fragments"&gt;Boldly link where no one has linked before: Text Fragments&lt;/a&gt;, for further explanation and examples.&lt;/p&gt;

&lt;p&gt;At the moment, &lt;a href="https://caniuse.com/url-scroll-to-text-fragment"&gt;this feature is only available in Edge and Chrome&lt;/a&gt;. It is still early days, but I think this should be something that we start to use wholesale.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-word"&gt;
  &lt;/a&gt;
  Final word
&lt;/h2&gt;

&lt;p&gt;Having the ability to cross-reference specific parts of other webpages is an often overlooked feature of the web that is of great benefit to readers. You are saving a reader from foraging through a page to find the right section themselves - maybe they want to read more of the passage of text, or maybe they want to verify the source of a quotation. &lt;/p&gt;

&lt;p&gt;It does seem strange that we are still adding links to headings if the purpose is to provide someone with an URL to a section of a page. Why not add a button that will copy it to the clipboard instead, like I demonstrated? Or is there something am I missing? If there is, fill me in!&lt;/p&gt;

&lt;p&gt;I hope that more browsers implement the text fragment directive soon. It would be great to break the dependence of the reader on the page-author to add IDs to headings to enable referencing of sections. And along with that, it would be great if the awareness of this feature grew too, so that people would start using it regularly. I hope this article will go a little way to raising awareness!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>The importance of using Server-Side Rendering with Next.JS</title>
      <author>Ramon Pereira</author>
      <pubDate>Mon, 17 Jan 2022 18:30:34 +0000</pubDate>
      <link>https://dev.to/ramonpereira88/the-importance-of-using-server-side-rendering-with-nextjs-16h</link>
      <guid>https://dev.to/ramonpereira88/the-importance-of-using-server-side-rendering-with-nextjs-16h</guid>
      <description>&lt;p&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Server-Side Rendering (SSR) is a resource provided by Next.JS meaning that for each request made by the user, a server-side HTML will be generated and that content will be pre-rendered. So when a request for a specific page is made, the process of building that page done by the browser will be faster. This set of steps of requesting content from the database, building the page by the browsers and delivering it to the client is Client-Side Rendering.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What are the advantages of using Server-Side Rendering with Next.JS?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The main advantages are: the faster response in page loading, the SEO (Search Engine Optimization) and the Web Crawlers that are the bots responsible for improving the indexing in the search engines of browsers such as Google, Bing, thus providing a better experience for the user who will have less waiting time and your page or site will probably appear at the top of searches.&lt;/p&gt;

&lt;p&gt;Please have in mind that Next.JS also offers SSG (Static Site Generation) which is more recommended for smaller projects and that will not have that many components, which require so many specific requests to serve them, this can affect the performance of your application.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How does the SSR happen?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Using a function called getServerSideProps() by convention, Next.JS will understand that by using the above name in the function, server-side rendering should and will happen. The data of the function is passed via props that can be consumed in the function below in the same JS or JSX file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--blbfHKOF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hj8m3p9hoews4fpl2so0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--blbfHKOF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hj8m3p9hoews4fpl2so0.png" alt="Snippet of code showing how to implement Server-Side Rendering in Next.JS" width="880" height="681"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The content generated by the code above:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1uZr1QlJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/njhx8mpveur6ut4sig54.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1uZr1QlJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/njhx8mpveur6ut4sig54.JPG" alt="Result in the browser of the code above showing Server-Side Rendering in action" width="880" height="321"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Terminal in VSCode:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wUg_X6zN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/glkf5xtos3gg9wzz6g3v.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wUg_X6zN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/glkf5xtos3gg9wzz6g3v.JPG" alt="VSCode terminal showing Server-Side Rendering in the console" width="880" height="323"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is Search Engine Optimization (SEO)?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Taking into account that this is the main reason for using Server-Side Rendering with Next.JS, what is this Search Engine Optimization (SEO)? Well, that is a set of good practices that, if executed, make your page or WEB application better indexed in Google, Bing or other search engines, and that might lift your page or application to be in the first options to be shown for the user that makes the search for some content. The better structured, semantically organized with the correct tags, meta tags, titles, sections, alt attributes and ARIA (Accessible Rich Internet Applications) and that will provide a better experience when the subject is accessibility. The better your page is structured the better it will be evaluated by these browser search engines.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lighthouse: How do I know if my page or site indexing is good?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Lighthouse is a tool developed by Google that analyzes web pages and applications providing metrics on performance, best practices, accessibility, SEO or if the application or page is a PWA (Progressive Web App) and even simulates a desktop and mobile application. It’s worth checking out the results. You can find Lighthouse in Chrome Dev Tools under one of the tabs, but not just in Google Chrome, in many browsers based on Google Chrome. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nK9Fipkz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1m5kk7ts7swkgod3szu7.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nK9Fipkz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1m5kk7ts7swkgod3szu7.JPG" alt="Image showing Lighthouse in Chrome Developer Tools" width="880" height="205"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After clicking on ‘Generate Report’, a page analysis process will be started and a report will be generated.&lt;br&gt;
We analyzed Vercel's website, which is the creator of the Next.JS framework, and these were the results:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tVM77fb7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bg4lagc9j5vuwd7bogdb.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tVM77fb7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bg4lagc9j5vuwd7bogdb.JPG" alt="Image showing results of the analysis made by Lighthouse on Vercel's website" width="880" height="354"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://vercel.com/blog/nextjs-server-side-rendering-vs-static-generation"&gt;https://vercel.com/blog/nextjs-server-side-rendering-vs-static-generation&lt;/a&gt; &lt;br&gt;
&lt;a href="https://blog.cod3r.com.br/server-side-rendering-x-client-side-rendering"&gt;https://blog.cod3r.com.br/server-side-rendering-x-client-side-rendering&lt;/a&gt; &lt;br&gt;
&lt;a href="https://medium.com/swlh/server-side-rendering-with-next-js-56f84f98f9bd"&gt;https://medium.com/swlh/server-side-rendering-with-next-js-56f84f98f9bd&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ramon Pereira&lt;br&gt;
Frontend Developer&lt;/p&gt;

</description>
    </item>
    <item>
      <title>ELI5: Reactivity in Vue 3</title>
      <author>Morgenstern2573</author>
      <pubDate>Mon, 17 Jan 2022 18:22:22 +0000</pubDate>
      <link>https://dev.to/morgenstern2573/eli5-reactivity-in-vue-3-4o40</link>
      <guid>https://dev.to/morgenstern2573/eli5-reactivity-in-vue-3-4o40</guid>
      <description>&lt;p&gt;Reactivity. It's a popular buzzword. It's also one of the most convenient features of front-end frameworks.&lt;br&gt;
What is it exactly, and how does it work in Vue 3?&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#prerequisite-knowledge"&gt;
  &lt;/a&gt;
  Prerequisite Knowledge
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Basic JavaScript and JS objects&lt;/li&gt;
&lt;li&gt;Basic knowledge of Vue.js&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#what-is-reactivity"&gt;
  &lt;/a&gt;
  What is reactivity?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Reactivity is a programming paradigm that allows us to adjust to changes in a declarative manner. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Vue 3.x documentation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We say a value is reactive when it can update itself in response to changes in values it depends on. What do we mean by depends on? Let's take an example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let val1 = 2
let val2 = 3
let sum = val1 + val2

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The value of sum is always determined by the values of val1 and val2, so we say that sum depends on val1 and val2.&lt;/p&gt;

&lt;p&gt;What happens to sum when one of the values it depends on changes? In regular JavaScript, it stays the same.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(sum) // 5

val1 = 3

console.log(sum) // Still 5

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But if sum was reactive,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(sum) // 5

val1 = 3

console.log(sum) // Sum is 6!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The value of sum would change in response to the change in a value it depended on. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-vue-need-to-make-a-value-reactive"&gt;
  &lt;/a&gt;
  What does Vue need to make a value reactive?
&lt;/h2&gt;

&lt;p&gt;Vue needs to know:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;what dependencies that value has.&lt;/li&gt;
&lt;li&gt;when those dependencies change.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Vue also needs to be able to re-calculate values when their dependencies change.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-vue-knows-when-dependencies-change"&gt;
  &lt;/a&gt;
  How Vue knows when dependencies change
&lt;/h2&gt;

&lt;p&gt;Vue wraps the data object of all components with an &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy"&gt;ES6 Proxy&lt;/a&gt;.&lt;br&gt;
A proxy is an object that wraps a target object.&lt;/p&gt;

&lt;p&gt;This is important because all reactive values depend (directly or not) on the properties in a component's data object. &lt;/p&gt;

&lt;p&gt;Proxies allow you to intercept all requests to get or set properties of the target. They also let you run any code in response to those requests. &lt;/p&gt;

&lt;p&gt;Thanks to this, when code attempts to change one of the properties of a data object, Vue intercepts it and is aware of it.&lt;/p&gt;

&lt;p&gt;Vue can then re-calculate any functions that depend on that value. But how does Vue know which functions depend on which values?&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-vue-knows-which-dependencies-belong-to-a-value"&gt;
  &lt;/a&gt;
  How Vue knows which dependencies belong to a value
&lt;/h2&gt;

&lt;p&gt;To make our value reactive, we need to wrap it in a function. Using sum to illustrate again:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// we need to go from

let val1 = 2
let val2 = 3
let sum = val1 + val2

// to

const updateSum = () =&amp;gt; {
 sum = val1 + val2
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Vue then wraps all such functions with an effect. An effect is a function that takes another function as an argument. Vue then calls the effect in place of that function. &lt;/p&gt;

&lt;p&gt;When Vue calls an effect, the effect:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Records that it's running.&lt;/li&gt;
&lt;li&gt;Calls the function it received as an argument. &lt;/li&gt;
&lt;li&gt;Removes itself from the list of running effects after the function ends.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Remember all source values come from a Proxy (the data component)? While executing the function it wraps, the effect will need a property from the data object, and try to read it.&lt;/p&gt;

&lt;p&gt;The Proxy will intercept that read request. Vue checks which effect is currently running. It then records that the effect depends on the property it tried to read. This is how Vue knows which values depend on which properties.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#so-how-does-vue-know-when-to-rerun-the-functions-that-return-dependent-values"&gt;
  &lt;/a&gt;
  So how does Vue know when to re-run the functions that return dependent values?
&lt;/h3&gt;

&lt;p&gt;The answer is once again the magic of Proxies. Proxies can intercept requests to set property values too. &lt;/p&gt;

&lt;p&gt;Remember we now have a record of effects, as well as the values they depend on. When the value of a property in data changes, Vue needs to do one thing: check that record and update the source value.&lt;/p&gt;

&lt;p&gt;Vue can then re-run all the effects that depend on it, and thus update the values. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This article is a simplified overview of how reactivity works in Vue 3. If you'd like to read more on the subject, here are some resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.sitepoint.com/vue-3-reactivity-system/"&gt;Understanding the New Reactivity System in Vue 3&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://v3.vuejs.org/guide/reactivity.html#how-vue-tracks-these-changes"&gt;Reactivity in Depth&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>vue</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>5 Articles every WebDev should read this week (#03)</title>
      <author>martin krause</author>
      <pubDate>Mon, 17 Jan 2022 17:32:45 +0000</pubDate>
      <link>https://dev.to/martinkr/5-articles-every-webdev-should-read-this-week-03-181e</link>
      <guid>https://dev.to/martinkr/5-articles-every-webdev-should-read-this-week-03-181e</guid>
      <description>&lt;p&gt;A curated list of the top five web development must-reads from last week. Don't miss out on the latest web development stories and insights. Read all about the cutting edge in web development, working in tech and the new tools and frameworks while learning a few new tricks.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#freefordev"&gt;
  &lt;/a&gt;
  free-for.dev
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Developers and Open Source authors now have a massive amount of services offering free tiers, but it can be hard to find them all to make informed decisions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is a list of software (SaaS, PaaS, IaaS, etc.) and other offerings that have free tiers for developers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://free-for.dev/"&gt;https://free-for.dev/&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-not-to-learn-typescript"&gt;
  &lt;/a&gt;
  How not to learn TypeScript
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;“TypeScript and I are never going to be friends”. Oh wow, how often have I heard this phrase? Learning TypeScript, even in 2022, can be frustrating it seems. And for so many different reasons. People who write Java or C# and find out things are working differently than they should. Folks who have done JavaScript most of their time and are being screamed at by a compiler. Here are some mistakes I’ve seen people do when getting started with TypeScript.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#httpsfettblogeuhownottolearntypescript"&gt;
  &lt;/a&gt;
  &lt;a href="https://fettblog.eu/how-not-to-learn-typescript/"&gt;https://fettblog.eu/how-not-to-learn-typescript/&lt;/a&gt;
&lt;/h2&gt;




&lt;h2&gt;
  &lt;a href="#being-the-dri-of-your-career"&gt;
  &lt;/a&gt;
  Being the DRI of Your Career
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;At DuckDuckGo, there’s an expression: “You are the DRI of your career” (DRI: Directly Responsible Individual). I like this, both as an individual who has always felt like the DRI of my own career, and I like it as a manager because I think it makes the boundaries of what you can and can’t do for people clear.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://cate.blog/2021/09/20/being-the-dri-of-your-career/"&gt;https://cate.blog/2021/09/20/being-the-dri-of-your-career/&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-to-stack-elements-in-css"&gt;
  &lt;/a&gt;
  How to Stack Elements in CSS
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;If you want to create fantastic and unique visual experiences on the web, you will eventually need two elements to overlap or exist in the same place. You may even just need them to be positioned near or next to each other. Let’s go over two different ways to accomplish this, one with the position property and one with CSS Grid.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://css-tricks.com/how-to-stack-elements-in-css/"&gt;https://css-tricks.com/how-to-stack-elements-in-css/&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-new-vue-by-evan-you"&gt;
  &lt;/a&gt;
  The New Vue by Evan You
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;In this session, Evan You talks about the new Vue 3 experience: from new syntax to new docs, build tools, devtools, and TS/IDE.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=2KBHvaAWJOA"&gt;https://www.youtube.com/watch?v=2KBHvaAWJOA&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Follow me on &lt;a href="http://twitter.com/_martinkr"&gt;Twitter: @martinkr&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@burntime"&gt;Alex Kulikov&lt;/a&gt; on &lt;a href="https://unsplash.com"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://modernfrontend.dev/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cH97ToOx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://modernfrontend.dev/banner/banner_583-111.png" alt="Subscribe to the weekly modern frontend development newsletter" width="583" height="111"&gt;&lt;/a&gt;&lt;/p&gt;




</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>Working with Numbers &amp; Strings in Python</title>
      <author>CodeWithKenn</author>
      <pubDate>Mon, 17 Jan 2022 17:15:56 +0000</pubDate>
      <link>https://dev.to/codewithkenn/working-with-numbers-strings-in-python-4d8l</link>
      <guid>https://dev.to/codewithkenn/working-with-numbers-strings-in-python-4d8l</guid>
      <description>&lt;p&gt;Python is one of the most popular coding languages available and is great as a starting point in your learning journey. It can be used for a range of things, such as web and internet development, software development application, network programming, and 3D graphics... (&lt;a href="https://hethelinnovation.com/"&gt;hethelinnovation.com&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;*While learning, we end up getting stuck in small bugs that can take more time to solve, whereas we could have solved it quickly if we could only remember the basics. *&lt;/p&gt;

&lt;p&gt;So, this is a series of Basics Python tips to remember whenever we work with numbers and strings. You can also use this article as a reference somehow while coding...&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#python-numbers"&gt;
  &lt;/a&gt;
  Python Numbers
&lt;/h2&gt;

&lt;p&gt;There are three numeric types we use in Python: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;int: or integer, is a whole number without decimals.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;x = 1245
y = -789

print(type(x))
print(type(y))

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;float: or Floating, a number with one or more decimals.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;x = 12.45
y = 42E5

print(type(x))
print(type(y))

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;complex: as studied in high school, is a number written with a "j" as the imaginary part.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;x = 3 + 2j
y = -15j

print(type(x))
print(type(y))

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#numbers-types-conversion"&gt;
  &lt;/a&gt;
  Numbers Types Conversion
&lt;/h2&gt;

&lt;p&gt;To convert numbers from one type (from the three) to another, we used methods.&lt;/p&gt;

&lt;p&gt;In Python, a method is a function that is available for a given object because of the object's type.&lt;br&gt;
So, You can convert from one type to another with the int(), float(), and complex() methods:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
x = 4    # int number
y = 0.8  # float number
z = 4j   # complex number

# from int to float:
a = float(x)

# from float to int:
b = int(y)

# from int to complex:
c = complex(x)

print(a)
print(b)
print(c)

print(type(a))
print(type(b))
print(type(c))

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#lets-build-a-simple-calculator"&gt;
  &lt;/a&gt;
  Let's Build a Simple Calculator
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Python Simple calculator

# Addition Function
def add(x, y):
    return x + y

# Substraction Function
def subtract(x, y):
    return x - y

# Multiplication Function
def multiply(x, y):
    return x * y

# Division Function
def divide(x, y):
    return x / y


def calculate(first_number, second_number, operator):
    if operator == "+":
        answer = add(first_number, second_number)
        return answer

    elif operator == "-":
        answer = subtract(first_number, second_number)
        return answer

    elif operator == "/":
        answer = divide(first_number, second_number)
        return answer
    elif operator == "*" or operator == "x":
        answer = subtract(first_number, second_number)
        return answer
    else:
        return "Invalid"


num1 = int(input("Enter the first number: "))
num2 = int(input("Enter the second number: "))
operator = input("Enter the Operator: ")

print(f"{num1} {operator} {num2} = {calculate(num1, num2, operator)}")

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#python-strings"&gt;
  &lt;/a&gt;
  Python Strings
&lt;/h2&gt;

&lt;p&gt;Strings in python are surrounded by: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Single quotation marks
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;'bonjour'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Double quotation marks
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"bonjour"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#use-a-variable-to-save-the-string"&gt;
  &lt;/a&gt;
  Use a Variable to save the String
&lt;/h2&gt;

&lt;p&gt;The assignment sign is made of &lt;em&gt;=&lt;/em&gt; (equal sign).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name = "Kennedy"
role = "Software Engineer"
print(name)
print(role)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#we-can-also-use-multiline-strings"&gt;
  &lt;/a&gt;
  We can also use Multiline Strings
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;poem = """Your face is the grave of your nose
your face is the grave of your ears
your face is the grave of your face
once again your face overflows uncontrollably."""

print(poem)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#accessing-a-character-of-the-string"&gt;
  &lt;/a&gt;
  Accessing a Character of the String
&lt;/h2&gt;

&lt;p&gt;We can think of strings like an array made of characters. For example, the word "Elon Musk" is made of "E", "l", "o", "n", " ", "M", "u", "s" and "k" (Notice the space is also counted as a character).&lt;/p&gt;

&lt;p&gt;The first character is counted at index 0 (not 1).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;greeting = "Hello, World!"
print(greeting[1]) #prints "e" 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#working-with-strings"&gt;
  &lt;/a&gt;
  Working with Strings
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#checking-the-string-length"&gt;
  &lt;/a&gt;
  Checking the String Length
&lt;/h3&gt;

&lt;p&gt;use the &lt;code&gt;len()&lt;/code&gt; function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name = "Kennedy"
length_of_name = len(name)

print(length_of_name)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#checking-an-existing-string-or-character-in-a-string"&gt;
  &lt;/a&gt;
  Checking an existing string or character in a string
&lt;/h3&gt;

&lt;p&gt;Use the &lt;code&gt;in&lt;/code&gt; keyword.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sentence = "Kennedy is a python programmer"
if "python" in a sentence:
  print("Yes, 'python' is present.")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#most-common-string-methods"&gt;
  &lt;/a&gt;
  Most Common String Methods
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;capitalize()&lt;/code&gt; method converts the first character of a string to an uppercase letter and lowercases all other characters.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name = "python"
print(name.capitalize())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;casefold()&lt;/code&gt; method Converts string into lower case.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name = "PYTHON"
print(name.casefold())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;upper()&lt;/code&gt; method converts all the characters into Uppercase.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name = "python"
print(name.upper())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;lower()&lt;/code&gt; method converts all the characters into Lowercase.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name = "PYTHON"
print(name.lower())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;len()&lt;/code&gt; method used to count the total number of characters in a string.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name = "python"
print( len(name) )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;find()&lt;/code&gt; searches the string for a specified value and returns the position of where it was found.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sentence = "python is great"
print( sentence.find('great') )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;replace()&lt;/code&gt; is used to replace a string with another.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sentence = "python is great"
new_sentence = sentence.replace('great', 'awesome') 
print(new_sentence)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;str()&lt;/code&gt; is used for string conversion
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ten = str(10)
print(ten) #converts 10 to '10'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;You can find more in the &lt;a href="https://docs.python.org/2.5/lib/string-methods.html"&gt;Python.org Official Docs&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#lets-work-on-a-small-project"&gt;
  &lt;/a&gt;
  Let's work on a Small Project
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#-arrange-string-characters-such-that-lowercase-letters-should-come-first"&gt;
  &lt;/a&gt;
  - Arrange string characters such that lowercase letters should come first
&lt;/h4&gt;

&lt;p&gt;Initial Code&lt;br&gt;
&lt;code&gt;noun = PrOgRamMinG&lt;/code&gt;&lt;br&gt;
&lt;code&gt;# Expected Output : rgaminPORMG&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Solution&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;noun = "PrOgRamMinG"

def arrange_string(my_string):
    print('Original String:', my_string)
    lower = []
    upper = []

    #Let's iterate and convert
    for char in my_string:
        if char.islower():
            # add lowercase characters to lower list
            lower.append(char)
        else:
            # add uppercase characters to lower list
            upper.append(char)

    # Join both list
    sorted_str = ''.join(lower + upper)
    print('Result:', sorted_str)

# Now, let's call execute the function we just created! 
arrange_string(noun)

# Output: 
# Original String: PrOgRamMinG
# Result: rgaminPORMG
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Resources for more Details:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.w3schools.com/python/"&gt;www.w3schools.com&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.programiz.com/python-programming"&gt;www.programiz.com&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://pynative.com/python-string-exercise/#h-exercise-4-arrange-string-characters-such-that-lowercase-letters-should-come-first"&gt;www.pynative.com/&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;👉 &lt;a href="https://dev.to/codewithkenn"&gt;DISCOVER MORE useful ARTICLES&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading this article, many others are coming very soon, Feel free to subscribe 🤙.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-connect"&gt;
  &lt;/a&gt;
  🌎 Let's connect
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/CodeWithKenn"&gt;Twitter&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/KennStack01"&gt;Github&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.linkedin.com/in/kennkibadi/"&gt;LinkedIn&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.instagram.com/codewithkenn_/"&gt;Instagram&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Want to start blogging?  🔥&lt;a href="https://hashnode.com/@CodeWithKenn/joinme"&gt;Join NOW!&lt;/a&gt; &lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Exploiting IndexedDB API information leaks in Safari 15</title>
      <author>Savannah Copland 👋</author>
      <pubDate>Mon, 17 Jan 2022 17:14:53 +0000</pubDate>
      <link>https://dev.to/savannahjs/exploiting-indexeddb-api-information-leaks-in-safari-15-58o2</link>
      <guid>https://dev.to/savannahjs/exploiting-indexeddb-api-information-leaks-in-safari-15-58o2</guid>
      <description>&lt;p&gt;&lt;small&gt;DISCLAIMER: FingerprintJS does not use this vulnerability in our products and does not provide cross-site tracking services. We focus on stopping fraud and support modern privacy trends for removing cross-site tracking entirely. We believe that vulnerabilities like this one should be discussed in the open to help browsers fix them as quickly as possible. To help fix it, we have submitted a bug report to the WebKit maintainers, created a live demo, and have made a &lt;a href="https://github.com/fingerprintjs/blog-indexeddb-safari-leaks-demo" rel="noopener noreferrer"&gt;public source code repository&lt;/a&gt; available to all.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Z7dPeGpCl8s"&gt;Watch our Youtube overview&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;In this article, we discuss a software bug introduced in Safari 15’s implementation of the IndexedDB API that lets any website track your internet activity and even reveal your identity.&lt;/p&gt;

&lt;p&gt;We have also published a demo site to see the vulnerability in action:&lt;/p&gt;

&lt;p&gt;&lt;b&gt;&lt;a href="https://safarileaks.com"&gt;Try the demo&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;The leak was reported to the &lt;a href="https://bugs.webkit.org/" rel="noopener noreferrer"&gt;WebKit Bug Tracker&lt;/a&gt; on November 28, 2021 as bug &lt;a href="https://bugs.webkit.org/show_bug.cgi?id=233548" rel="noopener noreferrer"&gt;233548&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update (Monday January 17th 2022)&lt;/strong&gt;: Apple engineers began working on the bug as of Sunday, have &lt;a href="https://github.com/WebKit/WebKit/commit/f73005ed826014988f8ee447de23927749fb56e5"&gt;merged potential fixes&lt;/a&gt;, and have marked our report as resolved. However, the bug continues to persist for end users until these changes are released.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-short-introduction-to-the-indexeddb-api%C2%A0"&gt;
  &lt;/a&gt;
  A short introduction to the IndexedDB API 
&lt;/h2&gt;

&lt;p&gt;IndexedDB is a browser API for client-side storage designed to hold significant amounts of data. It’s supported in all major browsers and is very commonly used. As IndexedDB is a low-level API, many developers choose to use wrappers that abstract most of the technicalities and provide an easier-to-use, more developer-friendly API. &lt;/p&gt;

&lt;p&gt;Like most modern web browser technologies, IndexedDB is following &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy" rel="noopener noreferrer"&gt;Same-origin policy&lt;/a&gt;. The same-origin policy is a fundamental security mechanism that restricts how documents or scripts loaded from one origin can interact with resources from other origins. An origin is defined by the scheme (protocol), hostname (domain), and port of the URL used to access it. &lt;/p&gt;

&lt;p&gt;Indexed databases are associated with a specific origin. Documents or scripts associated with different origins should never have the possibility to interact with databases associated with other origins.&lt;/p&gt;

&lt;p&gt;If you want to learn more about how IndexedDB APIs work check out the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API" rel="noopener noreferrer"&gt;MDN Web Docs&lt;/a&gt; or the &lt;a href="https://www.w3.org/TR/IndexedDB/" rel="noopener noreferrer"&gt;W3C specification&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-indexeddb-leaks-in-safari-15"&gt;
  &lt;/a&gt;
  The IndexedDB leaks in Safari 15
&lt;/h2&gt;

&lt;p&gt;In Safari 15 on macOS, and in all browsers on iOS and iPadOS 15, the IndexedDB API is violating the same-origin policy. Every time a website interacts with a database, a new (empty) database with the same name is created in all other active frames, tabs, and windows within the same browser session. Windows and tabs usually share the same session, unless you switch to a different profile, in Chrome for example, or open a private window. For clarity, we will refer to the newly created databases as “cross-origin-duplicated databases” for the remainder of the article.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-is-this-leak-bad"&gt;
  &lt;/a&gt;
  Why is this leak bad?
&lt;/h3&gt;

&lt;p&gt;The fact that database names leak across different origins is an obvious privacy violation. It lets arbitrary websites learn what websites the user visits in different tabs or windows. This is possible because database names are typically unique and website-specific. Moreover, we observed that in some cases, websites use unique user-specific identifiers in database names. This means that authenticated users can be uniquely and precisely identified. Some popular examples would be YouTube, Google Calendar, or Google Keep. All of these websites create databases that include the authenticated Google User ID and in case the user is logged into multiple accounts, databases are created for all these accounts.&lt;/p&gt;

&lt;p&gt;The Google User ID is an internal identifier generated by Google. It uniquely identifies a single Google account. It can be used with Google APIs to fetch public personal information of the account owner. The information exposed by these APIs is controlled by many factors. In general, at minimum, the user's profile picture is typically available. To learn more, refer to Google's &lt;a href="https://developers.google.com/people/v1/how-tos/authorizing#profile-scopes" rel="noopener noreferrer"&gt;People API&lt;/a&gt; documentation.&lt;/p&gt;

&lt;p&gt;Not only does this imply that untrusted or malicious websites can learn a user’s identity, but it also allows the linking together of multiple separate accounts used by the same user.&lt;/p&gt;

&lt;p&gt;Note that these leaks do not require any specific user action. A tab or window that runs in the background and continually queries the IndexedDB API for available databases, can learn what other websites a user visits in real-time. Alternatively, websites can open any website in an iframe or popup window in order to trigger an IndexedDB-based leak for that specific site.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-many-websites-are-affected"&gt;
  &lt;/a&gt;
  How many websites are affected?
&lt;/h3&gt;

&lt;p&gt;We checked the homepages of Alexa’s Top 1000 most visited websites to understand how many websites use IndexedDB and can be uniquely identified by the databases they interact with. &lt;/p&gt;

&lt;p&gt;The results show that more than 30 websites interact with indexed databases directly on their homepage, without any additional user interaction or the need to authenticate. We suspect this number to be significantly higher in real-world scenarios as websites can interact with databases on subpages, after specific user actions, or on authenticated parts of the page.&lt;/p&gt;

&lt;p&gt;We also saw a pattern where indexed databases named as universally unique identifiers (UUIDs) are being created by subresources, specifically ad networks. Interestingly, loading of these resources seems to be in some cases blocked by Safari’s tracking prevention features, which effectively prevents the database names from leaking. These leaks will also be prevented if the resources are blocked by other means, for example when using adblocker extensions or blocking all JavaScript execution.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#does-safari-private-mode-protect-against-the-leak"&gt;
  &lt;/a&gt;
  Does Safari private mode protect against the leak?
&lt;/h3&gt;

&lt;p&gt;Firstly, when followed, the same-origin policy is an effective security mechanism for all window modes. Websites with one origin should never have access to resources from other origins regardless of whether a visitor is using private browsing or not unless it’s explicitly allowed via cross-origin resource sharing (CORS).&lt;/p&gt;

&lt;p&gt;In this case, private mode in Safari 15 is also affected by the leak. It’s important to note that browsing sessions in private Safari windows are restricted to a single tab, which reduces the extent of information available via the leak. However, if you visit multiple different websites within the same tab, all databases these websites interact with are leaked to all subsequently visited websites. Note that in other WebKit-based browsers, for example Brave or Google Chrome on iOS, private tabs share the same browser session in the same way as in non-private mode.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h2&gt;

&lt;p&gt;We created a simple demo page that demonstrates how a website can learn the Google account identity of any visitor. The demo is available at &lt;a href="https://safarileaks.com"&gt;safarileaks.com&lt;/a&gt;. If you open the page and start the demo in an affected browser, you will see how the current browsing context and your identity is leaked right away. Identity data will only be available if you are authenticated to your Google account in the same browsing session. &lt;/p&gt;

&lt;p&gt;Moreover, the demo detects the presence of 20+ websites in other browser tabs or windows, including Google Calendar, Youtube, Twitter, and Bloomberg. This is possible because database names, which those websites interact with, are specific enough to uniquely identify them.  &lt;/p&gt;

&lt;p&gt;The supported browsers are Safari 15 on macOS, and essentially all browsers on iOS 15 and iPadOS 15. That is because Apple’s App Store guidelines require all browsers on iOS  and iPadOS to use the WebKit engine.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;&lt;a href="https://safarileaks.com"&gt;Try the demo&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reproducing-the-leak"&gt;
  &lt;/a&gt;
  Reproducing the leak
&lt;/h2&gt;

&lt;p&gt;To reproduce the leak yourself, simply call the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBFactory/databases" rel="noopener noreferrer"&gt;indexedDB.databases()&lt;/a&gt; API. In case websites opened in other frames, tabs, or windows interact with other databases, you will see the cross-origin-duplicated databases.&lt;/p&gt;

&lt;p&gt;Based on our observations, if a database is deleted, all related cross-origin-duplicated databases are also deleted. However, there seems to be an issue when developer tools are opened and a page refresh happens. On every page refresh, all databases are duplicated once again and seem to become independent from the original databases. In fact, it’s not even possible to delete these duplicated databases by using the regular &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBFactory/deleteDatabase" rel="noopener noreferrer"&gt;indexedDB.deleteDatabase()&lt;/a&gt; function. &lt;/p&gt;

&lt;p&gt;This behavior makes it very difficult to use the developer tools to understand what exactly is happening with the databases that a website interacts with. It is therefore recommended to use other means of debugging (for example rendering output into the DOM instead of using console logs or the JavaScript debugger) when trying to reproduce the leaks described in this article. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-protect-yourself"&gt;
  &lt;/a&gt;
  How to protect yourself
&lt;/h2&gt;

&lt;p&gt;Unfortunately, there isn’t much Safari, iPadOS and iOS users can do to protect themselves without taking drastic measures. One option may be to block all JavaScript by default and only allow it on sites that are trusted. This makes modern web browsing inconvenient and is likely not a good solution for everyone. Moreover, vulnerabilities like cross-site scripting make it possible to get targeted via trusted sites as well, although the risk is much smaller. Another alternative for Safari users on Macs is to temporarily switch to a different browser. Unfortunately, on iOS and iPadOS this is not an option as all browsers are affected.&lt;/p&gt;

&lt;p&gt;The only real protection is to update your browser or OS once the issue is resolved by Apple. In the meantime, we hope this article will raise awareness of this issue.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>privacy</category>
      <category>javascript</category>
      <category>opensource</category>
    </item>
    <item>
      <title>This is my first article on DEV.to</title>
      <author>Teszáry Péter</author>
      <pubDate>Mon, 17 Jan 2022 17:11:11 +0000</pubDate>
      <link>https://dev.to/peterteszary/this-is-my-first-article-on-devto-5bie</link>
      <guid>https://dev.to/peterteszary/this-is-my-first-article-on-devto-5bie</guid>
      <description>&lt;p&gt;So, this is the first article here on DEV.to. I just don't know yet why have I started it. I already have two blogs. One is for my business and the other one is for fun. The non-business one is similar to a diary. But I just like to try out new things, so that is why I've decided to click around DEV.to.&lt;/p&gt;

&lt;p&gt;Maybe I will start with some short tweets here to see if I can keep up with the writing. The reason to keep this blog up to date and post regularly is to have some consistency in my learning methodology. &lt;/p&gt;

&lt;p&gt;I am coming from a WordPress world, and my main goal is to become a full-stack developer someday. I will tell you about this in a later article. So I would like to dive deeply into programming. Also, I have a programmer background as well, because I have studied a lot for myself, from Udemy and Youtube courses. Also, I had a 2-years programming school, that I did not finish. Only the first year yet. But I decided to go back this September, so we will see. Until that, I would like to keep up with studying as much as it is possible. So I hope I can document this journey here. &lt;/p&gt;

&lt;p&gt;So I hope that I will see you and myself around. That was my first post. I guess there will be a lot more. We'll see.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Integrating Google reCAPTCHA with Laravel, Inertia JS and Vue 3.</title>
      <author>Sesha</author>
      <pubDate>Mon, 17 Jan 2022 17:04:12 +0000</pubDate>
      <link>https://dev.to/sesha/integrating-google-recaptcha-with-laravel-inertia-js-and-vue-3-3o0c</link>
      <guid>https://dev.to/sesha/integrating-google-recaptcha-with-laravel-inertia-js-and-vue-3-3o0c</guid>
      <description>&lt;p&gt;I will show you how to add the Google reCAPTCHA version 3 with Laravel with a few simple steps.&lt;/p&gt;

&lt;p&gt;I assume you already installed Laravel with Jetstream, InertiaJS and Vue3. If not, &lt;a href="https://jetstream.laravel.com/"&gt;this&lt;/a&gt; link will help you to install.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setup-1"&gt;
  &lt;/a&gt;
  Setup 1:
&lt;/h3&gt;

&lt;p&gt;Register your site in the &lt;a href="https://www.google.com/recaptcha/admin/create"&gt;Google reCAPTCHA&lt;/a&gt; and get the reCAPTCHA site key and Secret Key.&lt;/p&gt;

&lt;p&gt;Configure those values in the config services.php file for better accessibility and management.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;
 &lt;span class="s1"&gt;'google_recaptcha'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
   &lt;span class="s1"&gt;'url'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'https://www.google.com/recaptcha/api/siteverify'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s1"&gt;'site_key'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'GOOGLE_RECAPTCHA_SITE_KEY'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
   &lt;span class="s1"&gt;'secret_key'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'GOOGLE_RECAPTCHA_SECRET_SITE_KEY'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="p"&gt;]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To access the reCAPTCHA site key in the frontend, share through the HandleInertiaRequest file. Directly mentioning the site key in the front end isn't a great idea.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;share&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Request&lt;/span&gt; &lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;array_merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;share&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="s1"&gt;'recaptcha_site_key'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'services.google_recaptcha.site_key'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
     &lt;span class="p"&gt;]);&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#setup-2"&gt;
  &lt;/a&gt;
  Setup 2:
&lt;/h3&gt;

&lt;p&gt;Install &lt;a href="https://www.npmjs.com/package/vue-recaptcha-v3"&gt;Vue recaptcha v3&lt;/a&gt; and import in app.js file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;VueReCaptcha&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useReCaptcha&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue-recaptcha-v3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;


&lt;span class="nx"&gt;createInertiaApp&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; - &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;appName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`./Pages/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.vue`&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;plugin&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;captcheKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initialPage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;recaptcha_site_key&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;createApp&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;render&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;plugin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;VueReCaptcha&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;siteKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;captcheKey&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mixin&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;route&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-3"&gt;
  &lt;/a&gt;
  Step 3:
&lt;/h3&gt;

&lt;p&gt;To add Google reCAPTCHA to the form. Here, I used a sample form to demonstrate the Google reCAPTCHA with Vue 3 composition API.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"POST"&lt;/span&gt;  &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;submit.prevent=&lt;/span&gt;&lt;span class="s"&gt;"recaptcha"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   ...

   &lt;span class="nt"&gt;&amp;lt;jet-input-error&lt;/span&gt; &lt;span class="na"&gt;:message=&lt;/span&gt;&lt;span class="s"&gt;"form.errors.captcha_token"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"mt-2"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useForm&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@inertiajs/inertia-vue3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useReCaptcha&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vue-recaptcha-v3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useForm&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;phone&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;captcha_token&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;executeRecaptcha&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;recaptchaLoaded&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useReCaptcha&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;recaptcha&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;recaptchaLoaded&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;captcha_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;executeRecaptcha&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;login&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;submit&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;submit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;contact-us.store&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;preserveScroll&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;onSuccess&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;success&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;submit&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;recaptcha&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-4"&gt;
  &lt;/a&gt;
  Step 4
&lt;/h3&gt;

&lt;p&gt;Create a Laravel custom rule to verify the token and score. Here, I rejected the form if the score &amp;lt;= 0.5 and status was not equals to true.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\Rules&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Support\Facades\Http&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Contracts\Validation\Rule&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Recaptcha&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;Rule&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cd"&gt;/**
     * Create a new rule instance.
     *
     * @return void
     */&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cd"&gt;/**
     * Determine if the validation rule passes.
     *
     * @param  string  $attribute
     * @param  mixed  $value
     * @return bool
     */&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;passes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$attribute&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$endpoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'services.google_recaptcha'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="nv"&gt;$response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Http&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;asForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$endpoint&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'url'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s1"&gt;'secret'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$endpoint&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'secret_key'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s1"&gt;'response'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;  &lt;span class="nv"&gt;$response&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'success'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;$response&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'score'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cd"&gt;/**
     * Get the validation error message.
     *
     * @return string
     */&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'Something goes wrong. Please contact us directly through the phone or email.'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, add in the controller to validate the input request along with reCAPTCHA token.&lt;/p&gt;

&lt;p&gt;use Illuminate\Support\Facades\Request;&lt;br&gt;
use Illuminate\Support\Facades\Redirect;&lt;br&gt;
use App\Rules\Recaptcha;&lt;/p&gt;

&lt;p&gt;...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nv"&gt;$contact&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Contact&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="nc"&gt;Request&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
     &lt;span class="s1"&gt;'name'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'required'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'max:50'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
     &lt;span class="s1"&gt;'email'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'required'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'max:100'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'email'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
     &lt;span class="s1"&gt;'phone'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'nullable'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'max:13'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
     &lt;span class="s1"&gt;'message'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'required'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'max:2000'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
     &lt;span class="s1"&gt;'captcha_token'&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Recaptcha&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;  

 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;Redirect&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'contact-us'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;   

&lt;span class="p"&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I hope, this tutorial helps you to integrate Google reCAPTCHA 3 with Laravel. Please let me know if it doesn't work for you.&lt;/p&gt;

&lt;p&gt;Thank you. &lt;/p&gt;

</description>
      <category>laravel</category>
      <category>vue</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Bubble sort</title>
      <author>Jonathanfarrow</author>
      <pubDate>Mon, 17 Jan 2022 16:56:04 +0000</pubDate>
      <link>https://dev.to/jonathanfarrow/bubble-sort-4p0a</link>
      <guid>https://dev.to/jonathanfarrow/bubble-sort-4p0a</guid>
      <description>&lt;p&gt;Understanding algorithms can make you a better engineer. &lt;br&gt;
That is a big statement to start with I know but hear me out. &lt;br&gt;
Why i am make this statement is it helps develop thinking about problems from a complexity, space and time and perspective&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-first-algorithm"&gt;
  &lt;/a&gt;
  The first algorithm
&lt;/h2&gt;

&lt;p&gt;The first algorithm I would like to distil for you is bubble sort. &lt;/p&gt;

&lt;p&gt;Bubble sort will sort an array by passing through the array and swapping the adjacent elements. It will keep passing through the array until all elements are in order.&lt;/p&gt;

&lt;p&gt;Notice how the numbers are being ordered with each pass. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WPhoF-sh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/638vj1psl0z039ls2os1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WPhoF-sh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/638vj1psl0z039ls2os1.png" alt="number sorting" width="147" height="114"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-to-implement-bubble-sort"&gt;
  &lt;/a&gt;
  How to implement bubble sort
&lt;/h2&gt;

&lt;p&gt;First we will have a do while loop that keeps looping while the array is un sorted.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;keepSwapping&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;keepSwapping&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;keepSwapping&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;`
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Secondly we have a for loop within the do while that will pass through the array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="nx"&gt;keepSwapping&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thirdly within the for loop we have an If statement that make a check to see if the current element is larger than the next element in the array.&lt;/p&gt;

&lt;p&gt;If it is larger we store the current value in temp. Then we assign the value of the next element[i+1] in the current element[i] and the value of temp in [i+1]. The value of keepSwapping is set true to keep the do while looping.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="nx"&gt;keepSwapping&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;unSorted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bubble&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;keepSwapping&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;keepSwapping&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="nx"&gt;keepSwapping&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;keepSwapping&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;bubble&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;unSorted&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#best-and-worst-case-run-time"&gt;
  &lt;/a&gt;
  Best and worst case run time
&lt;/h2&gt;

&lt;p&gt;O(n) The best case is when array has already been sorted. Then we just need to loop through once. &lt;/p&gt;

&lt;p&gt;O(n² ) The worst case is when we have to loop through every item in the array.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>algorithms</category>
      <category>tutorial</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>A lightweight framework for Material Design 3</title>
      <author>Leonardo Rafael Wehrmeister</author>
      <pubDate>Mon, 17 Jan 2022 16:54:13 +0000</pubDate>
      <link>https://dev.to/leonardorafael/a-lightweight-framework-for-material-design-3-3dm0</link>
      <guid>https://dev.to/leonardorafael/a-lightweight-framework-for-material-design-3-3dm0</guid>
      <description>&lt;p&gt;Hello devs,&lt;/p&gt;

&lt;p&gt;I am super excited to share with you the new release of &lt;a href="https://www.beercss.com"&gt;https://www.beercss.com&lt;/a&gt; guided by Material Design 3. Oh, sorry for the shy post, ok?&lt;/p&gt;

&lt;p&gt;Hope you enjoy it! 🍺🍺🍺&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>html</category>
      <category>pwa</category>
    </item>
    <item>
      <title>How to make HTML content editable?</title>
      <author>Chetan Singh</author>
      <pubDate>Mon, 17 Jan 2022 16:48:48 +0000</pubDate>
      <link>https://dev.to/chetansingh63/how-to-make-html-content-editable-4kab</link>
      <guid>https://dev.to/chetansingh63/how-to-make-html-content-editable-4kab</guid>
      <description>&lt;p&gt;Ever wondered? Can we make HTML content editable when it runs on a browser? The answer is &lt;strong&gt;YES&lt;/strong&gt;. &lt;br&gt;
By using &lt;code&gt;contenteditable&lt;/code&gt; attribute we can specify whether the content of an element will be editable or not.&lt;/p&gt;

&lt;p&gt;Syntax:&lt;br&gt;
&lt;code&gt;&amp;lt;element contenteditable="true or false"&amp;gt;&lt;/code&gt; &lt;br&gt;
We can give any of two values 'true' or 'false'.&lt;br&gt;
'True' tells that element is editable while 'false' specifies that element is not editable.&lt;/p&gt;

&lt;p&gt;Let's see: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---Po51Hqp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ovroqdffjwbukrmwjtan.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Po51Hqp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ovroqdffjwbukrmwjtan.png" alt="Image description" width="863" height="378"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is my first post. I would document my learning journey on this platform and I hope it will prove helpful for beginners as I, too, am a beginner.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HEART IT&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>firstpost</category>
    </item>
    <item>
      <title>An Overview of CSS Positioning Schemes</title>
      <author>Zach Snoek</author>
      <pubDate>Mon, 17 Jan 2022 16:30:02 +0000</pubDate>
      <link>https://dev.to/zachsnoek/an-overview-of-css-positioning-schemes-59bo</link>
      <guid>https://dev.to/zachsnoek/an-overview-of-css-positioning-schemes-59bo</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;In this post, we’ll learn about positioning schemes, which we can use to change an element’s position.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This is a post in a series about topics covered in Josh Comeau's &lt;a href="https://css-for-js.dev/"&gt;CSS for JavaScript Developers&lt;/a&gt; course. These posts will be brief, polished versions of my notes, and I'll write about new things I learned or deepen my understanding of something already familiar to me.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quick-reference"&gt;
  &lt;/a&gt;
  Quick reference
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#static"&gt;Static&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#relative"&gt;Relative&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#absolute"&gt;Absolute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fixed"&gt;Fixed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sticky"&gt;Sticky&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-position-property"&gt;
  &lt;/a&gt;
  The position property
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;position&lt;/code&gt; property allows us to specify a positioning scheme. It accepts the values: &lt;code&gt;static&lt;/code&gt;, &lt;code&gt;relative&lt;/code&gt;, &lt;code&gt;absolute&lt;/code&gt;, &lt;code&gt;fixed&lt;/code&gt;, and &lt;code&gt;sticky&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;static&lt;/code&gt; is the default value; an element with this value set is called a statically-positioned or non-positioned element. An element using a value other than &lt;code&gt;static&lt;/code&gt; is called a positioned element.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#inset-properties"&gt;
  &lt;/a&gt;
  Inset properties
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;position&lt;/code&gt; works with the &lt;a href="https://www.w3.org/TR/css-position-3/#coords"&gt;inset properties&lt;/a&gt; &lt;code&gt;top&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt;, &lt;code&gt;bottom&lt;/code&gt;, and &lt;code&gt;left&lt;/code&gt; to control the precise location of a positioned element.&lt;/p&gt;

&lt;p&gt;Let’s take a closer look at each of these positioning scheme values.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#static"&gt;
  &lt;/a&gt;
  Static
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;static&lt;/code&gt; is the default value for &lt;code&gt;position&lt;/code&gt;, and it places the element in the normal flow of the document. Inset properties do not affect the element’s position.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/zachsnoek/embed/PoJdRBp?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#relative"&gt;
  &lt;/a&gt;
  Relative
&lt;/h2&gt;

&lt;p&gt;The element gets placed in the normal flow of the document like &lt;code&gt;static&lt;/code&gt; and inset properties offset it relative to itself. This offset does not affect the layout of other elements, and the element takes up space as if it were statically positioned. The offset acts as a cosmetic effect.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/zachsnoek/embed/LYzJdaV?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#absolute"&gt;
  &lt;/a&gt;
  Absolute
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;absolute&lt;/code&gt; removes the element from the normal document flow and positions it relative to its nearest positioned ancestor. If there is no positioned ancestor, the element gets positioned relative to the &lt;a href="https://www.w3.org/TR/css-display-3/#initial-containing-block"&gt;initial containing block&lt;/a&gt; (the containing block of the root &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; element, a box the size and position of the viewport).&lt;/p&gt;

&lt;p&gt;No space gets made for absolutely-positioned elements in the page layout; other elements act as if they do not exist.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/zachsnoek/embed/ZEXMxZw?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fixed"&gt;
  &lt;/a&gt;
  Fixed
&lt;/h2&gt;

&lt;p&gt;Fixed elements behave similarly to absolutely-positioned elements, but they are always positioned relative to the initial containing block. This causes the element to appear fixed on the page, regardless of scrolling.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/zachsnoek/embed/ExweEqY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Note that an element using the &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;perspective&lt;/code&gt;, and &lt;code&gt;transform&lt;/code&gt; properties or the &lt;code&gt;will-change: transform&lt;/code&gt; declaration becomes the containing block of any &lt;code&gt;fixed&lt;/code&gt; descendants, causing the &lt;code&gt;fixed&lt;/code&gt; elements to act absolutely-positioned. In other words, elements with these properties cannot have &lt;code&gt;fixed&lt;/code&gt; descendants.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sticky"&gt;
  &lt;/a&gt;
  Sticky
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;sticky&lt;/code&gt; causes the element to act like a relatively-positioned element until it reaches a threshold, at which point it becomes fixed relative to its &lt;a href="https://www.w3.org/TR/css-overflow-3/#scrollport"&gt;nearest scrollport&lt;/a&gt; (i.e., the closest ancestor that manages overflow) until its container goes out of view. Space is made for the element in the layout, even when it acts fixed.&lt;/p&gt;

&lt;p&gt;The threshold is specified by the inset properties: for example, a &lt;code&gt;sticky&lt;/code&gt; element with &lt;code&gt;top: 10px&lt;/code&gt; would be relatively-positioned until the element is 10 pixels from the top of its nearest scrollport. Once that threshold is met, the element is fixed 10 pixels from the top of its nearest scrollport.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/zachsnoek/embed/vYezjyZ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;In this example, the box sticks to the viewport but is only sticky while its container is in view:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/zachsnoek/embed/QWqVrpz?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#positioning-in-the-wild"&gt;
  &lt;/a&gt;
  Positioning in the wild
&lt;/h2&gt;

&lt;p&gt;I found it helpful to understand positioning by seeing its use in the real world. Here are a few examples of positioning types that I found.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#absolute-facebook-notification-badge"&gt;
  &lt;/a&gt;
  Absolute: Facebook notification badge
&lt;/h3&gt;

&lt;p&gt;This notification badge on Facebook uses absolute positioning to appear above the news icon:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pPZ41pkl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dg4yb1e9r4rjyh6k8tv2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pPZ41pkl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dg4yb1e9r4rjyh6k8tv2.png" alt="Facebook notification badge" width="45" height="43"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fixed-stackoverflow-header"&gt;
  &lt;/a&gt;
  Fixed: StackOverflow header
&lt;/h3&gt;

&lt;p&gt;Headers commonly use fixed positioning to stick to the top of the page when the user scrolls:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4zbtf3Xw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/41gw0533h0jzmo7bpyyh.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4zbtf3Xw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/41gw0533h0jzmo7bpyyh.gif" alt="Stack Overflow header" width="600" height="389"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sticky-iphone-product-page"&gt;
  &lt;/a&gt;
  Sticky: iPhone product page
&lt;/h3&gt;

&lt;p&gt;Both the white “iPhone 13” header and product image on this page are sticky:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SGZEAdnY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s6gycnn533xqgvgr95cj.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SGZEAdnY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s6gycnn533xqgvgr95cj.gif" alt="iPhone 13 product page" width="600" height="450"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#relative"&gt;
  &lt;/a&gt;
  Relative
&lt;/h3&gt;

&lt;p&gt;I couldn’t find a good example for relative positioning. Please suggest one!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-connect"&gt;
  &lt;/a&gt;
  Let's connect
&lt;/h2&gt;

&lt;p&gt;If you enjoyed this post, connect with me on &lt;a href="https://www.linkedin.com/in/zach-snoek-5b327b179/"&gt;LinkedIn&lt;/a&gt;, &lt;a href="https://github.com/zachsnoek"&gt;GitHub&lt;/a&gt;, and &lt;a href="https://twitter.com/zach_snoek"&gt;Twitter&lt;/a&gt;! You can also &lt;a href="https://mailchi.mp/2df4b6d5458f/signup-page"&gt;subscribe to my mailing list&lt;/a&gt; to get the latest content and news from me.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=bJMEpL4rxAQ"&gt;Chris Coyier | Sticky Positioning in CSS: How it Works, What Can Break It, and Dumb Tricks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://css-tricks.com/almanac/properties/p/position/"&gt;CSS-Tricks | position&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://css-for-js.dev/"&gt;Josh Comeau | CSS for JavaScript Developers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/position"&gt;MDN | position&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Positioning"&gt;MDN | Positioning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.w3.org/TR/css-position-3/"&gt;W3C | CSS Positioned Layout Module Level 3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cover photo by &lt;a href="https://unsplash.com/@__itsflores?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Omar Flores&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
