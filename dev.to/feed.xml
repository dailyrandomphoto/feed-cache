<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Easily sort imports and remove unused declarations on each save in VS Code</title>
      <author>Damir Drempetić</author>
      <pubDate>Fri, 07 May 2021 15:03:55 +0000</pubDate>
      <link>https://dev.to/bornfightcompany/easily-sort-imports-and-remove-unused-declarations-on-each-save-in-vs-code-35k1</link>
      <guid>https://dev.to/bornfightcompany/easily-sort-imports-and-remove-unused-declarations-on-each-save-in-vs-code-35k1</guid>
      <description>&lt;p&gt;All this time I was using VSCode formatting on save which triggers the selected default formatter (&lt;code&gt;Prettier&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Also I was organizing and sorting my imports manually all the time. Or in other words, I didn’t. So foolish… &lt;/p&gt;

&lt;p&gt;Because it couldn’t be more simpler to enable it without installation of any additional &lt;code&gt;ESLint&lt;/code&gt; or &lt;code&gt;Prettier&lt;/code&gt; plugins. Of course, I’m assuming you already have &lt;a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint"&gt;ESLint&lt;/a&gt; and &lt;a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"&gt;Prettier&lt;/a&gt; VS Code extensions because they are a must have for any JavaScript project.&lt;/p&gt;

&lt;p&gt;Just add the following to your VS Code settings.json:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="nl"&gt;"editor.formatOnSave"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="nl"&gt;"editor.codeActionsOnSave"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"source.fixAll"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"source.organizeImports"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"source.sortMembers"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;fixAll&lt;/code&gt; is not necessary for this case but could be useful too.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;fixAll property turns on Auto Fix for all providers including ESLint, docs: &lt;a href="https://github.com/microsoft/vscode-docs/blob/efa17ec71d755cf14c4722c7d05d10c538cb0e97/release-notes/v1_41.md#eslint"&gt;https://github.com/microsoft/vscode-docs/blob/efa17ec71d755cf14c4722c7d05d10c538cb0e97/release-notes/v1_41.md#eslint&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;🚀 Voilà, while having all these enabled in your settings, VS Code will &lt;strong&gt;automatically&lt;/strong&gt; on each file save:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;run code formatting with default formatter&lt;/li&gt;
&lt;li&gt;sort imports&lt;/li&gt;
&lt;li&gt;remove all unused declarations&lt;/li&gt;
&lt;li&gt;run ESLint auto fix&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It's always nice when you don't need to take care of these things manually, right? 😎 🤖&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>eslint</category>
      <category>prettier</category>
      <category>javascript</category>
    </item>
    <item>
      <title>React Without JSX</title>
      <author>mrwolferinc</author>
      <pubDate>Fri, 07 May 2021 14:50:36 +0000</pubDate>
      <link>https://dev.to/mrwolferinc/react-without-jsx-350i</link>
      <guid>https://dev.to/mrwolferinc/react-without-jsx-350i</guid>
      <description>&lt;p&gt;&lt;strong&gt;JSX is not a requirement for using React.&lt;/strong&gt; Using React without JSX is especially convenient for when you don't want to set up compilation in your build environment.&lt;/p&gt;

&lt;p&gt;This tutorial will show you how to use React without JSX. It will also show you how code written in JSX is converted to plain JavaScript.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#what-is-jsx"&gt;
  &lt;/a&gt;
  What is JSX?
&lt;/h1&gt;

&lt;p&gt;Consider the following variable declaration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello, world!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This strange tag syntax is neither a string nor HTML.&lt;/p&gt;

&lt;p&gt;It is JSX, and it is a syntax extension to JavaScript. It is recommended to use it with React to describe what the UI should look like. JSX may remind you of a template language, but it comes with the full power of JavaScript.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#converting-to-javascript"&gt;
  &lt;/a&gt;
  Converting to JavaScript
&lt;/h1&gt;

&lt;p&gt;Each JSX element is just syntactic steroids for calling &lt;code&gt;React.createElement(component, props, ...children)&lt;/code&gt;. This means that any code written in JSX can also be written in plain JavaScript.&lt;/p&gt;

&lt;p&gt;For example, this code is written in JSX:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello, $&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toWhat&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Hello&lt;/span&gt; &lt;span class="na"&gt;toWhat&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"world"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;,&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It can be compiled to this code that does not use JSX:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`Hello, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toWhat&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;toWhat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;world&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are curious to see more examples of how JSX is converted to JavaScript, you can try out the &lt;a href="https://babeljs.io/repl/#?presets=react&amp;amp;code_lz=GYVwdgxgLglg9mABACwKYBt1wBQEpEDeAUIogE6pQhlIA8AJjAG4B8AEhlogO5xnr0AhLQD0jVgG4iAXyJA"&gt;online Babel compiler&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The component can either be provided as a string, as a subclass of &lt;code&gt;React.Component&lt;/code&gt;, or a plain function.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#shorthands"&gt;
  &lt;/a&gt;
  Shorthands
&lt;/h1&gt;

&lt;p&gt;If you get tired of typing &lt;code&gt;React.createElement&lt;/code&gt; so much, one common pattern is to assign a shorthand:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello, world!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you use a shorthand form for &lt;code&gt;React.createElement&lt;/code&gt;, it can almost be as convenient to use React without JSX.&lt;/p&gt;




&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>RECT basics</title>
      <author>Emran H Khan</author>
      <pubDate>Fri, 07 May 2021 14:46:29 +0000</pubDate>
      <link>https://dev.to/emranhkhan/rect-basics-510l</link>
      <guid>https://dev.to/emranhkhan/rect-basics-510l</guid>
      <description>&lt;p&gt;&lt;strong&gt;What is React:&lt;/strong&gt; React is JavaScript library created by Facebook. It is tool for building UI components. React doesn't manipulate the browser's DOM directly, instead it creates copy of the DOM and save it in memory. This copied DOM is generally known as the 'VIRTUAL DOM'. React then finds out what changes have been made, and changes only that part in the DOM.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Skills to learn React:&lt;/strong&gt;&lt;br&gt;
    1. HTML &amp;amp; CSS&lt;br&gt;
    2. JSX&lt;br&gt;
    3. Fundamental of JavaScript and ES6&lt;br&gt;
    4. Package manager (Node+Npm)&lt;br&gt;
    5. Git and CLI &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Render Function:&lt;/strong&gt; React renders HTML to web page by using a function called ReactDOM.render(). This function takes two arguments, HTML code and HTML element. The purpose of this function is to display the specified HTML code inside the specified element.&lt;/p&gt;

&lt;p&gt;Display a span inside the 'root' element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ReactDOM.render(&amp;lt;span&amp;gt;Hello World!&amp;lt;/span&amp;gt;, document.getElementById('root'));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The result is displayed in the &lt;code&gt;&amp;lt;div id='root'&amp;gt;&lt;/code&gt; element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;body&amp;gt;
  &amp;lt;div id='root'&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The HTML code here uses JSX which allows you to write HTML tags inside the JavaScript code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JSX:&lt;/strong&gt; JSX stands for JavaScript XML. It allows us to write HTML in React. JSX converts the HTML into react elemts.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;With JSX:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const newElement: &amp;lt;h1&amp;gt;Learning JSX!&amp;lt;/h1&amp;gt;
ReactDOM.render(newElement, document.getElementById('root'));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Without JSX:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const newElement = React.createElement('h1', {}, 'Not using JSX');
ReactDOM.render(newElement, document.getElementById('root'));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is clearly seen from the above example, it is far more easier to write JSX which eventually transpile our HTML to JavaScript at runtime.&lt;/p&gt;

&lt;p&gt;Expression can be written in JSX using the curly braces {}.&lt;br&gt;
And to write multiple HTML lines you have to put parentheses around the HTML and wrap everything in a single Top level element.&lt;br&gt;
For example,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const newElement = (
  &amp;lt;div&amp;gt;
    &amp;lt;h1&amp;gt;I am a header.&amp;lt;/h1&amp;gt;
    &amp;lt;p&amp;gt; I am a paragraph.&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Functional Component:&lt;/strong&gt; A component is an independent, reusable code block which divides the UI into smaller pieces. A functional component is basically a JavaScript/ES6 function that returns a React element(JSX). It needs to exported to be used later in somewhere else.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const Welcome = (props) =&amp;gt; {
  return &amp;lt;h1&amp;gt;Hello, {props.name}&amp;lt;/h1&amp;gt;
}

export default Welcome;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And to use it we need to import it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import Welcome from './Welcome';

const App = () =&amp;gt; {
  return(
    &amp;lt;div className="App"&amp;gt;
      &amp;lt;Welcome /&amp;gt;
    &amp;lt;div&amp;gt;
  )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Props:&lt;/strong&gt; Props is short for properties ant they are used to pass data between React components. React's data flow between components is uni-directional (from parent to child only);&lt;br&gt;
For example, if you want to pass something from app to component you have to pass it like an attribute with suitable name.&lt;br&gt;
Here, I am passing 'name' from the App component to Welcome component. If you need to pass data dynamically just use the curly braces.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import Welcome from './Welcome';

const App = () =&amp;gt; {
  return(
    &amp;lt;div className="App"&amp;gt;
      &amp;lt;Welcome name="Justin" /&amp;gt;
    &amp;lt;div&amp;gt;
  )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, in the Welcome component we will get the data in the 'props'.&lt;br&gt;
And we can use it like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const Welcome = (props) =&amp;gt; {
  return &amp;lt;h1&amp;gt;Hello {props.name}!&amp;lt;/h1&amp;gt;
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;State:&lt;/strong&gt; React has another special built-in object called state, which allows components to create and manage their own data. So unlike props, components cannot pass data with state, but they can create and manage it internally.&lt;br&gt;
React components are rendered (with state) based on the data in the state. State holds the initial information. So, when state changes, React gets informed and immediately re-renders the part of the DOM which actually needs to be changed. There is method called 'setState' which triggers the re-rendering process for the updated parts. React gets informed, knows which parts to change, and does it quickly without re-rendering the whole DOM.&lt;br&gt;
In functional components, with the help of React Hooks we can use this 'state'.&lt;br&gt;
We will implement a simple counter using React's useState hook.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { useState } from "react";

function Counter() {
  // Set the initial count state to zero, 0
  const [count, setCount] = useState(0);

  // Create handleIncrement event handler
  const handleIncrement = () =&amp;gt; {
    setCount(prevCount =&amp;gt; prevCount + 1);
  };

  //Create handleDecrement event handler
  const handleDecrement = () =&amp;gt; {
    setCount(prevCount =&amp;gt; prevCount - 1);
  };
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;div&amp;gt;
        &amp;lt;button onClick={handleDecrement}&amp;gt;-&amp;lt;/button&amp;gt;
        &amp;lt;h5&amp;gt;Count is {count}&amp;lt;/h5&amp;gt;
        &amp;lt;button onClick={handleIncrement}&amp;gt;+&amp;lt;/button&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;button onClick={() =&amp;gt; setCount(0)}&amp;gt;Reset&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}

export default Counter;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And use this component is the App.js like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from "react";
import Counter from "../Counter";

export default function App() {
  return (
    &amp;lt;div className="App"&amp;gt;
      &amp;lt;Counter/&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;useEffect:&lt;/strong&gt; A functional React component uses props and/or state to calculate the output. If the functional component makes calculations that don’t target the output value, then these calculations are named side-effects.&lt;/p&gt;

&lt;p&gt;useEffect() hook accepts 2 arguments:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;useEffect(callback[, dependencies])&lt;/code&gt;;&lt;/p&gt;

&lt;p&gt;callback is the callback function containing side-effect logic. &lt;code&gt;useEffect()&lt;/code&gt; executes the callback function after React has committed the changes to the screen.&lt;/p&gt;

&lt;p&gt;dependencies is an optional array of dependencies. &lt;code&gt;useEffect()&lt;/code&gt; executes callback only if the dependencies have changed between renderings.&lt;br&gt;
Put your side-effect logic into the callback function, then use the dependencies argument to control when you want the side-effect to run. That’s the sole purpose of &lt;code&gt;useEffect()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;React Events:&lt;/strong&gt; Just like HTML, React can perform actions based on user events. Reach has the same events as HTML: click, change, mouserover etc.&lt;br&gt;
React events are written in camelCase sytax: &lt;code&gt;onClick&lt;/code&gt; instead of &lt;code&gt;onclick&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react';
import ReactDOM from 'react-dom';

function shoot() {
  alert("Great Shot!");
}

const myelement = (
  &amp;lt;button onClick={shoot}&amp;gt;Take the shot!&amp;lt;/button&amp;gt;
);

ReactDOM.render(myelement, document.getElementById('root'));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to pass an argument in the event handler, then you have to wrap the handler into an anonymous arrow function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react';
import ReactDOM from 'react-dom';

function shoot(condition) {
  if (condition) {
    alert("Great Shot!");
  }
  alert("Keep going on");
}

const myelement = (
  &amp;lt;button onClick={() =&amp;gt; shoot(true)}&amp;gt;Take the shot!&amp;lt;/button&amp;gt;
);

ReactDOM.render(myelement, document.getElementById('root'));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;React CSS:&lt;/strong&gt; To style an element with the inline style attribute, the value must be a JavaScript object. Properties with two name, like &lt;code&gt;background-color&lt;/code&gt;, must be written in camel case syntax.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const MyHeader = () =&amp;gt; {
  return (
      &amp;lt;div&amp;gt;
      &amp;lt;h1 style={{color: "white", backgroundColor: 'black'}}&amp;gt;Hello Style!&amp;lt;/h1&amp;gt;
      &amp;lt;p&amp;gt;Add a little style!&amp;lt;/p&amp;gt;
      &amp;lt;/div&amp;gt;
    );
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also create an object with styling information, and refer it in the style attribute:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const myStyle = {
  color: "white", 
  backgroundColor: 'black'
}

const MyHeader = () =&amp;gt; {
  return (
      &amp;lt;div&amp;gt;
      &amp;lt;h1 style={myStyle}&amp;gt;Hello Style!&amp;lt;/h1&amp;gt;
      &amp;lt;p&amp;gt;Add a little style!&amp;lt;/p&amp;gt;
      &amp;lt;/div&amp;gt;
    );
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Glassmorphism Login Form With HTML &amp; CSS</title>
      <author>Nikhil Bobade </author>
      <pubDate>Fri, 07 May 2021 14:24:43 +0000</pubDate>
      <link>https://dev.to/nikhil27b/glassmorphism-login-form-with-html-css-2k0l</link>
      <guid>https://dev.to/nikhil27b/glassmorphism-login-form-with-html-css-2k0l</guid>
      <description>&lt;p&gt;Today I created a Glassmorphism Login form with HTML &amp;amp; CSS. this login form is very simple but looks good I use the Glassmorphism effect to create this login form. I hope you like this also comments about your thoughts.&lt;/p&gt;

&lt;p&gt;For more content follow me on Instagram  &lt;a href="https://www.instagram.com/developer_nikhil27/"&gt;@developer_nikhil27&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/NikhilBobade/embed/MWpYEzj?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Introducing... My New Site! ✨</title>
      <author>George Francis</author>
      <pubDate>Fri, 07 May 2021 14:20:04 +0000</pubDate>
      <link>https://dev.to/georgedoescode/introducing-my-new-site-5g8g</link>
      <guid>https://dev.to/georgedoescode/introducing-my-new-site-5g8g</guid>
      <description>&lt;p&gt;Check out the site here! &lt;a href="https://georgefrancis.dev/"&gt;https://georgefrancis.dev/&lt;/a&gt; 👀&lt;/p&gt;




&lt;p&gt;Hey! How's it going? I've been a little quiet on DEV recently, but... I'm very happy to finally share why! 🎉&lt;/p&gt;

&lt;p&gt;Well, as you might have noticed from the big ol' title/URL above, I have launched my very own site! As much as I love DEV 💛, and think it's a fantastic place to publish, I have found myself wanting a singular home for all of my CodePens, articles, and other bits and pieces — so I decided to build one. &lt;/p&gt;

&lt;p&gt;The site is built with &lt;a href="https://www.11ty.dev/"&gt;Eleventy&lt;/a&gt;, hosted on &lt;a href="https://www.netlify.com/"&gt;Netlify&lt;/a&gt;, and is finished off with a healthy scoop of generative magic ✨ It features all of my past writing from DEV, and will be the best place to catch any new content from me going forward. &lt;/p&gt;

&lt;p&gt;Honestly, I could chat forever about the design process, tech stack, etc, &lt;em&gt;(and maybe I will someday)&lt;/em&gt; but for now, I'd just like to share the site with y'all! If you do have any specific questions, though, please do give me a shout. I'm always happy to chat.&lt;/p&gt;

&lt;p&gt;Anyway, now that the site is launched, I am starting to rattle through my ever-growing Trello list of article ideas, so expect some fresh new creative coding/generative art content from me soon 🎨&lt;/p&gt;

&lt;p&gt;In case you missed it up there ^ &lt;a href="https://www.georgefrancis.dev"&gt;here's a link to the site.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cheers! &lt;/p&gt;

&lt;p&gt;George 👀&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>webdev</category>
      <category>css</category>
      <category>news</category>
    </item>
    <item>
      <title>Building a Kubernetes CI/CD Pipeline with GitLab and Helm</title>
      <author>Daniel Slapelis</author>
      <pubDate>Fri, 07 May 2021 14:10:46 +0000</pubDate>
      <link>https://dev.to/danielslapelis/building-a-kubernetes-ci-cd-pipeline-with-gitlab-and-helm-km9</link>
      <guid>https://dev.to/danielslapelis/building-a-kubernetes-ci-cd-pipeline-with-gitlab-and-helm-km9</guid>
      <description>&lt;p&gt;Everyone loves GitLab CI and Kubernetes.&lt;/p&gt;

&lt;p&gt;GitLab CI (Continuous Integration) is a popular tool for building and testing software developers write for applications. GitLab CI helps developers build code faster, more confidently, and detect errors quickly.&lt;/p&gt;

&lt;p&gt;Kubernetes, popularly shortened to K8s, is a portable, extensible, open-source platform for managing containerization workloads and services. K8s is used by companies of all sizes everyday to automate deployment, scaling, and managing applications in containers.&lt;/p&gt;

&lt;p&gt;The purpose of this post is to show how you can bolt on the Continuous Delivery (CD) piece of the puzzle to &lt;a href="https://dev.to/services/gitlab-professional-services-pipeline-healthcheck"&gt;build a CI/CD pipeline&lt;/a&gt; so you can deploy your applications to Kubernetes. But before we get too far, we're going to need to talk about Helm, which is an important part of the puzzle.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-the-helm"&gt;
  &lt;/a&gt;
  What the Helm?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://helm.sh"&gt;Helm calls itself "the package manager for Kubernetes".&lt;/a&gt; That's a pretty accurate description. Helm is a versatile, sturdy tool DevOps engineers can use to define configuration files in, and perform variable substitution to create consistent deployments to our clusters, and have different variables for different environments.&lt;/p&gt;

&lt;p&gt;It's certainly the right solution to the problem we're covering here.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-we-do-it"&gt;
  &lt;/a&gt;
  How do we do it?
&lt;/h2&gt;

&lt;p&gt;First off, a few prerequisites. You’re going to have to have this all hammered out before you started with the project. There’s links to helpful documentation below if you need help.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You already have an &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/getting-started.html"&gt;Amazon EKS cluster&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You already know how to use &lt;a href="https://docs.gitlab.com/ee/ci/"&gt;GitLab CI&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You have a &lt;a href="https://docs.gitlab.com/runner/executors/kubernetes.html"&gt;GitLab CI runner&lt;/a&gt; configured in your Kubernetes cluster.&lt;/li&gt;
&lt;li&gt;You have the &lt;a href="https://github.com/kubernetes-sigs/aws-load-balancer-controller"&gt;AWS Load Balancer Controller&lt;/a&gt; running in your cluster.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With those boxes checked, we can get started. You'll want to create a new repository in GitLab first for us to use in this example. Once you've done that we can get started with creating our files.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#file-tree"&gt;
  &lt;/a&gt;
  File tree
&lt;/h2&gt;

&lt;p&gt;Basically, at the end our folder/file structure is going to look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;dir&amp;gt;
├── chart/
|   ├── Chart.yaml
|   ├── values.yaml
|   └── templates/
|      ├── deployment.yaml
|      ├── service.yaml
|      ├── ingress.yaml
|      └── configmap.yaml
└── gitlab-ci.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#valuesyaml"&gt;
  &lt;/a&gt;
  values.yaml
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;applicationName: my-first-app
certArn: your-certificate-arn
domain: your domain name
subnets: your subnets
securityGroups: your security groups
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#deploymentyaml"&gt;
  &lt;/a&gt;
  deployment.yaml
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.applicationName }}
  namespace: {{ .Values.applicationName  }}
spec:
  replicas: 2
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      app: {{ .Values.applicationName }}
  template:
    metadata:
      labels:
        app: {{ .Values.applicationName  }}
    spec:
      containers:
        - name: {{ .Values.applicationName }}
          imagePullPolicy: Always
          image: nginx:1.19.4
          ports:
            - containerPort: 80
          volumeMounts:
            - mountPath: /usr/share/nginx/html/index.html
              name: nginx-conf
              subPath: index.html
      volumes:
        - name: nginx-conf
          configMap:
            name: {{ .Values.applicationName  }}-configmap
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the configuration file that defines our deployment. You can see there are a few lines with &lt;code&gt;{{ some text }}&lt;/code&gt;. This is how we use a variable we define in our values file within our chart.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configmapyaml"&gt;
  &lt;/a&gt;
  configmap.yaml
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.applicationName }}-configmap
  namespace: {{ .Values.applicationName }}
data:
  index.html: |
    &amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
      &amp;lt;h1&amp;gt;My first Helm deployment!&amp;lt;/h1&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
      &amp;lt;p&amp;gt;Thanks for checking out my first Helm deployment.&amp;lt;/p&amp;gt;
    &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This config map just defines a simple index page that we'll display for our app.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#serviceyaml"&gt;
  &lt;/a&gt;
  service.yaml
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.applicationName }}
  namespace: {{ .Values.applicationName }}
spec:
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
      name: {{ .Values.applicationName }}
    - port: 80
      targetPort: 80
      protocol: TCP
      name: {{ .Values.applicationName }}
  type: NodePort
  selector:
    app: {{ .Values.applicationName }}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#ingressyaml"&gt;
  &lt;/a&gt;
  ingress.yaml
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: {{ .Values.applicationName }}
  namespace: {{ .Values.applicationName }}
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/subnets: {{ .Values.subnets }}
    alb.ingress.kubernetes.io/healthcheck-path: /
    alb.ingress.kubernetes.io/security-groups: {{ .Values.securityGroups }}
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/certificate-arn:  {{ .Values.certArn }}
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS":443}]'
    alb.ingress.kubernetes.io/actions.ssl-redirect: '{"Type": "redirect", "RedirectConfig": { "Protocol": "HTTPS", "Port": "443", "StatusCode": "HTTP_301"}}'
spec:
  rules:
    - host: {{ .Values.applicationName }}.{{ .Values.domain }}
      http:
        paths:
        - path: /*
          backend:
            serviceName: ssl-redirect
            servicePort: use-annotation
        - path: /*
          backend:
            serviceName: {{ .Values.applicationName }}
            servicePort: 80
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#gitlabciyml"&gt;
  &lt;/a&gt;
  .gitlab-ci.yml
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;stages:
  - deploy

variables:
  DOCKER_HOST: tcp://localhost:2375/
  DOCKER_DRIVER: overlay2
  APP_NAME: my-first-app

deploy:
  stage: deploy
  image: alpine/helm:3.2.1
  script:
    - helm upgrade ${APP_NAME} ./charts --install --values=./charts/values.yaml --namespace ${APP_NAME}
  rules:
    - if: $CI_COMMIT_BRANCH == 'master'
      when: always
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#okay-we-have-all-the-files-now-what"&gt;
  &lt;/a&gt;
  Okay we have all the files. Now what?
&lt;/h2&gt;

&lt;p&gt;Well, after you have all the files defined and your infrastructure follows our prerequisites, there's not much left to do.&lt;/p&gt;

&lt;p&gt;If you commit these files, GitLab will interpet your &lt;code&gt;.gitlab-ci.yml&lt;/code&gt; file and initiate a pipeline. Our pipeline only has one stage and one job (deploy). It'll spin up a container in the cluster for the deployment using the &lt;code&gt;helm:3.2.1&lt;/code&gt; image and run our &lt;code&gt;script&lt;/code&gt; command. This does all of the heavy lifting for us with creating all of the files required in our namespace and starting our application.&lt;/p&gt;

&lt;p&gt;If you configure in Route53 a DNS record like &lt;code&gt;my-first-app.my-domain.com&lt;/code&gt; with an A record to the load balancer that the ingress controller created, you'll see the index page we defined in the configmap!&lt;/p&gt;

&lt;p&gt;This post first appeared on our &lt;a href="https://nextlinklabs.com/insights/kubernetes-ci-cd-gitlab-with-helm"&gt;blog&lt;/a&gt; where we write about &lt;a href="https://nextlinklabs.com/services/devops-consulting-services"&gt;devops and devops consulting services&lt;/a&gt;.  &lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>helm</category>
      <category>gitlab</category>
      <category>devops</category>
    </item>
    <item>
      <title>DISCUSS: The blurred line between front-end and fullstack</title>
      <author>Naseki</author>
      <pubDate>Fri, 07 May 2021 14:05:12 +0000</pubDate>
      <link>https://dev.to/naseki/discuss-the-blurred-line-between-front-end-and-fullstack-20co</link>
      <guid>https://dev.to/naseki/discuss-the-blurred-line-between-front-end-and-fullstack-20co</guid>
      <description>&lt;p&gt;The meaning of a "front-end webdeveloper" has really shifted over the years as more technologies started becoming the norm. Here are two of my favourite articles that talk about this: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://css-tricks.com/ooooops-i-guess-were-full-stack-developers-now/"&gt;&lt;strong&gt;CSS Tricks&lt;/strong&gt;: ooooops I guess we’re* full-stack developers now&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://bradfrost.com/blog/post/front-of-the-front-end-and-back-of-the-front-end-web-development/"&gt;&lt;strong&gt;Brad Frost&lt;/strong&gt;: front-of-the-front-end and back-of-the-front-end web development&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#frontends-without-frontiers"&gt;
  &lt;/a&gt;
  Front-ends without frontiers
&lt;/h1&gt;

&lt;p&gt;I've started off as a front-end webdeveloper myself. As I started learning more back-end technologies it was hard for me to tell when I could start considering myself a fullstack. Even today, I'm not actually sure where the front-end ends and where the back-end begins.&lt;/p&gt;

&lt;p&gt;The front-end has become such a blurred subject that it made job hunting exceedingly slower. Now you have to carefully read every job description just to determine what kind of "front-end webdeveloper" they're talking about.&lt;/p&gt;

&lt;p&gt;I've even seen job descriptions that use front-end and fullstack interchangeably. Yes. Not even sure if that's intentional or they're a little confused themselves. 😶&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#%E2%9C%8D-comment-below-answering-the-following-questions"&gt;
  &lt;/a&gt;
  ✍ Comment below answering the following questions
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Do you consider yourself a fullstack webdeveloper? Why?&lt;/li&gt;
&lt;li&gt;If you could make a clear definition of "front-end" and "fullstack", what would it be?&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ciETrbsg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sa0hfs0886uf0g7c0b7e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ciETrbsg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sa0hfs0886uf0g7c0b7e.png" alt="Naseki logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/Naseki_"&gt;Twitter&lt;/a&gt; | &lt;a href="https://naseki.com"&gt;Website&lt;/a&gt; | &lt;a href="https://buttondown.email/Naseki/"&gt;Newsletter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>watercooler</category>
      <category>webdev</category>
    </item>
    <item>
      <title>#30DaysOfAppwrite : Server Side SDKs</title>
      <author>Christy Jacob</author>
      <pubDate>Fri, 07 May 2021 13:54:27 +0000</pubDate>
      <link>https://dev.to/appwrite/30daysofappwrite-server-side-sdks-24di</link>
      <guid>https://dev.to/appwrite/30daysofappwrite-server-side-sdks-24di</guid>
      <description>&lt;h1&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h1&gt;

&lt;p&gt;Appwrite is an open-source, self-hosted Backend-as-a-Service that makes app development &lt;strong&gt;easier&lt;/strong&gt; with a suite of SDKs and APIs to accelerate app development. &lt;a href="http://30days.appwrite.io/"&gt;#30DaysOfAppwrite&lt;/a&gt; is a month long event focussed at giving developers a walkthrough of all of Appwrite's features, starting from the basics to more advanced features like cloud functions! Alongside we will also be building a fully featured Medium Clone to demonstrate how these concepts can be applied when building a real world app. We also have some exciting prizes for developers who follow along with us!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#server-side-sdks"&gt;
  &lt;/a&gt;
  Server Side SDKs
&lt;/h1&gt;

&lt;p&gt;Welcome to Day 7 👋 . Today we're going to take a look at Appwrite's &lt;a href="https://appwrite.io/docs/sdks#server"&gt;Server Side SDKs&lt;/a&gt; and talk about the differences between the Client and Server SDKs. The differences between Client and Server Side SDKs seem to be mysterious for a lot of devs so this guide will aim to demystify some of those confusions.&lt;/p&gt;

&lt;p&gt;Appwrite's vision emphasizes the fact that Backend As A Service should not be designed only for front-end developers. Building upon this vision, Appwrite was designed to be platform agnostic and integrates seamlessly with client and server side applications. Because Appwrite is self-hosted it can be used behind your existing firewall and work alongside your existing backend services. Appwrite doesn't aim to replace your backend, instead work alongside it.&lt;/p&gt;

&lt;p&gt;Appwrite officially supports 6 Server Side SDKs with more in the pipeline. If you didn't already know, all our SDKs are automatically generated from the Swagger Specification of our APIs. This allows our small team to maintain a total of 8 (Client + Server) SDKs. We just ❤️ PRs! If you would like to help us create SDKs in your favourite language, feel free to check out &lt;a href="https://github.com/appwrite/sdk-generator"&gt;SDK Generator&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-are-they-different"&gt;
  &lt;/a&gt;
  🤔 How are they different?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#authentication"&gt;
  &lt;/a&gt;
  Authentication
&lt;/h3&gt;

&lt;p&gt;The key difference between the client and server-side SDKs is the authentication mechanism. Server side SDKs use a scoped API key to access the Appwrite API whereas the client side SDKs rely on a secure cookie for authentication. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scopes"&gt;
  &lt;/a&gt;
  Scopes
&lt;/h3&gt;

&lt;p&gt;The second main difference is the scopes that the client and server side SDKs are allowed to access. The scopes limit the kind of tasks you can achieve with the SDKs. The server side SDKs offer much more power and flexibility and allows you to control many more aspects of Appwrite. Using your API Keys, you can access Appwrite services using the SDK of your choice. &lt;/p&gt;

&lt;p&gt;To create a new API key, go to your API keys tab in your project setting using your Appwrite console and click the 'Add API Key' button. When adding a new API Key, you can choose the scopes that you would like to grant to your application. It is a best practice to allow &lt;strong&gt;only&lt;/strong&gt; the permissions you need to meet your project goals. If you need to replace your API Key, create a new key, update your app credentials and, once ready, delete your old key.&lt;/p&gt;

&lt;p&gt;When using Appwrite API from your Server Side with an API Key you will automatically run in &lt;code&gt;admin mode&lt;/code&gt;. Admin mode disables the default &lt;a href="https://appwrite.io/docs/permissions"&gt;user permission access control&lt;/a&gt; restrictions and allows you to access all the server resources ( Documents, Users, Collections, Files, Teams) in your project, regardless of the read and write permissions. This is very useful when you want to manipulate your users' data like files and documents or even if you want to get a list of your users. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It is not recommended to run admin mode from a client as it will lead to huge privacy and security risks. Check the &lt;a href="https://appwrite.io/docs/admin"&gt;Admin Mode documentation&lt;/a&gt; to learn more.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The following table is a good visualisation of what you can and cannot do with the Client and Server Side SDKs and is a good summary of what we've covered. &lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Server&lt;/th&gt;
&lt;th&gt;Client&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;account&lt;/td&gt;
&lt;td&gt;Access to read and write on behalf of the currently logged-in user&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;users.read&lt;/td&gt;
&lt;td&gt;Access to read your project's users&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;users.write&lt;/td&gt;
&lt;td&gt;Access to create, update, and delete your project's users&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;teams.read&lt;/td&gt;
&lt;td&gt;Access to read your project's teams&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;teams.write&lt;/td&gt;
&lt;td&gt;Access to create, update, and delete your project's teams&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;collections.read&lt;/td&gt;
&lt;td&gt;Access to read your project's database collections&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;collections.write&lt;/td&gt;
&lt;td&gt;Access to create, update, and delete your project's database collections&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;documents.read&lt;/td&gt;
&lt;td&gt;Access to read your project's database documents&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;documents.write&lt;/td&gt;
&lt;td&gt;Access to create, update, and delete your project's database documents&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;files.read&lt;/td&gt;
&lt;td&gt;Access to read your project's storage files and preview images&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;files.write&lt;/td&gt;
&lt;td&gt;Access to create, update, and delete your project's storage files&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;functions.read&lt;/td&gt;
&lt;td&gt;Access to read your project's functions and code tags&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;functions.write&lt;/td&gt;
&lt;td&gt;Access to create, update, and delete your project's functions and code tags&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;execution.read&lt;/td&gt;
&lt;td&gt;Access to read your project's execution logs&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;execution.write&lt;/td&gt;
&lt;td&gt;Access to execute your project's functions&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;locale.read&lt;/td&gt;
&lt;td&gt;Access to access your project's Locale service&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;avatars.read&lt;/td&gt;
&lt;td&gt;Access to access your project's Avatars service&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;health.read&lt;/td&gt;
&lt;td&gt;Access to read your project's health status&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting started
&lt;/h2&gt;

&lt;p&gt;Getting started with the server Side SDK and making your first request is really simple. For the sake of this example, we will choose the Node SDK - the same principles apply to all the other SDKs as well.  &lt;/p&gt;

&lt;p&gt;The first step is to create a Node project and install the &lt;code&gt;node-appwrite&lt;/code&gt; package.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;getting-started
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;getting-started
&lt;span class="nv"&gt;$ &lt;/span&gt;npm init &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;node-appwrite &lt;span class="nt"&gt;--save&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next step is to head to your Appwrite Dashboard and create a new project. Give your project a name and click &lt;strong&gt;Create&lt;/strong&gt; to get started. Once the project is created, head over to the &lt;strong&gt;API keys&lt;/strong&gt; section and create a key with the required scopes (Make sure it has the &lt;code&gt;users.read&lt;/code&gt; and &lt;code&gt;users.write&lt;/code&gt; scopes since the example depends on that). Copy this key as we will need it in the next step. Also take a note of your &lt;strong&gt;Project ID&lt;/strong&gt; and &lt;strong&gt;API Endpoint&lt;/strong&gt; which can be found under the &lt;strong&gt;Settings&lt;/strong&gt; section in your Appwrite Dashboard. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ggeQRycE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3demvadzmxviscchucki.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ggeQRycE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3demvadzmxviscchucki.png" alt="Settings"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's time to initialise your SDK and make your first request. Fill in all the values you copied in the previous step. We will then try to create a user using the Appwrite SDK.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sdk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;node-appwrite&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;sdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;client&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setEndpoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://[HOSTNAME_OR_IP]/v1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your API Endpoint&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;5df5acd0d48c2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your project ID&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;919c2d18fb5d4...a2ae413da83346ad2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your secret key&lt;/span&gt;
&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;sdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Users&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;email@example.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There you have it! That was your first request using Appwrite's server-side SDK! If you would like to see this example in other languages that we support, you can check them out &lt;a href="https://appwrite.io/docs/getting-started-for-server"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you feel adventurous and would like to use the Appwrite API using your favourite HTTP request library, &lt;a href="https://dev.to/eldadfux/learn-how-you-can-take-advantage-of-the-appwrite-api-without-using-any-sdk-a41"&gt;this guide&lt;/a&gt; was written exactly for that!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits
&lt;/h2&gt;

&lt;p&gt;We hope you liked this write up. You can follow &lt;a href="https://twitter.com/search?q=%2330daysofappwrite"&gt;#30DaysOfAppwrite&lt;/a&gt; on Social Media to keep up with all of our posts. The complete event timeline can be found &lt;a href="http://30days.appwrite.io"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://appwrite.io/discord"&gt;Discord Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://appwrite.io/"&gt;Appwrite Homepage&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/appwrite"&gt;Appwrite's Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Feel free to reach out to us on Discord if you would like to learn more about Appwrite, Aliens or Unicorns 🦄. Stay tuned for tomorrow's article! Until then 👋&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>flutter</category>
      <category>webdev</category>
      <category>30daysofappwrite</category>
    </item>
    <item>
      <title>Data Structure APIs , A brief overview of APIs as they relate to JavaScript data structures.</title>
      <author>Dimer BWimBA</author>
      <pubDate>Fri, 07 May 2021 13:53:52 +0000</pubDate>
      <link>https://dev.to/dimer191996/data-structure-apis-a-brief-overview-of-apis-as-they-relate-to-javascript-data-structures-k59</link>
      <guid>https://dev.to/dimer191996/data-structure-apis-a-brief-overview-of-apis-as-they-relate-to-javascript-data-structures-k59</guid>
      <description>&lt;p&gt;Two month of data structure and I'm completely lost , i have ADHD  and  this is my only way to learn this stuff(writing).  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#anyway"&gt;
  &lt;/a&gt;
  anyway 🤭
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;🤗 I'm a straight up beginner and if I lie in this " article " fill free to correct me.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;leeeeet goooo 🦸‍♂️&lt;/p&gt;

&lt;p&gt;🦸 Data structures are all about choosing the right tool for the job. Do you need to store data in an ordered way, or do you just need to be able to store it and retrieve it quickly? What’s more important to your use case: how fast the data structure performs, or how much memory it takes up? Different data structures all have advantages, disadvantages, and use cases, and that’s the whole reason that there are different data structures!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;🤔Consider the &lt;code&gt;Array&lt;/code&gt; in JavaScript. It’s a really great data structure for storing ordered data because you can retrieve elements by index number. If you want the first element of an array, all you need to do is fetch it with index 0: &lt;code&gt;arrayName[0]&lt;/code&gt;. It also provides all sorts of helpful methods for manipulating elements, such as &lt;code&gt;.push()&lt;/code&gt; , &lt;code&gt;.pop()&lt;/code&gt; , &lt;code&gt;.sort()&lt;/code&gt; , and more. However, if you want to find out if a particular element exists in an array, you may need to iterate through the entire &lt;code&gt;array&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;🦸 What if I asked you to keep track of a series of numbers as I gave them to you, and then asked at the end whether I’d given you a particular number, you could probably do that in your memory. But if I asked you to do that in a computer program, you’d have to make choices about how to store the data. Let’s look at two possibilities of how we’d build storeNumber() and doYouHaveThisNumber() functions. Given the following list of numbers:&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;1, 250, -42, 0.4, 17&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;How might you store these numbers if I gave you each at a time? You might use an array:&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const listOfNumbers = [];
const storeNumber = num =&amp;gt; listOfNumbers.push(num);
const doYouHaveThisNumber = num =&amp;gt; listOfNumbers.includes(num);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;In this program, &lt;code&gt;storeNumber()&lt;/code&gt; adds a number to the array, and &lt;code&gt;doYouHaveThisNumber()&lt;/code&gt; returns true if that number exists in the array, and false otherwise. Looks pretty good, but what if you had 10000000 numbers? &lt;code&gt;doYouHaveThisNumber()&lt;/code&gt; might start getting pretty slow, since &lt;code&gt;Array.prototype.includes()&lt;/code&gt; iterates through the entire array until it finds the input value.&lt;/p&gt;

&lt;p&gt;Let’s try using another built-in data type in JavaScript, the Object. Since all we want to keep track of is whether we received a particular number, we can just store those numbers in an object, and set their values to true if we received them:&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const receivedNumbers = {};
const storeNumber = num =&amp;gt; receivedNumbers[num] = true;
const doYouHaveThisNumber = num =&amp;gt; receivedNumbers[num] === true;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;In this case, we’ll have the same result on the outside, but because retrieving a value from an object is much faster than iterating through an array, the overall result will be faster.&lt;/p&gt;

&lt;p&gt;In both cases, the public API of the code, meaning the parts of the code that we want the end-user to interact with, remained the same: we had two functions, &lt;code&gt;storeNumber()&lt;/code&gt; and &lt;code&gt;doYouHaveThisNumber()&lt;/code&gt;. The underlying implementation, or the way the functionality was actually achieved, is what altered.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;-&lt;/p&gt;

&lt;blockquote&gt;
&lt;h2&gt;
  &lt;a href="#but-wait-a-minute-wth-is-an-api"&gt;
  &lt;/a&gt;
  But wait a minute Wth is an API?
&lt;/h2&gt;

&lt;p&gt;API is an acronym for application programming interface. An API allows end-users to access properties and methods of data structures easily and without needing to do the “behind the scenes” work.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For example, if you want to add a new element to the end of an array, you don’t need to loop through the entire array, counting how many elements there are, and then setting &lt;code&gt;myArray[currentCount + 1]&lt;/code&gt; equal to the new value. Instead, you can just call .push() with the value you want to add. As a JavaScript programmer, you don’t actually need to know the actual strategy, or the underlying implementation, of how &lt;code&gt;.push()&lt;/code&gt; added an element to the end of the array in order to use it.&lt;/p&gt;

&lt;p&gt;The API of arrays provides lots of useful functionality, from adding and removing elements to the start and end of the array, to iterator methods that call a function on each element. If you wanted to find the smallest number in an array of numbers, however, you’d have to implement that functionality yourself.&lt;/p&gt;

&lt;blockquote&gt;
&lt;h2&gt;
  &lt;a href="#creating-your-own-apis"&gt;
  &lt;/a&gt;
  Creating Your Own APIs
&lt;/h2&gt;

&lt;p&gt;As you build your own data structures, you will implement the functionality to create public APIs. As in the example of &lt;code&gt;storeNumber()&lt;/code&gt; and &lt;code&gt;doYouHaveThisNumber()&lt;/code&gt;, the same public #API can be implemented in different ways, so it’s important to think about the advantages and disadvantages of different implementations.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;An #API is like a message to end-users. Some languages have classes that can have methods or fields that are either #public #(can be called from anywhere) or #private #(can only be called from within the class). Public methods are the ones that end-users of that class can call, and #private methods are only used by the class itself. #JavaScript doesn’t really support this concept, so properties that aren’t meant to be #public are often preceded by an underscore _. Let’s look at an example where we want to build a data structure with a restricted API.&lt;/p&gt;

&lt;p&gt;A stack is a data structure that only allows data to be added (pushed) or removed (popped) from the “top” of the stack. It just so happens that we could use an array as a stack, since it already has a &lt;code&gt;.push()&lt;/code&gt; and &lt;code&gt;.pop()&lt;/code&gt; method! However, arrays also allow you to add elements to the beginning or randomly access elements by index.&lt;/p&gt;

&lt;p&gt;We’re not going to cover all the ins and outs of the stack data structure right now, but to demonstrate public API vs implementation, let’s build a quick custom Stack class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Stack {
  constructor() {
    this._array = [];
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Stack, the array itself is stored as _array, so it’s a signal to other developers that to use the Stack as intended, they shouldn’t need to access it directly. From there, we can implement the &lt;code&gt;.push()&lt;/code&gt; and &lt;code&gt;.pop()&lt;/code&gt; methods:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Stack {
  constructor() {
    this._array = [];
  }

  push(newValue) {
    this._array.push(newValue);
  }

  pop() {
    return this._array.pop();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we’ve created a Stack data structure that limits direct interaction with the underlying data to &lt;code&gt;.push()&lt;/code&gt; and &lt;code&gt;.pop()&lt;/code&gt;. A developer could still access our underlying array to do other manipulation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const stack = new Stack();
stack._array.unshift('value');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;but they would then be breaking the intended behavior of the Stack class. The whole point of a public API is that we offer functionality to other end-users. If somebody were using our Stack class in a program, we could totally change the underlying implementation, and as long as the end-user API remained the same, their program should continue to function.&lt;/p&gt;

&lt;p&gt;As you build your own classes and data structures, it’s important to keep in mind this distinction between implementation #(what does this need internally to do its job) and the outside API #(how should users of this actually interact with it?).&lt;/p&gt;

</description>
      <category>datastructure</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>Is 0kb of *HTML* in your future? 🔮 A website without JS...HTML...CSS or IMAGES!?⁉😱</title>
      <author>InHuOfficial</author>
      <pubDate>Fri, 07 May 2021 13:47:39 +0000</pubDate>
      <link>https://dev.to/inhuofficial/is-0kb-of-html-in-your-future-a-website-without-js-html-css-or-images-37cn</link>
      <guid>https://dev.to/inhuofficial/is-0kb-of-html-in-your-future-a-website-without-js-html-css-or-images-37cn</guid>
      <description>&lt;p&gt;If you are new here then you might not have seen that I like to abuse the internet...and for those of you who know my shenanigans...you know what is coming 😋!!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--crs0Cmt5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6f5dr8a30aknqwfgbkc3.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--crs0Cmt5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6f5dr8a30aknqwfgbkc3.gif" alt='joker saying "here, we go" from The Dark Knight'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In case you missed it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;first &lt;a href="https://dev.to/inhuofficial/this-gif-is-accurate-to-within-a-minute-how-to-create-a-dynamic-gif-countdown-3fhd"&gt;I built a countdown timer without any JS, CSS or HTML!&lt;/a&gt; - &lt;strong&gt;pfff child's play&lt;/strong&gt; I hear you say!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fine...&lt;a href="https://dev.to/inhuofficial/a-pure-css-password-generator-they-said-it-can-t-be-done-4pla"&gt;I built a password generator in pure CSS&lt;/a&gt; - &lt;strong&gt;yawn&lt;/strong&gt;!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Really, not even a smile? well what about when &lt;a href="https://dev.to/inhuofficial/animations-without-js-or-css-or-images-pure-html-animation-45di"&gt;I managed to make animations without any CSS, JS or Images&lt;/a&gt;....&lt;strong&gt;slightly interesting&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ok, surely you like that &lt;a href="https://dev.to/inhuofficial/i-fit-the-whole-of-pong-into-a-24px-by-24px-image-steganography-g2h"&gt;I managed to squeeze a game of pong into a 16px by 16px image using stenography&lt;/a&gt;?...&lt;strong&gt;mildly intriguing&lt;/strong&gt; you say!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Well you are one tough cookie! So how about this one....&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A website that has 1 network request and 0 bytes of HTML sent with that network request.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now of course this isn't possible (I mean, of course it isn't possible, a website with a single network request and 0 bytes of HTML in that request, no CSS requests, no JS requests, no image requests, just a single file with no HTML...that just isn't going to work right....RIGHT???!??!!?!?!)&lt;/p&gt;

&lt;p&gt;Well if you use FireFox then the answer is...it is kind of possible!&lt;/p&gt;




&lt;p&gt;&lt;a href="https://inhu.co/demos/no-byte-website/"&gt;&lt;strong&gt;Open this page in FireFox - it looks like a website (albeit a super basic one).&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sadly it only works in FireFox so you might have to bookmark the article and come back to it when you can get to a laptop / PC!&lt;/p&gt;




&lt;p&gt;It isn't that impressive until you open developer tools and head over to the network Tab.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_OEZlxYx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/54p1mylfg4btmu7a8a7i.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_OEZlxYx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/54p1mylfg4btmu7a8a7i.jpg" alt="FireFox network tab showing a 0KB HTML file"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And this is my second trick, I am going to read your mind...ready?&lt;/p&gt;

&lt;p&gt;"Ok so one request for the page, wait there is no HTML like he said, how on earth, ahhh he used the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; element, I get it he must have inlined some styles, but wait a minute where are the styles &lt;strong&gt;actually coming from&lt;/strong&gt;, there is no CSS file showing in developer tools, is it a service worker (no that would show up) is it from a cookie (no but what a great idea for my next article), how the.....".&lt;/p&gt;

&lt;p&gt;Cue stunned silence, some head scratching and then a load of fiddling until you realise the trick (p.s. it has nothing to do with the favicon, that is just configured site wide!)!&lt;/p&gt;

&lt;p&gt;So there it is, a website with 0kb of HTML, JS, CSS or IMAGES in the network panel. Talk about performant!&lt;/p&gt;

&lt;p&gt;I will leave it to you to explore and work out what is going on but I love the fact that I built a website without sending a single byte of HTML!&lt;/p&gt;

&lt;p&gt;Once you have worked out how I did it, have a go yourself and see how impressive you can make a website with a single network request and 0kb of HTML!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-few-thank-yous"&gt;
  &lt;/a&gt;
  A few thank yous!
&lt;/h2&gt;

&lt;p&gt;The CSS to create the laptop is a butchered version of a codepen by &lt;a class="mentioned-user" href="https://dev.to/pandaquests"&gt;@pandaquests&lt;/a&gt;
, be &lt;a href="https://codepen.io/pandaquests"&gt;sure to check out their pens&lt;/a&gt; and give them some love as they create some great stuff!&lt;/p&gt;

&lt;p&gt;Also a big shout out to the origin of this (or at least the earliest article I could find on it) over at &lt;a href="https://www.impressivewebs.com/adding-css-to-a-page-via-http-headers/"&gt;impressivewebs.com &lt;/a&gt;, they also explain what is happening if you didn't manage to work it out yourself!&lt;/p&gt;

&lt;p&gt;Yes I "stole" the title from &lt;a href="https://dev.to/this-is-learning/is-0kb-of-javascript-in-your-future-48og"&gt;this article&lt;/a&gt; by &lt;a class="mentioned-user" href="https://dev.to/ryansolid"&gt;@ryansolid&lt;/a&gt;
 because I thought it was funny, go give that article some love (or "grief" depending on your view point, it was a controversial one in the comments for sure!)&lt;/p&gt;

&lt;p&gt;Oh and a little thank you to everyone who has read my silly (and not silly) articles so far, 50k page views might not be much but it is a nice start for someone who has only been writing for 3 months so, once again, thanks to you all!&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>html</category>
      <category>javascript</category>
      <category>css</category>
    </item>
    <item>
      <title>🚀10 Trending projects on GitHub for web developers - 7th May 2021</title>
      <author>Iain Freestone</author>
      <pubDate>Fri, 07 May 2021 13:46:33 +0000</pubDate>
      <link>https://dev.to/iainfreestone/10-trending-projects-on-github-for-web-developers-7th-may-2021-2ckf</link>
      <guid>https://dev.to/iainfreestone/10-trending-projects-on-github-for-web-developers-7th-may-2021-2ckf</guid>
      <description>&lt;p&gt;Trending Projects is available as a weekly newsletter please sign up at &lt;a href="https://www.iainfreestone.com"&gt;www.iainfreestone.com&lt;/a&gt; to ensure you never miss an issue.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-keystone"&gt;
  &lt;/a&gt;
  1. Keystone
&lt;/h3&gt;

&lt;p&gt;The most powerful headless CMS for Node.js — built with GraphQL and React&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/keystonejs"&gt;
        keystonejs
      &lt;/a&gt; / &lt;a href="https://github.com/keystonejs/keystone"&gt;
        keystone
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      The most powerful headless CMS for Node.js — built with GraphQL and React
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;div&gt;
  &lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/keystonejs/keystone/master/assets/readme-header-next.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WQvzO8iy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/keystonejs/keystone/master/assets/readme-header-next.png" width="445"&gt;&lt;/a&gt;
  &lt;br&gt;&lt;br&gt;
  &lt;p&gt;&lt;b&gt;A scalable platform and CMS to build Node.js applications.&lt;/b&gt;&lt;/p&gt;
  &lt;p&gt;&lt;code&gt;schema =&amp;gt; ({ GraphQL, AdminUI })&lt;/code&gt;&lt;/p&gt;
  &lt;br&gt;
  &lt;p&gt;Keystone Next is a preview of the next major release of KeystoneJS, the most powerful headless content management system around.&lt;/p&gt;
  Looking for Keystone 5? Head over to &lt;a href="https://github.com/keystonejs/keystone-5"&gt;&lt;code&gt;keystone-5&lt;/code&gt;&lt;/a&gt;.
  &lt;br&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;h2&gt;
Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/keystonejs/keystone/master/#whats-new"&gt;What's new?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/keystonejs/keystone/master/#keystone-5"&gt;Keystone 5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/keystonejs/keystone/master/#code-of-conduct"&gt;Code of Conduct&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/keystonejs/keystone/master/#license"&gt;License&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
What's new?&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://next.keystonejs.com" rel="nofollow"&gt;Keystone Next&lt;/a&gt; is a preview of the next major release of KeystoneJS, the most powerful headless content management system around. We've substantially rewritten the CLI, Schema config, and Admin UI to make them more powerful and easier to use than ever before.&lt;/p&gt;
&lt;p&gt;To learn more, check out our &lt;a href="https://github.com/keystonejs/keystone/issues/4962"&gt;What's next for KeystoneJS&lt;/a&gt; announcement post.&lt;/p&gt;
&lt;p&gt;You can learn more about the next version, which is now &lt;a href="https://next.keystonejs.com/roadmap" rel="nofollow"&gt;in preview&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Keystone 5&lt;/h2&gt;
&lt;p&gt;The &lt;a href="https://github.com/keystonejs/keystone-5"&gt;Keystone 5&lt;/a&gt; codebase is now in active maintenance mode and now lives at &lt;a href="https://github.com/keystonejs/keystone-5"&gt;keystonejs/keystone-5&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For more information please read our &lt;a href="https://github.com/keystonejs/keystone-5/issues/21"&gt;Keystone 5 and&lt;/a&gt;…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/keystonejs/keystone"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#2-lit"&gt;
  &lt;/a&gt;
  2. Lit
&lt;/h3&gt;

&lt;p&gt;Lit is a simple library for building fast, lightweight web components.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/lit"&gt;
        lit
      &lt;/a&gt; / &lt;a href="https://github.com/lit/lit"&gt;
        lit
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Lit is a simple library for building fast, lightweight web components.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/lit/lit/main/./packages/lit/logo.svg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R1t6lhkK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/lit/lit/main/./packages/lit/logo.svg" alt="Lit" width="300" height="141"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
Simple. Fast. Web Components.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/lit/lit/actions/workflows/tests.yml"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--thcm4vDW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/lit/lit/actions/workflows/tests.yml/badge.svg" alt="Build Status"&gt;&lt;/a&gt;
&lt;a href="https://www.npmjs.com/package/lit" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/686fd52ba84faeeaf37183757fae8bd1873e2de9bb3628653bca13cd9055bad8/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f6c69742e7376673f6c6f676f3d6e706d" alt="Published on npm"&gt;&lt;/a&gt;
&lt;a href="https://lit.dev/slack-invite/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e7d06e31b48eab9d3813d6b1843777c3cc943c2fd370cefb4cec8f4797d51ce6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f736c61636b2d6a6f696e253230636861742d3461313534622e7376673f6c6f676f3d736c61636b" alt="Join our Slack"&gt;&lt;/a&gt;
&lt;a href="https://github.com/web-padawan/awesome-lit"&gt;&lt;img src="https://camo.githubusercontent.com/e5d3197f63169393ee5695f496402136b412d5e3b1d77dc5aa80805fdd5e7edb/68747470733a2f2f617765736f6d652e72652f6d656e74696f6e65642d62616467652e737667" alt="Mentioned in Awesome Lit"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Lit is a simple library for building fast, lightweight web components.&lt;/p&gt;
&lt;p&gt;At Lit's core is a boilerplate-killing component base class that provides reactive state, scoped styles, and a declarative template system that's tiny, fast and expressive.&lt;/p&gt;
&lt;h3&gt;
Documentation&lt;/h3&gt;
&lt;p&gt;See the full documentation for Lit at &lt;a href="https://lit.dev" rel="nofollow"&gt;lit.dev&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For information about upgrading lit-html 1.x and lit-element 2.x code, see the &lt;a href="https://lit.dev/docs/releases/upgrade/" rel="nofollow"&gt;Lit 2.0 Upgrade Guide&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;
npm&lt;/h3&gt;
&lt;p&gt;To install from npm:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;npm i lit&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Lit Monorepo&lt;/h2&gt;
&lt;p&gt;This is the monorepo for upcoming Lit packages, including &lt;code&gt;lit&lt;/code&gt;, &lt;code&gt;lit-html&lt;/code&gt; 2.0 and &lt;code&gt;lit-element&lt;/code&gt; 3.0.&lt;/p&gt;
&lt;p&gt;lit-html 1.x source is available on the &lt;a href="https://github.com/lit/lit/tree/lit-html-1.x"&gt;&lt;code&gt;lit-html-1.x&lt;/code&gt;&lt;/a&gt; branch.&lt;/p&gt;
&lt;h3&gt;
Packages&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Core packages
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://raw.githubusercontent.com/lit/lit/main/./packages/lit"&gt;&lt;code&gt;lit&lt;/code&gt;&lt;/a&gt; - The primary user-facing package of Lit which includes everything from lit-html and lit-element.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://raw.githubusercontent.com/lit/lit/main/./packages/lit-element"&gt;&lt;code&gt;lit-element&lt;/code&gt;&lt;/a&gt; - The web component base class used in Lit.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://raw.githubusercontent.com/lit/lit/main/./packages/lit-html"&gt;&lt;code&gt;lit-html&lt;/code&gt;&lt;/a&gt; - The rendering library used by LitElement.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://raw.githubusercontent.com/lit/lit/main/./packages/reactive-element"&gt;&lt;code&gt;@lit/reactive-element&lt;/code&gt;&lt;/a&gt; - A low level base class that provides a reactive lifecycle…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/lit/lit"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#3-slick"&gt;
  &lt;/a&gt;
  3. Slick
&lt;/h3&gt;

&lt;p&gt;The last carousel you'll ever need&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/kenwheeler"&gt;
        kenwheeler
      &lt;/a&gt; / &lt;a href="https://github.com/kenwheeler/slick"&gt;
        slick
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      the last carousel you'll ever need
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="markdown"&gt;
&lt;h2&gt;
slick&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;the last carousel you'll ever need&lt;/em&gt;&lt;/p&gt;
&lt;h4&gt;
Demo&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://kenwheeler.github.io/slick/" rel="nofollow"&gt;http://kenwheeler.github.io/slick&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
CDN&lt;/h4&gt;
&lt;p&gt;To start working with Slick right away, there's a couple of CDN choices availabile
to serve the files as close, and fast as possible to your users:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cdnjs.com/libraries/slick-carousel" rel="nofollow"&gt;https://cdnjs.com/libraries/slick-carousel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.jsdelivr.com/projects/jquery.slick" rel="nofollow"&gt;https://www.jsdelivr.com/projects/jquery.slick&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;
Example using jsDelivr&lt;/h5&gt;
&lt;p&gt;Just add a link to the css file in your &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-text-html-basic js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-c"&gt;&amp;lt;!-- Add the slick-theme.css if you want default styling --&amp;gt;&lt;/span&gt;
&lt;span class="pl-kos"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;link&lt;/span&gt; &lt;span class="pl-c1"&gt;rel&lt;/span&gt;="&lt;span class="pl-s"&gt;stylesheet&lt;/span&gt;" &lt;span class="pl-c1"&gt;type&lt;/span&gt;="&lt;span class="pl-s"&gt;text/css&lt;/span&gt;" &lt;span class="pl-c1"&gt;href&lt;/span&gt;="&lt;span class="pl-s"&gt;//cdn.jsdelivr.net/npm/slick-carousel@1.8.1/slick/slick.css&lt;/span&gt;"/&amp;amp;gt
&lt;span class="pl-c"&gt;&amp;lt;!-- Add the slick-theme.css if you want default styling --&amp;gt;&lt;/span&gt;
&lt;span class="pl-kos"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;link&lt;/span&gt; &lt;span class="pl-c1"&gt;rel&lt;/span&gt;="&lt;span class="pl-s"&gt;stylesheet&lt;/span&gt;" &lt;span class="pl-c1"&gt;type&lt;/span&gt;="&lt;span class="pl-s"&gt;text/css&lt;/span&gt;" &lt;span class="pl-c1"&gt;href&lt;/span&gt;="&lt;span class="pl-s"&gt;//cdn.jsdelivr.net/npm/slick-carousel@1.8.1/slick/slick-theme.css&lt;/span&gt;"/&amp;gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Then, before your closing &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tag add:&lt;/p&gt;
&lt;div class="highlight highlight-text-html-basic js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-kos"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;script&lt;/span&gt; &lt;span class="pl-c1"&gt;type&lt;/span&gt;="&lt;span class="pl-s"&gt;text/javascript&lt;/span&gt;" &lt;span class="pl-c1"&gt;src&lt;/span&gt;="&lt;span class="pl-s"&gt;//cdn.jsdelivr.net/npm/slick-carousel@1.8.1/slick/slick.min.js&lt;/span&gt;"&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;&lt;span class="pl-kos"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="pl-ent"&gt;script&lt;/span&gt;&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h4&gt;
Package Managers&lt;/h4&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Bower&lt;/span&gt;
bower install --save slick-carousel
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; NPM&lt;/span&gt;
npm install slick-carousel&lt;/pre&gt;

&lt;/div&gt;
&lt;h4&gt;
Contributing&lt;/h4&gt;
&lt;p&gt;PLEASE review CONTRIBUTING.markdown prior to requesting a feature, filing a pull request or…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/kenwheeler/slick"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#4-remix-icon"&gt;
  &lt;/a&gt;
  4. Remix Icon
&lt;/h3&gt;

&lt;p&gt;Open source neutral style icon system&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Remix-Design"&gt;
        Remix-Design
      &lt;/a&gt; / &lt;a href="https://github.com/Remix-Design/RemixIcon"&gt;
        RemixIcon
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Open source neutral style icon system
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="https://remixicon.com" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5ce9848c3ffc43cf9ae7189e1e5ec09af074014861a03001e581bad7a16e55ba/687474703a2f2f63646e2e72656d697869636f6e2e636f6d2f6c6f676f2d6769746875622e737667" alt="logo"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.npmjs.com/package/remixicon" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ebc6510c4cf74b18213d3c9a05c1b66b3190b9bbbb5289877c256c864c15e095/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f72656d697869636f6e2e7376673f6c6162656c436f6c6f723d34413441344126636f6c6f723d303036414646267374796c653d666c61742d737175617265" alt="npm"&gt;&lt;/a&gt;
&lt;a href="https://www.npmjs.com/package/remixicon" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5672fc26c5af58ccfa8d503af254ea2bcb4c48da81f714b1f36329fa4a59ae67/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f64742f72656d697869636f6e2e7376673f6c6162656c436f6c6f723d34413441344126636f6c6f723d323341463546267374796c653d666c61742d737175617265" alt="downloads"&gt;&lt;/a&gt;
&lt;a href="https://www.jsdelivr.com/package/npm/remixicon" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/0a7b27749721479f2e5298a2606d473d7df91d9a5948388b88822d80af7b6c16/68747470733a2f2f646174612e6a7364656c6976722e636f6d2f76312f7061636b6167652f6e706d2f72656d697869636f6e2f6261646765" alt=""&gt;&lt;/a&gt;
&lt;a href="https://spectrum.chat/remixdesign/remixicon" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5589bc9d075f07361cde8eeeb8f1c3b2ca9dc2cfa3ac3db22cbaebd0029aecd5/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636861742d537065637472756d2d3730323846352e7376673f6c6162656c436f6c6f723d344134413441267374796c653d666c61742d737175617265" alt="spectrum"&gt;&lt;/a&gt;
&lt;a href="https://remixicon.com/#donate" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/0107c4081c375ce7efd7b23e6fc2a62d343680b0f426b58e1cd54e2ab9f38cb5/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d446f6e6174652d4441363432392e7376673f7374796c653d666c61742d737175617265" alt="donate"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;English | &lt;a href="https://raw.githubusercontent.com/Remix-Design/RemixIcon/master/./README_CN.md"&gt;简体中文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Remix-Design/RemixIcon/issues/232"&gt;Suspension Notification&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Remix Icon is a set of open-source neutral-style system symbols for designers and developers. Unlike a patchwork icon library, 2200+ icons are all elaborately crafted so that they are born with the gene of readability, consistency and perfect pixels. Each icon was designed in "Outlined" and "Filled" styles based on a 24x24 grid. Of course, all the icons are free for both personal and commercial use.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://remixicon.com" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/fcc655218b07770c13935a69a42bd598f5fc275c019e4f6048d65ca2254b699c/687474703a2f2f63646e2e72656d697869636f6e2e636f6d2f707265766965772e737667" alt="icon demo"&gt;&lt;/a&gt;
View the full set of Remix Icons at &lt;a href="https://remixicon.com" rel="nofollow"&gt;remixicon.com&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Usage&lt;/h2&gt;
&lt;h3&gt;
Basic Usage&lt;/h3&gt;
&lt;p&gt;Just click the icons you want from &lt;a href="https://remixicon.com" rel="nofollow"&gt;remixicon.com&lt;/a&gt;, and then you can download the icons in SVG or PNG format.&lt;/p&gt;
&lt;p&gt;Designers can click the &lt;code&gt;Copy SVG&lt;/code&gt; button and then press &lt;code&gt;⌘+V&lt;/code&gt; or &lt;code&gt;Ctrl+V&lt;/code&gt; to paste the vector graphic into your design tool directly, easy and simple.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We recommend that designers download or copy icons from our website when needed instead of managing all of them…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Remix-Design/RemixIcon"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#5-nextjs-notion-starter-kit"&gt;
  &lt;/a&gt;
  5. Next.js Notion Starter Kit
&lt;/h3&gt;

&lt;p&gt;Deploy your own Notion-powered website in minutes with Next.js and Vercel.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/transitive-bullshit"&gt;
        transitive-bullshit
      &lt;/a&gt; / &lt;a href="https://github.com/transitive-bullshit/nextjs-notion-starter-kit"&gt;
        nextjs-notion-starter-kit
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Deploy your own Notion-powered website in minutes with Next.js and Vercel.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
  &lt;a href="https://transitivebullsh.it/nextjs-notion-starter-kit" rel="nofollow"&gt;
    &lt;img alt="Example article page" src="https://camo.githubusercontent.com/20f0997c1fbf3a745797ee8f80b47b8e041f05e953dd849d7afc90484d07f341/68747470733a2f2f737366792e696f2f68747470732533412532462532467777772e6e6f74696f6e2e736f253246696d616765253246687474707325323533412532353246253235324673332d75732d776573742d322e616d617a6f6e6177732e636f6d25323532467365637572652e6e6f74696f6e2d7374617469632e636f6d253235324664313437643736632d323861342d346364642d613530332d32643662636335306137383725323532467472616e73697469766562756c6c73682e69745f5f2835292d6f70742e6a70672533467461626c65253344626c6f636b253236696425334435623837623731372d636135622d343964612d623137632d31326333656162313634346125323663616368652533447632" width="689"&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;h1&gt;
Next.js Notion Starter Kit&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;The perfect starter kit for building websites with Next.js and Notion.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://travis-ci.com/transitive-bullshit/nextjs-notion-starter-kit" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/a86a605843899d163917a06c9ba16c4be833bb88c3131e6d1553d4611a9ad38e/68747470733a2f2f7472617669732d63692e636f6d2f7472616e7369746976652d62756c6c736869742f6e6578746a732d6e6f74696f6e2d737461727465722d6b69742e7376673f6272616e63683d6d61696e" alt="Build Status"&gt;&lt;/a&gt; &lt;a href="https://prettier.io" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ead313e18d0b714b50839b1e910575a53dd05d564c45d12b046739c42806ea07/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64655f7374796c652d70726574746965722d627269676874677265656e2e737667" alt="Prettier Code Formatting"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Intro&lt;/h2&gt;
&lt;p&gt;This repo is what I use to power my personal blog / portfolio site &lt;a href="https://transitivebullsh.it" rel="nofollow"&gt;transitivebullsh.it&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It uses Notion as a CMS, fetching content from Notion and then uses &lt;a href="https://nextjs.org/" rel="nofollow"&gt;Next.js&lt;/a&gt; and &lt;a href="https://github.com/NotionX/react-notion-x"&gt;react-notion-x&lt;/a&gt; to render everything.&lt;/p&gt;
&lt;p&gt;The site is then deployed to &lt;a href="http://vercel.com" rel="nofollow"&gt;Vercel&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Setup only takes a few minutes (&lt;a href="https://raw.githubusercontent.com/transitive-bullshit/nextjs-notion-starter-kit/main/readme.md/./site.config.js"&gt;single config file&lt;/a&gt;) 💪
&lt;/li&gt;
&lt;li&gt;Robust support for Notion content via &lt;a href="https://github.com/NotionX/react-notion-x"&gt;react-notion-x&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Next.js / TS / React / Notion&lt;/li&gt;
&lt;li&gt;Excellent page speeds&lt;/li&gt;
&lt;li&gt;Sexy LQIP image previews&lt;/li&gt;
&lt;li&gt;Embedded GitHub comments&lt;/li&gt;
&lt;li&gt;Automatic open graph images&lt;/li&gt;
&lt;li&gt;Automatic pretty URLs&lt;/li&gt;
&lt;li&gt;Automatic table of contents&lt;/li&gt;
&lt;li&gt;Full support for dark mode&lt;/li&gt;
&lt;li&gt;Quick search via CMD+P just like in Notion&lt;/li&gt;
&lt;li&gt;Responsive for desktop / tablet / mobile&lt;/li&gt;
&lt;li&gt;Optimized for Next.js and Vercel&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Setup&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;All config is defined in &lt;a href="https://raw.githubusercontent.com/transitive-bullshit/nextjs-notion-starter-kit/main/readme.md/./site.config.js"&gt;site.config.js&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Fork / clone this repo&lt;/li&gt;
&lt;li&gt;Change a few values in…&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/transitive-bullshit/nextjs-notion-starter-kit"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#6-mantine"&gt;
  &lt;/a&gt;
  6. Mantine
&lt;/h3&gt;

&lt;p&gt;React components and hooks library with native dark theme support and focus on usability, accessibility and developer experience&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/mantinedev"&gt;
        mantinedev
      &lt;/a&gt; / &lt;a href="https://github.com/mantinedev/mantine"&gt;
        mantine
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      React components and hooks library with native dark theme support and focus on usability, accessibility and developer experience
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Mantine&lt;/h1&gt;
&lt;p&gt;Mantine is a MIT licensed open source react components and hooks library with focus on usability, accessibility and developer experience.&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/mantine-ph.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--68TpZqAj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/mantine-ph.png" alt="Banner"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mantine.dev/" rel="nofollow"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mantine.dev/pages/examples/" rel="nofollow"&gt;Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mantine.dev/core/getting-started/#components-by-category" rel="nofollow"&gt;Components by category&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mantine.dev/hooks/getting-started/#included-hooks" rel="nofollow"&gt;Hooks list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mantine.dev/others/notifications/" rel="nofollow"&gt;Notifications system&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mantine.dev/pages/contribute/" rel="nofollow"&gt;Contributing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mantinedev/mantine/discussions"&gt;Ask question or give feedback&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://trello.com/b/R0D766tA/mantine" rel="nofollow"&gt;Features, components and hooks backlog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/mantinedev/mantine/master/./CHANGELOG.md"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://buttondown.email/mantine" rel="nofollow"&gt;Sign up for monthly newsletter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/mantinedev" rel="nofollow"&gt;Follow Mantine on Twitter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Customization&lt;/strong&gt; – colors, fonts, shadows and many other parts are customizable to fit your design needs&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Dark theme&lt;/strong&gt; – mantine supports dark theme by default in all components&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Accessibility and usability&lt;/strong&gt; – all components follow accessibility best practices and feature full keyboard support&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;TypeScript&lt;/strong&gt; – all @mantine/ scoped packages are built with TypeScript and support it by default&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Ready for production&lt;/strong&gt; – mantine is well tested and works in all modern browsers&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Developer experience&lt;/strong&gt; – mantine comes with more than 50 components and 15 hooks to cover you in most cases&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;No annoying focus ring&lt;/strong&gt; – with…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/mantinedev/mantine"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#7-the-fuck"&gt;
  &lt;/a&gt;
  7. The Fuck
&lt;/h3&gt;

&lt;p&gt;Magnificent app which corrects your previous console command.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/nvbn"&gt;
        nvbn
      &lt;/a&gt; / &lt;a href="https://github.com/nvbn/thefuck"&gt;
        thefuck
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Magnificent app which corrects your previous console command.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
The Fuck &lt;a href="https://pypi.python.org/pypi/thefuck/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/a84778ff5c7480d4e75c5c79f189d8e674502cbb4eabd4f3928d53ccdca35e20/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7468656675636b2e7376673f6c6162656c3d76657273696f6e" alt="Version"&gt;&lt;/a&gt; &lt;a href="https://github.com/nvbn/thefuck/actions?query=workflow%3ATests"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XsQy4SDI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/nvbn/thefuck/workflows/Tests/badge.svg" alt="Build Status"&gt;&lt;/a&gt; &lt;a href="https://coveralls.io/github/nvbn/thefuck" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b1615186b933fb7b1b18af55a0c67784292067c1c5bb7feec8ba01edcc7ca592/68747470733a2f2f696d672e736869656c64732e696f2f636f766572616c6c732f6e76626e2f7468656675636b2e737667" alt="Coverage"&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/nvbn/thefuck/master/LICENSE.md"&gt;&lt;img src="https://camo.githubusercontent.com/2a64672c5f2eb40235c775b6c0d197e50d7d3ab4014a47f4cf8498dd945e306c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d3030374543372e737667" alt="MIT License"&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;The Fuck&lt;/em&gt; is a magnificent app, inspired by a &lt;a href="https://twitter.com/liamosaur/" rel="nofollow"&gt;@liamosaur&lt;/a&gt;
&lt;a href="https://twitter.com/liamosaur/status/506975850596536320" rel="nofollow"&gt;tweet&lt;/a&gt;
that corrects errors in previous console commands.&lt;/p&gt;
&lt;p&gt;Is &lt;em&gt;The Fuck&lt;/em&gt; too slow? &lt;a href="https://raw.githubusercontent.com/nvbn/thefuck/master/#experimental-instant-mode"&gt;Try the experimental instant mode!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/nvbn/thefuck/master/example.gif" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---xVAHNlN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/nvbn/thefuck/master/example.gif" alt="gif with examples"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;More examples:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;➜ apt-get install vim
E: Could not open lock file /var/lib/dpkg/lock - open (13: Permission denied)
E: Unable to lock the administration directory (/var/lib/dpkg/), are you root&lt;span class="pl-k"&gt;?&lt;/span&gt;
➜ fuck
sudo apt-get install vim [enter/↑/↓/ctrl+c]
[sudo] password &lt;span class="pl-k"&gt;for&lt;/span&gt; nvbn
Reading package lists... Done
...&lt;/pre&gt;

&lt;/div&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;➜ git push
fatal: The current branch master has no upstream branch.
To push the current branch and &lt;span class="pl-c1"&gt;set&lt;/span&gt; the remote as upstream, use

    git push --set-upstream origin master


➜ fuck
git push --set-upstream origin master [enter/↑/↓/ctrl+c]
Counting objects: 9, done.
...&lt;/pre&gt;

&lt;/div&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;➜ puthon
No &lt;span class="pl-c1"&gt;command&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;puthon&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; found, did you mean
 Command &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;python&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; from package &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;python-minimal&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; (main)
 Command &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;python&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; from package &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;python3&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; (main)&lt;/pre&gt;…
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/nvbn/thefuck"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#8-git-curate"&gt;
  &lt;/a&gt;
  8. git curate
&lt;/h3&gt;

&lt;p&gt;Peruse and delete git branches ergonomically&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/matt-harvey"&gt;
        matt-harvey
      &lt;/a&gt; / &lt;a href="https://github.com/matt-harvey/git_curate"&gt;
        git_curate
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      ✂️ Peruse and delete git branches ergonomically
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
git curate&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://rubygems.org/gems/git_curate" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/d18db81ac90e6cd7eaf1fc5ba976004dace82bc0a976d66d5bb694a99c3fe26d/68747470733a2f2f696d672e736869656c64732e696f2f67656d2f762f6769745f6375726174652e737667" alt="Gem Version"&gt;&lt;/a&gt;
&lt;a href="https://travis-ci.org/matt-harvey/git_curate" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/f99126fc9a4f76918a941d473f7686be8f7d12a1a8b4f10b0a36b9f61b15e4c5/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f6d6174742d6861727665792f6769745f6375726174652e737667" alt="Build Status"&gt;&lt;/a&gt;
&lt;a href="https://coveralls.io/github/matt-harvey/git_curate" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/9639740b22ac5f48a1d4b093d3152ed7b380ced790ee1a60cc6796bedafcad82/68747470733a2f2f696d672e736869656c64732e696f2f636f766572616c6c732f6d6174742d6861727665792f6769745f6375726174652e737667" alt="Coverage Status"&gt;&lt;/a&gt;
&lt;a href="https://awesome-ruby.com/#-git-tools" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/abb97269de2982c379cbc128bba93ba724d8822bfbe082737772bd4feb59cb54/68747470733a2f2f63646e2e7261776769742e636f6d2f73696e647265736f726875732f617765736f6d652f643733303566333864323966656437386661383536353265336136336531353464643865383832392f6d656469612f62616467652e737667" alt="Awesome"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/matt-harvey/git_curate/master/assets/demo.gif"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--19caQaUG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/matt-harvey/git_curate/master/assets/demo.gif" width="1000" alt="Demo"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Motivation&lt;/h2&gt;
&lt;p&gt;After a while, my local repo becomes cluttered with branches, and &lt;code&gt;git branch&lt;/code&gt; outputs an awkwardly
long list. I want to delete some of those branches to bring that list back under control; but I
can’t always remember which branches I want to keep from the branch names alone; and inspecting them
one at a time and &lt;em&gt;then&lt;/em&gt; running &lt;code&gt;git branch -D&lt;/code&gt; in a separate step, is painful.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git curate&lt;/code&gt; is intended to ease this pain. It steps you through the local branches of a repo one at
a time, outputting the following information about each:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Last commit date&lt;/li&gt;
&lt;li&gt;Last commit hash&lt;/li&gt;
&lt;li&gt;Last commit author&lt;/li&gt;
&lt;li&gt;Last commit subject&lt;/li&gt;
&lt;li&gt;Whether the branch has been merged into the current HEAD&lt;/li&gt;
&lt;li&gt;The status of the branch relative to the upstream branch it is tracking (if any)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can then select whether to delete or keep each branch as you go.&lt;/p&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/matt-harvey/git_curate"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#9-scribbletune"&gt;
  &lt;/a&gt;
  9. Scribbletune
&lt;/h3&gt;

&lt;p&gt;Create music with JavaScript. Use simple JavaScript Strings and Arrays to generate rhythms and musical patterns. Directly use the names of scales or chords in your code to get arrays which you can mash up using Array methods in ways you hadn't imagined before! &lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/scribbletune"&gt;
        scribbletune
      &lt;/a&gt; / &lt;a href="https://github.com/scribbletune/scribbletune"&gt;
        scribbletune
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Create music with JavaScript
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h2&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/363055201d7423a95a690cc33282d017c0522ab183429caa0fdaeeda978bd672/68747470733a2f2f7363726962626c6574756e652e636f6d2f696d616765732f7363726962626c6574756e652d6c6f676f2e706e67"&gt;&lt;img width="2%" src="https://camo.githubusercontent.com/363055201d7423a95a690cc33282d017c0522ab183429caa0fdaeeda978bd672/68747470733a2f2f7363726962626c6574756e652e636f6d2f696d616765732f7363726962626c6574756e652d6c6f676f2e706e67"&gt;&lt;/a&gt; SCRIBBLETUNE&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://travis-ci.com/scribbletune/scribbletune" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e5e29ed2d4b004bdd2e318f19a149d5d70c1d4e957a3c46be068113d509303dd/68747470733a2f2f7472617669732d63692e636f6d2f7363726962626c6574756e652f7363726962626c6574756e652e7376673f6272616e63683d6d6173746572" alt="Build Status"&gt;&lt;/a&gt;
&lt;a href="https://npm.runkit.com/scribbletune" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/07b48bfc5797518ae2acb40cf85f594b52c170cfe39e41c2073deff92454c543/68747470733a2f2f62616467652e72756e6b697463646e2e636f6d2f7363726962626c6574756e652e737667" alt="Try scribbletune on RunKit"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Use simple &lt;strong&gt;JavaScript&lt;/strong&gt; &lt;code&gt;Strings&lt;/code&gt; and &lt;code&gt;Arrays&lt;/code&gt; to generate rhythms and musical patterns. Directly use the names of scales or chords in your code to get arrays which you can mash up using Array methods in ways you hadn't imagined before! Create clips of musical ideas and &lt;strong&gt;export MIDI files&lt;/strong&gt; which you can import in &lt;em&gt;Ableton Live, Reason, Garage Band&lt;/em&gt; or any music creation software that accepts MIDI files.&lt;/p&gt;
&lt;h3&gt;
Install&lt;/h3&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;npm install scribbletune&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
Use it to create a MIDI clip by running a JS file from your terminal using node.js&lt;/h3&gt;
&lt;div class="highlight highlight-source-js js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-s1"&gt;scribble&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;require&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;'scribbletune'&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-s1"&gt;clip&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-s1"&gt;scribble&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;clip&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;{&lt;/span&gt;
    &lt;span class="pl-c1"&gt;notes&lt;/span&gt;: &lt;span class="pl-s1"&gt;scribble&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;scale&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;'C4 major'&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
    &lt;span class="pl-c1"&gt;pattern&lt;/span&gt;: &lt;span class="pl-s"&gt;'x'&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;repeat&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-c1"&gt;7&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt; &lt;span class="pl-c1"&gt;+&lt;/span&gt; &lt;span class="pl-s"&gt;'_'&lt;/span&gt;
&lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
&lt;span class="pl-s1"&gt;scribble&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;midi&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;clip&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt; &lt;span class="pl-s"&gt;'c-major.mid'&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;You can use Scribbletune even &lt;strong&gt;in the browser&lt;/strong&gt; with Tone.js!. There are…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/scribbletune/scribbletune"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#10-replay"&gt;
  &lt;/a&gt;
  10. Replay
&lt;/h3&gt;

&lt;p&gt;A React video player facilitating adaptive stream playback with custom UI and a React-friendly API.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/vimond"&gt;
        vimond
      &lt;/a&gt; / &lt;a href="https://github.com/vimond/replay"&gt;
        replay
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A React video player facilitating adaptive stream playback with custom UI and a React-friendly API.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/vimond/replay/master//src/replay-logo.svg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0YBBi7cX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/vimond/replay/master/src/replay-logo.svg" alt="Replay" width="30%"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Replay is a &lt;strong&gt;Re&lt;/strong&gt;act video &lt;strong&gt;play&lt;/strong&gt;er with these key characteristics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ready-to-use component.&lt;/li&gt;
&lt;li&gt;Custom and customisable player controls and UX.&lt;/li&gt;
&lt;li&gt;Enables adaptive streaming, thanks to &lt;a href="https://github.com/video-dev/hls.js"&gt;HLS.js&lt;/a&gt; and &lt;a href="https://github.com/google/shaka-player"&gt;Shaka Player&lt;/a&gt; integrations.&lt;/li&gt;
&lt;li&gt;One consistent and React-friendly API across all streaming technologies.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
Capabilities at a glance&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;MPEG-DASH, HLS, progressive MP4/WebM playback.&lt;/li&gt;
&lt;li&gt;In-stream and side-loaded subtitles. Selector controls for subtitles and audio tracks.&lt;/li&gt;
&lt;li&gt;Common player controls: play/pause, volume, mute, timeline, skip back button, fullscreen.&lt;/li&gt;
&lt;li&gt;Live/DVR playback with timeshifting controls.&lt;/li&gt;
&lt;li&gt;Advanced player controls: Picture-in-picture, AirPlay, bitrate (quality) selector.&lt;/li&gt;
&lt;li&gt;Keyboard shortcuts and tab navigation.&lt;/li&gt;
&lt;li&gt;Remembering the user's volume and language preferences.&lt;/li&gt;
&lt;li&gt;Responsive player sizing and UI adaptation.&lt;/li&gt;
&lt;li&gt;Touch- and mobile-friendly UX.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://vimond.github.io/replay/#/#features-list" rel="nofollow"&gt;Full feature list&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Getting started&lt;/h2&gt;
&lt;h3&gt;
Prerequisites&lt;/h3&gt;
&lt;p&gt;Minimum React version for Replay is 16.6. Additionally, one component, the &lt;a href="https://vimond.github.io/replay/#/advanced-playback/adaptive-streaming#enabling-playback-for-multiple-streaming-technologies-based-on-stream-technology-resolution" rel="nofollow"&gt;CompoundVideoStreamer&lt;/a&gt;, requires your script bundler to support dynamic &lt;code&gt;import()&lt;/code&gt; statements. This only applies if this component is actually inserted in your code.&lt;/p&gt;
&lt;h3&gt;
Inserting Replay into your&lt;/h3&gt;…&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/vimond/replay"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#stargazing"&gt;
  &lt;/a&gt;
  Stargazing 📈
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#top-risers-over-last-7-days"&gt;
  &lt;/a&gt;
  Top risers over last 7 days
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/supabase/supabase"&gt;Supabase&lt;/a&gt; +2,251 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/nextapps-de/winbox"&gt;WinBox&lt;/a&gt; +1,127 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/trekhleb/javascript-algorithms"&gt;JavaScript Algorithms&lt;/a&gt; +1,083 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/public-apis/public-apis"&gt;Public APIs&lt;/a&gt; +1,001 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/supabase/realtime"&gt;Supabase Realtime&lt;/a&gt; +830 stars&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#top-growth-over-last-7-days"&gt;
  &lt;/a&gt;
  Top growth(%) over last 7 days
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/nextapps-de/winbox"&gt;WinBox&lt;/a&gt; +79%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/github/github-elements"&gt;github-elements&lt;/a&gt; +40%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/supabase/realtime"&gt;Supabase Realtime&lt;/a&gt; +33%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/supabase/supabase"&gt;Supabase&lt;/a&gt; +23%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/withfig/autocomplete"&gt;Fig&lt;/a&gt; +21%&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#top-risers-over-last-30-days"&gt;
  &lt;/a&gt;
  Top risers over last 30 days
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/jwasham/coding-interview-university"&gt;Coding Interview University&lt;/a&gt; +5,530 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/public-apis/public-apis"&gt;Public APIs&lt;/a&gt; +4,836 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/kamranahmedse/developer-roadmap"&gt;Web Developer Roadmap&lt;/a&gt;  +4,619 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/EbookFoundation/free-programming-books"&gt;Free Programming Books&lt;/a&gt; +4,564 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/supabase/supabase"&gt;Supabase&lt;/a&gt; +4,495 stars&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#top-growth-over-last-30-days"&gt;
  &lt;/a&gt;
  Top growth(%) over last 30 days
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/wbkd/react-flow"&gt;React Flow&lt;/a&gt; +85%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/loreanvictor/callbag-jsx"&gt;callbag-jsx&lt;/a&gt; +72%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/arnelenero/simpler-state"&gt;SimpleR State&lt;/a&gt; +63%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/supabase/supabase"&gt;Supabase&lt;/a&gt; +61%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/tailwindlabs/headlessui"&gt;Headless UI&lt;/a&gt; +55%&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;Trending Projects is available as a weekly newsletter please sign up at &lt;a href="https://www.iainfreestone.com"&gt;www.iainfreestone.com&lt;/a&gt; to ensure you never miss an issue.&lt;/p&gt;

&lt;p&gt;If you enjoyed this article you can &lt;a href="https://twitter.com/iain_freestone"&gt;follow me&lt;/a&gt; on Twitter where I regularly post bite size tips relating to HTML, CSS and JavaScript.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Serverless Framework vs SAM vs AWS CDK</title>
      <author>Sebastian Bille</author>
      <pubDate>Fri, 07 May 2021 13:24:30 +0000</pubDate>
      <link>https://dev.to/tastefulelk/serverless-framework-vs-sam-vs-aws-cdk-1g9g</link>
      <guid>https://dev.to/tastefulelk/serverless-framework-vs-sam-vs-aws-cdk-1g9g</guid>
      <description>&lt;p&gt;When building serverless apps on AWS today there's a couple of different toolkits available that helps you develop, test and deploy your project. &lt;a href="https://github.com/serverless/serverless"&gt;Serverless Framework&lt;/a&gt; was the king for a long time but both &lt;a href="https://github.com/aws/serverless-application-model"&gt;AWS SAM&lt;/a&gt; and the &lt;a href="https://github.com/aws/aws-cdk"&gt;CDK&lt;/a&gt; have been increasing in popularity lately. But which one is the best to use in a new project and what's the difference between them anyway. After all, they're all just tools to produce Cloudformation templates anyway, right?&lt;/p&gt;

&lt;p&gt;To get an understanding of the strengths and disadvantages of each option, I decided to build an identical example application across all three and compare the approaches.&lt;/p&gt;

&lt;p&gt;By the end of this post, I hope you'll have a basic understanding of the Serverless Framework, AWS SAM, and the CDK and that you'll be able to make an educated choice on what'll suit your next project best based on your needs and preferences. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#our-example-application"&gt;
  &lt;/a&gt;
  Our Example Application
&lt;/h3&gt;

&lt;p&gt;To keep it interesting, the app we're using to showcase each framework certainly isn't your typical ToDo-app - it's a ToDont-app. A user can send a POST request to an API Gateway describing something they really shouldn't do, a Lambda function takes the ToDont-item and puts it on an SQS queue that acts as a buffer before finally another Lambda function consumes the buffer queue, pretends to do some heavy processing on the item and persists it in a DynamoDB table. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0WjcTDN1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pl2n55k14zj1brd2tshz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0WjcTDN1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pl2n55k14zj1brd2tshz.png" alt="Web App Reference Architecture (3)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The application architecture is simple enough to easily comprehend but "complex" enough to resemble an actual app. To keep the code compact and readable, best practices and common sense have sometimes had to be omitted. All configs are complete and fully functional however and if you want to play around with the examples and deploy the apps yourself, you can find the code and the full examples &lt;a href="https://github.com/TastefulElk/sls-vs-sam-vs-cdk"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Our POST Lambda function looks like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/post.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;SQS&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-sdk/client-sqs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sqs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SQS&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;event&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;sqs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendMessage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;QueueUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;QUEUE_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;MessageBody&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;200&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;the Process Lambda looks like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/process.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;DynamoDB&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-sdk/client-dynamodb&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;marshall&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@aws-sdk/util-dynamodb&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ddb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;DynamoDB&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;event&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tasks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Records&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;record&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;record&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;ddb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;putItem&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;TableName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TABLE_NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;marshall&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h3&gt;

&lt;p&gt;If you want to follow along and deploy the apps, please note the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Each of the comparisons below assumes that you've installed the following packages as dependencies in your project&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@aws-sdk/client-dynamodb&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@aws-sdk/util-dynamodb&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@aws-sdk/client-sqs&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;While Yarn is used as the package manager &amp;amp; script runner below you could of course use NPM instead with the corresponding commands.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;All of the examples assume that you've got an &lt;a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html"&gt;AWS credentials default profile&lt;/a&gt; configured&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#serverless-framework"&gt;
  &lt;/a&gt;
  Serverless Framework
&lt;/h2&gt;

&lt;p&gt;Serverless Framework ("Serverless" below) has been around for a long time now and has long been the preferred framework for a large part of the community. It's a simple tool that abstracts away and simplifies many of the nastier parts of CloudFormation and comes packed with features to simplify testing and deployment of your app. &lt;/p&gt;

&lt;p&gt;The preferred way to run the Serverless CLI is to install it as a (dev)dependency in your project by running &lt;code&gt;yarn add serverless -D&lt;/code&gt; and then all that's missing is a &lt;code&gt;serverless.yml&lt;/code&gt; file which is used to define your application and its infrastructure. You can find the full configuration reference &lt;a href="https://www.serverless.com/framework/docs/providers/aws/guide/serverless.yml/"&gt;here&lt;/a&gt; but in short, the serverless.yml consists of two parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Your Serverless Framework configuration is used to describe your application stack, AWS environment, and lambda functions&lt;/li&gt;
&lt;li&gt;Any additional infrastructure defined as CloudFormation resources, such as our DynamoDB table and SQS queue.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here's how the &lt;code&gt;serverless.yml&lt;/code&gt; for our application looks.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="s"&gt;// serverless.yml&lt;/span&gt;
&lt;span class="na"&gt;service&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;sls-todont&lt;/span&gt;

&lt;span class="na"&gt;provider&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;aws&lt;/span&gt;
  &lt;span class="na"&gt;region&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;eu-north-1&lt;/span&gt;
  &lt;span class="na"&gt;runtime&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nodejs14.x&lt;/span&gt;
  &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Inject environment variables&lt;/span&gt;
    &lt;span class="na"&gt;TABLE_NAME&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${self:custom.tableName}&lt;/span&gt;
    &lt;span class="na"&gt;QUEUE_URL&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;todontsQueue&lt;/span&gt;
  &lt;span class="na"&gt;iamRoleStatements&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Configure IAM role statements&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Effect&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Allow&lt;/span&gt;
      &lt;span class="na"&gt;Action&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;sqs:sendMessage&lt;/span&gt;
      &lt;span class="na"&gt;Resource&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${self:custom.queueArn}&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Effect&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Allow&lt;/span&gt;
      &lt;span class="na"&gt;Action&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;dynamodb:putItem&lt;/span&gt;
      &lt;span class="na"&gt;Resource&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${self:custom.tableArn}&lt;/span&gt;

&lt;span class="na"&gt;custom&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Custom variables that we can reference elsewhere&lt;/span&gt;
  &lt;span class="na"&gt;tableName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${self:service}-table&lt;/span&gt;
  &lt;span class="na"&gt;queueName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${self:service}-queue&lt;/span&gt;
  &lt;span class="na"&gt;tableArn&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Get ARN of table with CloudFormation helper&lt;/span&gt;
    &lt;span class="s"&gt;Fn::GetAtt: [todontsTable, Arn]&lt;/span&gt;
  &lt;span class="na"&gt;queueArn&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Get ARN of queue with CloudFormation helper&lt;/span&gt;
    &lt;span class="s"&gt;Fn::GetAtt: [todontsQueue, Arn]&lt;/span&gt;

&lt;span class="na"&gt;functions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Define our two Lambda functions&lt;/span&gt;
  &lt;span class="na"&gt;post&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;src/post.handler&lt;/span&gt;
    &lt;span class="na"&gt;events&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Invoke on post requests to /todonts&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;http&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;post&lt;/span&gt;
          &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;todonts&lt;/span&gt;
  &lt;span class="na"&gt;process&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;src/process.handler&lt;/span&gt;
    &lt;span class="na"&gt;events&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Consume SQS queue&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;sqs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;arn&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${self:custom.queueArn}&lt;/span&gt;

&lt;span class="c1"&gt;# CloudFormation below to define our infrastructure resources&lt;/span&gt;
&lt;span class="na"&gt;resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
  &lt;span class="na"&gt;Resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;todontsTable&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::DynamoDB::Table&lt;/span&gt;
      &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;TableName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${self:custom.tableName}&lt;/span&gt;
        &lt;span class="na"&gt;AttributeDefinitions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;AttributeName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;id&lt;/span&gt;
            &lt;span class="na"&gt;AttributeType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;S&lt;/span&gt;
        &lt;span class="na"&gt;KeySchema&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;AttributeName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;id&lt;/span&gt;
            &lt;span class="na"&gt;KeyType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;HASH&lt;/span&gt;
        &lt;span class="na"&gt;BillingMode&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;PAY_PER_REQUEST'&lt;/span&gt;
    &lt;span class="na"&gt;todontsQueue&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::SQS::Queue&lt;/span&gt;
      &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;QueueName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${self:custom.queueName}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now to deploy our application, all we need to do is run &lt;code&gt;yarn serverless deploy&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;The Serverless CLI includes some utility features that can be used to print or tail the logs of a deployed function by running &lt;code&gt;yarn serverless logs --function process [--tail]&lt;/code&gt; or even invoke the function with &lt;code&gt;yarn serverless invoke --function process&lt;/code&gt;. Most of the time during development, however, you're not going to be invoking the function. Instead, you'll let Serverless emulate and run the functions locally and you can do that by running &lt;code&gt;yarn serverless invoke local --function post&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;➕ &lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Large &amp;amp; helpful community&lt;/li&gt;
&lt;li&gt;The plugin ecosystem&lt;/li&gt;
&lt;li&gt;Simple configuration with neat variable support&lt;/li&gt;
&lt;li&gt;Great debugging and testing utilities&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;➖ &lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Most apps will need to resort to CloudFormation definitions for some parts of the infrastructure&lt;/li&gt;
&lt;li&gt;Hard to share configuration and components&lt;/li&gt;
&lt;li&gt;Only YAML configurations. It's technically supported to write the configuration in JS but the documentation for it is close to non-existent&lt;/li&gt;
&lt;li&gt;I've seen a lot of devs struggle with understanding where the line between Serverless configuration and CloudFormation configuration actually or why they have to change the syntax in the middle of the file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Resources:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.serverless.com/framework/docs/getting-started/"&gt;Get started with Serverless Framework&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://serverless-stack.com/chapters/what-does-this-guide-cover.html"&gt;Serverless Stack tutorial for deplying a production Serverless app&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-sam"&gt;
  &lt;/a&gt;
  AWS SAM
&lt;/h2&gt;

&lt;p&gt;Much like Serverless Framework, &lt;a href="https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/what-is-sam.html"&gt;SAM&lt;/a&gt; (or the Serverless Application Model) is a combination of an abstraction layer to simplify CloudFormation and a CLI with utilities to test and deploy your app.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install-mac.html"&gt;Here's&lt;/a&gt; the official install instructions for the SAM CLI which is installed globally on your system. SAM uses a &lt;code&gt;samconfig.toml&lt;/code&gt; file to describe information &lt;em&gt;about&lt;/em&gt; your app, such as the name and where and how it should be deployed, and a &lt;code&gt;template.yml&lt;/code&gt; file to describe the actual resources your app will use. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;template.yml&lt;/code&gt; format follows the CloudFormation &lt;a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html"&gt;template anatomy&lt;/a&gt; templates but with &lt;a href="https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-specification-template-anatomy.html"&gt;a few added fields&lt;/a&gt;. Let's have a look:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="s"&gt;// template.yml&lt;/span&gt;
&lt;span class="c1"&gt;# Boilerplate to identify template as SAM template&lt;/span&gt;
&lt;span class="na"&gt;AWSTemplateFormatVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;2010-09-09&lt;/span&gt;
&lt;span class="na"&gt;Transform&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::Serverless-2016-10-31&lt;/span&gt;
&lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;sam-todonts&lt;/span&gt;

&lt;span class="na"&gt;Globals&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;Function&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Runtime&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nodejs14.x&lt;/span&gt;
    &lt;span class="na"&gt;Environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Inject environment variables&lt;/span&gt;
      &lt;span class="na"&gt;Variables&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;QUEUE_URL&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
          &lt;span class="na"&gt;Ref&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;TodontsQueue&lt;/span&gt;
        &lt;span class="na"&gt;TABLE_NAME&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;Ref&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;TodontsTable&lt;/span&gt;

&lt;span class="na"&gt;Parameters&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Parameters which can be filled by the CLI on deploy&lt;/span&gt;
  &lt;span class="na"&gt;TableName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
    &lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Name of DynamoDB table&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;String&lt;/span&gt;
    &lt;span class="na"&gt;Default&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;sam-todonts-table&lt;/span&gt;
  &lt;span class="na"&gt;QueueName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Name of SQS queue&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;String&lt;/span&gt;
    &lt;span class="na"&gt;Default&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;sam-todonts-queue&lt;/span&gt;

&lt;span class="na"&gt;Resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
  &lt;span class="na"&gt;PostFunction&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::Serverless::Function&lt;/span&gt;
    &lt;span class="na"&gt;FunctionName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;sam-todonts-post&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;Handler&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;src/post.handler&lt;/span&gt;
      &lt;span class="na"&gt;Events&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;Post&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#  Invoke on post requests to /todonts&lt;/span&gt;
          &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;HttpApi&lt;/span&gt;
          &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;Path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/todonts&lt;/span&gt;
            &lt;span class="na"&gt;Method&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;post&lt;/span&gt;
      &lt;span class="na"&gt;Policies&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;SQSSendMessagePolicy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Use predefined IAM policy&lt;/span&gt;
            &lt;span class="na"&gt;QueueName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="s"&gt;Fn::GetAtt: [TodontsQueue, QueueName]&lt;/span&gt;

  &lt;span class="na"&gt;ProcessFunction&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::Serverless::Function&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;Handler&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;src/process.handler&lt;/span&gt;
      &lt;span class="na"&gt;Events&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# Consume SQS queue&lt;/span&gt;
        &lt;span class="na"&gt;SQSQueueEvent&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;SQS&lt;/span&gt;
          &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;Queue&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="s"&gt;Fn::GetAtt: [TodontsQueue, Arn]&lt;/span&gt;
      &lt;span class="na"&gt;Policies&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Use predefined IAM policy&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;DynamoDBWritePolicy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;TableName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="na"&gt;Ref&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;TodontsTable&lt;/span&gt;

  &lt;span class="na"&gt;TodontsTable&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::DynamoDB::Table&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;TableName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;sam-todonts-table&lt;/span&gt;
      &lt;span class="na"&gt;AttributeDefinitions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;AttributeName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;id&lt;/span&gt;
          &lt;span class="na"&gt;AttributeType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;S&lt;/span&gt;
      &lt;span class="na"&gt;KeySchema&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;AttributeName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;id&lt;/span&gt;
          &lt;span class="na"&gt;KeyType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;HASH&lt;/span&gt;
      &lt;span class="na"&gt;BillingMode&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;PAY_PER_REQUEST&lt;/span&gt;

  &lt;span class="na"&gt;TodontsQueue&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::SQS::Queue&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;QueueName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;sam-todonts-queue&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The configuration is a bit verbose but luckily the CLI can help you with a place to start by running &lt;code&gt;sam init&lt;/code&gt; and answering a few questions about what your planning to build.&lt;/p&gt;

&lt;p&gt;We can generate the &lt;code&gt;samconfig.toml&lt;/code&gt;file and deploy at the same time by running   &lt;code&gt;sam deploy --guided&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Again, much like the Serverless Framework CLI, SAM comes loaded with utility features to test and debug your app. &lt;code&gt;sam local invoke [functionName]&lt;/code&gt;  can be used to run a Lambda function, or you can start a local HTTP server that hosts your function by running &lt;code&gt;sam local start-api&lt;/code&gt;.  You can also easily fetch the logs from a deployed function by running &lt;code&gt;sam logs --name [functionName]&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;The great thing about separating the definition of the app and how the app is built in two different files is that the &lt;code&gt;template.yml&lt;/code&gt; file can be written very generically so that it can be shared and re-used, you'll just have a different &lt;code&gt;samconfig.toml&lt;/code&gt; in each project. SAM also integrates very well with &lt;a href="https://docs.aws.amazon.com/codedeploy/latest/userguide/welcome.html"&gt;CodeBuild&lt;/a&gt; to enable blue-green deployments.&lt;/p&gt;

&lt;p&gt;➕ &lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Enables sharing &amp;amp; re-use of templates&lt;/li&gt;
&lt;li&gt;Well integrated with AWS build pipelines&lt;/li&gt;
&lt;li&gt;Great debugging and testing utilities&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;➖ &lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Verbose configuration&lt;/li&gt;
&lt;li&gt;CLI is missing some features you'd expect, such as tearing down a deployed app. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Resources:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-getting-started.html"&gt;Getting started with AWS SAM&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://serverlessrepo.aws.amazon.com/applications"&gt;Serverless Application Repository&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://serverlessland.com/patterns"&gt;Serverless Patterns Collection&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-cdk"&gt;
  &lt;/a&gt;
  AWS CDK
&lt;/h2&gt;

&lt;p&gt;The AWS &lt;a href="https://aws.amazon.com/cdk/"&gt;Cloud Development Kit (CDK)&lt;/a&gt; isn't purely a tool for creating serverless apps, rather it's a full-blown infrastructure-as-code framework that allows you to use code, not config, to define your application. &lt;/p&gt;

&lt;p&gt;You can install the CDK CLI by running &lt;code&gt;yarn global add aws-cdk&lt;/code&gt; and then generate a starter project by running &lt;code&gt;cdk init app --language --language typescript&lt;/code&gt;. There's a bunch of project configuration files and boilerplate that's generated when you run the init command but let's have a look at how the &lt;code&gt;lib/cdk-stack.ts&lt;/code&gt; file looks like after we've described our ToDont-app in it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// lib/cdk-stack.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-cdk/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;lambda&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-cdk/aws-lambda-nodejs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;sqs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-cdk/aws-sqs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;dynamodb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-cdk/aws-dynamodb&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ApiEventSource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;SqsEventSource&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-cdk/aws-lambda-event-sources&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Runtime&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-cdk/aws-lambda&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;CdkStack&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Stack&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Construct&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;StackProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// define our DynamoDB table&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dynamoTable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;dynamodb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cdk-todonts-table&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;tableName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cdk-todonts-table&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;partitionKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;dynamodb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;AttributeType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;STRING&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="c1"&gt;// define our SQS buffer queue&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sqsBuffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;sqs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Queue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cdk-todonts-queue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;queueName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cdk-todonts-queue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="c1"&gt;// define our processing lambda&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;processLambda&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NodejsFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cdk-todonts-process&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Runtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NODEJS_14_X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;handler&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;src/process.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;events&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SqsEventSource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sqsBuffer&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;
      &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;TABLE_NAME&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;dynamoTable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tableName&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="c1"&gt;// grant write access for the processing lambda to our dynamo table&lt;/span&gt;
    &lt;span class="nx"&gt;dynamoTable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;grantWriteData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;processLambda&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// define the lambda backing our API&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postLambda&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NodejsFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cdk-todonts-post&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Runtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NODEJS_14_X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;src/post.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;handler&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;events&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ApiEventSource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/todonts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;
      &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;QUEUE_URL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;sqsBuffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;queueUrl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="c1"&gt;// grant write access to the SQS buffer queue for our API lambda&lt;/span&gt;
    &lt;span class="nx"&gt;sqsBuffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;grantSendMessages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;postLambda&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The basic building blocks of a CDK application are called &lt;a href="https://docs.aws.amazon.com/cdk/latest/guide/constructs.html"&gt;constructs&lt;/a&gt; which represent a "cloud component", whether that's a single service instance such as an SQS Queue or a set of services encapsulated in a component. Constructs can then be shared and reused between projects and there's a fantastic community that has built a massive collection of high-quality components for you to use. Having the app and its infrastructure described fully in code also means that we can &lt;a href="https://docs.aws.amazon.com/cdk/latest/guide/testing.html"&gt;write actual tests&lt;/a&gt; against our setup - pretty darn cool, huh?&lt;/p&gt;

&lt;p&gt;Before we can deploy the app for the first app, we need to &lt;a href="https://docs.aws.amazon.com/cdk/latest/guide/bootstrapping.html"&gt;bootstrap the AWS environment&lt;/a&gt; (account &amp;amp; region combination) to provision some resources that the CDK uses to deploy the app. After that, we can run &lt;code&gt;cdk deploy&lt;/code&gt; to deploy our application.&lt;/p&gt;

&lt;p&gt;The CDK CLI doesn't bring the same utility around testing and debugging as SAM and Serverless does but it is possible to &lt;a href="https://docs.aws.amazon.com/cdk/latest/guide/sam.html"&gt;use the SAM CLI together with the CDK&lt;/a&gt; to help bridge the gap. There's also a newcomer on the block, &lt;a href="https://docs.serverless-stack.com/"&gt;Serverless-Stack&lt;/a&gt;, an extension of the CDK, that brings a lot of testing utility and serverless specific constructs.&lt;/p&gt;

&lt;p&gt;➕ &lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Enables sharing &amp;amp; re-use of components&lt;/li&gt;
&lt;li&gt;Large &amp;amp; helpful community&lt;/li&gt;
&lt;li&gt;Makes the infrastructure testable&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/aws/aws-cdk#aws-cloud-development-kit-aws-cdk"&gt;You can (likely) use the same programming language&lt;/a&gt; to define the infrastructure of your application as your actual application&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;➖ &lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Need to use another tool, such as SAM or the AWS CLI, if you want to invoke or print the logs of a deployed function.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Resources:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/cdk/latest/guide/getting_started.html"&gt;Getting started with the AWS CDK&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cdkpatterns.com/"&gt;CDK Patterns&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.cdkday.com/"&gt;CDK Day&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;There's a lot that's happening in this space at the moment and while I think these are the three most prominent players right now,  alternatives popping up left and right. Each framework has its own strengths and benefits and there's rarely a wrong or right when choosing which one will work best in your project.&lt;/p&gt;

&lt;p&gt;Please let me know in the comments which one is your favorite and why! &lt;/p&gt;

&lt;p&gt;If you enjoyed this post and want to see more, follow me on Twitter at &lt;a href="https://twitter.com/tastefulelk"&gt;@TastefulElk&lt;/a&gt; where I frequently write about serverless tech, AWS, and developer productivity!&lt;/p&gt;

</description>
      <category>serverless</category>
      <category>aws</category>
      <category>cdk</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
