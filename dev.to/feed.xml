<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to capture screenshots with Puppeteer.</title>
      <author>Sagar</author>
      <pubDate>Fri, 01 Jan 2021 10:28:24 +0000</pubDate>
      <link>https://dev.to/sagar/how-to-capture-screenshots-with-puppeteer-3mb2</link>
      <guid>https://dev.to/sagar/how-to-capture-screenshots-with-puppeteer-3mb2</guid>
      <description>&lt;p&gt;This is my first article in 2021. Recently, I got a task to capture screenshots of 300+ web pages and while doing this I learned Puppeteer APIs. In this article, I would like to share my experience with Puppeteer.&lt;/p&gt;

&lt;p&gt;Before, I start with writing code. Let me explain to you about Puppeteer in short.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-puppeteer" class="anchor"&gt;
  &lt;/a&gt;
  What is Puppeteer.
&lt;/h1&gt;

&lt;p&gt;Puppeteer is a Node library backed by &lt;a href="https://www.google.com/"&gt;Google&lt;/a&gt;. It provides a high-level API to control headless Chrome or Chromium by using DevTools protocols. This means with Puppeteer we can capture screenshots and PDFs of web pages, run our e2e test cases, and diagnose performance-related issues, etc.&lt;/p&gt;

&lt;p&gt;Let's write some code...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation" class="anchor"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;p&gt;To use puppeteer, you need to install the Node.js module through npm or yarn.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i puppeteer
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: When you install Puppeteer, it downloads a recent version of Chromium so it may take a long time based on you're network speed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#capture-github-profile-screenshot" class="anchor"&gt;
  &lt;/a&gt;
  Capture GitHub profile screenshot
&lt;/h2&gt;

&lt;p&gt;Here, is the bare minimum code for capturing a screenshot of my GitHub profile.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// require fs and puppeteer&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;puppeteer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;puppeteer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;captureScreenshot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// if screenshots directory is not exist then create one&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;existsSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;screenshots&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mkdirSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;screenshots&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;browser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// launch headless Chromium browser&lt;/span&gt;
    &lt;span class="nx"&gt;browser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;puppeteer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;launch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;headless&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="c1"&gt;// create new page object&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;newPage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// set viewport width and height&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setViewport&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1440&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1080&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;goto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://github.com/sagar-gavhane&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// capture screenshot and store it into screenshots directory.&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;screenshot&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`screenshots/github-profile.jpeg`&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`❌ Error: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;finally&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`\n🎉 GitHub profile screenshots captured.`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;captureScreenshot&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#capture-multiple-screenshots" class="anchor"&gt;
  &lt;/a&gt;
  Capture multiple screenshots
&lt;/h2&gt;

&lt;p&gt;What if you've to take screenshots of many web pages with a puppeteer. Below is a list of pages defined in the &lt;code&gt;pages.json&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"c1472465-ede8-4376-853c-39274242aa69"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://github.com/microsoft/vscode"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"VSCode"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"6b08743e-9454-4829-ab3a-91ad2ce9a6ac"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://github.com/vuejs/vue"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"vue"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"08923d12-caf2-4d5e-ba41-3019a9afbf9b"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://github.com/tailwindlabs/tailwindcss"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"tailwindcss"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"daeacf42-1ab9-4329-8f41-26e7951b69cc"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://github.com/getify/You-Dont-Know-JS"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"You Dont Know JS"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I just tweaked the above &lt;code&gt;captureScreenshot()&lt;/code&gt; function to iterate over pages array and on every iteration visit &lt;code&gt;page.url&lt;/code&gt; and capture screenshot. That's it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;puppeteer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;puppeteer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./pages.json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;captureMultipleScreenshots&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;existsSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;screenshots&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mkdirSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;screenshots&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;browser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// launch headless Chromium browser&lt;/span&gt;
    &lt;span class="nx"&gt;browser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;puppeteer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;launch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;headless&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="c1"&gt;// create new page object&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;newPage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// set viewport width and height&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setViewport&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1440&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1080&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;pages&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;goto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;screenshot&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`screenshots/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.jpeg`&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`✅ &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; - (&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;)`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`❌ Error: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;finally&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`\n🎉 &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;pages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; screenshots captured.`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;captureMultipleScreenshots&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Terminal output&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r2ZvzEPf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/uqsy2um1mcqz09omcmn0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r2ZvzEPf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/uqsy2um1mcqz09omcmn0.png" alt="terminal screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references" class="anchor"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://pptr.dev/"&gt;https://pptr.dev/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/puppeteer/puppeteer/blob/v5.5.0/docs/api.md"&gt;https://github.com/puppeteer/puppeteer/blob/v5.5.0/docs/api.md&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>webdev</category>
      <category>npm</category>
    </item>
    <item>
      <title>7.css - my first published package</title>
      <author>Khang</author>
      <pubDate>Fri, 01 Jan 2021 07:56:57 +0000</pubDate>
      <link>https://dev.to/khangnd/7-css-my-first-published-package-21fd</link>
      <guid>https://dev.to/khangnd/7-css-my-first-published-package-21fd</guid>
      <description>&lt;p&gt;🎉 Happy New Year 🎉 and welcome to another post of mine. This time, a hackathon submission and a showcase of my recent work of &lt;strong&gt;7.css&lt;/strong&gt; - a CSS design system for building components in Windows 7's flair.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-i-built" class="anchor"&gt;
  &lt;/a&gt;
  What I built
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#category-submission" class="anchor"&gt;
  &lt;/a&gt;
  Category Submission:
&lt;/h3&gt;

&lt;p&gt;Program for the People&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#app-link" class="anchor"&gt;
  &lt;/a&gt;
  App Link
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://win7-css-i5fco.ondigitalocean.app"&gt;https://win7-css-i5fco.ondigitalocean.app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://khang-nd.github.io/7.css"&gt;https://khang-nd.github.io/7.css&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#screenshots" class="anchor"&gt;
  &lt;/a&gt;
  Screenshots
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YhdnQqh---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/d7jv5q0dc6tohqjengkp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YhdnQqh---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/d7jv5q0dc6tohqjengkp.png" alt="1"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eXKIb1FC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gvc511w7u2xjvoxoindb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eXKIb1FC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gvc511w7u2xjvoxoindb.png" alt="2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#link-to-source-code" class="anchor"&gt;
  &lt;/a&gt;
  Link to Source Code
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/khang-nd/7.css"&gt;https://github.com/khang-nd/7.css&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#permissive-license" class="anchor"&gt;
  &lt;/a&gt;
  Permissive License
&lt;/h3&gt;

&lt;p&gt;MIT&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#background" class="anchor"&gt;
  &lt;/a&gt;
  Background
&lt;/h2&gt;

&lt;p&gt;I happened to come across these 2 awesome projects: &lt;a href="https://jdan.github.io/98.css"&gt;98.css&lt;/a&gt; and &lt;a href="https://botoxparty.github.io/XP.css"&gt;XP.css&lt;/a&gt;, and as a loyal fan of Windows, this inspired and triggered my enthusiasm to work on a similar project. And here we are.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-i-built-it" class="anchor"&gt;
  &lt;/a&gt;
  How I built it
&lt;/h3&gt;

&lt;p&gt;The backbone and system are technically there already in the former 2 projects, I just developed on top of them. However, I got to know some cool techs they used in the projects such as the &lt;a href="https://ejs.co/"&gt;EJS&lt;/a&gt;, which is used to generate examples with embedded  JS templating, or the &lt;a href="https://postcss.org/"&gt;PostCSS&lt;/a&gt;, which is used to transform CSS with some JS plugins. Also, this is my very first open-sourced package published for use.&lt;/p&gt;

&lt;p&gt;Enjoy :)&lt;/p&gt;

</description>
      <category>dohackathon</category>
      <category>css</category>
      <category>showdev</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Simple React Carousel</title>
      <author>Demaspira Aulia</author>
      <pubDate>Fri, 01 Jan 2021 06:19:00 +0000</pubDate>
      <link>https://dev.to/rakumairu/simple-react-carousel-24m0</link>
      <guid>https://dev.to/rakumairu/simple-react-carousel-24m0</guid>
      <description>&lt;p&gt;Carousel is commonly used in any websites that want to present key point of their products using images, but carousel can not only contain images, but can also contain cards with any content.&lt;/p&gt;

&lt;p&gt;To implement carousel people usually use packages like &lt;a href="https://github.com/leandrowd/react-responsive-carousel"&gt;react-responsive-carousel&lt;/a&gt;, &lt;a href="https://github.com/express-labs/pure-react-carousel"&gt;pure-react-carousel&lt;/a&gt;. &lt;strong&gt;BUT&lt;/strong&gt; what if you don't want to add more packages to your application?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#then-lets-make-a-simple-one" class="anchor"&gt;
  &lt;/a&gt;
  Then let's make a simple one!
&lt;/h3&gt;

&lt;p&gt;In this article I'll guide you through how to make a simple react carousel, of course you can adjust it to your needs. I'll also add a link to my finished projects on GitHub.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prequisites" class="anchor"&gt;
  &lt;/a&gt;
  Prequisites
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;If you already have a project ready, skip this step.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You need to have &lt;a href="https://nodejs.org/en/download"&gt;Node.js&lt;/a&gt; installed, if you already installed Node.js let's create a new React app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-react-app my-app
cd my-app
npm run start
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;After that you need to open the project folder with you IDE of choice, I'm using &lt;a href="https://code.visualstudio.com/download"&gt;VS Code&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-new-component" class="anchor"&gt;
  &lt;/a&gt;
  Create new component
&lt;/h2&gt;

&lt;p&gt;Create a new folder called &lt;strong&gt;Carousel&lt;/strong&gt; in your components folder (I usually put it in &lt;em&gt;src/components/Carousel&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Create a new file called &lt;strong&gt;Carousel.js&lt;/strong&gt; and open it.&lt;/p&gt;

&lt;p&gt;After that let's start with the basic component file first, copy this code to your file.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Carousel.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react'


const Carousel = () =&amp;gt; {
    return (
        &amp;lt;div&amp;gt;

        &amp;lt;/div&amp;gt;
    )
}

export default Carousel
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#add-this-component-to-your-page" class="anchor"&gt;
  &lt;/a&gt;
  Add this component to your page
&lt;/h3&gt;

&lt;p&gt;After we create the component, we need to import it on the page that we'll be using it, for demonstration purpose I'll put it on my App.js.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;App.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import Carousel from "./components/Carousel/Carousel"

const App = () =&amp;gt; {
    return (
        &amp;lt;div&amp;gt;
            &amp;lt;Carousel&amp;gt;

            &amp;lt;/Carousel&amp;gt;
        &amp;lt;/div&amp;gt;
    )
}

export default App
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now we can see the changes we made on the Carousel component.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-the-carousel" class="anchor"&gt;
  &lt;/a&gt;
  Creating the carousel
&lt;/h3&gt;

&lt;p&gt;Let's go back to &lt;em&gt;Carousel.js&lt;/em&gt; file and add more HTML and some styling to it.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Carousel.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react'
import './carousel.css' //will be added later

const Carousel = (props) =&amp;gt; {
    const {children} = props

    return (
        &amp;lt;div className="carousel-container"&amp;gt;
            &amp;lt;div className="carousel-wrapper"&amp;gt;
                &amp;lt;div className="carousel-content-wrapper"&amp;gt;
                    &amp;lt;div className="carousel-content"&amp;gt;
                        {children}
                    &amp;lt;/div&amp;gt;
                &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    )
}

export default Carousel
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We are adding a prop to the component called &lt;strong&gt;children&lt;/strong&gt; which is the content that will be displayed on the Carousel.&lt;br&gt;
The next step is to create a css file that will be used to style the Carousel component. Let's create a file called &lt;em&gt;carousel.css&lt;/em&gt; in the same directory as &lt;em&gt;Carousel.js&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;carousel.css&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.carousel-container {
    width: 100%;
    display: flex;
    flex-direction: column;
}

.carousel-wrapper {
    display: flex;
    width: 100%;
    position: relative;
}

.carousel-content-wrapper {
    overflow: hidden;
    width: 100%;
    height: 100%;
}

.carousel-content {
    display: flex;
    transition: all 250ms linear;
    -ms-overflow-style: none;  /* hide scrollbar in IE and Edge */
    scrollbar-width: none;  /* hide scrollbar in Firefox */
}

/* hide scrollbar in webkit browser */
.carousel-content::-webkit-scrollbar, .carousel-content::-webkit-scrollbar {
    display: none;
}

.carousel-content &amp;gt; * {
    width: 100%;
    flex-shrink: 0;
    flex-grow: 1;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next let's add the content to the Carousel. I'll be using placeholder image provided from &lt;a href="https://placeholder.com"&gt;placeholder.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;App.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
&amp;lt;Carousel&amp;gt;
    &amp;lt;img src="https://via.placeholder.com/1600x300" alt="placeholder" /&amp;gt;
    &amp;lt;img src="https://via.placeholder.com/1600x300" alt="placeholder" /&amp;gt;
    &amp;lt;img src="https://via.placeholder.com/1600x300" alt="placeholder" /&amp;gt;
&amp;lt;/Carousel&amp;gt;
...
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;For demonstration purposes I'm adding some styling to the parent div on &lt;em&gt;App.js&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;App.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
&amp;lt;div style={{ maxWidth: 1200, marginLeft: 'auto', marginRight: 'auto', marginTop: 64 }}&amp;gt;
    ....
&amp;lt;/div&amp;gt;
...
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The results should look like this. As you can see there is only 1 image visible and it's not scrollable.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FIQjULGi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/b0h34pxjasrmtuw0pc1x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FIQjULGi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/b0h34pxjasrmtuw0pc1x.png" alt="1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-control-layout" class="anchor"&gt;
  &lt;/a&gt;
  Adding control (Layout)
&lt;/h3&gt;

&lt;p&gt;The next step is to add control so the user can interact with it. We'll only add previous and next button for now. I'll talk more about other control on my next posts.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Carousel.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
&amp;lt;div className="carousel-wrapper"&amp;gt;
    {/* You can alwas change the content of the button to other things */}
    &amp;lt;button className="left-arrow"&amp;gt;
        &amp;amp;lt;
    &amp;lt;/button&amp;gt;
    &amp;lt;div className="carousel-content-wrapper"&amp;gt;
        ...
    &amp;lt;/div&amp;gt;
    {/* You can alwas change the content of the button to other things */}
    &amp;lt;button className="right-arrow"&amp;gt;
        &amp;amp;gt;
    &amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
...
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;em&gt;carousel.css&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
.left-arrow, .right-arrow {
    position: absolute;
    z-index: 1;
    top: 50%;
    transform: translateY(-50%);
    width: 48px;
    height: 48px;
    border-radius: 24px;
    background-color: white;
    border: 1px solid #ddd;
}

.left-arrow {
    left: 24px;
}

.right-arrow {
    right: 24px;
}
...
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We've finished the basic layout for the Carousel control. Next we need to add the javascript to handle when the button get clicked and when to hide the button.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-control-functionality" class="anchor"&gt;
  &lt;/a&gt;
  Adding control (Functionality)
&lt;/h3&gt;

&lt;p&gt;For the Carousel control to be usable, we need to defined a state for the current active index (&lt;em&gt;currentIndex&lt;/em&gt;) and the total item that passed to the Carousel (&lt;em&gt;length&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Carousel.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
const [currentIndex, setCurrentIndex] = useState(0)
const [length, setLength] = useState(children.length)

// Set the length to match current children from props
useEffect(() =&amp;gt; {
    setLength(children.length)
}, [children])
...
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;After that let's add a transform style to the carousel-content, this is the style property that will handle the scrolling for the Carousel. This property will be controlled by the currentIndex state.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Carousel.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
&amp;lt;div className="carousel-content-wrapper"&amp;gt;
    &amp;lt;div
        className="carousel-content"
        style={{ transform: `translateX(-${currentIndex * 100}%)` }}
    &amp;gt;
        {children}
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
...
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next we will add a function to handle when the control button is clicked.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Carousel.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
const next = () =&amp;gt; {
    if (currentIndex &amp;lt; (length - 1)) {
        setCurrentIndex(prevState =&amp;gt; prevState + 1)
    }
}

const prev = () =&amp;gt; {
    if (currentIndex &amp;gt; 0) {
        setCurrentIndex(prevState =&amp;gt; prevState - 1)
    }
}
...
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let's bind the function to onClick listener on both of the button.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Carousel.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
&amp;lt;button onClick={prev} className="left-arrow"&amp;gt;
    &amp;amp;lt;
&amp;lt;/button&amp;gt;
...
&amp;lt;button onClick={next} className="right-arrow"&amp;gt;
    &amp;amp;gt;
&amp;lt;/button&amp;gt;
...
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And... it works!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bzqELVYU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6ecsf60m0rw2illchcnr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bzqELVYU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6ecsf60m0rw2illchcnr.png" alt="2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hide-the-control-button" class="anchor"&gt;
  &lt;/a&gt;
  Hide the control button
&lt;/h3&gt;

&lt;p&gt;Okay, this is the final thing that need to be done, which is add a condition to hide the control button when not needed (e.g. previous button when it currently on the first slide, next button when it currently on the last slide)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Carousel.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
{
    currentIndex &amp;gt; 0 &amp;amp;&amp;amp;
    &amp;lt;button onClick={prev} className="left-arrow"&amp;gt;
        &amp;amp;lt;
    &amp;lt;/button&amp;gt;
}
...
{
    currentIndex &amp;lt; (length - 1) &amp;amp;&amp;amp;
    &amp;lt;button onClick={next} className="right-arrow"&amp;gt;
        &amp;amp;gt;
    &amp;lt;/button&amp;gt;
}
...
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#and-we-are-done" class="anchor"&gt;
  &lt;/a&gt;
  And we are done!
&lt;/h2&gt;

&lt;p&gt;We've finished creating a simple Carousel. You can check the final full code on &lt;a href="https://github.com/rakumairu/simple-react-carousel"&gt;my Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I hope this posts works for you!&lt;br&gt;
Thank you!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>css</category>
      <category>html</category>
    </item>
    <item>
      <title>How to Handle Password Reset in ExpressJS</title>
      <author>Kelvin Mwinuka</author>
      <pubDate>Fri, 01 Jan 2021 01:28:31 +0000</pubDate>
      <link>https://dev.to/kelvinvmwinuka/how-to-handle-password-reset-in-expressjs-ipb</link>
      <guid>https://dev.to/kelvinvmwinuka/how-to-handle-password-reset-in-expressjs-ipb</guid>
      <description>&lt;p&gt;No authentication system is complete without a password reset feature. I would personally never ship a product that did not have this feature included. It is necessary to provide a way for users to recover access to their accounts/data in case of a lost or forgotten password. In this article, I will be demonstrating how to handle password resets in ExpressJS.&lt;/p&gt;

&lt;p&gt;In the last 2 articles, I wrote about &lt;a href="https://kelvinmwinuka.com/how-to-set-up-mongoose-with-expressjs/" rel="noreferrer noopener"&gt;how to connect ExpressJS application to MongoDB database&lt;/a&gt; and &lt;a href="https://kelvinmwinuka.com/how-to-create-registration-authentication-with-express-passportjs/" rel="noreferrer noopener"&gt;building a user registration and authentication system&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Both of these articles tie into today's article. We're going to use mongoose and our saved user data to enable password resets.&lt;/p&gt;

&lt;p&gt;If you've read those articles, or already have your own authentication system, read on. Even if you're using a different tech stack, you may still gain some valuable ideas from this approach.&lt;/p&gt;

&lt;p&gt;As always, this project is hosted on &lt;a href="https://github.com/kelvinmwinuka/express-tutorial" rel="noreferrer noopener"&gt;Github&lt;/a&gt;. Feel free to clone the project to get access to the source code I use in this article.&lt;/p&gt;

&lt;h2&gt;The password reset flow&lt;/h2&gt;

&lt;p&gt;Before we dive into the code, let's first establish what the password reset flow will look like from the user's perspective and then design the implementation of this flow.&lt;/p&gt;

&lt;h3&gt;User's perspective&lt;/h3&gt;

&lt;p&gt;From the user's perspective, the process should go as follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Click on the 'Forgot password' link in the login page.&lt;/li&gt;
&lt;li&gt;Redirected to a page which requires an email address.&lt;/li&gt;
&lt;li&gt;Receive password reset link in an email.&lt;/li&gt;
&lt;li&gt;Link redirects to a page that requires a new password and password confirmation.&lt;/li&gt;
&lt;li&gt;After submission,  redirected to the login page with a success message.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Reset system characteristics&lt;/h3&gt;

&lt;p&gt;We also need to understand some characteristics of a good password reset system:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Unique password reset link should be generated for the user such that when the user visits the link, they are instantly identified. This means including a unique token in the link.&lt;/li&gt;
&lt;li&gt;Password reset link should have an expiry time (e.g. 2 hours) after which it is no longer valid and cannot be used to reset the password.&lt;/li&gt;
&lt;li&gt;The reset link should expire once the password has been reset to prevent the same link from being used to reset the password several times.&lt;/li&gt;
&lt;li&gt;If the user requests to change password multiple times without following through on the whole process, each generated link should invalidate the previous one. This prevents having multiple active links from which the password can be reset.&lt;/li&gt;
&lt;li&gt;If the user chooses to ignore the password reset link sent to their email, their current credentials should be left intact and valid for future authentication.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Implementation steps&lt;/h3&gt;

&lt;p&gt;We now have a clear picture of the reset flow from the user's perspective and the characteristics of a password reset system. Here are the steps we will take in the implementation of this system:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a mongoose model called 'PasswordReset' to manage active password reset requests/tokens. The records set here should expire after a specified time period.&lt;/li&gt;
&lt;li&gt;Include the 'Forgot password' link in the login form that leads to a route that contains an email form.&lt;/li&gt;
&lt;li&gt;Once the email is submitted to a post route, check whether a user with the provided email address exists.&lt;/li&gt;
&lt;li&gt;If the user does not exist, redirect back to the email input form and notify the user that no user with provided email was found.&lt;/li&gt;
&lt;li&gt;If the user exists, generate a password reset token and save it to PasswordReset collection in a document that references the user. If there already is a document in this collection associated with this user, update/replace the current document (there can only be one per user).&lt;/li&gt;
&lt;li&gt;Generate a link that includes the password reset token within it, email the link to the user.&lt;/li&gt;
&lt;li&gt;Redirect to the login page with success message prompting the user to check their email address for the reset link.&lt;/li&gt;
&lt;li&gt;Once the user clicks the link, it should lead to a GET route that expects the token as one of the route params.&lt;/li&gt;
&lt;li&gt;Within this route, extract the token and query the PasswordReset collection for this token. If the document is not found, alert the user that the link is invalid/expired.&lt;/li&gt;
&lt;li&gt;If the document is found, load a form to reset the password. The form should have 2 fields (new password &amp;amp; confirm password fields).&lt;/li&gt;
&lt;li&gt;When the form is submitted, its post route will update the user's password to the new password.&lt;/li&gt;
&lt;li&gt;Delete the password reset document associated with this user in the PasswordReset collection.&lt;/li&gt;
&lt;li&gt;Redirect the user to the login page with a success message.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Implementation&lt;/h2&gt;

&lt;h3&gt;The setup&lt;/h3&gt;

&lt;p&gt;Firstly, we'll have to set up the project. Install the &lt;a href="https://www.npmjs.com/package/uuid" rel="noreferrer noopener"&gt;uuid&lt;/a&gt; package for generating a unique token, and the &lt;a href="https://www.npmjs.com/package/nodemailer" rel="noreferrer noopener"&gt;nodemailer&lt;/a&gt; package for sending emails.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install uuid nodemailer&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Add the full domain to the environment variables.  We'll need this to generate a link to email to the user.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;DOMAIN=http://localhost:8000&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Make some changes to the app entry file in the following areas:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Set 'useCreateIndex' to 'true' in the mongoose connection options. This makes mongoose's default index build use createIndex instead of ensureIndex and prevents MongoDB deprecation warnings.&lt;/li&gt;
&lt;li&gt;Import a new route file that will contain all the reset routes called 'password-reset'. We will create these routes later.&lt;/li&gt;
&lt;/ol&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MONGO_URI&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;useNewUrlParser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;useUnifiedTopology&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;useCreateIndex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./routes/password-reset&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;Models&lt;/h3&gt;

&lt;p&gt;We need to have a dedicated model to handle the password reset records. In the models folder, create a model called 'PasswordReset' with the following code:&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Schema&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;model&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mongoose&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Schema&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Schema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Types&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ObjectId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;User&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Schema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Types&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;timestamps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;updatedAt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;expireAfterSeconds&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PasswordReset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;PasswordReset&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;PasswordReset&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We have two properties in this model, the user that's requested the password reset, and the unique token assigned to the particular request.&lt;/p&gt;

&lt;p&gt;Make sure to set the timestamps option to true in order to include 'createdAt' and 'updatedAt' fields in the document.&lt;/p&gt;

&lt;p&gt;After defining the schema, create an index on the updatedAt field with an expiry time of 300 seconds (5 minutes). I've set it this low for testing purposes. In production, you can increase this to something more practical like 2 hours. &lt;/p&gt;

&lt;p&gt;In the User model we created in &lt;a href="https://kelvinmwinuka.com/how-to-set-up-mongoose-with-expressjs/" rel="noreferrer noopener"&gt;this article&lt;/a&gt; (or the user model you currently have), update the pre save hook to the following:&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;userSchema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;save&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isNew&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isModified&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;bcrypt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;saltRounds&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Do this to make sure the password field is hashed whether the document is new or the password field has been changed in an existing document.&lt;/p&gt;

&lt;h3&gt;Routes&lt;/h3&gt;

&lt;p&gt;Create a new file in the route's folder called 'password-reset.js'. This is the file we import in the app entry file.&lt;/p&gt;

&lt;p&gt;In this file, import the User and PasswordReset models. Import the v4 function from the uuid package for token generation.&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;PasswordReset&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../models&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;v4&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;uuid&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cm"&gt;/* Create routes here */&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Create the first 2 routes. These routes are associated with the form which accepts the user's email address.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/reset&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;reset.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/reset&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/* Flash email address for pre-population in case we redirect back to reset page. */&lt;/span&gt;
  &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="cm"&gt;/* Check if user with provided email exists. */&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findOne&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;User not found&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/reset&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="cm"&gt;/* Create a password reset token and save in collection along with the user. 
     If there already is a record with current user, replace it. */&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;v4&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/-/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;PasswordReset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateOne&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; 
    &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_id&lt;/span&gt; 
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;upsert&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;updateResponse&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/* Send email to user containing password reset link. */&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resetLink&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DOMAIN&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/reset-confirm/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resetLink&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;success&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Check your email address for the password reset link!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/login&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Failed to generate reset link, please try again&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/reset&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The first is a GET route to '/reset'. In this route, render the 'reset.html' template. We will create this template later.&lt;/p&gt;

&lt;p&gt;The second route is a POST route for '/reset'. This route expects the user's email in the request body. In this route:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Flash email back for pre-population in case we redirect back to the email form.&lt;/li&gt;
&lt;li&gt;Check if the user with the email provided exists. If not, flash an error and redirect back to '/reset'.&lt;/li&gt;
&lt;li&gt;Create a token using v4.&lt;/li&gt;
&lt;li&gt;Update PasswordReset document associated with the current user. Set upsert to true in options to create a new document if there isn't one already.&lt;/li&gt;
&lt;li&gt;If update is successful, mail the link to the user, flash a success message and redirect to the login page.&lt;/li&gt;
&lt;li&gt;If update is unsuccessful, flash an error message and redirect back to the email page.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;At the moment, we're only logging the link to the console. We will implement the email logic later.&lt;/p&gt;

&lt;p&gt;Create the 2 routes that come into play when the user visits the link generated link above.&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/reset-confirm/:token&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;passwordReset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;PasswordReset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findOne&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;reset-confirm.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="na"&gt;token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;valid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;passwordReset&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/reset-confirm/:token&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;passwordReset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;PasswordReset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findOne&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="cm"&gt;/* Update user */&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findOne&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;passwordReset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;

  &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;save&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;savedUser&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/* Delete password reset document in collection */&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;PasswordReset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deleteOne&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;passwordReset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_id&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="cm"&gt;/* Redirect to login page with success message */&lt;/span&gt;
    &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;success&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Password reset successful&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/login&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/* Redirect back to reset-confirm page */&lt;/span&gt;
    &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Failed to reset password please try again&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`/reset-confirm/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The first route is a get route that expects the token in the url. The token is extracted and then validated. Validate the token by searching the PasswordReset collection for a document with the provided token.&lt;/p&gt;

&lt;p&gt;If the document is found, set the 'valid' template variable to true, otherwise, set it to false. Be sure to pass the token itself to the template. We will use this in the password reset form.&lt;/p&gt;

&lt;p&gt;Check the validity of the token by searching the PasswordReset collection by token.&lt;/p&gt;

&lt;p&gt;The second route is a POST route that accepts the password reset form submission. Extract the token from the url and then retrieve the password reset document associated with it.&lt;/p&gt;

&lt;p&gt;Update the user associated with this particular password reset document. Set the new password and save the updated user.&lt;/p&gt;

&lt;p&gt;Once the user is updated, delete the password reset document to prevent it from being reused to reset the password.&lt;/p&gt;

&lt;p&gt;Flash a success message and redirect the user to the login page where they can log in with their new password.&lt;/p&gt;

&lt;p&gt;If the update is unsuccessful, flash an error message and redirect back to the same form.&lt;/p&gt;

&lt;h3&gt;Templates&lt;/h3&gt;

&lt;p&gt;Once we've created the routes, we need to create the templates&lt;/p&gt;

&lt;p&gt;In the views folder, create a 'reset.html' template file with the following content:&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;{% extends 'base.html' %}

{% set title = 'Reset' %}

{% block styles %}
{% endblock %}

{% block content %}
  &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;'/reset'&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"POST"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    {% if messages.error %}
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"alert alert-danger"&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"alert"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;{{ messages.error }}&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    {% endif %}
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"mb-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-label"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Enter your email address&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; 
        &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; 
        &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-control {% if messages.error %}is-invalid{% endif %}"&lt;/span&gt; 
        &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; 
        &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt;
        &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"{{ messages.email or '' }}"&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-primary"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Send reset link&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
{% endblock %}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here we have one email field that is pre-populated with an email value if one was flashed in the previous request.&lt;/p&gt;

&lt;p&gt;Include an alert that displays an error message if one has been flashed from the previous request.&lt;/p&gt;

&lt;p&gt;Create another template in the same folder named 'reset-confirm.html' with the following content:&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;{% extends 'base.html' %}

{% set title = 'Confirm Reset' %}

{% block content %}
  {% if not valid %}
    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Oops, looks like this link is expired, try to &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/reset"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;generate another reset link&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  {% else %}
    &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;'/reset-confirm/{{ token }}'&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"POST"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      {% if messages.error %}
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"alert alert-danger"&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"alert"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;{{ messages.error }}&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      {% endif %}
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"mb-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-label"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Password&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; 
          &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; 
          &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-control {% if messages.password_error %}is-invalid{% endif %}"&lt;/span&gt; 
          &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; 
          &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"invalid-feedback"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;{{ messages.password_error }}&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"mb-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-label"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Confirm password&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; 
          &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; 
          &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-control {% if messages.confirm_error %}is-invalid{% endif %}"&lt;/span&gt; 
          &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"confirmPassword"&lt;/span&gt; 
          &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"confirmPassword"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"invalid-feedback"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;{{ messages.confirm_error }}&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-primary"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Confirm reset&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
  {% endif %}
{% endblock %}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In this form, check for the value of the 'valid' variable that we set in the GET route, if false, render the expired token message. Otherwise, render the password reset form.&lt;/p&gt;

&lt;p&gt;Include an alert that displays an error message if one was flashed in the previous request.&lt;/p&gt;

&lt;p&gt;Go to the login form that we created in the &lt;a href="https://kelvinmwinuka.com/how-to-create-registration-authentication-with-express-passportjs/" rel="noreferrer noopener"&gt;registration &amp;amp; authentication&lt;/a&gt; article and add the following code to the top of the form:&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;{% if messages.success %}
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"alert alert-success"&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"alert"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;{{ messages.success }}&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
{% endif %}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This renders the success messages that we flash when we create/send the reset link and when we update the user's password before redirecting to the login page.&lt;/p&gt;

&lt;h3&gt;Mail&lt;/h3&gt;

&lt;p&gt;In the previous routes section, we logged the reset link in the console. Ideally, we should send an email to the user when they've requested a password reset link.&lt;/p&gt;

&lt;p&gt;For this example, I've used &lt;a href="https://ethereal.email/" rel="noreferrer noopener"&gt;ethereal.email&lt;/a&gt; to generate a test email account for development purposes. Head over there and create one (it's a one-click process).&lt;/p&gt;

&lt;p&gt;Once you've created the test account, add the following variables to your environment variables:&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;EMAIL_HOST=smtp.ethereal.email
EMAIL_NAME=Leanne Zulauf
EMAIL_ADDRESS=leanne.zulauf@ethereal.email
EMAIL_PASSWORD=aDhwfMry1h3bbbR9Av
EMAIL_PORT=587
EMAIL_SECURITY=STARTTLS
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;These are my values at the time of writing, plug in your own values here.&lt;/p&gt;

&lt;p&gt;Create a 'helpers.js' file in the root of the project. This file will have a bunch of useful functions that are likely to be reused across the entire project.&lt;/p&gt;

&lt;p&gt;Define these functions here so that we can import them when they're needed rather than repeating similar logic all over our application.&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nodemailer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nodemailer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;sendEmail&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/* Create nodemailer transporter using environment variables. */&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;transporter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nodemailer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTransport&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;host&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;EMAIL_HOST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;EMAIL_PORT&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="na"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;EMAIL_ADDRESS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;pass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;EMAIL_PASSWORD&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="cm"&gt;/* Send the email */&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;transporter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendMail&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`"&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;EMAIL_NAME&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;" &amp;lt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;EMAIL_ADDRESS&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;text&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="cm"&gt;/* Preview only available when sending through an Ethereal account */&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Message preview URL: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;nodemailer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getTestMessageUrl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Export an object with various functions. The first being the 'sendEmail' function. &lt;/p&gt;

&lt;p&gt;This function takes the recipient's address, email subject and email text. Create the NodeMailer transporter, using the environment variables defined previously in the options. Send the email using the arguments passed to the function.&lt;/p&gt;

&lt;p&gt;The last line of the function logs the message url in the console so you can view the message on Ethereal mail. The test account does not actually send the email.&lt;/p&gt;

&lt;p&gt;Go back to the 'password-reset.js' routes and add the email functionality. First, import the function:&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;sendEmail&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../helpers&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the '/reset' POST route, instead of logging the reset link on the console, add the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;sendEmail&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
      &lt;span class="na"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Password Reset&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Hi &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, here's your password reset link: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;resetLink&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;. 
      If you did not request this link, ignore it.`&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Send an additional email to notify the user of a successful password change in the '/reset-confirm' POST route once the user is successfully updated:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;save&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;savedUser&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/* Delete password reset document in collection */&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;PasswordReset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deleteOne&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;passwordReset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_id&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="cm"&gt;/* Send successful password reset email */&lt;/span&gt;
    &lt;span class="nx"&gt;sendEmail&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
      &lt;span class="na"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Password Reset Successful&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Congratulations &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;! Your password reset was successful.`&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="cm"&gt;/* Redirect to login page with success message */&lt;/span&gt;
    &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;success&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Password reset successful&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/login&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/* Redirect back to reset-confirm page */&lt;/span&gt;
    &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Failed to reset password please try again&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`/reset-confirm/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this article, I demonstrated how to implement a password reset feature in ExpressJS using NodeMailer.&lt;/p&gt;

&lt;p&gt;In the next article, I will write about &lt;a href="https://kelvinmwinuka.com/how-to-verify-users-in-expressjs/" rel="noreferrer noopener"&gt;implementing a user email verification system&lt;/a&gt; in your Express application. I will use a similar approach to the one used in this article, with NodeMailer being the email package of choice.&lt;/p&gt;

&lt;p&gt;The post &lt;a href="https://kelvinmwinuka.com/how-to-handle-password-reset-in-expressjs/"&gt;How to Handle Password Reset in ExpressJS&lt;/a&gt; appeared first on &lt;a href="https://kelvinmwinuka.com"&gt;Kelvin Mwinuka&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you enjoyed this article, consider following my &lt;a href="https://kelvinmwinuka.com"&gt;website&lt;/a&gt; for early access to my content before it gets published here (don’t worry, it’s still free with no annoying pop-up ads!). Also, feel free to comment on this post. I’d love to hear your thoughts!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>expressjs</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to Host a Static Website on AWS with HTTPS and CI/CD</title>
      <author>Anna Aitchison</author>
      <pubDate>Thu, 31 Dec 2020 21:46:50 +0000</pubDate>
      <link>https://dev.to/ara225/how-to-host-a-static-website-on-aws-with-https-and-ci-cd-33of</link>
      <guid>https://dev.to/ara225/how-to-host-a-static-website-on-aws-with-https-and-ci-cd-33of</guid>
      <description>&lt;h1&gt;
  &lt;a href="#overview" class="anchor"&gt;
  &lt;/a&gt;
  Overview
&lt;/h1&gt;

&lt;p&gt;S3 is the obvious place to host a static (frontend code only) website on AWS. It's a simple, serverless way to store and serve files without running a server or fiddling with a storage server, scales effortlessly, and is very inexpensive, with a free tier and pay per request modal. &lt;/p&gt;

&lt;p&gt;In theory, all you have to do is dump some files in a S3 bucket, set permissions on the bucket to allow public access and static site hosting, and forward your domain to it with a CNAME DNS value. In practice however, this approach has two issues: S3 buckets by themselves don't support HTTPS, and you need to upload files manually to S3. This article goes over a slightly more advanced setup with CloudFront for caching and HTTPS, and GitHub Actions for CI/CD. &lt;/p&gt;

&lt;p&gt;There are much easier free or virtually free options for hosting static sites such as GitHub pages, but if you want control over your infrastructure, a production website, or a bit of AWS experience to show off, this is a great way to go. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#assumptions" class="anchor"&gt;
  &lt;/a&gt;
  Assumptions
&lt;/h1&gt;

&lt;p&gt;This article assumes that you're already setup on AWS, have a domain or subdomain you want to use, and have code in GitHub. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#s3-bucket" class="anchor"&gt;
  &lt;/a&gt;
  S3 Bucket
&lt;/h2&gt;

&lt;p&gt;The files will be stored in a S3 bucket. The name doesn't really matter, but you need to enable static website hosting on the bucket and allow public read access to it. &lt;/p&gt;

&lt;p&gt;First, go to the Properties tab on the S3 bucket's page, and enable static web hosting. Take note of the bucket's website URL. Go to the Permissions tab and click edit under "Block public access (bucket settings)". Untick all the checkboxes and save the changes. Add the following policy to the bucket policy.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2012-10-17"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Policy1589309574299"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Statement"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Sid"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Stmt1589309569196"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Effect"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Allow"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Principal"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Action"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"s3:GetObject"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Resource"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"REPLACE_WITH_BUCKET_ARN/*"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#https-certificate" class="anchor"&gt;
  &lt;/a&gt;
  HTTPS Certificate
&lt;/h2&gt;

&lt;p&gt;Create a HTTPS certificate for your domain or subdomain in the AWS Certificate Manager. You must use the North Virginia AWS region for this certificate to be seen by CloudFront, no matter what region you set your CloudFront distribution up in. If you don't have your domain in AWS Route 53, you'll need to verify that you own the domain/subdomain by setting some DNS records on it. As long as the certifcate is public, which it has to be for this purpose, it's free to create, store and use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cloudfront" class="anchor"&gt;
  &lt;/a&gt;
  CloudFront
&lt;/h2&gt;

&lt;p&gt;You also need to create a CloudFront web distribution. Most of the settings don't really matter for this to work, here are the ones that do:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Origin Domain Name - CloudFront provides a handy dropdown list, but this fills the field in with the S3 bucket's API URL, which works but doesn't provide automatic redirects from a folder to index.html and lacks a couple of other convenience features. You'll almost always want to use the bucket's static website URL instead (you'll find it under the bucket's Properties tab)&lt;/li&gt;
&lt;li&gt;Origin Path - Leave blank if you want to use all files in the bucket. Asterisks don't work - they're taken literally.&lt;/li&gt;
&lt;li&gt;Alternate Domain Names (CNAMEs) - List the domain names that the distribution will be accessed by&lt;/li&gt;
&lt;li&gt;SSL Certificate - Choose a custom SSL certificate. This choice only becomes active after CloudFront detects a SSL cert in CM in the correct region. Takes some time after it's done to actually register it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#dns" class="anchor"&gt;
  &lt;/a&gt;
  DNS
&lt;/h2&gt;

&lt;p&gt;Forward your domain/subdomain to the CloudFront distribution's URL (*.cloudfront.net) with a CNAME DNS entry. If you're not using Route 53, you won't be able to forward the root domain to CloudFront out of the box, but there are a few free services that'll do it for you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#github-actions" class="anchor"&gt;
  &lt;/a&gt;
  Github Actions
&lt;/h2&gt;

&lt;p&gt;GitHub Actions are a simple yet effective CI/CD solution integrated right into GitHub. You can find out more &lt;a href="https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions"&gt;here&lt;/a&gt;. It's free for public repos and has a decent free trial for others. Most of the work for this action is already done - there's a couple of excellent pre baked actions. I find that &lt;a href="https://github.com/reggionick/s3-deploy"&gt;reggionick/s3-deploy&lt;/a&gt; works the best for this scenario - it removes old files from the S3 bucket, adds new ones and invalidates the CloudFront cache all in one go. You simply need to use the example action in that repo's readme, add, change or remove the build steps, create the needed repository secrets and add the workflow to your repo. You might want to change the trigger to be triggered only on push to the master branch and change the folder (location where the deployable assets are/end up relative to repo root).&lt;/p&gt;

&lt;p&gt;The secrets you need are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY - AWS credentials. Hopefully for a programmatic access only IAM user with only the access needed to list, add and remove objects from the specific S3 bucket and to invalidate the cache on the CloudFront distribution.&lt;/li&gt;
&lt;li&gt;S3_BUCKET - Name of S3 bucket&lt;/li&gt;
&lt;li&gt;S3_BUCKET_REGION - Region S3 bucket was created in&lt;/li&gt;
&lt;li&gt;CLOUDFRONT_DISTRIBUTION_ID - ID of CloudFront distribution&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you add the secrets first and already have code in your repo, when you commit your workflow into the repo, it should run successfully and you'll hopefully have a working website. &lt;/p&gt;

</description>
      <category>aws</category>
      <category>javascript</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>50+ Free Awesome Certificates to Earn in 2021</title>
      <author>Waleed Sadek</author>
      <pubDate>Thu, 31 Dec 2020 14:41:18 +0000</pubDate>
      <link>https://dev.to/panx/50-free-awesome-certificates-to-earn-in-2021-2l7g</link>
      <guid>https://dev.to/panx/50-free-awesome-certificates-to-earn-in-2021-2l7g</guid>
      <description>&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;&lt;br&gt;
A curated list of free Computer Science &amp;amp; Information Technology certificates and badges.&lt;/p&gt;

&lt;p&gt;Note:&lt;br&gt;
🏅= Digital Badges &amp;amp; 🏆 = Certificate of Completion &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why" class="anchor"&gt;
  &lt;/a&gt;
  Why?
&lt;/h2&gt;

&lt;p&gt;Most online certificates are paid and most employers want to see a project or a certificate that's why I've decided to make this list.&lt;br&gt;
If you enjoy free things, then you'll appreciate this!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contents" class="anchor"&gt;
  &lt;/a&gt;
  Contents:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#security"&gt;Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#front-end"&gt;Front-End&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#back-end"&gt;Back-End&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#blockchain"&gt;Blockchain&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#data-analysis-and-visualization"&gt;Data Analysis &amp;amp; Visualization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#statistics"&gt;Statistics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#data-science"&gt;Data Science&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#big-data"&gt;Big Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#machine-and-deep-learning"&gt;Machine &amp;amp; Deep Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#networking"&gt;Networking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#operating-systems"&gt;Operating Systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#robotics-and-iot"&gt;Robotics &amp;amp; IoT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chatbots"&gt;Chatbots&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#devops"&gt;DevOps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#programming-langauges"&gt;Programming Languages&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#c"&gt;C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#javascript"&gt;JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#r"&gt;R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#python"&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#theories-and-concepts"&gt;Theories &amp;amp; Concepts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#security" class="anchor"&gt;
  &lt;/a&gt;
  Security
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Course Name&lt;/th&gt;
&lt;th&gt;Course Provider&lt;/th&gt;
&lt;th&gt;Level&lt;/th&gt;
&lt;th&gt;Hours&lt;/th&gt;
&lt;th&gt;Reward&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.netacad.com/courses/cybersecurity/introduction-cybersecurity"&gt;Intro to Cybersecurity&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Cisco Networking Academy&lt;/td&gt;
&lt;td&gt;Beginner&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.youracclaim.com/org/cisco/badge/introduction-to-cybersecurity"&gt;🏅&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.netacad.com/courses/cybersecurity/cybersecurity-essentials"&gt;Cybersecurity Essentials&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Cisco Networking Academy&lt;/td&gt;
&lt;td&gt;Intermediate&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.youracclaim.com/org/cisco/badge/cybersecurity-essentials"&gt;🏅&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.netacad.com/courses/packet-tracer"&gt;Intro to Packet Tracer&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Cisco Networking Academy&lt;/td&gt;
&lt;td&gt;Beginner&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.youracclaim.com/org/cisco/badge/introduction-to-packet-tracer"&gt;🏅&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://skills.yourlearning.ibm.com/activity/ILB-DNRPWDGQGMMY7GGD"&gt;Cybersecurity Fundamentals&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;IBM / SkillsBuild&lt;/td&gt;
&lt;td&gt;Beginner&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.youracclaim.com/org/ibm/badge/cybersecurity-fundamentals"&gt;🏅&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.freecodecamp.org/learn/"&gt;Information Security Certification&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;FreeCodeCamp&lt;/td&gt;
&lt;td&gt;Professional&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;🏆&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#frontend" class="anchor"&gt;
  &lt;/a&gt;
  Front-End
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Course Name&lt;/th&gt;
&lt;th&gt;Course Provider&lt;/th&gt;
&lt;th&gt;Level&lt;/th&gt;
&lt;th&gt;Hours&lt;/th&gt;
&lt;th&gt;Reward&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.freecodecamp.org/learn/"&gt;Responsive Web Design Certification&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;FreeCodeCamp&lt;/td&gt;
&lt;td&gt;Professional&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;🏆&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.freecodecamp.org/learn/"&gt;Front-End Libraries Certification&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;FreeCodeCamp&lt;/td&gt;
&lt;td&gt;Professional&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;🏆&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#backend" class="anchor"&gt;
  &lt;/a&gt;
  Back-End
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Course Name&lt;/th&gt;
&lt;th&gt;Course Provider&lt;/th&gt;
&lt;th&gt;Level&lt;/th&gt;
&lt;th&gt;Hours&lt;/th&gt;
&lt;th&gt;Reward&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.freecodecamp.org/learn/"&gt;APIs and Microservices Certification&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;FreeCodeCamp&lt;/td&gt;
&lt;td&gt;Professional&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;🏆&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://learn.saylor.org/course/view.php?id=84"&gt;CS403: Introduction to Modern Database Systems&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Saylor Academy&lt;/td&gt;
&lt;td&gt;Professional&lt;/td&gt;
&lt;td&gt;42&lt;/td&gt;
&lt;td&gt;🏆&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#blockchain" class="anchor"&gt;
  &lt;/a&gt;
  Blockchain
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Course Name&lt;/th&gt;
&lt;th&gt;Course Provider&lt;/th&gt;
&lt;th&gt;Level&lt;/th&gt;
&lt;th&gt;Hours&lt;/th&gt;
&lt;th&gt;Reward&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://cognitiveclass.ai/courses/ibm-blockchain-foundation-dev"&gt;IBM Blockchain Foundation Developer&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;IBM / Cognitive Class&lt;/td&gt;
&lt;td&gt;Beginner&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.youracclaim.com/org/ibm/badge/ibm-blockchain-foundation-developer-v2.1"&gt;🏅&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://cognitiveclass.ai/courses/blockchain-course"&gt;Blockchain Essentials&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;IBM / Cognitive Class&lt;/td&gt;
&lt;td&gt;Beginner&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.youracclaim.com/org/ibm/badge/ibm-blockchain-essentials-v2"&gt;🏅&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#data-analysis-and-visualization" class="anchor"&gt;
  &lt;/a&gt;
  Data Analysis and Visualization
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Course Name&lt;/th&gt;
&lt;th&gt;Course Provider&lt;/th&gt;
&lt;th&gt;Level&lt;/th&gt;
&lt;th&gt;Hours&lt;/th&gt;
&lt;th&gt;Reward&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://cognitiveclass.ai/courses/data-analysis-python"&gt;Data Analysis with Python&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;IBM / Cognitive Class&lt;/td&gt;
&lt;td&gt;Intermediate&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.youracclaim.com/org/ibm/badge/data-analysis-using-python"&gt;🏅&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.freecodecamp.org/learn/"&gt;Data Analysis with Python Certification&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;FreeCodeCamp&lt;/td&gt;
&lt;td&gt;Professional&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;🏆&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://cognitiveclass.ai/courses/data-visualization-with-python"&gt;Data Visualization with Python&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;IBM / Cognitive Class&lt;/td&gt;
&lt;td&gt;Intermediate&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.youracclaim.com/org/ibm/badge/data-visualization-using-python"&gt;🏅&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://cognitiveclass.ai/courses/data-visualization-with-r/"&gt;Data Visualization with R&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;IBM / Cognitive Class&lt;/td&gt;
&lt;td&gt;Beginner&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.youracclaim.com/org/ibm/badge/data-visualization-with-r"&gt;🏅&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.freecodecamp.org/learn/"&gt;Data Visualization Certification&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;FreeCodeCamp&lt;/td&gt;
&lt;td&gt;Professional&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;🏆&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#statistics" class="anchor"&gt;
  &lt;/a&gt;
  Statistics
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Course Name&lt;/th&gt;
&lt;th&gt;Course Provider&lt;/th&gt;
&lt;th&gt;Level&lt;/th&gt;
&lt;th&gt;Hours&lt;/th&gt;
&lt;th&gt;Reward&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://cognitiveclass.ai/courses/statistics-101"&gt;Statistics 101&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;IBM / Cognitive Class&lt;/td&gt;
&lt;td&gt;Beginner&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.youracclaim.com/org/ibm/badge/statistics-101"&gt;🏅&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#data-science" class="anchor"&gt;
  &lt;/a&gt;
  Data Science
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Course Name&lt;/th&gt;
&lt;th&gt;Course Provider&lt;/th&gt;
&lt;th&gt;Level&lt;/th&gt;
&lt;th&gt;Hours&lt;/th&gt;
&lt;th&gt;Reward&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://cognitiveclass.ai/courses/data-science-methodology-2"&gt;Data Science Methodologies&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;IBM / Cognitive Class&lt;/td&gt;
&lt;td&gt;Beginner&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.youracclaim.com/org/ibm/badge/data-science-methodologies"&gt;🏅&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://cognitiveclass.ai/courses/data-science-101/"&gt;Data Science 101&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;IBM / Cognitive Class&lt;/td&gt;
&lt;td&gt;Beginner&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.youracclaim.com/org/ibm/badge/data-science-foundations-level-1"&gt;🏅&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://cognitiveclass.ai/courses/data-science-hands-open-source-tools-2"&gt;Data Science Tools&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;IBM / Cognitive Class&lt;/td&gt;
&lt;td&gt;Beginner&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.youracclaim.com/org/ibm/badge/data-science-tools"&gt;🏅&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://cognitiveclass.ai/courses/python-for-data-science"&gt;Python for Data Science&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;IBM / Cognitive Class&lt;/td&gt;
&lt;td&gt;Beginner&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.youracclaim.com/org/ibm/badge/python-for-data-science"&gt;🏅&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#big-data" class="anchor"&gt;
  &lt;/a&gt;
  Big Data
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Course Name&lt;/th&gt;
&lt;th&gt;Course Provider&lt;/th&gt;
&lt;th&gt;Level&lt;/th&gt;
&lt;th&gt;Hours&lt;/th&gt;
&lt;th&gt;Reward&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://cognitiveclass.ai/courses/what-is-big-data"&gt;Big Data Foundations - Level 1&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;IBM / Cognitive Class&lt;/td&gt;
&lt;td&gt;Beginner&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.youracclaim.com/org/ibm/badge/big-data-foundations-level-1"&gt;🏅&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://cognitiveclass.ai/courses/course-v1:BigDataUniversity+BD0111EN+2016"&gt;Hadoop Foundations - Level 1&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;IBM  / Cognitive Class&lt;/td&gt;
&lt;td&gt;Beginner&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.youracclaim.com/org/ibm/badge/hadoop-foundations-level-1"&gt;🏅&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://cognitiveclass.ai/courses/what-is-spark"&gt;Spark Fundamentals I&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;IBM / Cognitive Class&lt;/td&gt;
&lt;td&gt;Beginner&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.youracclaim.com/org/ibm/badge/spark-level-1"&gt;🏅&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#machine-and-deep-learning" class="anchor"&gt;
  &lt;/a&gt;
  Machine and Deep Learning
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Course Name&lt;/th&gt;
&lt;th&gt;Course Provider&lt;/th&gt;
&lt;th&gt;Level&lt;/th&gt;
&lt;th&gt;Hours&lt;/th&gt;
&lt;th&gt;Reward&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://cognitiveclass.ai/courses/introduction-deep-learning"&gt;Deep Learning Fundamentals&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;IBM / Cognitive Class&lt;/td&gt;
&lt;td&gt;Intermediate&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.youracclaim.com/org/ibm/badge/deep-learning-essentials"&gt;🏅&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://cognitiveclass.ai/courses/deep-learning-tensorflow"&gt;Deep Learning with TensorFlow&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;IBM / Cognitive Class&lt;/td&gt;
&lt;td&gt;Beginner&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.youracclaim.com/org/ibm/badge/deep-learning-using-tensorflow"&gt;🏅&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://cognitiveclass.ai/courses/machine-learning-sound/"&gt;Introduction to Machine Learning with Sound&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;IBM / Cognitive Class&lt;/td&gt;
&lt;td&gt;Beginner&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.youracclaim.com/org/ibm/badge/introduction-to-machine-learning-with-sound"&gt;🏅&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://cognitiveclass.ai/courses/machine-learning-with-python/"&gt;Machine Learning with Python&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;IBM / Cognitive Class&lt;/td&gt;
&lt;td&gt;Beginner&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.youracclaim.com/org/ibm/badge/machine-learning-with-python-level-1"&gt;🏅&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.freecodecamp.org/learn/"&gt;Machine Learning with Python Certification&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;FreeCodeCamp&lt;/td&gt;
&lt;td&gt;Professional&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;🏆&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.elementsofai.com/"&gt;Elements of AI&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;University of Helsinki&lt;/td&gt;
&lt;td&gt;Beginner&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;🏆&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#networking" class="anchor"&gt;
  &lt;/a&gt;
  Networking
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Course Name&lt;/th&gt;
&lt;th&gt;Course Provider&lt;/th&gt;
&lt;th&gt;Level&lt;/th&gt;
&lt;th&gt;Hours&lt;/th&gt;
&lt;th&gt;Reward&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.netacad.com/courses/networking/networking-essentials"&gt;Networking Essentials&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Cisco Networking Academy&lt;/td&gt;
&lt;td&gt;Intermediate&lt;/td&gt;
&lt;td&gt;70&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.youracclaim.com/org/cisco/badge/networking-essentials"&gt;🏅&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#operating-systems" class="anchor"&gt;
  &lt;/a&gt;
  Operating Systems
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Course Name&lt;/th&gt;
&lt;th&gt;Course Provider&lt;/th&gt;
&lt;th&gt;Level&lt;/th&gt;
&lt;th&gt;Hours&lt;/th&gt;
&lt;th&gt;Reward&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.netacad.com/courses/os-it/ndg-linux-unhatched"&gt;NDG Linux Unhatched&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Cisco Networking Academy&lt;/td&gt;
&lt;td&gt;Beginner&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;🏆&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.netacad.com/courses/os-it/ndg-linux-essentials"&gt;NDG Linux Essentials&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Cisco Networking Academy&lt;/td&gt;
&lt;td&gt;Intermediate&lt;/td&gt;
&lt;td&gt;70&lt;/td&gt;
&lt;td&gt;🏆&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://learn.saylor.org/course/view.php?id=94"&gt;CS401: Operating Systems&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Saylor Academy&lt;/td&gt;
&lt;td&gt;Professional&lt;/td&gt;
&lt;td&gt;120&lt;/td&gt;
&lt;td&gt;🏆&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#robotics-and-iot" class="anchor"&gt;
  &lt;/a&gt;
  Robotics and IoT
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Course Name&lt;/th&gt;
&lt;th&gt;Course Provider&lt;/th&gt;
&lt;th&gt;Level&lt;/th&gt;
&lt;th&gt;Hours&lt;/th&gt;
&lt;th&gt;Reward&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.netacad.com/courses/iot/introduction-iot"&gt;Introduction to IoT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Cisco Networking Academy&lt;/td&gt;
&lt;td&gt;Beginner&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.youracclaim.com/org/cisco/badge/introduction-to-iot"&gt;🏅&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://cognitiveclass.ai/courses/build-robots-with-tjbot"&gt;Building Robots with TJBot&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;IBM / Cognitive Class&lt;/td&gt;
&lt;td&gt;Beginner&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.youracclaim.com/org/ibm/badge/building-robots-with-tjbot"&gt;🏅&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#chatbots" class="anchor"&gt;
  &lt;/a&gt;
  Chatbots
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Course Name&lt;/th&gt;
&lt;th&gt;Course Provider&lt;/th&gt;
&lt;th&gt;Level&lt;/th&gt;
&lt;th&gt;Hours&lt;/th&gt;
&lt;th&gt;Reward&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://cognitiveclass.ai/courses/how-to-build-a-chatbot"&gt;How to Build Chatbots&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;IBM / Cognitive Class&lt;/td&gt;
&lt;td&gt;Beginner&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.youracclaim.com/org/ibm/badge/build-your-own-chatbot-level-1"&gt;🏅&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#devops" class="anchor"&gt;
  &lt;/a&gt;
  DevOps
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Course Name&lt;/th&gt;
&lt;th&gt;Course Provider&lt;/th&gt;
&lt;th&gt;Level&lt;/th&gt;
&lt;th&gt;Hours&lt;/th&gt;
&lt;th&gt;Reward&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://cognitiveclass.ai/learn/containers-k8s-and-istio-on-ibm-cloud"&gt;Containers, K8s and Istio on IBM cloud&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;IBM / Cognitive Class&lt;/td&gt;
&lt;td&gt;Beginner&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.youracclaim.com/org/ibm/badge/containers-k8s-and-istio-on-ibm-cloud"&gt;🏅&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://cognitiveclass.ai/courses/docker-essentials"&gt;Docker Essentials&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;IBM / Cognitive Class&lt;/td&gt;
&lt;td&gt;Beginner&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.youracclaim.com/org/ibm/badge/docker-essentials-a-developer-introduction"&gt;🏅&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://cognitiveclass.ai/courses/ibm-cloud-essentials"&gt;IBM Cloud Essentials&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;IBM / Cognitive Class&lt;/td&gt;
&lt;td&gt;Beginner&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.youracclaim.com/org/ibm/badge/ibm-cloud-essentials.2"&gt;🏅&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://cognitiveclass.ai/courses/kubernetes-course"&gt;Introduction to Containers, Kubernetes, and OpenShift&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;IBM / Cognitive Class&lt;/td&gt;
&lt;td&gt;Beginner&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.youracclaim.com/org/ibm/badge/containers-kubernetes-essentials"&gt;🏅&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#programming-langauges" class="anchor"&gt;
  &lt;/a&gt;
  Programming Langauges
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#c" class="anchor"&gt;
  &lt;/a&gt;
  C
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Course Name&lt;/th&gt;
&lt;th&gt;Course Provider&lt;/th&gt;
&lt;th&gt;Level&lt;/th&gt;
&lt;th&gt;Hours&lt;/th&gt;
&lt;th&gt;Reward&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://learn.saylor.org/course/view.php?id=65"&gt;CS107: C++ Programming&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Saylor Academy&lt;/td&gt;
&lt;td&gt;Professional&lt;/td&gt;
&lt;td&gt;40&lt;/td&gt;
&lt;td&gt;🏆&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#javascript" class="anchor"&gt;
  &lt;/a&gt;
  JavaScript
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Course Name&lt;/th&gt;
&lt;th&gt;Course Provider&lt;/th&gt;
&lt;th&gt;Level&lt;/th&gt;
&lt;th&gt;Hours&lt;/th&gt;
&lt;th&gt;Reward&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.freecodecamp.org/learn/"&gt;JavaScript Algorithms and Data Structures Certification&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;FreeCodeCamp&lt;/td&gt;
&lt;td&gt;Professional&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;🏆&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#r" class="anchor"&gt;
  &lt;/a&gt;
  R
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Course Name&lt;/th&gt;
&lt;th&gt;Course Provider&lt;/th&gt;
&lt;th&gt;Level&lt;/th&gt;
&lt;th&gt;Hours&lt;/th&gt;
&lt;th&gt;Reward&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://cognitiveclass.ai/courses/data-science-101/"&gt;R Essentials&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;IBM / Cognitive Class&lt;/td&gt;
&lt;td&gt;Beginner&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.youracclaim.com/org/ibm/badge/r-essentials"&gt;🏅&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://cognitiveclass.ai/courses/using-r-with-databases/"&gt;Using R with Databases&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;IBM / Cognitive Class&lt;/td&gt;
&lt;td&gt;Beginner&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.youracclaim.com/org/ibm/badge/using-r-with-databases"&gt;🏅&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#python" class="anchor"&gt;
  &lt;/a&gt;
  Python
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Course Name&lt;/th&gt;
&lt;th&gt;Course Provider&lt;/th&gt;
&lt;th&gt;Level&lt;/th&gt;
&lt;th&gt;Hours&lt;/th&gt;
&lt;th&gt;Reward&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.netacad.com/courses/programming/pcap-programming-essentials-python"&gt;Programming Essentials In Python&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Cisco Networking Academy&lt;/td&gt;
&lt;td&gt;Intermediate&lt;/td&gt;
&lt;td&gt;70&lt;/td&gt;
&lt;td&gt;🏆&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.freecodecamp.org/learn/"&gt;Scientific Computing with Python Certification&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;FreeCodeCamp&lt;/td&gt;
&lt;td&gt;Professional&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;🏆&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#theories-and-concepts" class="anchor"&gt;
  &lt;/a&gt;
  Theories and Concepts
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Course Name&lt;/th&gt;
&lt;th&gt;Course Provider&lt;/th&gt;
&lt;th&gt;Level&lt;/th&gt;
&lt;th&gt;Hours&lt;/th&gt;
&lt;th&gt;Reward&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.freecodecamp.org/learn/"&gt;Quality Assurance Certification&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;FreeCodeCamp&lt;/td&gt;
&lt;td&gt;Professional&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;🏆&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://learn.saylor.org/course/view.php?id=6"&gt;CS101: Introduction to Computer Science I&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Saylor Academy&lt;/td&gt;
&lt;td&gt;Professional&lt;/td&gt;
&lt;td&gt;52&lt;/td&gt;
&lt;td&gt;🏆&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://learn.saylor.org/course/view.php?id=64"&gt;CS102: Introduction to Computer Science II&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Saylor Academy&lt;/td&gt;
&lt;td&gt;Professional&lt;/td&gt;
&lt;td&gt;42&lt;/td&gt;
&lt;td&gt;🏆&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://learn.saylor.org/course/view.php?id=66"&gt;CS201: Elementary Data Structures&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Saylor Academy&lt;/td&gt;
&lt;td&gt;Professional&lt;/td&gt;
&lt;td&gt;38&lt;/td&gt;
&lt;td&gt;🏆&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://learn.saylor.org/course/view.php?id=67"&gt;CS202: Discrete Structures&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Saylor Academy&lt;/td&gt;
&lt;td&gt;Professional&lt;/td&gt;
&lt;td&gt;44&lt;/td&gt;
&lt;td&gt;🏆&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://learn.saylor.org/course/view.php?id=71"&gt;CS301: Computer Architecture&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Saylor Academy&lt;/td&gt;
&lt;td&gt;Professional&lt;/td&gt;
&lt;td&gt;48&lt;/td&gt;
&lt;td&gt;🏆&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://learn.saylor.org/course/view.php?id=73"&gt;CS302: Software Engineering&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Saylor Academy&lt;/td&gt;
&lt;td&gt;Professional&lt;/td&gt;
&lt;td&gt;45&lt;/td&gt;
&lt;td&gt;🏆&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#whats-next" class="anchor"&gt;
  &lt;/a&gt;
  What's next?
&lt;/h2&gt;

&lt;p&gt;Awesome Certificates is hosted on &lt;a href="https://github.com/PanXProject/awesome-certificates/"&gt;Github&lt;/a&gt; so that anyone can contribute to it. If you know any free certificates or have any suggestions you can simply add it to list by opening a &lt;a href="https://github.com/PanXProject/awesome-certificates/issues/new/choose"&gt;new issue&lt;/a&gt;, I'd love to hear/see them. Have an awesome year!&lt;/p&gt;

</description>
      <category>career</category>
      <category>computerscience</category>
      <category>showdev</category>
      <category>contributorswanted</category>
    </item>
    <item>
      <title>Create a tag cloud with HTML and CSS</title>
      <author>Alvaro Montoro</author>
      <pubDate>Thu, 31 Dec 2020 13:31:42 +0000</pubDate>
      <link>https://dev.to/alvaromontoro/create-a-tag-cloud-with-html-and-css-1e90</link>
      <guid>https://dev.to/alvaromontoro/create-a-tag-cloud-with-html-and-css-1e90</guid>
      <description>&lt;p&gt;A tag cloud is a list of links associated with a term or a tag. It is common to see them in blogs and websites to highlight popular topics visually: more popular words/categories will have larger font sizes, and less popular topics will be presented in smaller font sizes:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7ZFF03je--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3cz64ioz07pm9w9h165j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7ZFF03je--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3cz64ioz07pm9w9h165j.png" alt="Cloud of words of different sizes, the larger and darker ones are: world, freedom, citizens, generation, America, country"&gt;&lt;/a&gt;&lt;/p&gt;
Word cloud from JFK's inauguration speech. Generated by &lt;a href="https://tagcrowd.com/"&gt;TagCrowd.com&lt;/a&gt;



&lt;p&gt;Without getting into the details of their efficiency and usability (&lt;a href="https://www.nngroup.com/articles/tag-cloud-examples/"&gt;or lack thereof&lt;/a&gt;), tag/word clouds are eye-catchy and pretty, and a nice way to visualize the overall content of a site or article.&lt;/p&gt;

&lt;p&gt;In this article, we will see how to create a tag cloud in HTML and CSS. It is important to note that &lt;strong&gt;each term's weights/popularity will have to be pre-calculated using a different language&lt;/strong&gt;. We are going to focus exclusively on the presentation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#basic-html-structure" class="anchor"&gt;
  &lt;/a&gt;
  Basic HTML structure
&lt;/h2&gt;

&lt;p&gt;As we mentioned before, &lt;strong&gt;a tag cloud is a list of links&lt;/strong&gt;. So, from a semantic perspective, it makes sense to use an &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul"&gt;unordered list (&lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;)&lt;/a&gt; as the terms will not be sorted by popularity... otherwise, it would be a rather boring cloud.&lt;/p&gt;

&lt;p&gt;Inside each list item, there will be a link to the tag/term search page. Which would lead us to a basic yet straightforward structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/tag/word1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Word1&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/tag/word2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Word2&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/tag/word3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Word3&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The popularity (or weight) of each word will be pre-calculated, and it should be added to each item in the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; or the &lt;code&gt;&amp;lt;a&amp;gt;.&lt;/code&gt; We'll opt to have it on the link, but it could be at the list item level.&lt;/p&gt;

&lt;p&gt;A higher weight means that the tag is more popular and it should be displayed in a larger font size:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/tag/word1"&lt;/span&gt; &lt;span class="na"&gt;data-weight=&lt;/span&gt;&lt;span class="s"&gt;"3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Word1&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/tag/word2"&lt;/span&gt; &lt;span class="na"&gt;data-weight=&lt;/span&gt;&lt;span class="s"&gt;"7"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Word2&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/tag/word3"&lt;/span&gt; &lt;span class="na"&gt;data-weight=&lt;/span&gt;&lt;span class="s"&gt;"4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Word3&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: an alternative would be to have a &lt;code&gt;data-count&lt;/code&gt; and &lt;code&gt;data-total&lt;/code&gt; and calculate the weight directly on CSS. This is possible following the standard, but no browser supports it yet (as we will see later). To avoid that, we could have two data-attributes: &lt;code&gt;data-weight&lt;/code&gt; and &lt;code&gt;data-count&lt;/code&gt; for each tag. That would work better. For simplicity reasons, we will focus on only one data-attribute: &lt;code&gt;data-weight.&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With that, we are almost done with the HTML structure –there will be some changes later, but let's not get ahead of ourselves–, we still want to tweak a little bit the &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; to add some attributes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;class&lt;/code&gt;: which will be helpful to target which lists to style as a cloud.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;role&lt;/code&gt;: this is a navigational component; we want to identify it to screen readers and other assistive technologies (AT).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;aria-label&lt;/code&gt;: used to give it a "title" or description to ATs.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: we may skip the &lt;code&gt;role="navigation"&lt;/code&gt; if the list is inside a &lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt; tag. Instead of &lt;code&gt;aria-label,&lt;/code&gt; we could use &lt;code&gt;aria-labelledby&lt;/code&gt; to point to a navigation title.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's expand the HTML from our example, also including Web Development terms to make it a more realistic example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"cloud"&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"navigation"&lt;/span&gt; &lt;span class="na"&gt;aria-label=&lt;/span&gt;&lt;span class="s"&gt;"Webdev tag cloud"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;data-weight=&lt;/span&gt;&lt;span class="s"&gt;"4"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/tag/http"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;HTTP&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;data-weight=&lt;/span&gt;&lt;span class="s"&gt;"2"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/tag/ember"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Ember&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;data-weight=&lt;/span&gt;&lt;span class="s"&gt;"5"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/tag/sass"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Sass&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;data-weight=&lt;/span&gt;&lt;span class="s"&gt;"8"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/tag/html"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;HTML&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;data-weight=&lt;/span&gt;&lt;span class="s"&gt;"6"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/tag/flexbox"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;FlexBox&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;data-weight=&lt;/span&gt;&lt;span class="s"&gt;"4"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/tag/api"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;API&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;data-weight=&lt;/span&gt;&lt;span class="s"&gt;"5"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/tag/vuejs"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;VueJS&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;data-weight=&lt;/span&gt;&lt;span class="s"&gt;"6"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/tag/grid"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Grid&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;data-weight=&lt;/span&gt;&lt;span class="s"&gt;"3"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/tag/rest"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Rest&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;data-weight=&lt;/span&gt;&lt;span class="s"&gt;"9"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/tag/javascript"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;JavaScript&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;data-weight=&lt;/span&gt;&lt;span class="s"&gt;"3"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/tag/animation"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Animation&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;data-weight=&lt;/span&gt;&lt;span class="s"&gt;"7"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/tag/react"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;React&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;data-weight=&lt;/span&gt;&lt;span class="s"&gt;"8"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/tag/css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;CSS&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;data-weight=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/tag/cache"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Cache&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;data-weight=&lt;/span&gt;&lt;span class="s"&gt;"3"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/tag/less"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Less&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This is how our tag cloud looks like right now:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wVCk24PT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4zk7klbmns9k6cmn4e8i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wVCk24PT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4zk7klbmns9k6cmn4e8i.png" alt="Non-styled list of items generated from the code above"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is just a simple list of links without styles or any eye-popping features... let's change that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#styling-the-tag-cloud" class="anchor"&gt;
  &lt;/a&gt;
  Styling the tag cloud
&lt;/h2&gt;

&lt;p&gt;These are the features that we are going to add with CSS:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Remove the list look-and-feel and make it inline.&lt;/li&gt;
&lt;li&gt;Make tags' font-size depend directly on the value of &lt;code&gt;data-weight.&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Add the tag's weight next to the label.&lt;/li&gt;
&lt;li&gt;"Randomize" tags' colors to provide.&lt;/li&gt;
&lt;li&gt;Animate the &lt;code&gt;:hover&lt;/code&gt; and &lt;code&gt;:focus&lt;/code&gt; status, providing an accessible alternative to avoid motion.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#styling-the-raw-ltulgt-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  Styling the &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;First, we delete the circles in the list items and remove the list indentation with &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/list-style"&gt;&lt;code&gt;list-style&lt;/code&gt;&lt;/a&gt; and a &lt;code&gt;padding-left&lt;/code&gt; of zero:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  list-style: none;
  padding-left: 0;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then, we set the &lt;code&gt;ul&lt;/code&gt;'s display to &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox"&gt;Flexbox&lt;/a&gt;, center align the items vertically and horizontally and make sure that all elements will be visible by wrapping into multiple lines:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  display: flex;
  flex-wrap: wrap;
  align-items: center;
  justify-content: center;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;After adding a &lt;code&gt;line-height&lt;/code&gt; to ensure some vertical word spacing, the final styles for the &lt;code&gt;ul&lt;/code&gt; look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="nc"&gt;.cloud&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;list-style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-wrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Our tag cloud still doesn't look much like a tag cloud:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rNJsUvNC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jo89cez6bt4r9siws80f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rNJsUvNC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jo89cez6bt4r9siws80f.png" alt="A list of web development terms, all the same size, stuck horizontally"&gt;&lt;/a&gt;&lt;/p&gt;
Not great... but things will improve soon...



&lt;h3&gt;
  &lt;a href="#adjust-tag-size-depending-on-the-weightpopularity" class="anchor"&gt;
  &lt;/a&gt;
  Adjust tag size depending on the weight/popularity
&lt;/h3&gt;

&lt;p&gt;Let's start by styling the links a little:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="nc"&gt;.cloud&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#a33&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.125rem&lt;/span&gt; &lt;span class="m"&gt;0.25rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;With the styles above, all the tags/words will be red-ish and have a fixed size of 1.5 rem:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vONpx2kb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vws2b6822g10bwzq56u8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vONpx2kb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vws2b6822g10bwzq56u8.png" alt="A list of web development terms, all the same size, but nicely separated and wrapping into multiple lines"&gt;&lt;/a&gt;&lt;/p&gt;
The cloud starts looking like a cloud



&lt;p&gt;We want to have a font-size based on the &lt;code&gt;data-weight&lt;/code&gt; attribute. So... how can we do that?&lt;/p&gt;

&lt;p&gt;The web standard includes a way of reading HTML data-attributes from CSS by using the &lt;a href="https://drafts.csswg.org/css-values-3/#attr-notation"&gt;&lt;code&gt;attr()&lt;/code&gt; function&lt;/a&gt;. We can read the value of &lt;code&gt;data-weight&lt;/code&gt; by doing something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;attr([attribute-name] [attribute-unit]? [, default-value]?)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Unfortunately, &lt;strong&gt;that notation and functionality are not supported by any browser at the moment&lt;/strong&gt;. Instead, &lt;code&gt;attr()&lt;/code&gt; will only return a string and can only be used in the &lt;code&gt;content&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;If the standard notation worked, we could read the data-attributes with the weight (or the total and the count, as described above), save them into a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties"&gt;CSS variable&lt;/a&gt;, and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/calc()"&gt;do operations&lt;/a&gt; directly with them, like this:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="nc"&gt;.cloud&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;--size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data-weight&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
Beware: this won't work!


&lt;p&gt;...But we cannot do that. Instead, we can add a set of CSS rules with the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors"&gt;selectors based on an attribute&lt;/a&gt;: the data-attribute.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="nc"&gt;.cloud&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;data-weight&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"1"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="py"&gt;--size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="nc"&gt;.cloud&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;data-weight&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"2"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="py"&gt;--size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="nc"&gt;.cloud&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;data-weight&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"3"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="py"&gt;--size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="nc"&gt;.cloud&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;data-weight&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"4"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="py"&gt;--size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="nc"&gt;.cloud&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;data-weight&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"5"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="py"&gt;--size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="nc"&gt;.cloud&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;data-weight&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"6"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="py"&gt;--size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="nc"&gt;.cloud&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;data-weight&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"7"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="py"&gt;--size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="nc"&gt;.cloud&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;data-weight&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"8"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="py"&gt;--size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="nc"&gt;.cloud&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;data-weight&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"9"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="py"&gt;--size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="nc"&gt;.cloud&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="m"&gt;0.25rem&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="m"&gt;0.5rem&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c"&gt;/* ... */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;That, combined with the new function to calculate the font-size (keeping the original one caused too large sizes), results in a basic tag cloud:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DTlvwMqq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9sntz2weqa2ng1fhkl4h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DTlvwMqq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9sntz2weqa2ng1fhkl4h.png" alt="Word cloud with web development terms"&gt;&lt;/a&gt;&lt;/p&gt;
Not bad for less than 50 lines of HTML &amp;amp; CSS



&lt;p&gt;This is only our first iteration. With just a few more CSS lines, we can add more flair (and functionality) to the component.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#add-the-tags-popularity-next-to-the-label" class="anchor"&gt;
  &lt;/a&gt;
  Add the tag's popularity next to the label
&lt;/h3&gt;

&lt;p&gt;Many tag clouds display not only the term but also the weight/value next to it.&lt;/p&gt;

&lt;p&gt;We have the value. It's in the data-attribute that we use to specify the font-size. And displaying a data-attribute is straightforward in the &lt;code&gt;content&lt;/code&gt; of a pseudo-element like &lt;code&gt;::after&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="nc"&gt;.cloud&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;data-show-value&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;" ("&lt;/span&gt; &lt;span class="nf"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data-weight&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;")"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We added an attribute selector to the cloud: &lt;code&gt;[data-show-value]&lt;/code&gt;. That is by design. By adding it, the value/count/weight will only be displayed if the list has the data-attribute &lt;code&gt;data-show-value&lt;/code&gt;. If it doesn't have it, then the number will not be displayed.&lt;/p&gt;

&lt;p&gt;That way, we are adding customization to our web component: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;data-show-value&lt;/code&gt;: the numbers are displayed&lt;/li&gt;
&lt;li&gt;Remove/Don't add &lt;code&gt;data-show-value&lt;/code&gt;: the numbers are not displayed.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: the data-attribute &lt;code&gt;data-show-value&lt;/code&gt; is a boolean that works like &lt;code&gt;controls&lt;/code&gt; in a &lt;code&gt;video&lt;/code&gt; tag: as soon as it appears, it will activate the functionality, even if the value passed is "false."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Adding &lt;code&gt;data-show-value&lt;/code&gt; will result in our word cloud looking like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CUmGaxVz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mdhuykv1lluwr2xb9dab.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CUmGaxVz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mdhuykv1lluwr2xb9dab.png" alt="Word cloud with web development terms and their weights between parenthesis"&gt;&lt;/a&gt;&lt;/p&gt;
I'm not a big fan of this visualization



&lt;p&gt;We will deactivate/remove that attribute for the rest of the demo.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#add-colors" class="anchor"&gt;
  &lt;/a&gt;
  Add colors
&lt;/h3&gt;

&lt;p&gt;A monochrome cloud looks dull. We are going to spice it up by adding colors. And we are going to try two different approaches.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#using-random-colors" class="anchor"&gt;
  &lt;/a&gt;
  Using "random" colors
&lt;/h4&gt;

&lt;p&gt;There's no randomness in CSS (&lt;a href="https://css-tricks.com/are-there-random-numbers-in-css/"&gt;although it can be simulated&lt;/a&gt;). What we will do is add different colors to the tags, depending on their order by using the following selectors:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="nc"&gt;.cloud&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;2n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;--color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#181&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="nc"&gt;.cloud&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;3n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;--color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#33a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="nc"&gt;.cloud&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;4n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;--color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#c38&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This way, we will be adding some green, blue, and purple to the already existing red color. They will follow a pattern, but this may not be obvious to the user:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0qbgAXPd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wc7h9bg0uoy42w3j1cem.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0qbgAXPd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wc7h9bg0uoy42w3j1cem.png" alt="Word cloud with web development terms in different colors"&gt;&lt;/a&gt;&lt;/p&gt;
Make sure the colors have enough contrast



&lt;h4&gt;
  &lt;a href="#using-different-tones-of-the-same-color" class="anchor"&gt;
  &lt;/a&gt;
  Using different tones of the same color
&lt;/h4&gt;

&lt;p&gt;Similar to what TagCrowd does (see the first image), we can highlight the popular tags by adding more contrast. On a light background, this can be achieved by making them darker.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://dev.to/alvaromontoro/hsl-2fom"&gt;HSL color format&lt;/a&gt; would be incredibly convenient for this. But a quicker option could be making the tag semitransparent inversely proportional to the &lt;code&gt;data-weight&lt;/code&gt; (transformed into the CSS variable &lt;code&gt;--size&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="nc"&gt;.cloud&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="m"&gt;15&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--size&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
  &lt;span class="c"&gt;/* ... */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;With this code (instead of the one in the previous section), the tag cloud looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UDMVOFsb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5ahqz8bal2ew6z4u3oyq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UDMVOFsb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5ahqz8bal2ew6z4u3oyq.png" alt="Word cloud with web development terms in different tones of the same color"&gt;&lt;/a&gt;&lt;/p&gt;
I find this option more &lt;em&gt;elegant&lt;/em&gt;... but not as accessible



&lt;h3&gt;
  &lt;a href="#customize-outline" class="anchor"&gt;
  &lt;/a&gt;
  Customize outline
&lt;/h3&gt;

&lt;p&gt;It is important to be &lt;strong&gt;extremely careful when touching the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/outline"&gt;&lt;code&gt;outline&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;. It is a key property for accessibility, and a bad value could make the component (or the whole website) difficult to use for people with disabilities.&lt;/p&gt;

&lt;p&gt;In this case, we will add a border of the same color as the text, replacing (&lt;strong&gt;not removing&lt;/strong&gt;) the default outline on focus.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="nc"&gt;.cloud&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nd"&gt;:focus&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;dashed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And again: extreme caution when changing the outline. This section is optional.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#add-animations" class="anchor"&gt;
  &lt;/a&gt;
  Add animations
&lt;/h3&gt;

&lt;p&gt;To add some interactivity, we will add a simple animation: when the user focuses on or hovers over one of the links, the background will change color horizontally.&lt;/p&gt;

&lt;p&gt;Because it is an animation depending on the state, we will use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/transition"&gt;&lt;code&gt;transition&lt;/code&gt;&lt;/a&gt; instead of the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/animation"&gt;&lt;code&gt;animation&lt;/code&gt;&lt;/a&gt; property.&lt;/p&gt;

&lt;p&gt;We will add a &lt;code&gt;::before&lt;/code&gt; pseudo-element with no width, and on &lt;code&gt;:focus&lt;/code&gt; or &lt;code&gt;:hover&lt;/code&gt;, we will update the width to 100% of the container, creating a micro-interaction.&lt;/p&gt;

&lt;p&gt;The CSS code or the pseudo-element and the state behavior is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="nc"&gt;.cloud&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.15&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="m"&gt;0.25s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="nc"&gt;.cloud&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nd"&gt;:focus::before&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="nc"&gt;.cloud&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nd"&gt;:hover::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;One final point for the animations: users may not like them and have them disabled. If that's the case, it is &lt;strong&gt;important to respect the user's preferences&lt;/strong&gt; and remove the animations.&lt;/p&gt;

&lt;p&gt;This can be achieved with the [&lt;code&gt;prefers-reduced-motion&lt;/code&gt;] media feature](&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion"&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion&lt;/a&gt;).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefers-reduced-motion&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="nc"&gt;.cloud&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And with that, our tag cloud is complete! Here is a demo with all the code above together:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/mdrpLzj?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;There are many ways to create a tag cloud: with HTML and CSS, with lists, without lists, using JavaScript... All (or most) of them valid and beautiful. &lt;/p&gt;

&lt;p&gt;I'm not going to claim that the one described above is the best way, but it is possibly one of the simplest clouds you will find. And also quite complete: different variants, customizable, less than 100 lines of code between HTML and CSS... And it's that simplicity and potential that makes it so pretty.&lt;/p&gt;

&lt;p&gt;And it has room for improvement and expansion, which is always nice. So if you try building a word/tag cloud following this post, please share a link with a demo!&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Sleep function in javaScript</title>
      <author>Rahul kumar</author>
      <pubDate>Thu, 31 Dec 2020 10:29:23 +0000</pubDate>
      <link>https://dev.to/ats1999/sleep-function-in-javascript-785</link>
      <guid>https://dev.to/ats1999/sleep-function-in-javascript-785</guid>
      <description>&lt;p&gt;&lt;code&gt;JavaScript&lt;/code&gt; provides setTimeout() and setInterval() methods to delay execution of script. But, it doesn't provide any way to sleep execution at a single line. Let's build our custom sleep method.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#toc" class="anchor"&gt;
  &lt;/a&gt;
  TOC
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Prerequisites&lt;/li&gt;
&lt;li&gt;idea&lt;/li&gt;
&lt;li&gt;sleep API&lt;/li&gt;
&lt;li&gt;uses&lt;/li&gt;
&lt;li&gt;live interactive demo&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites" class="anchor"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"&gt;Promise&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function"&gt;async&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await"&gt;await&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Archive/Add-ons/Code_snippets/Timers"&gt;setTimeout&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;I am assuming that you know the above prerequisites.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Idea is to use a promise to wait for a number of milliseconds. We know, we can delay the execution of certain script using &lt;code&gt;await&lt;/code&gt;. Using await we can run the next script after the promise is resolved or rejected.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-build-our-sleep-api" class="anchor"&gt;
  &lt;/a&gt;
  Let's build our sleep API
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="nx"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The above sleep API will wait for some milliseconds, then it resolves the promise.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#uses" class="anchor"&gt;
  &lt;/a&gt;
  Uses
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;make sure to call this API inside the &lt;code&gt;async&lt;/code&gt; function&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="c1"&gt;// wait for 3 seconds&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Waiting...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The wait is over&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#live-demo" class="anchor"&gt;
  &lt;/a&gt;
  Live demo
&lt;/h2&gt;

&lt;p&gt;See the Pen &lt;a href="https://codepen.io/ats1999/pen/oNzpMZN"&gt;oNzpMZN&lt;/a&gt; by Rahul kumar&lt;br&gt;
  (&lt;a href="https://codepen.io/ats1999"&gt;@ats1999&lt;/a&gt;) on &lt;a href="https://codepen.io"&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>react</category>
      <category>node</category>
      <category>javascript</category>
    </item>
    <item>
      <title>VSChat | Chat online in VSCode</title>
      <author>Banji</author>
      <pubDate>Thu, 31 Dec 2020 09:54:55 +0000</pubDate>
      <link>https://dev.to/banji220/vschat-chat-online-in-vscode-33p1</link>
      <guid>https://dev.to/banji220/vschat-chat-online-in-vscode-33p1</guid>
      <description>&lt;p&gt;Hey Everyone&lt;br&gt;
Wassup?&lt;br&gt;
Today I was reading an article about a cool extension in VSCode that you can chat &lt;strong&gt;anonymously&lt;/strong&gt; !(without registration)&lt;/p&gt;

&lt;p&gt;I think it could be an amazing extension in VSCode for programmers and developers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;VSChat&lt;/strong&gt; is developing by &lt;em&gt;&lt;a href="https://github.com/Ademking/vsChat"&gt;Adem Kouki&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Let's take a look at the VSChat screenshot on my desktop :)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xRYqACjS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/f87j3tq0n7ml3iodif70.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xRYqACjS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/f87j3tq0n7ml3iodif70.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Youtube Demo&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Take a look at &lt;strong&gt;&lt;a href="https://youtu.be/jaNGBBn8BJE"&gt;VSChat Youtube Deme&lt;/a&gt;&lt;/strong&gt; youtube demo.&lt;/li&gt;
&lt;/ul&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;How to Download?&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;You can download &lt;strong&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=Ademking.vschat"&gt;VSChat&lt;/a&gt;&lt;/strong&gt; in the VSCode marketplace.&lt;/li&gt;
&lt;/ul&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Features&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Chat while programming&lt;/li&gt;
&lt;li&gt;No need to register(Chat anonymously)&lt;/li&gt;
&lt;li&gt;If you type @ + username, like @ matt, it will highlight the message to that user. Click the circle avatar to quickly add it to the input.&lt;/li&gt;
&lt;li&gt;If you paste a link to an image, it will show the image inline. Also, pasted URLs will turn into links.&lt;/li&gt;
&lt;/ul&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Rules&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Be positive &amp;amp; helpful&lt;/li&gt;
&lt;li&gt;Be respectful&lt;/li&gt;
&lt;li&gt;Do not self promote&lt;/li&gt;
&lt;li&gt;Always be polite&lt;/li&gt;
&lt;li&gt;Have fun!&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Alright guys I hope you enjoy this fascinating extension.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#keep-moving-forward-%E3%83%84" class="anchor"&gt;
  &lt;/a&gt;
  Keep Moving Forward ツ
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#enjoy-your-journey" class="anchor"&gt;
  &lt;/a&gt;
  Enjoy Your Journey 👊
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#code-with" class="anchor"&gt;
  &lt;/a&gt;
  Code with 💛
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;🅑🅐🅝🅙🅘&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>programming</category>
      <category>discuss</category>
      <category>devops</category>
    </item>
    <item>
      <title>Do you know Markdown!</title>
      <author>Hardik Chopra</author>
      <pubDate>Thu, 31 Dec 2020 09:44:28 +0000</pubDate>
      <link>https://dev.to/hardikchopra242/do-you-know-markdown-2d2p</link>
      <guid>https://dev.to/hardikchopra242/do-you-know-markdown-2d2p</guid>
      <description>&lt;p&gt;If you write articles on DEV you might know markdown but if you don't know, let's learn it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Markdown&lt;/strong&gt; is a lightweight markup language that you can use to add formatting elements to plain text documents. Markdown is used widely in the community, being it either writing README for Github or writing dev articles, markdown is used everywhere.&lt;/p&gt;

&lt;p&gt;I will be discussing some basics and resources related to markdown.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#contents" class="anchor"&gt;
  &lt;/a&gt;
  Contents
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="#contents"&gt;Syntax&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#headings"&gt;Headings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#formatting-texts"&gt;Formatting Texts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#links"&gt;Links&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="#images"&gt;Images&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#code-snippet"&gt;Code Snippet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#lists"&gt;Lists&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#blockquotes"&gt;Blockquotes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tables"&gt;Tables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#horizontal-lines"&gt;Horizontal Lines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#emoticons"&gt;Emoticons&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#practice-online"&gt;Practice online&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#typora"&gt;Bonus!&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;




&lt;h3&gt;
  &lt;a href="#headings" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Headings&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Just like we have &lt;code&gt;h1,h2....h6&lt;/code&gt; tags in HTML, we have these heading tags in markdown as well. We use this with the help of &lt;code&gt;#&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;INPUT:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# This is Heading
## This is Heading
### This is Heading
#### This is Heading
##### This is Heading
###### This is Heading  
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;OUTPUT:&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#this-is-heading" class="anchor"&gt;
  &lt;/a&gt;
  This is Heading
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#this-is-heading" class="anchor"&gt;
  &lt;/a&gt;
  This is Heading
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#this-is-heading" class="anchor"&gt;
  &lt;/a&gt;
  This is Heading
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#this-is-heading" class="anchor"&gt;
  &lt;/a&gt;
  This is Heading
&lt;/h4&gt;

&lt;h5&gt;
  &lt;a href="#this-is-heading" class="anchor"&gt;
  &lt;/a&gt;
  This is Heading
&lt;/h5&gt;

&lt;h6&gt;
  &lt;a href="#this-is-heading" class="anchor"&gt;
  &lt;/a&gt;
  This is Heading
&lt;/h6&gt;

&lt;p&gt;&lt;a href="#contents"&gt;Back to Contents&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#formatting-texts" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Formatting Texts&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;You have different formatting options in markdown. You can use bold or italics but you have not the option of underlining text in pure markdown.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To bold, enclose the text between 2 asterisks on both sides. &lt;code&gt;** **&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;To make the text emphasized, enclose text between 1 asterisk on both sides. &lt;code&gt;* *&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;To make bold and emphasized both, enclose text between 3 asterisks. &lt;code&gt;***  ***&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;For Strikethrough text, enclose it between &lt;code&gt;~~ ~~&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;INPUT:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;**Bold**
*Emphasized*
***Both***
~~Strikethrough~~
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;OUTPUT:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bold&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;Emphasized&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;&lt;em&gt;Both&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;del&gt;Strikethrough&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;Note: Instead of asterisks(*), underscore(_) can also be used.&lt;/p&gt;

&lt;p&gt;&lt;a href="#contents"&gt;Back to Contents&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#links" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Links&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;It is very easy to add links or hrefs in markdown. Write the text inside square brackets &lt;code&gt;[]&lt;/code&gt; and put the link in round brackets &lt;code&gt;()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;INPUT:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[My Dev Profile](https://dev.to/hardikchopra242)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;OUTPUT:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/hardikchopra242"&gt;My Dev Profile&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#contents"&gt;Back to Contents&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#images" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Images&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Adding images is very much similar to adding links. One difference is that we put an exclamation mark &lt;code&gt;!&lt;/code&gt; in front. In the square brackets, we write the Alt text and in the round brackets, we give the link to our image.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;INPUT:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;![Meme](https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ftse1.mm.bing.net%2Fth%3Fid%3DOIP.YIPISOt_bX8dMMUBzE-hPAHaFj%26pid%3DApi&amp;amp;f=1)

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;OUTPUT:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bT7PZLY9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://external-content.duckduckgo.com/iu/%3Fu%3Dhttps%253A%252F%252Ftse1.mm.bing.net%252Fth%253Fid%253DOIP.YIPISOt_bX8dMMUBzE-hPAHaFj%2526pid%253DApi%26f%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bT7PZLY9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://external-content.duckduckgo.com/iu/%3Fu%3Dhttps%253A%252F%252Ftse1.mm.bing.net%252Fth%253Fid%253DOIP.YIPISOt_bX8dMMUBzE-hPAHaFj%2526pid%253DApi%26f%3D1" alt="Meme"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#contents"&gt;Back to Contents&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#code-snippet" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Code Snippet&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;There are two options to add code snippets, one is inside a continuous line and the second is a whole code snippet block.&lt;br&gt;
For inline we use a single back-tick and for a snippet block, we enclose the code in three back-tick pairs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;INPUT:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oP3tVSIQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ig4l4v8j74k3yefzf1qf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oP3tVSIQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ig4l4v8j74k3yefzf1qf.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OUTPUT:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is how inline &lt;code&gt;code looks like&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Write your code
Here and it
will turn into a 
code block
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="#contents"&gt;Back to Contents&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#lists" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Lists&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;You can add ordered or unordered lists in the markdown by just numbering them or putting asterisks &lt;code&gt;*&lt;/code&gt; ahead of every element&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;INPUT:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Ordered List

1. List Item   
2. List Item
  1. List 2       //For nested lists, use two-space indentation
  2. List 2
  3. List 2
3. List Item


Unordered List

* List Item      //Inplace of * , - and + can also be used 
* List Item    
  * List 2
  * List 2
  * List 2
* List Item


&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;OUTPUT:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ordered List&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;List Item&lt;/li&gt;
&lt;li&gt;List Item

&lt;ol&gt;
&lt;li&gt;List 2&lt;/li&gt;
&lt;li&gt;List 2&lt;/li&gt;
&lt;li&gt;List 2&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;List Item&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Unordered List&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;List Item&lt;/li&gt;
&lt;li&gt;List Item

&lt;ul&gt;
&lt;li&gt;List 2&lt;/li&gt;
&lt;li&gt;List 2&lt;/li&gt;
&lt;li&gt;List 2&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;List Item&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="#contents"&gt;Back to Contents&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#blockquotes" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Blockquotes&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Blockquotes can be added using &lt;code&gt;&amp;gt;&lt;/code&gt; at the start of a line. You can also use nested blockquotes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;INPUT:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt;This is a BlockQuote.
&amp;gt;This is a BlockQuote.
&amp;gt;&amp;gt;This is a ***nested*** BlockQuote.
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;OUTPUT:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is a BlockQuote.&lt;br&gt;
This is a BlockQuote.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is a &lt;strong&gt;&lt;em&gt;nested&lt;/em&gt;&lt;/strong&gt; BlockQuote.&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#contents"&gt;Back to Contents&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#tables" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Tables&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;To make tables, every column should be separated using &lt;code&gt;|&lt;/code&gt; and &lt;code&gt;:--------:&lt;/code&gt; can be used to make the column headings bold. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;INPUT:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;| Column 1       | Column 2     | Column 3     |
| :------------- | :----------: | :-----------: |
|  Row 1 | To escape   | the pipes,    |
| Row 2   | Use backslash| Like this  \| |
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;OUTPUT:&lt;/strong&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Column 1&lt;/th&gt;
&lt;th&gt;Column 2&lt;/th&gt;
&lt;th&gt;Column 3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Row 1&lt;/td&gt;
&lt;td&gt;To escape&lt;/td&gt;
&lt;td&gt;the pipes,&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Row 2&lt;/td&gt;
&lt;td&gt;Use backslash&lt;/td&gt;
&lt;td&gt;Like this  \&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="#contents"&gt;Back to Contents&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#horizontal-lines" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Horizontal Lines&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;There are three different ways to make a horizontal line. These are:&lt;br&gt;
Using three continuous &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, and &lt;code&gt;_&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;INPUT:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Paragraph 1

---

Paragraph 2

___

Paragraph 3

***

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;OUTPUT:&lt;/strong&gt;&lt;br&gt;
Paragraph 1&lt;/p&gt;



&lt;p&gt;Paragraph 2&lt;/p&gt;



&lt;p&gt;Paragraph 3&lt;/p&gt;



&lt;p&gt;Don't forget to give a line space above and below the syntax.&lt;/p&gt;

&lt;p&gt;&lt;a href="#contents"&gt;Back to Contents&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#emoticons" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Emoticons&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;To use emoticons in your markdown place emoticon code inside two colons &lt;code&gt;: emoticon_code :&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;INPUT:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:smile: :mask: :bug:
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;OUTPUT:&lt;/strong&gt;&lt;br&gt;
😄 😷 🐛&lt;/p&gt;

&lt;p&gt;For markdown emoji cheatsheet &lt;strong&gt;&lt;a href="https://github.com/ikatyang/emoji-cheat-sheet/blob/master/README.md"&gt;click here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#contents"&gt;Back to Contents&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#practice-online" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Practice Online&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;To practice markdown, you can refer to some of the following websites. Anytime if you feel like you should try something out, jump to one of these websites and write markdown!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://dillinger.io/"&gt;Dillinger&lt;/a&gt; 👑&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jbt.github.io/markdown-editor/"&gt;JBT Markdown&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="#contents"&gt;Back to Contents&lt;/a&gt;&lt;/p&gt;






&lt;h2&gt;
  &lt;a href="#bonusfire" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Bonus!!&lt;/strong&gt;🔥
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#typora" class="anchor"&gt;
  &lt;/a&gt;
  Typora
&lt;/h3&gt;

&lt;p&gt;Typora is a markdown editor. One of my friends suggested me to use Typora for making notes and it's fantastic!&lt;br&gt;
When we learn something we new we have to note that somewhere so that we can recall that later. Typora can be used for this purpose.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aDf9Hd6V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kvitu98pydmxqcg1qy5p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aDf9Hd6V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kvitu98pydmxqcg1qy5p.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ton of themes&lt;/li&gt;
&lt;li&gt;Live preview of what you write in markdown&lt;/li&gt;
&lt;li&gt;Many editing options &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://typora.io/"&gt;Download Typora&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#contents"&gt;Back to Contents&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;em&gt;If you got to learn something new and useful show some love by giving this post a&lt;/em&gt; ❤️&lt;/p&gt;

&lt;p&gt;If you find it useful for you, &lt;strong&gt;save this post&lt;/strong&gt; and share it with your programming buddies 😃&lt;/p&gt;

&lt;p&gt;Do you know any other markdown tricks? Do share it in the comment section!💬&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>markdown</category>
      <category>productivity</category>
    </item>
    <item>
      <title>[Best of 2021]: An UI Visual Programming Tool you should look forward to</title>
      <author>2(-)!</author>
      <pubDate>Thu, 31 Dec 2020 09:24:52 +0000</pubDate>
      <link>https://dev.to/imunprecedented/best-of-2021-an-ui-visual-programming-tool-you-should-look-forward-to-enj</link>
      <guid>https://dev.to/imunprecedented/best-of-2021-an-ui-visual-programming-tool-you-should-look-forward-to-enj</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jLKwudlN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/02ee6lzvw0ezx9ighe8g.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jLKwudlN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/02ee6lzvw0ezx9ighe8g.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ever wonder how can you skip those frustrating &amp;amp; time-consuming hand-coding processes, switching your tabs back and forth just to check if the Web Page looks OK? We understand your feeling, we been through it, but from now on, these problems finally have a solution. Because we created the revolutionary tool — pxCode, the best UI Visual Programming Tool in 2021.&lt;/p&gt;

&lt;p&gt;pxCode, a Responsive Webpage Development Tool that doesn’t require hand-coding, you can just import a Sketch design file, and do all the detail adjustments in a single tab, you don’t have to shift your tabs back &amp;amp; forth, which saves you plenty of time!&lt;/p&gt;

&lt;p&gt;And by ‘save you PLENTY of time’, we mean it, almost 10x faster than the old traditional way. But how do we achieve it?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pSxc1PLz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/aifxds9lple4vt2pk1dy.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pSxc1PLz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/aifxds9lple4vt2pk1dy.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the past few months, our team has been dedicating all our heart, just to come out with a new way that can help all the Front End Designers to save their precious work time. Fortunately, we did it!&lt;/p&gt;

&lt;p&gt;We developed some new features that could not be found in other tools, and that’s what makes the Web building process in pxCode faster than others. We will dive deeper into it later on, here’s a TUTORIAL(&lt;a href="https://youtu.be/VCSpGUnoMW0"&gt;https://youtu.be/VCSpGUnoMW0&lt;/a&gt;) showing you how a Developer uses pxCode to achieve a 10 mins Responsive Webpage.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kyNmpY8p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/iogsvmby7z6zeawjzir2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kyNmpY8p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/iogsvmby7z6zeawjzir2.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You must have questions, how the Fxxx can one build a Responsive Webpage without knowing any coding knowledge? But the truth is, you really don't need to do any hand-coding if you’re using pxCode!&lt;/p&gt;

&lt;p&gt;We developed our own algorithm, so whenever you make any changes on your design file, pxCode instantly helps to generate the matching code, and we promise it is well-structured so that you can keep it for further purposes.&lt;/p&gt;

&lt;p&gt;But why do we do this? Isn’t that we can learn more if we hand-coding by our own? Yes, we agree. But it just consumes too much time, now with pxCode, becoming productive is way more important as a Developer.&lt;/p&gt;

&lt;p&gt;The best thing is that we don’t only generate one kind of code, from HTML, CSS, React, React-Native… and now we even support CSS Flex and Bootstrap, basically you can found anything you needed. And guess what, we are on our way to develop more features, let’s join us to witness the changes in the future!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e7rBR0_7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2h8y5etx2kuhsuw5r6bh.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e7rBR0_7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2h8y5etx2kuhsuw5r6bh.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that is why we have [ Elegant, 10x Faster, Clean Code ] as our slogan.&lt;/p&gt;

&lt;p&gt;[Elegant], because we can build a Responsive Webpage from our Design File without any time pressure, and we can make it [10x Faster] than other Handoff Tools. And don’t have to worry about the code structure, because in pxCode, we generate it automatically for you in well-structured, which also represent [Clean Code]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HuXbCvth--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/22h84iimqpng1le4rqpw.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HuXbCvth--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/22h84iimqpng1le4rqpw.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The sky’s the limit, and that’s what the blue color in pxCode’s logo represent. pxCode breaks the limitation! It unlocked the limitation of Designers’ creativity, you can now have the complete control of our Design, doing whatever you like on it, and at the same time we help you to manage all the time-wasting and frustrating part!&lt;/p&gt;

&lt;p&gt;As Stevie Wonder once sang:「Don’t you worry ‘bout a thing? Cause I’ll be standing on the side, When you check it out」You don’t have to worry, because pxCode is always on the side. ;)&lt;/p&gt;




&lt;p&gt;Go check out pxCode by the link below&lt;br&gt;
Website: &lt;a href="https://www.pxcode.io/"&gt;https://www.pxcode.io/&lt;/a&gt;&lt;br&gt;
Facebook: &lt;a href="https://www.facebook.com/pxCode"&gt;https://www.facebook.com/pxCode&lt;/a&gt;&lt;br&gt;
Youtube: &lt;a href="https://www.youtube.com/channel/UCi-NJnon0ROgyX2xdO9y-QA"&gt;https://www.youtube.com/channel/UCi-NJnon0ROgyX2xdO9y-QA&lt;/a&gt;]&lt;/p&gt;




&lt;p&gt;Oh, you’re still here! Thanks for staying with us through this tough 2020, we look forward to continuing our relationship in the upcoming 2021. Here’s some memes that you might want to laugh at:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fndtfbJJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bkn412f3lgjflpp9olc4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fndtfbJJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bkn412f3lgjflpp9olc4.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N_fZqXSm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gh67i2naua1vzsbkov1x.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N_fZqXSm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gh67i2naua1vzsbkov1x.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6XZftbUL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/22hc0soso9rklqlgc9hn.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6XZftbUL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/22hc0soso9rklqlgc9hn.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How I Effectively Overcame Impostor Syndrome As A Software Engineer</title>
      <author>Nick Bull</author>
      <pubDate>Thu, 31 Dec 2020 09:03:53 +0000</pubDate>
      <link>https://dev.to/nickbulljs/how-i-effectively-overcame-impostor-syndrome-as-a-software-engineer-2pod</link>
      <guid>https://dev.to/nickbulljs/how-i-effectively-overcame-impostor-syndrome-as-a-software-engineer-2pod</guid>
      <description>&lt;p&gt;Feel like you a fraud?&lt;/p&gt;

&lt;p&gt;Not good enough?&lt;/p&gt;

&lt;p&gt;Not deserved your job position or salary?&lt;/p&gt;

&lt;p&gt;Worry that other people will find these out?&lt;/p&gt;

&lt;p&gt;This is called an imposter syndrome.&lt;/p&gt;

&lt;p&gt;And you are not alone.&lt;/p&gt;

&lt;p&gt;Even successful people like &lt;a href="http://journal.neilgaiman.com/2017/05/the-neil-story-with-additional-footnote.html"&gt;Neil Armstrong&lt;/a&gt; and &lt;a href="https://www.bbc.com/news/uk-46434147"&gt;Michelle Obama&lt;/a&gt; feel like imposters.&lt;/p&gt;

&lt;p&gt;I felt it too and tried to get rid of it.&lt;/p&gt;

&lt;p&gt;I've read tons of articles on how to overcome impostor syndrome, and honestly, some of the advice helped me, but 95%+ didn’t. So I just accepted the fact that I couldn't get over it completely and went on with my life.&lt;/p&gt;

&lt;p&gt;What happened next was the answer on how to overcome it, came from a place where I didn't expect to find it. From studying human behavior and neuroscience.&lt;/p&gt;

&lt;p&gt;The answer I found helped me overcome impostor syndrome in a few weeks and I finally understand the roots of it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-years-ago" class="anchor"&gt;
  &lt;/a&gt;
  6 Years Ago
&lt;/h2&gt;

&lt;p&gt;I started my career as a programmer 6 years ago. After 2 years working as a Software Engineer I was invited for an interview for the position “Frontend Team Lead.”&lt;/p&gt;

&lt;p&gt;And you know, when you read Twitter of random “real developer from the internet” who are saying that you can’t lead the team if you don’t have 5+ years of experience, you start to feel like a fraud and that you wouldn't be able to handle it.&lt;/p&gt;

&lt;p&gt;But in truth, when I accepted the offer (&lt;em&gt;and yes, felt like a fraud&lt;/em&gt;) it was...not that hard.&lt;/p&gt;

&lt;p&gt;For sure, I wasn't a great team leader unlike developers who started leading the team after 5+ years of experience, but it didn’t prevent me from doing my job well.&lt;/p&gt;

&lt;p&gt;But even the fact that everyone was satisfied with my job, I still suffer from imposter syndrome, because of public opinion. It has formed in my mind a kind of “standard” when you can be a leader.&lt;/p&gt;

&lt;p&gt;Now, 4 years later, hundreds of books, papers, and talks with different people, I understand the real reason why people suffering from imposter syndrome.&lt;/p&gt;

&lt;p&gt;I found the answer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The real reason we suffer from impostor syndrome is that we are afraid of being kicked out of the group.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“Nick, what group are you talking about?”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To answer this question, let's first go back thousands of years.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thousands-of-years-ago" class="anchor"&gt;
  &lt;/a&gt;
  Thousands of Years Ago
&lt;/h2&gt;

&lt;p&gt;The time when we lived in small groups, in caves, was a hard time to survive. People could only be sure of the future if they killed a large animal that could feed the whole tribe. It was only possible if they hunted in groups. Because you cannot kill a mammoth alone. And if you for some reason was kicked out from the group, you probably would die. By hunger or by some predatory animal.&lt;/p&gt;

&lt;p&gt;A survival program was formed:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I have more chances to survive in a group → I can’t be kicked out from the group to survive&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#now" class="anchor"&gt;
  &lt;/a&gt;
  Now
&lt;/h2&gt;

&lt;p&gt;During this time, this program has settled in our heads. Even now, when we don’t need a group to survive &lt;em&gt;(hey freelancers)&lt;/em&gt; we are still guided by this survival program.&lt;/p&gt;

&lt;p&gt;Ancient tribes became our coworkers, family, friends, and any other group we belong to. And that feeling of being kicked out of one causes a sense of fear in our bodies.&lt;/p&gt;

&lt;p&gt;Here is an example of how this basic survival program connected to imposter syndrome:&lt;/p&gt;

&lt;p&gt;For example, when** you think** that all your colleagues know technology X and you know nothing about it, you feel the fear of being caught that you don't know it. &lt;strong&gt;You think&lt;/strong&gt; that when you get caught, you will be labeled as an impostor. And an impostor cannot be part of the group, so they will kick you out of it (you will be fired or won't get a bonus at the end of the month, for example)&lt;/p&gt;

&lt;p&gt;This is how a basic survival program creates fear in your body. And imposter syndrome revolves around this program.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“Okay, so how to overcome it?”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You may have noticed that I highlighted the words "&lt;strong&gt;you think&lt;/strong&gt;" above. This means that only you think that not knowing something is the same as being an impostor and being kicked out of the group.&lt;/p&gt;

&lt;p&gt;The impostor syndrome exists only in your head.&lt;/p&gt;

&lt;p&gt;And it’s the key to get rid of it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-get-over-imposter-syndrome" class="anchor"&gt;
  &lt;/a&gt;
  How to Get Over Imposter Syndrome
&lt;/h2&gt;

&lt;p&gt;You should reprogram yourself.&lt;/p&gt;

&lt;p&gt;I don’t know how much you on this Earth, but you probably noticed that our life is not linear.&lt;/p&gt;

&lt;p&gt;You could have bought 1,000 bitcoins in 2013 just for the fun, after reading about them on Reddit, and drink pina coladas on a beach in Mexico now, and not work the rest of your life.&lt;/p&gt;

&lt;p&gt;You can join a startup as one of the first developers, negotiate to get shares as part of your salary, and 5 years later, when the startup comes to IPO, you're a multimillionaire.&lt;/p&gt;

&lt;p&gt;You can work on a side project in the evenings, release it to the public, it can gain traction because some public feature is published about it on Twitter, and the next day you get an email from Facebook that they want to acquire you.&lt;/p&gt;

&lt;p&gt;Examples are endless.&lt;/p&gt;

&lt;p&gt;That is why life is not linear and not working like:&lt;/p&gt;

&lt;p&gt;You work X time you get X in return. I work 2X time I get 2X in return.&lt;/p&gt;

&lt;p&gt;You can get 1000X in return for working X time and I can get 0.5X in return for working 2X time.&lt;/p&gt;

&lt;p&gt;You can hate it, but that is how it works.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Life is not linear.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The same principle of non-linearity applies to software engineering jobs.&lt;/p&gt;

&lt;p&gt;You can become a Junior, Middle, Senior, Lead, Architect, Principal, CTO, name any position here, at any age and with any amount of skills. How effective it will be to become a CTO in 18 years is another question, but you absolutely can.&lt;/p&gt;

&lt;p&gt;Other people may be angry about it and will hate you, just because they got the same position with 3X skills and 5X experience of what you have.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But if you handle it right, if you look at this situation from the perspective that life is not linear, that fear is created by your basic survival program, then the imposter syndrome disappears.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Remember, the basic survival program will constantly create fear and get in the way, but everything is in your head and you can control it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-the-end" class="anchor"&gt;
  &lt;/a&gt;
  In the end...
&lt;/h2&gt;

&lt;p&gt;If you like this article, share it with your friends and &lt;a href="https://twitter.com/nickbulljs"&gt;follow me on Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Have a great one!&lt;/p&gt;

&lt;p&gt;– Nick Bull&lt;/p&gt;

&lt;p&gt;And also &lt;em&gt;before I forget,&lt;/em&gt; every week I send out a "3–2–1" newsletter with 3 tech news, 2 articles, and 1 piece of advice for you.&lt;/p&gt;

&lt;p&gt;🔥 &lt;a href="https://nickbulljs.com/"&gt;Get the latest Frontend news here.&lt;/a&gt; 🔥&lt;/p&gt;

</description>
      <category>programming</category>
      <category>productivity</category>
      <category>javascript</category>
      <category>python</category>
    </item>
  </channel>
</rss>
