<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How do you wrap your head around observability?</title>
      <author>Ben Halpern</author>
      <pubDate>Thu, 18 Feb 2021 22:01:31 +0000</pubDate>
      <link>https://dev.to/ben/how-do-you-wrap-your-head-around-observability-4cl6</link>
      <guid>https://dev.to/ben/how-do-you-wrap-your-head-around-observability-4cl6</guid>
      <description>&lt;p&gt;We a current contest going with New Relic centered largely around observability, and it got me wanting to discuss observability in general.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/jess" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e5-xFsTb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--F06-1fU6--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/264/40d89fb9-4de0-414d-8a06-f52ddda0bc75.jpg" alt="jess image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/devteam/announcing-the-new-relic-hack-the-planet-contest-on-dev-5d" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Announcing the New Relic Hack the Planet Contest!&lt;/h2&gt;
      &lt;h3&gt;Jess Lee (she/her) ・ Jan 28 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#hacktheplanet&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#newrelic&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#meta&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#challenge&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;How do you develop a mental model around observability in software development? How do you teach new folks about observability?&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>observability</category>
      <category>devops</category>
      <category>sre</category>
    </item>
    <item>
      <title>Reviewing "TypeScript in 50 Lessons"</title>
      <author>swyx</author>
      <pubDate>Thu, 18 Feb 2021 15:48:57 +0000</pubDate>
      <link>https://dev.to/swyx/reviewing-typescript-in-50-lessons-10m4</link>
      <guid>https://dev.to/swyx/reviewing-typescript-in-50-lessons-10m4</guid>
      <description>&lt;p&gt;I have just received my copy of Stefan Baumgartner's &lt;a href="https://typescript-book.com/"&gt;TypeScript in 50 Lessons&lt;/a&gt; in the mail. It is the first book for which I have served as technical reviewer!&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n_b6mrLh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/ext_tw_video_thumb/1361712292681838593/pu/img/gGk0-8VNY7IevkVk.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--v3qj-lSt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1360406256842797056/qhvO9V6x_normal.jpg" alt="shawn swyx wang profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        shawn swyx wang
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="comment-mentioned-user" href="https://dev.to/swyx"&gt;@swyx&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      My copy of &lt;a href="https://twitter.com/ddprrt"&gt;@ddprrt&lt;/a&gt;’s TypeScript in 50 Lessons just arrived!&lt;br&gt;&lt;br&gt;can I just say &lt;a href="https://twitter.com/smashingmag"&gt;@smashingmag&lt;/a&gt; did a SMASHING job making the book match up to the content?!?&lt;br&gt;&lt;br&gt;This thing is a work of art. Belongs on every @TypeScript-er’s bookshelf.&lt;br&gt;&lt;br&gt;P.S. check out the acknowledgments 😉 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      16:22 PM - 16 Feb 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1361712610593316866" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1361712610593316866" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1361712610593316866" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;I was enormously tickled not just to see my name in the Acknowledgements, but also to learn that apparently technical reviewing is important enough to make it on to the official book credits!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---SdJUVmf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wdbkd8oc4ck9se3qiwgf.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---SdJUVmf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wdbkd8oc4ck9se3qiwgf.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(For what its worth - I got a small stipend for reviewing, and zero dollars whether or not you buy the book - but I'm writing it up anyway because I thoroughly enjoyed both the book and the process of reviewing it!)&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#another-typescript-book" class="anchor"&gt;
  &lt;/a&gt;
  Another TypeScript Book?
&lt;/h2&gt;

&lt;p&gt;In general, one might wonder why the need for another TypeScript book. &lt;a href="http://twitter.com/orta"&gt;Orta&lt;/a&gt; has led a total revamp of the docs since he joined the team, and now the official docs are much more readable and well organized than when I first started with them. &lt;/p&gt;

&lt;p&gt;Some folks might also recall that I did a well received &lt;a href="https://twitter.com/swyx/status/1135525665971695617"&gt;review of Boris Cherny's Programming TypeScript&lt;/a&gt; in 2019. I even did a book report on it at a TS NYC meetup! (unrecorded, sadly)&lt;/p&gt;

&lt;p&gt;This is something Stefan struggled with for months. When he originally pitched me on working with him, the brief was no more complicated than "write a TS book for Smashing Magazine". Fortunately, &lt;a href="https://twitter.com/indysigner"&gt;Markus Seyfferth&lt;/a&gt;'s intuition shone through here and advised Stefan to move toward a "quick lesson approach" in the style of the enormously influential &lt;a href="https://twitter.com/csssecretsbook"&gt;CSS Secrets&lt;/a&gt; (which &lt;a href="https://twitter.com/swyx/status/996094173081194498/photo/1"&gt;I have also reviewed&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The truth is that there is no one right way to approach a topic, much less teach it.&lt;/strong&gt; You can read through a dry list of rules and documentation, but it is quite another proposition to read realistic examples and explore ways to problem solve through the eyes of an expert. This is what &lt;em&gt;50 Lessons&lt;/em&gt; does for TypeScript, going from introductory (what is TypeScript really about?) to expert (generics, variadic tuples, &lt;code&gt;infer&lt;/code&gt;, and more).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://fettblog.eu/"&gt;Stefan's blog&lt;/a&gt; speaks to his expertise and absolute mastery of the subject matter. His blogpost on &lt;a href="https://fettblog.eu/low-maintenance-types-typescript/"&gt;Low Maintenance Types&lt;/a&gt;, though new, is already an instant classic, and his post on &lt;a href="https://fettblog.eu/typescript-react-why-i-dont-use-react-fc/"&gt;Why I don't use React.FC&lt;/a&gt; is often quoted in the React + TS commmunity. I can't do justice to the rest - just &lt;a href="https://fettblog.eu/articles/"&gt;check out his archive&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;What you get with the book, over the blog, is worked examples well organized for both a gentle introduction (when read from end to end) and revisiting on demand (when need arises). Check the full list of 50 lessons on &lt;a href="https://typescript-book.com/"&gt;the book's site&lt;/a&gt;. Even if you think you already know TypeScript, here's likely &lt;em&gt;something&lt;/em&gt; here that could probably know better.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learning-typescript-in-public" class="anchor"&gt;
  &lt;/a&gt;
  Learning TypeScript in Public
&lt;/h2&gt;

&lt;p&gt;One of the most unexpected outcomes of &lt;a href="https://www.swyx.io/learn-in-public/"&gt;learning in public&lt;/a&gt; for a few years is that opportunities come &lt;strong&gt;inbound&lt;/strong&gt; to you. The reason I stress the importance of &lt;strong&gt;inbound&lt;/strong&gt; opportunities is two-fold: people find you based on your interests, and you get opportunities that you would never have considered yourself suitable for.&lt;/p&gt;

&lt;p&gt;This is how I felt when Stefan first approached me in 2019:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3pVbjPZM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vnbybdj8kn8jp0lf1l39.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3pVbjPZM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vnbybdj8kn8jp0lf1l39.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At that point I had only been curating &lt;a href="https://react-typescript-cheatsheet.netlify.app/"&gt;the React TypeScript Cheatsheet&lt;/a&gt; for less than a year. I had &lt;a href="https://twitter.com/swyx/status/1107814140792524801?s=20"&gt;never&lt;/a&gt; served as a technical reviewer and almost turned it down because I didn't feel qualified. But I took up the challenge anyway. It turned out that I didn't have much to worry about - Stefan was the perfect collaborator, and came back with a full manuscript about a year later that was already very well fleshed out.&lt;/p&gt;

&lt;p&gt;Not having ever written a book before, I focused on double-checking the technical accuracy of the code samples and whether or not I could see the recommendations working in my former (React + TS Design System) team. I think it's also helpful not to know &lt;em&gt;too&lt;/em&gt; much - having a beginner's mind is something valuable since that is the target audience of the book. If a sentence requires too much context to parse, it is probably worth breaking out or restating. In terms of the &lt;a href="http://www.keypersonofinfluence.com/3-types-of-editing-and-which-is-right-for-you/"&gt;3 Types of Editing&lt;/a&gt;, I counted myself lower down (copyediting and proofreading) rather than making more sweeping changes (structural editing).&lt;/p&gt;

&lt;p&gt;I think the way that Stefan has built out his TypeScript expertise over the years is also exemplary of the #LearnInPublic ethos. He put his hometown, Linz (Austria) on the map with the quality events he runs, from &lt;a href="https://scriptconf.org/"&gt;ScriptConf&lt;/a&gt; to &lt;a href="https://tsconf.eu/"&gt;TSConf EU&lt;/a&gt;. His &lt;a href="https://fettblog.eu/articles/"&gt;blog&lt;/a&gt; and &lt;a href="https://fettblog.eu/guides/"&gt;guides&lt;/a&gt; map out years of public learning with an incredible amount of polish and thoughtfulness. I'm incredibly inspired by him and honored to work with him in some small capacity.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;P.S.: if you do check out the book, look for a little cameo by yours truly on page 182!&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>reflections</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Building a Reactive Library from Scratch</title>
      <author>Ryan Carniato</author>
      <pubDate>Thu, 18 Feb 2021 15:20:56 +0000</pubDate>
      <link>https://dev.to/ryansolid/building-a-reactive-library-from-scratch-1i0p</link>
      <guid>https://dev.to/ryansolid/building-a-reactive-library-from-scratch-1i0p</guid>
      <description>&lt;p&gt;In the previous article &lt;a href="https://dev.to/ryansolid/a-hands-on-introduction-to-fine-grained-reactivity-3ndf"&gt;A Hands-on Introduction to Fine-Grained Reactivity&lt;/a&gt; I explain the concepts behind fine-grained reactivity through example. Now let's look at building a reactive library ourselves.&lt;/p&gt;

&lt;p&gt;There is always something that seems a bit magical when you see it in action but mechanically it isn't that complicated. What makes reactivity feel so magical is once put in place it takes care of itself even under dynamic scenarios. This is the benefit of true declarative approaches as the implementation doesn't matter as long as the contract is kept. &lt;/p&gt;

&lt;p&gt;The reactive library we will build won't have all the features of something like &lt;a href="https://mobx.js.org/README.html"&gt;MobX&lt;/a&gt;, &lt;a href="https://vuejs.org/"&gt;Vue&lt;/a&gt;, or &lt;a href="https://github.com/ryansolid/solid"&gt;Solid&lt;/a&gt; but it should serve as a good example to get a feel for how this works.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#signals" class="anchor"&gt;
  &lt;/a&gt;
  Signals
&lt;/h1&gt;

&lt;p&gt;Signals are the core of our reactive system and are the right place to start. They contain a getter and setter so we might start with something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createSignal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;read&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;write&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nextValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nextValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;read&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This doesn't do much of anything just yet but we can see that we now have a simple container to hold our value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createSignal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Initial Read&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Updated Read&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Updated Read&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/createsignal-6349y"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;So what are we missing? Managing subscriptions. Signals are event emitters.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;running&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;subscriptions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;subscriptions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;running&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;running&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dependencies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subscriptions&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createSignal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;subscriptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;read&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;running&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;running&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;running&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;subscriptions&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;write&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nextValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nextValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sub&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;subscriptions&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;read&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;There is a bit to unpack here. There are two main things we are managing. At the top of the file, there is a global context stack that will be used to keep track of any running Reactions or Derivations. In addition, each Signal has its own subscription list. &lt;/p&gt;

&lt;p&gt;These 2 things serve as the whole basis of automatic dependency tracking. A Reaction or Derivation on execution pushes itself onto the context stack. It will be added to the subscriptions list of Signal read during that execution. We also add the Signal to the running context to help with cleanup that will be covered in the next section.&lt;/p&gt;

&lt;p&gt;Finally, on Signal write in addition to updating the value we execute all the subscriptions. We clone the list so that new subscriptions added in the course of this execution do not affect this run.&lt;/p&gt;

&lt;p&gt;This is our finished Signal but it is only half the equation.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#reactions-and-derivations" class="anchor"&gt;
  &lt;/a&gt;
  Reactions and Derivations
&lt;/h1&gt;

&lt;p&gt;Now that you've seen one half you might be able to guess what the other half looks like. Let's create a basic Reaction(or Effect).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;cleanup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;running&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dep&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;running&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dependencies&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;dep&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;running&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;running&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dependencies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;execute&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;cleanup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;running&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;running&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;finally&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;running&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;dependencies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;What we create here is the object that we push on to context. It has our list of dependencies (Signals) the Reaction listens to and the function expression that we track and re-run.&lt;/p&gt;

&lt;p&gt;Every cycle we unsubscribe the Reaction from all its Signals and clear the dependency list to start new. This is why we stored the backlink. This allows us to dynamically create dependencies as we run each time. Then we push the Reaction on the stack and execute the user-supplied function.&lt;/p&gt;

&lt;p&gt;These 50 lines of code might not seem like much but we can now recreate the first demo from the previous article.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1. Create Signal&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createSignal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2. Create Reaction&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The count is&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;3. Set count to 5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;4. Set count to 10&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/createeffect-t3vcb"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Adding a simple Derivation isn't much more involved and just uses mostly the same code from &lt;code&gt;createEffect&lt;/code&gt;. In a real reactive library like MobX, Vue, or Solid we would build in a push/pull mechanism and trace the graph to make sure we weren't doing extra work, but for demonstration purposes, I'm just going to use a Reaction.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you are interested in implementing the algorithm for his push/pull approach I recommend reading &lt;a href="https://medium.com/hackernoon/becoming-fully-reactive-an-in-depth-explanation-of-mobservable-55995262a254"&gt;Becoming Fully Reactive: An in-depth explanation of MobX&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createMemo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createSignal&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And with this let's recreate our conditional rendering example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1. Create&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setFirstName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createSignal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLastName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createSignal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Smith&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;showFullName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setShowFullName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createSignal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;displayName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createMemo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;showFullName&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;My name is&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2. Set showFullName: false &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;setShowFullName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;3. Change lastName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;setLastName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Legend&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;4. Set showFullName: true&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;setShowFullName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/creatememo-0xyqf"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;As you can see, because we build the dependency graph each time we don't re-execute the Derivation on &lt;code&gt;lastName&lt;/code&gt; update when we are not listening to it anymore.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;And that is the basics. Sure, our library doesn't have batching, custom disposal methods, or safeguards against infinite recursion, and is not glitch-free. But it contains all the core pieces. This is how libraries like &lt;a href="https://knockoutjs.com/"&gt;KnockoutJS&lt;/a&gt; from the early 2010s worked.&lt;/p&gt;

&lt;p&gt;I wouldn't recommend using this library for all the mentioned reasons. But at sub 60 lines of code, you have all makings of a simple reactive library. And when you consider how many behaviors you can model with it, it should make more sense to you why libraries like &lt;a href="https://svelte.dev"&gt;Svelte&lt;/a&gt; and &lt;a href="https://github.com/ryansolid/solid"&gt;Solid&lt;/a&gt; with a compiler can produce such small bundles.&lt;/p&gt;

&lt;p&gt;This is a lot of power in so little code. You could really use this to solve a variety of problems. It's only a few lines away from being a state library for your framework of choice, and only &lt;a href="https://indepth.dev/posts/1289/solidjs-reactivity-to-rendering"&gt;a few dozen more to be the framework itself&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hopefully, through this exercise, you now have a better understanding and appreciation of how auto-tracking in fine-grained reactive libraries work and we have demystified some of the magic.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>reactivity</category>
    </item>
    <item>
      <title>What **is** hoisting? 🤷🏼‍♀️</title>
      <author>JavaScript➕Coffee🚀</author>
      <pubDate>Thu, 18 Feb 2021 15:00:29 +0000</pubDate>
      <link>https://dev.to/javascriptcoff1/what-is-hoisting-2gkl</link>
      <guid>https://dev.to/javascriptcoff1/what-is-hoisting-2gkl</guid>
      <description>&lt;h3&gt;
  &lt;a href="#easy" class="anchor"&gt;
  &lt;/a&gt;
  Easy!
&lt;/h3&gt;

&lt;p&gt;Hoisting is a JavaScript thing that means that you can use a variable before you declare it...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hold-up-what" class="anchor"&gt;
  &lt;/a&gt;
  Hold up, what?
&lt;/h3&gt;

&lt;p&gt;Yeah, you're right, let me dig into this a little bit...&lt;/p&gt;

&lt;p&gt;Firstly, we need to understand the definitions of these 2 words:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;declared&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;defined&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is &lt;strong&gt;declaring&lt;/strong&gt; a variable -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var greeting;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;p&gt;This is &lt;strong&gt;defining&lt;/strong&gt; a variable -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;greeting = "Hello, how are you?"
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Secondly, let's think about &lt;em&gt;scope&lt;/em&gt;&lt;br&gt;
&lt;em&gt;I wrote a little example of what &lt;strong&gt;scope&lt;/strong&gt; is on my Twitter&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--xa0Ql9Oj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1276906175322300423/sf0aKAAy_normal.jpg" alt="JavaScript➕Coffee🚀 Faye Sipiano profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        JavaScript➕Coffee🚀 Faye Sipiano
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="comment-mentioned-user" href="https://dev.to/javascriptcoff1"&gt;@javascriptcoff1&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Scope.&lt;br&gt;&lt;br&gt;What is scope?&lt;br&gt;&lt;br&gt;Imagine that your functions are full of little people working away. Your functions are little factories. &lt;br&gt;&lt;br&gt;All the people *inside* the factory cannot be seen by ANOTHER factory (function). &lt;br&gt;&lt;br&gt;This is called 'local scope'
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      13:08 PM - 17 Feb 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1362026187262988289" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1362026187262988289" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1362026187262988289" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;&lt;em&gt;Let's run with this analogy...&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For your little people to be able to work locally, they need to have been &lt;strong&gt;declared&lt;/strong&gt;. Any people in your factory that haven't been declared can be seen by &lt;strong&gt;everyone&lt;/strong&gt; in other factories within your code - they are &lt;em&gt;global.&lt;/em&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#ok-thats-scope-can-we-talk-about-hoisting-now" class="anchor"&gt;
  &lt;/a&gt;
  Ok, that's scope. Can we talk about hoisting now?
&lt;/h4&gt;

&lt;p&gt;Actually, no. Ok kinda.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Where you put stuff matters&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let's think back to our &lt;strong&gt;declared&lt;/strong&gt; and &lt;strong&gt;defined&lt;/strong&gt; again. There are 2 different ways you can do these things:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Simultaneusly&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var greeting = "Hello world"
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In this example, we are &lt;strong&gt;declaring&lt;/strong&gt; the variable (greeting at the same time as &lt;strong&gt;defining&lt;/strong&gt; what it is going to say ("Hello World")&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#or" class="anchor"&gt;
  &lt;/a&gt;
  or
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;not.....simultaneously...&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var greeting


....


greeting = "Hello World"
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In this example, we are &lt;strong&gt;declaring&lt;/strong&gt; the variable (greeting) and then later on in the code, we are &lt;strong&gt;defining&lt;/strong&gt; what it is ("Hello World")&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-are-there-2-ways-of-defining-and-declaring-isnt-that-kinda-confusing-1-way-would-be-easier" class="anchor"&gt;
  &lt;/a&gt;
  Why are there 2 ways of defining and declaring, isn't that kinda confusing? 1 way would be easier...
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;My thoughts entirely.&lt;/em&gt;&lt;br&gt;
Personally, I prefer the first way, I think it looks nicer and is easier to read&lt;br&gt;
However, it is also nice to make all of your &lt;strong&gt;declarations&lt;/strong&gt; at the top and then you can &lt;strong&gt;define&lt;/strong&gt; them wherever you like. &lt;/p&gt;

&lt;p&gt;Anyway, moving on...&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#hoisting" class="anchor"&gt;
  &lt;/a&gt;
  Hoisting?
&lt;/h3&gt;

&lt;p&gt;Yes, yes. &lt;br&gt;
So we have looked at the different ways of declaring and defining, but what JavaScript also lets you do....is this...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;greeting = "Hello World"

...

var greeting
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, logically, you shouldn't be able to do this, because you are using the variable before you are declaring it with the &lt;strong&gt;var&lt;/strong&gt; keyword. It &lt;em&gt;should&lt;/em&gt; throw an error, but it doesn't. It will still know what &lt;strong&gt;greeting&lt;/strong&gt; is. This is because the JavaScript compiler quickly scans your code and &lt;em&gt;hoists&lt;/em&gt; all of your declarations up to the top, as if you had written it like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var greeting

greeting = "Hello World"
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It essentially &lt;em&gt;knows&lt;/em&gt; that you might have declared variables in random places (because everyone writes differently!) and wants to pull them all up to the top before it starts properly working on what you have written.&lt;/p&gt;

&lt;p&gt;I think that's pretty logical actually. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It's like quickly reading a list of names in your head to make sure you know how to pronounce them all &lt;em&gt;before&lt;/em&gt; you read them out loud and get stuck!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So, if you get an 'undefined' error on a variable that you weren't expecting, check the order that you've written everything in, and then blame hoisting (and probably start using let and const*) 🤣&lt;/p&gt;

&lt;p&gt;Also, you may have noticed that I have used &lt;em&gt;var&lt;/em&gt; as my JavaScript keyword throughout the examples. This is on purpose:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;var&lt;/code&gt; is a bit of a weird one - using it means that you might get some 'undefined' errors. &lt;code&gt;var&lt;/code&gt; doesn't stand up for itself and is pretty unsure about things.
When you use &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;const&lt;/code&gt; instead, they don't let the compiler boss them around - they know their job and they are sticking with it. &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; aren't affected by hoisting.
If you've &lt;strong&gt;defined&lt;/strong&gt; something before you've &lt;strong&gt;declared&lt;/strong&gt; it, you'll get a Reference error, and you don't need to worry about hoisting moving things around for you.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hoisting also works with function declarations:&lt;/p&gt;

&lt;p&gt;This is written in a logical order and works as expected. No hoisting involvement.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function example() {
   var a = 1;
   return a;
}



console.log(example())

//1
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;p&gt;This one is written with the &lt;code&gt;console.log&lt;/code&gt; first, but will still work as expected because of hoisting - the compiler has skim read your code and 'hoisted' (pulled) all of your variable declarations to the top!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(example())



function example() {
var a = 1;
return a;
}

//1
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The lesson here: &lt;strong&gt;stop using var, it will do you no good&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Understanding hoisting is still essential for when you have to work with older codebases (&lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; haven't always been around to save you from hoisting!)&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#shoutouts" class="anchor"&gt;
  &lt;/a&gt;
  Shoutouts:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Big shoutout to &lt;a href="https://twitter.com/pasoevi"&gt;@pasoevi&lt;/a&gt; for helping to proofread!&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Build your self-service Kubernetes Platform with Virtual Clusters 🚀- DevOps Tool of the Month (2)</title>
      <author>Techworld with Nana</author>
      <pubDate>Thu, 18 Feb 2021 14:52:08 +0000</pubDate>
      <link>https://dev.to/techworld_with_nana/build-your-self-service-kubernetes-platform-with-virtual-clusters-devops-tool-of-the-month-2-2oae</link>
      <guid>https://dev.to/techworld_with_nana/build-your-self-service-kubernetes-platform-with-virtual-clusters-devops-tool-of-the-month-2-2oae</guid>
      <description>&lt;p&gt;&lt;a href="https://www.youtube.com/playlist?list=PLy7NrYWoggjztwSskGu59O38gL5v0LjUT"&gt;DevOps tool of the month&lt;/a&gt; is a new series, where each month I will introduce one new useful DevOps tool in 2021 🙌🏼&lt;/p&gt;

&lt;p&gt;The second one in the series is: &lt;a href="https://loft.sh/"&gt;&lt;strong&gt;Loft&lt;/strong&gt;&lt;/a&gt; 🎉 - With loft, any Kubernetes cluster becomes a self-service platform for developers to create virtual clusters on-demand!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#-youtube-tt7hope6zu0-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/tt7hope6zU0"&gt;
&lt;/iframe&gt;

&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#what-problem-loft-solves" class="anchor"&gt;
  &lt;/a&gt;
  What problem Loft solves?  👀
&lt;/h2&gt;

&lt;p&gt;Let's say in your company there are 10 project teams all using Kubernetes and each team would need 3 clusters for dev, staging and production environment. &lt;/p&gt;

&lt;p&gt;As you might think, each team creating and managing their own K8s cluster is very inefficient. Especially because administration of a K8s cluster is a lot of effort and you don't want to do it 30 times in a company because you have 10 projects. In addition, it's also expensive, because you need more servers and so more resources. 🤯&lt;/p&gt;

&lt;p&gt;So a common approach of companies is to create a &lt;strong&gt;company-wide K8s cluster&lt;/strong&gt; that a dedicated team is managing. So now your company would only need to administer this one shared cluster. And they can now give developers access to this shared cluster using isolation with namespaces, so each team can deploy their applications. 👍&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;However, this comes with the following challenges&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Give Access&lt;/strong&gt; - How do you give different teams and individual developers access to this shared cluster?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Restrict Access&lt;/strong&gt; - Also, how do you make sure each team only gets access to their project resources?  You need to restrict access to each project to keep the cluster secure. Or even within the team, you may want to restrict who has access to what based on their role and tasks.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Restrict Resources&lt;/strong&gt; - How do you restrict how much cluster resources each team can use? You don't want one team using up most of the cluster resources or one developer misconfiguring something in his namespace and messing up all other cluster services.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Isolate Running Resources&lt;/strong&gt; - How do you isolate the resources and applications of each project from each other? Because obviously, you don't want the project resources to be accidentally mixed up, right?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dcumq4Xq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xxtaj1kd58j7q5gevqzj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dcumq4Xq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xxtaj1kd58j7q5gevqzj.png" alt="Challenges"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-loft-solves-it" class="anchor"&gt;
  &lt;/a&gt;
  How Loft solves it? 🤔
&lt;/h2&gt;

&lt;p&gt;And Loft helps solve exactly those challenges using a concept of virtual clusters.&lt;/p&gt;

&lt;p&gt;So what is a virtual cluster?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#virtual-clusters" class="anchor"&gt;
  &lt;/a&gt;
  Virtual Clusters
&lt;/h3&gt;

&lt;p&gt;It's simply a cluster inside a cluster.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZxsEvdya--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ldkwm5wac5b6guyas59m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZxsEvdya--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ldkwm5wac5b6guyas59m.png" alt="Kubernetes virtual clusters"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The way Loft implements virtual clusters is, when user creates a vCluster, Loft will create a new namespace and create a lightweight K8s cluster inside that namespace (K3s with Api server and controller). And this way vClusters will be &lt;strong&gt;completely isolated from each other&lt;/strong&gt;, even though they are part of the same host cluster. 😎&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#selfservice" class="anchor"&gt;
  &lt;/a&gt;
  Self-Service
&lt;/h3&gt;

&lt;p&gt;Now one developer can create a vCluster to test a new feature for example. And even if he blows up and messes up his vCluster, nothing else gets affected. ✅&lt;/p&gt;

&lt;p&gt;Or if a product manager wants to demo new features to the potential app users, they can now very easily spin up a vCluster to deploy the application and remove their vCluster when the demo is over! ✅&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0TYVGNnc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4ob29omysjkb28bj92u7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0TYVGNnc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4ob29omysjkb28bj92u7.png" alt="Developers creating vClusters"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sleep-mode-to-save-cloud-infrastructure-cost" class="anchor"&gt;
  &lt;/a&gt;
  Sleep Mode to save cloud infrastructure cost
&lt;/h3&gt;

&lt;p&gt;A very important feature of Loft is the Sleep Mode, which lets you save significantly on your infrastructure costs.&lt;/p&gt;

&lt;p&gt;In Sleep Mode, the virtual cluster will scale down all the resources, however, data and all Kubernetes components will be persisted.&lt;/p&gt;

&lt;p&gt;You can trigger the sleep mode either manually or &lt;strong&gt;configure virtual clusters to go to sleep mode automatically&lt;/strong&gt; after some period of time. With the first interaction with that virtual cluster, the cluster will become active again automatically. 👍 &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#get-started-with-loft" class="anchor"&gt;
  &lt;/a&gt;
  Get started with Loft 👩🏻‍💻
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#to-build-your-own-selfservice-kubernetes-platform" class="anchor"&gt;
  &lt;/a&gt;
  &lt;em&gt;To build your own self-service Kubernetes platform&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;Usually you already have existing Kubernetes clusters in your company (created using EKS, OpenShift, Rancher etc) and you already have cluster-wide resources, like Ingress Controller or Monitoring configured.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Download Loft CLI&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;2. Install Loft in one of the clusters&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;3. Connect clusters to it&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now Loft comes into the picture. Usually DevOps engineers will install Loft in one of the clusters and start connecting all other clusters to it, creating 1 big self-service cluster from many.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Cluster admins create users with permissions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now using loft UI, loft CLI or even kubectl, cluster admins can create users for the teams or individual developers and give them permissions to create and use virtual clusters.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GOvLPuCA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/i88s4l5u9cplcpfnzi0w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GOvLPuCA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/i88s4l5u9cplcpfnzi0w.png" alt="Isolated Kubernetes clusters"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Developers can create vClusters when needed&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now teams can start creating vClusters themselves when needed very easily:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a6m3vGBr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8je3ux8gndhwyeal5kxg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a6m3vGBr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8je3ux8gndhwyeal5kxg.png" alt="Loft UI - Create vCluster"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;As you see loft solves quite a lot of challenges for managing and using Kubernetes clusters within your company. And at the same time, loft's sleep mode and cluster sharing help you to save cloud computing cost.&lt;/p&gt;

&lt;p&gt;So check it out and let me know what you think about it! 🤓 🧐&lt;/p&gt;

&lt;p&gt;More awesome tools coming up next on this series, so stay tuned for it! 🎬 😊&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; 😍 for more content:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/groups/techworldwithnana"&gt;Private FB group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/Njuchi_"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UCdngmbVKX1Tgre699-XLlUA?sub_confirmation=1"&gt;YouTube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.instagram.com/techworld_with_nana/"&gt;Instagram&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//linkedin.com/in/nana-janashia"&gt;LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>kubernetes</category>
      <category>devops</category>
      <category>cloud</category>
      <category>productivity</category>
    </item>
    <item>
      <title>How To: Cursor Tracking Parallax</title>
      <author>Jhey Tompkins</author>
      <pubDate>Thu, 18 Feb 2021 14:51:25 +0000</pubDate>
      <link>https://dev.to/jh3y/how-to-cursor-tracking-parallax-52cf</link>
      <guid>https://dev.to/jh3y/how-to-cursor-tracking-parallax-52cf</guid>
      <description>&lt;p&gt;Ever seen those effects where elements on the screen respond to mouse movement? They're used quite often for parallax-like effects or eyes following a cursor. I use the effect on &lt;a href="https://jhey.dev"&gt;jhey.dev&lt;/a&gt; for the shades glare on the main bear head.&lt;/p&gt;

&lt;p&gt;I don't know the technical name. Let's go with "Cursor Tracking Parallax".&lt;/p&gt;

&lt;p&gt;The good news is this technique doesn't take much time to make and adds a little something extra to your designs. Remember, it's the little details.&lt;/p&gt;




&lt;p&gt;Let's make a face! We'll start with some markup.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"face"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"face__eyes"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"eye eye--left"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"eye eye--right"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"face__mouth"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And we've gone ahead and styled it up 💅&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/jh3y/embed/ExNXNjN?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Remember, you can view the compiled HTML, CSS, and JavaScript in CodePen. Use the dropdown for a source panel and press "View Compiled HTML/CSS/JavaScript".&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That face is great. But, it'd be cooler if we could give it a little life.&lt;/p&gt;

&lt;p&gt;To do this, we can use CSS variables with an event listener for "pointermove".&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pointermove&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Make those features move by updating some CSS variables.&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We want to limit the movement of those features though. We don't want them flying all over the place. We want "subtle".&lt;/p&gt;

&lt;p&gt;Let's start by updating the CSS for our eyes container. That's &lt;strong&gt;important&lt;/strong&gt;. We don't need to transition each eye. We're going to use scoped CSS variables in a &lt;code&gt;transform&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.face__eyes&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Note how we're using &lt;code&gt;calc&lt;/code&gt; with the value of &lt;code&gt;1px&lt;/code&gt;. It's not a bad habit to leave some CSS variables unitless. This gives us room to change to a different unit with ease.&lt;/p&gt;

&lt;p&gt;There's no change yet though. The &lt;code&gt;--x&lt;/code&gt; and &lt;code&gt;--y&lt;/code&gt; values will fallback to &lt;code&gt;0&lt;/code&gt;. But, you can play with this demo to see how updating the value would affect the eyes.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/jh3y/embed/QWGgGmb?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Now. How about those scripts? We need a function that maps our cursor position to some defined range and outputs a value for us.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a8BqVGKC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/jh3yy/image/upload/f_auto%2Cq_auto/v1613659704/jhey.dev/transformer_duetyf.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a8BqVGKC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/jh3yy/image/upload/f_auto%2Cq_auto/v1613659704/jhey.dev/transformer_duetyf.jpg" alt='A diagram showing "50" passing through the ranges and coming out as "750"'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To do this we can create a mapping function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mapRange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;inputLower&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;inputUpper&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;outputLower&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;outputUpper&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;INPUT_RANGE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;inputUpper&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;inputLower&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;OUTPUT_RANGE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;outputUpper&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;outputLower&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;outputLower&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(((&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;inputLower&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;INPUT_RANGE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;OUTPUT_RANGE&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Our mapping function takes an input range and an output range. Then it returns a function we can use to map one value to another.&lt;/p&gt;

&lt;p&gt;Let's run through what's happening there. We pass the function two ranges for input and output. After calculating the range, we return a function. The function does the magic.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Calculates the fractional value of an input value against the input range.&lt;/li&gt;
&lt;li&gt;Multiplies that by the output range.&lt;/li&gt;
&lt;li&gt;Add that to the lower bounds of the output range.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Consider this example with an input range of 0 to 100, an output range of 500 to 1000, and an input of 50.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(((&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;250&lt;/span&gt;
&lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;750&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We need to tie this up to our CSS variable transform and we're there! Here's how we can hook up the x translation for our eyes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;BOUNDS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;update&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;POS_X&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mapRange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;BOUNDS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;BOUNDS&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;EYES&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;--x&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;POS_X&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pointermove&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And that works!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/jh3y/embed/ExNXZKR?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;All that's left to do is hook up the other axis and features. Notice how we are declaring a "BOUNDS" that we use. For the y-axis, we follow the same procedure with &lt;code&gt;window.innerHeight&lt;/code&gt; as an input.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/jh3y/embed/jOVwyVm?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;But, what about the mouth? Well, this is where the power of scoped CSS variables comes in.&lt;/p&gt;

&lt;p&gt;Instead of setting the style on the eyes container, let's set it on the face element itself.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;FACE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.face&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;update&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;POS_X&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mapRange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;BOUNDS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;BOUNDS&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;POS_Y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mapRange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;BOUNDS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;BOUNDS&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;FACE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;--x&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;POS_X&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;FACE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;--y&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;POS_Y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Making those changes &lt;a href="https://codepen.io/jh3y/pen/rNWwjyv"&gt;won't break anything&lt;/a&gt;. That's CSS variable scope at work. The variable values will cascade down to the eyes container still. But now the mouth also has access and we can use the same transform on it. The starting &lt;code&gt;translateX&lt;/code&gt; is used to center the mouth before another translation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.face__mouth&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And now the mouth moves too!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/jh3y/embed/NWbgdgd?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;But, it doesn't look right. It moves in sync with the eyes which feels a little off. This is one of those "attention to detail" things that's worth picking up. For example, if our faces had ears and the eyes went up, where would the ears go? Down! Check it in a mirror, I won't judge you. I've done stranger things for "details" 😅&lt;/p&gt;

&lt;p&gt;How do we solve this then? Well, remember how I mentioned using &lt;code&gt;calc&lt;/code&gt; with a unitless value back near the start? That comes in handy now.&lt;/p&gt;

&lt;p&gt;We've implemented our JavaScript and CSS in a way that they have a separation of concerns. That's good! Our JavaScript is working out the cursor mapping range and passing it to our CSS. It doesn't care what we do with it there. In fact, the "BOUNDS" could be a nice round number like &lt;code&gt;100&lt;/code&gt; and we could do what we please with it on the CSS side.&lt;/p&gt;

&lt;p&gt;The individual features of the face handle their own transforms. Currently, they both use a coefficient of &lt;code&gt;1px&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.face__eyes&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.face__mouth&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;But, what if we changed the mouth to use a coefficient of &lt;code&gt;-1px&lt;/code&gt;?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.face__mouth&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="m"&gt;-1px&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="m"&gt;-1px&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now the mouth moves in the opposite direction to the eyes.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/jh3y/embed/wvoegjJ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;But, we only had to change the coefficient in our CSS. That's one of the superpowers of using scoped CSS variables but keeping them unitless. We can power a scene with one variable whilst maintaining a good separation of concerns.&lt;/p&gt;

&lt;p&gt;Make a couple of tweaks and we have a cursor tracking face using CSS variables!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/jh3y/embed/jOVwyQY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;But, you don't need to only use it on faces. You can use it for lots of things. Another "nice touch" is creating parallax-like icon backgrounds with it. The trick there is to update the &lt;code&gt;background-position&lt;/code&gt; with CSS variables.&lt;/p&gt;

&lt;p&gt;I'm using that effect in this demo. It's not the "main event". But, it's nice little extra.&lt;/p&gt;

&lt;p&gt;⚠️ This demo contains audio ⚠️&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/jh3y/embed/yLVaJML?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Here's a standalone version of an icon background to play with. The trick is to create a tile with an icon you like and then lean on &lt;code&gt;background-repeat&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/jh3y/embed/MWboJdq?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;In this demo, you can configure the coefficient. This plays on the fact that we are separating concerns and letting CSS do what it wants with the value.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thats-it" class="anchor"&gt;
  &lt;/a&gt;
  That's it!
&lt;/h2&gt;

&lt;p&gt;This is one way you can do "Cursor Tracking Parallax" with JavaScript and scoped CSS variables. I'm excited to see what you do with these techniques. What else could you make move? As always, &lt;a href="https://twitter.com/jh3yy"&gt;let me know&lt;/a&gt; what you think and see you for the next one!&lt;/p&gt;

&lt;p&gt;All the code is available in this &lt;a href="https://codepen.io/collection/npEvBv"&gt;CodePen Collection&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stay Awesome! ʕ •ᴥ•ʔ&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>css</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to create a floating label input with css-in-js and react</title>
      <author>Deola Adediran</author>
      <pubDate>Thu, 18 Feb 2021 14:31:48 +0000</pubDate>
      <link>https://dev.to/diran_adeola/how-to-create-a-floating-label-input-with-css-in-js-and-react-19gd</link>
      <guid>https://dev.to/diran_adeola/how-to-create-a-floating-label-input-with-css-in-js-and-react-19gd</guid>
      <description>&lt;p&gt;In case you are not familiar with JSS that is css-in-js. JSS is an authoring tool in css which allows you to use javascript to describe styles in a declarative, conflict-free and reusable ways, (as stated on &lt;a href="https://cssinjs.org/?v=v10.3.0"&gt;JSS website&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is Float Label?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;These are input with different behaviour from the usual or normal way we understand input. To explain more on how it works; when an input is empty, the placeholder will act normal as expected, then when filled with text, it moves to the top as shown below&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qpgYf_xe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o48jko2xfvawc03y0jvt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qpgYf_xe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o48jko2xfvawc03y0jvt.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create a new project&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let’s create a new react project (I’m using Yarn but you can also use npm)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ yarn create-react-app floating-input
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Once the project is created completely, remember to clear out unwanted files, remaining the App.js, we then create a div that contains the input and label like this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h2TLpX4n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/asswusmkobvhzwz9d7il.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h2TLpX4n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/asswusmkobvhzwz9d7il.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we need to style the above component with JSS but first we install react-jss&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ yarn add react-jss
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then we import createUseStyles from the package react-jss as shown below&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8cLVCR_o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x0jn0zb52r67191cp09v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8cLVCR_o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x0jn0zb52r67191cp09v.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then we create our useStyle function after that we can now start styling our component, feel free to style the component according to your taste.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P9g4iogW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iof3k6q1kt2nydj0cydr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P9g4iogW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iof3k6q1kt2nydj0cydr.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note how I used useStyle() inside the App function to access the selector or object key as it’s in the form of an object. Then we create our JSS syntax like this and in my case&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V5sgWjo3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1wnv94e4g9gsjrdm5yqq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V5sgWjo3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1wnv94e4g9gsjrdm5yqq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see how the css in js is accessed on the jsx, classes is use to store the returned from useStyles function then inside the className, we pick out each css that should affect the html element. Now our input looks like this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SONlr4Vl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/czv7fvm1wd4dm910wjs0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SONlr4Vl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/czv7fvm1wd4dm910wjs0.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next we’ll be adding css animation to the above input, we start with the interaction, which consists of a transition and the behaviour of position absolute and relative combined. First we add position relative to JSS floatingLabelWrap&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kWh_8zsr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4kpeyjl9bewpx3ipz84l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kWh_8zsr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4kpeyjl9bewpx3ipz84l.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then we add position absolute to our label and a transform to center the label similar to  the way placeholder works.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5g6tKyyc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3e6r15b4ys1s4owstm20.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5g6tKyyc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3e6r15b4ys1s4owstm20.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have our output of floating input as this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_MxkFQgM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r0t9ry4ch2z7ltm7onk1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_MxkFQgM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r0t9ry4ch2z7ltm7onk1.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we complete the animation with transition and to use focus-within to apply the translate effect to change the position and scale label&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G2KGwRsA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/46a53v1bi4k8gm5iuemu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G2KGwRsA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/46a53v1bi4k8gm5iuemu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we have this result but with a minor problem that needs to be fixed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ikn6saiV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xfaa96gncrrq5s4jmj3n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ikn6saiV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xfaa96gncrrq5s4jmj3n.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GpNb0ePI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ugsuwhb9l2x3zg2cl2am.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GpNb0ePI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ugsuwhb9l2x3zg2cl2am.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To fix the error as noticed above, we’ll be doing so in reactjs as follow:&lt;br&gt;
Firstly we create a state using useState hooks as shown below&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mtYHSyJf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1udii470ik5gs8fbob60.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mtYHSyJf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1udii470ik5gs8fbob60.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next we add another state to manage the text inputted &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5R2WUcaW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kkp1ngvx9dhlkk2k6xbl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5R2WUcaW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kkp1ngvx9dhlkk2k6xbl.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next we add a function handler on input onChange to toggle our JSS active which we haven’t yet written.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g4zTAtDX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3pryz8bmffdctn2uzu4w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g4zTAtDX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3pryz8bmffdctn2uzu4w.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, we add the JSS style for active &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3n7F4AkO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8eg36x5193c5u2f4tlar.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3n7F4AkO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8eg36x5193c5u2f4tlar.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have a full javascript enabled floating label input completed&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yaeg9TN9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p8ikbww861ncqhpbikjk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yaeg9TN9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p8ikbww861ncqhpbikjk.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Remember there are always a better way to achieve this and if you do have a better way, please i would love to see it. Thanks&lt;/p&gt;

&lt;p&gt;Based on &lt;a href="https://dev.to/rafacdomin/creating-floating-label-placeholder-for-input-with-reactjs-4m1f"&gt;Creating Floating Label/Placeholder for Input with ReactJS - DEV Community 👩‍💻👨‍💻&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>jss</category>
      <category>css</category>
      <category>react</category>
    </item>
    <item>
      <title>How to deploy an API to a Kubernetes Cluster with a Github Actions CI/CD Workflow</title>
      <author>Othmane Sabih</author>
      <pubDate>Thu, 18 Feb 2021 14:00:25 +0000</pubDate>
      <link>https://dev.to/othpwn/how-to-deploy-an-api-to-a-kubernetes-cluster-with-a-github-actions-ci-cd-workflow-km</link>
      <guid>https://dev.to/othpwn/how-to-deploy-an-api-to-a-kubernetes-cluster-with-a-github-actions-ci-cd-workflow-km</guid>
      <description>&lt;p&gt;With single page applications becoming the standard of web development, many of us write APIs with which they communicate to display information for the end user.&lt;/p&gt;

&lt;p&gt;One can either manually push the API code to a server, build it and serve it, or automate these steps using modern tools like Github Actions.&lt;br&gt;
Moreover, it is easier to build a Docker image of the project and deploy it to an orchestration system like Kubernetes, something that will allow the API to scale and be more resilient.&lt;/p&gt;

&lt;p&gt;In this article we will see how you can navigate all these tools to automate your deployment to a Kubernetes Cluster using Github Actions, and we will assume that your project has a &lt;strong&gt;Dockerfile&lt;/strong&gt; in the root directory that expose the API to Port 8080, here is an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM node:12

# Create app directory
WORKDIR /usr/src/app

# Install app dependencies
# A wildcard is used to ensure both package.json AND package-lock.json are copied
# where available (npm@5+)
COPY package*.json ./

RUN npm install
# If you are building your code for production
# RUN npm ci --only=production

# Bundle app source
COPY . .

EXPOSE 8080
CMD [ "node", "server.js" ]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#kubernetes-deployment-file" class="anchor"&gt;
  &lt;/a&gt;
  Kubernetes Deployment File
&lt;/h1&gt;

&lt;p&gt;For this article, let's imagine we have a nodejs API called &lt;strong&gt;tutorial-api&lt;/strong&gt;, this API needs a couple of environment variables to run, like &lt;em&gt;PORT&lt;/em&gt;, &lt;em&gt;DB_NAME&lt;/em&gt;, etc.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apiVersion: v1
kind: Service
metadata:
  name: tutorial-api
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 8080
  selector:
    app: tutorial-api
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tutorial-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tutorial-api
  template:
    metadata:
      labels:
        app: tutorial-api
    spec:
      containers:
        - name: tutorial-api
          image: &amp;lt;IMAGE&amp;gt;
          resources:
            requests:
              memory: "256Mi"
              cpu: "300m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          ports:
            - containerPort: 8080
          env:
            - name: NODE_ENV
              value: "production"
            - name: PORT
              value: "$PORT"
            - name: DB_NAME
              value: "$DB_NAME"
            - name: DB_USERNAME
              value: "$DB_USERNAME"
            - name: DB_PASSWORD
              value: "$DB_PASSWORD"
            - name: DB_HOST
              value: "$DB_HOST"
            - name: DB_PORT
              value: "$DB_PORT"
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This file should be located in the root of the project too.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#github-actions" class="anchor"&gt;
  &lt;/a&gt;
  Github Actions
&lt;/h1&gt;

&lt;p&gt;Github Actions allows you to execute a list of actions, once a GitHub event is triggered. &lt;br&gt;
For example, you may want to create a workflow for greeting a new contributor to your repository, or building a Docker image and pushing it to your favorite Docker container registry once you push code to the master branch, you can find a list of triggers here : &lt;a href="https://docs.github.com/en/free-pro-team@latest/actions/reference/events-that-trigger-workflows"&gt;Events that trigger workflows&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CI/CD happens to be one of many types of workflow that you can create on GitHub Actions, and this is what we're going to do in this section.&lt;/p&gt;

&lt;p&gt;First, create a new file called &lt;em&gt;ci.yaml&lt;/em&gt; inside &lt;strong&gt;.github/workflows&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For the purpose of this article, we will deploy the Docker container to a Kubernetes Cluster hosted on DigitalOcean, that's why you will find a reference to DigitalOcean's CLI tool &lt;em&gt;doctl&lt;/em&gt;, nonetheless, the steps shouldn't change much with other cloud providers.&lt;/p&gt;

&lt;p&gt;Here is an example of a Github Actions workflow:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;on:
  push:
    branches:
      - master
jobs:
  build:
    name: Build, push, and deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout master
        uses: actions/checkout@master

      - name: Update SHA
        run: echo $GITHUB_SHA &amp;gt; $GITHUB_WORKSPACE/_meta

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Build container image
        run: docker build -t docker_fake_repo/tutorial-api:$(echo $GITHUB_SHA | head -c7) .

      - name: Docker Login
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD

      - name: Push image to Docker Hub
        run: docker push docker_fake_repo/tutorial-api

      - name: Update deployment file
        run: TAG=$(echo $GITHUB_SHA | head -c7) &amp;amp;&amp;amp; sed -i 's|&amp;lt;IMAGE&amp;gt;|docker_fake_repo/tutorial-api:'${TAG}'|' $GITHUB_WORKSPACE/deployment.yml

      - name: Replace Environment Variables
        uses: danielr1996/envsubst-action@1.0.0
        env:
          PORT: ${{ secrets.PORT }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
        with:
          input: deployment.yml
          output: deploy.yml

      - name: Save DigitalOcean kubeconfig
        run: doctl kubernetes cluster kubeconfig save $CLUSTER_NAME
        env: 
          CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }}

      - name: Deploy to Kubernetes
        run: kubectl apply -f deploy.yml

      - name: Verify deployment
        run: kubectl rollout status deployment/geerd-drive
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let's start with the first block of this file :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;on:
  push:
    branches:
      - master
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It means that we want to execute the jobs present in this file once code is pushed to the master branch.&lt;/p&gt;

&lt;p&gt;In our case, we will run only one job, that we will call &lt;strong&gt;build, push, and deploy&lt;/strong&gt;, this job will run on ubuntu, and will execute couple of steps, each step either uses actions provided for by the community on GitHub's Marketplace, or you can run commands yourself.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Checkout master&lt;/strong&gt;: the first action checks-out your repository under $GITHUB_WORKSPACE, so our workflow can access it&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;*&lt;em&gt;Update SHA&lt;/em&gt;: We store the value of the SHA of the commit that triggered the workflow in the variable &lt;em&gt;$GITHUB_SHA&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Install doctl&lt;/strong&gt;: Optional step, because in this example we need to connect to the DigitalOcean API to execute commands on the Kubernetes Cluster&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Build container image&lt;/strong&gt;: Building the Docker image, the tag name of the image is the first 7 characters of $GITHUB_SHA&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Docker Login&lt;/strong&gt;: In this example, we will log in to Docker Hub to push our image. The secrets are created under the &lt;em&gt;settings&lt;/em&gt; tab of your repository on GitHub, you can add secrets that GitHub will make accessible to the workflow, you should store environment variables and sensitive values there.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Push image to Docker Hub&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Update deployment file&lt;/strong&gt;: Previously, in the &lt;em&gt;deployment.yml&lt;/em&gt; file, the image key &lt;code&gt;image: &amp;lt;IMAGE&amp;gt;&lt;/code&gt; had the value , we will replace this latter with the tag we just pushed to our container registry.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Replace Environment Variables&lt;/strong&gt;: If your &lt;em&gt;deployment.yml&lt;/em&gt; has environment variables that you Docker container needs, you can use this step to inject the values stored in the repository secrets, which will output a new file &lt;em&gt;deploy.yml&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Save DigitalOcean kubeconfig&lt;/strong&gt;: Choose the cluster we will deploy to.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Deploy to Kubernetes&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Verify Deployment&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now that you deployed your project, you need to add an ingress to Kubernetes, NGINX for example, then set up a let's encrypt ssl certificate using cert-manager, so that your API is securely exposed online.&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>github</category>
      <category>docker</category>
    </item>
    <item>
      <title>Put Down the Destructuring Hammer</title>
      <author>Derek N. Davis</author>
      <pubDate>Thu, 18 Feb 2021 13:57:46 +0000</pubDate>
      <link>https://dev.to/derekmt12/put-down-the-destructuring-hammer-3n7d</link>
      <guid>https://dev.to/derekmt12/put-down-the-destructuring-hammer-3n7d</guid>
      <description>&lt;p&gt;Destructuring is one of JavaScript's most handy features. Once I wrapped my head around the odd-looking syntax, I was a big fan of what it can do. I mean, what's not to love? If we want to destructure a property, we can do it.&lt;/p&gt;

&lt;p&gt;Objects? We can destructure that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Arrays? We can destructure that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setPerson&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;An array of objects in an object? We can destructure that too.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;employmentHistory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
     &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;company&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;startDate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;endDate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It even works on strings, believe it or not.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// But don't do this. Just no.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;What about if we want to default a value if there's not one? No problem.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Derek&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Davis&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;But with all that power, there's potential for problems.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#naming-clashes" class="anchor"&gt;
  &lt;/a&gt;
  Naming Clashes
&lt;/h2&gt;

&lt;p&gt;Once we go down the path of destructuring, we'll inevitably run into the next most common problem it causes: variable naming clashes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;person1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// whoops! can't do that.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;person2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;code&gt;firstName&lt;/code&gt; and &lt;code&gt;lastName&lt;/code&gt; are taken. So what do we do? Destructuring has an answer for that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;person1FirstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;person1LastName&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;person1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;person2FirstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;person2LastName&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;person2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// ... later on ...&lt;/span&gt;

&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`
    hello &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;person1FirstName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;person1LastName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
    and &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;person2FirstName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;person2LastName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!
`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We've renamed our properties to fix the error, but what have we gained? We have several hideous lines of JavaScript, and we can use &lt;code&gt;person1FirstName&lt;/code&gt; without putting a dot in it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dot-notation-to-the-rescue" class="anchor"&gt;
  &lt;/a&gt;
  Dot Notation to the Rescue
&lt;/h3&gt;

&lt;p&gt;Check this out.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// the destructuring lines are gone! &lt;/span&gt;

&lt;span class="c1"&gt;// ... later on ...&lt;/span&gt;

&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`
    hello &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;person1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;person1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
    and &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;person2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;person2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!
`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If we use dot notation, we don't have to destructure anything, we don't have the variable naming conflict, we have less code, and it's more readable!&lt;/p&gt;

&lt;p&gt;Let's look at another example.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-lure-of-shorthand-property-names" class="anchor"&gt;
  &lt;/a&gt;
  The Lure of Shorthand Property Names
&lt;/h2&gt;

&lt;p&gt;Shorthand property names are one of my favorite features in JavaScript. I love how clean the syntax looks.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// old school&lt;/span&gt;
&lt;span class="nx"&gt;setPerson&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;city&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;city&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// shorthand property names. so clean.&lt;/span&gt;
&lt;span class="nx"&gt;setPerson&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;city&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;But sometimes we can have tunnel vision when we're trying to use this feature. If what we have to destructure is deeply nested, we've only created more noise.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;demographics&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;address&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;city&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// a game of match the brackets&lt;/span&gt;

&lt;span class="nx"&gt;setPerson&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;city&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So what's the answer?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dot-notation-again" class="anchor"&gt;
  &lt;/a&gt;
  Dot Notation Again
&lt;/h3&gt;

&lt;p&gt;We've gotten rid of the destructuring and all those brackets. It's so much more readable this way.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// no destructuring&lt;/span&gt;

&lt;span class="nx"&gt;setPerson&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;city&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;demographics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;city&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;But hey, maybe you don't want to use &lt;em&gt;all&lt;/em&gt; the dots. Destructuring only the top level properties keeps things readable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// just the right amount of destructuring&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;demographics&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;setPerson&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;city&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;demographics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;city&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;What's easy to forget is that dot notation and destructuring can be used in combination for better readability. For instance, if we want to pull out the properties of &lt;code&gt;address&lt;/code&gt;, we can do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// not ideal&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;demographics&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;address&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;city&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;zip&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// so much better&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;city&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;zip&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;demographics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Destructuring is one of those features that's great in its flat form, but when it becomes nested, the readability starts to degrade quickly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#naming-ambiguity" class="anchor"&gt;
  &lt;/a&gt;
  Naming Ambiguity
&lt;/h2&gt;

&lt;p&gt;Imagine this. You're trying to understand an area of your application you're not familiar with. You're 200 lines into one of the files, and you come across a variable called &lt;code&gt;name&lt;/code&gt;. There's not a local declaration of it; it's just being used for something, and you have no idea what it is. So you go hunting and find this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;phone&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;company&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In this case, using destructuring created an overly generic variable name because it removed the context of where it came from. If it hadn't been destructured, &lt;code&gt;company.name&lt;/code&gt; would have been totally clear. No variable hunting required.&lt;/p&gt;

&lt;p&gt;When we decide to destructure something, keep it as close to where it's being used as possible, especially if the variable name is generic.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary" class="anchor"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;When destructuring causes naming clashes, it's a code smell. It might be okay, but then again, it also might be a sign you shouldn't be using destructuring.&lt;/li&gt;
&lt;li&gt;Prefer keeping destructuring as flat as possible to avoid a mess of brackets. Using dot notation and destructuring in combination can help keep things flat.&lt;/li&gt;
&lt;li&gt;Destructured objects should be as close as possible to where they are used to help readability. Overly generic names make code hard to understand.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>node</category>
      <category>react</category>
    </item>
    <item>
      <title>JavaScript, asynchronous programming and Promises</title>
      <author>Coderslang: Become a Software Engineer</author>
      <pubDate>Thu, 18 Feb 2021 13:54:36 +0000</pubDate>
      <link>https://dev.to/coderslang/javascript-asynchronous-programming-and-promises-1epl</link>
      <guid>https://dev.to/coderslang/javascript-asynchronous-programming-and-promises-1epl</guid>
      <description>&lt;p&gt;In this tutorial, you’ll learn what are the promises in JS, which states can the JavaScript Promise be in, and how to handle asynchronous errors in JS promises.&lt;/p&gt;

&lt;p&gt;Until now, you have only worked with regular values. You've created a variable or constant, saved something there and it was immediately available for use. For example, you could have printed it to the console.&lt;/p&gt;

&lt;p&gt;But what if the value does not appear immediately, but some time has to pass first? We often get data from a database or an external server. These operations take time and there are two ways to work with them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We can try to block the execution of the program until we receive the data&lt;/li&gt;
&lt;li&gt;Or we can continue the execution, and deal with the data later when it appears&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is not to say that one method is definitely better than the other. Both suit different needs as we need different behavior in different situations.&lt;/p&gt;

&lt;p&gt;If the data you are waiting for is critical to moving forward, then you need to block the execution and you can't get around it. And if you can postpone the processing, then, of course, it's not worth wasting time, because you can do something else.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-javascript-promise-exactly" class="anchor"&gt;
  &lt;/a&gt;
  What is a JavaScript Promise exactly?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Promise&lt;/strong&gt; is a special type of object that helps you work with asynchronous operations.&lt;/p&gt;

&lt;p&gt;Many functions will return a promise to you in situations where the value cannot be retrieved immediately.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getUserCount&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userCount&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Promise {&amp;lt;pending&amp;gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In this case, &lt;code&gt;getUserCount&lt;/code&gt; is the function that returns a &lt;code&gt;Promise&lt;/code&gt;. If we try to immediately display the value of the &lt;code&gt;userCount&lt;/code&gt; variable, we get something like &lt;code&gt;Promise {&amp;lt;pending&amp;gt;}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This will happen because there is no data yet and we need to wait for it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#promise-states-in-javascript" class="anchor"&gt;
  &lt;/a&gt;
  Promise states in JavaScript
&lt;/h2&gt;

&lt;p&gt;A promise can be in several states:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Pending&lt;/strong&gt; - response is not ready yet. Please wait.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Fulfilled&lt;/strong&gt; - response is ready. Success. Take the data.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Rejected&lt;/strong&gt; - an error occurred. Handle it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With the &lt;strong&gt;pending&lt;/strong&gt; state, we can't do anything useful, just wait. In other cases, we can add handler functions that will be called when a promise enters the fulfilled or rejected state.&lt;/p&gt;

&lt;p&gt;To handle the successful receipt of data, we need a &lt;code&gt;then&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getUserCount&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleSuccess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Promise was fulfilled. Result is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;userCount&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;handleSuccess&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And for error handling - &lt;code&gt;catch&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleReject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Promise was rejected. The error is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;userCount&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;handleReject&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Please note that the &lt;code&gt;getUserCount&lt;/code&gt; function returns a promise, so we cannot directly use &lt;code&gt;userCount&lt;/code&gt;. To do something useful with the data when it appears, we need to add handlers to the &lt;code&gt;then&lt;/code&gt; and &lt;code&gt;catch&lt;/code&gt; functions that will be called in case of success or error.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;then&lt;/code&gt; and &lt;code&gt;catch&lt;/code&gt; functions can be called sequentially. In this case, we will take care of both success and failure.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getUserCount&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleSuccess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Promise was fulfilled. Result is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleReject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Promise was rejected. The error is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;userCount&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;handleSuccess&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;handleReject&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#error-processing-in-js-promises" class="anchor"&gt;
  &lt;/a&gt;
  Error processing in JS promises
&lt;/h2&gt;

&lt;p&gt;Suppose we have a &lt;code&gt;getUserData(userId)&lt;/code&gt; function that returns information about the user or throws an error if there are some problems with the &lt;code&gt;userId&lt;/code&gt; parameter.&lt;/p&gt;

&lt;p&gt;Previously, we added the regular &lt;code&gt;try/catch&lt;/code&gt; and handled the error in the catch block.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getUserData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;handleError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;But errors that occur in asynchronous code inside promises cannot be caught with regular &lt;code&gt;try/catch&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's try to replace the synchronous function &lt;code&gt;getUserData(userId)&lt;/code&gt;, which immediately returns the result, with the asynchronous one &lt;code&gt;fetchUserData(userId)&lt;/code&gt;, which returns a promise.&lt;/p&gt;

&lt;p&gt;We want to keep the behavior the same - display the result if successful, or handle an error if it occurs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;fetchUserData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;handleError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;But we won't succeed. There are no issues with the synchronous code so the execution will continue. But when an unhandled error occurs in asynchronous code, we will receive an &lt;code&gt;UnhandledPromiseRejection&lt;/code&gt; and our program will end.&lt;/p&gt;

&lt;p&gt;To better understand the order of execution of the program, let's add a &lt;code&gt;finally&lt;/code&gt; block. It will always run (as expected), but will it run before or after &lt;code&gt;UnhandledPromiseRejection&lt;/code&gt;?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;fetchUserData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;handleError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;finally&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;finally&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let's try this one step by step:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;In the &lt;code&gt;try&lt;/code&gt; block we call the &lt;code&gt;fetchUserData&lt;/code&gt; function, which returns a &lt;code&gt;Promise&lt;/code&gt; in the &lt;code&gt;pending&lt;/code&gt; state.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;catch&lt;/code&gt; block is ignored because there were no errors in the &lt;code&gt;try&lt;/code&gt; block. Asynchronous execution hasn't run yet!&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;finally&lt;/code&gt; line is displayed on the screen.&lt;/li&gt;
&lt;li&gt;An error occurs in the asynchronous code and we see the error message in the console - &lt;code&gt;UnhandledPromiseRejectionWarning&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To avoid unhandled rejections in Promises, you should always handle them in &lt;code&gt;.catch()&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fetchUserData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;handleError&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The code became shorter, cleaner and we got rid of unexpected errors that were breaking our code.&lt;/p&gt;

&lt;p&gt;Here's an interesting coding interview question on &lt;a href="https://learn.coderslang.com/js-test-27-handling-errors-in-promise-chains/"&gt;handling errors in javascript promise chains&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Learning Go Basics with 30 Days of (Explained) Code - Day 0: Hello, World</title>
      <author>Caio Marte</author>
      <pubDate>Thu, 18 Feb 2021 13:37:58 +0000</pubDate>
      <link>https://dev.to/caiomarte/learning-go-basics-with-30-days-of-explained-code-day-0-hello-world-1o57</link>
      <guid>https://dev.to/caiomarte/learning-go-basics-with-30-days-of-explained-code-day-0-hello-world-1o57</guid>
      <description>&lt;h3&gt;
  &lt;a href="#hello-refactored-chimps" class="anchor"&gt;
  &lt;/a&gt;
  Hello, refactored chimps!
&lt;/h3&gt;

&lt;p&gt;This is &lt;code&gt;post[0]&lt;/code&gt; of a series of &lt;code&gt;[30]Post&lt;/code&gt; destined to new Gophers and sympathizers.&lt;/p&gt;

&lt;p&gt;In this series, we are going to explore fundamental Go concepts while solving basic algorithm problems. By the end, you should have a general view of Go and be able to understand and write some Go code on your own.&lt;/p&gt;

&lt;p&gt;If you’re looking for a problem-based approach for beginners, this is the place for you!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#day-0-hello-world" class="anchor"&gt;
  &lt;/a&gt;
  Day 0: Hello, World
&lt;/h3&gt;

&lt;p&gt;Today we are going to code the genesis of all algorithms ever written in any language: the classic “Hello, World”.&lt;/p&gt;

&lt;p&gt;But don’t mistake yourself! For a simple algorithm as such, we are going to cover:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go packages and code structure&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;fmt&lt;/code&gt;, &lt;code&gt;os&lt;/code&gt;, and &lt;code&gt;bufio&lt;/code&gt; packages from Go's standard library&lt;/li&gt;
&lt;li&gt;the 4 declarative forms that Go allows&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#what-is-the-problem" class="anchor"&gt;
  &lt;/a&gt;
  What is the problem?
&lt;/h3&gt;

&lt;p&gt;The problem consists of outputting to the console both the statement &lt;code&gt;Hello, World.&lt;/code&gt; and an input read from &lt;code&gt;Stdin&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To complete this challenge, we need to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Save a line of input from &lt;code&gt;Stdin&lt;/code&gt; to a variable&lt;/li&gt;
&lt;li&gt;Print &lt;code&gt;Hello, World.&lt;/code&gt; to the console on a single line&lt;/li&gt;
&lt;li&gt;Print the value from step 1 on a second line&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p_PvJih5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/caiomarte/go/main/images/30doec/d0/d0-challenge.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p_PvJih5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/caiomarte/go/main/images/30doec/d0/d0-challenge.png" alt="day 0 problem"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the full problem description, go to &lt;a href="https://www.hackerrank.com/challenges/30-hello-world/problem"&gt;HackerRank’s Day 0: Hello, World&lt;/a&gt;.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#what-do-we-need-to-know-about-go" class="anchor"&gt;
  &lt;/a&gt;
  What do we need to know about Go?
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#go-packages-and-code-structure" class="anchor"&gt;
  &lt;/a&gt;
  Go packages and code structure
&lt;/h4&gt;

&lt;p&gt;Go deals with source code using packages. Therefore, every source code file must start with a package declaration. We declare packages by typing the keyword &lt;code&gt;package&lt;/code&gt; followed by the package’s name. The package’s name must be the same as that of the file. So if we have a &lt;code&gt;package myPackage&lt;/code&gt;, we need to store it inside of the &lt;code&gt;myPackage.go&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4T0533eI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/caiomarte/go/main/images/30doec/d0/d0-t0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4T0533eI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/caiomarte/go/main/images/30doec/d0/d0-t0.png" alt="sample package declaration"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For every Go application, &lt;code&gt;main&lt;/code&gt; is the pre-defined executable package. Go uses this package to generate an executable that runs our program. The package must be inside of the &lt;code&gt;main.go&lt;/code&gt; file, and it must present a function called &lt;code&gt;main&lt;/code&gt;, which we declare by typing &lt;code&gt;func main()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W2F9oytR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/caiomarte/go/main/images/30doec/d0/d0-t1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W2F9oytR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/caiomarte/go/main/images/30doec/d0/d0-t1.png" alt="package main"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Packages can also be exported and imported to enable code reuse. That means you can write multiple packages and reuse those somewhere else simply by importing them. To import packages, we use the keyword &lt;code&gt;import&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There are two ways of importing packages: single package or multi-package import. To import a single package, we type &lt;code&gt;import&lt;/code&gt; and the package’s name between double quotes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_oMU7pUx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/caiomarte/go/main/images/30doec/d0/d0-t2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_oMU7pUx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/caiomarte/go/main/images/30doec/d0/d0-t2.png" alt="single import"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To import multiple packages at once, we declare the packages inside of parentheses, separated by line breaks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CqZyMuWN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/caiomarte/go/main/images/30doec/d0/d0-t3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CqZyMuWN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/caiomarte/go/main/images/30doec/d0/d0-t3.png" alt="multiple import"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The package statement, package import, and function declaration form the basic code structure for all Go programs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VfkYpNXS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/caiomarte/go/main/images/30doec/d0/d0-t4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VfkYpNXS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/caiomarte/go/main/images/30doec/d0/d0-t4.png" alt="program structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-raw-fmt-endraw-raw-os-endraw-and-raw-bufio-endraw-packages-from-gos-standard-library" class="anchor"&gt;
  &lt;/a&gt;
  The &lt;code&gt;fmt&lt;/code&gt;, &lt;code&gt;os&lt;/code&gt;, and &lt;code&gt;bufio&lt;/code&gt; packages from Go's standard library
&lt;/h4&gt;

&lt;p&gt;Go has a list of supported standard and community &lt;a href="https://golang.org/pkg/"&gt;Packages&lt;/a&gt;. We are going to use three packages from Go’s standard library: &lt;code&gt;fmt&lt;/code&gt;, &lt;code&gt;os&lt;/code&gt;, and &lt;code&gt;bufio&lt;/code&gt;.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#-raw-fmt-endraw-and-formatting-output" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;fmt&lt;/code&gt; and formatting output
&lt;/h5&gt;

&lt;p&gt;The &lt;a href="https://golang.org/pkg/fmt/"&gt;&lt;code&gt;fmt&lt;/code&gt;&lt;/a&gt; package provides functions to format input and output. After importing &lt;code&gt;fmt&lt;/code&gt; into our package, we access these functions by typing &lt;code&gt;fmt.FunctionName()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Print&lt;/code&gt;, &lt;code&gt;Printf&lt;/code&gt;, and &lt;code&gt;Println&lt;/code&gt; are 3 of the functions that can be used to handle output. Here, we are going to focus only on the formatting differences.&lt;/p&gt;

&lt;p&gt;When using &lt;a href="https://golang.org/pkg/fmt/#Print"&gt;&lt;code&gt;fmt.Print()&lt;/code&gt;&lt;/a&gt; to output a &lt;code&gt;string&lt;/code&gt;, we need to manually format the output by adding the necessary space and line breaks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_J7u5iws--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/caiomarte/go/main/images/30doec/d0/d0-t5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_J7u5iws--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/caiomarte/go/main/images/30doec/d0/d0-t5.png" alt="print example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://golang.org/pkg/fmt/#Printf"&gt;&lt;code&gt;fmt.Printf()&lt;/code&gt;&lt;/a&gt; allows us to write the same &lt;code&gt;string&lt;/code&gt; as a straight line by referencing the variables with format specifiers. Format specifiers are operators that identify the type of data stored in a variable. They are represented by a percentage operator and a character that indicates data type. For example, &lt;code&gt;%d&lt;/code&gt; is used for &lt;code&gt;integer&lt;/code&gt; and &lt;code&gt;%s&lt;/code&gt; for &lt;code&gt;string&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ME5MjTfj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/caiomarte/go/main/images/30doec/d0/d0-t6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ME5MjTfj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/caiomarte/go/main/images/30doec/d0/d0-t6.png" alt="printf example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, &lt;a href="https://golang.org/pkg/fmt/#Println"&gt;&lt;code&gt;fmt.Println()&lt;/code&gt;&lt;/a&gt; facilitates formatting by adding spaces between operands and a line break by the end of the output. Therefore, we could simply write:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---TjEKrwD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/caiomarte/go/main/images/30doec/d0/d0-t7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---TjEKrwD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/caiomarte/go/main/images/30doec/d0/d0-t7.png" alt="println example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#-raw-os-endraw-raw-bufio-endraw-and-reading-standard-input" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;os&lt;/code&gt;, &lt;code&gt;bufio&lt;/code&gt;, and reading standard input
&lt;/h5&gt;

&lt;p&gt;The &lt;a href="https://golang.org/pkg/os/"&gt;&lt;code&gt;os&lt;/code&gt;&lt;/a&gt; package provides an uniform interface to work with operating system functionality across all operating system platforms. &lt;code&gt;os.Stdin&lt;/code&gt; is the functionality we will use to point to &lt;code&gt;Stdin&lt;/code&gt; when reading input with the &lt;code&gt;bufio&lt;/code&gt; package.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://golang.org/pkg/bufio/"&gt;&lt;code&gt;bufio&lt;/code&gt;&lt;/a&gt; package implements buffered input and output functionality. It allows for different ways of reading input, but we will focus on &lt;code&gt;type Scanner&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://golang.org/pkg/bufio/#Scanner"&gt;&lt;code&gt;Scanner&lt;/code&gt;&lt;/a&gt; provides an interface for reading newline-delimited lines of text. To work with it, we provision a &lt;code&gt;Scanner&lt;/code&gt; object, pointing it to &lt;code&gt;Stdin&lt;/code&gt; by using &lt;code&gt;os.Stdin&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dEPYZipS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/caiomarte/go/main/images/30doec/d0/d0-t8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dEPYZipS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/caiomarte/go/main/images/30doec/d0/d0-t8.png" alt="scanner example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://golang.org/pkg/bufio/#Scanner.Scan"&gt;&lt;code&gt;Scanner.Scan()&lt;/code&gt;&lt;/a&gt; function responds with &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; to indicate if there is any input available. After finding an input, &lt;a href="https://golang.org/pkg/bufio/#Scanner.Text"&gt;&lt;code&gt;Scanner.Text()&lt;/code&gt;&lt;/a&gt; returns the full input as a &lt;code&gt;string&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8Z_dRCaY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/caiomarte/go/main/images/30doec/d0/d0-t9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8Z_dRCaY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/caiomarte/go/main/images/30doec/d0/d0-t9.png" alt="scanning input example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-4-declarative-forms-that-go-allows" class="anchor"&gt;
  &lt;/a&gt;
  The 4 declarative forms that Go allows
&lt;/h4&gt;

&lt;p&gt;Go supports 4 ways of declaring variables. We already saw 3 of them above, but we are going to cover them all in more detail.&lt;/p&gt;

&lt;p&gt;The standard syntax for declaring a variable is the keyword &lt;code&gt;var&lt;/code&gt; followed by the variable’s name and its type. We can assign a value to the variable anywhere inside the block scope.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2jQd78YI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/caiomarte/go/main/images/30doec/d0/d0-t10.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2jQd78YI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/caiomarte/go/main/images/30doec/d0/d0-t10.png" alt="standard variable declaration"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If our variable has a well-known initial value, we can initialize it along with its declaration. In this case, we type the assignment &lt;code&gt;=&lt;/code&gt; operator followed by its initial value.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JeLIyjHv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/caiomarte/go/main/images/30doec/d0/d0-t11.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JeLIyjHv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/caiomarte/go/main/images/30doec/d0/d0-t11.png" alt="standard variable initialization"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One thing you may have noticed by now is that Go is a strongly, statically typed language. Therefore, we must always indicate the type of the data which will be stored in our variable.&lt;/p&gt;

&lt;p&gt;But the Go compiler is capable of inferring data type based on the data that is stored. That means, if we assign a &lt;code&gt;string&lt;/code&gt; to a variable, it will automatically declare that variable as being of &lt;code&gt;string&lt;/code&gt; type. This way, we can omit the data type from the previous declaration.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VxE4t7wE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/caiomarte/go/main/images/30doec/d0/d0-t12.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VxE4t7wE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/caiomarte/go/main/images/30doec/d0/d0-t12.png" alt="inferred variable declaration"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There’s an even shorter way of declaring variables in Go: the short declaration. It doesn’t require the &lt;code&gt;var&lt;/code&gt; keyword nor the data type. We only need to write the variable’s name followed by the colon equals &lt;code&gt;:=&lt;/code&gt; operator and the initial value.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wPrMkzm3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/caiomarte/go/main/images/30doec/d0/d0-t13.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wPrMkzm3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/caiomarte/go/main/images/30doec/d0/d0-t13.png" alt="short declaration"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All the previous declarative forms support multi-variable declarations and assignments, separated by commas.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gATLvzzl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/caiomarte/go/main/images/30doec/d0/d0-t14.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gATLvzzl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/caiomarte/go/main/images/30doec/d0/d0-t14.png" alt="multiple variable declaration and assignment"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, I believe we know everything we need in order to solve the challenge. Time to get our hands dirty.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#stepbystep-coding-explained" class="anchor"&gt;
  &lt;/a&gt;
  Step-by-step coding explained
&lt;/h3&gt;

&lt;p&gt;To start any Go program, we need to declare the package we are working on.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yR3xce8T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/caiomarte/go/main/images/30doec/d0/d0-s0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yR3xce8T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/caiomarte/go/main/images/30doec/d0/d0-s0.png" alt="package main"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#save-a-line-of-input-from-raw-stdin-endraw-to-a-variable" class="anchor"&gt;
  &lt;/a&gt;
  Save a line of input from &lt;code&gt;Stdin&lt;/code&gt; to a variable
&lt;/h4&gt;

&lt;p&gt;The first step towards the solution is attributing the input from &lt;code&gt;Stdin&lt;/code&gt; to a variable. To work with &lt;code&gt;Stdin&lt;/code&gt;, we will need &lt;code&gt;os&lt;/code&gt; functionality. We will also use &lt;code&gt;bufio&lt;/code&gt; to &lt;code&gt;Scan&lt;/code&gt; the input. Therefore, we must import these two packages. For that, we are going to use the multi-package import syntax.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YaONvcLY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/caiomarte/go/raw/main/images/30doec/d0/d0-s1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YaONvcLY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/caiomarte/go/raw/main/images/30doec/d0/d0-s1.png" alt="import bufio os"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s start our code inside of the &lt;code&gt;main&lt;/code&gt; function by instantiating a &lt;code&gt;Scanner&lt;/code&gt; object. In order to read input, we need to point &lt;code&gt;Scanner&lt;/code&gt; to &lt;code&gt;Stdin&lt;/code&gt; while instantiating it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FoUOFOZp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/caiomarte/go/main/images/30doec/d0/d0-s2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FoUOFOZp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/caiomarte/go/main/images/30doec/d0/d0-s2.png" alt="new scanner object"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We also need a variable to store the &lt;code&gt;string&lt;/code&gt; being passed as input. In this case, since there is no initial value, we are going to use the standard syntax.&lt;/p&gt;

&lt;p&gt;One new thing to mention is, Go’s name convention tells us to use the first letters of the words that best represent the data or role of our variables and functions. Despite using descriptive &lt;code&gt;camelCase&lt;/code&gt; during explanation, we’ll always follow this convention when writing actual code. Thus, we’ll call our &lt;strong&gt;i&lt;/strong&gt;nput &lt;strong&gt;s&lt;/strong&gt;tring &lt;code&gt;is&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vBDz_RX3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/caiomarte/go/main/images/30doec/d0/d0-s3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vBDz_RX3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/caiomarte/go/main/images/30doec/d0/d0-s3.png" alt="var is string"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we can use the &lt;code&gt;Scan()&lt;/code&gt; function to check for input and the &lt;code&gt;Text()&lt;/code&gt; function to store the input in our &lt;code&gt;is&lt;/code&gt; variable.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zFAq-I27--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/caiomarte/go/main/images/30doec/d0/d0-s4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zFAq-I27--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/caiomarte/go/main/images/30doec/d0/d0-s4.png" alt="reading input"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#print-raw-hello-world-endraw-to-the-console-on-a-single-line" class="anchor"&gt;
  &lt;/a&gt;
  Print &lt;code&gt;Hello, World.&lt;/code&gt; to the console on a single line
&lt;/h4&gt;

&lt;p&gt;To print something to the console, we need the &lt;code&gt;fmt&lt;/code&gt; package. So let’s add it to our &lt;code&gt;import&lt;/code&gt; statement.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0uCyfYpR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/caiomarte/go/main/images/30doec/d0/d0-s5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0uCyfYpR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/caiomarte/go/main/images/30doec/d0/d0-s5.png" alt="import fmt"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After importing &lt;code&gt;fmt&lt;/code&gt;, we are ready to use any of the 3 output functions we saw to print out the &lt;code&gt;Hello, World.&lt;/code&gt; statement. I’m using &lt;code&gt;Println()&lt;/code&gt;, but feel free to try another one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6c5Rn75Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/caiomarte/go/main/images/30doec/d0/d0-s6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6c5Rn75Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/caiomarte/go/main/images/30doec/d0/d0-s6.png" alt="println hello world"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#print-the-value-from-step-1-on-a-second-line" class="anchor"&gt;
  &lt;/a&gt;
  Print the value from step 1 on a second line
&lt;/h4&gt;

&lt;p&gt;The last step is to print out the value we read from &lt;code&gt;Stdin&lt;/code&gt;. This value is stored in our &lt;code&gt;is&lt;/code&gt; variable. Since it's the last output, I’m using &lt;code&gt;Print()&lt;/code&gt; this time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BCyseIFd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/caiomarte/go/main/images/30doec/d0/d0-s7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BCyseIFd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/caiomarte/go/main/images/30doec/d0/d0-s7.png" alt="println is"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That completes the challenge, the full code as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zP9QNNnU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/caiomarte/go/main/images/30doec/d0/d0-fs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zP9QNNnU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/caiomarte/go/main/images/30doec/d0/d0-fs.png" alt="full solution"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#key-takeaways" class="anchor"&gt;
  &lt;/a&gt;
  Key Takeaways
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Every Go program starts with a package declaration.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;main&lt;/code&gt; is the one and only executable package in a Go program.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can reuse code by exporting and importing packages.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Go supports several standard and community packages.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can use the &lt;code&gt;fmt&lt;/code&gt; package to format input and output, including the &lt;code&gt;fmt.Print()&lt;/code&gt;, &lt;code&gt;fmt.Printf()&lt;/code&gt;, and &lt;code&gt;fmt.Println()&lt;/code&gt; output functions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can use the &lt;code&gt;bufio&lt;/code&gt; and &lt;code&gt;os&lt;/code&gt; packages to read input by instantiating a &lt;code&gt;Scanner&lt;/code&gt; object pointed to &lt;code&gt;Stdin&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When using &lt;code&gt;Scanner&lt;/code&gt;, &lt;code&gt;Scan()&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt; when there’s input and &lt;code&gt;Text()&lt;/code&gt; returns the input as a &lt;code&gt;string&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Go allows 4 ways to declare variables. All these ways support both single and multiple declaration and attribution.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Go’s convention is to name variables or functions by using the first letters of each word that best describes their value or role.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#full-commented-solution" class="anchor"&gt;
  &lt;/a&gt;
  Full commented solution
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NQfaxO9W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/caiomarte/go/main/images/30doec/d0/d0-cs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NQfaxO9W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/caiomarte/go/main/images/30doec/d0/d0-cs.png" alt="full commented solution"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#resources" class="anchor"&gt;
  &lt;/a&gt;
  Resources
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Source code: &lt;a href="https://github.com/caiomarte/go/blob/main/tutorials/30doec/d0/main.go"&gt;main.go&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Cheat sheet: &lt;a href="https://github.com/caiomarte/go/tree/main/resources/30doec/d0-c.pdf"&gt;d0-c.pdf&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GitHub repo: &lt;a href="https://github.com/caiomarte/go/tree/main/tutorials/30doec/d0"&gt;d0&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;I’ll answer any follow-up questions in the comments below.&lt;/p&gt;

&lt;p&gt;And I hope to see you in the next post.&lt;/p&gt;

&lt;p&gt;For now, so long, and thanks for all the gophers.&lt;/p&gt;




&lt;p&gt;Please, let me hear from you. Your feedback is essential.&lt;/p&gt;

</description>
      <category>go</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>5 Tools To Improve Your Website</title>
      <author>BigsonDev</author>
      <pubDate>Thu, 18 Feb 2021 10:01:37 +0000</pubDate>
      <link>https://dev.to/bigsondev/5-tools-to-improve-your-website-3jpf</link>
      <guid>https://dev.to/bigsondev/5-tools-to-improve-your-website-3jpf</guid>
      <description>&lt;p&gt;Originally posted on &lt;a href="https://bigsondev.com/blog/tools-to-increase-your-conversion-rate-and-website-quality/"&gt;bigsondev.com&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Nothing hurts more than spending endless hours on coding a website, rolling it out to production, and having close to zero traffic. All our hopes are gone in no time.&lt;/em&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;What if there was a way to track users on the website, serve them different versions of one feature, test critical flows, have a reporting system to quickly resolve bugs, or even watch videos when some functionality crashes?&lt;/p&gt;

&lt;p&gt;Perhaps, the killer feature in your head is not used at all - time to learn what users are actually doing on your website. Do they quit too early as it’s way too slow or they’re overloaded with all the possibilities?&lt;/p&gt;

&lt;p&gt;Let’s find out how you can possibly improve all of the above.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#1-lighthouse-audit" class="anchor"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://developers.google.com/web/tools/lighthouse"&gt;Lighthouse Audit&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;These days, users won’t wait too long for loading a website, you have around &lt;strong&gt;3-5 seconds&lt;/strong&gt; to make sure initial content is displayed and available for them. Lighthouse can help with that and thoroughly test the website’s performance.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pricing&lt;/strong&gt;: Free&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Key features&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Performance audit.&lt;/li&gt;
&lt;li&gt;Accessibility audit.&lt;/li&gt;
&lt;li&gt;Progressive Web App audit.&lt;/li&gt;
&lt;li&gt;SEO audit.&lt;/li&gt;
&lt;li&gt;Best Practices for the website.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#2-hotjar" class="anchor"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://www.hotjar.com/"&gt;HotJar&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The killer feature is to be able to record the user’s behavior while he or she browses your website. All that knowledge will let you iterate, come up with new ideas, better solutions, and take another look from a different perspective.&lt;/p&gt;

&lt;p&gt;The basic plan offers 300 recordings to keep in total and snapshot sessions can cover 100 recordings. Additionally, you can manage up to 3 heatmaps for free. It’s enough for small businesses.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pricing&lt;/strong&gt;: Free - $99+ / mo&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Key features&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Heatmaps (see where users click, scroll to).&lt;/li&gt;
&lt;li&gt;Recordings (crazy feature for increasing conversion rates).&lt;/li&gt;
&lt;li&gt;Feedback poll.&lt;/li&gt;
&lt;li&gt;Surveys.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#3-launchdarkly" class="anchor"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://launchdarkly.com/"&gt;LaunchDarkly&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;It’s a convenient ability to be able to ship some hidden feature to production, test it on selected users, and see how it works under different circumstances - especially if there are inconsistencies between environments. It’s one of the greatest things LaunchDarkly can offer, as a bonus you could release different versions of the feature.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pricing&lt;/strong&gt;: $75 / mo - $325+ / mo&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Key features&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Feature flags (show/hide features for end-users).&lt;/li&gt;
&lt;li&gt;A/B Testing (serve different versions of one feature).&lt;/li&gt;
&lt;li&gt;Percentage rollouts (release a new version of the feature to % of users).&lt;/li&gt;
&lt;li&gt;Different environments (e.g. local, staging, QA, production).&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#4-sentry" class="anchor"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://sentry.io/welcome/"&gt;Sentry&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Sentry is a reporting system all the Frontend Developers need. Once the error happens, you get robust information about the browser, OS, URL, breadcrumbs - full history of the user actions. There is an option to add source maps to see the direct line of code where the error occurred and much more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pricing&lt;/strong&gt;: Free - $80+ / mo&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Key features&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Robust information about errors.&lt;/li&gt;
&lt;li&gt;Breadcrumbs of user actions.&lt;/li&gt;
&lt;li&gt;Tags, filters, whitelisting, lots of customization.&lt;/li&gt;
&lt;li&gt;Different environments (e.g. local, staging, QA, production).&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#5-cypress" class="anchor"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://www.cypress.io/"&gt;Cypress&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;For such a long time there was a Selenium and all Java-based frameworks for testing. Cypress has a full JavaScript API and it’s amazing. It works on Chromium and already has support for multiple browsers. It’s straightforward to setup CI/CD where it records videos and snapshots once tests are failing. It’s a robust, mature e2e solution for the modern Frontend world.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pricing&lt;/strong&gt;: Free - $399 / mo&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Key features&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Headless testing for CI/CD.&lt;/li&gt;
&lt;li&gt;Recording videos and snapshots when the test fails.
Simple API in pure JavaScript.&lt;/li&gt;
&lt;li&gt;Automatic waiting and network traffic control.&lt;/li&gt;
&lt;li&gt;Outstanding Electron Simulator App - fully-packed environment for writing tests locally.&lt;/li&gt;
&lt;/ul&gt;




&lt;h1&gt;
  &lt;a href="#closing-notes" class="anchor"&gt;
  &lt;/a&gt;
  Closing Notes
&lt;/h1&gt;

&lt;p&gt;When I was working as a Lead Frontend Developer, I and the team loved those tools. My recommendation is to add them earlier than later as you can really see the boost in conversions. Who knows, you might catch a bug, rethink a solution from another perspective or realize that something worked in your head, but it didn't "click" for the users. Have fun along the way.&lt;/p&gt;

</description>
      <category>tooling</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
