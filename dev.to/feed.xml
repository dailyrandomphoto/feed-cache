<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>part 5: deletion in binary search tree</title>
      <author>Aya Bouchiha</author>
      <pubDate>Tue, 29 Jun 2021 23:12:36 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/part-5-deletion-in-binary-search-tree-4j8d</link>
      <guid>https://dev.to/ayabouchiha/part-5-deletion-in-binary-search-tree-4j8d</guid>
      <description>&lt;p&gt;hi, this is part 5 of tree data structure, and the #day_17 of algorithms and data structure, In the last posts, we talked about the binary search tree, its advantages, disadvantages, time and space complexity of its basic operations such as searching, insertion, and also their implementation using python&lt;br&gt;
In this post, we'll discuss deletion :)&lt;/p&gt;

&lt;p&gt;last posts: &lt;br&gt; + &lt;a href="https://dev.to/ayabouchiha/part-4-insertion-search-in-binary-search-tree-4h44"&gt;insertion, searching in binary search tree&lt;/a&gt; &lt;br&gt; + &lt;a href="https://dev.to/ayabouchiha/part-3-binary-search-tree-in-data-structure-3p7m"&gt;introduction to binary search tree&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#deletion-in-the-binary-search-tree"&gt;
  &lt;/a&gt;
  Deletion in the binary search tree
&lt;/h2&gt;

&lt;p&gt;there are 3 cases in deletion in binary search tree (&lt;a href="https://www.geeksforgeeks.org/binary-search-tree-set-2-delete/"&gt;&lt;em&gt;reference&lt;/em&gt;&lt;/a&gt;):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;if the node to be deleted is the leaf, this is the easiest case, we will only remove it without moving anything :)&lt;/li&gt;
&lt;li&gt;if the node to be deleted has one child, in this case, we will replace the child with the node and delete the child&lt;/li&gt;
&lt;li&gt;if the node to be deleted has two children, in this case, we need to find a successor (&lt;em&gt;the min of right sub-tree&lt;/em&gt;) or a predecessor (&lt;em&gt;the max of left sub-tree&lt;/em&gt;), and copy it to the node to be deleted,
then delete the successor (&lt;em&gt;or the predecessor&lt;/em&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#deletion-implementation"&gt;
  &lt;/a&gt;
  Deletion implementation
&lt;/h3&gt;

&lt;p&gt;before the implementation of deletion, we need to create a function that returns to us a successor.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#getsuccessor-function"&gt;
  &lt;/a&gt;
  getSuccessor function
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getSuccessor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currentNode&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;currentNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;currentNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;currentNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;currentNode&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#delete-function"&gt;
  &lt;/a&gt;
  Delete function
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.geeksforgeeks.org/binary-search-tree-set-2-delete/"&gt;more details...&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;"""
        [code is from] =&amp;gt; https://www.geeksforgeeks.org/binary-search-tree-set-2-delete/
    """&lt;/span&gt;
    &lt;span class="c1"&gt;# if the tree is empty
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;
    &lt;span class="c1"&gt;# if value is smaller than the root's value
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# if value is greater than the root's value
&lt;/span&gt;    &lt;span class="k"&gt;elif&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;#! case1 or case2 (node has not children or has only one)
&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;
            &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;

        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;
            &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;
        &lt;span class="c1"&gt;#! case: node has 2 children
&lt;/span&gt;        &lt;span class="c1"&gt;# getting  successor
&lt;/span&gt;        &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getSuccessor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# Copy the  successor's value to the node's value
&lt;/span&gt;        &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;
        &lt;span class="c1"&gt;# Delete the successor
&lt;/span&gt;        &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#references-and-useful-resources"&gt;
  &lt;/a&gt;
  References and useful resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://www.geeksforgeeks.org/binary-search-tree-set-2-delete/"&gt;https://www.geeksforgeeks.org/binary-search-tree-set-2-delete/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.geeksforgeeks.org/deletion-binary-tree/"&gt;https://www.geeksforgeeks.org/deletion-binary-tree/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.javatpoint.com/deletion-in-binary-search-tree"&gt;https://www.javatpoint.com/deletion-in-binary-search-tree&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.techiedelight.com/deletion-from-bst/"&gt;https://www.techiedelight.com/deletion-from-bst/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.youtube.com/watch?v=g0mjZwYRErM"&gt;https://www.youtube.com/watch?v=g0mjZwYRErM&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you for your time!&lt;br&gt;
Happy coding :)&lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>[Vue.js] How to create beautiful and realistic confetti animations using tsParticles</title>
      <author>Matteo Bruni</author>
      <pubDate>Tue, 29 Jun 2021 23:10:44 +0000</pubDate>
      <link>https://dev.to/matteobruni/how-to-create-beautiful-and-realistic-confetti-animations-in-vue-js-using-tsparticles-c5h</link>
      <guid>https://dev.to/matteobruni/how-to-create-beautiful-and-realistic-confetti-animations-in-vue-js-using-tsparticles-c5h</guid>
      <description>&lt;p&gt;I wrote a post about tsParticles and the new confetti animation created in the &lt;code&gt;1.30&lt;/code&gt; version.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/matteobruni" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JQFfhxbE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--48F7T3mb--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/349511/bb633a3a-649f-4897-9773-86a525c8fdc3.png" alt="matteobruni"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/matteobruni/how-to-create-beautiful-and-realistic-confetti-animation-with-tsparticles-1lkm" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to create beautiful and realistic confetti animation with tsParticles&lt;/h2&gt;
      &lt;h3&gt;Matteo Bruni ・ Jun 29 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#showdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;This configuration can be used as is in any Vue.js 2.x tsParticles installation (&lt;code&gt;particles.vue&lt;/code&gt; package).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;app.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Particles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;particles.vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Particles&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;em&gt;home.vue&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!--&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt; &lt;span class="nx"&gt;can&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="nx"&gt;placed&lt;/span&gt; &lt;span class="nx"&gt;anywhere&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Particles&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/* paste options here, remember to replace double quotes with single quotes */&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;A working sample can be found below&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/quiet-violet-u4g4v"&gt;
&lt;/iframe&gt;
&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/matteobruni"&gt;
        matteobruni
      &lt;/a&gt; / &lt;a href="https://github.com/matteobruni/tsparticles"&gt;
        tsparticles
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      tsParticles - Easily create highly customizable particles animations and use them as animated backgrounds for your website. Ready to use components available for React, Vue.js (2.x and 3.x), Angular, Svelte, jQuery, Preact, Inferno.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="https://particles.js.org" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/58f22f0a546d5d7f34b4668dc842ac91b3a4cf9a5de72346559b7d15b13e587e/68747470733a2f2f7061727469636c65732e6a732e6f72672f696d616765732f62616e6e6572322e706e67" alt="banner"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
tsParticles - TypeScript Particles&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;A lightweight TypeScript library for creating particles. Dependency free (*), browser ready and compatible with React, Vue, Angular, Svelte, jQuery, Preact, Inferno&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://openbase.com/js/tsparticles?utm_source=embedded&amp;amp;utm_medium=badge&amp;amp;utm_campaign=rate-badge" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/303db015a31c411aee869f57d55a44a53cd2f5380d0de5ee8abecb337a9452a6/68747470733a2f2f6261646765732e6f70656e626173652e636f6d2f6a732f726174696e672f74737061727469636c65732e737667" alt="Rate on Openbase"&gt;&lt;/a&gt; &lt;a href="https://www.jsdelivr.com/package/npm/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8c64088d02effc095dd7386325d216ce6d6bd46513a88ed2274e0ec4e6d876cf/68747470733a2f2f646174612e6a7364656c6976722e636f6d2f76312f7061636b6167652f6e706d2f74737061727469636c65732f62616467653f7374796c653d726f756e646564" alt="jsDelivr"&gt;&lt;/a&gt; &lt;a href="https://cdnjs.com/libraries/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e9e5a7a72f7cbc65eedd0e4d7431e4d4762c472ad4a66b6648a8e74c2b6be331/68747470733a2f2f696d672e736869656c64732e696f2f63646e6a732f762f74737061727469636c6573" alt="Cdnjs"&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e18baafcedd7efbbd13d6e2b1cf738c07ea898383c946e6e7b16400f813d70cb/68747470733a2f2f62616467652e667572792e696f2f6a732f74737061727469636c65732e737667" alt="npmjs"&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/bc16ec38506bbab6f6b729850ad28fd94a5643f1633b4356647033c3aa3fe102/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f74737061727469636c6573" alt="npm"&gt;&lt;/a&gt; &lt;a href="https://lerna.js.org/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3bc63f921dd60bac6d91aa900ef570c928b2aa4c2124ed23647e8fe9d2232853/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6d61696e7461696e6564253230776974682d6c65726e612d6363303066662e737667" alt="lerna"&gt;&lt;/a&gt; &lt;a href="https://www.codefactor.io/repository/github/matteobruni/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ce969771f1502f57861fe8ce7c787c209c50ef17c2e19f35cb1de0c960eba94a/68747470733a2f2f7777772e636f6465666163746f722e696f2f7265706f7369746f72792f6769746875622f6d617474656f6272756e692f74737061727469636c65732f6261646765" alt="CodeFactor"&gt;&lt;/a&gt; &lt;a href="https://www.codacy.com/manual/ar3s/tsparticles?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=matteobruni/tsparticles&amp;amp;utm_campaign=Badge_Grade" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8f96d4d0dccc9c7491f3ed07af70a808b0fd4d2e4d863a1f7bb9e51e10ae526e/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f6239383361616633343631613463343862316532656563636531666631643734" alt="Codacy Badge"&gt;&lt;/a&gt; &lt;a href="https://gitpod.io/#https://github.com/matteobruni/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/daadb4894128d1e19b72d80236f5959f1f2b47f9fe081373f3246131f0189f6c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f476974706f642d72656164792d2d746f2d2d636f64652d626c75653f6c6f676f3d676974706f64" alt="Gitpod Ready-to-Code"&gt;&lt;/a&gt; &lt;a href="https://repl.it/github/matteobruni/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/64adf1bd83058aa64f848245f74bef77cd7cc2a3f36343ac44d6d0c39cc41bc3/68747470733a2f2f7265706c2e69742f62616467652f6769746875622f6d617474656f6272756e692f74737061727469636c6573" alt="Run on Repl.it"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Do you want to use it on your website?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;This library is available on the two most popular CDNs and it's easy and ready to use, if you were using particles.js it's even easier&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You'll find the instructions &lt;a href="https://github.com/matteobruni/tsparticles/blob/main/README.md#library-installation"&gt;below&lt;/a&gt;, with all the links you need, and &lt;em&gt;don't be scared by &lt;strong&gt;TypeScript&lt;/strong&gt;, it's just the source language&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The output files are just JavaScript&lt;/strong&gt;. 🤩&lt;/p&gt;
&lt;p&gt;CDNs and &lt;code&gt;npm&lt;/code&gt; have all the sources you need in &lt;strong&gt;Javascript&lt;/strong&gt;, a bundle browser ready (tsparticles.min.js) and all files splitted for &lt;code&gt;import&lt;/code&gt; syntax.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you are still interested&lt;/strong&gt; some lines below there are some instructions for migrating from the old particles.js library.&lt;/p&gt;
&lt;h2&gt;
&lt;strong&gt;&lt;em&gt;Library installation&lt;/em&gt;&lt;/strong&gt;
&lt;/h2&gt;
&lt;h3&gt;
&lt;strong&gt;&lt;em&gt;Hosting / CDN&lt;/em&gt;&lt;/strong&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Please use this hosts or your own to&lt;/em&gt;&lt;/strong&gt;…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/matteobruni/tsparticles"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>vue</category>
      <category>javascript</category>
      <category>showdev</category>
      <category>webdev</category>
    </item>
    <item>
      <title>[React.js] How to create beautiful and realistic confetti animations using tsParticles</title>
      <author>Matteo Bruni</author>
      <pubDate>Tue, 29 Jun 2021 22:48:28 +0000</pubDate>
      <link>https://dev.to/matteobruni/how-to-create-beautiful-and-realistic-confetti-animations-in-react-using-tsparticles-3j24</link>
      <guid>https://dev.to/matteobruni/how-to-create-beautiful-and-realistic-confetti-animations-in-react-using-tsparticles-3j24</guid>
      <description>&lt;p&gt;I wrote a post about tsParticles and the new confetti animation created in the &lt;code&gt;1.30&lt;/code&gt; version.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/matteobruni" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JQFfhxbE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--48F7T3mb--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/349511/bb633a3a-649f-4897-9773-86a525c8fdc3.png" alt="matteobruni"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/matteobruni/how-to-create-beautiful-and-realistic-confetti-animation-with-tsparticles-1lkm" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;[JS] How to create beautiful and realistic confetti animation with tsParticles&lt;/h2&gt;
      &lt;h3&gt;Matteo Bruni ・ Jun 29 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#showdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;This configuration can be used as is in any React tsParticles installation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Particles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-tsparticles&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!--&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt; &lt;span class="nx"&gt;can&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="nx"&gt;placed&lt;/span&gt; &lt;span class="nx"&gt;anywhere&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Particles&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* paste options here */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;A working sample can be found below&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/strange-bohr-mfdz0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/matteobruni"&gt;
        matteobruni
      &lt;/a&gt; / &lt;a href="https://github.com/matteobruni/tsparticles"&gt;
        tsparticles
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      tsParticles - Easily create highly customizable particles animations and use them as animated backgrounds for your website. Ready to use components available for React, Vue.js (2.x and 3.x), Angular, Svelte, jQuery, Preact, Inferno.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="https://particles.js.org" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/58f22f0a546d5d7f34b4668dc842ac91b3a4cf9a5de72346559b7d15b13e587e/68747470733a2f2f7061727469636c65732e6a732e6f72672f696d616765732f62616e6e6572322e706e67" alt="banner"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
tsParticles - TypeScript Particles&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;A lightweight TypeScript library for creating particles. Dependency free (*), browser ready and compatible with React, Vue, Angular, Svelte, jQuery, Preact, Inferno&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://openbase.com/js/tsparticles?utm_source=embedded&amp;amp;utm_medium=badge&amp;amp;utm_campaign=rate-badge" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/303db015a31c411aee869f57d55a44a53cd2f5380d0de5ee8abecb337a9452a6/68747470733a2f2f6261646765732e6f70656e626173652e636f6d2f6a732f726174696e672f74737061727469636c65732e737667" alt="Rate on Openbase"&gt;&lt;/a&gt; &lt;a href="https://www.jsdelivr.com/package/npm/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8c64088d02effc095dd7386325d216ce6d6bd46513a88ed2274e0ec4e6d876cf/68747470733a2f2f646174612e6a7364656c6976722e636f6d2f76312f7061636b6167652f6e706d2f74737061727469636c65732f62616467653f7374796c653d726f756e646564" alt="jsDelivr"&gt;&lt;/a&gt; &lt;a href="https://cdnjs.com/libraries/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e9e5a7a72f7cbc65eedd0e4d7431e4d4762c472ad4a66b6648a8e74c2b6be331/68747470733a2f2f696d672e736869656c64732e696f2f63646e6a732f762f74737061727469636c6573" alt="Cdnjs"&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e18baafcedd7efbbd13d6e2b1cf738c07ea898383c946e6e7b16400f813d70cb/68747470733a2f2f62616467652e667572792e696f2f6a732f74737061727469636c65732e737667" alt="npmjs"&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/bc16ec38506bbab6f6b729850ad28fd94a5643f1633b4356647033c3aa3fe102/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f74737061727469636c6573" alt="npm"&gt;&lt;/a&gt; &lt;a href="https://lerna.js.org/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3bc63f921dd60bac6d91aa900ef570c928b2aa4c2124ed23647e8fe9d2232853/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6d61696e7461696e6564253230776974682d6c65726e612d6363303066662e737667" alt="lerna"&gt;&lt;/a&gt; &lt;a href="https://www.codefactor.io/repository/github/matteobruni/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ce969771f1502f57861fe8ce7c787c209c50ef17c2e19f35cb1de0c960eba94a/68747470733a2f2f7777772e636f6465666163746f722e696f2f7265706f7369746f72792f6769746875622f6d617474656f6272756e692f74737061727469636c65732f6261646765" alt="CodeFactor"&gt;&lt;/a&gt; &lt;a href="https://www.codacy.com/manual/ar3s/tsparticles?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=matteobruni/tsparticles&amp;amp;utm_campaign=Badge_Grade" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8f96d4d0dccc9c7491f3ed07af70a808b0fd4d2e4d863a1f7bb9e51e10ae526e/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f6239383361616633343631613463343862316532656563636531666631643734" alt="Codacy Badge"&gt;&lt;/a&gt; &lt;a href="https://gitpod.io/#https://github.com/matteobruni/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/daadb4894128d1e19b72d80236f5959f1f2b47f9fe081373f3246131f0189f6c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f476974706f642d72656164792d2d746f2d2d636f64652d626c75653f6c6f676f3d676974706f64" alt="Gitpod Ready-to-Code"&gt;&lt;/a&gt; &lt;a href="https://repl.it/github/matteobruni/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/64adf1bd83058aa64f848245f74bef77cd7cc2a3f36343ac44d6d0c39cc41bc3/68747470733a2f2f7265706c2e69742f62616467652f6769746875622f6d617474656f6272756e692f74737061727469636c6573" alt="Run on Repl.it"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Do you want to use it on your website?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;This library is available on the two most popular CDNs and it's easy and ready to use, if you were using particles.js it's even easier&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You'll find the instructions &lt;a href="https://github.com/matteobruni/tsparticles/blob/main/README.md#library-installation"&gt;below&lt;/a&gt;, with all the links you need, and &lt;em&gt;don't be scared by &lt;strong&gt;TypeScript&lt;/strong&gt;, it's just the source language&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The output files are just JavaScript&lt;/strong&gt;. 🤩&lt;/p&gt;
&lt;p&gt;CDNs and &lt;code&gt;npm&lt;/code&gt; have all the sources you need in &lt;strong&gt;Javascript&lt;/strong&gt;, a bundle browser ready (tsparticles.min.js) and all files splitted for &lt;code&gt;import&lt;/code&gt; syntax.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you are still interested&lt;/strong&gt; some lines below there are some instructions for migrating from the old particles.js library.&lt;/p&gt;
&lt;h2&gt;
&lt;strong&gt;&lt;em&gt;Library installation&lt;/em&gt;&lt;/strong&gt;
&lt;/h2&gt;
&lt;h3&gt;
&lt;strong&gt;&lt;em&gt;Hosting / CDN&lt;/em&gt;&lt;/strong&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Please use this hosts or your own to&lt;/em&gt;&lt;/strong&gt;…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/matteobruni/tsparticles"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>showdev</category>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How To Create a Type-Safe Implicit Pick</title>
      <author>Prithpal Sooriya</author>
      <pubDate>Tue, 29 Jun 2021 21:43:53 +0000</pubDate>
      <link>https://dev.to/prithpalsooriya/how-to-create-a-type-safe-implicit-pick-2jpa</link>
      <guid>https://dev.to/prithpalsooriya/how-to-create-a-type-safe-implicit-pick-2jpa</guid>
      <description>&lt;p&gt;This article discusses the implementation of an implicit pick, the reason for it &amp;amp; what makes it special.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.typescriptlang.org/play?jsx=0#code/PTDECcFMHMEsHsB2ACAypALgVwA7ILTICiAHgIYC2OANpMgJKIaTgBmZAxnWYgCbIckAZywVYiaMlZZEHDAkQA6AFDjmbTnQAK4eLyxzkAb2XJksXgC5kQjOHHQA3KeQ57Xa4lEAjFs7OIlJDWtvYS-si8kEIc9jjySCF2DhFkWBgAFvDgSWFOLrxkzNYAIkWQERzl0NkAnrkpygC+ylEc1GRQAsIYNvAUkKjJEgDCwqIOAGIycgrWABShDRIAlMgAvAB8yABu8BbOIKCQfFBwSMrKR2cKxORUtMjwrMhanfJk1FcAVN+m38gAOp0ISQOiZIrITJ0HDvWCfZCQe40bjUajwADuQmQWGxGHgrngOCwHWYUIydFYsEg1F42IxdAxPF6rF0FFeun0chUyABAAlMZAdixzC8GcgmUwoQTOFwhHiKU9vAArSByAA0EpBYPJkOhrl0OGxZGxtlgaKe8QUnx5ANQBPE5PgoIEJuiyHm2VdoPpFJQ4slvVCsDkIowtRw0RWmoDzNeIYA1gBCf7AZSCRC2Vxwz6kSgo6xvcAfagAHh0egMGG262M5isyAARABGRuawIDayNgBCUDIvEbyCaznDkdeOeoeYekAAKhG6LXR5Bntni-DJ8jaI5kCA6xYAPzLaDtoKHmzDY-IRTXpo7tDyC1kcdrz7lzlVzbKJfPktTlEVnA5zHRd5xXWEXw3fNaEUA4d2Ac88mQAAfHE+EgKlEEgXhLl3ABBcBoFEE5ehXb8AHJgwkZDUKiDCsLI8xsUQeBehNIRYGgQJvEefFVyCdQnhecjKOgMiVCEfpBgvMZMwmCRplkBJEHmcDf03SBFA7SAVkOMATl4G4LiuMBDJQP9HhXLREx+P5eXjDgE2QOBhWxXFkB4JVVUMDFYEyJ5EGoWpyUpalaXpOgqi6MhvHgdJbSBEEH2oZAMjIYUoXnGwyFYTBak1NJeMEaclI9EYZwAJQAGWQABqNAtFwkYiDWAAydzvHNXygt4qB2DkL15g4VKJEgYAoAoeBhTWNwiSEeLu3SLUUrS8EMlgbFG30GgQyKBRB1IiMHCeLBwANWaCGQZspC9WJIF2qj9SshyPRnVBkEqnheB09y+Eu67Tv1ThsAReAVTVXp5gAKTej6+BWf5kAAWQ4jJemY3pfGQCgDAyQSfsYkRKS9IQKE+WhTrUFg+uiTVvEWqoUExiauhXDz1sJ4AeGY2oeC4f7kA6AiRUpjQ5VtBHKswPFwCC277skNmHhDXz7Mc6RFIUW002-J6EywgDsVrXW30rDUmwsQcUMbNwQ0gS2my0+3GyqZgahlxtNmcDMsxwRNzOCVX9cNQ3jBcCwu1bdUXBtjxkAAVkUAAGKOAiCLtvD7AcU9dV26i7bsyD1mXkDakZC+iNtmhHTLdf9oCFwyyMwL99Tt13Ix6yPTUY4DrwKF8cAT07BCHE1F2YDzkeqJaHWW6gyAAPrjZG+XF5fYc-3NKCNv4JE5QJIGIY8hkkQxHkmYlJUufpy3gYdOM45ThgBQcJM5+kAYJWOBV3XkAANRYOxD+zYbIIxnGtbE6tZgfx8o+NEmIcR4gJHLMkittrfwwIFQO-BQZeV6IAHg3ACR+wjYE55zTJVSulb8Qhsq5RLu1Tq4ZpTIF6kDAaQ0eDQFGuNSa2kzpGninyAA8oCIgf8iDlXMEGMEFAFSQnFOiLMsVToFWQf0FEJV5hlSqrVeqjVmrMJwESEk5RjqnVweDeKpCkBYK4b0V6iJwC6HAEIYAAx5RkC4diWAQk1oSGxDUCUugJDXkUMgOmaMHSIFYNkUmJUMR+gEH2eQD1FQWLkP8MBEDGJPATGQPK4TFr0HJOIRy4oGaRAJL4DAAlAC8G4AOD3Uzph6IU80vB6Bf18rrAB4ArrrBcKWGcmx5hrC2AMgA0oiEgzA+DYj1rUFcQyVLB0LImQZmpxmbBWKshy6zkCbI2J+MwZgZpGi9i02AnSMAVi5NcxMPS+mtNpB09BXT7ksGbCbW5wz77e16Jc15dyHIPOXgC6gytrnvjkN0j58wTBmF3BVAAmgwGcF0tEVWqnVVADUmprF4PAd06MnKwHSm5HgQVVHdGKrcGJp1TnhVdCgXEkAw4NhbJXE57gA4J2Ti4LS6dM6cpzhPGW+dy7F1LuXIQlcmj32-C88FGCYW9KXiBJuLwwUQpVc2Hee4GwiW7tyzwPgWBDwDoakVbt6hT0kDPTKirtXvN6YvTK6rV7mCuTq2+FQ4K2v3pJI+DgT5yWgApaByktXKudc2H198jj6VMq-CA78UCOowarf+gDbgACYLo+T8lSoqGiFApmAL8BGuEGQH0gEmBKyBmIYmWulNBSqf6JieVEU6BbcZFvUbQJSWS6CkzgBwSIPicpQFkAHfUItQQRpXvzfUUCSriGJBgYA4F+IsEyXZcBMIJzuXgViYK3RZIDABgSWE8pzAoAZfQmaOwLCrW4OkNRxUNII0YOoedKTJAq1gclKAXIX0rzceXU91DIzfypGOz0AVuqKiXKaVKwHwmYAZCcKEGICTIfcl0FlX0ml-M7emt5z1+lmEGT8w5EypkzLpMgeZizhkMsLBOaj9DjYzg2VsnZCY9kHLGcc-hQhnDNMzBjLAbSblVmXnTNpZGgUCdk3IH55zJOuETEHU2vRawKdpKpjAcK2UR2FT3awvLs4CqbBnO6WcXDj2teKouQUpV6xlVHOV1cxy6x07c5eS5m4OX81WPVHdw62qNbbE1-czUNrTlFq1k8RJDi-DXbTvAKwcCrK64CK9gt6yy1CjAPq9V7xrUG0Y4wz5hovgoK+IXiu6bjbpR+BlU1AA"&gt;Here is a Typescript Playground with examples&lt;/a&gt; that will be used as a reference. Can also be found via my Github Repo.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Prithpal-Sooriya"&gt;
        Prithpal-Sooriya
      &lt;/a&gt; / &lt;a href="https://github.com/Prithpal-Sooriya/ts-implicit-pick"&gt;
        ts-implicit-pick
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Example of an implicit pick.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#why-an-implicit-pick-why-not-partial"&gt;
  &lt;/a&gt;
  Why an implicit Pick? Why not Partial?
&lt;/h2&gt;

&lt;p&gt;Partial is great if you want to create an object with some of the values from a given interface. However when the object is used (via property access or through some consuming type), the object still is a &lt;code&gt;Partial&lt;/code&gt; - as in all properties are optional, even if you have provided a value.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VyJDGUnI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Prithpal-Sooriya/ts-implicit-pick/main/images/PartialExample.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VyJDGUnI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Prithpal-Sooriya/ts-implicit-pick/main/images/PartialExample.png" alt="Example of Partial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In these cases, what we really want is a &lt;code&gt;Pick&lt;/code&gt;ed object - an object with the properties we want "picked" out of the original interface.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-verbosity-of-pick"&gt;
  &lt;/a&gt;
  The Verbosity of Pick
&lt;/h2&gt;

&lt;p&gt;Pick is perfect, it gives us the exact strict type that we want, however (as shown) it is very verbose.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3tfJ2hiq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Prithpal-Sooriya/ts-implicit-pick/main/images/PickExample.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3tfJ2hiq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Prithpal-Sooriya/ts-implicit-pick/main/images/PickExample.png" alt="Example of Pick"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For each prop we want, we need to write it for the &lt;code&gt;type&lt;/code&gt; as well as for the object.&lt;br&gt;
For small objects, this might not be much of an issue - however this can become very large the more props we want.&lt;/p&gt;

&lt;p&gt;So now lets design an implicit pick!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#1st-implicit-pick-okay-but-no-intellisense"&gt;
  &lt;/a&gt;
  1st Implicit Pick - Okay, But No IntelliSense 😢
&lt;/h2&gt;

&lt;p&gt;Here is the design of the initial implicit Pick.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buildImplicitPickVer1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;K&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="kr"&gt;keyof&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Pick&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;K&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Pick&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;K&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Usage&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pickProduct&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;buildImplicitPickVer1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Product&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;implicitProduct&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pickProduct&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Breakdown:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;T&amp;gt;() =&amp;gt;&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;The is a factory function part that allows you to build a pick on whatever type you provide it.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;K extends keyof T&amp;gt;&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;We have a generic type &lt;code&gt;K&lt;/code&gt; that is constrained to the type given in the factory.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;(props: Pick&amp;lt;T, K&amp;gt;): Pick&amp;lt;T, K&amp;gt;&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;this parameter gets inferred as the developer types in the keys of their object.&lt;/li&gt;
&lt;li&gt;Invalid keys will give us an error (since does not match the Generic type)&lt;/li&gt;
&lt;li&gt;Invalid values for the key will give us an error, since it won't match the &lt;code&gt;Pick&lt;/code&gt;ed object values.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is exactly what we want - a type-safe implicit pick! Refactored changes (renaming/removing) on the interface will propagate through to the objects too!&lt;/p&gt;

&lt;p&gt;Well... after some usage I found that it didn't really give a good Developer Experience (DX).&lt;/p&gt;

&lt;p&gt;IntelliSense/auto-complete (via &lt;code&gt;CTRL + SPACE&lt;/code&gt;) doesn't give us any useful information on what props we can use.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7TP2-WgO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Prithpal-Sooriya/ts-implicit-pick/main/images/ImplicitPickNoAutoComplete.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7TP2-WgO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Prithpal-Sooriya/ts-implicit-pick/main/images/ImplicitPickNoAutoComplete.png" alt="Implicit Pick with no IntelliSense"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Only once we start typing do we get errors if a key does not match the interface, we aren't able to get a list of all keys that we can use.&lt;/p&gt;

&lt;p&gt;This is because our parameter type in our factory function &lt;code&gt;Pick&amp;lt;T, K&amp;gt;&lt;/code&gt; relies on keys given. Lets fix that!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#implicit-pick-with-great-dev-experience"&gt;
  &lt;/a&gt;
  Implicit Pick with Great Dev Experience!
&lt;/h2&gt;

&lt;p&gt;Here is the the solution:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buildImplicitPick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;K&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="kr"&gt;keyof&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Partial&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;Pick&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;K&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Pick&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;K&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The small change that made the huge difference is the intersection type &lt;code&gt;Partial&amp;lt;T&amp;gt; &amp;amp; Pick&amp;lt;T, K&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;Partial&amp;lt;T&amp;gt;&lt;/code&gt; give us the ability to get back our auto complete for keys.&lt;/li&gt;
&lt;li&gt;Intersecting is with the Pick &lt;code&gt;&amp;amp; Pick&amp;lt;T, K&amp;gt;&lt;/code&gt; ensures that we get the correct type for our key.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Intersection above means that we take only the props/types that match in both types given.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type A = { a: number | undefined }
type B = { a: number }
type C = A &amp;amp; B; // will be { a: number } since that is what both types above have.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Whats awesome is that we can see the IntelliSense working in real time!&lt;br&gt;
When we &lt;code&gt;CTRL + SPACE&lt;/code&gt; to see what props are available, they are all optional because of the &lt;code&gt;Partial&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LJr7Br1h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Prithpal-Sooriya/ts-implicit-pick/main/images/ImplicitPickAutoCompleteKey.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LJr7Br1h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Prithpal-Sooriya/ts-implicit-pick/main/images/ImplicitPickAutoCompleteKey.png" alt="Implicit Pick With IntelliSense info for the keys"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But as soon as we select a property to use, it becomes required:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;because the Generic &lt;code&gt;K&lt;/code&gt; keys are updated;&lt;/li&gt;
&lt;li&gt;subsequently so is the &lt;code&gt;Pick&amp;lt;T, K&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;and finally the intersection &lt;code&gt;Partial&amp;lt;T&amp;gt; &amp;amp; Pick&amp;lt;T, K&amp;gt;&lt;/code&gt; enforces are type to be required.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WkyuNJDU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Prithpal-Sooriya/ts-implicit-pick/main/images/ImplicitPickAutoCompleteValue.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WkyuNJDU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Prithpal-Sooriya/ts-implicit-pick/main/images/ImplicitPickAutoCompleteValue.png" alt="Implicit Pick With IntelliSense info for the value"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Above shows how to write a type-safe, refactor-safe implicit Pick function with useful IntelliSense information.&lt;/p&gt;

&lt;p&gt;The function itself is rather simple, but the main takeaway for me is to try/test out different type implementations to provide better IntelliSense information &amp;amp; better developer experience (DX).&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>productivity</category>
      <category>showdev</category>
      <category>developerexperience</category>
    </item>
    <item>
      <title>I explain the way I prototyping software tools</title>
      <author>Daniel Persson</author>
      <pubDate>Tue, 29 Jun 2021 20:45:20 +0000</pubDate>
      <link>https://dev.to/kalaspuffar/i-explain-the-way-i-prototyping-software-tools-21dk</link>
      <guid>https://dev.to/kalaspuffar/i-explain-the-way-i-prototyping-software-tools-21dk</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/-rnFqPML8v8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;When I do prototyping on new software tools I usually create something quick and simple in order to show the concept in a straightforward approach. This might not be the solution to use but in this video, you will see one of my prototypes and I talk about the process of creating tools for prototyping software.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How to make your product look good</title>
      <author>Evan Conrad</author>
      <pubDate>Tue, 29 Jun 2021 20:12:17 +0000</pubDate>
      <link>https://dev.to/flaque/how-to-make-your-product-look-good-h5j</link>
      <guid>https://dev.to/flaque/how-to-make-your-product-look-good-h5j</guid>
      <description>&lt;p&gt;If you're wearing the design hat before for the first time, here's some tips that might be helpful on your way.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;More of a video person? This post is available as a video podcast at &lt;a href="https://evan.streambus.com/"&gt;evan.streambus.com&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eBYmolFO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mexi1jsz1pxc3phe0x2y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eBYmolFO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mexi1jsz1pxc3phe0x2y.png" alt="Two screenshots of a web product, one that's sparse and simple, and another with many borders and images. A label at the top reads &amp;quot;Early products don't have a lot of features, and that can feel weird when you're used to fleshed out stuff.&amp;quot;"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#avoid-the-temptation-to-decorate-an-early-product"&gt;
  &lt;/a&gt;
  Avoid the temptation to decorate an early product
&lt;/h2&gt;

&lt;p&gt;You're used to using things that are feature complete, so you look at your early product and feel that it's "dull" or "sparse".&lt;/p&gt;

&lt;p&gt;This isn't an aesthetics problem, it's a your-product-is-early problem. Be comfortable with this stage; don't try and add extra fonts, colors, borders, and other decorations.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8N-vEahp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ytkkgkzijkm8olxsxzrb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8N-vEahp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ytkkgkzijkm8olxsxzrb.png" alt='A timeline of a product as it evolves from simple to complex as a features such as an "about page" and a "pricing page" get added. A label at the top reads "Add new aesthetics when you need them, not as decoration".'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Instead, build features, and your product will evolve naturally. &lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xNz2o9R4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ofst9pkclig5pw66zp7l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xNz2o9R4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ofst9pkclig5pw66zp7l.png" alt="A drawing of a painter's palette, with several rectangles of various sizes superimposed where one might have put paints instead. A label at the top reads &amp;quot;when using margin and padding, pre-create a big, medium, and small spacing, rather than making it up on the fly&amp;quot;."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#keep-a-spacing-palette"&gt;
  &lt;/a&gt;
  Keep a spacing palette
&lt;/h2&gt;

&lt;p&gt;You likely already have a color palette, but keeping a spacing palette can help you avoid unintentional contrast, especially when you have multiple people working on one project.&lt;/p&gt;

&lt;p&gt;For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.p-big&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;24px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.p-medium&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;12px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.p-small&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YHXMHl9W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1x0bzx98bwgf7b1d666q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YHXMHl9W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1x0bzx98bwgf7b1d666q.png" alt='Three groupings of buttons. The first grouping has the label "bad, ambiguous hierarchy" and shows one button with a large border, and another big blue button. The second group has the label "fine, no hierarchy", and shows two blue buttons that are identical. The third has the label "good, clear hierarchy", and shows one button with a large border and another with no border.'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#avoid-ambiguous-hierarchy"&gt;
  &lt;/a&gt;
  Avoid ambiguous hierarchy
&lt;/h2&gt;

&lt;p&gt;Make sure it's clear what you want a user to do. If you add a big background to one button, but make another one big and blue, it's not clear which one is "more" important.&lt;br&gt;
​&lt;/p&gt;

&lt;p&gt;To avoid this, plan out what an "primary" button looks like, what a "secondary" button looks like, and so on.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--afTObyq6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7bhu79uzfmueq9yqhpti.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--afTObyq6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7bhu79uzfmueq9yqhpti.png" alt='Three examples of icons. The first has a comically large icon next to some text with the label "bad". The second is a button with an icon where the icon is so big it nearly touches the borders of the button, and has the label "bad". The third is a button with an icon that is roughly the same size as the text and has the label "good".'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-make-your-icons-huge"&gt;
  &lt;/a&gt;
  Don't make your icons huge
&lt;/h2&gt;

&lt;p&gt;Most icon sets are meant to have roughly the same size as the text. They're meant to be similar to a character.&lt;/p&gt;

&lt;p&gt;If you need something big, consider using a stock photo or illustration. Or, consider removing the icon and just letting the text speak for itself.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1iAgkONq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bet4xpxgbmnqfole5lno.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1iAgkONq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bet4xpxgbmnqfole5lno.png" alt="A screenshot of a color picker grabbing the dark background color of Github. Underneath it shows the Hue, Saturation, and Lightness of the color: 218, 22, and 7 respectively. If we bring up the saturation and the brightness, the dark background color, which originally appeared black now appears blue."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#grayscale-isnt-always-grayscale"&gt;
  &lt;/a&gt;
  Grayscale isn't always grayscale
&lt;/h2&gt;

&lt;p&gt;Many professionally designed websites don't use pure gray-scales (like #000000 black). Instead, their grays are darker, desaturated versions of their other brand colors.&lt;br&gt;
​&lt;/p&gt;

&lt;p&gt;Consider using &lt;a href="https://palx.jxnblk.com"&gt;palx.jxnblk.com&lt;/a&gt; to generate a grayscale color palette for your brand color.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XDPYyB1D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/li3bpkepyi4ak41fqpxo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XDPYyB1D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/li3bpkepyi4ak41fqpxo.png" alt="Two illustrations of people. The first illustration is colorful, with stylized figures that still look three-dimensional, and an artistic style that has significant gesture. The second is flat two dimensional figures that look stiff and rigid."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#avoid-stiff-vector-art"&gt;
  &lt;/a&gt;
  Avoid stiff vector art
&lt;/h2&gt;

&lt;p&gt;Some vector art is better than others, and can distract from your design. Consider using &lt;a href="https://blush.design"&gt;blush.design&lt;/a&gt; to get some professional assets instead.&lt;/p&gt;

&lt;p&gt;Consider using &lt;a href="https://unsplash.com/"&gt;unsplash&lt;/a&gt; images instead of art assets. Or, if it works for your project, consider letting your design exist without art assets entirely! Not everything needs illustrations. &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>design</category>
    </item>
    <item>
      <title>What is CDN?</title>
      <author>Bibek</author>
      <pubDate>Tue, 29 Jun 2021 19:51:05 +0000</pubDate>
      <link>https://dev.to/bibekkakati/what-is-cdn-1pm2</link>
      <guid>https://dev.to/bibekkakati/what-is-cdn-1pm2</guid>
      <description>&lt;p&gt;CDN stands for &lt;strong&gt;Content Delivery Network&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;A CDN is a system of multiple servers distributed geographically which works together to provide fast delivery of Internet content like HTML pages, javascript files, stylesheets, videos and images etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RNWiciVM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q7mv223001hzzx2n6ox1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RNWiciVM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q7mv223001hzzx2n6ox1.png" alt="CDN Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#why-do-we-need-cdn"&gt;
  &lt;/a&gt;
  Why do we need CDN?
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It reduces latency, thus it improves the website load time. Since the contents are distributed globally, the distance between clients and the content also gets reduced, resulting in faster access to the content.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Minimize downtime and increases availability due to their distributed nature.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Improves website security by providing DDoS mitigation and using secured and updated  SSL/TLS certificates.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It also helps in reducing bandwidth consumption costs of the origin server.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;blockquote&gt;
&lt;p&gt;Originally published on &lt;a href="https://blog.bibekkakati.me/what-is-cdn"&gt;blog.bibekkakati.me&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;Thank you for reading 🙏&lt;/p&gt;

&lt;p&gt;If you enjoyed this article or found it helpful, give it a thumbs-up 👍&lt;/p&gt;

&lt;p&gt;Feel free to connect 👋&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/kakatibibek"&gt;Twitter&lt;/a&gt; | &lt;a href="https://instagram.com/bibekkakati"&gt;Instagram&lt;/a&gt; | &lt;a href="https://linkedin.com/in/bibekkakati"&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;If you like my work and want to support it, you can do it here. I will really appreciate it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/bibekkakati"&gt;&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nAlyWXzp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.buymeacoffee.com/button-api/%3Ftext%3DBuy%2520me%2520a%2520coffee%26emoji%3D%26slug%3Dbibekkakati%26button_colour%3DFF5F5F%26font_colour%3Dffffff%26font_family%3DCookie%26outline_colour%3D000000%26coffee_colour%3DFFDD00"&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

</description>
      <category>cdn</category>
      <category>cache</category>
      <category>webdev</category>
      <category>server</category>
    </item>
    <item>
      <title>TIL: Colorful test output in Go </title>
      <author>jonasbn</author>
      <pubDate>Tue, 29 Jun 2021 19:23:21 +0000</pubDate>
      <link>https://dev.to/jonasbn/til-colorful-test-output-in-go-3k86</link>
      <guid>https://dev.to/jonasbn/til-colorful-test-output-in-go-3k86</guid>
      <description>&lt;p&gt;The standard command line use when testing go:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;go &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Colors your test output according to your terminal configuration.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/rakyll"&gt;@rakyll&lt;/a&gt; has implemented a cool tool &lt;a href="https://github.com/rakyll/gotest"&gt;&lt;code&gt;gotest&lt;/code&gt;&lt;/a&gt; for coloring your test output, so you have passing tests colored green, failing tests marked red etc.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;gotest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can customize the colors for failing tests and passing tests via environment variables using the palette of your terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;GOTEST_PALETTE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"red,green"&lt;/span&gt; gotest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first color being for failures and the second one being for passes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zXTune-Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uml40omxvnwfrfqvwwxg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zXTune-Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uml40omxvnwfrfqvwwxg.png" alt="Colorful terminal test output"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To find the colors in for example &lt;strong&gt;iTerm.app&lt;/strong&gt; open the Preferences, your profile and the color tab.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E0wov_FX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qm9zyk5m9fg4p3wbqhcm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E0wov_FX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qm9zyk5m9fg4p3wbqhcm.png" alt="iTerm preferences"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Use the names for the colors in the environment variables&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources-and-references"&gt;
  &lt;/a&gt;
  Resources and References
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/rakyll/gotest"&gt;GitHub: rakyll/gotest&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This article was lifted from &lt;a href="http://jonasbn.github.io/til/"&gt;my TIL collection&lt;/a&gt;&lt;/p&gt;

</description>
      <category>go</category>
      <category>todayilearned</category>
      <category>gotest</category>
    </item>
    <item>
      <title>🎬Animated Sidebar Menu with HTML &amp; CSS✨</title>
      <author>Robson Muniz</author>
      <pubDate>Tue, 29 Jun 2021 19:18:46 +0000</pubDate>
      <link>https://dev.to/robsonmuniz16/animated-sidebar-menu-with-html-css-5d9a</link>
      <guid>https://dev.to/robsonmuniz16/animated-sidebar-menu-with-html-css-5d9a</guid>
      <description>&lt;p&gt;Hey Devs n this video you will learn how to create an Animated Sidebar Menu with HTML &amp;amp; CSS (No JavaScript).&lt;br&gt;
 We'll walk you through step-by-step on how to create it and how to add it to your websites. &lt;/p&gt;



&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/QPZrQ_xPVs4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#other-amazing-projects"&gt;
  &lt;/a&gt;
  🏆 &lt;strong&gt;Other Amazing Projects&lt;/strong&gt; 🏆
&lt;/h2&gt;




&lt;p&gt;🎬Login &amp;amp; Registration Form Using HTML &amp;amp; CSS &amp;amp; JS&lt;br&gt;
➤&lt;a href="https://youtu.be/I5_T547tHf0"&gt;https://youtu.be/I5_T547tHf0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🎬Neumorphism Login Form | HTML &amp;amp; CSS &lt;br&gt;
➤&lt;a href="https://youtu.be/QWh0S-3D7uY"&gt;https://youtu.be/QWh0S-3D7uY&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🎬Amazing Social Media Buttons Hover Effects | HTML &amp;amp; CSS &lt;br&gt;
➤ &lt;a href="https://youtu.be/P9pi4hq7BBA"&gt;https://youtu.be/P9pi4hq7BBA&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;🎬Animated Login Form | HTML, CSS &amp;amp; JavaScript &lt;br&gt;
➤ Watch: &lt;a href="https://youtu.be/ogNwc45qHKo"&gt;https://youtu.be/ogNwc45qHKo&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;🎬Slider Sign In / Sign Up Form | HTML CSS Vanilla JS &lt;br&gt;
➤ Watch: &lt;a href="https://youtu.be/Wz5THk0-Y1s"&gt;https://youtu.be/Wz5THk0-Y1s&lt;/a&gt; &lt;/p&gt;




</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>TIL: Skipping Tests in Go</title>
      <author>jonasbn</author>
      <pubDate>Tue, 29 Jun 2021 18:55:01 +0000</pubDate>
      <link>https://dev.to/jonasbn/til-skipping-tests-in-go-3i5l</link>
      <guid>https://dev.to/jonasbn/til-skipping-tests-in-go-3i5l</guid>
      <description>&lt;p&gt;The Go testing framework and toolchain has a nifty facility, where you can skip tests, if you do not want them to be a part of every run.&lt;/p&gt;

&lt;p&gt;Let say we have a basic implementation&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;shorttest&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
    &lt;span class="s"&gt;"time"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;DoUnimportantStuff&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kt"&gt;uint8&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Doing unimportant stuff"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Second&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;DoImportantStuff&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kt"&gt;uint8&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Doing important stuff"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we have a corresponding test suite:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;shorttest&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"testing"&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;TestImportant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;got&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;DoImportantStuff&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;got&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Important stuff not correct, needed %d"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;got&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;TestUnimportant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Short&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Skip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"skipping test in short mode."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;got&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;DoUnimportantStuff&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;got&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Unimportant stuff not correct, needed %d"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;got&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we are developing and want fast feedback, we do not want to wait for the long running and unimportant test to finish, but we are VERY interested in getting feedback on our important function as fast as possible.&lt;/p&gt;

&lt;p&gt;When we just test we will observe waiting time&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;go &lt;span class="nb"&gt;test
&lt;/span&gt;Doing important stuff
Doing unimportant stuff
PASS
ok      shorttest   10.364s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can then skip the execution of the unimportant tests by executing our test suite with the &lt;code&gt;--short&lt;/code&gt; flag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;❯ go &lt;span class="nb"&gt;test&lt;/span&gt; &lt;span class="nt"&gt;--short&lt;/span&gt;
Doing important stuff
PASS
ok      shorttest   0.116s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We just have to remember to add the handling of &lt;code&gt;--short&lt;/code&gt; via &lt;code&gt;testing.Short()&lt;/code&gt; in the non-critical and long running tests.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources-and-references"&gt;
  &lt;/a&gt;
  Resources and References
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://golang.org/cmd/go/#hdr-Testing_flags"&gt;Go Command: Testing Flags&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://golang.org/pkg/testing/#hdr-Skipping"&gt;Go Package testing: Skipping&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Lifted from &lt;a href="http://jonasbn.github.io/til/"&gt;my TIL collection&lt;/a&gt;&lt;/p&gt;

</description>
      <category>go</category>
      <category>todayilearned</category>
      <category>testing</category>
    </item>
    <item>
      <title>GitHub Pull Requests with Screenshots Tip</title>
      <author>Matthew McGarvey</author>
      <pubDate>Tue, 29 Jun 2021 18:51:10 +0000</pubDate>
      <link>https://dev.to/matthewmcgarvey/github-pull-requests-with-screenshots-tip-1cbb</link>
      <guid>https://dev.to/matthewmcgarvey/github-pull-requests-with-screenshots-tip-1cbb</guid>
      <description>&lt;p&gt;When you're making a pull request in GitHub and want to include screenshots in the description, you might be tempted to just throw the screenshots in with headings. I urge you, though, not to do that! Those screenshots take up a lot of room and there is a better way!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dropdowns"&gt;
  &lt;/a&gt;
  Dropdowns
&lt;/h2&gt;

&lt;p&gt;Dropdowns are truly the better way to add images to pull requests. By default they can be ignored and can be expanded if you want to look at them.&lt;/p&gt;

&lt;p&gt;Here's a picture of a pull request description without using dropdowns. Notice how much room is taken up. I had to zoom out to 60% just to get it all on my screen!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WFRw2O1V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tyh8l0td0anndd1hgjl2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WFRw2O1V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tyh8l0td0anndd1hgjl2.png" alt="PR description without dropdowns"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now here's a picture using dropdowns. It's so much simpler.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TRoaSe11--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gfrkc4s7zsrqy05436ff.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TRoaSe11--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gfrkc4s7zsrqy05436ff.png" alt="PR description with dropdowns"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;

&lt;p&gt;I used to always google "github markdown dropdown" and used &lt;a href="https://gist.github.com/citrusui/07978f14b11adada364ff901e27c7f61"&gt;this link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;They are created using markdown like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;details&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;How do I dropdown?&lt;span class="nt"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
This is how you dropdown.
&lt;span class="nt"&gt;&amp;lt;/details&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#saved-replies"&gt;
  &lt;/a&gt;
  Saved Replies
&lt;/h2&gt;

&lt;p&gt;Just so that you and I don't have to remember this article or that GitHub gist in the future, you can make it easy by creating a saved reply. Those are accessed in the bar above the text area when creating a pull request description.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u3FAbZiR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jdjvrhjze1dhng5hyl2c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u3FAbZiR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jdjvrhjze1dhng5hyl2c.png" alt="saved replies button"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can create a new saved reply through that button and make a dropdown saved reply. That's going to save me a bunch of time!&lt;/p&gt;

</description>
      <category>github</category>
    </item>
    <item>
      <title>Automate server intrusion detection and banning with Fail2ban</title>
      <author>Waqar Ahmed</author>
      <pubDate>Tue, 29 Jun 2021 18:23:31 +0000</pubDate>
      <link>https://dev.to/waqar/automate-server-intrusion-detection-and-banning-with-fail2ban-4pgk</link>
      <guid>https://dev.to/waqar/automate-server-intrusion-detection-and-banning-with-fail2ban-4pgk</guid>
      <description>&lt;p&gt;A Fail2Ban installation monitors server access logs and automatically bans IP addresses of bots and attacking users in iptables. Fail2Ban analyses server logs and identifies a pattern where a suspicious user or bot is trying to access restricted areas on the server. Brute force attacks repeatedly fail and use combinations of login credentials on after another. Fail to ban can detect failed login attempts on SSH and Apache webserver.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fail2ban-installation"&gt;
  &lt;/a&gt;
  Fail2Ban Installation
&lt;/h2&gt;

&lt;p&gt;Installation is straight forward update &lt;code&gt;apt-get&lt;/code&gt; and run instal fail2ban as a root user. Theses are Debian/Ubuntu commands for CentOS &lt;code&gt;yum&lt;/code&gt; would replace &lt;code&gt;apt-get&lt;/code&gt; and paths/locations might differ for configuration files. Check &lt;a href="https://www.linode.com/docs/security/using-fail2ban-to-secure-your-server-a-tutorial/"&gt;this&lt;/a&gt; tutorial for non-Debian operating systems.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get update
&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get &lt;span class="nb"&gt;install &lt;/span&gt;fail2ban
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#fail2ban-configuration"&gt;
  &lt;/a&gt;
  Fail2Ban Configuration
&lt;/h2&gt;

&lt;p&gt;Fail2Ban can keep server admin updated with emails but to keep it simple, let’s not configure this additional feature. The configuration file /etc/fail2ban/fail2ban.conf is superseded by fail2ban.local file. So this local config file needs to be created to keep additional settings. Here is part of the default installation config file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ini"&gt;&lt;code&gt;&lt;span class="nn"&gt;[Definition]&lt;/span&gt;
&lt;span class="c"&gt;# Option: loglevel
# Notes.: Set the log level output.
#         CRITICAL
#         ERROR
#         WARNING
#         NOTICE
#         INFO
#         DEBUG
# Values: [ LEVEL ]  Default: ERROR
#
&lt;/span&gt;&lt;span class="py"&gt;loglevel&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;INFO&lt;/span&gt;
&lt;span class="py"&gt;logtarget&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/var/log/fail2ban.log&lt;/span&gt;
&lt;span class="c"&gt;# Options: dbfile
# Notes.: Set the file for the fail2ban persistent data to be stored.
#         A value of ":memory:" means database is only stored in memory 
#         and data is lost when fail2ban is stopped.
#         A value of "None" disables the database.
# Values: [ None :memory: FILE ] Default: /var/lib/fail2ban/fail2ban.sqlite3
&lt;/span&gt;&lt;span class="py"&gt;dbfile&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/var/lib/fail2ban/fail2ban.sqlite3&lt;/span&gt;
&lt;span class="c"&gt;# Options: dbpurgeage
# Notes.: Sets age at which bans should be purged from the database
# Values: [ SECONDS ] Default: 86400 (24hours)
&lt;/span&gt;&lt;span class="py"&gt;dbpurgeage&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;86400&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Fail2ban focuses on failed SSH login attempts by default. Using custom config file jails for HTTP web server like Apache, FTP and mail server can be enabled.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fail2ban-apache-jail-configuration"&gt;
  &lt;/a&gt;
  Fail2Ban Apache Jail Configuration
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ini"&gt;&lt;code&gt;&lt;span class="nn"&gt;[apache-auth]&lt;/span&gt;
&lt;span class="py"&gt;enabled&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
&lt;span class="py"&gt;port&lt;/span&gt;     &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;http,https&lt;/span&gt;
&lt;span class="py"&gt;logpath&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/var/log/apache2/error.log&lt;/span&gt;
&lt;span class="py"&gt;maxretry&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;3&lt;/span&gt;
&lt;span class="py"&gt;findtime&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;600&lt;/span&gt;
&lt;span class="py"&gt;bantime&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;1h&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So here we have set up fail2ban to look apache2 error logs for brute force attack using one password after another. Three failed login attempts within 600 seconds would lead to an IP address ban for an hour. Restart fail2ban for the changes to take effect sudo systemctl restart fail2ban. To enable fail2ban service to start with boot use sudo systemctl enable fail2ban.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-apache-error-log-jails"&gt;
  &lt;/a&gt;
  Other Apache error log jails
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#apache-no-script"&gt;
  &lt;/a&gt;
  Apache no script
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ini"&gt;&lt;code&gt;&lt;span class="nn"&gt;[apache-noscript]&lt;/span&gt;
&lt;span class="py"&gt;port&lt;/span&gt;     &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;http,https&lt;/span&gt;
&lt;span class="py"&gt;logpath&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;%(apache_error_log)s&lt;/span&gt;
&lt;span class="py"&gt;ignoreip&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;localhost or an IP&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Fail2ban analyses errors of not found .php, .asp, .pl scripts. Client attempting to exploit known scripts are banned.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#apache-overflows"&gt;
  &lt;/a&gt;
  Apache overflows
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ini"&gt;&lt;code&gt;&lt;span class="nn"&gt;[apache-overflows]&lt;/span&gt;
&lt;span class="py"&gt;logpath&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;%(apache_error_log)s&lt;/span&gt;
&lt;span class="py"&gt;maxretry&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Detects apache buffer overflow attempts by the client using long suspicious URLs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#apache-no-home"&gt;
  &lt;/a&gt;
  Apache no home
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ini"&gt;&lt;code&gt;&lt;span class="nn"&gt;[apache-nohome]&lt;/span&gt;
&lt;span class="py"&gt;port&lt;/span&gt;     &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;http,https&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Detects failures to find a home directory on a server.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#apache-bot-search"&gt;
  &lt;/a&gt;
  Apache bot search
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ini"&gt;&lt;code&gt;&lt;span class="nn"&gt;[apache-botsearch]&lt;/span&gt;
&lt;span class="py"&gt;enabled&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
&lt;span class="py"&gt;port&lt;/span&gt;     &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;http,https&lt;/span&gt;
&lt;span class="py"&gt;maxretry&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Alternative to apache-noscript filter this filter aims at blocking specific URLs, script or webservices.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#apache-access-log-jails"&gt;
  &lt;/a&gt;
  Apache access log jails
&lt;/h3&gt;

&lt;p&gt;Beware, access logs of busy websites can be huge. Setting Fail2ban to monitor access log can have a negative impact on server performance. So think about costs and benefits of access log jails before enabling them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#apache-bad-bots"&gt;
  &lt;/a&gt;
  Apache bad bots
&lt;/h3&gt;

&lt;p&gt;Bans bots identified as spammer robots crawling the web for email addresses.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ini"&gt;&lt;code&gt;&lt;span class="nn"&gt;[apache-badbots]&lt;/span&gt;
&lt;span class="py"&gt;port&lt;/span&gt;     &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;http,https&lt;/span&gt;
&lt;span class="py"&gt;logpath&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;%(apache_access_log)s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#php-url-fopen"&gt;
  &lt;/a&gt;
  PHP URL fopen
&lt;/h3&gt;

&lt;p&gt;Matches and blocks fopen URL PHP injection attacks&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ini"&gt;&lt;code&gt;&lt;span class="nn"&gt;[php-url-fopen]&lt;/span&gt; 
&lt;span class="py"&gt;port&lt;/span&gt;    &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;http,https&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#webmail-jails"&gt;
  &lt;/a&gt;
  Webmail jails
&lt;/h3&gt;

&lt;p&gt;Jails for roundcude, openwebmail and horde are available, just add the location of log file in these jails.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ini"&gt;&lt;code&gt;&lt;span class="nn"&gt;[roundcube-auth]&lt;/span&gt;
&lt;span class="py"&gt;port&lt;/span&gt;     &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;http,https&lt;/span&gt;
&lt;span class="py"&gt;logpath&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;%(roundcube_errors_log)s&lt;/span&gt;
&lt;span class="c"&gt;#if roundcube logs to journal then use following.
#backend = %(syslog_backend)s
&lt;/span&gt;&lt;span class="nn"&gt;[openwebmail]&lt;/span&gt;
&lt;span class="py"&gt;port&lt;/span&gt;     &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;http,https&lt;/span&gt;
&lt;span class="py"&gt;logpath&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/var/log/openwebmail.log&lt;/span&gt;
&lt;span class="nn"&gt;[horde]&lt;/span&gt;
&lt;span class="py"&gt;port&lt;/span&gt;     &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;http,https&lt;/span&gt;
&lt;span class="py"&gt;logpath&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/var/log/horde/horde.log&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#fail2ban-custom-filters-and-jail-for-wordpress"&gt;
  &lt;/a&gt;
  Fail2ban custom filters and jail for WordPress
&lt;/h2&gt;

&lt;p&gt;Error logs have multiple failed requests to WordPress login URLs or files like wp_login.php. This blog post creates a custom regular expression to scan failed WordPress logins in the error log. Using this RegEx a new filter file is created in Fail2ban directory. Once the filter is in place a [wordpress] jail can be added in jail.local. You can easily create your own filters with custom RegEx. Try online regular expression services like regex101.com with your error log to create a regular expression.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fail2ban-client-and-commands"&gt;
  &lt;/a&gt;
  Fail2ban client and commands
&lt;/h2&gt;

&lt;p&gt;Use Fail2ban client to setup configuration or check status of jail and banned IP addresses.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Check status of Fail2ban
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo fail2ban-client status
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Check status of Apache jail
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo fail2ban-client status apache
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Ban an IP address directly with client
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo fail2ban-client set apache banip x.x.x.x
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Similarly unban an IP address
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo fail2ban-client set apache unbanip x.x.x.x
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Restart after editing jail configuration for changes to take effect
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo systemctl restart fail2ban
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Check firewall rules added to iptables
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo iptables -L
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Start fail2ban on boot
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo systemctl enable fail2ban
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;How To Protect an Apache Server with Fail2Ban on Ubuntu 14.04 — By &lt;a href="https://www.digitalocean.com/community/users/jellingwood"&gt;Justin Ellingwood&lt;/a&gt;, &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-protect-an-apache-server-with-fail2ban-on-ubuntu-14-04"&gt;Digitalocean.com/community&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Fail2ban jail configuration — &lt;a href="https://github.com/fail2ban/fail2ban/blob/master/config/jail.conf"&gt;Github.com/fail2ban&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Set Up Fail2ban To Protect An Apache Web Server — &lt;a href="https://devops.ionos.com/users/profile/hitjethva"&gt;hitjethva&lt;/a&gt;, &lt;a href="https://devops.ionos.com/tutorials/set-up-fail2ban-to-protect-an-apache-web-server/"&gt;devops.ionos.com/tutorials&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;A Tutorial for Using Fail2ban to Secure Your Server — &lt;a href="https://www.linode.com/docs/security/using-fail2ban-to-secure-your-server-a-tutorial/"&gt;Linode.com&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>linux</category>
      <category>security</category>
      <category>laravel</category>
      <category>php</category>
    </item>
  </channel>
</rss>
