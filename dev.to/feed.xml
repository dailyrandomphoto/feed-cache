<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Introduction to Scramjet Data Processing Platform</title>
      <author>Łukasz Kamieniecki-Mruk</author>
      <pubDate>Thu, 28 Oct 2021 15:35:50 +0000</pubDate>
      <link>https://dev.to/scramjetorg/introduction-to-scramjet-data-processing-platform-5bof</link>
      <guid>https://dev.to/scramjetorg/introduction-to-scramjet-data-processing-platform-5bof</guid>
      <description>&lt;h2&gt;
  &lt;a href="#new-engine-for-serverless-data-processing-applications"&gt;
  &lt;/a&gt;
  New engine for serverless data processing applications
&lt;/h2&gt;

&lt;p&gt;Our Scramjet data apps engine has its approach to deploying and running serverless applications; in several aspects different from solutions in areas such as software buses, integration platforms, and FaaS offerings. This article explains our approach. We hope you might find it interesting.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-in-1-data-processing-platform"&gt;
  &lt;/a&gt;
  “3 in 1” data processing platform
&lt;/h2&gt;

&lt;p&gt;The heart of our solution and its data engine is called “Scramjet Transform Hub”. It’s available as a standalone software package on GitHub and will be the core element of our Scramjet Cloud Platform.&lt;/p&gt;

&lt;p&gt;We name our approach “3 in 1 data processing platform” as it combines 3 concepts into one solution:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;data processing engine&lt;/li&gt;
&lt;li&gt;serverless data applications&lt;/li&gt;
&lt;li&gt;complete API with dedicated CLI (covering both I/O and management endpoints)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W5xw32Gc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b5e3ej4sd1hinbmqlihz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W5xw32Gc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b5e3ej4sd1hinbmqlihz.png" alt="Scramjet “3 in 1” data processing platform" width="880" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s look at each point separately.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#data-processing-engine"&gt;
  &lt;/a&gt;
  Data processing engine
&lt;/h2&gt;

&lt;p&gt;Scramjet Transform Hub creates unified deployment, runtime, management, and execution plan for serverless applications (sequences).&lt;/p&gt;

&lt;p&gt;In short, STH allows you to start data processing in 3 simple steps:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Deploy&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;si sequence send &amp;lt;sequence-package-tar&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;Run&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;si sequence run &amp;lt;sequence-id&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;Send data&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl &lt;span class="nt"&gt;-H&lt;/span&gt; “Content-Type: application/octet-stream” — data-binary “@file.txt” &amp;lt;instance-input-endpoint&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You are free to post to our sequence simple HTTP requests, file, send a stream or even read data from another stream or API.&lt;br&gt;
Please notice that, contrary to typical microservices architectures, there is no expensive step of building containerized image, pushing it to the registry, and then downloading it to the container orchestrator to run the microservice. You can move from directory with code to sequence processing your data in less than a minute.&lt;/p&gt;

&lt;p&gt;We do package our apps but their size is measured in kilobytes, not in hundreds of megabytes as in the case of container images. Minimal app design gives better performance, optimized resources usage, and a simpler CI/CD process.&lt;/p&gt;

&lt;p&gt;We have prepared a short, 3-minute demo, showing the whole application (sequence) preparation, deployment, and run process on our YouTube channel. Check it below:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/020MLhJsdG4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#serverless-data-applications"&gt;
  &lt;/a&gt;
  Serverless data applications
&lt;/h2&gt;

&lt;p&gt;We call the user applications sequences. They have capabilities to perform continuous data and stream processing, they have no run time limits or input data size limits.&lt;/p&gt;

&lt;p&gt;Each sequence has a straightforward structure — it’s a directory with at least two core files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;package.json&lt;/strong&gt; — simple JSON file describing sequence metadata&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;index.[js/ts]&lt;/strong&gt; — JavaScript or TypeScript file with sequence code. You are free to structure your app in multiple files if you like.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Below there is the content of one of our sample “hello world” sequences, yielding integer numbers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;DataStream&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;scramjet&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="err"&gt;​&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;DataStream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
 &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;})&lt;/span&gt;
 &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can find intro readme and more samples in our dedicated repository &lt;a href="https://github.com/scramjetorg/scramjet-cloud-docs"&gt;scramjetorg/scramjet-cloud-docs&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#api-amp-cli"&gt;
  &lt;/a&gt;
  API &amp;amp; CLI
&lt;/h2&gt;

&lt;p&gt;Let’s look at Transform Hub API via commands available in our CLI:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;pack [options] — package directory with sequence code into tar.gz file&lt;/li&gt;
&lt;li&gt;host [command] — monitor and check the version of the host&lt;/li&gt;
&lt;li&gt;config|c [command] — display and manage config&lt;/li&gt;
&lt;li&gt;sequence|seq [command] — pack, deploy, manage and monitor sequences (app templates)&lt;/li&gt;
&lt;li&gt;instance|inst [command] — manage and monitor instances (running apps)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The above commands (and related API) cover complete management of the data processing engine and serverless apps running on top of it.&lt;br&gt;
Once started, each running instance exposes the following API endpoints:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;input, output&lt;/li&gt;
&lt;li&gt;stdin, stdout, stderr&lt;/li&gt;
&lt;li&gt;log, monitoring&lt;/li&gt;
&lt;li&gt;_event (to instance), event (from instance)&lt;/li&gt;
&lt;li&gt;stop, kill&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This approach follows the “batteries included” approach, and each running instance is handled in the same way.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-our-scramjet-cloud-platform"&gt;
  &lt;/a&gt;
  Why our Scramjet Cloud Platform
&lt;/h2&gt;

&lt;p&gt;Our approach shown above has several benefits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Freedom and flexibility — no artificial limits on data size and execution time of apps; no “execution time limit” or “payload size limit”.&lt;/li&gt;
&lt;li&gt;Great price for value-effective data workflows with fully programmable data acquisition, ability to create patterns between instances performing various data processing tasks.&lt;/li&gt;
&lt;li&gt;Performance by design — instantaneous execution of data without proxies, queues, and gateways. Light apps with minimal resources consumption.&lt;/li&gt;
&lt;li&gt;Works cross-native (Edge &amp;amp; Cloud) — out of the box spanning between locations. Run the same type of apps on edge or smart devices via standalone Scramjet Transform Hub and in our Scramjet Cloud Platform.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As a summary, below you will find a diagram showing various patterns of chaining data processing on our platform:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IKbmcm4l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9aezt5ciq23jx9o3ktzu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IKbmcm4l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9aezt5ciq23jx9o3ktzu.png" alt="Scramjet Transform Hub data flows" width="880" height="437"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>bigdata</category>
      <category>serverless</category>
    </item>
    <item>
      <title>The Learning Path to GraphQL for Fullstack Developers</title>
      <author>Praveen Durairaju</author>
      <pubDate>Thu, 28 Oct 2021 15:25:24 +0000</pubDate>
      <link>https://dev.to/praveenweb/the-learning-path-to-graphql-for-fullstack-developers-10bp</link>
      <guid>https://dev.to/praveenweb/the-learning-path-to-graphql-for-fullstack-developers-10bp</guid>
      <description>&lt;p&gt;&lt;a href="https://hasura.io/graphql/"&gt;GraphQL&lt;/a&gt; has been around for 6 years now and has really empowered frontend and fullstack developers with the ability to build backends easily. With tools like Hasura, developers focus only on writing custom logic code specific to the app, taking away the repetitive CRUD APIs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://hasura.io"&gt;Hasura&lt;/a&gt; gives you instant GraphQL and REST APIs on all your data. It sits in between your application and the data sources to give you the goodness of GraphQL, Authorization and a slew of security and monitoring features. The core Hasura GraphQL Engine is &lt;a href="https://github.com/hasura/graphql-engine"&gt;open source&lt;/a&gt; and we have a &lt;a href="https://cloud.hasura.io/signup"&gt;Cloud&lt;/a&gt; offering for managing infra and advanced production ready features.&lt;/p&gt;

&lt;p&gt;We at Hasura, along with the community have created a series of &lt;a href="https://github.com/hasura/learn-graphql"&gt;open source tutorials&lt;/a&gt; starting from GraphQL Basics, Hasura Basics to full fledged frontend tutorials in various frameworks. You name it, we have it :)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vgwpp_Ri--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kt06ianpblcgyqa62yz5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vgwpp_Ri--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kt06ianpblcgyqa62yz5.png" alt="Image description" width="880" height="240"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#begin-your-journey-with-graphql-basics"&gt;
  &lt;/a&gt;
  Begin your journey with GraphQL Basics
&lt;/h2&gt;

&lt;p&gt;If you are completely new to GraphQL, we recommend taking our &lt;a href="https://hasura.io/learn/graphql/intro-graphql/introduction/"&gt;Introduction to GraphQL&lt;/a&gt; course. This will get you from Zero to GraphQL in less than an hour.&lt;/p&gt;

&lt;p&gt;The key to learning GraphQL is to understand that it is just a query language and popular implementations on the client and server leverage existing JSON standards for requests and responses over HTTP.&lt;/p&gt;

&lt;p&gt;Once you are familiar with this concept, it will become easier to grok the benefits of GraphQL. The Intro to GraphQL tutorial covers some fundamental concepts like&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hasura.io/learn/graphql/intro-graphql/what-is-graphql/"&gt;What is GraphQL?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hasura.io/learn/graphql/intro-graphql/graphql-vs-rest/"&gt;GraphQL vs REST&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hasura.io/learn/graphql/intro-graphql/core-concepts/"&gt;Core Concepts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hasura.io/learn/graphql/intro-graphql/introspection/"&gt;Introspection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The three most common things you will encounter with GraphQL are&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Queries&lt;/li&gt;
&lt;li&gt;Mutations&lt;/li&gt;
&lt;li&gt;Subscriptions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This along with the type system makes GraphQL the powerful self-serve API that everyone can use intuitively.&lt;/p&gt;

&lt;p&gt;You will also understand the different approaches one can take while writing a &lt;a href="https://hasura.io/learn/graphql/intro-graphql/graphql-server/"&gt;GraphQL Server&lt;/a&gt;. Finally you will learn how &lt;a href="https://hasura.io/learn/graphql/intro-graphql/graphql-client/"&gt;GraphQL Clients&lt;/a&gt; make data fetching, consuming realtime subscriptions really easy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup-the-backend-with-hasura"&gt;
  &lt;/a&gt;
  Setup the backend with Hasura
&lt;/h2&gt;

&lt;p&gt;Once you have understood what GraphQL is and the core concepts around it, you can progress to the easiest step in the journey. i.e Setting up a GraphQL API with Hasura.&lt;/p&gt;

&lt;p&gt;We have put together a concise tutorial for &lt;a href="https://hasura.io/learn/graphql/hasura/introduction/"&gt;Hasura Basics&lt;/a&gt; to create a production ready GraphQL API from scratch without writing much code. You will be able to use the power of database, set up Authorization rules for security and write custom business logic code specific to a realtime use case.&lt;/p&gt;

&lt;p&gt;Once you go over this Hands-on tutorial, which should take about ~30 mins to an hour, you will be able to start integrating the GraphQL API with any frontend app.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#optional-database-ninja"&gt;
  &lt;/a&gt;
  Optional: Database Ninja
&lt;/h3&gt;

&lt;p&gt;Hasura connects to a database (either PostgreSQL, MySQL or MS SQL etc) to give you a GraphQL API. Now if you are a frontend developer who is new to the database ecosystem, then you are covered with our &lt;a href="https://hasura.io/learn/#database-tutorials"&gt;database series&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The database tutorials will teach you core concepts around data modeling with examples of SQL statements and key fundamentals to know just enough to deploy an app in production.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#integrate-graphql-backend-with-frontend"&gt;
  &lt;/a&gt;
  Integrate GraphQL backend with frontend
&lt;/h2&gt;

&lt;p&gt;Once you are familiar with GraphQL and setting up a backend with Hasura, you can start trying out the real power of GraphQL in the frontend app. In this frontend series, you will learn how modern GraphQL client side tooling can be integrated with a GraphQL backend like Hasura.&lt;/p&gt;

&lt;p&gt;There are tutorials available in &lt;a href="https://hasura.io/learn/#front-end-tutorials"&gt;most popular frontend frameworks&lt;/a&gt; and mobile first languages.&lt;/p&gt;

&lt;p&gt;The highlights of this series are the examples around consuming realtime subscriptions and patterns around handling data in cache.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gq3nIDMo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/olbk2sbvc2yu5o6zum72.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gq3nIDMo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/olbk2sbvc2yu5o6zum72.png" alt="Image description" width="841" height="655"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#join-our-graphql-learning-circles"&gt;
  &lt;/a&gt;
  Join our GraphQL Learning Circles
&lt;/h2&gt;

&lt;p&gt;Starting from November 2021, We’re going to host GraphQL Learning Circles to go over the various tutorials that we and the GraphQL community have created and contributed to on a weekly basis. If you’d like to host a GraphQL Learning Circle reach out to us on &lt;a href="https://hasura.io/discord"&gt;discord&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Do subscribe us on &lt;a href="https://www.youtube.com/c/HasuraHQ/"&gt;YouTube&lt;/a&gt; to get notified about the schedule for these live tutorials.&lt;/p&gt;

&lt;p&gt;We would love to hear what you would like to see on the Hasura Learn portal. We are constantly updating the tutorials to keep in pace with industry standard language and framework versions and best practices.&lt;/p&gt;

&lt;p&gt;Do check it out and spread the love :)&lt;/p&gt;

</description>
      <category>graphql</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>10 VS Code extensions every Frontend Developer should use</title>
      <author>Jonny Coder</author>
      <pubDate>Thu, 28 Oct 2021 15:22:57 +0000</pubDate>
      <link>https://dev.to/jcc/10-vs-code-extensions-every-frontend-developer-should-use-3608</link>
      <guid>https://dev.to/jcc/10-vs-code-extensions-every-frontend-developer-should-use-3608</guid>
      <description>&lt;p&gt;Hello everyone, my name is Johnny and I'm a frontend developer. In this blog post, I would like to share 10 VS code extensions that every frontend developer should use. The purpose of using these extensions is to write faster, cleaner, and more consistent code. Let's Jump in! &lt;/p&gt;
&lt;br&gt;Read More: &lt;b&gt;&lt;a href="https://www.codelivly.com/10-vs-code-extensions-every-frontend-developer-should-use/"&gt;10 VS Code extensions every Frontend Developer should use&lt;/a&gt;&lt;/b&gt;

</description>
    </item>
    <item>
      <title>How to Add a README to a GitHub Organization's Profile?</title>
      <author>Ludal 🚀</author>
      <pubDate>Thu, 28 Oct 2021 15:21:13 +0000</pubDate>
      <link>https://dev.to/iamludal/how-to-add-a-readme-to-a-github-organizations-profile-1cff</link>
      <guid>https://dev.to/iamludal/how-to-add-a-readme-to-a-github-organizations-profile-1cff</guid>
      <description>&lt;p&gt;You may already know how to add a README to your GitHub profile (if you don't, have a look at &lt;a href="https://dev.to/iamludal/why-your-github-profile-sucks-1ph9"&gt;this article&lt;/a&gt;), but did you know you can also add one to an organization's profile? 🤔&lt;/p&gt;

&lt;p&gt;To do so, just head over to the GitHub organization you want to customize, and create a new repository named &lt;code&gt;.github&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wBThQywT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nruc4qll5iyaytrlmm0k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wBThQywT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nruc4qll5iyaytrlmm0k.png" alt="GitHub special repository" width="880" height="421"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, GitHub already tells you that you discovered a special repository (once again 😛).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;⚠️ Make sure to set the repository's visibility to &lt;strong&gt;&lt;strong&gt;public&lt;/strong&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;From there, the only thing you have to do is creating a &lt;code&gt;profile/README.md&lt;/code&gt; file within this repository, that will show up in the organization homepage.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;⚠️ Make sure to create the &lt;code&gt;README.md&lt;/code&gt; within the &lt;code&gt;profile&lt;/code&gt; directory.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pBNRyOcR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ivnsybnfd8zts2hk9bsz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pBNRyOcR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ivnsybnfd8zts2hk9bsz.png" alt="Editing the README.md file" width="880" height="344"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;And here's the final result, on the organization's GitHub homepage:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6x4RfHLV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/amfrvl9oyomdrhv26ap8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6x4RfHLV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/amfrvl9oyomdrhv26ap8.png" alt="Final Result" width="880" height="739"&gt;&lt;/a&gt; &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#other-articles-by-me"&gt;
  &lt;/a&gt;
  Other Articles by Me
&lt;/h2&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/iamludal" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4NpUAfad--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--R4K6fNrt--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/567699/f02ae8e8-2ddb-470c-bee5-19226d02f324.jpg" alt="iamludal"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/iamludal/why-your-github-profile-sucks-1ph9" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Why Your GitHub Profile Sucks?&lt;/h2&gt;
      &lt;h3&gt;Ludal 🚀 ・ Feb 3 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#github&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tips&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#profile&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#design&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/iamludal" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4NpUAfad--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--R4K6fNrt--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/567699/f02ae8e8-2ddb-470c-bee5-19226d02f324.jpg" alt="iamludal"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/iamludal/custom-react-hooks-usecounter-5a73" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Custom React Hooks: useCounter&lt;/h2&gt;
      &lt;h3&gt;Ludal 🚀 ・ Oct 10 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.github.com/en/organizations/collaborating-with-groups-in-organizations/customizing-your-organizations-profile"&gt;https://docs.github.com/en/organizations/collaborating-with-groups-in-organizations/customizing-your-organizations-profile&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    <item>
      <title>#DevCard #Style #github #markdown</title>
      <author>kolpaja</author>
      <pubDate>Thu, 28 Oct 2021 15:18:56 +0000</pubDate>
      <link>https://dev.to/kolpaja/devcard-style-github-markdown-cm8</link>
      <guid>https://dev.to/kolpaja/devcard-style-github-markdown-cm8</guid>
      <description>&lt;p&gt;Hello there!&lt;/p&gt;

&lt;p&gt;Since we have to read a lot of things daily here there is an amazing show off for your reading.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4Zx6aTSD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9rq6trbuyxh1cblrfnoy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4Zx6aTSD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9rq6trbuyxh1cblrfnoy.png" alt="Image description" width="880" height="500"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And the most important is that you can use this everywhere you want to have a cool/better presentation of your path.&lt;/p&gt;

&lt;p&gt;How you get it?&lt;br&gt;
&lt;a href="https://app.daily.dev/devcard"&gt;https://app.daily.dev/devcard&lt;/a&gt;&lt;br&gt;
click the link to generate your own!&lt;/p&gt;

&lt;p&gt;and start customizing the one you like: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BC4Kz_rN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rrn2egrgiox3u8w5f1l9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BC4Kz_rN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rrn2egrgiox3u8w5f1l9.png" alt="Image description" width="880" height="675"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally go to the article to add that to your #github profile:&lt;br&gt;
&lt;a href="https://daily.dev/blog/adding-the-daily-devcard-to-your-github-profile"&gt;https://daily.dev/blog/adding-the-daily-devcard-to-your-github-profile&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy Coding!!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>20 JavaScript One-Liners That Will Help You Code Like a Pro</title>
      <author>Jonny Coder</author>
      <pubDate>Thu, 28 Oct 2021 15:16:45 +0000</pubDate>
      <link>https://dev.to/jcc/20-javascript-one-liners-that-will-help-you-code-like-a-pro-1hj7</link>
      <guid>https://dev.to/jcc/20-javascript-one-liners-that-will-help-you-code-like-a-pro-1hj7</guid>
      <description>&lt;p&gt; &lt;span&gt;JavaScript keeps growing and growing20 JavaScript One-Liners That Will Help You Code Like, opening doors for new “to be tech geeks” in the market as it’s one of the easiest languages to start. (is it really?)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;It’s true that JavaScript can do a lot of blazing things! and there is just so much to learn.&lt;/p&gt;
&lt;p&gt;And whether you’re new to JavaScript or more of a professional developer it’s always good to learn something new.&lt;/p&gt;
&lt;p&gt;I’m gonna go over some really helpful one-liners (20 + Bonus) that can help you boost your productivity and can help in debugging code. &lt;/p&gt;
&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/20-javascript-one-liners-that-will-help-you-code-like-a-pro/&amp;amp;ved=2ahUKEwip-5yjmNPzAhXk_XMBHd2yDaMQFnoECAkQAQ&amp;amp;usg=AOvVaw285TovlnD0Mc9Cm8Rcycp3"&gt;20 JavaScript One-Liners That Will Help You Code Like a Pro&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>18 amazing 🤩 GitHub repositories that will help you 🪄 make a Beautiful Project </title>
      <author>Jonny Coder</author>
      <pubDate>Thu, 28 Oct 2021 15:16:19 +0000</pubDate>
      <link>https://dev.to/jcc/18-amazing-github-repositories-that-will-help-you-make-a-beautiful-project-3i36</link>
      <guid>https://dev.to/jcc/18-amazing-github-repositories-that-will-help-you-make-a-beautiful-project-3i36</guid>
      <description>&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Today I would like to give examples of good GitHub repositories that will help you implement complex animations, as well as useful functions in your projects.&lt;/p&gt;
&lt;p&gt;So let's get started &lt;/p&gt;

&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/10-awesome-github-repos-every-web-developer-should-know/&amp;amp;ved=2ahUKEwiw1e_qpqbzAhU78HMBHVvBAWkQFnoECBAQAQ&amp;amp;usg=AOvVaw1YdY91hlP3suK6HGMF0MXW"&gt;18 amazing 🤩 GitHub repositories that will help you 🪄 make a Beautiful Project&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Tools for Web Designing</title>
      <author>Ganesh Patil</author>
      <pubDate>Thu, 28 Oct 2021 15:13:07 +0000</pubDate>
      <link>https://dev.to/ganeshpatil386386/tools-for-web-designing-11pi</link>
      <guid>https://dev.to/ganeshpatil386386/tools-for-web-designing-11pi</guid>
      <description>&lt;p&gt;Designing is just great thing and demanding skills in digital era of development everyone want to build designing skills and lot of different opportunities are available for designers like Graphic Designs, Product Designs, UI/UX designs Mobile applications designs and etc... but the important thing is to used right tool for right designs. here are some free tools which I used for my personal projects for designing and development.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-adobe-xd"&gt;
  &lt;/a&gt;
  &lt;strong&gt;1. Adobe Xd&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Adobe Xd is great tool for designing and development amazing libraries are available inside the adobe xd, you can also used it for various purpose Logo Designs, Product Designs , Web designs etc. get the XD from link &lt;/p&gt;

&lt;p&gt;XD:&lt;a href="https://creativecloud.adobe.com/apps/download/xd"&gt;https://creativecloud.adobe.com/apps/download/xd&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-figma"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2. Figma&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Figma is widely usable design platform its used for all type of designs and provide lot of supportive libraries and features like live application interface also Mobile interface available for users.&lt;/p&gt;

&lt;p&gt;Figma: &lt;a href="https://www.figma.com/downloads/"&gt;https://www.figma.com/downloads/&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-justinmind"&gt;
  &lt;/a&gt;
  &lt;strong&gt;3. Justinmind&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Justinmind is great tool for Realtime web designs and mobile application interface its completely amazing experience with JUSTINMIND is great tools for Web Designers.&lt;/p&gt;

&lt;p&gt;JustinMind: &lt;a href="https://www.justinmind.com/"&gt;https://www.justinmind.com/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>design</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to Improve Your Integration Tests Using OpenTelemetry </title>
      <author>Tom Zach</author>
      <pubDate>Thu, 28 Oct 2021 15:12:32 +0000</pubDate>
      <link>https://dev.to/aspecto/how-to-use-opentelemetry-to-improve-your-integration-tests-5h37</link>
      <guid>https://dev.to/aspecto/how-to-use-opentelemetry-to-improve-your-integration-tests-5h37</guid>
      <description>&lt;p&gt;This article is part of the &lt;a href="https://www.aspecto.io/?utm_source=dev.to&amp;amp;utm_medium=post&amp;amp;utm_campaign=how-to-use-opentelemetry-to-improve-your-integration-tests"&gt;Aspecto&lt;/a&gt; &lt;strong&gt;Hello World series&lt;/strong&gt;, where we tackle microservices-related topics for you. Our team searches the web for common issues, then we solve them ourselves and bring you complete how-to guides. Aspecto is an OpenTelemetry-based distributed tracing platform for developers and teams of distributed applications.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: this tutorial assumes you are familiar with OpenTelemetry, traces, and spans. If you want to learn more about OpenTelemetry, check out &lt;strong&gt;&lt;a href="https://www.aspecto.io/opentelemetry-bootcamp/?utm_source=dev.to&amp;amp;utm_medium=post&amp;amp;utm_campaign=how-to-use-opentelemetry-to-improve-your-integration-tests"&gt;The OpenTelemetry Bootcamp&lt;/a&gt;&lt;/strong&gt;. This is a free, vendor-neutral, six-episode video series that brings you everything you need to know to get started with OpenTelemetry, from zero to hero.&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;The evolution of &lt;a href="https://opentelemetry.io/"&gt;OpenTelemetry (OTEL)&lt;/a&gt; in recent years has made it a lot easier for developers that are interested in better understanding their microservices – to instrument their services and gain that desired view.&lt;/p&gt;

&lt;p&gt;But so far, the usage has been mainly for debugging production issues.&lt;/p&gt;

&lt;p&gt;What if I told you there’s a way of utilizing OpenTelemetry’s power to prevent production issues, by using it in your integration test environment?&lt;/p&gt;

&lt;p&gt;Sounds interesting? read on as I show you how it can be done easily.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-it-would-look-like-to-use-opentelemetry-in-an-integration-test"&gt;
  &lt;/a&gt;
  What it would look like to use OpenTelemetry in an integration test
&lt;/h2&gt;

&lt;p&gt;The end goal is to instrument our service under test while the test is running and make assertions on the created spans.&lt;/p&gt;

&lt;p&gt;We call this: &lt;strong&gt;Trace-Based Testing&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Now you might be starting to think practically on such an implementation and say – “Oh, so I need to integrate the OpenTelemetry SDK now in my test run? Where do I store the spans? How do I get them while the test is already running so that I can assert?”&lt;/p&gt;

&lt;p&gt;Well, those questions are legit indeed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Luckily, you don’t need to implement all that on your own.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This use case is exactly what has led to the creation of &lt;a href="https://github.com/aspecto-io/malabi"&gt;Malabi&lt;/a&gt;, an open-source that wraps the OpenTelemetry SDK and does all this setup for you so that you can simply add it to your project and start asserting.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;P.S. You can read more about the concept of Trace-Based testing and Malabi &lt;a href="https://www.aspecto.io/blog/trace-based-testing-with-opentelemetry-meet-open-source-malabi/?utm_source=dev.to&amp;amp;utm_medium=post&amp;amp;utm_campaign=how-to-use-opentelemetry-to-improve-your-integration-tests"&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--paM7h7pc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q4p7o51qxxgouned5yt7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--paM7h7pc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q4p7o51qxxgouned5yt7.png" alt="Malabi open source logo" width="810" height="238"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-malabi-help"&gt;
  &lt;/a&gt;
  How does Malabi help?
&lt;/h2&gt;

&lt;p&gt;(Practical guide below, this is the theoretical part)&lt;/p&gt;

&lt;p&gt;The way it works is simple. &lt;/p&gt;

&lt;p&gt;You add Malabi to your project by using npm or yarn and add 3 lines of code at the top of the main file of the service.&lt;/p&gt;

&lt;p&gt;Then, Malabi uses OpenTelemetry SDK for you and creates spans as your service is run (in the context of an integration test – for example in CI).&lt;/p&gt;

&lt;p&gt;Malabi then &lt;strong&gt;stores these spans in memory and exposes an endpoint&lt;/strong&gt; that lets you access these spans, and gives you utility functions to extract the data that you need for your assertions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-practical-part-how-to-take-your-existing-nodejs-microservice-and-utilize-opentelemetry-to-make-assertions-in-an-integration-test"&gt;
  &lt;/a&gt;
  The practical part – how to take your existing NodeJs microservice and utilize OpenTelemetry to make assertions in an integration test
&lt;/h2&gt;

&lt;p&gt;The following code is the ExpressJS code of the microservice that we want to test.&lt;/p&gt;

&lt;p&gt;It is a simple service that uses SQLite as an in-memory database to store &amp;amp; retrieve data about users. It also stores some of the fetched data in a redis cache for faster retrieval. &lt;/p&gt;

&lt;p&gt;Here is the code in the index.ts file:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#part-1-the-microservice-code"&gt;
  &lt;/a&gt;
  Part 1 – The microservice code
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;* Note that you can find the complete code in the Malabi &lt;a href="https://github.com/aspecto-io/malabi/tree/master/examples"&gt;examples&lt;/a&gt; folder:&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;index.js file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import * as malabi from 'malabi';
malabi.instrument();
malabi.serveMalabiFromHttpApp(18393);

import axios from 'axios';
import express from 'express';
import body from "body-parser";
import User from "./db";
import { getRedis } from "./redis";
import Redis from "ioredis";
let redis: Redis.Redis;

getRedis().then((redisConn) =&amp;gt; {
   redis = redisConn;
   app.listen(PORT, () =&amp;gt; console.log(`service-under-test started at port ${PORT}`));

})
const PORT = process.env.PORT || 8080;

const app = express();
app.use(body.json())
app.get('/',(req,res)=&amp;gt;{
   res.sendStatus(200);
})
app.get('/todo', async (req, res) =&amp;gt; {
   try {
       const todoItem = await axios('https://jsonplaceholder.typicode.com/todos/1');
       res.json({
           title: todoItem.data.title,
       });
   } catch (e) {
       res.sendStatus(500);
       console.error(e, e);
   }
});

app.get('/users', async (req, res) =&amp;gt; {
   try {
       const users = await User.findAll({});
       res.json(users);
   } catch (e) {
       res.sendStatus(500);
       console.error(e, e);
   }
});

app.get('/users/:firstName', async (req, res) =&amp;gt; {
   try {
       const firstName = req.param('firstName');
       if (!firstName) {
           res.status(400).json({ message: 'Missing firstName in url' });
           return;
       }

       let users = [];
       users = await redis.lrange(firstName, 0, -1);
       if (users.length === 0) {
           users = await User.findAll({ where: { firstName } });
           if (users.length !== 0) {
               await redis.lpush(firstName, users)
           }
       }

       res.json(users);
   } catch (e) {
       res.sendStatus(500);
       console.error(e, e);
   }
});

app.post('/users', async (req, res) =&amp;gt; {
   try {
       const { firstName, lastName } = req.body;
       const user = await User.create({ firstName, lastName });
       res.json(user);
   } catch (e) {
       res.sendStatus(500);
   }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above file, you see all the endpoints of the microservice. Mostly self-explanatory – fetching, storing data in SQLite DB / Redis as cache.&lt;/p&gt;

&lt;p&gt;But notice the top three lines where the Malabi magic happens:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import * as malabi from 'malabi';
malabi.instrument();
malabi.serveMalabiFromHttpApp(18393);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Basically, we require Malabi (after running npm install –save-dev malabi of course).&lt;/p&gt;

&lt;p&gt;Then, Malabi instruments our service – meaning it will create spans (in memory) as it runs.&lt;/p&gt;

&lt;p&gt;At that point, we tell it to serve the created spans from port 18393.&lt;/p&gt;

&lt;p&gt;In part 2, you will see how we use Malabi util functions to query this endpoint and use Jest to make assertions on them. But first, let’s continue to understand our service.&lt;/p&gt;

&lt;p&gt;This db.ts file that handles SQLite with Sequelize:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Sequelize, DataTypes } from 'sequelize';

const sequelize = new Sequelize({
   dialect: 'sqlite',
   storage: ':memory:'
});

const User = sequelize.define('User', {
   firstName: {
       type: DataTypes.STRING,
       allowNull: false
   },
   lastName: {
       type: DataTypes.STRING
   }
});

User.sync({ force: true }).then(() =&amp;gt; {
   User.create({ firstName: "Rick", lastName: 'Sanchez' });
})

export default User;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The redis.ts file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { RedisMemoryServer } from 'redis-memory-server';
import Redis from "ioredis";
const redisServer = new RedisMemoryServer();

export async function getRedis() {
   const host = await redisServer.getHost();
   const port = await redisServer.getPort();
   const redis = new Redis(port, host);
   return redis;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#part-2-the-test-code"&gt;
  &lt;/a&gt;
  Part 2 – The Test Code
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#serviceundertestspects-file"&gt;
  &lt;/a&gt;
  service-under-test.spec.ts file:
&lt;/h4&gt;

&lt;p&gt;This file will be run using Jest.&lt;/p&gt;

&lt;p&gt;Notice we have the port of the service itself (to call the actual running service, which you would run in the CI environment or locally).&lt;/p&gt;

&lt;p&gt;We also have the Malabi utility functions – &lt;code&gt;fetchRemoteTelemetry&lt;/code&gt;, &lt;code&gt;clearRemoteTelemetry&lt;/code&gt; that like their name suggests – fetch the spans from the endpoint for assertions and clear the in-memory cache (which is useful to clean up between tests to maintain a clean slate each time).&lt;/p&gt;

&lt;p&gt;Take a look at the code, more info follows below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const SERVICE_UNDER_TEST_PORT = process.env.PORT || 8080;
import axios from 'axios';
import { fetchRemoteTelemetry, clearRemoteTelemetry } from 'malabi';
const getTelemetryRepository = async () =&amp;gt; await fetchRemoteTelemetry({ portOrBaseUrl: 18393 });

describe('testing service-under-test remotely', () =&amp;gt; {
   beforeEach(async () =&amp;gt; {
       // We must reset all collected spans between tests to make sure spans aren't leaking between tests.
       await clearRemoteTelemetry({ portOrBaseUrl: 18393 });
   });

   it('successful /todo request', async () =&amp;gt; {
       // call to the service under test - internally it will call another API to fetch the todo items.
       const res = await axios(`http://localhost:${SERVICE_UNDER_TEST_PORT}/todo`);

       // get spans created from the previous call
       const telemetryRepo = await getTelemetryRepository();

       // Validate internal HTTP call
       const todoInteralHTTPCall = telemetryRepo.spans.outgoing().first;
       expect(todoInteralHTTPCall.httpFullUrl).toBe('https://jsonplaceholder.typicode.com/todos/1')
       expect(todoInteralHTTPCall.statusCode).toBe(200);
   });

   it('successful /users request', async () =&amp;gt; {
       // call the service under test
       const res = await axios.get(`http://localhost:${SERVICE_UNDER_TEST_PORT}/users`);

       // get spans created from the previous call
       const telemetryRepo = await getTelemetryRepository();

       // Validating that /users had ran a single select statement and responded with an array.
       const sequelizeActivities = telemetryRepo.spans.sequelize();
       expect(sequelizeActivities.length).toBe(1);
       expect(sequelizeActivities.first.dbOperation).toBe("SELECT");
       expect(Array.isArray(JSON.parse(sequelizeActivities.first.dbResponse))).toBe(true);
   });

   it('successful /users/Rick request', async () =&amp;gt; {
       // call the service under test
       const res = await axios.get(`http://localhost:${SERVICE_UNDER_TEST_PORT}/users/Rick`);

       // get spans created from the previous call
       const telemetryRepo = await getTelemetryRepository();

       const sequelizeActivities = telemetryRepo.spans.sequelize();
       expect(sequelizeActivities.length).toBe(1);
       expect(sequelizeActivities.first.dbOperation).toBe("SELECT");

       const dbResponse = JSON.parse(sequelizeActivities.first.dbResponse);
       expect(Array.isArray(dbResponse)).toBe(true);
       expect(dbResponse.length).toBe(1);
   });

   it('Non existing user - /users/Rick111 request', async () =&amp;gt; {
       // call the service under test
       const res = await axios.get(`http://localhost:${SERVICE_UNDER_TEST_PORT}/users/Rick111`);

       // get spans created from the previous call
       const telemetryRepo = await getTelemetryRepository();

       const sequelizeActivities =  telemetryRepo.spans.sequelize();
       expect(sequelizeActivities.length).toBe(1);
       expect(sequelizeActivities.first.dbOperation).toBe("SELECT");

       const dbResponse = JSON.parse(sequelizeActivities.first.dbResponse);
       expect(Array.isArray(dbResponse)).toBe(true);
       expect(dbResponse.length).toBe(0);

       expect(telemetryRepo.spans.httpGet().first.statusCode).toBe(200);
   });

   it('successful POST /users request', async () =&amp;gt; {
       // call the service under test
       const res = await axios.post(`http://localhost:${SERVICE_UNDER_TEST_PORT}/users`,{
           firstName:'Morty',
           lastName:'Smith',
       });

       expect(res.status).toBe(200);

       // get spans created from the previous call
       const telemetryRepo = await getTelemetryRepository();

       // Validating that /users created a new record in DB
       const sequelizeActivities =  telemetryRepo.spans.sequelize();
       expect(sequelizeActivities.length).toBe(1);
       expect(sequelizeActivities.first.dbOperation).toBe("INSERT");
   });


   /* The expected flow is:
       1) Insert into db the new user (due to first API call; POST /users).
       ------------------------------------------------------------------
       2) Try to fetch the user from Redis (due to the second API call; GET /users/Jerry).
       3) The user shouldn't be present in Redis so fetch from DB.
       4) Push the user object from DB to Redis.
   */
   it('successful create and fetch user', async () =&amp;gt; {
       // Creating a new user
       const createUserResponse = await axios.post(`http://localhost:${SERVICE_UNDER_TEST_PORT}/users`,{
           firstName:'Jerry',
           lastName:'Smith',
       });
       expect(createUserResponse.status).toBe(200);

       // Fetching the user we just created
       const fetchUserResponse = await axios.get(`http://localhost:${SERVICE_UNDER_TEST_PORT}/users/Jerry`);
       expect(fetchUserResponse.status).toBe(200);

       // get spans created from the previous calls
       const telemetryRepo = await getTelemetryRepository();
       const sequelizeActivities = telemetryRepo.spans.sequelize();
       const redisActivities =  telemetryRepo.spans.redis();

       // 1) Insert into db the new user (due to first API call; POST /users).
       expect(sequelizeActivities.first.dbOperation).toBe('INSERT');
       // 2) Try to fetch the user from Redis (due to a second API call; GET /users/Jerry).
       expect(redisActivities.first.dbStatement).toBe("lrange Jerry 0 -1");
       expect(redisActivities.first.dbResponse).toBe("[]");
       // 3) The user shouldn't be present in Redis so fetch from DB.
       expect(sequelizeActivities.second.dbOperation).toBe("SELECT");
       //4) Push the user object from DB to Redis.
       expect(redisActivities.second.dbStatement.startsWith('lpush Jerry')).toBeTruthy();
   });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once we have fetched the spans, we can use Jest’s expect function to make assertions, as we would in any other test regardless of trace-based testing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#examined-example-1-test-named-successful-users-request"&gt;
  &lt;/a&gt;
  Examined example 1 – test named “successful /users request”:
&lt;/h3&gt;

&lt;p&gt;Let’s examine the above code – for example, the test named “successful /users request”.&lt;/p&gt;

&lt;p&gt;First, we call the service to fetch all users.&lt;/p&gt;

&lt;p&gt;Then, we use the &lt;code&gt;fetchRemoteTelemetry&lt;/code&gt; wrapped by the &lt;code&gt;getTelemetryRepository&lt;/code&gt; function to get the spans from Malabi.&lt;/p&gt;

&lt;p&gt;After that, we use the sequelize accessor to filter only sequelize spans.&lt;/p&gt;

&lt;p&gt;Once we have the sequelize spans at hand, we can assert to have only 1 as we only fetch the DB once.&lt;/p&gt;

&lt;p&gt;We also know it’s a SELECT operation, so we assert that it’s a SELECT operation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#examined-example-2-test-named-successful-create-and-fetch-user"&gt;
  &lt;/a&gt;
  Examined example 2 – test named “successful create and fetch user”:
&lt;/h3&gt;

&lt;p&gt;Let’s now examine a slightly more complicated test.&lt;/p&gt;

&lt;p&gt;In the indicated test, we create a new user using POST /users. Then, we try to query for that user using GET /users/:firstName.&lt;/p&gt;

&lt;p&gt;As expected, we assert for 200 as you would in any other test.&lt;/p&gt;

&lt;p&gt;Now here again we use Malabi utilities to fetch relevant spans, and store them in variables – one for redis spans and another for sequelize:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const telemetryRepo = await getTelemetryRepository();
const sequelizeActivities = telemetryRepo.spans.sequelize();
const redisActivities =  telemetryRepo.spans.redis();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first assertion – we want to make sure that the initial POST operation had caused a DB INSERT operation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;expect(sequelizeActivities.first.dbOperation).toBe('INSERT');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since the user was just created, we expect it to not exist in redis, so we assert the redis query to be as we want it and expect the response from redis to be an empty array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;expect(redisActivities.first.dbStatement).toBe("lrange Jerry 0 -1");
expect(redisActivities.first.dbResponse).toBe("[]");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since the user was not present in redis, we expect to have fetched the DB – so assert that the second DB operation select&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;expect(sequelizeActivities.second.dbOperation).toBe("SELECT");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now we expect redis to have received push command to make sure in real life(not in test runs since we clean up everything), subsequent runs would not have to fetch the DB (but take from redis):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;expect(redisActivities.second.dbStatement.startsWith('lpush Jerry')).toBeTruthy();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That would be it! I hope you can see how simple it can be to use OpenTelemetry &amp;amp; Malabi to write powerful integration tests, in a much easier way than before.&lt;/p&gt;

&lt;p&gt;P.S. Malabi is a relatively new library implementing a new approach, and its authors (myself included) would love to hear your thoughts on it and hear any improvements/suggestions you have. So feel free to open a &lt;a href="https://github.com/aspecto-io/malabi/discussions"&gt;discussion&lt;/a&gt; in GitHub or contact me via &lt;a href="https://twitter.com/thetomzach"&gt;Twitter&lt;/a&gt; DMs.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>microservices</category>
      <category>webdev</category>
      <category>testing</category>
    </item>
    <item>
      <title>Web Development Resources that you should know and bookmark 📑 </title>
      <author>Jonny Coder</author>
      <pubDate>Thu, 28 Oct 2021 15:07:16 +0000</pubDate>
      <link>https://dev.to/jcc/web-development-resources-that-you-should-know-and-bookmark-5ca8</link>
      <guid>https://dev.to/jcc/web-development-resources-that-you-should-know-and-bookmark-5ca8</guid>
      <description>&lt;p&gt;Are you looking for the &lt;span&gt;best design resources websites&lt;/span&gt;? Well, then this collection is something every developer should bookmark, as it consists of the best resources that can help you to develop an amazing eye-catchy and visually enriched project.&lt;/p&gt;

&lt;p&gt;Here you'll find the best websites and resources with modern UI components in different formats such as PSD, Sketch, Figma, Icons, and Illustrations, etc. They are great for ideas for web components/UI.&lt;/p&gt;

&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/web-development-resources-that-you-should-bookmark/&amp;amp;ved=2ahUKEwjoo5KWs-fzAhVZbn0KHX0bAG4QFnoECAQQAQ&amp;amp;usg=AOvVaw2cCTfPBK9M-kHilZgjzmdV"&gt;100+ Web Development Resources that you should bookmark&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Cheat Sheets that always save my time during web development</title>
      <author>Jonny Coder</author>
      <pubDate>Thu, 28 Oct 2021 15:06:11 +0000</pubDate>
      <link>https://dev.to/jcc/cheat-sheets-that-always-save-my-time-during-web-development-1033</link>
      <guid>https://dev.to/jcc/cheat-sheets-that-always-save-my-time-during-web-development-1033</guid>
      <description>&lt;p&gt;During Coding I often forget exact properties and at that time searching on google take time at least for me ( because I don't know about you 😁😅).&lt;/p&gt;

&lt;p&gt;So I always prefer cheatsheets because in 90% of cases I got my answer from them.&lt;/p&gt;
&lt;p&gt;So today I'm going to share a list of top cheatsheets that save my time during development. &lt;/p&gt;

&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/cheat-sheets-that-always-save-my-time-during-web-development/&amp;amp;ved=2ahUKEwiDjqvU_OnzAhVST30KHROPChIQFnoECAUQAQ&amp;amp;usg=AOvVaw1Ee26Ybt7AWL4eGcmh8Y_X"&gt;Cheat Sheets that always save my time during web development&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How to mint 10000 NFTs on Opensea</title>
      <author>Emanuel Ferreira</author>
      <pubDate>Thu, 28 Oct 2021 14:49:47 +0000</pubDate>
      <link>https://dev.to/emanuelferreira/how-to-mint-10000-nfts-on-opensea-487c</link>
      <guid>https://dev.to/emanuelferreira/how-to-mint-10000-nfts-on-opensea-487c</guid>
      <description>&lt;h2&gt;
  &lt;a href="#minting-to-opensea"&gt;
  &lt;/a&gt;
  Minting to Opensea
&lt;/h2&gt;

&lt;p&gt;After creating all your NFTs the more hardest step is to mint so many NFTs to Opensea mostly in large quantities without a contract.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mvodpwA2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sv43ubur0msgl61gwvtf.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mvodpwA2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sv43ubur0msgl61gwvtf.gif" alt="Gif from process" width="880" height="415"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To do it I'll share my repository that uses puppeteer to automate the process of minting the NFTs, you just need an images folder file and the images name to mint all. I'll teach you how to use the repository below.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you want to add another property on the mint time send me an email we can discuss it &lt;code&gt;oi@manel.dev&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#install-the-packages"&gt;
  &lt;/a&gt;
  Install the packages
&lt;/h2&gt;

&lt;p&gt;To start we go to install the packages to run the script, on your project run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add @chainsafe/dappeteer puppeteer esbuild esbuild-register
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;@chainsafe/dappeteer&lt;/code&gt; serves to automate the metamask connect to mint the NFTs. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;puppeteer&lt;/code&gt; we will use to upload the images and fill the inputs.&lt;/p&gt;

&lt;p&gt;And we are going to use the &lt;code&gt;esbuild&lt;/code&gt; and &lt;code&gt;esbuild-register&lt;/code&gt; to run our script.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-the-script"&gt;
  &lt;/a&gt;
  Create the script
&lt;/h2&gt;

&lt;p&gt;Let's start creating a file called &lt;code&gt;script.ts&lt;/code&gt; file doing the first imports and adding your first variables.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;script.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;puppeteer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Page&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;puppeteer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;dappeteer&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@chainsafe/dappeteer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;collectionName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Your Collection Name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;collectionURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`https://opensea.io/collection/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;collectionName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/assets/create`&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;openseaDescription&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`Your description here`&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lockedContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`Locked content text here`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#connect-wallet-function"&gt;
  &lt;/a&gt;
  Connect Wallet Function
&lt;/h3&gt;

&lt;p&gt;So to select the Metamask wallet when our script opens the Browser, let's create a function to click on the Metamask button and connect to the wallet.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;script.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;connectWallet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Page&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;metamask&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button.dBFmez:first-child&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;metamask&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;approve&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#create-the-upload-image-function"&gt;
  &lt;/a&gt;
  Create the Upload Image function
&lt;/h3&gt;

&lt;p&gt;Now to upload the image on create NFT page let's create the function which receives the page and the file then takes the input element in the HTML and uploads the image to it.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;script.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;uploadImage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Page&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;elementHandle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#media&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;elementHandle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;uploadFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`images/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#create-the-page-timeout-function"&gt;
  &lt;/a&gt;
  Create the page timeout function
&lt;/h3&gt;

&lt;p&gt;This function is to give time for our script to perform the filling or clicks in the application.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;script.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pageTimeout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;waitForTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#create-the-fill-fields-function"&gt;
  &lt;/a&gt;
  Create the fill fields function
&lt;/h3&gt;

&lt;p&gt;this is the function where we are going to get each field from the create NFT page and fill it.&lt;/p&gt;

&lt;p&gt;the steps this function takes &lt;br&gt;
1- Fill in the field name &lt;br&gt;
2 - Fill in the field input.&lt;br&gt;
3 - Turn on the unlockable content and fill the unlockable content text.&lt;br&gt;
4 - Select the Polygon chain&lt;/p&gt;

&lt;p&gt;&lt;em&gt;script.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fillFields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Page&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="c1"&gt;// Get and fill in the input name&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;focus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keyboard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;pageTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;//Get and fill in the input name&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#description&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;openseaDescription&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;focus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#description&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keyboard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;pageTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Click on the unlockable content checkbox&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;evaluate&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#unlockable-content-toggle&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;parentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;pageTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Fill in the unlockable content text&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;textarea[placeholder="Enter content (access key, code to redeem, link to a file, etc.)"]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lockedContent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;focus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;textarea[placeholder="Enter content (access key, code to redeem, link to a file, etc.)"]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keyboard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Open the select chain input&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#chain&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;pageTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Select the polygon chain&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;img[src="/static/images/logos/polygon.svg"]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#creating-the-main-function"&gt;
  &lt;/a&gt;
  Creating the Main Function
&lt;/h3&gt;

&lt;p&gt;In this function we go to create all the main functions to run our scripts the steps are:&lt;/p&gt;

&lt;p&gt;1 - Run the dappeteer to set up the Metamask on Opensea.&lt;br&gt;
2 - Get our files from the images folder file.&lt;br&gt;
3 - Remove the first file(.DS_Store) - just for macOS.&lt;br&gt;
4 - Open the create asset page of the collection.&lt;br&gt;
5 - Run the connect wallet function&lt;br&gt;
6 - Run a loop for each image on the images folder (to create the asset one by one)&lt;/p&gt;

&lt;p&gt;See the code below step-by-step:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;script.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// Async function because we need promises to do it&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;browser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;dappeteer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;launch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;puppeteer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;metamaskVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;v10.1.1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt; &lt;span class="c1"&gt;// Launch the browser with metamask&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;metamask&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;dappeteer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setupMetamask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Secret phase here&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt; &lt;span class="c1"&gt;// Add your secret phase here to metamask connect with your account&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;promises&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;images/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Get an List with all images on images folder&lt;/span&gt;
  &lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// WARN: just on macOS: remove the first file .DS_Store &lt;/span&gt;

&lt;span class="c1"&gt;// Open the create assets url of the  collection&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;newPage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;goto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;collectionURL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Get the tabs and close the first tab openned by the dappeteer&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firstTabs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pages&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;firstTabs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;pageTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Run our function to click on the Metamask button in the Opensea&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;connectWallet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;metamask&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Start the loop on each image of images folder&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tabs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pages&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// Get the tabs on each loop&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Your Asset name here #&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Add your NFT name (the count start on 1 and stop on the quantity of the files)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// At the first time on loop you need to do an sign to create the assets &lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;tabs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;bringToFront&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// Move one tab&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;tabs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;goto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;collectionURL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Change the page to collection url again&lt;/span&gt;

      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;pageTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;metamask&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sign&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// Use the metamask to do the transaction&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;metamask&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;waitForTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// wait for the transaction&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Now if not the first time, after creating the first NFT just open the create assets page again to create the second NFT and so sequentially.&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;tabs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;bringToFront&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;tabs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;goto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;collectionURL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;tabs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;bringToFront&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;tabs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;goto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;collectionURL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;pageTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Upload the current image file&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;uploadImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="c1"&gt;// Fill the fields using the asset name with the count&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fillFields&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Click on create asset button&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.AssetForm--action button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;pageTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Rename the image name to know if already is completed&lt;/span&gt;
    &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;renameSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`images/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`images/completed-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Mint the NFT: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]})&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Mint the NFT: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Minted all NFTs with success&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ready!! now Let's config our &lt;code&gt;package.json&lt;/code&gt; to run the script with one line&lt;/p&gt;

&lt;p&gt;&lt;em&gt;package.json&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"node"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"main"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"index.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"license"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"MIT"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"dependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@chainsafe/dappeteer"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^2.2.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"dappeteer"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^1.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"esbuild"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^0.13.10"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"esbuild-register"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^3.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"puppeteer"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^10.4.0"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"es"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"node -r esbuild-register"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now to run your script just run on the CLI:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn es ./src/script.ts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#download-the-repository"&gt;
  &lt;/a&gt;
  Download the Repository
&lt;/h2&gt;

&lt;p&gt;First, you need to download my repository &lt;a href="//www.google.com"&gt;here&lt;/a&gt; that contains the script to mint the NFTs.&lt;/p&gt;

&lt;p&gt;Star my repository &lt;a href="https://github.com/EmanuelCampos/opensea-script"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's done, now the puppeteer will create all your NFTs one by one and so much fast.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#thats-it"&gt;
  &lt;/a&gt;
  That's it!!
&lt;/h1&gt;

&lt;p&gt;Follow me on &lt;a href="https://twitter.com/manelferreira_"&gt;Twitter&lt;/a&gt;&lt;br&gt;
My &lt;a href="https://github.com/EmanuelCampos"&gt;Github&lt;/a&gt;&lt;/p&gt;

</description>
      <category>blockhain</category>
      <category>web3</category>
      <category>nft</category>
      <category>script</category>
    </item>
  </channel>
</rss>
