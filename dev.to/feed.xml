<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Why Elasticsearch is an indispensable component of the Adyen stack</title>
      <author>Deepu K Sasidharan</author>
      <pubDate>Tue, 08 Jun 2021 11:48:36 +0000</pubDate>
      <link>https://dev.to/adyen/why-elasticsearch-is-an-indispensable-component-of-the-adyen-stack-2f5o</link>
      <guid>https://dev.to/adyen/why-elasticsearch-is-an-indispensable-component-of-the-adyen-stack-2f5o</guid>
      <description>&lt;p&gt;&lt;em&gt;By Willem Pino, Bengisu Sahin, Diego Costa and Deepu K Sasidharan&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;At Adyen, we use Elasticsearch to power various parts of our payments platform. This includes payment search, monitoring, and log search. Let’s take a look at how we use Elastic for these different use cases and see how we capitalize on the power of Elasticsearch.&lt;/p&gt;

&lt;p&gt;We recently did a talk about some of our Elasticsearch adventures at an Elastic meetup. &lt;a href="https://www.youtube.com/watch?v=OCO7lgWVBQw"&gt;You can find a recording here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Before we look into our different use cases, it helps to get a high-level understanding of Adyen’s architecture.&lt;/p&gt;

&lt;p&gt;At Adyen, we do many things, but the core of what we do is payment processing. Our payment platform is built for any business and every customer journey. We process payments across all sales channels.&lt;/p&gt;

&lt;p&gt;Let’s say you want to buy a beer at the local pub (a merchant) and you want to pay with your credit card, which you received from a bank, called the issuing bank. Now when you pay for the beer, the pub wants to know if your account is valid and if you can make the payment. For this, the pub needs to contact the issuing bank.&lt;/p&gt;

&lt;p&gt;This is where Adyen comes in.&lt;/p&gt;

&lt;p&gt;When you provide your payment details — a credit card in this example — to the pub, the pub contacts Adyen with the payment details, and Adyen figures out the rest. This usually means sending the payment details to a third-party, or scheme, such as Mastercard or Visa, which forwards it to the issuer.&lt;/p&gt;

&lt;p&gt;The Adyen flow looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d2cszX06--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2406/0%2AR4KekhX77MFhDciJ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d2cszX06--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2406/0%2AR4KekhX77MFhDciJ.png" alt="high-level architecture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But why doesn’t the merchant contact the scheme directly?&lt;/p&gt;

&lt;p&gt;Because the next shopper might not use a credit card but wants to pay by scanning a WeChat Pay QR code. The merchant does not want to build a separate integration for every way of paying, because it should also work for payment methods like credit/debit cards, SEPA, iDeal, Klarna, PayPal, and so on. This is especially true for international merchants, and this is where part of the power of Adyen lies.&lt;/p&gt;

&lt;p&gt;Now imagine we do such a transaction not just once but hundreds of times per second. These are the principles that we follow that allow us to keep doing this efficiently and still be flexible:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;One platform worldwide&lt;/li&gt;
&lt;li&gt;A single application that receives payments&lt;/li&gt;
&lt;li&gt;Abstract away differences between payments to make it easier to handle the data later&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is, of course, a very simplified view and explanation. In reality, there are hundreds of components and moving parts that work seamlessly together to make everything work.&lt;/p&gt;

&lt;p&gt;Now that we have a basic understanding of the scale of the architecture, let’s look at how we use Elastic.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#payment-search"&gt;
  &lt;/a&gt;
  Payment search
&lt;/h2&gt;

&lt;p&gt;Customer Area is our merchant-facing web application where merchants can gain insights into their transactions and perform operational actions. In the Customer Area, there is a feature called payment search. It is the most used functionality in the Customer Area, and it allows merchants to search their payments by using an order reference, email address, payment method, and so on.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bwzladND--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3600/0%2AgTBfinrzMWq_Bpaq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bwzladND--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3600/0%2AgTBfinrzMWq_Bpaq.png" alt="payment search page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We use Elasticsearch as a search engine in our application because it is built to provide simple REST APIs and has a distributed nature, speed, and scalability.&lt;/p&gt;

&lt;p&gt;Adyen processes millions of payments every day. We want to provide a near real-time payment search functionality for merchants.&lt;/p&gt;

&lt;p&gt;So, imagine that a shopper is purchasing a pair of shoes in a store. The credit-card payment for the shoes needs to be immediately visible to the merchant so they know the buyer’s purchase was successfully processed — usually within seconds.&lt;/p&gt;

&lt;p&gt;In order to make this possible, we have to index all this data into the Elasticsearch cluster when the payment is successfully processed. For these purposes, we have an in-house streaming/consumer framework that helps us to make this happen in a scalable way. It is implemented to take the burden from accounting clusters and create a summary of the data in the streaming clusters. This data is fed to the consumer framework, which indexes the data into the payment Elasticsearch cluster.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w0zcB2-v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2732/0%2Aje3xiniPnDdrZ3Dr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w0zcB2-v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2732/0%2Aje3xiniPnDdrZ3Dr.png" alt="payment search flow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The consumer framework implements three parts of the indexing journey:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The first part is &lt;strong&gt;filtering&lt;/strong&gt;, which decides if the current stream item is of any interest to this consumer. This is used to filter out the payments which have a creation date before a certain date.&lt;/li&gt;
&lt;li&gt;The filtered payment goes to the &lt;strong&gt;consuming&lt;/strong&gt; part, where we apply the business logic. In our use case, it converts a payment to a payment document and creates index/update requests depending on the status of the payment.&lt;/li&gt;
&lt;li&gt;After the consumer framework reaches a certain amount of consumed payment or a certain time, it goes to a &lt;strong&gt;persisting&lt;/strong&gt; level where it performs the bulk operation with the bulk request. The bulk request consists of index/update requests that we consumed so far. After it gets a successful response from the Elasticsearch cluster, it saves the in-memory state of the consumer to db. In case some requests fail, the consumer framework includes them into the next persist and then saves the state. This helps us make sure we index all the data.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This cycle in the consumer framework runs continuously, as long as we have new payments processed. It allows us to give our customers a near real-time, reliable, and fast payment search experience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#platform-monitoring"&gt;
  &lt;/a&gt;
  Platform monitoring
&lt;/h2&gt;

&lt;p&gt;The goal of the monitoring team at Adyen is to provide solutions that can monitor the whole platform for merchant-facing issues. This is already quite a challenging task, and on top of that, the solution must be flexible enough to be used by other teams, each with a very unique use case.&lt;/p&gt;

&lt;p&gt;Plus, the alerts must occur on a (near) real-time basis. To summarize, monitoring aims to provide:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Real-time alerts&lt;/li&gt;
&lt;li&gt;End-to-end monitoring&lt;/li&gt;
&lt;li&gt;Integrated, scalable solutions to all teams at Adyen&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To accomplish this, we leverage the Elastic Stack as the underlying basis to build the necessary tools. The monitoring solution looks upon custom-based analytical events. The analytic events are freely created by the programmers and are the main data source for all the configurable monitors.&lt;/p&gt;

&lt;p&gt;These events exist in parallel and complement the logging infrastructure — and the data in databases. Next, the monitors accommodate the analytic events into multiple use cases, such as spikes, drops, underperforming transactions, anomaly detection, forecasting, and more. These monitors are responsible for creating alerts that are, finally, delivered to the right individuals (or teams).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9TEa0G-m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3600/0%2AqbRgza_CrTqXKwIb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9TEa0G-m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3600/0%2AqbRgza_CrTqXKwIb.png" alt="monitoring flow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From a business perspective, the objectives were:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Customizable monitors for predefined use cases:&lt;/strong&gt; Provide monitors for standard use cases (such as a drop in volume, or a spike in errors) that are easy to set up for anyone in the organization&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Out-of-the-box measurements:&lt;/strong&gt; Every new merchant, or host, is already capable of generating events from Day 1&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;End-to-end alert lifecycle integration:&lt;/strong&gt; Use a single interface to create any monitor, tweak its settings, and receive the alerts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i0zcY8zo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2972/0%2AXrwMrHYVsFdcvnMY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i0zcY8zo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2972/0%2AXrwMrHYVsFdcvnMY.png" alt="monitoring goals"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From a development perspective, the objectives of monitoring were:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Real-time user-based analytical events&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Parallel and complementary with the logging structure&lt;/li&gt;
&lt;li&gt;Seamless ES template mapping to/from java objects&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Enabled/disable event materialization routes on top-level events.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Long-term storage&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#keeping-the-lights-on"&gt;
  &lt;/a&gt;
  Keeping the lights on
&lt;/h2&gt;

&lt;p&gt;Apart from payment search and monitoring, we also use Elasticsearch for storing and retrieving logs, and we use Kibana for log search, which is integral for troubleshooting issues internally.&lt;/p&gt;

&lt;p&gt;Our logging cluster was at 1 petabyte at one point. For payment search, we did a migration from Elasticsearch v1.7 to v7.6 with 12TB of data last year, and the flexibility of Elasticsearch made the migration smooth. So at Adyen, Elasticsearch will continue to be an integral part of keeping our lights on.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Originally published at &lt;a href="https://www.elastic.co/blog/why-elasticsearch-is-an-indispensable-component-of-the-adyen-stack"&gt;https://www.elastic.co&lt;/a&gt; on May 27, 2021.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>fintech</category>
      <category>elasticsearch</category>
      <category>adyen</category>
      <category>architecture</category>
    </item>
    <item>
      <title>JavaScript v TypeScript</title>
      <author>JavaCode7</author>
      <pubDate>Tue, 08 Jun 2021 11:45:44 +0000</pubDate>
      <link>https://dev.to/javacode7/javascript-v-typescript-3i1g</link>
      <guid>https://dev.to/javacode7/javascript-v-typescript-3i1g</guid>
      <description>&lt;p&gt;JavaScript. By far one of the most famous programming languages for its applications in scripting, gamedev and most notably web apps 🌐. Then its brother, TypeScript. Famous for being statically typed. It adds more features to JavaScript. Which one is better? 🤔 I guess today we find out.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  Disclaimer
&lt;/h4&gt;

&lt;p&gt;What follows is going to be my opinion inferred from fact. This may or may not be true. Please read this article accordingly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  JavaScript
&lt;/h2&gt;

&lt;p&gt;JavaScript has many features, scripting, web apps and is even supported in some game engines. To sum it up nicely:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;✔  Dynamically typed (beginners don't mix up typing)&lt;/li&gt;
&lt;li&gt;❌ No optional parameters&lt;/li&gt;
&lt;li&gt;❌ No interfaces&lt;/li&gt;
&lt;li&gt;❌ No &lt;code&gt;public&lt;/code&gt; or &lt;code&gt;private&lt;/code&gt; keywords&lt;/li&gt;
&lt;li&gt;✔  Some game engine support&lt;/li&gt;
&lt;li&gt;✔  Compiled not transpiled&lt;/li&gt;
&lt;li&gt;❌ No TS file imports&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#typescript"&gt;
  &lt;/a&gt;
  TypeScript
&lt;/h2&gt;

&lt;p&gt;TypeScript has similar syntax to JavaScript but with a few features added.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;❌ Statically typed&lt;/li&gt;
&lt;li&gt;✔  Optional parameters&lt;/li&gt;
&lt;li&gt;✔  Interfaces&lt;/li&gt;
&lt;li&gt;✔  &lt;code&gt;public&lt;/code&gt; and &lt;code&gt;private&lt;/code&gt; keywords&lt;/li&gt;
&lt;li&gt;❌ No game engine support&lt;/li&gt;
&lt;li&gt;❌ Transpiled&lt;/li&gt;
&lt;li&gt;✔  Both TS and JS imports&lt;/li&gt;
&lt;li&gt;✔  Most JS frameworks support TS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Based on all of this, and my experience using both languages. I would say that TypeScript is better than JavaScript. You may disagree however. If you do, please comment 💬! I would love to hear your opinions!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>Simple progress bar component in React with Tailwind</title>
      <author>Yogini Bende</author>
      <pubDate>Tue, 08 Jun 2021 10:45:27 +0000</pubDate>
      <link>https://dev.to/ms_yogii/simple-progress-bar-component-in-react-with-tailwind-i6a</link>
      <guid>https://dev.to/ms_yogii/simple-progress-bar-component-in-react-with-tailwind-i6a</guid>
      <description>&lt;p&gt;Hello folks, &lt;/p&gt;

&lt;p&gt;Recently, I was working on a feature and I had to implement a &lt;strong&gt;progress bar&lt;/strong&gt; in it. Till now, I have always been scared of progress bars (reason: unknown 😂). Most of my previous projects used Bootstrap, and because bootstrap has its own &lt;a href="https://getbootstrap.com/docs/5.0/components/progress/"&gt;progress&lt;/a&gt; component, I didn't need to create a progress bar all by myself. &lt;/p&gt;

&lt;p&gt;But fortunately, the current project I am working on is using &lt;strong&gt;Tailwind&lt;/strong&gt; and that means I had to create a progress bar myself! Initially I felt this will be super complicated and I will have to handle so many states and all. But it ends up being a very small and fairly simple component. &lt;/p&gt;

&lt;p&gt;In this article, let's understand how to create this easy and simple progress bar. So next time, we will not need any library for this!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let's get started&lt;/strong&gt; 🚀&lt;/p&gt;

&lt;p&gt;To build a progress bar we will need only two parts. &lt;br&gt;
1- We will need an outer div to show the complete progress bar.&lt;br&gt;
2- Inner div to show the progress.&lt;/p&gt;

&lt;p&gt;Let's dive into the code and understand this! Our progress bar component will look something like this -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ProgressBar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;progressPercentage&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;h-1 w-full bg-gray-300&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;
                &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;progressPercentage&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;%`&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
                &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`h-full &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;
                    &lt;span class="nx"&gt;progressPercentage&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;70&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bg-red-600&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bg-green-600&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These 4 lines of code and your basic progress bar component is ready. 😇&lt;/p&gt;

&lt;p&gt;If you see in code, the outer div is the complete progress bar. It has a total of 3 classes, &lt;code&gt;height&lt;/code&gt;, &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;background color&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;The height here is kept &lt;code&gt;4px&lt;/code&gt; only, but that you can change as per your need. Here, to make it more generic, we made the width 100%. Due to this, we will be able to control the width of the progress bar based on the outer component. The background color given to this div defines the empty state of progress bar. Hence we have used &lt;code&gt;bg-gray-300&lt;/code&gt; from tailwind default colors.&lt;/p&gt;

&lt;p&gt;Now, as the inner width represents actual progress of this progress bar, we will need to keep its width dependent on the value passed as a percentage of progress. So, we have added an inline style attribute to this div and the percentage goes as a value to the width property. Also, we added 100% height to this inner div. Hence it will consume the whole height of the outer div.&lt;/p&gt;

&lt;p&gt;As per my use case, if the progress is below 70%, we need to show the progress bar in red color otherwise green. We can achieve this simply by using conditional styling. You can see we are conditionally applying the classes of background color to this div. If you have more than one condition, you can use a variable to get the value of the background color and apply that class to this div. &lt;/p&gt;

&lt;p&gt;This is the bare minimum structure of any progress bar and you can keep on adding more features to it as per requirements. But I guess, this basic structure will solve most of the needs. &lt;/p&gt;

&lt;p&gt;That’s it for now. &lt;strong&gt;I have created a &lt;a href="https://github.com/ms-yogi/React-Tailwind-Component"&gt;github repo&lt;/a&gt; to create React and Tailwind components.&lt;/strong&gt; You can check that out and feel free to add more components there if you are interested. &lt;/p&gt;

&lt;p&gt;Thank you so much for reading this article. Let me know your thoughts on this and you can follow me on &lt;a href="https://twitter.com/ms_yogii"&gt;twitter&lt;/a&gt; for more daily updates 😇&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Happy coding and keep learning 🙌&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>tailwindcss</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>UI Dev Newsletter #60</title>
      <author>Silvestar Bistrović</author>
      <pubDate>Tue, 08 Jun 2021 09:54:14 +0000</pubDate>
      <link>https://dev.to/starbist/ui-dev-newsletter-60-1jbm</link>
      <guid>https://dev.to/starbist/ui-dev-newsletter-60-1jbm</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://bit.ly/2SY1pMK"&gt;25 Years of CSS&lt;/a&gt;&lt;br&gt;
Eric A. Meyer takes a look at notes about CSS that he wrote 25 years ago while attending the WWW5 conference.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://bit.ly/3vYkMUC"&gt;Styling And Animating SVGs With CSS&lt;/a&gt;&lt;br&gt;
Sara Soueidan explains why it is essential to optimize your SVGs, why put in the effort to make them accessible, and how to style and animate them with CSS.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://bit.ly/3fTtbTt"&gt;HTML and CSS techniques to reduce your JavaScript&lt;/a&gt;&lt;br&gt;
Anthony Ricaud explores native solutions that are available to most of your users and don’t require JavaScript.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://bit.ly/2T5Wr0j"&gt;The perfect link&lt;/a&gt;&lt;br&gt;
Rian Rietveld tries to answer how do we write, design, and code a link that works for everyone on every device.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://bit.ly/2T3p7ag"&gt;Don't Develop Just for Yourself - A Developer's Checklist to Accessibility&lt;/a&gt;&lt;br&gt;
Eevis Panula provides information about accessibility and what things to check manually after automated testing.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://bit.ly/34YZbzf"&gt;Color psychology in web design&lt;/a&gt;&lt;br&gt;
Eleftheria Batsou shares a quick guide about picking the “right” color for the web-based on psychology.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://bit.ly/3cnXAar"&gt;JavaScript Notes &amp;amp; Reference&lt;/a&gt;&lt;br&gt;
Wes Bos shares helpful notes based on his Beginner JavaScript Video Course.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://bit.ly/3uWovkj"&gt;Compress Image Online&lt;/a&gt;&lt;br&gt;
Compress JPG and PNG images at light speed with a Browser-based Image compressor. Private, Works Offline, No Limits, 0 carbon emission.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/34155z3"&gt;Subscribe to the newsletter here!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>What browser do you use and why? 🌐</title>
      <author>JavaCode7</author>
      <pubDate>Tue, 08 Jun 2021 09:32:38 +0000</pubDate>
      <link>https://dev.to/javacode7/what-browser-do-you-use-and-why-4i3e</link>
      <guid>https://dev.to/javacode7/what-browser-do-you-use-and-why-4i3e</guid>
      <description></description>
      <category>watercooler</category>
      <category>healthydebate</category>
    </item>
    <item>
      <title>What Is My [Server] Throughput?</title>
      <author>Mathew Kurian</author>
      <pubDate>Tue, 08 Jun 2021 09:24:19 +0000</pubDate>
      <link>https://dev.to/browserstorm/what-is-my-server-throughput-5bhi</link>
      <guid>https://dev.to/browserstorm/what-is-my-server-throughput-5bhi</guid>
      <description>&lt;h1&gt;
  &lt;a href="#have-you-wondered-how-many-users-can-be-on-your-website-at-the-same-time"&gt;
  &lt;/a&gt;
  Have you wondered &lt;em&gt;how many users can be on your website&lt;/em&gt; at the same time?
&lt;/h1&gt;

&lt;p&gt;But you wanted a test framework that is...&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;More than a benchmark&lt;/strong&gt; (not JMeter or LoadRunner). &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Simulated real users&lt;/strong&gt;. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Presentable and quick&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Provides a quick report, something like this:&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0tCutwj0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qyjoqrotbyto9fl0cpk5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0tCutwj0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qyjoqrotbyto9fl0cpk5.png" alt="Screen Shot 2021-06-05 at 11.18.36 AM"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#whatismythroughputcom-beta"&gt;
  &lt;/a&gt;
  WhatIsMyThroughput.com (beta)
&lt;/h1&gt;

&lt;p&gt;In this article, I want to introduce to you &lt;a href="https://whatismythroughput.com"&gt;&lt;strong&gt;WhatIsMyThroughput.com&lt;/strong&gt;&lt;/a&gt;. It is a tool that helps gauge whether your website is ready to handle X users concurrently.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#case-study-of-chaosbrowserstormcom"&gt;
  &lt;/a&gt;
  Case Study of chaos.browserstorm.com
&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://chaos.browserstorm.com"&gt;chaos server&lt;/a&gt; uses &lt;a href="https://www.npmjs.com/package/connect-chaos"&gt;&lt;code&gt;connect-chaos&lt;/code&gt;&lt;/a&gt; to generate errors on an express server randomly. This particular server can control what errors get generated and when, so it's a prime example of what systems can do at high loads. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nv4etWF0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ep6k8p2y82ukvj8oxnpy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nv4etWF0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ep6k8p2y82ukvj8oxnpy.png" alt="Screen Shot 2021-06-05 at 10.51.21 AM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#our-test-setup"&gt;
  &lt;/a&gt;
  Our Test Setup
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Navigated to &lt;a href="https://www.whatismythroughput.com"&gt;WhatIsMyThroughput.com&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;Submitted a test with the following properties&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Property&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Target URL&lt;/td&gt;
&lt;td&gt;&lt;a href="https://chaos.browserstorm.com/"&gt;https://chaos.browserstorm.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Virtual Users&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;The test takes 15 minutes to run, so now we wait.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-was-the-verdict"&gt;
  &lt;/a&gt;
  What was the verdict?
&lt;/h2&gt;

&lt;p&gt;Tik tok tik tok... and the results have come in! The test has &lt;strong&gt;failed&lt;/strong&gt;! The website could NOT handle the load of 32 concurrent users. This test is a bit anti-climactic since the errors are expected. But in any other case, it's important to review the errors the users have experienced, shown below.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3Ug0V4Qv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7milfzrxs88eudv9tr41.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3Ug0V4Qv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7milfzrxs88eudv9tr41.png" alt="Screen Shot 2021-06-05 at 10.43.55 AM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-were-the-errors"&gt;
  &lt;/a&gt;
  What were the errors?
&lt;/h2&gt;

&lt;p&gt;View the test run and errors &lt;a href="https://www.whatismythroughput.com/test/zLaMmkMybK49OUk"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kf3rz36j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ebgnmh84ig5hvfkhcsds.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kf3rz36j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ebgnmh84ig5hvfkhcsds.png" alt="Screen Shot 2021-06-05 at 10.44.19 AM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-then"&gt;
  &lt;/a&gt;
  What then?
&lt;/h2&gt;

&lt;p&gt;If a production server had errors similar to this test, then there is a problem. But in this case, it is expected. Generally speaking, at scale, the use of CDNs would improve the read scenarios. For write heavy situations, low-hanging fixes can include waiting rooms. There are more complex solutions &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#custom-flows"&gt;
  &lt;/a&gt;
  Custom Flows
&lt;/h2&gt;

&lt;p&gt;This article focuses only on the Page Visit Flow. If you wanted to find out the throughput of flows on your server, like signing up or performing a search, they need to be implemented in JavaScript/TypeScript via. BrowserStorm (or at any other browser at scale test platform).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#pricing"&gt;
  &lt;/a&gt;
  Pricing
&lt;/h1&gt;

&lt;p&gt;This tool is free for the most part. However, generating higher loads does cost, but that helps maintain it free for most users. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;With Single Page Apps (SPAs) on the rise, the goal of BrowserStorm (and WhatIsMyThroughput) is to offer a "certificate" for a particular scale. This guarantee should give developers a sense of confidence and proof that their system can operate at production loads. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Both BrowserStorm and WhatIsMyThroughput are in active development. Feedback helps drive the direction of the product. Please let us know if you have any questions or concerns in the comments.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>performance</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>showdev</category>
    </item>
    <item>
      <title>16 Best Ruby Frameworks For Web Development</title>
      <author>Harish Rajora</author>
      <pubDate>Tue, 08 Jun 2021 08:33:12 +0000</pubDate>
      <link>https://dev.to/harishrajora12/16-best-ruby-frameworks-for-web-development-3l9i</link>
      <guid>https://dev.to/harishrajora12/16-best-ruby-frameworks-for-web-development-3l9i</guid>
      <description>&lt;p&gt;Ruby is a programming language that has been accepted with open arms since 1995, and thanks to its open-source nature, it is still growing every day. Ruby is fast, object-oriented, and secure, which brings a dynamic nature into the project with an MVC support structure that makes development more comfortable than ever. With start-ups openly accepting Ruby, the language has shown remarkable progress in almost every field, especially web development. Ruby’s popularity motivated people to take the development to the next level and bring out some best ruby frameworks for the developers.&lt;/p&gt;

&lt;p&gt;Some frameworks are built to ease out middleware and request/response of the application. Some are made for REST APIs and others for web applications. Collecting the best ruby frameworks from across the globe, in this post, we’ll talk about these frameworks and how each framework lets the developer take advantage of Ruby.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#best-ruby-frameworks-for-web-development"&gt;
  &lt;/a&gt;
  Best Ruby Frameworks For Web Development
&lt;/h2&gt;

&lt;p&gt;Without further ado, let’s delve into details of the best ruby frameworks for web development that will surely benefit your business.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ruby-on-rails"&gt;
  &lt;/a&gt;
  Ruby on Rails
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://rubyonrails.org/"&gt;Ruby on Rails&lt;/a&gt; is regarded as one of the best ruby frameworks. It was the primary language in developing big projects such as Twitter and helped the language boost the community. Often referred to as “Rails,” Ruby on Rails is a web development framework with an MVC control structure and currently running its 6.1 version. The 16-year-old language has dramatically influenced the web development structures and managing databases, web pages, and other components on a web application.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9ljVFjbR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/04/Ruby-on-Rails-1024x681.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9ljVFjbR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/04/Ruby-on-Rails-1024x681.png" alt="Ruby on Rails"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ruby on Rails has an extensive plugin library called “gems” and can be distributed and installed through the popular Ruby package manager called RubyGems. The most notable Ruby on Rails projects include Twitter, Airbnb, and Bloomberg.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sinatra"&gt;
  &lt;/a&gt;
  Sinatra
&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://sinatrarb.com/"&gt;Sinatra&lt;/a&gt; is the best ruby framework available in the market for web development. Sinatra is a simple and easy-to-use DSL written in Ruby and often used popularly in place of Ruby on Rails as a web development framework. Sinatra is named after the legendary musician Frank Sinatra and is powerful enough to set up a fully functional web application with just a single file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cZP2L1C2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/04/Sinatra-1024x384.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cZP2L1C2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/04/Sinatra-1024x384.png" alt="Sinatra"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sinatra was launched in 2007, is open-source, and hence free to use for the Ruby enthusiasts. Built on Rack, Sinatra can develop micro web applications to full-scale heavy web applications with fewer resources than rails. You would sometimes hear that Sinatra is a microframework, but that is just because of its lightweight and smaller size. In the arena, Sinatra is powerful, capable, and supports RubyGems to accomplish specific tasks with minimum effort.&lt;/p&gt;

&lt;p&gt;Some notable projects using Sinatra are LinkedIn, Heroku, Apple, and BBC.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#camping"&gt;
  &lt;/a&gt;
  Camping
&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://www.ruby-camping.com/"&gt;Camping&lt;/a&gt; is another best ruby web framework. The source code of the camping framework is just 4KB in size, making it the most lightweight Ruby framework on the internet (with equal capabilities). Apart from its size, camping has also been popular since it was written by an unidentified programmer who disappeared in August 2009. Identified by the pseudo-name “Why the lucky stiff,” the programmer has left the project, and since then, camping has been an open-source framework with a huge community.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M5icCzTB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/04/Camping-1024x553.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M5icCzTB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/04/Camping-1024x553.png" alt="Camping"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Camping requires Rack to work on the projects and is available as a RubyGem on GitHub. An excellent powerful feature of camping is converting the complete web application into a single file organizing it as an MVC structure. You can visit the &lt;a href="https://github.com/camping/camping"&gt;official GitHub page&lt;/a&gt; to learn more about Camping.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ramaze"&gt;
  &lt;/a&gt;
  Ramaze
&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://ramaze.net/"&gt;Ramaze&lt;/a&gt; is another best ruby web framework in competition to help create outstanding web development projects. Being light-weight, Ramaze is faster and offers a flat learning curve. For ruby projects involving JQuery, AJAX, ORM, Javascript, or some templating engine, Ramaze stands as an excellent choice to be seen in the consideration. Ramaze is robust and popular as a “bug-free” framework.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VH8WyXfD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/04/Ramaze.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VH8WyXfD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/04/Ramaze.png" alt="Ramaze"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ramaze provides clean and light solutions as compared to Rails. The GitHub page for Ramaze can be accessed through the &lt;a href="https://github.com/Ramaze/ramaze"&gt;Ramaze Github link&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#goliath"&gt;
  &lt;/a&gt;
  Goliath
&lt;/h3&gt;

&lt;p&gt;Unlike the other described ruby frameworks, which focus on the “development” part, &lt;a href="https://postrank-labs.github.io/goliath/"&gt;Goliath&lt;/a&gt; is considered to be one of the best ruby frameworks written in Ruby. Goliath is a lightweight web server framework powering PostRank and focuses on server-specific mechanisms. These include implementation and management of Rack API, middleware in Ruby, and fully asynchronous processing. Goliath focuses on event-driven design, thanks to the EventMachine reactor, which forms the Goliath working basis.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nJAypPtk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/04/Goliath.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nJAypPtk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/04/Goliath.png" alt="Goliath"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Goliath project can be accessed through its &lt;a href="https://github.com/postrank-labs/goliath"&gt;GitHub repository page&lt;/a&gt;. Goliath boasts a powerful feature of decluttering the complicated asynchronous requests into a linear execution communication process. The asynchronous mechanism of Goliath can hence be used very quickly for streaming the data, firehose API, etc. Also, Goliath is open-source, which has been a significant factor in its linear development over time. If you are into web-server development in Ruby, you will love working in Goliath.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hanami"&gt;
  &lt;/a&gt;
  Hanami
&lt;/h3&gt;

&lt;p&gt;With a clean architectural design and a primary object methodology, &lt;a href="https://hanamirb.org/"&gt;Hanami&lt;/a&gt; is counted among the best ruby frameworks that have gained popularity as an alternative to Rails. Hanami is “sorted” in design and provides small files that can be used independently to create a project stack. Hanami is lightweight and consumes fewer resources claiming 60% lesser memory than other big Ruby frameworks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5mQKzFJv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/04/Hanami.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5mQKzFJv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/04/Hanami.png" alt="Hanami"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hanami is based on the MVC structure and offers excellent additional features like CSRF, HTML escaping to prevent XSS, and maintaining the browser’s content security policy.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#padrino"&gt;
  &lt;/a&gt;
  Padrino
&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://padrinorb.com/"&gt;Padrino&lt;/a&gt; is another best ruby web framework that is based on Sinatra and is open source in nature. Padrino is used popularly as an alternative to Merb and Camping. Similar to the frameworks mentioned in this section, Padrino too works on the Rack webserver interface. Padrino’s development idea comes from Sinatra’s popularity and extending Sinatra’s functionality to more and more domains giving it a shape of a library-rich framework.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oDpA4gtD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/04/Padrino-1024x409.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oDpA4gtD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/04/Padrino-1024x409.png" alt="Padrino"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Padrino’s &lt;a href="https://github.com/DAddYE/web-frameworks-benchmark/wiki"&gt;benchmark metrics&lt;/a&gt; also reveal that it is four times faster than Rails. You can access Padrino through its &lt;a href="https://github.com/padrino/padrino-framework"&gt;GitHub page&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nyny"&gt;
  &lt;/a&gt;
  NYNY
&lt;/h3&gt;

&lt;p&gt;The &lt;a href="https://alisnic.github.io/nyny/"&gt;NYNY’s official page&lt;/a&gt; defines NYNY as “ridiculously” small and considered to be one of the best ruby web frameworks. Ridiculously small in the sense that NYNY is written in only 300 lines of code, which is considered significantly less than other frameworks such as Rack. Honestly, a majority of plugins are written in more LOC than NYNY.&lt;/p&gt;

&lt;p&gt;The highlighting thing in NYNY is that this ruby framework contains all the Ruby developers’ popular requirements. If you want something more, you can edit the framework and add your functionality on top of it. Such edits will help you build reliable and multi-functional middleware.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nq1C7hz3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/04/pasted-image-0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nq1C7hz3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/04/pasted-image-0.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;NYNY application can be used with Sinatra, Rails, or any other Rack-based application. The &lt;a href="https://github.com/alisnic/nyny"&gt;NYNY GitHub official page&lt;/a&gt; contains all the relevant information, from setting up to configuring the application to running it on the server.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cuba"&gt;
  &lt;/a&gt;
  Cuba
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://cuba.is/"&gt;Cuba&lt;/a&gt; is a microframework to develop web applications in the Ruby language. Rum inspires Cuba, and the official website defines Cuba as “a tiny but powerful mapper for Rack applications.” making it one of the best ruby frameworks. The &lt;a href="https://github.com/soveran/cuba#cuba"&gt;GitHub page&lt;/a&gt; is a practical guide if you are looking to start development in Cuba.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RAzG555e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/04/Cuba.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RAzG555e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/04/Cuba.png" alt="Cuba"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cuba takes help from a lot of other technologies to bring the best of everything. For example, the responses in Cuba are the optimized version of the Rack responses. The templates are integrated via &lt;a href="https://github.com/rtomayko/tilt"&gt;Tilt&lt;/a&gt; and testing via &lt;a href="https://github.com/djanowski/cutest"&gt;Cutest&lt;/a&gt; and &lt;a href="https://github.com/teamcapybara/capybara"&gt;Capybara&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#grape"&gt;
  &lt;/a&gt;
  Grape
&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://www.ruby-grape.org/"&gt;Grape&lt;/a&gt; is a REST-like microframework written in Ruby programming language. Grape is also considered among the best ruby frameworks and can be used to run on top of Rack or can be used to complement the existing web application frameworks such as Sinatra or Rails. The latter can be done through the DSL-based REST-API for communication. The Grape ruby web framework facilitates efficient and meaningful APIs working in the web application domain.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M-cyqUoD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/04/Grape.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M-cyqUoD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/04/Grape.png" alt="Grape"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Grape’s support extends to standard conventions, multiple format support, content negotiation, versioning, etc. The complete guide to Grape to develop REST-APIs, test the API and analyze the performance metrics is available on its &lt;a href="https://github.com/ruby-grape/grape"&gt;official GitHub page&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scorched"&gt;
  &lt;/a&gt;
  Scorched
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://scorchedrb.com/"&gt;Scorched&lt;/a&gt; is another one of the best ruby web frameworks that requires Ruby 2.0 and above to work. Scorched is light-weight, and the official website states Scorched as “true evolutionary enhancement of Sinatra, with more power, focus, and less clutter.” Scorched developers have assumed that since Scorched is on top of Rack, the fellow developers are already familiar with it. With that effect, they have removed any “overlapping” functionality and kept Scorched simplified and concrete in its working.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CkGnbv1h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/04/Scorched-1024x488.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CkGnbv1h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/04/Scorched-1024x488.png" alt="Scorched"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Scorched is not recommended to new Ruby developers or inexperienced programmers. Scorched lets you experiment, implement new tools and play around with this open-ended framework. It provides a definite and robust structure for working with HTTP requests and can also be used for scalable ruby-based applications.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#roda"&gt;
  &lt;/a&gt;
  Roda
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://roda.jeremyevans.net/documentation.html"&gt;Roda&lt;/a&gt; is another best ruby framework that aids in building web applications. Roda relies on the simplicity, usability, and productivity of the language. Built on Rack, Roda offers a flexible architecture and a large variety of APIs. Roda is also known for bringing the routing tree web toolkit to perform requests at any routing point. It uses comparatively lesser memory and is very easy to install, configure and use. Roda ships with a very long list of plugins, including middleware, request/response, and mail.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vtoe3dPF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/04/Roda.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vtoe3dPF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/04/Roda.png" alt="Roda"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#volt"&gt;
  &lt;/a&gt;
  Volt
&lt;/h3&gt;

&lt;p&gt;Volt is a ruby web application framework that helps in the development of web-based applications. Volt focuses on speed by running the Ruby code both on the server and the client. When the user interacts with the web application, the document object model nodes change dynamically on the server and the page. This process is also called reactive programming.&lt;/p&gt;

&lt;p&gt;Volt focuses on a persistent communication network instead of HTTP to communicate between the server and the client. With synchronization mechanisms built into the Volt code, the data gets updated on multiple clients, servers, and databases with the change in any one of the clients.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b0Jy__K5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/04/Volt-1024x623.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b0Jy__K5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/04/Volt-1024x623.png" alt="Volt"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Volt has helped in building a lot of functional web-based applications working in various domains. To learn more about Volt, you can visit its &lt;a href="https://github.com/voltrb/volt"&gt;Volt GitHub page&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ramverk"&gt;
  &lt;/a&gt;
  Ramverk
&lt;/h3&gt;

&lt;p&gt;Ramverk is a ruby web application framework that works on the minimalistic approach. Ramverk helps in building up MVC applications with a huge scope of adding your own functionalities into the framework. Ramverk aims to provide just the necessary functionalities to startup the application but demand more addition through the developer.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--StlDtlXQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/04/Ramverk-1024x707.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--StlDtlXQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/04/Ramverk-1024x707.png" alt="Ramverk"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Honestly, Ramverk is neither that powerful nor provides a full-fledged framework for highly scalable and complex ruby applications. With a vast range to choose from, Ramverk indeed gets defeated due to the extra work it demands from the developers. But, Ramverk is still developing and hopefully will bring something concrete in the later releases. The &lt;a href="https://github.com/sandelius/ramverk"&gt;Ramverk GitHub page&lt;/a&gt; can guide you through the installation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hobbit"&gt;
  &lt;/a&gt;
  Hobbit
&lt;/h3&gt;

&lt;p&gt;Hobbit is a microframework for web applications running on the don’t-repeat-yourself philosophy. Hobbit is the lightweight best ruby framework that offers a faster execution than other microframeworks. Hobbit ruby framework is built on top of Rack while Sinatra inspires the DSL.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tXlhzN56--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/04/Hobbit.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tXlhzN56--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/04/Hobbit.png" alt="Hobbit"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The code of Hobbit can also be extended with various other Rack classes and modules with no extra logic. With minimum configurations, Hobbit is the right choice for developing web applications leveraging the functionalities.&lt;/p&gt;

&lt;p&gt;You can access the recipes, templates, guides, and demo applications through the &lt;a href="https://github.com/patriciomacadden/hobbit"&gt;Hobbit GitHub page&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cramp"&gt;
  &lt;/a&gt;
  Cramp
&lt;/h3&gt;

&lt;p&gt;Cramp is a real-time web framework written in Ruby and built on top of EventMachine. Cramp is another ruby framework that uses asynchronous communication mechanisms and can be used smoothly for too many open connections. Cramp can be used for developing WebSockets, Server-Sent Events, and APIs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8aiVQf1d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/04/Cramp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8aiVQf1d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/04/Cramp.png" alt="Cramp"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The official repository of cramp can be found on the &lt;a href="https://github.com/lifo/cramp"&gt;Cramp GitHub page&lt;/a&gt; and installed via the simple gem command: gem install cramp. Cramp provides full-duplex bi-directional communication, which is efficient and faster.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#did-we-miss-something"&gt;
  &lt;/a&gt;
  Did We Miss Something?
&lt;/h2&gt;

&lt;p&gt;As a reader and a developer, it is entirely up to your requirements to choose your best ruby frameworks. Regardless of the framework you use for web development, &lt;a href="https://www.lambdatest.com/?utm_source=dev&amp;amp;utm_medium=Blog&amp;amp;utm_campaign=Harish-8062021&amp;amp;utm_term=Harish"&gt;LambdaTest&lt;/a&gt; is a cloud-based cross browser testing platform that will support all your web testing needs with out-of-the-box features like responsive testing, visual UI testing, automation testing, etc.&lt;/p&gt;

&lt;p&gt;You can also leverage &lt;a href="https://www.lambdatest.com/lt-browser?utm_source=dev&amp;amp;utm_medium=Blog&amp;amp;utm_campaign=Harish-8062021&amp;amp;utm_term=Harish"&gt;LT Browser&lt;/a&gt; – a developer-friendly tool to test websites for responsiveness across 50+ pre-built device viewports like mobile, tablets, desktops, and laptops.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://downloads.lambdatest.com/lt-browser/LTBrowser.exe"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BVP2fotB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ucarecdn.com/4a26fdb4-acb2-4356-848a-e8f9f7e98059/" alt="windows.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://downloads.lambdatest.com/lt-browser/LTBrowser.dmg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fs8h2OlW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ucarecdn.com/1e613647-fd74-4fb7-a9bb-3d823f212d30/" alt="macos.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://downloads.lambdatest.com/lt-browser/LTBrowser.AppImage"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A89Pel75--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ucarecdn.com/013e814b-41a5-402e-aefa-7371662486a8/" alt="linux.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have experience in some other best ruby frameworks and are excited to have it in this list, mention your framework with its capabilities in the comment section below. I hope this list justified the ruby programmers and the people ready to dive into the Ruby pool.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to keep learning as a developer</title>
      <author>Pavel Polívka</author>
      <pubDate>Tue, 08 Jun 2021 08:12:52 +0000</pubDate>
      <link>https://dev.to/pavel_polivka/how-to-keep-learning-as-a-developer-33gb</link>
      <guid>https://dev.to/pavel_polivka/how-to-keep-learning-as-a-developer-33gb</guid>
      <description>&lt;p&gt;"Keep learning." It's one of those things you will read on every guide on how to become a good developer. But how can one keep learning every day? It's easy in the beginning you are starting, there is so much to learn. But now, you have a good-paying job, you know everything well enough to keep you and your employers happy. Sure from time to time, there will be some challenges that will enable you to learn new stuff. But it's not enough. I think that I need to learn at least one new thing each day, otherwise I do not count that day as a good productive day. &lt;/p&gt;

&lt;p&gt;OK, but what can we do? In this article, I will go over a list of possible solutions to this problem.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#side-projects"&gt;
  &lt;/a&gt;
  Side projects
&lt;/h2&gt;

&lt;p&gt;Side projects are the obvious solution to this problem. You do not need to aim for the best-looking, startup-ready project out there. The goal (at least for me) is to learn something new. So If your day job is mostly writing backend Java your side project should not be a backend Java. I recently redid my blog with Next.JS as a way to force myself to keep current with modern front-end technologies. In the past, I did a lot of side projects that were more of a joke. &lt;/p&gt;

&lt;p&gt;To learn machine learning I tried to do something call Putin Emoji. I was image search, that searched through photos of Vladimir Putin that matched the desired emoji. He surprisingly has almost a full range of expressions. &lt;/p&gt;

&lt;p&gt;You can even deploy it somewhere for people to see, the DevOps part can be a learning experience as well. I was running Putin emoji live for a month or so, but as you imagine it's hard to monetize such a thing (based on a stolen image of one of the world leaders) and it was not very cheap to run so I decided to take it down. Plus you know it was not perfect anyway but I learned a ton. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reading"&gt;
  &lt;/a&gt;
  Reading
&lt;/h2&gt;

&lt;p&gt;Another obvious solution is to read. You can read books, blogs, Twitter, etc... You can learn a ton through reading but I would count that as a piece of theoretical knowledge, I need to touch stuff to learn. Maybe you can code alongside the reading, etc... &lt;/p&gt;

&lt;p&gt;Do not confuse reading through your Twitter wall with learning. Sure there may be tons of tweets describing a concept, etc.. but how hard a concept can be if it could be explained in the form of a Tweet? &lt;/p&gt;

&lt;p&gt;Great sources you can use are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev,to/"&gt;Dev.to&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/"&gt;Medium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hashnode.code"&gt;Hashnode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#writing"&gt;
  &lt;/a&gt;
  Writing
&lt;/h2&gt;

&lt;p&gt;Writing is a great tool that can help you learn new stuff. I try to document everything that I learn. This way I have notes to almost everything. For this, I use a folder full of markdown files that I edit in VS Code (the most overkill note-taking app). Sometimes some of my notes will make it as a blog post. Or Stackoverflow answer. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#videos"&gt;
  &lt;/a&gt;
  Videos
&lt;/h2&gt;

&lt;p&gt;You can also watch video courses (or YT videos) where someone is explanting the stuff to you. To be honest I do not like watching videos, as I much prefer written tutorials. You need to keep up with the video, rarely do people code alongside, as the video keeps rolling, and I hate pausing it. You cannot copy-paste from a video either. &lt;/p&gt;

&lt;p&gt;But hey some people use videos as their main learning source and do not complain. That is why it's on this list.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#speaking"&gt;
  &lt;/a&gt;
  Speaking
&lt;/h2&gt;

&lt;p&gt;I always found that the topics I know the best are the topics I used to teach to others. In my previous job, I was doing a lot of company-wide workshops about clean code and testing. I used a lot of time preparing those presentations and keeping those up to date (yes mainly changing meme images in the slides to the current memes) this kept in the loop, I was perceived as an expert on the topic and I kept learning new stuff. You can do the same as a speaker in your local meetups and or any conference. &lt;/p&gt;




&lt;p&gt;For more tips like this, you can follow me on &lt;a href="https://twitter.com/pavel_polivka"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>java</category>
      <category>learning</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Creating a Simple Horizontal Switchable Tabs Panel Using HTML, CSS &amp; JavaScript.</title>
      <author>Brian Maina</author>
      <pubDate>Tue, 08 Jun 2021 08:04:31 +0000</pubDate>
      <link>https://dev.to/mainakibe/creating-a-simple-horizontal-switchable-tabs-panel-using-html-css-javascript-e0l</link>
      <guid>https://dev.to/mainakibe/creating-a-simple-horizontal-switchable-tabs-panel-using-html-css-javascript-e0l</guid>
      <description>&lt;p&gt;Tabs are ideal for singular page web apps or websites with multiple subjects to display. In this tutorial, we shall create a simple web application with a horizontal switchable tabs panel. The web application can do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Show the active tab.&lt;/li&gt;
&lt;li&gt;Switch between the tabs.&lt;/li&gt;
&lt;li&gt;Display the contents of each tab.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will define the structure of the web application using HTML. Then render the elements on the screen using CSS and finally, add the functionality using some bit of Vanilla JavaScript. That's right, no fancy JavaScript framework is needed, just the simple Vanilla JavaScript we all know. Let's begin!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h3&gt;

&lt;p&gt;Before getting into the coding part of this project, ensure you have the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Intermediate level knowledge in HTML, CSS &amp;amp; JavaScript.&lt;/li&gt;
&lt;li&gt;Text editor or a codepen account.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#step-1-setting-up-the-html"&gt;
  &lt;/a&gt;
  Step 1: Setting up the HTML
&lt;/h2&gt;

&lt;p&gt;Essentially the HTML has a few levels of elements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The wrapper of the tabbed panel.&lt;/li&gt;
&lt;li&gt;The sidebar&lt;/li&gt;
&lt;li&gt;The tab contents&lt;/li&gt;
&lt;li&gt;The actual tab buttons.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Begin by constructing the tab panel wrapper. Create a &lt;code&gt;div&lt;/code&gt;, give it a class, and call it &lt;code&gt;tabs&lt;/code&gt;; this will be the wrapper for the tab panel. Create a new &lt;code&gt;div&lt;/code&gt; inside the wrapper, give it a class, and title it &lt;code&gt;sidebar&lt;/code&gt;; this will contain the tab buttons. Create three buttons in the &lt;code&gt;sidebar&lt;/code&gt;, then give each one the &lt;code&gt;tab-btn&lt;/code&gt; class. To the first button, add a &lt;code&gt;tab-btn-active&lt;/code&gt; class. The active class will come in handy when specifying in the CSS and JavaScript what happens to the tab when the tab &lt;code&gt;button&lt;/code&gt; is clicked. Add HTML, CSS, and JavaScript as the names of the buttons, respectively. Add a &lt;code&gt;data for-tab=' '&lt;/code&gt; attribute to each of these buttons now. Add a tab number to the &lt;code&gt;data&lt;/code&gt; element to specify which &lt;code&gt;button&lt;/code&gt; corresponds to which tab. Tab 1, tab 2, and tab 3 are examples. In the JavaSript, the tab number is used to read the properties and select which tab to open.&lt;/p&gt;

&lt;p&gt;Create a parent &lt;code&gt;div&lt;/code&gt; underneath the sidebar and give it the class content to act as a wrapper for the tab contents. Create a new &lt;code&gt;div&lt;/code&gt; and give it the &lt;code&gt;tab-content&lt;/code&gt; class. Also, give the tab content &lt;code&gt;div&lt;/code&gt; a class called &lt;code&gt;tab-content-active&lt;/code&gt;. The active class will be used in CSS and JavaScript to indicate what happens to the tab when the tab &lt;code&gt;button&lt;/code&gt; is clicked.&lt;/p&gt;

&lt;p&gt;We'll map the &lt;code&gt;data-for-tab&lt;/code&gt; attribute within this &lt;code&gt;div&lt;/code&gt;, so add a &lt;code&gt;data-tab='1'&lt;/code&gt; property to it and give it a tab number of 1 to represent the first tab. You may now go ahead and fill the &lt;code&gt;div&lt;/code&gt; with some content. Do the same for tab two and three, but remove the &lt;code&gt;tab-content-active&lt;/code&gt; class and name their &lt;code&gt;data-tab&lt;/code&gt; attribute 2 and three respectively. Finally, add some bit of content.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/hfZyXNkY"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wSeJP-X5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/8zNq0StT/1.png" alt="1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you're loading the page from the server, you might want to utilize loops or export the data so that the &lt;code&gt;data-tab&lt;/code&gt; values for tabs 1, 2, and 3 matches the &lt;code&gt;data-for-tab&lt;/code&gt; values. Make sure the &lt;code&gt;data-for-tab&lt;/code&gt; and &lt;code&gt;data-tab&lt;/code&gt; numbers match if you're not using any server-side code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-styling-the-page"&gt;
  &lt;/a&gt;
  Step 2: Styling the page
&lt;/h2&gt;

&lt;p&gt;We will first style the tab wrapper. Apply the following styles to the tab wrapper:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/JtPKF9zh"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---EpNlg8g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/nct5Xx8q/2.png" alt="2.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thereafter apply the following styles to the sidebar and tab buttons:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/hX7rfvbJ"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J0PyIhqM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/QdfnYWFq/3.png" alt="3.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Afterwards, specify what will happen to the button once it gets clicked; that will be the &lt;code&gt;tab-btn-active&lt;/code&gt; class. When the button is clicked, it will apply the following styles to the &lt;code&gt;button&lt;/code&gt; element:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/478t8RQk"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0r4TgWni--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/wMzVj6tv/4.png" alt="4.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The following styles will be applied to the content, tab-content and tab-content classes:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/214ZsZ7x"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a9uPBQMa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/VkhWb9S2/5.png" alt="5.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;position absolute&lt;/code&gt; applied in the &lt;code&gt;tab-content&lt;/code&gt; class will stack the content the all the tabs. After that, &lt;code&gt;display none&lt;/code&gt; the contents of all the tabs.&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;display block&lt;/code&gt; style is applied to the &lt;code&gt;tab-content-active&lt;/code&gt; class so as to display the content in the default tab, which is the first tab.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3-add-javascript"&gt;
  &lt;/a&gt;
  Step 3: Add JavaScript
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#part-1"&gt;
  &lt;/a&gt;
  Part 1:
&lt;/h3&gt;

&lt;p&gt;To begin the coding, create a method called &lt;code&gt;setupTabs&lt;/code&gt;. Then pick all the components with the &lt;code&gt;tab-btn&lt;/code&gt; class with a &lt;code&gt;querySelectorAll&lt;/code&gt;. When the &lt;code&gt;button&lt;/code&gt; is clicked, utilize the &lt;code&gt;forEach&lt;/code&gt; method on it to fire a &lt;code&gt;clickeventListener&lt;/code&gt; or a function. The content of the selected tab will be displayed using the &lt;code&gt;button function.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/N9P967QQ"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---mUKYqoL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/KjmPyJV3/6.png" alt="6.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#part-2"&gt;
  &lt;/a&gt;
  Part 2:
&lt;/h3&gt;

&lt;p&gt;Define the following constants to represent the tabs wrapper, sidebar, tab number and tab content to activate:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/GHD8DyV1"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WWhRAasf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/L6CzrkVh/7.png" alt="7.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const sidebar = button.parentElement&lt;/code&gt; will start at the &lt;code&gt;button&lt;/code&gt;, then go to the parent element, the &lt;code&gt;sidebar&lt;/code&gt;. &lt;code&gt;const tabs = sidebar.parentElement&lt;/code&gt; selects the parent element of the sidebar, which is the tab wrapper. &lt;code&gt;const tabNumber = button.dataset.forTab&lt;/code&gt;, the &lt;code&gt;dataset&lt;/code&gt; refers to any attributes that start with a &lt;code&gt;data-&lt;/code&gt; attribute. The JavaScript will convert the snake-case format of the &lt;code&gt;dataset&lt;/code&gt; into camel-case. The forTab refers to the value in the &lt;code&gt;data-for-tab&lt;/code&gt; attribute. Now to get the actual tab content to activate, we use the &lt;code&gt;const tabActivate =tabs.querySelector()&lt;/code&gt; then inside the &lt;code&gt;querySelector&lt;/code&gt; we pass &lt;code&gt;.tab-content[data-tab="${tabNumber}"]&lt;/code&gt; to select the tab content element with data-tab equals to the number gotten  after clicking the tab.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#part-3"&gt;
  &lt;/a&gt;
  Part 3:
&lt;/h3&gt;

&lt;p&gt;Add a DOMContetntLoaded eventListener and call the setupTabs function once the DOM content has been loaded.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/y3Zd0MfT"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xbp5udLE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/L5y1FRLG/8.png" alt="8.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#part-4"&gt;
  &lt;/a&gt;
  Part 4:
&lt;/h3&gt;

&lt;p&gt;First, you will set all the &lt;code&gt;buttons&lt;/code&gt; to be inactive, then set the active &lt;code&gt;button&lt;/code&gt;. You will do the same for the &lt;code&gt;tab content.&lt;/code&gt; Select all the &lt;code&gt;buttons&lt;/code&gt; and for each &lt;code&gt;button&lt;/code&gt;, remove the &lt;code&gt;tab-btn-active&lt;/code&gt; class, in doing this it will reset and no &lt;code&gt;button&lt;/code&gt; will have an active state, then set the clicked &lt;code&gt;button&lt;/code&gt; to have the &lt;code&gt;tab-btn-active&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/tnN00D7j"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FZF6HMlT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/Vv3zCV8d/9.png" alt="9.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After that, select all the &lt;code&gt;tab contents&lt;/code&gt; and for each tab, remove the &lt;code&gt;tab-content-active&lt;/code&gt; class, in doing this it will reset and no tab will have an active state, then set the active tab to have the &lt;code&gt;tab-content-active&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/18f96hfV"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JqGS08S1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/Gmj9WbRK/10.png" alt="10.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now simply add the &lt;code&gt;tab-btn-active&lt;/code&gt; class so that whenever the &lt;code&gt;button&lt;/code&gt; is clicked, it becomes active.  We will do the same for the tab content, using the tabActivate constant add the &lt;code&gt;tab-content-active&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/B8F4YT5q"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d5DT9UbH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/LsC5svnZ/11.png" alt="11.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that's it!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/brian-dot-hub/embed/eYvrzGr?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion!
&lt;/h2&gt;

&lt;p&gt;The purpose of this tutorial was to give you the most detailed instructions on how to make a horizontal switchable tabs panel using HTML, CSS, and JavaScript. I hope this tutorial guided you through the process of creating a horizontal switchable tab panel. To reach a larger audience, please like or share the article. In the comments section, feel free to make a comment or ask a question.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Mistakes I made in my 20s as a Software Developer.</title>
      <author>Ankur Tyagi</author>
      <pubDate>Tue, 08 Jun 2021 07:45:50 +0000</pubDate>
      <link>https://dev.to/tyaga001/mistakes-i-made-in-my-20s-as-a-software-developer-558d</link>
      <guid>https://dev.to/tyaga001/mistakes-i-made-in-my-20s-as-a-software-developer-558d</guid>
      <description>&lt;h1&gt;
  &lt;a href="#mistakes-i-made-in-my-20s-as-a-software-developer"&gt;
  &lt;/a&gt;
  Mistakes I made in my 20s as a Software Developer.
&lt;/h1&gt;


&lt;blockquote&gt;
&lt;p&gt;Mistakes I made in my 20s as a Software Developer...&lt;br&gt;&lt;br&gt;A Thread... &lt;a href="https://t.co/wulqhBuLbE"&gt;pic.twitter.com/wulqhBuLbE&lt;/a&gt;&lt;/p&gt;— Ankur💻🎧💪 (@TheAnkurTyagi) &lt;a href="https://twitter.com/TheAnkurTyagi/status/1401910166228926468?ref_src=twsrc%5Etfw"&gt;June 7, 2021&lt;/a&gt;
&lt;/blockquote&gt;  

&lt;p&gt;It’s OK to make mistakes. Yes, even when it comes to your career. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Career mistakes in your 20s aren’t the end of the world. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Not that I'm encouraging you to make career mistakes but just know, if you do, you can hopefully bounce back stronger than ever...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Being a young professional can be exciting.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There’s no easy way to condition yourself as a perfect professional, nor is there a shortcut to a perfect career path.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Learning from your mistakes does not happen automatically—it requires thinking and reflection."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#1-failing-to-network-early"&gt;
  &lt;/a&gt;
  1- Failing to network early.
&lt;/h2&gt;

&lt;p&gt;Networking is a major key to success in the business world in part because connections are how to learn more about yourself &amp;amp; your skills, &lt;/p&gt;

&lt;p&gt;And in part, because it will give you more potential career paths when it comes time to look for a new position.&lt;/p&gt;

&lt;p&gt;College juniors and seniors can leverage the power of their universities by connecting with their alumni network and professors.&lt;/p&gt;

&lt;p&gt;New professionals can start attending networking events and meeting new people as often as possible.&lt;/p&gt;

&lt;p&gt;The sooner you start, the better it will be.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-blame-people-for-my-unhappiness"&gt;
  &lt;/a&gt;
  2. Blame People For My Unhappiness.
&lt;/h2&gt;

&lt;p&gt;As a child, you’re taken care of by others. &lt;/p&gt;

&lt;p&gt;That may be your parents, siblings, family members, foster parents, or any other person who takes responsibility. &lt;/p&gt;

&lt;p&gt;Hence, you assume that someone is responsible for you.&lt;/p&gt;

&lt;p&gt;But that’s not true.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When you grow up, You are responsible for yourself. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So never look at others when you’re unhappy—it’s not fair to the people in your life. &lt;/p&gt;

&lt;p&gt;Instead, accept your unhappiness, and then do something about it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-not-asking-questions"&gt;
  &lt;/a&gt;
  3. Not asking questions
&lt;/h2&gt;

&lt;p&gt;As a new hire, I was nervous about asking questions for fear of sounding stupid.&lt;/p&gt;

&lt;p&gt;I was afraid to ask questions that would expose my programming ignorance, and this greatly impeded my growth as a developer.&lt;/p&gt;

&lt;p&gt;Once I built a strong rapport with my team members, I began asking more questions. &lt;/p&gt;

&lt;p&gt;Every developer starts from zero, &lt;br&gt;
and while we all learn at different speeds, &lt;br&gt;
We all have to go through the same process.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"It is vital to ask questions if you don’t understand."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#4-taking-constructive-criticism-personally"&gt;
  &lt;/a&gt;
  4. Taking constructive criticism personally
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;"Constructive criticism is important to grow as a developer."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When someone gives me constructive criticism, my first instinct is to interpret this as a reflection of my personal identity; it feels as though they’re attacking who I am.&lt;/p&gt;

&lt;p&gt;Next time when someone gives you a piece of constructive criticism that you don’t believe is true, don’t immediately get defensive and shut down.&lt;/p&gt;

&lt;p&gt;Take some time to process what they’ve just suggested and truly see whether their feedback holds some truth.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-comparison-self-doubt-and-fear"&gt;
  &lt;/a&gt;
  5. Comparison, Self Doubt, And Fear
&lt;/h2&gt;

&lt;p&gt;It’s human nature to compare ourselves with others all the time, that’s the case in programming as well.&lt;/p&gt;

&lt;p&gt;Some devs are good at picking up the concept very easily.&lt;/p&gt;

&lt;p&gt;Some devs take time but slow learning is completely ok.&lt;/p&gt;

&lt;p&gt;Ask yourself…&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What can I do to become a better programmer? &lt;/li&gt;
&lt;li&gt;What are the areas I should improve on?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Identify your strength be thankful for it.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Identify your weakness and work on that by taking help from others.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#6-laziness-in-doing-practice"&gt;
  &lt;/a&gt;
  6. Laziness in Doing Practice
&lt;/h2&gt;

&lt;p&gt;There is no point to read thousand of lines of code if you don’t get your hands dirty.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Practicing actual code should never be neglected in programming.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Programming is a skill acquired by practice and example rather than from books.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;-Alan Turing&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-rushing-into-a-job"&gt;
  &lt;/a&gt;
  8. Rushing into a job
&lt;/h2&gt;

&lt;p&gt;Too many young devs prioritize the notion of getting a job above anything else in the job-hunting process.&lt;/p&gt;

&lt;p&gt;While it’s important to start getting a paycheck so you can afford living expenses.&lt;/p&gt;

&lt;p&gt;It’s not a good idea to rush into the first job you’re offered.&lt;/p&gt;

&lt;p&gt;In the end,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You’re not expected to be a perfect employee and teammate.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But having the ability to understand your flaws and learn from your mistakes will improve your job performance and set you on the road to success.&lt;/p&gt;

&lt;p&gt;Thanks for reading. &lt;/p&gt;

&lt;p&gt;If you like this you might be you are interested in my eBook as well.&lt;/p&gt;

&lt;p&gt;I have recently written a book for developer growth &amp;amp; shared my 11+ years of experience.&lt;/p&gt;

&lt;p&gt;Grab the book now at a discounted price... &lt;a href="https://gumroad.com/l/nextgendev/grow"&gt;ThePrimeGuide&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OtPEzgRR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622969340878/j1oDA44p8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OtPEzgRR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622969340878/j1oDA44p8.png" alt="book.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;"Don't miss out" Follow your mentor  on Twitter 👉 &lt;a href="https://twitter.com/TheAnkurTyagi"&gt;TheAnkurTyagi&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;You can buy me a beer if you feel generous. Happy coding!!!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/ankurtyagi"&gt;BUY Me a Beer.&lt;/a&gt; &lt;/p&gt;

</description>
      <category>career</category>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Top 20 JavaScript tips and tricks to increase your Speed and Efficiency</title>
      <author>Kapil Raghuwanshi🖥</author>
      <pubDate>Tue, 08 Jun 2021 07:09:33 +0000</pubDate>
      <link>https://dev.to/techygeeky/top-20-javascript-tips-and-tricks-to-increase-your-speed-and-efficiency-283g</link>
      <guid>https://dev.to/techygeeky/top-20-javascript-tips-and-tricks-to-increase-your-speed-and-efficiency-283g</guid>
      <description>&lt;h3&gt;
  &lt;a href="#convenient-and-useful-techniques-to-reduce-the-lines-of-code-and-pace-up-your-dev-work"&gt;
  &lt;/a&gt;
  Convenient and useful techniques to reduce the lines of code and pace up your Dev Work!
&lt;/h3&gt;

&lt;p&gt;In our daily tasks, we get to write functions such as sorting, searching, finding unique values, passing parameters, swapping values etc, so here I present my list of shorthand techniques to write all of them as a Pro!✌🏻&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WgxQe1g9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vh2m04o3fgw3a6i8bzha.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WgxQe1g9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vh2m04o3fgw3a6i8bzha.jpg" alt="Increase Your Performance"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;JavaScript is truly an awesome language💛 to learn and work with. And there can be more than one approach to reach to the same solution for given problem. In this article, we will discuss only the quickest ones.🚀&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;These approaches will definitely help you in:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reducing the number of LOC(lines of code),&lt;/li&gt;
&lt;li&gt;Coding Competitions, &lt;/li&gt;
&lt;li&gt;Hackathons or &lt;/li&gt;
&lt;li&gt;Other time bound tasks.⏱&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most of these JavaScript Hacks uses techniques from ECMAScript6(ES2015) onwards, though the latest version is ECMAScript11(ES2020). &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: All below tricks have been tested on the Console of Google Chrome.&lt;/em&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-declare-and-initialize-arrays"&gt;
  &lt;/a&gt;
  1. Declare and Initialize Arrays
&lt;/h4&gt;

&lt;p&gt;We can initialize array of particular size with default values like &lt;code&gt;""&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;0&lt;/code&gt;. You might have used these for the 1-D array but how about initializing 2-D array/matrix?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const array = Array(5).fill(''); 
// Output 
(5) ["", "", "", "", ""]

const matrix = Array(5).fill(0).map(()=&amp;gt;Array(5).fill(0)); 
// Output
(5) [Array(5), Array(5), Array(5), Array(5), Array(5)]
0: (5) [0, 0, 0, 0, 0]
1: (5) [0, 0, 0, 0, 0]
2: (5) [0, 0, 0, 0, 0]
3: (5) [0, 0, 0, 0, 0]
4: (5) [0, 0, 0, 0, 0]
length: 5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#2-find-out-the-sum-minimum-and-maximum-value"&gt;
  &lt;/a&gt;
  2. Find out the sum, minimum and maximum value
&lt;/h4&gt;

&lt;p&gt;We should make use of &lt;code&gt;reduce&lt;/code&gt; method to quickly find basic maths operations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const array  = [5,4,7,8,9,2];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Sum
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;array.reduce((a,b) =&amp;gt; a+b);
// Output: 35
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Max
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;array.reduce((a,b)=&amp;gt;a&amp;gt;b?a:b);
// Output: 9
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Min
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;array.reduce((a,b)=&amp;gt;a&amp;lt;b?a:b);
// Output: 2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#3-sorting-array-of-string-numbers-or-objects"&gt;
  &lt;/a&gt;
  3. Sorting Array of String, Numbers or Objects
&lt;/h4&gt;

&lt;p&gt;We have inbuilt methods &lt;code&gt;sort()&lt;/code&gt; and &lt;code&gt;reverse()&lt;/code&gt; for sorting strings but How about numbers or array of objects?&lt;br&gt;
Let's check out sorting hacks for Numbers and Objects in Increasing and Decreasing order as well.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sort String Array
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const stringArr = ["Joe", "Kapil", "Steve", "Musk"]
stringArr.sort();
// Output
(4) ["Joe", "Kapil", "Musk", "Steve"]

stringArr.reverse();
// Output
(4) ["Steve", "Musk", "Kapil", "Joe"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Sort Number Array
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const array  = [40, 100, 1, 5, 25, 10];
array.sort((a,b)=&amp;gt;a-b);
// Output
(6) [1, 5, 10, 25, 40, 100]

array.sort((a,b)=&amp;gt;b-a);
// Output
(6) [100, 40, 25, 10, 5, 1]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Sort Array of Objects
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const objectArr = [ 
    { first_name: 'Lazslo', last_name: 'Jamf'     },
    { first_name: 'Pig',    last_name: 'Bodine'   },
    { first_name: 'Pirate', last_name: 'Prentice' }
];
objectArr.sort((a, b) =&amp;gt; a.last_name.localeCompare(b.last_name));
// Output
(3) [{…}, {…}, {…}]
0: {first_name: "Pig", last_name: "Bodine"}
1: {first_name: "Lazslo", last_name: "Jamf"}
2: {first_name: "Pirate", last_name: "Prentice"}
length: 3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#4-ever-need-to-filter-falsy-values-out-of-an-array"&gt;
  &lt;/a&gt;
  4. Ever need to filter falsy values out of an array?
&lt;/h4&gt;

&lt;p&gt;Falsy values like &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;""&lt;/code&gt;, &lt;code&gt;''&lt;/code&gt; can be omitted easily through below trick&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const array = [3, 0, 6, 7, '', false];
array.filter(Boolean);
// Output
(3) [3, 6, 7]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#5-use-logical-operators-for-various-conditions"&gt;
  &lt;/a&gt;
  5. Use Logical Operators for various conditions
&lt;/h4&gt;

&lt;p&gt;If you want to reduce nested if..else or switch cases, you can simply play with basic of logical operators &lt;code&gt;AND/OR&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function doSomething(arg1){ 
    arg1 = arg1 || 10; 
// set arg1 to 10 as a default if it’s not already set
return arg1;
}

let foo = 10;  
foo === 10 &amp;amp;&amp;amp; doSomething(); 
// is the same thing as if (foo == 10) then doSomething();
// Output: 10

foo === 5 || doSomething();
// is the same thing as if (foo != 5) then doSomething();
// Output: 10
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#6-remove-duplicates-values"&gt;
  &lt;/a&gt;
  6. Remove Duplicates values
&lt;/h4&gt;

&lt;p&gt;You might have used &lt;code&gt;indexOf()&lt;/code&gt; with for loop which return first found index or newer one &lt;code&gt;includes()&lt;/code&gt; which returns boolean true/false from the array to find out/remove duplicates. Here's we have 2 quicker approaches.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const array  = [5,4,7,8,9,2,7,5];
array.filter((item,idx,arr) =&amp;gt; arr.indexOf(item) === idx);
or
const nonUnique = [...new Set(array)];
// Output: [5, 4, 7, 8, 9, 2]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#7-create-a-counter-object-or-map"&gt;
  &lt;/a&gt;
  7. Create a Counter Object or Map
&lt;/h4&gt;

&lt;p&gt;Most of the time, the requirement to solve problem by creating counter object or map which tracks variables as keys with their frequency/occurrences as values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let string = 'kapilalipak';

const table={}; 
for(let char of string) {
  table[char]=table[char]+1 || 1;
}
// Output
{k: 2, a: 3, p: 2, i: 2, l: 2}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const countMap = new Map();
  for (let i = 0; i &amp;lt; string.length; i++) {
    if (countMap.has(string[i])) {
      countMap.set(string[i], countMap.get(string[i]) + 1);
    } else {
      countMap.set(string[i], 1);
    }
  }
// Output
Map(5) {"k" =&amp;gt; 2, "a" =&amp;gt; 3, "p" =&amp;gt; 2, "i" =&amp;gt; 2, "l" =&amp;gt; 2}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#8-ternary-operator-is-cool"&gt;
  &lt;/a&gt;
  8. Ternary Operator is cool
&lt;/h4&gt;

&lt;p&gt;You can avoid nested conditional if..elseif..elseif with ternary operators.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Fever(temp) {
return temp &amp;gt; 97 ? 'Visit Doctor!'
      : temp &amp;lt; 97 ? 'Feel Better!'
      : temp === 97 ? 'Take Some Rest!'
      : 'Go Out and Play!';
}

// Output
Fever(97): "Take Some Rest!" 
Fever(100): "Visit Doctor!"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#9-quicker-for-loops-compare-to-legacy-onces"&gt;
  &lt;/a&gt;
  9. Quicker for loops compare to legacy onces
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;for&lt;/code&gt; and &lt;code&gt;for..in&lt;/code&gt; gets you index by default, but you can use arr[index]. &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;for..in&lt;/code&gt; accepts non numeric as well so avoid it.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;forEach&lt;/code&gt;, &lt;code&gt;for...of&lt;/code&gt; gets you element directly. &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;forEach&lt;/code&gt; can get you index also but for/of can't. &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;for&lt;/code&gt; and &lt;code&gt;for...of&lt;/code&gt; considers holes in array but other 2 do not.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#10-merge-2-objects"&gt;
  &lt;/a&gt;
  10. Merge 2 objects
&lt;/h4&gt;

&lt;p&gt;Often we need to merge multiple objects in our daily tasks.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const user = { 
 name: 'Kapil Raghuwanshi', 
 gender: 'Male' 
 };
const college = { 
 primary: 'Mani Primary School', 
 secondary: 'Lass Secondary School' 
 };
const skills = { 
 programming: 'Extreme', 
 swimming: 'Average', 
 sleeping: 'Pro' 
 };

const summary = {...user, ...college, ...skills};

// Output 
gender: "Male"
name: "Kapil Raghuwanshi"
primary: "Mani Primary School"
programming: "Extreme"
secondary: "Lass Secondary School"
sleeping: "Pro"
swimming: "Average"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#11-arrow-functions"&gt;
  &lt;/a&gt;
  11. Arrow Functions
&lt;/h4&gt;

&lt;p&gt;An arrow function expression is a compact alternative to a traditional function expression, but is limited and can't be used in all situations. Since they have lexical scope (parental scope) and does not have their own &lt;code&gt;this&lt;/code&gt; and &lt;code&gt;arguments&lt;/code&gt; hence they refer to the environment in which they are defined.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const person = {
name: 'Kapil',
sayName() {
    return this.name;
    }
}
person.sayName();
// Output
"Kapil"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const person = {
name: 'Kapil',
sayName : () =&amp;gt; {
    return this.name;
    }
}
person.sayName();
// Output
""
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#12-optional-chaining"&gt;
  &lt;/a&gt;
  12. Optional Chaining
&lt;/h4&gt;

&lt;p&gt;The optional chaining ?. stops the evaluation if the value before ?. is undefined or null and returns undefined.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const user = {
  employee: {
    name: "Kapil"
  }
};
user.employee?.name;
// Output: "Kapil"
user.employ?.name;
// Output: undefined
user.employ.name
// Output: VM21616:1 Uncaught TypeError: Cannot read property 'name' of undefined
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#13-shuffle-an-array"&gt;
  &lt;/a&gt;
  13. Shuffle an Array
&lt;/h4&gt;

&lt;p&gt;Making use of inbuilt &lt;code&gt;Math.random()&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const list = [1, 2, 3, 4, 5, 6, 7, 8, 9];
list.sort(()=&amp;gt;{
    return Math.random() - 0.5;
});
// Output
(9) [2, 5, 1, 6, 9, 8, 4, 3, 7]
Call it again
(9) [4, 1, 7, 5, 3, 8, 2, 9, 6]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#14-nullish-coalescing-operator"&gt;
  &lt;/a&gt;
  14. Nullish Coalescing Operator
&lt;/h4&gt;

&lt;p&gt;The nullish coalescing operator (??) is a logical operator that returns its right-hand side operand when its left-hand side operand is null or undefined, and otherwise returns its left-hand side operand.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const foo = null ?? 'my school';
// Output: "my school"

const baz = 0 ?? 42;
// Output: 0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#15-rest-amp-spread-operators"&gt;
  &lt;/a&gt;
  15. Rest &amp;amp; Spread operators
&lt;/h4&gt;

&lt;p&gt;Those mysterious 3 dots &lt;code&gt;...&lt;/code&gt; can rest or spread!🤓&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function myFun(a,  b, ...manyMoreArgs) {
   return arguments.length;
}
myFun("one", "two", "three", "four", "five", "six");

// Output: 6
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const parts = ['shoulders', 'knees']; 
const lyrics = ['head', ...parts, 'and', 'toes']; 

lyrics;
// Output: 
(5) ["head", "shoulders", "knees", "and", "toes"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#16-default-parameters"&gt;
  &lt;/a&gt;
  16. Default Parameters
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const search = (arr, low=0,high=arr.length-1) =&amp;gt; {
    return high;
}
search([1,2,3,4,5]);

// Output: 4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#17-convert-decimal-to-binary-or-hexa"&gt;
  &lt;/a&gt;
  17. Convert Decimal to Binary or Hexa
&lt;/h4&gt;

&lt;p&gt;We can use some in-built methods like &lt;code&gt;.toPrecision()&lt;/code&gt; or &lt;code&gt;.toFixed()&lt;/code&gt; to achieve much of helping functionalities while solving problems.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const num = 10;

num.toString(2);
// Output: "1010"
num.toString(16);
// Output: "a"
num.toString(8);
// Output: "12"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#18-simple-swap-2-values-using-destructuring"&gt;
  &lt;/a&gt;
  18. Simple Swap 2 values using Destructuring
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let a = 5;
let b = 8;
[a,b] = [b,a]

[a,b]
// Output
(2) [8, 5]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#19-singleliner-palindrome-check"&gt;
  &lt;/a&gt;
  19. Single-liner Palindrome check
&lt;/h4&gt;

&lt;p&gt;Well, this is not a shorthand trick overall but it will give you clear idea to play with strings.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function checkPalindrome(str) {
  return str == str.split('').reverse().join('');
}
checkPalindrome('naman');
// Output: true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#20-turn-object-attributes-into-an-array-of-attributes"&gt;
  &lt;/a&gt;
  20. Turn Object attributes into an Array of attributes
&lt;/h4&gt;

&lt;p&gt;Using &lt;code&gt;Object.entries()&lt;/code&gt;,&lt;code&gt;Object.keys()&lt;/code&gt; and &lt;code&gt;Object.values()&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const obj = { a: 1, b: 2, c: 3 };

Object.entries(obj);
// Output
(3) [Array(2), Array(2), Array(2)]
0: (2) ["a", 1]
1: (2) ["b", 2]
2: (2) ["c", 3]
length: 3

Object.keys(obj);
(3) ["a", "b", "c"]

Object.values(obj);
(3) [1, 2, 3]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So that's it guys for now! 🤗&lt;/p&gt;

&lt;p&gt;If you know few more hacks like above, feel free to share them in the comment section below, so that we can all learn them together.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#if-you-really-learned-something-new-with-this-article-or-it-really-made-your-dev-work-faster-than-before-like-it-save-it-and-share-it-with-your-colleagues"&gt;
  &lt;/a&gt;
  If you really learned something new with this article or it really made your dev work faster than before, like it, save it and share it with your colleagues.
&lt;/h5&gt;

&lt;p&gt;I have been writing tech blogs for quite a time now, and have mostly published through my &lt;a href="https://www.medium.com/@techygeeky"&gt;Medium&lt;/a&gt; account, this is my first tech article/tutorial in Dev.to. Hope you guys will shower love to it!🤩&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Let’s be connected on &lt;a href="https://www.linkedin.com/in/kapilraghuwanshi/"&gt;LinkedIn&lt;/a&gt; and &lt;a href="https://www.twitter.com/techygeeeky"&gt;Twitter&lt;/a&gt; for more such engaging Tech Articles and Tutorials.🤝&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>javascript</category>
      <category>react</category>
    </item>
    <item>
      <title>How to Build an EDA App in Python</title>
      <author>Data Professor</author>
      <pubDate>Tue, 08 Jun 2021 07:04:09 +0000</pubDate>
      <link>https://dev.to/dataprofessor/how-to-build-an-eda-app-in-python-4een</link>
      <guid>https://dev.to/dataprofessor/how-to-build-an-eda-app-in-python-4een</guid>
      <description>&lt;p&gt;Exploratory data analysis (EDA) is an essential and preliminary first steps for exploring and summarizing the main characteristics of datasets. EDA provides the means to help us better understand variables and their relationships. This is achieved by non-graphical (descriptive statistics) and graphical (data visualization) techniques.&lt;/p&gt;

&lt;p&gt;In this article, we will be creating an EDA web app that you can use to speed up your EDA analysis or allow your colleagues to perform EDA without having to code in Python. A simple upload of the input CSV file is all it takes to perform EDA analysis.&lt;/p&gt;

&lt;p&gt;You can also refer to my YouTube video &lt;a href="https://youtu.be/p4uohebPuCg"&gt;&lt;strong&gt;&lt;em&gt;How to build an Exploratory Data Analysis app using Pandas Profiling&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt; on my YouTube channel (&lt;a href="https://www.youtube.com/channel/UCV8e2g4IWQqK71bbzGDEI4Q"&gt;&lt;strong&gt;&lt;em&gt;Data Professor&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;) as a supplement to this article.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://towardsdatascience.com/how-to-build-an-eda-app-in-python-af7ec4b51528"&gt;&lt;strong&gt;Read the full article&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>datascience</category>
      <category>python</category>
      <category>analytics</category>
    </item>
  </channel>
</rss>
