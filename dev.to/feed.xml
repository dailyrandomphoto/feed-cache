<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Generating Sharable Content Images with Open Graph and NextJS</title>
      <author>Kacey Cleveland</author>
      <pubDate>Fri, 25 Jun 2021 02:36:11 +0000</pubDate>
      <link>https://dev.to/kleveland/generating-sharable-content-images-with-open-graph-and-nextjs-4e34</link>
      <guid>https://dev.to/kleveland/generating-sharable-content-images-with-open-graph-and-nextjs-4e34</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;The Open Graph Protocol (&lt;a href="https://ogp.me/"&gt;https://ogp.me/&lt;/a&gt;) allows for parsing of specific metadata that many social networks utilize to create dynamic sharable content. An example of this could be when you share a post on Facebook with a link but when you actually share it, the link is joined with a description, an author, an even a cover photo/picture. We can take it a step further and generate the photo/picture and also populate the other metadata fields. This article will focus on creating dynamic images based on your dynamic pages. I utilize this method deploying to Vercel for this blog on my website (&lt;a href="https://kleveland.dev"&gt;https://kleveland.dev&lt;/a&gt;).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tech-used"&gt;
  &lt;/a&gt;
  Tech used
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;NextJS&lt;/li&gt;
&lt;li&gt;Serverless functions (via Vercel/AWS)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.kleveland.dev/posts/create-notion-blog"&gt;https://www.kleveland.dev/posts/create-notion-blog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mU_sLOAi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vol4zsd2m6gkfzfyfvjo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mU_sLOAi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vol4zsd2m6gkfzfyfvjo.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;When I try and share one of my blog posts on Linkedin, you can see it gets populated with a preview image and text. We will go over how that image is generated and how we can customize it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How It Works
&lt;/h2&gt;

&lt;p&gt;As a starting point, I am going to assume you have some dynamic content/pages in a NextJS application. In my case, I utilize the following files for this blog:&lt;/p&gt;

&lt;p&gt;Pages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;/pages/posts/[slug].tsx&lt;/li&gt;
&lt;li&gt;/pages/posts/open-graph/[slug].tsx&lt;/li&gt;
&lt;li&gt;/pages/api/open-graph-image.ts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Utils:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;/utils/use-open-graph-image.ts&lt;/li&gt;
&lt;li&gt;/utils/utils.ts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The code is actually borrowed heavily from here with a set of adjustments to make it more customizable:&lt;br&gt;
&lt;a href="https://playwright.tech/blog/generate-opengraph-images-using-playwright"&gt;https://playwright.tech/blog/generate-opengraph-images-using-playwright&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#apiopengraphimage"&gt;
  &lt;/a&gt;
  api/open-graph-image
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// path: /pages/api/open-graph-image.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;NextApiRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;NextApiResponse&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;chromium&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;chrome-aws-lambda&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;chromium&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;playwrightChromium&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;playwright-core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// getAbsoluteURL is in a snippet further down&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getAbsoluteURL&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;utils/utils&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NextApiRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NextApiResponse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Start the browser with the AWS Lambda wrapper (chrome-aws-lambda)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;browser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;playwrightChromium&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;launch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;chromium&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;executablePath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;chromium&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;executablePath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;headless&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;chromium&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headless&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="c1"&gt;// Create a page with the Open Graph image size best practise&lt;/span&gt;
  &lt;span class="c1"&gt;// 1200x630 is a good size for most social media sites&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;newPage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;viewport&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;630&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="c1"&gt;// Generate the full URL out of the given path (GET parameter)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;relativeUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getAbsoluteURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;relativeUrl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;goto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;// waitUntil option will make sure everything is loaded on the page&lt;/span&gt;
    &lt;span class="na"&gt;waitUntil&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;networkidle&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;screenshot&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="c1"&gt;// Set the s-maxage property which caches the images then on the Vercel edge&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Cache-Control&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;s-maxage=31536000, stale-while-revalidate&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;image/png&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c1"&gt;// write the image to the response with the specified Content-Type&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#getabsoluteurl"&gt;
  &lt;/a&gt;
  getAbsoluteURL
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Gets the URL for the current environment&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getAbsoluteURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;baseURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;VERCEL_URL&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="s2"&gt;`https://&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;VERCEL_URL&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://localhost:3000&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;baseURL&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#useopengraphimage"&gt;
  &lt;/a&gt;
  use-open-graph-image
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next/router&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getAbsoluteURL&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./utils&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useOpenGraphImage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;searchParams&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URLSearchParams&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="c1"&gt;// The [slug] from /posts/[slug] and /posts/open-graph/[slug]&lt;/span&gt;
  &lt;span class="c1"&gt;// should be identical.&lt;/span&gt;
  &lt;span class="nx"&gt;searchParams&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;asPath&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/posts/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/posts/open-graph/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// Open Graph &amp;amp; Twitter images need a full URL including domain&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fullImageURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getAbsoluteURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`/api/open-graph-image?&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;searchParams&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;imageURL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;fullImageURL&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#pagespostsslug"&gt;
  &lt;/a&gt;
  pages/posts/[slug]
&lt;/h3&gt;

&lt;p&gt;Both of these files should generate the same slugs; the open-graph route slug will correspond to the image for the corresponding article from /pages/posts/[slug].tsx. For example, this article on my website has this route:&lt;br&gt;
&lt;a href="https://www.kleveland.dev/posts/create-notion-blog"&gt;https://www.kleveland.dev/posts/create-notion-blog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and if I want the open graph image for that route, I can go to:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.kleveland.dev/posts/open-graph/create-notion-blog"&gt;https://www.kleveland.dev/posts/open-graph/create-notion-blog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The part that matters is the usage of the custom hook in /pages/posts/[slug].tsx that will get us the imageURL to pass to the meta tags:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Head&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next/head&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;imageURL&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useOpenGraphImage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;- This custom hook here!&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Kacey Cleveland - &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"description"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"og:title"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"og:type"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"article"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"og:image"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;imageURL&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        // Content here
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#utilsuseopengraphimagets"&gt;
  &lt;/a&gt;
  /utils/use-open-graph-image.ts
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next/router&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getAbsoluteURL&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./utils&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useOpenGraphImage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;searchParams&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URLSearchParams&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;searchParams&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;asPath&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/posts/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/posts/open-graph/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// This will take the current URL of the post and give us the open-graph one. Modify as needed for how you have your routing setup&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fullImageURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getAbsoluteURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`/api/open-graph-image?&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;searchParams&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// This will then pass along the route for the open-graph image to our api request which will run the serverless function which runs headless chrome and goes to the /posts-open-graph/[slug].tsx route and takes a screenshot to serve as the 'fullImageURL' return.&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;imageURL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;fullImageURL&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#fin"&gt;
  &lt;/a&gt;
  Fin
&lt;/h2&gt;

&lt;p&gt;TLDR the order of operations are the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A user shares a link to your article/dynamic content&lt;/li&gt;
&lt;li&gt;The site that the article is shared on finds reads the meta tags and finds there is an open graph image tag&lt;/li&gt;
&lt;li&gt;The image URL is a GET request to a serverless function that will take a screenshot of the passed route (/posts/open-graph/[slug].tsx) and return the image to be served on the social media site the link was shared on.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#additional-resources"&gt;
  &lt;/a&gt;
  Additional Resources
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://ogp.me/"&gt;https://ogp.me/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>react</category>
      <category>seo</category>
      <category>opengraph</category>
    </item>
    <item>
      <title>Create Horrible Console Messages with CSS</title>
      <author>Bear Evans</author>
      <pubDate>Fri, 25 Jun 2021 01:44:19 +0000</pubDate>
      <link>https://dev.to/bearevans/create-horrible-console-messages-with-css-4ob1</link>
      <guid>https://dev.to/bearevans/create-horrible-console-messages-with-css-4ob1</guid>
      <description>&lt;p&gt;Are you tired of reading debug messages featuring the same Courier New 10px font over and over again? Do you want to color code your error messages or console logs by code block? Do you want to remind people inspecting your web app of the lawless days of Myspace?&lt;/p&gt;

&lt;p&gt;Well now you can.&lt;/p&gt;

&lt;p&gt;Most modern browsers support styling console messages with CSS. All you have to do is prefix your message with %c and pass whatever styling you want as a second argument.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log("This is a normal message.");
console.log(
  "%cThis message is big and scary!",
  "color: red; background-color: black; font-size: 16px"
);
console.log("This message is not.");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For example, the above code results in the following output.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TWfieXbr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/phqo2ypisp94cqyeqgz8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TWfieXbr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/phqo2ypisp94cqyeqgz8.png" alt="Big Scary Console Message"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can even define styling in variables and use template literals.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const style = `
    color:white;
    background: linear-gradient(312deg, rgba(255,0,0,1) 0%, rgba(241,255,0,1) 15%, rgba(0,255,12,1) 30%, rgba(0,254,255,1) 43%, rgba(0,1,255,1) 59%, rgba(250,0,253,1) 88%, rgba(255,0,0,1) 100%);
    border: 1px solid white;
    padding: 5px;
    font-family: "Comic Sans MS";
    font-size: 16px;
`;

console.error(
  `%c🌈💖 An error has occurred. Everything is ruined forever. 💖🌈`,
  `${style}`
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fqazJAF2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4fc38d5dfbsm5i26l8tr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fqazJAF2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4fc38d5dfbsm5i26l8tr.png" alt="Rainbow Colored Error Message"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It really helps soften the blow, don’t you think?&lt;/p&gt;

</description>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>🎬Neumorphism Login Form | HTML &amp; CSS✨</title>
      <author>Robson Muniz</author>
      <pubDate>Fri, 25 Jun 2021 01:19:15 +0000</pubDate>
      <link>https://dev.to/robsonmuniz16/neumorphism-login-form-html-css-hef</link>
      <guid>https://dev.to/robsonmuniz16/neumorphism-login-form-html-css-hef</guid>
      <description>&lt;p&gt;We will explore the new neumorphism trend and create a "Neumorphism Login Form" using that trend.&lt;br&gt;
So, in this video, you will learn how to use this trend and create a “Neumorphism Login Form | HTML &amp;amp; CSS ”(No JavaScript).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#well-walk-you-through-stepbystep-on-how-to-create-it-and-how-to-add-it-to-your-websites"&gt;
  &lt;/a&gt;
    We'll walk you through step-by-step on how to create it and how to add it to your websites.
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://youtu.be/QWh0S-3D7uY"&gt;https://youtu.be/QWh0S-3D7uY&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>tutorial</category>
      <category>neumorphism</category>
    </item>
    <item>
      <title>Las 15 mejores extensiones para VSCode (2021)</title>
      <author>Gastón Danielsen</author>
      <pubDate>Thu, 24 Jun 2021 23:33:15 +0000</pubDate>
      <link>https://dev.to/gdcodev/las-15-mejores-extensiones-para-vscode-2021-430n</link>
      <guid>https://dev.to/gdcodev/las-15-mejores-extensiones-para-vscode-2021-430n</guid>
      <description>&lt;p&gt;En esta ocasión te mostraré las 15 extensiones que debes instalar en Visual Studio Code para sacarle el máximo  provecho y así facilitar tu trabajo día a día como desarrollador.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#aqu%C3%AD-est%C3%A1n-las-extensiones-de-vscode-que-cubriremos"&gt;
  &lt;/a&gt;
  Aquí están las extensiones de VSCode que cubriremos:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#1"&gt;PRETTIER&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2"&gt;Auto Close Tag&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#3"&gt;Auto Rename Tag&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#4"&gt;Material Icon Theme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#5"&gt;Bracket Pair Colorizer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#6"&gt;Better Comments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#7"&gt;LIVE SERVER&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#8"&gt;LIVE SHARE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#9"&gt;GITLENS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#10"&gt;SNAPCODE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#11"&gt;Settings Sync&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#12"&gt;Code Spell Checker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#13"&gt;Import Cost&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#14"&gt;Markdown All in One&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#15"&gt;Path Intellisense&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;PRETTIER&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Formatea tu código de manera automática.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uk76RTFX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xrj79eby083lkhs95ouc.png" alt="prettier"&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Auto Close Tag&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Tiene soporte de etiqueta cerrada para archivos.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w813M8JA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1gn7g00dahciou56f9le.png" alt="auto close tag"&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Auto Rename Tag&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Cambia automáticamente el nombre de una etiqueta. Ahorra tiempo al renombrar una etiqueta.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WCmV58T7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5dtk9347wl9eab3z5hrj.png" alt="auto rename tag"&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Material Icon Theme&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Con este tema tendrás un entorno limpio, minimalista y atractivo.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gw9MH6FK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cvjsxf422hme9h2m8iga.png" alt="material icon theme"&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Bracket Pair Colorizer&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Permite identificar los corchetes correspondientes con colores.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hp36eyiQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e17f3tfgcibr9j1r8kx7.png" alt="bracket pair colorize"&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Better Comments&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt; Podrás darle color a tus comentarios.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--suLtQGv_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p6fs2x2pgzc2ovf0fze1.png" alt="better comments"&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;LIVE SERVER&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Server local en tiempo real de nuestra pagina.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RCQN-zk3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jk6qvu52v6l6c042jeoe.png" alt="live server"&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;LIVE SHARE&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Trabaja en tiempo real en el mismo código.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9y20ojH6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r80dm836cmodtj3gb7a8.png" alt="live share"&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;GITLENS&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Historial de quien ha editado un fragmento de código en GIT.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pf0oNz8q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zjya8m94q1ls0demzifm.png" alt="gitlens"&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;SNAPCODE&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Capturas de pantalla profesional.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ubnK1-ix--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bd4mdxf9w14jhqk4ak8z.png" alt="snapcode"&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Settings Sync&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Permite sincronizar el estado de su VSCode entre varias instancias.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0mjM6TTB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/90ttm86as5kz6gtfjobf.png" alt="setting sync"&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Code Spell Checker&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Nos ayuda a detectar errores ortográficos.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DfUBCEMY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xef7oo534aq9d6wktxz3.png" alt="code spell checker"&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Import Cost&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Ayuda con la productividad al mostrar el tamaño estimado de un paquete de importación.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2FifSBgj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hwq5q9wpoxu9lwe9i0zi.png" alt="import cost"&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Markdown All in One&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Es una extensión muy útil para todo lo relacionado con Markdown.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ui32FQey--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vwq8jrtnt21h3siu6e9z.png" alt="markdown all in one"&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Path Intellisense&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Esta extensión le ayuda a completar automáticamente la ruta de las importaciones.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--834Ylulp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z7nwpy6chaltw7v2ehny.png" alt="path intellisense"&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;Repositorio de Git: &lt;a href="https://github.com/gdcodev/extensiones-vscode"&gt;https://github.com/gdcodev/extensiones-vscode&lt;/a&gt;&lt;br&gt;
📌 Mis Redes: &lt;a href="https://www.facebook.com/gdcode7"&gt;Facebook&lt;/a&gt; | &lt;a href="https://www.linkedin.com/in/gastondanielsen/"&gt;LinkedIn&lt;/a&gt; | &lt;a href="https://github.com/gdcodev"&gt;GitHub&lt;/a&gt; &lt;/p&gt;

</description>
      <category>vscode</category>
      <category>productivity</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>🧑‍💻 How I developed my portfolio for a month 🗓 + Demo 🍿</title>
      <author>Roden</author>
      <pubDate>Thu, 24 Jun 2021 23:30:41 +0000</pubDate>
      <link>https://dev.to/kerthin/how-i-developed-my-portfolio-for-a-month-demo-3ee7</link>
      <guid>https://dev.to/kerthin/how-i-developed-my-portfolio-for-a-month-demo-3ee7</guid>
      <description>&lt;h1&gt;Introduction&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Link to the DEMO at the end&lt;/strong&gt;&lt;br&gt;
Today I would like to share with you my experience in developing a personal portfolio. I understand that many of you immediately wondered after reading the title. &lt;code&gt;And why spend so much time developing a portfolio at all?&lt;/code&gt;      &lt;code&gt;After all, you just need to create a small one-page website and add all the information about yourself and your works there.&lt;/code&gt; And here I definitely agree with you that if you are developing a business card website, then this is quite a working option. You don't even have to spend a few days developing such a site. Such a site can be developed in 4-6 hours.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;But I set myself a different task&lt;/code&gt;. I wanted to create a portfolio that would show with its appearance what kind of developer I am and what I am capable of. I wanted to use animations, build complex objects using HTML and CSS, make smooth transitions between pages, choose bright colors for the site.  But at the same time, of course, I did not want to make a site from the nineties, which usually caused users to have epilepsy.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/fJKG1UTK7k64w/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/fJKG1UTK7k64w/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;I wanted my portfolio to be something like a picture that I painted like an artist.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I didn't want to fill my site with boring and monotonous text content. Let's be honest. No one cares what you like to eat in the morning and for dinner, no one cares what TV shows and movies are your favorite, what games you play and how you spend your time. &lt;code&gt;The employer is not even interested in whether you watch anime?&lt;/code&gt; &lt;strong&gt;This is assumed by default.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/ayMW3eqvuP00o/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/ayMW3eqvuP00o/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So I decided to focus on the appearance of the site. &lt;strong&gt;Therefore, the first thing we will discuss with you is the design.&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;Design&lt;/h1&gt;

&lt;h3&gt;1. Colors&lt;/h3&gt;

&lt;p&gt;The first step is to discuss the colors that I decided to use in my project.&lt;br&gt;
This is:&lt;br&gt;
&lt;strong&gt;Vinous&lt;/strong&gt;: &lt;code&gt;#9b2d30&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JNbetAzs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s9wppnl0euagvjqnf5jq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JNbetAzs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s9wppnl0euagvjqnf5jq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and &lt;strong&gt;Beige&lt;/strong&gt;: &lt;code&gt;#f7e0b5&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---HzcFhLp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/la37v184g4vwas0qv2l2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---HzcFhLp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/la37v184g4vwas0qv2l2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have long dreamed of using these colors together, but unfortunately I could not do it at work and so finally I decided to use them in my personal portfolio.&lt;/p&gt;

&lt;p&gt;I think that these colors are very well in &lt;code&gt;harmony with each other&lt;/code&gt;. And in the future we will have to use many more colors, but more on this later in the following chapters.&lt;/p&gt;

&lt;h3&gt;2. Pages&lt;/h3&gt;

&lt;p&gt;As for the pages, I decided to make them only 2. This is the &lt;code&gt;home page&lt;/code&gt; where my photo, brief information about me and links to my social networks will be placed so that people can contact me. On the second page, I decided to arrange my &lt;code&gt;works&lt;/code&gt;, which can be viewed with the help of a &lt;code&gt;special presentation&lt;/code&gt; (more on this later).&lt;/p&gt;

&lt;h3&gt;3. Style&lt;/h3&gt;

&lt;p&gt;I decided to design the appearance of the site in a minimalistic style. I didn't want a large number of unnecessary photos and the like to be present on the site. I wanted the site to look seasoned and concise. Therefore, I decided to use &lt;code&gt;Flat design&lt;/code&gt; as the design of the portfolio elements.&lt;/p&gt;

&lt;h3&gt;4. Animation&lt;/h3&gt;

&lt;p&gt;As for animations, here is the same approach as with the style of elements. Animations should look appropriate, and be combined with all their surrounding elements. Animations and static elements on the site should &lt;code&gt;look like a single whole&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/10jYR6HT60em2s/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/10jYR6HT60em2s/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Perfect!&lt;/strong&gt; 👌&lt;/p&gt;

&lt;h1&gt;Technologies&lt;/h1&gt;

&lt;p&gt;Before we go any further, I should tell you what tools I used for development.&lt;/p&gt;

&lt;h3&gt;1. HTML&lt;/h3&gt;

&lt;p&gt;To create a &lt;code&gt;DOM&lt;/code&gt; structure, I decided to use the &lt;code&gt;PUG&lt;/code&gt; preprocessor. It significantly helped me reduce the amount of code due to the ability to use &lt;code&gt;loops&lt;/code&gt; and &lt;code&gt;mixins&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;2. CSS&lt;/h3&gt;

&lt;p&gt;To create styles for elements, I preferred to use the &lt;code&gt;SASS&lt;/code&gt; preprocessor with &lt;code&gt;SCSS&lt;/code&gt; syntax. I did this for the same reason as with the &lt;code&gt;PUG&lt;/code&gt; preprocessor.&lt;/p&gt;

&lt;h3&gt;3. JavaScript&lt;/h3&gt;

&lt;p&gt;To create animations, I needed to use three &lt;code&gt;JS libraries&lt;/code&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;TweenMax.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Anime.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Revealer.js&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;Home Page&lt;/h1&gt;

&lt;p&gt;Finally, we can start analyzing the pages of the portfolio itself directly.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/CkqpoOOS0BCQU/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/CkqpoOOS0BCQU/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When I started working through the DOM structure and it came to the section where my photo should have been, I thought for a while and asked myself this question. &lt;code&gt;Why would I just insert my photo?&lt;/code&gt; I thought it was too easy for me. &lt;code&gt;Is it really impossible to use this place more effectively, instead of just occupying this place with a photo?&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Moreover, I do not like to be photographed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/KCdXOVBvvEqeWzFNf8/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/KCdXOVBvvEqeWzFNf8/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And here I would like to return to my recent quote.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;I wanted my portfolio to be something like a picture that I painted like an artist.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I thought that I would be able to apply my own knowledge of HTML and CSS in order to simply &lt;code&gt;draw myself&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And I started a difficult job. 🥷&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/xT39D7GQo1m3LatZyU/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/xT39D7GQo1m3LatZyU/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;1. Step One&lt;/h3&gt;

&lt;p&gt;At first it was not easy, but the most important thing is to find an avatar layout on the Internet that you could be inspired by when creating your own &lt;code&gt;CSS portrait&lt;/code&gt;. (CSS portrait - sounds strange)&lt;/p&gt;

&lt;p&gt;And here's what happened:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CodePen:&lt;/strong&gt;&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/Astap/embed/rNjabrd?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;It took me about 6 - 7 hours to create it. This is taking into account the fact that I had to spend a lot of time searching for good examples of avatars on the Internet.&lt;/p&gt;

&lt;h3&gt;2. Step Two&lt;/h3&gt;

&lt;p&gt;In general, I was satisfied with the result, but the avatar itself, as you can see, is &lt;code&gt;small&lt;/code&gt; in size, and the image that the avatar was intended to replace was &lt;code&gt;large&lt;/code&gt; in size.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Moreover, the avatar merged colors with the background.&lt;/strong&gt; 😂&lt;br&gt;
&lt;a href="https://i.giphy.com/media/RJ8ZAMdif76RF0YRMu/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/RJ8ZAMdif76RF0YRMu/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Therefore, I decided to create a &lt;code&gt;special environment&lt;/code&gt; around the avatar to fill the &lt;code&gt;empty space&lt;/code&gt; in the place of which the &lt;code&gt;photo&lt;/code&gt; should have been.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And later I decided to animate this very environment to make the picture look more lively.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;And here's what happened:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CodePen:&lt;/strong&gt; (See in the format &lt;code&gt;0.5x&lt;/code&gt;)&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/Astap/embed/yLgvGYp?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rELE07XG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/21go21d2k1n2aqa0kawf.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rELE07XG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/21go21d2k1n2aqa0kawf.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have already posted this work on my very first post.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/kerthin" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MEDW7r1U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--N_Cn4rKT--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/634154/b6864fc7-4410-46ca-a11d-bc605dc6d2b1.jpeg" alt="kerthin"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kerthin/codepen-css-illustration-animation-8lo" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;CodePen - CSS Illustration (Animation)&lt;/h2&gt;
      &lt;h3&gt;Roden ・ May 19 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#codepen&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;3. Step Three&lt;/h3&gt;

&lt;p&gt;Next, I needed to create a text with brief information about myself (who I am and where I live). Here I decided to use a &lt;code&gt;straight font&lt;/code&gt;, because it fit very well into the overall style.&lt;/p&gt;

&lt;p&gt;Something like that:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QnOxmUQT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qvxl859syhorrbm2osc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QnOxmUQT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qvxl859syhorrbm2osc.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's already coming out well and it pleases.&lt;/p&gt;

&lt;h3&gt;4. Step Four&lt;/h3&gt;

&lt;p&gt;Next, I needed to implement navigation, with which I could switch between the pages of the site. I decided to make it minimalistic and unfixed so that it doesn't follow the window when scrolling. It wasn't necessary.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XGX-aaaC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6yqw7k97qrm0730sqhnn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XGX-aaaC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6yqw7k97qrm0730sqhnn.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But do not forget about &lt;code&gt;adaptability&lt;/code&gt;, because what looks good on the &lt;code&gt;desktop&lt;/code&gt; will not look good on the &lt;code&gt;phone&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Therefore, I decided to make text links to pages disappear on screens less than &lt;code&gt;900px&lt;/code&gt; and a &lt;code&gt;burger menu&lt;/code&gt; appears.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/1FO5CyzMeNVeShtxDF/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/1FO5CyzMeNVeShtxDF/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And when you click on the &lt;code&gt;burger menu button&lt;/code&gt;, a &lt;code&gt;Popup menu&lt;/code&gt; appears in which the necessary links to pages and social networks are located.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VlgA2z7p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wdh8fu79v3vfo0cinetf.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VlgA2z7p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wdh8fu79v3vfo0cinetf.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have a separate article about this burger menu.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/kerthin" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MEDW7r1U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--N_Cn4rKT--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/634154/b6864fc7-4410-46ca-a11d-bc605dc6d2b1.jpeg" alt="kerthin"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kerthin/burger-popup-menu-anime-js-38lo" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Burger Popup Menu (anime.js) 🍔&lt;/h2&gt;
      &lt;h3&gt;Roden ・ May 23 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#codepen&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;CodePen:&lt;/strong&gt;&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/Astap/embed/QWpKwmb?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;5. Step Five&lt;/h3&gt;

&lt;p&gt;I decided to attach links to my social networks and email to the lower edges of the screen. I also added &lt;code&gt;position: fixed;&lt;/code&gt; to them so that they follow the screen when scrolling.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6ZsDxdSh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/amz7jghgx67l0lmhnnu2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6ZsDxdSh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/amz7jghgx67l0lmhnnu2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;6. Step Six&lt;/h3&gt;

&lt;p&gt;And the last thing I decided to do on the home page is to describe my personal qualities.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/LTyOTsYnsgidO/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/LTyOTsYnsgidO/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To do this, I decided to use icons. Quite a logical action. Describing your personal qualities, visualizing it all with icons.&lt;/p&gt;

&lt;p&gt;But here, too, I later wondered. I told myself. So stop, stop, stop, stop, wait a minute? Can't you draw such icons yourself? Yes, it will not be easy, but it is possible, right? Aren't you tired of these static images that you can find on a million other sites? &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;After thinking about all this a little more, I still decided to get down to business.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/CjmvTCZf2U3p09Cn0h/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/CjmvTCZf2U3p09Cn0h/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And I started drawing again, but this time icons.&lt;/strong&gt; 🥷&lt;br&gt;
&lt;a href="https://i.giphy.com/media/xT39D7GQo1m3LatZyU/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/xT39D7GQo1m3LatZyU/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And here's what I got. Oh, I forgot to add that I also wanted to animate them. I love doing this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NGZg6lhp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9r0qj1s3qibei8gjrwpz.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NGZg6lhp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9r0qj1s3qibei8gjrwpz.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also did a separate article about them.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/kerthin" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MEDW7r1U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--N_Cn4rKT--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/634154/b6864fc7-4410-46ca-a11d-bc605dc6d2b1.jpeg" alt="kerthin"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kerthin/codepen-css-icons-animation-3c1e" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;CodePen - CSS Icons (Animation)&lt;/h2&gt;
      &lt;h3&gt;Roden ・ May 21 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#codepen&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;CodePen:&lt;/strong&gt;&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/Astap/embed/QWddOgw?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;It remained only to add the text to them and that was all. The home page will be finished.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Result:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://i.giphy.com/media/SnyN7e9cgyLW7u6si3/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/SnyN7e9cgyLW7u6si3/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;7. Step Seven&lt;/h3&gt;

&lt;p&gt;Well, the end of creating a home page has come. It took me a little less than three weeks to create it. Yes, yes, do not be surprised, because it is not so easy to create everything that has been described from the first time. And before we go to the second page, I suggest you take a look at the result.&lt;/p&gt;

&lt;h1&gt;Home Page CodePen Demo:&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Astap/embed/vYxwBWj?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;Oh my God&lt;/h1&gt;, `6500` lines of `SCSS` code, and this is taking into account `loops` and `mixins` that shorten the code. Without them, there would probably be `7500` or `8000` lines of code. But there is still a portfolio page ahead.

&lt;h1&gt;Portfolio Page&lt;/h1&gt;

&lt;p&gt;With the portfolio page, everything was simpler, it was no longer necessary to come up with a style for the pages. But there was another problem. You see, when demonstrating my works, I planned that each work would have its own page separately. But I quickly realized that I don't want to produce a &lt;code&gt;large number of identical html files&lt;/code&gt;. And what will happen in a couple of years when the number of works will become significantly more?&lt;/p&gt;

&lt;p&gt;And I decided to create a section for the presentation of my works right on the page with my exhibited projects.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/ZC0ATzzJnKqn2SNDHR/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/ZC0ATzzJnKqn2SNDHR/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This section of the presentation was supposed to work according to the following principle:&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;1.&lt;/strong&gt; You click on a special card for any project;&lt;br&gt;
&lt;strong&gt;2.&lt;/strong&gt; The presentation opens according to the principle of the &lt;code&gt;Popup menu&lt;/code&gt;, only in the case of a presentation it opens on the &lt;code&gt;right&lt;/code&gt;, not on &lt;code&gt;top&lt;/code&gt;;&lt;br&gt;
&lt;strong&gt;3.&lt;/strong&gt; The content of the presentation itself is filled in depending on the project that you selected by clicking on the card, and all data about the project is stored in an array&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here's how it works:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://i.giphy.com/media/sYMq2uwh8ODKp0B7AU/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/sYMq2uwh8ODKp0B7AU/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To &lt;code&gt;close the presentation&lt;/code&gt;, click on the &lt;code&gt;round button&lt;/code&gt; in the upper-left corner.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Close Button&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://i.giphy.com/media/lprXQkFH0AfpK3CoZd/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/lprXQkFH0AfpK3CoZd/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have already created a separate article about this presentation.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/kerthin" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MEDW7r1U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--N_Cn4rKT--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/634154/b6864fc7-4410-46ca-a11d-bc605dc6d2b1.jpeg" alt="kerthin"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kerthin/awesome-developer-portfolio-page-for-your-projects-responsive-2npp" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;🔥Awesome Developer Portfolio Page for your Projects 📱 (responsive)&lt;/h2&gt;
      &lt;h3&gt;Roden ・ Jun 6 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#codepen&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Mini CodePen Demo:&lt;/strong&gt;&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/Astap/embed/JjWvVWj?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;Finishing touches&lt;/h1&gt;

&lt;p&gt;Well, that's it, the portfolio is ready. It remains only to add small details. Namely, the &lt;code&gt;preloader&lt;/code&gt;. You see, what's the matter, there are a &lt;code&gt;huge number of elements&lt;/code&gt; on the site that need a &lt;code&gt;little time to load&lt;/code&gt;, and in order not to observe the loading of elements, a &lt;code&gt;small preloader&lt;/code&gt; is needed.&lt;/p&gt;

&lt;p&gt;And also add a small animation of the elements surfacing to give the site a light &lt;code&gt;elegance&lt;/code&gt;.&lt;br&gt;
&lt;a href="https://i.giphy.com/media/jQ8ZaBz7M2drhJ4Fvr/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/jQ8ZaBz7M2drhJ4Fvr/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Initially, I made a preloader on which the word "Welcome" appears using SVG, but I quickly realized that this may look good, but it certainly won't work as a preloader for my site. &lt;code&gt;Because it's a very long time.&lt;/code&gt; &lt;strong&gt;10 seconds!!!&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://i.giphy.com/media/21uMqkDXYe0N8w73qO/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/21uMqkDXYe0N8w73qO/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Therefore, I decided to abandon the word animation, and reduce the preloader animation to &lt;code&gt;one second&lt;/code&gt; on &lt;code&gt;both pages&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/gtcZqfizRVOg0ErPWO/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/gtcZqfizRVOg0ErPWO/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Well that's it.&lt;/p&gt;

&lt;h1&gt;Responsive&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Home Page:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://i.giphy.com/media/eNzzfYMnxKAWYAQZsi/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/eNzzfYMnxKAWYAQZsi/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Portfolio Page:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://i.giphy.com/media/aLKsf0CtF0L61MPquY/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/aLKsf0CtF0L61MPquY/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The site is adapted for screen resolutions such as:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;@media 1728px&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media 1600px&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media 1440px&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media 1300px&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media 1180px&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media 1080px&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media 960px&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media 890px&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media 830px&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media 720px&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media 642px&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media 576px&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media 414px&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media 375px&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media 320px&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media iPad (min-width: 415px) and (max-width: 1025px) (portrait)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media iPad (min-width: 415px) and (max-width: 910px) (portrait)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media iPad (min-width: 415px) and (max-width: 834px) (portrait)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media iPad (min-width: 415px) and (max-width: 768px) (portrait)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media iPad (min-width: 415px) and (max-width: 685px) (portrait)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media iPad (min-width: 415px) and (max-width: 595px) (portrait)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media iPad (min-width: 415px) and (max-width: 490px) (portrait)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media (min-width: 1601px) and (max-width: 5000px) and (max-height: 940px)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media (min-width: 1441px) and (max-width: 1600px) and (max-height: 700px)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media (min-width: 1301px) and (max-width: 1440px) and (max-height: 670px)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media (min-width: 1181px) and (max-width: 1300px) and (max-height: 615px)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media (min-width: 1081px) and (max-width: 1180px) and (max-height: 540px)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media (min-width: 961px) and (max-width: 1080px) and (max-height: 515px)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media (min-width: 891px) and (max-width: 960px) and (max-height: 470px)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media (min-width: 720px) and (max-width: 890px) and (max-height: 425px)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media (min-width: 376px) and (max-width: 414px) and (max-height: 730px)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media (min-width: 321px) and (max-width: 375px) and (max-height: 660px)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media (max-width: 320px) and (max-height: 560px)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately, there were too many &lt;code&gt;@media queries&lt;/code&gt;, this is due to the fact that I used the value &lt;code&gt;vh&lt;/code&gt; for height, these are &lt;code&gt;viewports&lt;/code&gt; for height. Because of this, some elements had to be trimmed sometimes, but don't be too scared.&lt;/p&gt;

&lt;h1&gt;Summing up the results&lt;/h1&gt;

&lt;p&gt;Friends, now it's time to take stock, and calculate how much time it took me to create each individual element and why it ends up being about a month.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Design:&lt;/strong&gt; It took me about &lt;code&gt;3-4 days&lt;/code&gt; of long wanderings on such sites as &lt;code&gt;Behance&lt;/code&gt; and &lt;code&gt;Dribbble&lt;/code&gt; to think about how I want to see my portfolio&lt;br&gt;
&lt;strong&gt;2. CSS Illustration:&lt;/strong&gt; It took me about a &lt;code&gt;week&lt;/code&gt; to create CSS Illustration, well, maybe a little more&lt;br&gt;
&lt;strong&gt;3. Navigation:&lt;/strong&gt; I spent &lt;code&gt;2 days&lt;/code&gt; creating the navigation&lt;br&gt;
&lt;strong&gt;4. Icons:&lt;/strong&gt; I spent a &lt;code&gt;week and a half&lt;/code&gt; creating animated icons, it was not easy&lt;br&gt;
&lt;strong&gt;5. Portfolio Presentation:&lt;/strong&gt; And I spent a &lt;code&gt;week&lt;/code&gt; creating a portfolio and presentations for projects&lt;br&gt;
&lt;strong&gt;6. Preloader:&lt;/strong&gt; I also spent &lt;code&gt;2 days&lt;/code&gt; creating preloaders&lt;/p&gt;

&lt;p&gt;This results in approximately &lt;code&gt;33 days&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;During all this time, &lt;code&gt;900 lines&lt;/code&gt; of code were written on the &lt;code&gt;PUG preprocessor&lt;/code&gt;, &lt;code&gt;9000 lines&lt;/code&gt; of code on &lt;code&gt;SCSS&lt;/code&gt; and &lt;code&gt;565 lines&lt;/code&gt; of code on &lt;code&gt;JS&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Comrades&lt;/code&gt;, don't think about it, I'm not bragging. There's nothing to brag about here. I just decided to summarize it in terms of the amount of code.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But remember, quantity does not mean quality.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/h92pVH9aYqgoA6DJ5v/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/h92pVH9aYqgoA6DJ5v/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;The End&lt;/h1&gt;

&lt;p&gt;Friends, it's time to say goodbye. Thank you for paying attention to my post. My God, I wrote it for about five hours!!! And it feels like no more than two hours have passed. Well, okay, it's not scary. Below is the promised link to the full demo portfolio.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://kerthin.github.io/portfolio-templateSait/"&gt;&lt;h1&gt;Full Portfolio Demo&lt;/h1&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also download it from my repository&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Kerthin"&gt;
        Kerthin
      &lt;/a&gt; / &lt;a href="https://github.com/Kerthin/portfolio-templateSait"&gt;
        portfolio-templateSait
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;I can advise you to subscribe to my &lt;a href="https://twitter.com/BelichenkoRoden"&gt;&lt;strong&gt;Twitter&lt;/strong&gt;&lt;/a&gt;, I also post my work there.&lt;/p&gt;

&lt;p&gt;And finally, I want to say, friends, make such portfolios as you like. If you want to make a business card website without any extraneous elements, animations and other things, then please do it. Or on the contrary, you want to make some highly animated portfolio, or even make a 3d website on three.js then it is completely your right. There are no serious rules that you must follow here. The most important thing is that you like it first of all. And your employer should like your resume.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UD0_p0qY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q31tugoxqe5ci81y238c.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UD0_p0qY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q31tugoxqe5ci81y238c.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also check out my recent article on the topic of a portfolio for developers.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/kerthin" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MEDW7r1U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--N_Cn4rKT--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/634154/b6864fc7-4410-46ca-a11d-bc605dc6d2b1.jpeg" alt="kerthin"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kerthin/10-examples-of-a-good-developer-portfolio-for-your-inspiration-2f88" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;10 Examples of a Good 👩‍💻🧑‍💻 Developer Portfolio 💼 for Your Inspiration 🦄&lt;/h2&gt;
      &lt;h3&gt;Roden ・ Jun 18 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;See you all later.&lt;br&gt;
&lt;a href="https://i.giphy.com/media/fxe8v45NNXFd4jdaNI/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/fxe8v45NNXFd4jdaNI/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>codepen</category>
    </item>
    <item>
      <title>What Do I Need To Know About React Native Coming From React JS?</title>
      <author>cole-flournoy</author>
      <pubDate>Thu, 24 Jun 2021 22:57:18 +0000</pubDate>
      <link>https://dev.to/coleflournoy/what-do-i-need-to-know-about-react-native-coming-from-react-js-2kp0</link>
      <guid>https://dev.to/coleflournoy/what-do-i-need-to-know-about-react-native-coming-from-react-js-2kp0</guid>
      <description>&lt;p&gt;This post is for the people who are interested in React Native because they have experience with React JS. People who know that being able to develop for mobile and web helps their job prospects &lt;em&gt;but&lt;/em&gt; who also want to know how easy it's going to be before they sink in too much time wading through the &lt;a href="https://reactnative.dev/docs/getting-started"&gt;documentation&lt;/a&gt; (which is actually really good, you should check it out).&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;Getting React Native set up is incredibly easy, so definitely don't let that stop you. In less than five minutes you can be building out an app that you can see displayed on your own phone. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OxYgAMRD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ceh21mwfbkklv4vj43th.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OxYgAMRD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ceh21mwfbkklv4vj43th.png" alt="Getting started with Expo CLI vs React Native CLI"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We'll be using Expo CLI to get rolling quickly (more on the differences between the two &lt;a href="https://reactnative.dev/docs/environment-setup"&gt;here&lt;/a&gt; and the limitations of using Expo &lt;a href="https://docs.expo.io/introduction/why-not-expo/"&gt;here&lt;/a&gt;). As long as you're on Node 12+, you can install using npm, and create a new project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="n"&gt;npm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;install&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;-g&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;expo-cli&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="n"&gt;expo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;MyFirstProject&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;MyFirstProject&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;npm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For your most basic setup, that's really it. You're ready at this point to start developing your app (after you read the rest of this post so you know the basic differences between React JS and React Native).&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#display-options"&gt;
  &lt;/a&gt;
  Display Options
&lt;/h2&gt;

&lt;p&gt;Running &lt;code&gt;npm start&lt;/code&gt; (or &lt;code&gt;expo start&lt;/code&gt;) works just like with React JS, except the browser window that opens gives you some options for how to render your project. &lt;/p&gt;

&lt;p&gt;You'll see these menu options&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ntDA0bFs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m3uqpa706gwuy8f7wlib.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ntDA0bFs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m3uqpa706gwuy8f7wlib.png" alt="React Native menu options"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As well as a QR code&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iasIk0MT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vzsql9ll1mdfp2pqyklo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iasIk0MT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vzsql9ll1mdfp2pqyklo.png" alt="Link to Avatar the Last Airbender on Netflix"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Quickest but least fun option: &lt;strong&gt;Run in web browser&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;This is exactly the same as React JS. A new tab will open and display the welcome message from App.js or whatever you choose to render. Saving automatically updates the code in the browser.&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Still pretty quick, definitely really fun option: &lt;strong&gt;QR code&lt;/strong&gt; &lt;br&gt;
&lt;em&gt;If you download the Expo Go app on your mobile device, you can use the QR code scanner in the app (as long as the two devices are on the same network) to display your project on your phone. Once you've scanned it, the app will remember that project so you can go back to it in the future. Honestly, this is my favorite option&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Slower setup but probably most practical option: &lt;strong&gt;iOS/Android Simulator&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;The novelty of having it on your own phone is really cool, but for long-term development, looking down at your phone just isn't as efficient as having a simulator/emulator up on the screen right next to your code. To make that happen though you'll need Xcode and Android Studio, which can take a significant amount of time to install and configure for the first time.&lt;/em&gt; &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pick the option that's right for your goals, and let's get to the important bit: &lt;strong&gt;Is this just React JS with a couple new twists, or do I have to learn a whole new syntax?&lt;/strong&gt; &lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#whats-different-in-react-native"&gt;
  &lt;/a&gt;
  What's Different In React Native?
&lt;/h2&gt;

&lt;p&gt;This is by no means a complete list, but the following are four big differences from React JS that we need to address to get comfortable quickly in React Native. Once you're starting to branch out from the basics, if you need something, there's probably a component for it &lt;a href="https://reactnative.dev/docs/components-and-apis"&gt;here&lt;/a&gt;.   &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#no-html-syntax"&gt;
  &lt;/a&gt;
  No HTML syntax
&lt;/h3&gt;

&lt;p&gt;This is how a basic Welcome component might look in React JS&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Welcome&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Welcome to my React App!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Log in below&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h4&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;UserLoginForm&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, I know that everything here that looks like HTML is actually JSX, but the point is that this JSX is trying really hard to match the syntax of HTML. React Native still uses JSX, but none of the HTML-like components are permitted. &lt;/p&gt;

&lt;p&gt;This makes sense since we're no longer developing for the web, but it can still be a bit of an adjustment. To recreate the above function in React Native, we'll have to use some of its &lt;a href="https://reactnative.dev/docs/components-and-apis"&gt;core components&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;em&gt;All of the following components need to be imported by name in order to be used. Don't forget your imports!&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#div-becomes-view-scrollview"&gt;
  &lt;/a&gt;
  Div Becomes View / ScrollView
&lt;/h3&gt;

&lt;p&gt;The simple React Native equivalent for a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; tag is a &lt;code&gt;&amp;lt;View&amp;gt;&lt;/code&gt; component. They behave almost exactly the same (in terms of nesting, styling, etc.), and for our example, switching out the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; is pretty quick and painless.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;View&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-native&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Welcome&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;View&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Welcome to my React App!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Log in below&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h4&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;UserLoginForm&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;View&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One distinction here is that Views are not scrollable, so if we wanted all, or part, of this Welcome component to be scrollable, we would have to wrap that part of the component in a &lt;code&gt;&amp;lt;ScrollView&amp;gt;&lt;/code&gt; or replace the &lt;code&gt;&amp;lt;View&amp;gt;&lt;/code&gt; altogether. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;em&gt;ScrollViews must have a bounded height to function properly. More on that &lt;a href="https://reactnative.dev/docs/scrollview"&gt;here&lt;/a&gt;&lt;/em&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-text-component"&gt;
  &lt;/a&gt;
  The Text Component
&lt;/h3&gt;

&lt;p&gt;We've fixed our &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; error, now what do we do about these &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; tags? Enter &lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt;: the simple solution to basically everything text in React Native. The closest straight comparison for &lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt; would be a &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;View&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-native&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Welcome&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;View&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Welcome to my React App!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Log in below&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;UserLoginForm&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;View&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;No more errors! At least, no errors assuming I have a &lt;code&gt;UserLoginForm&lt;/code&gt; component written elsewhere and properly imported/exported. But you've probably noticed a small problem. In our original Welcome, we had two different header sizes, but now we just have two identical text components. That's because there is no separate header text component in React Native. We have to add one little extra step and style them ourselves. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-stylesheet-component"&gt;
  &lt;/a&gt;
  The StyleSheet Component
&lt;/h3&gt;

&lt;p&gt;Just like there's no HTML in React Native, there's also no CSS. But don't worry, the StyleSheet component is so similar you'll hardly even notice the difference. Inline styles are still an option:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;View&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-native&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Welcome&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;View&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;fontSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Welcome to my React App!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;fontSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Log in below&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;UserLoginForm&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;View&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But the most common way you'll see styling is by creating an object under the constant &lt;code&gt;styles&lt;/code&gt; with keys for the appropriate elements.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;View&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;StyleSheet&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-native&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="c1"&gt;// NEW IMPORT&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;StyleSheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;fontSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;subTitle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;fontSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Welcome&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;View&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Welcome to my React App!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subTitle&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Log in below&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;UserLoginForm&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;View&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So there we go, we've fixed all of our errors and matched the same code we started with in React JS (although the font size numbers may not precisely match an &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; and an &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt;). The &lt;a href="https://reactnative.dev/docs/stylesheet"&gt;docs&lt;/a&gt; do a great job with explaining more about styling, so I won't go deeper into that here. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;em&gt;One easy-to-overlook difference in React Native is that there are no units (such as 'px') on the stylesheet numbers.&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#whats-the-same-in-react-native"&gt;
  &lt;/a&gt;
  What's The Same In React Native?
&lt;/h2&gt;

&lt;p&gt;The short answer: a lot! Obviously there are different challenges that arise and need to be addressed building native applications, especially as the projects get more complex, but the good news is that the fundamentals are the same. &lt;/p&gt;

&lt;p&gt;I won't go through and list every single thing that's the same (the differences tend to be a lot more significant anyways), but there are a couple fundamental things I think React JS developers will be relieved to discover they already know how to do in React Native without even trying. &lt;/p&gt;

&lt;p&gt;Building out components has to be the biggest, because components are the heart of React and significant changes to how they're structured or used in React Native would be a big pain. Not that anyone was expecting a major difference here (they're obviously made by the same people and made to work together), but that's the kind of thing that makes deciding to learn a lot less intimidating. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Can I still build class components? Yes. &lt;/li&gt;
&lt;li&gt;Functional components? Yes. &lt;/li&gt;
&lt;li&gt;Local state and props? Exactly the same.&lt;/li&gt;
&lt;li&gt;Hooks? Of course.&lt;/li&gt;
&lt;li&gt;Event handling? Slightly different syntax but works the same.&lt;/li&gt;
&lt;li&gt;Fetch requests? The same.&lt;/li&gt;
&lt;li&gt;What if I want to use Async/Await? Feel free! &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You get the point. You already know way more React Native than you thought you did!&lt;/p&gt;




&lt;p&gt;There are a ton of great tutorials out there if you don't have a specific idea for a project to try things out, so if you're coming from a React JS background and thinking about React Native, there's no reason not to give it a shot. The setup is super easy, and it's a lot of fun even just to play around with. &lt;/p&gt;

</description>
      <category>react</category>
      <category>reactnative</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How To Accelerate Your Career During Uncertain Times</title>
      <author>Krowser Web Services </author>
      <pubDate>Thu, 24 Jun 2021 22:50:16 +0000</pubDate>
      <link>https://dev.to/krowser/how-to-accelerate-your-career-during-uncertain-times-50dn</link>
      <guid>https://dev.to/krowser/how-to-accelerate-your-career-during-uncertain-times-50dn</guid>
      <description>&lt;p&gt;Does the current situation have you wondering whether your career has come grinding to a halt? According to experts, growing professionally during a pandemic can be challenging but not impossible. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;View career paths as fluid&lt;/strong&gt;&lt;br&gt;
The steady climb isn’t the only way to accelerate your career. Think also in terms of the sidestep, backstep, and all-important slingshot. Suppose you find your career plateauing. Consider moving sideways into a position of equal rank and pay, in an organization or division that promises more advancement opportunities. Or you could take a backstep, working for less pay or a less prestigious title, at a more innovative startup that offers new hands-on learning opportunities. A slingshot entails doing both a sidestep and a backstep at the same time—making fewer instantly-gratifying moves, and more choices that help you advance towards your career goals. When you apply the knowledge, experience and skills gained through these moves, you increase your chances of leaping far ahead of where you started.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Focus on stretching yourself&lt;/strong&gt;&lt;br&gt;
Think you’re short on job security? Researchers at Boston University found that the most successful contract IT and filmmaking professionals—among those careers most lacking in stability—pursued "stretch work,” roles that emphasized learning new skills over increasing their income. Over time, they came out ahead of their peers. It pays not only to push yourself to learn new things but also to emphasize long-term personal growth over immediate financial returns. If a volunteer position helps you expand your work portfolio or make important contacts, don't be afraid to contribute. None of this time is wasted. You're building resilience and elastic skills that can be applied in any context.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Leverage your network&lt;/strong&gt;&lt;br&gt;
Successful people understand that if they want to overcome significant challenges and accelerate their careers, they need to surround themselves with a strong network of diverse individuals. And they are continually working to build those relationships. If you are one of the many people searching for a new job in the wake of Covid-19, don't be afraid to ask for help. The more you make others aware that you're looking for work, the better off you'll be. If you're shy about connecting with peers, find an excuse to be in their inbox, even if it's just to share an interesting article. You can also proactively network and make introductions between your connections, especially if they have similar interests or complementary skill sets.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Keep pushing forward&lt;/strong&gt;&lt;br&gt;
Continuous change is the new norm. To thrive in these fast-changing times, change with them. To future-proof yourself, become more flexible. Today, winning isn't about having more resources, but rather being more resourceful. Getting ahead isn’t about being a genius, but more ingenious. To succeed in unpredictable environments, find the courage to take chances. In unexpected times, everyone wants to be risk-free. Instead, create a competitive advantage by being risk-averse. Recognize that change is coming and make calculated bets that can help you gain the insights or talents today that will be in-demand tomorrow. Whatever your goal, pick a portfolio of promising growth activities to try—attend night school or take online computer programming courses. Just don't sit still while trends and competitors are evolving. Staying ahead of the curve is easier than it sounds, as long as you're staying in constant motion.&lt;/p&gt;

&lt;p&gt;Self-isolation and social distancing can make professional advancement more difficult. Yet, despite these challenges, you can still accelerate your career. All it takes is a bit of creativity, initiative and the willingness to believe it’s possible. Focus on these strategies now, and you'll be ahead of the curve when things inevitably take a turn for the better.&lt;/p&gt;

</description>
      <category>career</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Introducing Laravel Observers.</title>
      <author>Abdallah Samy</author>
      <pubDate>Thu, 24 Jun 2021 22:02:04 +0000</pubDate>
      <link>https://dev.to/abdallhsamy/introducing-laravel-observers-4a45</link>
      <guid>https://dev.to/abdallhsamy/introducing-laravel-observers-4a45</guid>
      <description>&lt;p&gt;Laravel framework comes with lots of awesome features, the outstanding one for me is the model  &lt;strong&gt;observers&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;According to the Laravel framework’s documentation:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you are listening for many events on a given model, you may use observers to group all of your listeners into a single class. Observers classes have method names which reflect the Eloquent events you wish to listen for. Each of these methods receives the model as their only argument. The  &lt;code&gt;make:observer&lt;/code&gt;  Artisan command is the easiest way to create a new observer class.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The observers helps me to declutter my controller of clean-up codes that I might have to run before or after making a model event, and also gives me a way to plug into the model’s event’s lifecycle and run any logic I might see fit.&lt;/p&gt;

&lt;p&gt;The model events that can be observed are spread across the model’s CRUD and includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Retrieved&lt;/li&gt;
&lt;li&gt;  Creating&lt;/li&gt;
&lt;li&gt;  Created&lt;/li&gt;
&lt;li&gt;  Updating&lt;/li&gt;
&lt;li&gt;  Updated&lt;/li&gt;
&lt;li&gt;  Saving&lt;/li&gt;
&lt;li&gt;  Saved&lt;/li&gt;
&lt;li&gt;  Deleting&lt;/li&gt;
&lt;li&gt;  Deleted&lt;/li&gt;
&lt;li&gt;  Restoring&lt;/li&gt;
&lt;li&gt;  Restored&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The above events can be observed for every model in the Laravel Framework and business logic attached to it, you can also dispatch custom events from the observer and listen to it from other parts of your application.&lt;/p&gt;

&lt;p&gt;You might not see yourself using the observer class just yet and that is fine, having fair knowledge about it too, is okay.&lt;/p&gt;

&lt;p&gt;Before that, to create an observer class, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;php artisan make:observer &amp;lt;observerName&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;(replace observerName with the name of the model you are observing).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This will create a folder in your application’s app directory called  &lt;strong&gt;Observers&lt;/strong&gt; and store the observer class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;  

&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\Observers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BankObserver&lt;/span&gt;  
&lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="c1"&gt;// an empty observer class  &lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From here you can populate the classes with methods that match events I listed earlier, it is worthy to note that you can attach a model to an observer when creating the observer, like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;php artisan make:observer &amp;lt;observerName&amp;gt; &lt;span class="nt"&gt;-m&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;ModelName&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create the class with some method filled in by default, see below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;  

&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\Observers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;App\Task&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Task&lt;/span&gt;  
&lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="cd"&gt;/**  
     * Handle the task "created" event.  
     *  
     * **@param** \App\Task  $task  
     * **@return** void  
     */&lt;/span&gt;
      &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;created&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Task&lt;/span&gt; &lt;span class="nv"&gt;$task&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="p"&gt;{&lt;/span&gt;  
        &lt;span class="c1"&gt;//  &lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;  

    &lt;span class="cd"&gt;/**  
     * Handle the task "updated" event.  
     *  
     * **@param** \App\Task  $task  
     * **@return** void  
     */&lt;/span&gt;
     &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;updated&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Task&lt;/span&gt; &lt;span class="nv"&gt;$task&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="p"&gt;{&lt;/span&gt;  
        &lt;span class="c1"&gt;//  &lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;  

    &lt;span class="cd"&gt;/**  
     * Handle the task "deleted" event.  
     *  
     * **@param** \App\Task  $task  
     * **@return** void  
     */&lt;/span&gt;
      &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;deleted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Task&lt;/span&gt; &lt;span class="nv"&gt;$task&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="p"&gt;{&lt;/span&gt;  
        &lt;span class="c1"&gt;//  &lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;  

    &lt;span class="cd"&gt;/**  
     * Handle the task "restored" event.  
     *  
     * **@param** \App\Task  $task  
     * **@return** void  
     */&lt;/span&gt;
      &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;restored&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Task&lt;/span&gt; &lt;span class="nv"&gt;$task&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="p"&gt;{&lt;/span&gt;  
        &lt;span class="c1"&gt;//  &lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;  

    &lt;span class="cd"&gt;/**  
     * Handle the task "force deleted" event.  
     *  
     * **@param** \App\Task  $task  
     * **@return** void  
     */&lt;/span&gt;
     &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;forceDeleted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Task&lt;/span&gt; &lt;span class="nv"&gt;$task&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="p"&gt;{&lt;/span&gt;  
        &lt;span class="c1"&gt;//  &lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You might be wondering what model action triggers what observer action, I’ll briefly explain the different methods and what triggers them.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Retrieved — This observer method is called when a model record is retrieved from the database.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nc"&gt;Model&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;findOrFail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//this triggers the retrieved method in the observer class&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;  Creating — This observer method is called when a model record is in the process of creation, and not yet stored into the database, this is before the id, and default timestamps are generated for the model, at this point you can dynamically check for and assign a default value to a missing column.&lt;/li&gt;
&lt;li&gt;  Created — This observer method is called after a model record is created successfully. If there is an error in the process of creation, say a missing column data, this method doesn’t get called.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nc"&gt;Model&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt; &lt;span class="c1"&gt;//this triggers the creating method first, then created method in the observer class.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;  Updating — This observer method is called when a model record is in the updating process, at this point, the updates has not yet been persisted to the database.&lt;/li&gt;
&lt;li&gt;  Updated — This observer method is called after a model record is updated successfully. If there is an error in the process of updating, this method doesn’t get called.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Model&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt; &lt;span class="c1"&gt;//this triggers the creating method first, then created method in the observer class.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;  Saving and Saved — These model observer methods might seem a bit like a swiss army knife, it gets called before and after any event that requires persistence of data to the database, so if you’re creating a new model record, the saving method runs first, then the creating method, then the created method and finally the saved method, the same routine applies when updating a model, saving, updating, updated, saved.&lt;/li&gt;
&lt;li&gt;  Deleting — This observer method is called when a model record is in the deletion process, at this point, the record has not yet been deleted from the database, and using its id to retrieve it from the database will return appropriate data.&lt;/li&gt;
&lt;li&gt;  Deleted — This observer method is called after a model record is successfully deleted, at this point, the record has been deleted from the database.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nc"&gt;Model&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;destroy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;  Restoring and Restored — These observer methods are called when a deleted model record is restored (using soft deletes implementation)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Important things to note:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  The updating and updated methods only run when the update changes a column of the model in the database, as such, if the update request does not effect a change, the updating and updated observers don’t trigger, only the saving and saved methods get triggered.&lt;/li&gt;
&lt;li&gt;  When restoring a deleted record, series of methods gets triggered one after the other, retrieved, restoring, saving, updating, updated, saved, then restored.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In any case where you want to make a model event without triggering any observer method, you can save it without observer events. An example of a method to use when creating a model without triggering any of the events:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;saveQuietly&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;  
&lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;withoutEvents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
    &lt;span class="p"&gt;});&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: This method should be added in the respective model.&lt;/p&gt;

&lt;p&gt;You can refactor it to suit other model events, as necessary.&lt;/p&gt;

&lt;p&gt;Finally, the last part, binding the observer to a particular model.&lt;/p&gt;

&lt;p&gt;This can be done in the boot method of the &lt;code&gt;AppServiceProvider’s class:&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cd"&gt;/**  
 * Bootstrap any application services.  
 *  
 * **@return** void  
 */&lt;/span&gt;  
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;boot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="nc"&gt;Model&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Observer&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Model is the model to be observed and observer is the observer class&lt;/p&gt;

&lt;p&gt;This ends the introduction to Laravel observers, and I hope it was enlightening to you.&lt;/p&gt;

&lt;p&gt;Originally Posted &lt;a href="https://blog.devgenius.io/introducing-laravel-observers-8f0198c6c9c?gi=714aae7b32be"&gt;here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>model</category>
      <category>observer</category>
      <category>event</category>
    </item>
    <item>
      <title>Building a Blog with React, Strapi &amp; GraphQL - Create Post &amp; Display it in Frontend</title>
      <author>Semir Teskeredzic</author>
      <pubDate>Thu, 24 Jun 2021 21:51:10 +0000</pubDate>
      <link>https://dev.to/semirteskeredzic/building-a-blog-with-react-strapi-graphql-create-post-display-it-in-frontend-3e19</link>
      <guid>https://dev.to/semirteskeredzic/building-a-blog-with-react-strapi-graphql-create-post-display-it-in-frontend-3e19</guid>
      <description>&lt;p&gt;Hey there, this is the second part of the mini series in Building an app with React, Strapi, and GraphQL. In the first part that you can find &lt;a href="https://dev.to/semirteskeredzic/first-steps-in-building-app-with-react-strapi-apollo-graphql-1g64"&gt;here&lt;/a&gt;, we went through first steps in prepping the backend and frontend for our app.&lt;br&gt;
In this part we will go through creating a blog post and displaying it in the list.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#add-blog-post-to-the-strapi"&gt;
  &lt;/a&gt;
  Add Blog Post to the Strapi
&lt;/h1&gt;

&lt;p&gt;First of all, spin up your Strapi environment with the command in the terminal from the directory that houses Strapi:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ yarn develop
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will start the Strapi server so you can now navigate to &lt;code&gt;http://localhost:1337/admin/&lt;/code&gt;, once you are there enter the login data for the admin user. &lt;br&gt;
Now in the left sidebar, chose &lt;code&gt;Content-Types Builder&lt;/code&gt; and this will bring you to the list of your content type so click &lt;code&gt;Create Content Type&lt;/code&gt;.&lt;br&gt;
As a name enter &lt;code&gt;BlogPost&lt;/code&gt; and press Continue, next you will be prompted to select a field for our content type:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wGlNmnf7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vkc6yhmtyawgv33tb2a7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wGlNmnf7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vkc6yhmtyawgv33tb2a7.png" alt="Strapi content type fields"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For a proper Blog post we need following fields:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Title (Text - Short text)&lt;/li&gt;
&lt;li&gt;Body (Text - Long text)&lt;/li&gt;
&lt;li&gt;Tags (Text- Short text)&lt;/li&gt;
&lt;li&gt;CreatedAt (Date - datetime)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Go on and create those fields by selecting the type from the parentheses. Don't forget to click save after you have added them.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#add-a-blog-post"&gt;
  &lt;/a&gt;
  Add a Blog post
&lt;/h1&gt;

&lt;p&gt;In this case we will also use our Strapi backend. Make sure that the Strapi server is running and navigate to &lt;code&gt;http://localhost:1337&lt;/code&gt;.&lt;br&gt;
In the collection type section of the left sidebar under Collection Types click on BlogPosts. This will open a list of current BlogPosts with the button to add a new Blog post, press that button to add a new Blog post.&lt;br&gt;
Fill out all the fields as you like and click Save and after that click Publish.&lt;br&gt;
Now when you click on Collection Types BlogPosts you will see our new post in the list.&lt;br&gt;
Next we will show the list of blog posts in the frontend of our application.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#show-the-list-of-blog-posts-in-frontend"&gt;
  &lt;/a&gt;
  Show the list of blog posts in frontend
&lt;/h1&gt;

&lt;p&gt;If you followed steps from the first part in frontend folder we have everything ready to fetch the data from the Strapi backend.&lt;br&gt;
In the &lt;code&gt;frontend&lt;/code&gt; folder create a new directory under &lt;code&gt;src&lt;/code&gt; named &lt;code&gt;queries&lt;/code&gt; there create a new file named &lt;code&gt;blogPosts.js&lt;/code&gt;.&lt;br&gt;
In this file we will write a GraphQL query that will fetch us needed data from Strapi.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;frontend/src/queries/blogPosts.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { gql } from '@apollo/client'

export const GET_BLOGPOSTS = gql`
  query {
  blogPosts {
    id
    Title
    Body
    Tags
    CreatedAt
  }
}`
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;You can test queries by navigating to &lt;a href="http://localhost:1337/graphql"&gt;http://localhost:1337/graphql&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now we need to write a component that will call this query and populate our table with the data, so let's create a &lt;code&gt;ListBlogPosts.js&lt;/code&gt; inside &lt;code&gt;frontend/src/components&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;frontend/src/components/ListBlogPosts.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react'
import { GET_BLOGPOSTS } from "../queries/blogPosts"
import {useQuery} from "@apollo/client";

function ListBlogPosts() {

    const {data, error, loading} = useQuery(GET_BLOGPOSTS)

    if(loading) return 'Loading...'
    if(error) return `Oops there has been an error: ${error}`
    if(data) return console.log(data)
}

export default ListBlogPosts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will use this to test whether our query actually works!&lt;br&gt;
If you save this, run the server with &lt;code&gt;yarn start&lt;/code&gt; and navigate to &lt;code&gt;http://localhost:3000&lt;/code&gt; you will see ..this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Oops there has been an error: Error: Forbidden
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that is OK! It shows that our connection with Strapi works, that our basic error handler works because we are forbidden to read this data so this is Strapi issue.&lt;br&gt;
Let's go back to Strapi backend and fix this, open Strapi backend and go to &lt;code&gt;Settings&lt;/code&gt; and under &lt;code&gt;Users &amp;amp; Permissions Plugin&lt;/code&gt; section select &lt;code&gt;Roles&lt;/code&gt;. There you will see our &lt;code&gt;BLOG-POSTS&lt;/code&gt; with all checkboxes deactivated, use &lt;code&gt;select all&lt;/code&gt; to check all boxes and save it.&lt;br&gt;
Now when you refresh &lt;code&gt;http://localhost:3000&lt;/code&gt; you will see nothing but when you open console you will see we get the object. Success! Now let's show that in a way we humans understand it. Remove the line with &lt;code&gt;if(data)...&lt;/code&gt; and create this return instead:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;frontend/src/components/ListBlogPosts.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
if(error) return `Oops there has been an error: ${error}`

return(
        &amp;lt;div&amp;gt;
            &amp;lt;h1&amp;gt;List of Blog Posts&amp;lt;/h1&amp;gt;
            &amp;lt;table&amp;gt;
                &amp;lt;thead&amp;gt;
                    &amp;lt;tr&amp;gt;
                        &amp;lt;th&amp;gt;ID&amp;lt;/th&amp;gt;
                        &amp;lt;th&amp;gt;Title&amp;lt;/th&amp;gt;
                        &amp;lt;th&amp;gt;Body&amp;lt;/th&amp;gt;
                        &amp;lt;th&amp;gt;Tags&amp;lt;/th&amp;gt;
                        &amp;lt;th&amp;gt;Created&amp;lt;/th&amp;gt;
                    &amp;lt;/tr&amp;gt;
                &amp;lt;/thead&amp;gt;
                {data?.blogPosts &amp;amp;&amp;amp; data?.blogPosts.length !== 0 ?
                    &amp;lt;tbody&amp;gt;
                    {data?.blogPosts.map(({id, Title, Body, Tags, CreatedAt}) =&amp;gt; (
                        &amp;lt;tr key={id}&amp;gt;
                            &amp;lt;td&amp;gt;{id}&amp;lt;/td&amp;gt;
                            &amp;lt;td&amp;gt;{Title}&amp;lt;/td&amp;gt;
                            &amp;lt;td&amp;gt;{Body}&amp;lt;/td&amp;gt;
                            &amp;lt;td&amp;gt;{Tags}&amp;lt;/td&amp;gt;
                            &amp;lt;td&amp;gt;{CreatedAt}&amp;lt;/td&amp;gt;
                        &amp;lt;/tr&amp;gt;
                    ))}
                    &amp;lt;/tbody&amp;gt; : &amp;lt;tbody&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;No Blog Posts to show!&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;/tbody&amp;gt;}
            &amp;lt;/table&amp;gt;
        &amp;lt;/div&amp;gt;
)

export default ListBlogPosts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What did we do here? We created a simple table and we filled it with the data from Strapi. As you can notice we are using &lt;code&gt;data?.&lt;/code&gt; with question mark, that is &lt;strong&gt;optional chaining&lt;/strong&gt; because we don't want our code to throw exception if the data is somehow not ok. First we are checking whether blogPosts are there and whether we have blogPosts, we use &lt;code&gt;.length&lt;/code&gt; here because we get an array of blogPosts so if there are blogPosts the &lt;code&gt;.length&lt;/code&gt; won't be 0. If there are no blogPosts we show short info that there is no blog posts to show while if there are blogPosts we show them in the table through the map function. &lt;/p&gt;

&lt;p&gt;Now we see a simple table with all the data we entered in the Strapi backend. In the next steps we will add editing and removing options to this table so we can handle it directly from the frontend client.&lt;/p&gt;

&lt;p&gt;Thank you for reading!&lt;/p&gt;

</description>
      <category>react</category>
      <category>graphql</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Absolute beginner's guide to Docker: What is a container?</title>
      <author>Erin Schaffer</author>
      <pubDate>Thu, 24 Jun 2021 21:29:46 +0000</pubDate>
      <link>https://dev.to/educative/absolute-beginner-s-guide-to-docker-what-is-a-container-lck</link>
      <guid>https://dev.to/educative/absolute-beginner-s-guide-to-docker-what-is-a-container-lck</guid>
      <description>&lt;p&gt;Docker is an open-source software platform that helps you simplify the process of creating, managing, running, and distributing your applications. With Docker, you can package your application along with all its dependencies into a container. Containers allow your applications to be deployed easily and uniformly.&lt;/p&gt;

&lt;p&gt;Today, we’ll dive deeper into Docker and discuss containers, modules, key terms, and more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We'll cover&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#docker"&gt;What is Docker?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#kubernetes"&gt;Docker vs Kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#vocabulary"&gt;Docker vocabulary guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#installing"&gt;Installing Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#nextsteps"&gt;What to learn next&lt;/a&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-docker"&gt;
  &lt;/a&gt;
  What is Docker?
&lt;/h2&gt;

&lt;p&gt;Docker is an open-source software that runs on Linux and Windows. With Docker, you can &lt;strong&gt;package your application and its dependencies together into containers&lt;/strong&gt;. Docker allows you to separate your applications from your infrastructure. &lt;/p&gt;

&lt;p&gt;The company started as a platform as a service that was built on Linux containers. To help make and manage the containers, they built an in-house tool that they nicknamed “Docker,” which is how the technology was born. The first version was released in 2013.&lt;/p&gt;

&lt;p&gt;Today, Docker dominates the market. Many companies use Docker to &lt;strong&gt;simplify the process of building, running, and managing applications&lt;/strong&gt;. It has changed the way companies do their application development. Docker &lt;strong&gt;virtualizes the operating system of the computer&lt;/strong&gt; on which it’s installed, which gives it the functionality of being extremely portable.&lt;/p&gt;

&lt;p&gt;Docker is used in:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DevOps&lt;/li&gt;
&lt;li&gt;Software&lt;/li&gt;
&lt;li&gt;IT services&lt;/li&gt;
&lt;li&gt;Staffing and recruiting&lt;/li&gt;
&lt;li&gt;Finance&lt;/li&gt;
&lt;li&gt;Healthcare&lt;/li&gt;
&lt;li&gt;Retail&lt;/li&gt;
&lt;li&gt;Etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before we get into anything else, let’s talk about Docker containers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-containers"&gt;
  &lt;/a&gt;
  What are containers?
&lt;/h3&gt;

&lt;p&gt;For a long time, companies have been using container technologies to address the weak points of virtual machines. We can think of containers as &lt;strong&gt;more lightweight versions of VMs&lt;/strong&gt;. The important difference between containers and VMs is that containers don’t need their own operating system. &lt;strong&gt;All containers on a host share that host’s operating system&lt;/strong&gt;, which frees up a lot of system resources. &lt;/p&gt;

&lt;p&gt;What are now modern containers started as Linux containers (LXC). Many contributors, including Google, have helped bring container-related technologies to the Linux kernel. Without these contributions, we wouldn’t have the rich container ecosystem we have today. &lt;/p&gt;

&lt;p&gt;Containerization wasn’t very accessible until Docker came along. Docker containers create an abstraction at the application layer. Containers &lt;strong&gt;package your application and its container dependencies with everything it needs to run, including&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the operating system&lt;/li&gt;
&lt;li&gt;application code&lt;/li&gt;
&lt;li&gt;runtime&lt;/li&gt;
&lt;li&gt;system tools&lt;/li&gt;
&lt;li&gt;system libraries&lt;/li&gt;
&lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#docker-modules"&gt;
  &lt;/a&gt;
  Docker modules
&lt;/h3&gt;

&lt;p&gt;Docker &lt;strong&gt;offers many different modules and plugins&lt;/strong&gt;. Let’s take a look at some of the most popular ones.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Docker Compose&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker-compose&lt;/code&gt; allows you to &lt;strong&gt;define and run multi-container applications&lt;/strong&gt;. With Compose,  you use a &lt;code&gt;YAML&lt;/code&gt; file to configure your app’s services and orchestrate containers on a Docker daemon or on Docker Swarm. You can think of it as an automated multi-container workflow. Docker Compose is great for development, testing, CI workflows, and staging environments. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Docker Machine&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker-machine&lt;/code&gt; allows you to &lt;strong&gt;deploy your containerized applications to the cloud&lt;/strong&gt;. With Docker Machine, you can create a remote virtual machine and manage your containers. It’s a great tool for creating deployment environments and managing micro-services that run on your application. It can be used with popular cloud services such as AWS and Microsoft Azure.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Docker stack&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Docker stack allows you to &lt;strong&gt;manage a cluster of Docker containers&lt;/strong&gt; with Docker Swarm. Docker stack is embedded into the Docker command-line interface (CLI). With stack, you can describe multiple services in a single file. It eliminates the need to maintain bash scripts to define services.&lt;/p&gt;

&lt;p&gt;﻿&lt;strong&gt;Docker Swarm&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Docker Swarm allows you to &lt;strong&gt;manage multiple containers across different host machines&lt;/strong&gt;. In other words, it’s a container orchestration tool. With Swarm, you can turn multiple Docker hosts into a single host.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#docker-vs-kubernetes"&gt;
  &lt;/a&gt;
  Docker vs Kubernetes
&lt;/h2&gt;

&lt;p&gt;It’s very common to confuse Docker with Kubernetes, so let’s take some time to look at the differences between the two technologies. These technologies complement one another very well, and they are frequently used together. &lt;br&gt;
We’ve already explored Docker in this article, but let’s highlight some key points.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Docker&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Docker is a &lt;strong&gt;containerization platform&lt;/strong&gt;. We can use Docker to build and run containers. Docker Engine is a runtime environment that allows you to build and run containers on a development machine. Operating applications can be complex, especially when you have a lot of containers deployed across various servers. It can be difficult to determine the best way to coordinate and schedule multiple containers, to figure out how they communicate with one another, and to decide how to scale your containers. This is where Kubernetes comes in!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kubernetes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.educative.io/blog/why-and-when-you-should-use-kubernetes"&gt;Kubernetes&lt;/a&gt; is an &lt;strong&gt;open-source orchestration software for containerization platforms like Docker&lt;/strong&gt;. It has an API that controls container operations. Kubernetes allows you to organize a cluster of VMs and schedule containers to run on those VMs. With Kubernetes, you &lt;strong&gt;can run Docker containers and manage your containerized applications&lt;/strong&gt;. Your containers are grouped into pods, and you can scale and manage these pods however you want.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Wait, what’s the difference between Kubernetes and Docker Swarm?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As we discussed above, Docker Swarm allows you to manage multiple containers across different host machines. &lt;/p&gt;

&lt;p&gt;The difference between Docker Swarm and Kubernetes is that Kubernetes is much more comprehensive than Docker Swarm. It runs across a cluster while Docker runs on one node. Kubernetes pods are divided across nodes to ensure availability. &lt;/p&gt;
&lt;/blockquote&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#docker-vocabulary-guide"&gt;
  &lt;/a&gt;
  Docker vocabulary guide
&lt;/h2&gt;

&lt;p&gt;Let’s take a look at some common Docker terms you’ll see when working with the platform.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Cgroups&lt;/strong&gt;: Control groups allow you to allocate resources among processes running on a system.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Container images&lt;/strong&gt;: Docker images are files that you use to execute code in a Docker container.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Docker build&lt;/strong&gt;: &lt;code&gt;docker build&lt;/code&gt; is a command that you use to build an image from a Dockerfile.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Docker Engine&lt;/strong&gt;: Docker Engine is the core product of Docker, which includes its daemon and CLI. It has an API for interacting with the Docker daemon.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Dockerfile&lt;/strong&gt;: A Dockerfile is a text-based document that holds the instructions for building Docker images.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Docker Hub&lt;/strong&gt;: Docker Hub is a service that allows you to find and share containers with your organization.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Docker Registry&lt;/strong&gt;: Docker Registry allows you to store and distribute named Docker images. Registries are organized into repositories, and they hold all of the versions of different images.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Docker run&lt;/strong&gt;: The run command allows you to create a container from a specified image and start that container using a given command.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Namespace&lt;/strong&gt;: Namespaces are created when you run a container. They provide a layer of isolation, as each element of a container runs in a different namespace.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Pull&lt;/strong&gt;: &lt;code&gt;docker pull&lt;/code&gt; is a command that allows you to download a specific image or set of images.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Repository (repo)&lt;/strong&gt;: Docker repositories allow you to share container images with others. These images are stored as tags.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: Docker tags are like labels that you can assign to any completed build.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Union filesystem (AUFS)&lt;/strong&gt;: A union filesystem layers multiple directories on a single host and presents them as a single directory.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#installing-docker"&gt;
  &lt;/a&gt;
  Installing Docker
&lt;/h2&gt;

&lt;p&gt;There many different ways and places to install Docker. We’ll walk through the installation of the Docker Desktop for Windows 10, Mac, and Linux. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Docker Desktop is an application that allows you to build and share containerized applications and micro-services&lt;/strong&gt;. According to the Docker documentation, it includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Docker Engine&lt;/li&gt;
&lt;li&gt;Docker CLI client&lt;/li&gt;
&lt;li&gt;Docker Compose&lt;/li&gt;
&lt;li&gt;Docker Content Trust&lt;/li&gt;
&lt;li&gt;Kubernetes&lt;/li&gt;
&lt;li&gt;Credential Helper&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#windows-10-installation"&gt;
  &lt;/a&gt;
  Windows 10 installation
&lt;/h3&gt;

&lt;p&gt;Before you can download Docker Desktop on Windows 10, you must have the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;64-bit version of Windows 10 Pro, Enterprise, or Education&lt;/li&gt;
&lt;li&gt;Hardware virtualization support must be enabled in your system’s BIOS&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;Hyper-V&lt;/em&gt; and &lt;em&gt;Containers&lt;/em&gt; features must be enabled in Windows&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Start with a Google search for “install Docker Desktop.” This search will take you to the download page where you can download the installer and follow the instructions. &lt;/p&gt;

&lt;p&gt;Once it’s installed, you may have to manually start the Desktop from the Windows Start menu. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#mac-installation"&gt;
  &lt;/a&gt;
  Mac installation
&lt;/h3&gt;

&lt;p&gt;As with the Windows 10 installation, the easiest way to install Docker Desktop on your Mac is to Google “install Docker Desktop.” From there, you can follow the links on the download page. &lt;/p&gt;

&lt;p&gt;Once it’s installed, you may have to manually start the Desktop from the MacOS Launchpad.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: With Mac, the Docker Engine doesn’t run natively on the MacOS Darwin kernel. The Docker daemon runs inside a lightweight Linux VM that exposes the daemon and API to your Mac environment. This means that you can open a terminal on your Mac and use Docker commands.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#linux-installation"&gt;
  &lt;/a&gt;
  Linux installation
&lt;/h3&gt;

&lt;p&gt;There are many ways to install Docker on Linux. You can Google search for Docker installation guides on Linux. In this section, we’ll take a look at one of the ways you can install Ubuntu Linux 20.04 LTS. We’ll assume you already have Linux installed. We’ll install Docker in two steps:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Update the apt package index&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo apt-get update

Get:1 http://eu-west-1.ec2.archive.ubuntu.com/ubuntu.com/ubuntu focal InRelease [265
kb]

...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;2. Install Docker from the official repo&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo apt-get install docker.io

Reading package lists... Done

Building dependency tree

...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-to-learn-next"&gt;
  &lt;/a&gt;
  What to learn next
&lt;/h2&gt;

&lt;p&gt;Congrats on taking your first steps with Docker! Docker is a popular open-source containerization platform that’s used in many different industries to simplify the process of building, securing, and managing applications. With Docker in such high demand, it’s a great tool to add to your skillset. &lt;/p&gt;

&lt;p&gt;A great way to get practical experience with Docker is to build a project to add to your professional portfolio. Before you get started, there are still many more things to learn about Docker such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Container lifecycle&lt;/li&gt;
&lt;li&gt;Docker commands&lt;/li&gt;
&lt;li&gt;Creating a new container&lt;/li&gt;
&lt;li&gt;Running containers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To get started learning these concepts and much more, check out Educative’s curated course &lt;a href="https://www.educative.io/courses/beginners-guide-to-docker"&gt;&lt;strong&gt;The Beginners Guide to Docker&lt;/strong&gt;&lt;/a&gt;. In this hands-on course, we’ll guide you through the basics of Docker to help you gain proficiency in the platform. By the end of the course, you’ll be ready to build your own Docker project to add to your portfolio!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Happy learning!&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#continue-learning-about-docker"&gt;
  &lt;/a&gt;
  Continue learning about Docker
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/docker-kubernetes-beginners-guide%EF%BB%BF"&gt;Getting started with Docker and Kubernetes: a beginners guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/microservices-architecture-tutorial-all-you-need-to-get-started"&gt;Microservices Architecture Tutorial: all you need to get started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/docker-with-rails"&gt;Docker with Rails: Benefits and Top Use Cases&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>docker</category>
      <category>programming</category>
      <category>kubernetes</category>
      <category>appdevelopment</category>
    </item>
    <item>
      <title>Regular Expression in JavaScript</title>
      <author>Bode</author>
      <pubDate>Thu, 24 Jun 2021 21:27:41 +0000</pubDate>
      <link>https://dev.to/thewebguyy/regular-expression-in-javascript-172k</link>
      <guid>https://dev.to/thewebguyy/regular-expression-in-javascript-172k</guid>
      <description>&lt;p&gt;A regular expression is an object that describes a pattern of characters. Regular expressions are often abbreviated &lt;em&gt;"regex"&lt;/em&gt; or &lt;em&gt;"regexp"&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The JavaScript RegExp class represents regular expressions, and both strings and RegExp define methods that use regular expressions to perform powerful pattern matching and search-and-replace functions on the text.&lt;/p&gt;

&lt;p&gt;In simpler terms, a regular expression is a sequence of characters that forms a search pattern.&lt;/p&gt;

&lt;p&gt;When you search for data in a text, you can use this search pattern to describe what you are searching for.&lt;/p&gt;

&lt;p&gt;A regular expression can be a single character, or a more complicated pattern.&lt;/p&gt;

&lt;p&gt;A regular expression can be defined as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var pattern = new RegExp(pattern,attributes);
OR
var pattern = /pattern/attributes;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Using String Methods&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In JavaScript, regular expressions are often used with the two string methods: search() and replace().&lt;/p&gt;

&lt;p&gt;The search() method uses an expression to search for a match, and returns the position of the match.&lt;/p&gt;

&lt;p&gt;The replace() method returns a modified string where the pattern is replaced.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Using String search() With a String.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The search() method searches a string for a specified value and returns the position of the match:&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;Use a string to do a search for "thewebguyy" in a string:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let text = "Visit thewebguyy!";
let n = text.search("thewebguyy");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The result in n will be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;6
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Using String search() With a Regular Expression&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Example:&lt;br&gt;
Use a regular expression to do a case-insensitive search for "thewebguyy" in a string:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let text = "Visit thewebguyy";
let n = text.search(/thewebguyy/i);

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The result in n will be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;6
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Using String replace() With a String&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The replace() method replaces a specified value with another value in a string:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let text = "Visit Hashnode!";
let result = text.replace("Hashnode", "thewebguyy");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Use String replace() With a Regular Expression&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;Use a case insensitive regular expression to replace Microsoft with W3Schools in a string:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let text = "Visit Hashnode!";
let result = text.replace(/hashnode/i, "thewebguyy");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The result in res will be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Visit thewebguyy!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that: Regular expression arguments (instead of string arguments) can be used in the methods above.&lt;br&gt;
Regular expressions can make your search much more powerful (case insensitive for example).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Regular Expressions Modifiers&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Modifiers are used to perform case-insensitive more global searches:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Hf6raewe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624568963749/6b0pQRVb8.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hf6raewe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624568963749/6b0pQRVb8.jpeg" alt="regular expressions.JPG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Regular Expression Patterns&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Brackets are used to find a range of characters:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FYdpelTN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624569313360/l7wg91Rck.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FYdpelTN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624569313360/l7wg91Rck.jpeg" alt="expression patterns.JPG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Metacharacters are characters with a special meaning:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IRs8zfru--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624569421023/HB3Bw2_hQ.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IRs8zfru--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624569421023/HB3Bw2_hQ.jpeg" alt="metacharacter.JPG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Quantifiers define quantities:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MOpSdGpr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624569476943/4rxIfp_Nvu.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MOpSdGpr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624569476943/4rxIfp_Nvu.jpeg" alt="quantifiers.JPG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Using the RegExp Object&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In JavaScript, the RegExp object is a regular expression object with predefined properties and methods.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Using test()&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The test() method is a RegExp expression method.&lt;/p&gt;

&lt;p&gt;It searches a string for a pattern, and returns true or false, depending on the result.&lt;/p&gt;

&lt;p&gt;The following example searches a string for the character "e":&lt;/p&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const pattern = /e/;
pattern.test("The best things in life are free!");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since there is an "e" in the string, the output of the code above will be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You don't have to put the regular expression in a variable first. &lt;/p&gt;

&lt;p&gt;The two lines above can be shortened to one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/e/.test("The best things in life are free!");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Using exec()&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The exec() method is a RegExp expression method.&lt;/p&gt;

&lt;p&gt;It searches a string for a specified pattern, and returns the found text as an object.&lt;/p&gt;

&lt;p&gt;If no match is found, it returns an empty (null) object.&lt;/p&gt;

&lt;p&gt;The following example searches a string for the character "e":&lt;/p&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/e/.exec("The best things in life are free!");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp"&gt;You can read a complete reference here&lt;/a&gt; &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>Use SOLID Principles To Become Better Automation Tester</title>
      <author>gusdmoreira</author>
      <pubDate>Thu, 24 Jun 2021 20:51:47 +0000</pubDate>
      <link>https://dev.to/gusdmoreira/use-solid-principles-to-become-better-automation-tester-3kg9</link>
      <guid>https://dev.to/gusdmoreira/use-solid-principles-to-become-better-automation-tester-3kg9</guid>
      <description>&lt;p&gt;&lt;strong&gt;Are you using most recommended and fundamental SOLID principles in your automation?&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-you-need-to-use-solid-principles"&gt;
  &lt;/a&gt;
  Why You Need To Use SOLID Principles?
&lt;/h2&gt;

&lt;p&gt;Like any development work, automation also needs to be planned, designed, developed, maintained and extended over time. Your automation code or automation framework is an application which is testing your actual application. That’s why SOLID principles are highly recommend for your automation to make it easy to understand, use, maintain and extend over time. When SOLID principles are not applied, your automation might become fragile, hard to maintain and hard to extend very soon.&lt;/p&gt;

&lt;p&gt;Even if you are using different programming language like C#, Python or automation tool like HP UFT/QTP for automation, you should definitely consider applying SOLID principles to make your automation tester life easy. Please note that we will be discussing about applying SOLID principles to web automation using Selenium &amp;amp; Java. But, once you learn the concepts, you can easily apply them to any object-oriented development.&lt;/p&gt;

&lt;p&gt;In this post, we will be exploring what SOLID principles stands for. We will be having one post for each principle with real life examples from web automation using Selenium &amp;amp; Java.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-solid-principles"&gt;
  &lt;/a&gt;
  What Are The SOLID Principles?
&lt;/h2&gt;

&lt;p&gt;SOLID principles are the first five object-oriented design principles by Robert C. Martin, popularly known as Uncle Bob.&lt;/p&gt;

&lt;p&gt;SOLID is an acronym where:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;S stands for Single Responsibility Principle (SRP)&lt;/li&gt;
&lt;li&gt;O stands for Open Closed Principle (OCP)&lt;/li&gt;
&lt;li&gt;L stands for Liskov Substitution Principle (LSP)&lt;/li&gt;
&lt;li&gt;I stands for Interface Segregation Principle (ISP)&lt;/li&gt;
&lt;li&gt;D stands for Dependency Inversion Principle (DIP)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s explore and understand each individual principle. Also, let’s find out how these SOLID principles make you better automation tester.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#single-responsibility-principle-srp-a-class-should-have-one-and-only-one-reason-to-change"&gt;
  &lt;/a&gt;
  Single Responsibility Principle (SRP): A class should have one, and only one, reason to change
&lt;/h2&gt;

&lt;p&gt;In other words to achieve this, a class should only have a single responsibility and it should do that very well. Every class in your automation should only have a single responsibility and that all of its methods should be aligned with that responsibility.&lt;/p&gt;

&lt;p&gt;Let’s try to understand this principle by looking at an example from our daily life. When you are driving a car/bike, you want to fully concentrate on the single responsibility – driving. You don’t want to do or concentrate on other tasks like talking on a phone, eating.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Automation Examples:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Page Object Framework implements SRP very well. We are going to have one class responsible for only one web page in the application. We shouldn’t have a very big class with many responsibilities like test methods, UI action methods, excel read/write methods.&lt;/li&gt;
&lt;li&gt;We can have very specific helper classes like ExcelHelper, DatabaseHelper to work with a excel file or database to implement Data Driven Framework.&lt;/li&gt;
&lt;li&gt;Selenium API has browser specific driver classes like FirefoxDriver, ChromeDriver, InternetExplorerDriver. FirefoxDriver has single responsibility to drive the Firefox browser and it drives the Firefox browser very well.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We should also have methods in classes that are very specific like &lt;code&gt;loginAs(username, password)&lt;/code&gt; to login with given username and password, &lt;code&gt;testSuccessfulLogin(username,password)&lt;/code&gt; which tests only one thing that login should be successful with valid username/password.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#open-closed-principle-ocp-software-entities-classes-modules-functions-etc-should-be-open-for-extension-but-closed-for-modification"&gt;
  &lt;/a&gt;
  Open Closed Principle (OCP): Software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification
&lt;/h2&gt;

&lt;p&gt;You should be able to easily add additional functionality for a class without changing its code. OCP says that a class should be open for extension and closed for modification. The “closed” part of the rule states that once a class has been developed and tested, the class code shouldn’t change except for any bug fixes. The “open” part of the rule states that you should be able to extend existing code in order to introduce new functionality. We are trying to add new functionality without modifying the existing code/functionality and by adding new classes/code as required. This is very important to minimise the impact of changes and errors from existing code.&lt;/p&gt;

&lt;p&gt;Let’s try to understand this principle by looking at an example from our daily life. Let’s say you live in a 2 bedroom house and you are looking for a 3 bedroom house due to reasons like growing children. If you have free/unused space available, it’s very easy to extend the house by building another bedroom. Also with this, you are minimise the impact of changes on the existing 2 bedroom house.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Automation Example:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let’s say that you are automating an online store application. You have Customer class to represent store customers and respective related customer actions. Now, your company has introduced VIP customer concept to reward loyal customers with discounts and free delivery. To implement VIP customer behaviour in your automation, OCP suggests that keep the Customer class same without modifying it and create a new VipCustomer class by inheriting from Customer class. Now in the VipCustomer class extend the behaviour as required.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#liskov-substitution-principle-lsp-subtypes-must-be-substitutable-for-their-base-types"&gt;
  &lt;/a&gt;
  Liskov Substitution Principle (LSP): Subtypes must be substitutable for their base types
&lt;/h2&gt;

&lt;p&gt;When you pass subtype for a base type argument or when you assign/instantiate base type with subtype, the program/code should work properly without changing its behaviour and shouldn’t break. This principle was introduced by and named after Barbara Liskov.&lt;/p&gt;

&lt;p&gt;Let’s try to understand this principle by looking at an example from our daily life. Let’s say that you have a wall clock at home or you have a wrist watch. They both need batteries to work. If you buy batteries as per the specifications from any brand like Panasonic, Sony, Duracell, you expect the wall clock or wrist watch to work properly without any issues when powered by those batteries.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Automation Example:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Considering the above example of automating an online store application with Customer and VIP Customer categories, let’s say there is a method &lt;code&gt;calculateDeliveryCharge(Customer customer, OrderInfo orderInfo)&lt;/code&gt; which calculates delivery charge when customer and order information is passed. When we pass &lt;code&gt;Customer&lt;/code&gt; object to &lt;code&gt;calculateDeliveryCharge()&lt;/code&gt; method with order information, it should return delivery charge. Note that we are providing free delivery to VIP Customers. So, when we pass &lt;code&gt;VipCustomer&lt;/code&gt; object for customer argument to &lt;code&gt;calculateDeliveryCharge()&lt;/code&gt; method with order information, the program/code should work properly without changing its behaviour and shouldn’t throw any exceptions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#interface-segregation-principle-isp-make-fine-grained-interfaces-that-are-client-specific"&gt;
  &lt;/a&gt;
  Interface Segregation Principle (ISP): Make fine grained interfaces that are client specific
&lt;/h2&gt;

&lt;p&gt;It’s good to have small role specific interfaces rather than one big general interface. ISP states that clients should never be forced to implement interfaces that they don’t use or clients should never be forced to depend on methods that they don’t use. When a class depends upon another class, the number of members visible from the another class to the dependent class should be minimised. When you apply the ISP, classes implement multiple smaller role specific interfaces and dependent classes depend on required role specific interfaces for the given task.&lt;/p&gt;

&lt;p&gt;Let’s try to understand this principle by looking at an example from our daily life. When you are travelling in a train and when ticket inspector wants to check your ticket, you will be showing only your ticket and not all your luggage. Similarly, ticket inspector wants to check your ticket only and not any other belongings of you. We should reveal/expose only what’s required for the given task.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Automation Example:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let’s again take the example of automating an online store application. You have to test that an email is received by the customer after successful purchase. Let’s say that you have an EmailHelper class with a method &lt;code&gt;isEmailReceived()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Your Customer class might have so many fields and methods like &lt;code&gt;firstName, lastName, emailAddress, phoneNumber, deliveryAddress, billingAddress, getPurchaseHisotry(), getOrdersInProgress()&lt;/code&gt;. But &lt;code&gt;isEmailReceived()&lt;/code&gt; method only needs to know &lt;code&gt;firstName, lastName, emailAddress&lt;/code&gt; fields and doesn’t need to now all the other fields/methods of Customer class.&lt;/p&gt;

&lt;p&gt;Consider implementation like &lt;code&gt;isEmailReceived(Customer customer, string subject, string body)&lt;/code&gt;: We are exposing whole Customer class in &lt;code&gt;isEmailReceived()&lt;/code&gt; method and then one can easily access/change details like &lt;code&gt;phoneNumber, deliveryAddress, billingAddress&lt;/code&gt; in &lt;code&gt;isEmailReceived()&lt;/code&gt; method. We want to minimize the risk to Customer object by passing only details that are required to the clients/methods. We can achieve this by below implementation by using an &lt;code&gt;Emailable&lt;/code&gt; interface which represents a contact that can be emailed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;interface Emailable {
    String getFirstName();
    String getLastName();
    String getEmailAddress();
}

class Customer implements Emailable {
    String firstName, lastName, emailAdddress;
    String phoneNumber, deliveryAddress, billingAddress;

    public String getFirstName() {
        return firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public String getEmailAddress() {
        return emailAdddress;
    }
}

class EmailHelper {
    public boolean isEmailReceived(Emailable recipient, String subject, String body) {
        // Logic to check whether recipient recieved email or not

        // You can use recipient.getFirstName(), recipient.getLastName(), recipient.getEmailAddress() to get recipient details

        // When you pass Customer object to this method, only Emailable interface methos are available here and no other details are exposed from Customer Object

        // Customer object is safe from any changes

        return false;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we can further reuse Emailable interface for other types like StoreManager, Supplier to whom your online store sends emails. With this approach, we can use &lt;code&gt;isEmailReceived()&lt;/code&gt; method with any implementation that implements Emailable interface and respective input object for recipient argument is safe from any changes/actions. I hope now you have understood the power of ISP.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Other Automation Example:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Selenium API has good examples of ISP. Selenium API has a number of very fine grained, role based client specific interfaces like WebDriver, WebElement, Alert. We should favour role based interfaces instead of generic interfaces.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dependency-inversion-principle-dip-depend-on-abstractions-not-on-concretions"&gt;
  &lt;/a&gt;
  Dependency Inversion Principle (DIP): Depend on abstractions, not on concretions
&lt;/h2&gt;

&lt;p&gt;DIP states that Software entities (classes, modules, functions, etc.) should depend on abstractions (like interfaces) and not on concretions (like concrete class types). DIP promotes code to an interface approach. For example, in Selenium automation code, we code to a WebDriver interface variable “driver” whenever we want to work with web browser and the same code works for any browser type like FirefoxDriver, ChromeDriver, InternetExploerDriver which implements the WebDriver interface.&lt;/p&gt;

&lt;p&gt;DIP mainly suggests below 2 rules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;High level modules should not depend upon low level modules. Both should depend upon abstractions.&lt;/li&gt;
&lt;li&gt;Abstractions should not depend upon details. Details should depend upon abstractions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s try to understand this principle by looking at an example from our daily life. When you go to a cash machine/ATM, the cash machine/ATM expects a valid debit/credit card. The machine has a dependency on valid card abstraction and not on specific concrete type cards like only Visa, only Maestro or only issued by specific bank. The machine works for any valid card type implementation and we are providing the card to the machine from outside which provides so much flexibility and easiness to use the machine.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Automation Example:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Look at below page object class for a Login Page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public class LoginPage {
    private WebDriver driver;

    public LoginPage(WebDriver driver) {
        this.driver = driver;
    }

    public void loginAs(String username, String password) {
        driver.findElement(By.id("username")).sendKeys(username);
        driver.findElement(By.id("password")).sendKeys(password);
        driver.findElement(By.name("login")).click();
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can observe following with respect to DIP from above LoginPage class:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is depending on the abstraction and all the code is written against WebDriver interface so that the code can work with any implementation like FirefoxDriver, ChromeDriver, InternetExploerDriver&lt;/li&gt;
&lt;li&gt;The implementation for the WebDriver interface should be passed by the client through constructor LoginPage(WebDriver driver) when creating the LoginPage object.&lt;/li&gt;
&lt;li&gt;So the code works for any implementation and we can pass the implementation when creating the object. This gives us lot of flexibility and it will be easy to maintain.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#get-ready-to-useapply-solid-principles-in-your-automation"&gt;
  &lt;/a&gt;
  Get Ready To Use/Apply SOLID Principles In Your Automation…
&lt;/h2&gt;

&lt;p&gt;I hope you have got good understanding of SOLID principles by now. If it seems complicated, don’t worry and things will be very clear in the next posts. Let’s look at each principle individually in the next posts to find out how these principles makes us better automation testers and makes our automation easy to understand, use, maintain and extend.&lt;/p&gt;

</description>
      <category>testing</category>
      <category>solid</category>
      <category>selenium</category>
    </item>
  </channel>
</rss>
