<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>My Binary Search Solution is better than yours </title>
      <author>Dimer BWimBA</author>
      <pubDate>Fri, 07 May 2021 07:57:26 +0000</pubDate>
      <link>https://dev.to/dimer191996/my-binary-search-solution-is-better-than-yours-2k21</link>
      <guid>https://dev.to/dimer191996/my-binary-search-solution-is-better-than-yours-2k21</guid>
      <description>&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const binary = (val, arr) =&amp;gt; {
  let lower = 0;
  let upper = arr.length - 1;
  while (lower &amp;lt;= upper) {
    console.log("ols");
    const middle = lower + Math.floor((upper - lower) / 2);
    if (val === arr[middle]) {
      return middle;
    }
    if (val &amp;lt; arr[middle]) {
      console.log("right");
      upper = middle - 1;
    } else {
      console.log("left");
      lower = middle + 1;
    }
  }
  return -1;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>algorithms</category>
      <category>simplecode</category>
    </item>
    <item>
      <title> Rock Paper Scissors Spock Lizard game in JavaScript</title>
      <author>matvii</author>
      <pubDate>Fri, 07 May 2021 07:50:07 +0000</pubDate>
      <link>https://dev.to/hodovani/rock-paper-scissors-spock-lizard-game-in-javascript-55np</link>
      <guid>https://dev.to/hodovani/rock-paper-scissors-spock-lizard-game-in-javascript-55np</guid>
      <description>&lt;p&gt;Welcome to my tutorial!&lt;/p&gt;

&lt;p&gt;In this tutorial, we're gonna build a really simple game of Rock Paper Scissors Spock Lizard.&lt;/p&gt;

&lt;p&gt;Please check my GitHub account for the complete source code.&lt;br&gt;
&lt;a href="https://github.com/hodovani/rock-paper-scissors-Spock-lizard"&gt;https://github.com/hodovani/rock-paper-scissors-Spock-lizard&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are gonna use vanilla JavaScript, HTML, CSS for this game.&lt;/p&gt;

&lt;p&gt;YouTube video&lt;br&gt;
&lt;a href="https://youtu.be/pJw39quoajE"&gt;https://youtu.be/pJw39quoajE&lt;/a&gt;&lt;/p&gt;

</description>
      <category>gamedev</category>
      <category>javascript</category>
      <category>html</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How much time do you spend writing tests?</title>
      <author>Madza</author>
      <pubDate>Fri, 07 May 2021 07:46:16 +0000</pubDate>
      <link>https://dev.to/madza/how-much-time-do-you-spend-writing-tests-2oc7</link>
      <guid>https://dev.to/madza/how-much-time-do-you-spend-writing-tests-2oc7</guid>
      <description>&lt;p&gt;It‚Äôs a decades-old debate of whether developers should write tests or not. While some think it‚Äôs important, others believe that it may be too much to ask from developers.&lt;/p&gt;

&lt;p&gt;How much time do you spend writing tests?&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>webdev</category>
      <category>testing</category>
    </item>
    <item>
      <title>How do you create your invoices?</title>
      <author>Madza</author>
      <pubDate>Fri, 07 May 2021 07:30:28 +0000</pubDate>
      <link>https://dev.to/madza/what-invoice-app-do-you-use-5aaj</link>
      <guid>https://dev.to/madza/what-invoice-app-do-you-use-5aaj</guid>
      <description>&lt;p&gt;With a proper invoice app all your billable hours, products, and taxes are all added up in a snazzy invoice. This is especially useful for smaller business owners or freelancers.&lt;/p&gt;

&lt;p&gt;My favorite is a free, open-source project &lt;a href="https://github.com/hql287/Manta"&gt;Manta&lt;/a&gt; - a desktop application for creating invoices with beautiful and customizable templates.&lt;/p&gt;

&lt;p&gt;What tools do you use to create invoices?&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>productivity</category>
      <category>startup</category>
      <category>finances</category>
    </item>
    <item>
      <title>Django - A python framework | 6 hours Course</title>
      <author>ùíÆùí∂ùìáùìâùíΩùí∂ùìÄ üì®</author>
      <pubDate>Fri, 07 May 2021 06:33:24 +0000</pubDate>
      <link>https://dev.to/sarthaksavvy/django-a-python-framework-6-hours-course-pej</link>
      <guid>https://dev.to/sarthaksavvy/django-a-python-framework-6-hours-course-pej</guid>
      <description>&lt;p&gt;Django is the most famous Python web framework for perfectionists with deadlines.&lt;br&gt;
Let's learn Django by creating a Bookstore app with user authentication, file uploading, reviews on books and many more features&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/aY43fUGlB7E"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;üåüDjango has many features üåü&lt;/p&gt;

&lt;p&gt;Ridiculously fast.&lt;br&gt;
Fully loaded.&lt;br&gt;
Reassuringly secure.&lt;br&gt;
Exceedingly scalable.&lt;br&gt;
Incredibly versatile.&lt;br&gt;
Source code - &lt;a href="https://github.com/bitfumes/django-course"&gt;https://github.com/bitfumes/django-course&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üåü Course Contents üåü&lt;br&gt;
‚è≥ (00:00:00) Intro and What we will Learn&lt;br&gt;
‚è≥ (00:05:15) Install and Setup&lt;br&gt;
‚è≥ (00:11:52) Start New Project&lt;br&gt;
‚è≥ (00:18:42) File Structure&lt;br&gt;
‚è≥ (00:25:52) Start New App&lt;br&gt;
‚è≥ (00:33:10) Register App &amp;amp; URL&lt;br&gt;
‚è≥ (00:44:47) Using Template&lt;br&gt;
‚è≥ (00:51:49) Load Data from JSON file&lt;br&gt;
‚è≥ (00:58:37) Design using Tailwindcss&lt;br&gt;
‚è≥ (01:02:40) Dynamic Routing&lt;br&gt;
‚è≥ (01:09:34) Template Filter and Tags&lt;br&gt;
‚è≥ (01:16:19) Database Migration &amp;amp; Model&lt;br&gt;
‚è≥ (01:26:56) Migration Update&lt;br&gt;
‚è≥ (01:31:17) Query Filter &amp;amp; Create&lt;br&gt;
‚è≥ (01:39:43) Show Data from Database&lt;br&gt;
‚è≥ (01:44:39) Intro to Django Admin&lt;br&gt;
‚è≥ (01:50:37) Django Admin CRUD&lt;br&gt;
‚è≥ (01:58:42) Handle Not Found 404&lt;br&gt;
‚è≥ (02:05:47) Form CSRF Token&lt;br&gt;
‚è≥ (02:12:08) Store New Review&lt;br&gt;
‚è≥ (02:23:37) Order by Review &amp;amp; Link Book&lt;br&gt;
‚è≥ (02:31:21) Generic List View&lt;br&gt;
‚è≥ (02:41:11) Generic Detail View&lt;br&gt;
‚è≥ (02:46:41) Relationship in Django&lt;br&gt;
‚è≥ (02:58:02) Template Inheritance&lt;br&gt;
‚è≥ (03:05:56) Many to Many Relationship&lt;br&gt;
‚è≥ (03:19:07) Query Many to Many Relationship&lt;br&gt;
‚è≥ (03:26:29) Authentication Intro&lt;br&gt;
‚è≥ (03:33:42) Login and Redirect User&lt;br&gt;
‚è≥ (03:41:23) Using Middleware&lt;br&gt;
‚è≥ (03:49:02) Logout a User&lt;br&gt;
‚è≥ (03:58:50) Restrict user on template&lt;br&gt;
‚è≥ (04:04:38) Connect user with Review&lt;br&gt;
‚è≥ (04:14:02) Reset Password&lt;br&gt;
‚è≥ (04:24:16) Email SMTP settings&lt;br&gt;
‚è≥ (04:37:33) Image upload for Book&lt;br&gt;
‚è≥ (04:48:21) Store image for Review&lt;br&gt;
‚è≥ (04:55:54) Working with Django Forms&lt;br&gt;
‚è≥ (05:05:55) Upload File with model form&lt;br&gt;
‚è≥ (05:17:35) Prepare Django for deployment&lt;br&gt;
‚è≥ (05:30:53) Deploy Django to Heroku&lt;/p&gt;

</description>
      <category>python</category>
      <category>django</category>
    </item>
    <item>
      <title>Sphere.js creating http servers for beginners</title>
      <author>Jahongir Sobirov</author>
      <pubDate>Fri, 07 May 2021 06:28:10 +0000</pubDate>
      <link>https://dev.to/jahongir2007/sphere-js-creating-http-servers-for-beginners-550a</link>
      <guid>https://dev.to/jahongir2007/sphere-js-creating-http-servers-for-beginners-550a</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-spherejs"&gt;
  &lt;/a&gt;
  What is Sphere.js?
&lt;/h2&gt;

&lt;p&gt;Sphere.js is designed to create these simple http servers. So what is an http server? An HTTP server is a small and simple server that can be created in node.js. In Node.js, you can do this mainly through http, express.js and socket.io. It takes a lot of time to learn these. However, sphere.js is not like that. This framework is mainly recommended for beginners.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-spherejs"&gt;
  &lt;/a&gt;
  Using sphere.js
&lt;/h2&gt;

&lt;p&gt;Let‚Äôs download this framework first and we will do this using github cli: &lt;code&gt;gh repo clone Jahongir2007/sphere.js&lt;/code&gt;&lt;br&gt;
Creating simple http server in Sphere.js:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sphere&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./sphere&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// importing sphere.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sphere&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// creating sphere application&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="c1"&gt;// creating http server&lt;/span&gt;
   &lt;span class="na"&gt;head&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// server head&lt;/span&gt;
   &lt;span class="na"&gt;send&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello, world!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// getting text for http server&lt;/span&gt;
   &lt;span class="na"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8000&lt;/span&gt; &lt;span class="c1"&gt;// listening http server&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node test.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9boAixk7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3sb2ms0de8phgw3w5yms.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9boAixk7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3sb2ms0de8phgw3w5yms.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>http</category>
    </item>
    <item>
      <title>Embedded service</title>
      <author>Emanuel Allely</author>
      <pubDate>Fri, 07 May 2021 06:19:21 +0000</pubDate>
      <link>https://dev.to/emanuel_allely/embedded-service-2hmn</link>
      <guid>https://dev.to/emanuel_allely/embedded-service-2hmn</guid>
      <description>&lt;h1&gt;
  &lt;a href="#embedded-services"&gt;
  &lt;/a&gt;
  Embedded Services
&lt;/h1&gt;

&lt;p&gt;A family photo shared on a social network. An interesting news article. A funny video of a cat. It all starts with a website. A website needs a few things, notably a database. You ask for the website for your link, and the website gets data from different services, formats it into something pretty, and then returns that to you. The World Wide Web is literally that, a web of services. Websites fetching data from other websites, from databases, from authentification services, from data storage servers... And you don't need to know where those services are. They might be located on the same server, or they might be in the same building, or they might even be on the other side of the planet. Everything just works.&lt;/p&gt;

&lt;p&gt;Developing for such a scenario was difficult, but the world of web development changed everything. Web services today are separated into different code blocks, making things easier to develop and maintain. You literally do not need to know anything about how the database server works, so long as you use the services described in the documentation, you can store and retrieve data. If you need more storage or more space, then moving a database to a different server is now trivial. When you call a number to get information on your electricity bill, do you know where the call center is? Is it in your city? Is it even in your country? You don't know, so long as you know how to contact the service, you are good to go. You don't need to know where something is physically, you only need to know where something is logically.&lt;/p&gt;

&lt;p&gt;Embedded systems haven't yet caught up, but we're getting there.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gSMSWIpo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gwgd8y54kfnh66ed2uvw.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gSMSWIpo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gwgd8y54kfnh66ed2uvw.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#simple-ideas-complicated-solutions"&gt;
  &lt;/a&gt;
  Simple ideas, complicated solutions
&lt;/h1&gt;

&lt;p&gt;Let‚Äôs take the example of an industrial system. If the temperature goes above a certain point (T1), we need to turn on a fan to cool down the system. This fan is noisy, so we won‚Äôt keep it running all the time, only when needed. If the temperature still goes higher, past another point called T2, we will shut down the system to avoid damage. If the temperature goes below a certain point, called T0, we need to turn some heating elements on.&lt;/p&gt;

&lt;p&gt;The program used to control this situation is pretty simple: program the primary microcontroller to check values from time to time to see what the temperature is and then act on that information. Lower than T0, then we turn the heating element on. Higher than T1, turn the fan on. Higher than T2, then turn the entire system off. But wait a minute, we made a mistake. If the temperature goes above T0, we need to turn the heating element off; otherwise, we are overheating a system we are trying to keep cool. No problem, we can easily catch errors like this when the code is small.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#splitting-up-code"&gt;
  &lt;/a&gt;
  Splitting up code
&lt;/h1&gt;

&lt;p&gt;Your hugely complex machine will be running much more code than just a temperature sensor. It might be an industrial 3D printer, or maybe even something to help send the next space probe to Mars. However, deep inside this code, there will still be the temperature sensor routine, something that electronically checks the temperature component to get that information. Since one microcontroller will be busy with other important tasks, maybe this task can be offloaded to another microcontroller? There is an advantage; the code on this microcontroller is nice and lightweight. Disadvantage? Now you have to write code to communicate (remember that the "main" microcontroller is also going to need the temperature to display on that fancy LCD screen so that the operator knows what is going on).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aPC8Md3E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/br1we4ok8jms06rsi77j.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aPC8Md3E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/br1we4ok8jms06rsi77j.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#simplifying-code"&gt;
  &lt;/a&gt;
  Simplifying code
&lt;/h1&gt;

&lt;p&gt;So what is the best thing to do? Who gets the temperature sensor? Even worse, is it actually easier from a development point of view to add two temperature sensors? One for each microcontroller, and each reading the same temperature at the same location? This has actually happened in the past.&lt;/p&gt;

&lt;p&gt;By creating one single program that controls not only the fans and heater, but also the laser engraver, hydraulic press, or some other complex system, we make the code more and more complex. The more code becomes complex, the more errors can hide inside, and the bigger the board. When does complex become too complex? By separating the code, we make it easier to maintain, but we also need to add in communication code to be able to communicate with other boards. Win some, lose some.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7sTQfxWJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ezi6x3ul3j2v9t81lpml.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7sTQfxWJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ezi6x3ul3j2v9t81lpml.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#boxes-of-code"&gt;
  &lt;/a&gt;
  Boxes of code
&lt;/h1&gt;

&lt;p&gt;Reading the temperature is a service, or at least it should be. It doesn't really matter who needs the temperature; each program running on this network should be able to send a request to get the temperature, no matter where they are, no matter where the sensor is on the network. Not only the temperature sensor but also the alarm in case something goes wrong, the keypad to know what the user wants, the distance sensor to know if the object you're working on is correctly placed, and so on.&lt;/p&gt;

&lt;p&gt;If the temperature does go above the limit, you need to send an alarm. What kind of alarm? It doesn't matter. Maybe in one factory with lots of workers, a flashing red and orange light is enough. However, in another factory with fewer people, they would want a siren to alert someone close by.&lt;/p&gt;

&lt;p&gt;Added advantage, you can replace the alarm with some other hardware, with a completely different electronic interface, and you won‚Äôt have to rewrite any code since it offers equivalent services; it is transparent. Serial, I2C, SPI, or even just standard GPIO, just connect to the service and tell it that you want to activate the alarm; it's as simple as that.&lt;/p&gt;

&lt;p&gt;Embedded services have a lot of advantages over traditional code. You can write reusable code for different devices. You can deploy to one or multiple microcontrollers. You don‚Äôt have to spend extra development time handling communications. All in all, it makes your code easier to read, therefore easier to maintain, and less likely to have bugs.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-can-we-help"&gt;
  &lt;/a&gt;
  How can we help?
&lt;/h1&gt;

&lt;p&gt;At Luos, we have designed a library that is easy to integrate into an existing project, that helps you separate your code into services, and that handles all of the communications for you. Have a look at our &lt;a href="https://docs.luos.io"&gt;documentation&lt;/a&gt; pages or &lt;a href="https://calendly.com/nicolas-rabault/quick-meetin-after-aa"&gt;schedule a meeting with our team&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>embedded</category>
      <category>microservices</category>
      <category>opensource</category>
      <category>embeddedsystems</category>
    </item>
    <item>
      <title>INTERNET OF THINGS (IoT)</title>
      <author>221910301038</author>
      <pubDate>Fri, 07 May 2021 06:00:55 +0000</pubDate>
      <link>https://dev.to/221910301038/internet-of-things-iot-58m3</link>
      <guid>https://dev.to/221910301038/internet-of-things-iot-58m3</guid>
      <description>&lt;p&gt;The Internet of things (IoT) describes the network of physical objects or ‚Äúthings‚Äù that are embedded with sensors, software, electronics, and other technologies to connect and exchange data with other devices and systems over the Internet.&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--24wIpKQ7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sr5ewzars5eger8l08wl.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--24wIpKQ7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sr5ewzars5eger8l08wl.jpeg" alt="WhatsApp Image 2021-05-07 at 11.26.01"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-flavour-of-the-internet-of-things"&gt;
  &lt;/a&gt;
  THE FLAVOUR OF THE INTERNET OF THINGS
&lt;/h1&gt;

&lt;p&gt;The alarm rings. As you open your eyes blearily, you see that it's five minutes later than your usual wake-up time. The clock has checked the train times online, and your train must be delayed, so it lets you sleep in a little longer.&lt;/p&gt;

&lt;p&gt;In your kitchen, a blinking light reminds you it's time to take your tablets. If you forget, the medicine bottle cap goes online and emails your doctor to let her know.&lt;/p&gt;

&lt;p&gt;On your way out of the house, you catch a glow in the corner of your eye. Your umbrella handle is lit up, which means that it has checked the BBC weather reports and predicts rain. You sigh and pick it up.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-structure-of-iot"&gt;
  &lt;/a&gt;
  THE STRUCTURE OF IOT
&lt;/h1&gt;

&lt;p&gt;The IoT can be viewed as a gigantic network consisting of networks of devices and computers connected through a series of intermediate technologies where numerous technologies like wireless connections may act as enablers of this connectivity.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-does-it-mean-to-connect-an-object-to-the-internet-sensors-and-actuators"&gt;
  &lt;/a&gt;
  What does it mean to "connect an object to the Internet"? "sensors" and "actuators"
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NQ7C_XLc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9y9rlbcfg4r25laf96ds.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NQ7C_XLc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9y9rlbcfg4r25laf96ds.jpeg" alt="WhatsApp Image 2021-05-07 at 11.40.22"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FGD2mGFE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l60y0hj814es68zirkpa.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FGD2mGFE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l60y0hj814es68zirkpa.jpeg" alt="WhatsApp Image 2021-05-07 at 11.42.44"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#an-equation-for-the-internet-of-things-"&gt;
  &lt;/a&gt;
  AN EQUATION FOR THE INTERNET OF THINGS :
&lt;/h1&gt;

&lt;p&gt;Physical Object + Controller, Sensors, and Actuators +Internet = Internet of Things(IoT) &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enchanted-objects"&gt;
  &lt;/a&gt;
  ENCHANTED OBJECTS
&lt;/h2&gt;

&lt;p&gt;. The best known of Arthur C. Clarke's "three laws of prediction" states "Any sufficiently advanced technology is indistinguishable from magic".&lt;/p&gt;

&lt;p&gt;‚Ä¢ Enchanted objects are everyday things that talk to us or each other, and in some ways make our lives better, delight us, and give an emotional connection.&lt;/p&gt;

&lt;p&gt;Enchanted Objects are ordinary things, made extraordinary.&lt;/p&gt;

&lt;p&gt;‚Ä¢ Enchanted Objects are ordinary things, augmented, connected.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#according-to-david-rose-"&gt;
  &lt;/a&gt;
  ACCORDING TO DAVID ROSE :
&lt;/h1&gt;

&lt;p&gt;"Enchanted objects start as ordinary things- a pen, a shoe, a table, a wallet, a light bulb, etc., The ordinary things are then augmented and enhanced through the use of emerging technologies such as sensors, actuators, wireless connection, and embedded processing - so that it becomes extraordinary".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FrAGlIiJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vc2vxunsm8n6vqdt76nc.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FrAGlIiJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vc2vxunsm8n6vqdt76nc.jpeg" alt="WhatsApp Image 2021-05-07 at 11.53.48"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>iot</category>
    </item>
    <item>
      <title>EVOLUTION OF PLANES</title>
      <author>dheeraj</author>
      <pubDate>Fri, 07 May 2021 05:59:30 +0000</pubDate>
      <link>https://dev.to/dheeraj06/evolution-of-planes-inb</link>
      <guid>https://dev.to/dheeraj06/evolution-of-planes-inb</guid>
      <description>&lt;p&gt;According to AulusGellius,archytas, the ancient Greek philosopher, mathematician, astronomer, statesman and strategist, was reputed to have designed and built ,around 400BC, the first Artificial , self propelled flying device, a bird shaped model propelled by a jet of what was probably steam ,said to have actually flown some 200meters. this machine ,which its inventor called the pigeon , may have been suspended on a wire or pivot for its flight.&lt;br&gt;
the 9th century Muslim Berber inventor, Abbas ibn Firas's glider is considered by john Harding to be the first attempt at heavier than air.&lt;br&gt;
First real flying is heavier than air powered flight , accomplished by an unmanned free flight steam powered monoplane of   foot(3.0m)wingspan , was realized by john string fellow in 1848 in england.in 1868 in he flew a powered monoplane model a few dozen feet , at an exhibition at the crystal place in London.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Brute Force Tool üîì WordPress , Joomla , DruPal , OpenCart , Magento</title>
      <author>Meow404</author>
      <pubDate>Fri, 07 May 2021 05:45:12 +0000</pubDate>
      <link>https://dev.to/penucuricode/brute-force-tool-wordpress-joomla-drupal-opencart-magento-339o</link>
      <guid>https://dev.to/penucuricode/brute-force-tool-wordpress-joomla-drupal-opencart-magento-339o</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---MmPEo5p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9rjswiau1dqsplfssewn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---MmPEo5p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9rjswiau1dqsplfssewn.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Simple brute force script&lt;br&gt;
[1] WordPress (Auto Detect Username)&lt;br&gt;
[2] Joomla&lt;br&gt;
[3] DruPal&lt;br&gt;
[4] OpenCart (Coming Soon)&lt;br&gt;
[5] Magento&lt;br&gt;
[6] All (Auto Detect CMS)&lt;/p&gt;

&lt;p&gt;Usage&lt;br&gt;
Short Form  Long Form   Description&lt;br&gt;
-l           --list          websites list&lt;br&gt;
-p           --passwords     Passwords list&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
perl bprute.pl -l list.txt -p passwords.txt&lt;/p&gt;

&lt;p&gt;Installation Linux&lt;br&gt;
git clone &lt;a href="https://github.com/penucuriCode/bprute.git"&gt;https://github.com/penucuriCode/bprute.git&lt;/a&gt;&lt;br&gt;
cd bprute&lt;br&gt;
perl bprute.pl -l list.txt -p passwords.txt&lt;/p&gt;

&lt;p&gt;Installation Android&lt;br&gt;
Download Termux&lt;/p&gt;

&lt;p&gt;cpan install LWP::UserAgent&lt;br&gt;
cpan install HTTP::Request&lt;br&gt;
git clone &lt;a href="https://github.com/penucuriCode/bprute"&gt;https://github.com/penucuriCode/bprute&lt;/a&gt;&lt;br&gt;
cd bprute&lt;br&gt;
perl bprute.pl -l list.txt -p passwords.txt &lt;/p&gt;

&lt;p&gt;Installation Windows&lt;br&gt;
Download Perl&lt;br&gt;
Download bprute&lt;br&gt;
Extract bprute into Desktop&lt;br&gt;
Open CMD and type the following commands:&lt;br&gt;
cd Desktop/bprute-master/&lt;br&gt;
perl bprute.pl -l list.txt -p passwords.txt&lt;/p&gt;

&lt;p&gt;Current version is 2.1 What's New&lt;br&gt;
‚Ä¢ speed up&lt;br&gt;
‚Ä¢ Bug fixes&lt;/p&gt;

</description>
      <category>performance</category>
      <category>perl</category>
    </item>
    <item>
      <title>Download YouTube Videos Using Python - Your Own YouTube Downloader</title>
      <author>Siddharth Chandra</author>
      <pubDate>Fri, 07 May 2021 05:40:06 +0000</pubDate>
      <link>https://dev.to/siddharth2016/download-youtube-videos-using-python-your-own-youtube-downloader-3ohf</link>
      <guid>https://dev.to/siddharth2016/download-youtube-videos-using-python-your-own-youtube-downloader-3ohf</guid>
      <description>&lt;p&gt;Do you find it troublesome to always look for a YouTube video downloader with your privacy at risk? Downloading a YouTube video using an external extension might be maddening because of the mouse click ads and other issues while using that extension.&lt;/p&gt;

&lt;p&gt;So, why not we create our own bot that can download any YouTube video with just simply running a Python script? Everything would be in our control then, awesome, right?&lt;/p&gt;

&lt;p&gt;In this article, we are going to see how we can make a Python script to automate the YouTube video downloading activity.&lt;/p&gt;

&lt;p&gt;After going through this article, you can say &lt;code&gt;NO&lt;/code&gt; to all those annoying ads, privacy issues, authorisation to different extensions and can finally have total control.&lt;/p&gt;

&lt;p&gt;Let's get started!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#what-are-we-going-to-use"&gt;
  &lt;/a&gt;
  What Are We Going To Use?
&lt;/h3&gt;

&lt;p&gt;We are going to use Python and one of its amazing 3rd party library, &lt;a href="https://pypi.org/project/pytube/"&gt;pytube&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To install pytube:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;pytube
Collecting pytube
  Downloading pytube-10.7.2-py3-none-any.whl &lt;span class="o"&gt;(&lt;/span&gt;42 kB&lt;span class="o"&gt;)&lt;/span&gt;
     |‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 42 kB 3.4 MB/s 
Installing collected packages: pytube
Successfully installed pytube-10.7.2
&lt;span class="err"&gt;$&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;More on pytube:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;pytube is a very serious, lightweight, dependency-free Python library (and command-line utility) for downloading YouTube Videos.&lt;/li&gt;
&lt;li&gt;pytube is a lightweight library written in Python. It has no third-party dependencies and aims to be highly reliable.&lt;/li&gt;
&lt;li&gt;pytube also makes pipelining easy, allowing you to specify callback functions for different download events, such as &lt;code&gt;on progress&lt;/code&gt; or &lt;code&gt;on complete&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Finally, pytube also includes a command-line utility, allowing you to quickly download videos right from the terminal.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Support for both progressive &amp;amp; DASH streams.&lt;/li&gt;
&lt;li&gt;Support for downloading complete playlist.&lt;/li&gt;
&lt;li&gt;Easily register &lt;code&gt;on_download_progress&lt;/code&gt; &amp;amp; &lt;code&gt;on_download_complete&lt;/code&gt; callbacks.&lt;/li&gt;
&lt;li&gt;Command-line interfaced included.&lt;/li&gt;
&lt;li&gt;Caption track support.&lt;/li&gt;
&lt;li&gt;Outputs caption tracks to &lt;code&gt;.srt&lt;/code&gt; format (SubRip Subtitle).&lt;/li&gt;
&lt;li&gt;Ability to capture thumbnail URL.&lt;/li&gt;
&lt;li&gt;Extensively documented source code.&lt;/li&gt;
&lt;li&gt;No third-party dependencies (written in pure Python).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On a high level, to download a video using the library in a script, we'll need to first import the YouTube class from the library, and pass it an argument of the video URL. Then we can download different streams present on that YouTube object.&lt;/p&gt;

&lt;p&gt;Now, let's move on to use this information to build our first YouTube video downloader.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#get-the-streams"&gt;
  &lt;/a&gt;
  Get The Streams
&lt;/h3&gt;

&lt;p&gt;First, we will make a simple script to get all the available streams for the given YouTube video URL. Open a file name it whatever you like with the &lt;code&gt;.py&lt;/code&gt; extension, let's say for our case we name it &lt;code&gt;pytube_demo.py&lt;/code&gt;, add the following code in it and run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# ./pytube_demo.py
&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pytube&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;YouTube&lt;/span&gt;

&lt;span class="n"&gt;video_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Enter YouTube Video URL: "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;youtube_obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;YouTube&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;video_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;youtube_obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;streams&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After you hit run, when the terminal prompts you to enter a video URL, enter this &lt;code&gt;https://www.youtube.com/watch?v=fibIyvTleqc&lt;/code&gt;, it is one of my favourite songs &lt;code&gt;Daydreamer&lt;/code&gt; by &lt;code&gt;AURORA&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Note: You can enter any YouTube video URL here, what we are going to explore further doesn't depend on which URL you enter.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Enter YouTube Video URL: https://www.youtube.com/watch?v&lt;span class="o"&gt;=&lt;/span&gt;fibIyvTleqc
&lt;span class="o"&gt;[&lt;/span&gt;&amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"18"&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"video/mp4"&lt;/span&gt; &lt;span class="nv"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"360p"&lt;/span&gt; &lt;span class="nv"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"25fps"&lt;/span&gt; &lt;span class="nv"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"avc1.42001E"&lt;/span&gt; &lt;span class="nv"&gt;acodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"mp4a.40.2"&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"True"&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"video"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;, &amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"137"&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"video/mp4"&lt;/span&gt; &lt;span class="nv"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"1080p"&lt;/span&gt; &lt;span class="nv"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"25fps"&lt;/span&gt; &lt;span class="nv"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"avc1.640028"&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"False"&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"video"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;, &amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"248"&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"video/webm"&lt;/span&gt; &lt;span class="nv"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"1080p"&lt;/span&gt; &lt;span class="nv"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"25fps"&lt;/span&gt; &lt;span class="nv"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"vp9"&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"False"&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"video"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;, &amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"136"&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"video/mp4"&lt;/span&gt; &lt;span class="nv"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"720p"&lt;/span&gt; &lt;span class="nv"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"25fps"&lt;/span&gt; &lt;span class="nv"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"avc1.4d401f"&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"False"&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"video"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;, &amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"247"&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"video/webm"&lt;/span&gt; &lt;span class="nv"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"720p"&lt;/span&gt; &lt;span class="nv"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"25fps"&lt;/span&gt; &lt;span class="nv"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"vp9"&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"False"&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"video"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;, &amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"135"&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"video/mp4"&lt;/span&gt; &lt;span class="nv"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"480p"&lt;/span&gt; &lt;span class="nv"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"25fps"&lt;/span&gt; &lt;span class="nv"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"avc1.4d401e"&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"False"&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"video"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;, &amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"244"&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"video/webm"&lt;/span&gt; &lt;span class="nv"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"480p"&lt;/span&gt; &lt;span class="nv"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"25fps"&lt;/span&gt; &lt;span class="nv"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"vp9"&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"False"&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"video"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;, &amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"134"&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"video/mp4"&lt;/span&gt; &lt;span class="nv"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"360p"&lt;/span&gt; &lt;span class="nv"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"25fps"&lt;/span&gt; &lt;span class="nv"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"avc1.4d401e"&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"False"&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"video"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;, &amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"243"&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"video/webm"&lt;/span&gt; &lt;span class="nv"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"360p"&lt;/span&gt; &lt;span class="nv"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"25fps"&lt;/span&gt; &lt;span class="nv"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"vp9"&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"False"&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"video"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;, &amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"133"&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"video/mp4"&lt;/span&gt; &lt;span class="nv"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"240p"&lt;/span&gt; &lt;span class="nv"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"25fps"&lt;/span&gt; &lt;span class="nv"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"avc1.4d4015"&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"False"&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"video"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;, &amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"242"&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"video/webm"&lt;/span&gt; &lt;span class="nv"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"240p"&lt;/span&gt; &lt;span class="nv"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"25fps"&lt;/span&gt; &lt;span class="nv"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"vp9"&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"False"&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"video"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;, &amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"160"&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"video/mp4"&lt;/span&gt; &lt;span class="nv"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"144p"&lt;/span&gt; &lt;span class="nv"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"25fps"&lt;/span&gt; &lt;span class="nv"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"avc1.4d400c"&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"False"&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"video"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;, &amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"278"&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"video/webm"&lt;/span&gt; &lt;span class="nv"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"144p"&lt;/span&gt; &lt;span class="nv"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"25fps"&lt;/span&gt; &lt;span class="nv"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"vp9"&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"False"&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"video"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;, &amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"140"&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"audio/mp4"&lt;/span&gt; &lt;span class="nv"&gt;abr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"128kbps"&lt;/span&gt; &lt;span class="nv"&gt;acodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"mp4a.40.2"&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"False"&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"audio"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;, &amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"249"&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"audio/webm"&lt;/span&gt; &lt;span class="nv"&gt;abr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"50kbps"&lt;/span&gt; &lt;span class="nv"&gt;acodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"opus"&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"False"&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"audio"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;, &amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"250"&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"audio/webm"&lt;/span&gt; &lt;span class="nv"&gt;abr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"70kbps"&lt;/span&gt; &lt;span class="nv"&gt;acodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"opus"&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"False"&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"audio"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;, &amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"251"&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"audio/webm"&lt;/span&gt; &lt;span class="nv"&gt;abr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"160kbps"&lt;/span&gt; &lt;span class="nv"&gt;acodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"opus"&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"False"&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"audio"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, we got a list of &lt;code&gt;Stream&lt;/code&gt; objects, each stream object giving us information about different aspects of a video.&lt;/p&gt;

&lt;p&gt;If we see &lt;code&gt;res&lt;/code&gt; attribute of stream object, we see that we have &lt;code&gt;360p&lt;/code&gt;, &lt;code&gt;1080p&lt;/code&gt;, &lt;code&gt;720p&lt;/code&gt;, &lt;code&gt;480p&lt;/code&gt;, &lt;code&gt;240p&lt;/code&gt; and &lt;code&gt;144p&lt;/code&gt; with different &lt;code&gt;vcodec&lt;/code&gt; attribute. This &lt;code&gt;res&lt;/code&gt; represents the resolution of a video, we can select any stream of desired resolution to download.&lt;/p&gt;

&lt;p&gt;Also, notice that we have only audio option streams available as well to download.&lt;/p&gt;

&lt;p&gt;Next, we will create a filter for video resolution and to keep it simple we will not dive into audio downloadable streams.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#filter-stream-based-on-resolution"&gt;
  &lt;/a&gt;
  Filter Stream Based On Resolution
&lt;/h3&gt;

&lt;p&gt;Update the code in the &lt;code&gt;pytube_demo.py&lt;/code&gt; file to the below code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# ./pytube_demo.py
&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pytube&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;YouTube&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_stream_for_res&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;streams&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;"""
    Filter on the basis of a given resolution. Return a list of filtered streams.
    """&lt;/span&gt;
    &lt;span class="n"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resolution&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;streams&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;stream&lt;/span&gt;

&lt;span class="n"&gt;video_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Enter YouTube Video URL: "&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;youtube_obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;YouTube&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;video_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;video_res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Enter YouTube Video Resolution for &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;youtube_obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;: "&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;req_stream_obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_stream_for_res&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;youtube_obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;streams&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;video_res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req_stream_obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hit run and we can see following output in the terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Enter YouTube Video URL: https://www.youtube.com/watch?v&lt;span class="o"&gt;=&lt;/span&gt;fibIyvTleqc
Enter YouTube Video Resolution &lt;span class="k"&gt;for &lt;/span&gt;AURORA - Daydreamer &lt;span class="o"&gt;(&lt;/span&gt;Audio&lt;span class="o"&gt;)&lt;/span&gt;: 720p
&lt;span class="o"&gt;[&lt;/span&gt;&amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"136"&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"video/mp4"&lt;/span&gt; &lt;span class="nv"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"720p"&lt;/span&gt; &lt;span class="nv"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"25fps"&lt;/span&gt; &lt;span class="nv"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"avc1.4d401f"&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"False"&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"video"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;, &amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"247"&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"video/webm"&lt;/span&gt; &lt;span class="nv"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"720p"&lt;/span&gt; &lt;span class="nv"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"25fps"&lt;/span&gt; &lt;span class="nv"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"vp9"&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"False"&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"video"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First, we take the video URL and creates the &lt;code&gt;YouTube&lt;/code&gt; object, then we take custom input from the user while displaying the title of the video using &lt;code&gt;youtube_obj.title&lt;/code&gt;. After receiving the resolution, say &lt;code&gt;720p&lt;/code&gt;, we call the function &lt;code&gt;get_stream_for_res&lt;/code&gt; that filters the given list of streams on the given resolution. At last, we can see the output, it contains 2 stream objects in a list, both objects have different values for some attributes but have the same resolution.&lt;/p&gt;

&lt;p&gt;Without diving deep on what all other attribute means, let's just simply take the first element of the list and download the video.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#download-stream-based-on-resolution"&gt;
  &lt;/a&gt;
  Download Stream Based On Resolution
&lt;/h3&gt;

&lt;p&gt;Now update the code to the following to download the YouTube video (complete script):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# ./pytube_demo.py
&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pytube&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;YouTube&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_stream_for_res&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;streams&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resolution&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;streams&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;stream&lt;/span&gt;

&lt;span class="n"&gt;video_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Enter YouTube Video URL: "&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;youtube_obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;YouTube&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;video_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;video_res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Enter YouTube Video Resolution for &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;youtube_obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;: "&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;req_stream_obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_stream_for_res&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;youtube_obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;streams&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;video_res&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;req_stream_obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;download&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"YouTube Video &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;youtube_obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; Downloaded With Resolution &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;video_res&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we run the above script, we get the following output and a downloaded video:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Enter YouTube Video URL: https://www.youtube.com/watch?v&lt;span class="o"&gt;=&lt;/span&gt;fibIyvTleqc
Enter YouTube Video Resolution &lt;span class="k"&gt;for &lt;/span&gt;AURORA - Daydreamer &lt;span class="o"&gt;(&lt;/span&gt;Audio&lt;span class="o"&gt;)&lt;/span&gt;: 720p
YouTube Video AURORA - Daydreamer &lt;span class="o"&gt;(&lt;/span&gt;Audio&lt;span class="o"&gt;)&lt;/span&gt; Downloaded With Resolution 720p
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, if we check our directory where we ran the script, we can find the downloaded video.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-next"&gt;
  &lt;/a&gt;
  What Next?
&lt;/h3&gt;

&lt;p&gt;Well, that's it from me. If you followed this and ran the final script, you would be seeing a downloaded video in your working directory.&lt;/p&gt;

&lt;p&gt;You can take it to the next level by creating a UI for this utility. You can host this as a service that would be strictly private to you.&lt;/p&gt;

&lt;p&gt;What are you waiting for then? Use Tkinter, PyQT, Kivy, Flask or Django and make a UI with more functions like a select option for audio and video, for video resolution and for audio ABR, etc. and say &lt;code&gt;NO&lt;/code&gt; to all those annoying ads, privacy issues, several authorisations to different extensions and have total control over your downloaded videos.&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Just starting your Open Source Journey? Don't forget to check &lt;a href="https://github.com/siddharth2016/hello-open-source"&gt;Hello Open Source&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Want to showcase your Python project or just out there to explore? Check &lt;a href="https://github.com/siddharth2016/awesome-python-repos"&gt;Awesome Python Repos&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Want to make a simple and awesome game from scratch? Check out &lt;a href="https://github.com/siddharth2016/PongPong"&gt;PongPong&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Want to &lt;code&gt;++&lt;/code&gt; your GitHub Profile README? Check out &lt;a href="https://github.com/marketplace/actions/quote-readme"&gt;Quote - README&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Till next time!&lt;/p&gt;

&lt;p&gt;Namaste üôè&lt;/p&gt;

</description>
      <category>python</category>
      <category>beginners</category>
      <category>application</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Express JS Hello World</title>
      <author>Youssef Allali</author>
      <pubDate>Fri, 07 May 2021 05:21:36 +0000</pubDate>
      <link>https://dev.to/youssefallalix/express-js-hello-world-10ph</link>
      <guid>https://dev.to/youssefallalix/express-js-hello-world-10ph</guid>
      <description>&lt;h1&gt;
  &lt;a href="#install-nodejs-and-npm"&gt;
  &lt;/a&gt;
  Install NodeJS and NPM
&lt;/h1&gt;

&lt;p&gt;First thing we need to do is prepare an environnement for Express to run. We are going to &lt;a href="https://nodejs.org/en/download/"&gt;install NodeJS&lt;/a&gt; and follow the installation instructions.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MmahXzPf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kb3sxu4jc7rh9hh1f8r5.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MmahXzPf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kb3sxu4jc7rh9hh1f8r5.jpeg" alt="Web capture_7-5-2021_2217_nodejs.org"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#prepare-a-workspace-and-start-a-project"&gt;
  &lt;/a&gt;
  Prepare a workspace and start a project
&lt;/h1&gt;

&lt;p&gt;Once we have installed Node.js and Node Package Manager (NPM) on our machine, let's open up a terminal window (or CMD, on Windows) in the desired folder or use the following command to create a folder and use it as a workspace:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ mkdir ./hello_world
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cd ./hello_world
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we are ready to start our first application, to do that, type in the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm init -y
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What it basically does is create a file named &lt;code&gt;package.json&lt;/code&gt; that contains all the information about our project and its dependencies.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#install-express"&gt;
  &lt;/a&gt;
  Install Express
&lt;/h1&gt;

&lt;p&gt;Next, we need to install express module using NPM via the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm install express --save
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now all we need is to create our main script, we'll be naming it &lt;code&gt;index.js&lt;/code&gt; since that's the default name (other conventional names can be &lt;code&gt;app.js&lt;/code&gt; or &lt;code&gt;server.js&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;We can create a new empty file from the terminal using the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;touch index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's open our newly created file in any IDE or text editor (&lt;code&gt;Notepad&lt;/code&gt;, &lt;code&gt;Notepad++&lt;/code&gt;, &lt;code&gt;Atom&lt;/code&gt; ...) but I would recommend using a sophisticated IDE like &lt;code&gt;VS Code&lt;/code&gt; and let's type in the following lines in order:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require('express');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first line would tell our app to import the module we are using (express).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const app = express();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This second line let us define express as a function&lt;/p&gt;

&lt;p&gt;After that we need to define something called "a route" to the root of our website that will let us send an HTTP request to our server and GET a response that says &lt;code&gt;Hello World!&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.get('/', (req, res) =&amp;gt; {
  res.send('Hello World!');
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Last thing we need to do is instruct our app to be listening on a port, for example port 3000:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.listen(3000)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#run-the-server-app"&gt;
  &lt;/a&gt;
  Run the server app
&lt;/h1&gt;

&lt;p&gt;Now let's head back to our terminal window and type in the following command which will compile our code and start our server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ node ./index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#check-if-it-works"&gt;
  &lt;/a&gt;
  Check if it works
&lt;/h1&gt;

&lt;p&gt;Finally, we can load &lt;a href="http://localhost:3000/"&gt;http://localhost:3000/&lt;/a&gt; in a browser to see the result.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aQIT4CzV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/02e946etr2y67u925f6p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aQIT4CzV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/02e946etr2y67u925f6p.png" alt="Hello World Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>express</category>
      <category>node</category>
      <category>npm</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
