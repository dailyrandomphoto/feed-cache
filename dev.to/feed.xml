<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Set up TalkBack like a pro! In just a few minutes!</title>
      <author>Ammadeo</author>
      <pubDate>Fri, 23 Jul 2021 13:10:26 +0000</pubDate>
      <link>https://dev.to/ammadeo/set-up-talkback-like-a-pro-in-just-a-few-minutes-1foo</link>
      <guid>https://dev.to/ammadeo/set-up-talkback-like-a-pro-in-just-a-few-minutes-1foo</guid>
      <description>&lt;p&gt;You'll learn how to set up TalkBack for the best developer experience.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#make-sure-you-have-talkback"&gt;
  &lt;/a&gt;
  Make sure You have TalkBack
&lt;/h1&gt;

&lt;p&gt;TalkBack is part of the &lt;a href="https://play.google.com/store/apps/details?id=com.google.android.marvin.talkback"&gt;Android Accessibility Suite&lt;/a&gt;. You can check if You have it installed in the GooglePlay store.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lets-turn-it-on"&gt;
  &lt;/a&gt;
  Let's turn it on
&lt;/h1&gt;

&lt;p&gt;Go to your phone settings and search for &lt;em&gt;TalkBack&lt;/em&gt;. Turn TalkBack on by toggling the Accessibility switch.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xWLAVDBG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xv7hx7faqf4jg7kf50xo.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xWLAVDBG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xv7hx7faqf4jg7kf50xo.jpg" alt="TalkBack is off"&gt;&lt;/a&gt;&lt;/p&gt;
TalkBack is off screenshot



&lt;p&gt; &lt;br&gt;
Allow TalkBack all of those permissions. Don't worry. TalkBack is easy to turn on and off by holding &lt;strong&gt;volume up&lt;/strong&gt; and &lt;strong&gt;down&lt;/strong&gt; buttons at the same time for a few seconds.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GKTG4Nzb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cl8w2bpsdga2b2o4xtvv.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GKTG4Nzb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cl8w2bpsdga2b2o4xtvv.jpg" alt="Allow TalkBack to control the screen"&gt;&lt;/a&gt;&lt;/p&gt;
Permissions popup screenshot



&lt;p&gt; &lt;br&gt;
Now TalkBack will show You a quick interactive tutorial. Feel free to do it. After that, we'll get to the next step.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#set-it-up-like-a-pro"&gt;
  &lt;/a&gt;
  Set it up like a pro
&lt;/h1&gt;

&lt;p&gt;Firstly You can now turn TalkBack off, so it will be a bit easier. You can also disable &lt;em&gt;TalkBack watermark&lt;/em&gt; — it only says how to disable TalkBack with volume buttons shortcut. Now go to TalkBack's settings by pressing the button on the bottom of the screen.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sKSf8UKS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hf3ubocarfuq5dlvxpc2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sKSf8UKS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hf3ubocarfuq5dlvxpc2.jpg" alt="Settings button"&gt;&lt;/a&gt;&lt;/p&gt;
Settings button is on the bottom of the screen



&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#audio-settings"&gt;
  &lt;/a&gt;
  Audio settings
&lt;/h2&gt;

&lt;p&gt;From here, You can change how TalkBack will sound.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zc-nEz3a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7b2rg1uo6ax6fnuzi2u9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zc-nEz3a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7b2rg1uo6ax6fnuzi2u9.jpg" alt="TalkBack settings"&gt;&lt;/a&gt;&lt;/p&gt;
TalkBack settings screenshot



&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#firstly-go-to-texttospeech-settings"&gt;
  &lt;/a&gt;
  Firstly go to &lt;em&gt;Text-to-speech&lt;/em&gt; settings.
&lt;/h3&gt;

&lt;p&gt;You can choose Your preferred text-to-speech engine. If You use the Google Text-to-speech engine, You can go to its settings and &lt;em&gt;install voice data&lt;/em&gt; for languages You usually use. You can also change to Your favourite voice for every language from there. Additionally, if You develop multilingual websites changing &lt;em&gt;Language detection&lt;/em&gt; to &lt;em&gt;Aggressive&lt;/em&gt; might improve audio quality.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--toPf6whS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hfrs1806g9b5wg64gjza.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--toPf6whS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hfrs1806g9b5wg64gjza.jpg" alt="Google Text-to-speech engine settings"&gt;&lt;/a&gt;&lt;/p&gt;
Install voice data button is on the top of the screen



&lt;p&gt; &lt;br&gt;
Go back to TalkBack audio settings.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#disable-speak-passwords"&gt;
  &lt;/a&gt;
  Disable &lt;em&gt;Speak passwords&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;You probably want to disable that so You don't accidentally give away your password.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#controls-settings"&gt;
  &lt;/a&gt;
  Controls settings
&lt;/h2&gt;

&lt;p&gt;From here, You can change how You'll interact with TalkBack.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#customise-gestures"&gt;
  &lt;/a&gt;
  Customise gestures
&lt;/h3&gt;

&lt;p&gt;Gestures are the most crucial part of TalkBack. They allow You to perform all TalkBack actions. We'll go deeper into them in the next part of this series.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#scroll-to-1-finger-backandforth-section"&gt;
  &lt;/a&gt;
  Scroll to &lt;em&gt;1 finger back-and-forth&lt;/em&gt; section.
&lt;/h4&gt;

&lt;p&gt;Change &lt;em&gt;Swipe left then right&lt;/em&gt; and &lt;em&gt;swipe right then left&lt;/em&gt; to &lt;em&gt;Read from next item&lt;/em&gt;. This shortcut will help You quickly read the whole article without the hassle of &lt;em&gt;swiping right&lt;/em&gt; for every next paragraph.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8Un1NxwF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u6p8scdfuqaegx0kxcjt.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8Un1NxwF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u6p8scdfuqaegx0kxcjt.jpg" alt="Gestures settings"&gt;&lt;/a&gt;&lt;/p&gt;
1 finger back-and-forth section in Customise gestures



&lt;p&gt; &lt;br&gt;
Go back to TalkBack controls settings.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#customise-menus"&gt;
  &lt;/a&gt;
  Customise menus
&lt;/h3&gt;

&lt;p&gt;If You don't use TalkBack as Your main user interface, You may remove some redundant features from quick menus.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#customise-talkback-menu"&gt;
  &lt;/a&gt;
  Customise TalkBack menu
&lt;/h4&gt;

&lt;p&gt;Here You can change what will be in the TalkBack menu popup.&lt;br&gt;
Disable &lt;em&gt;read from next item&lt;/em&gt; — We've already added it as a &lt;em&gt;swipe left then right&lt;/em&gt; gesture.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3chkkpOe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wyky247xc5ivy84xj5im.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3chkkpOe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wyky247xc5ivy84xj5im.jpg" alt="Customise menus settings"&gt;&lt;/a&gt;&lt;/p&gt;
Reading section in Customise TalkBack menu



&lt;p&gt; &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#customise-reading-controls"&gt;
  &lt;/a&gt;
  Customise reading controls
&lt;/h4&gt;

&lt;p&gt;Reading controls change what happens on &lt;em&gt;swipe down&lt;/em&gt; and &lt;em&gt;swipe up&lt;/em&gt; gestures.&lt;br&gt;
&lt;strong&gt;Disable&lt;/strong&gt; reading by &lt;em&gt;Characters&lt;/em&gt;, &lt;em&gt;Words&lt;/em&gt; and &lt;em&gt;Lines&lt;/em&gt; — They're a bit redundant if You use TalkBack with Your screen turn on.&lt;br&gt;
&lt;strong&gt;Enable&lt;/strong&gt; reading by &lt;em&gt;Landmarks&lt;/em&gt; for testing a website's landmarks. Landmarks are sections of the website. Think of them as HTML5 &lt;code&gt;header&lt;/code&gt;, &lt;code&gt;main&lt;/code&gt;, &lt;code&gt;footer&lt;/code&gt; etc. They'll help You quickly jump to any part of the website. You can learn more about them from &lt;a href="https://web.dev/use-landmarks/"&gt;Use landmarks&lt;/a&gt; by Rob Dodson.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OMyT_N_T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pgo1y8md1ax13jmrqcij.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OMyT_N_T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pgo1y8md1ax13jmrqcij.jpg" alt="Reading controls settings"&gt;&lt;/a&gt;&lt;/p&gt;
Reading section in Customise reading controls



&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#open-advanced-settings-to-find-developer-settings"&gt;
  &lt;/a&gt;
  Open Advanced settings to find Developer settings
&lt;/h2&gt;

&lt;p&gt;Inside of Developer settings, You'll find some helpful debugging tools.&lt;br&gt;
&lt;strong&gt;Enable&lt;/strong&gt; &lt;em&gt;Display speech output&lt;/em&gt; and &lt;em&gt;Echo recognised speech&lt;/em&gt;. Displaying speech output will help You debug the accessibility tree of an application. Echo recognised speech will tell You about problems with Your voice command.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qfcXvRpn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2fpm64uhh32t19m0ctok.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qfcXvRpn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2fpm64uhh32t19m0ctok.jpg" alt="Developer settings"&gt;&lt;/a&gt;&lt;/p&gt;
Developer settings



&lt;p&gt; &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's next?
&lt;/h1&gt;

&lt;p&gt;That's all set up! Let's learn how to use it in the next part of this series. &lt;strong&gt;Available soon.&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>a11y</category>
      <category>webdev</category>
      <category>android</category>
    </item>
    <item>
      <title>Launching support for ClickHouse as storage backend for SigNoz</title>
      <author>Ankit Anand ✨</author>
      <pubDate>Fri, 23 Jul 2021 13:04:54 +0000</pubDate>
      <link>https://dev.to/signoz/launching-support-for-clickhouse-as-storage-backend-for-signoz-1fk9</link>
      <guid>https://dev.to/signoz/launching-support-for-clickhouse-as-storage-backend-for-signoz-1fk9</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-signoz"&gt;
  &lt;/a&gt;
  What is SigNoz?
&lt;/h2&gt;

&lt;p&gt;SigNoz is an open-source alternative to DataDog, New Relic etc. It is a full-stack application monitoring and observability platform, which can be used to track both metrics and traces. Link to our GitHub repo 👇&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/SigNoz"&gt;
        SigNoz
      &lt;/a&gt; / &lt;a href="https://github.com/SigNoz/signoz"&gt;
        signoz
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      SigNoz helps developers monitor their applications &amp;amp; troubleshoot problems, an open-source alternative to DataDog, NewRelic, etc. 🔥 🖥
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
  &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/de24bcecd48c187d949b173f240555967f58a5cd424760a73f7c06f791b892ec/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f646376336570696e782f696d6167652f75706c6f61642f76313631383930343435302f7369676e6f7a2d696d616765732f4c6f676f4769746875625f7369676662752e737667"&gt;&lt;img src="https://camo.githubusercontent.com/de24bcecd48c187d949b173f240555967f58a5cd424760a73f7c06f791b892ec/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f646376336570696e782f696d6167652f75706c6f61642f76313631383930343435302f7369676e6f7a2d696d616765732f4c6f676f4769746875625f7369676662752e737667" alt="SigNoz-logo" width="240"&gt;&lt;/a&gt;
  &lt;/p&gt;
&lt;p&gt;Monitor your applications and troubleshoot problems in your deployed applications, an open-source alternative to DataDog, New Relic, etc.&lt;/p&gt;
&lt;p&gt;
    &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/8bb1977f745ee8c8107f711ecfa901421a9b929f308fd431f7211508f8ddbd87/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e"&gt;&lt;img alt="License" src="https://camo.githubusercontent.com/8bb1977f745ee8c8107f711ecfa901421a9b929f308fd431f7211508f8ddbd87/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e"&gt;&lt;/a&gt;
    &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/4d7505d3f801c171da56fe726501ab9411207d82358bf10341021397fa3fe48e/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f70756c6c732f7369676e6f7a2f66726f6e74656e643f6c6162656c3d446f776e6c6f616473"&gt;&lt;img alt="Downloads" src="https://camo.githubusercontent.com/4d7505d3f801c171da56fe726501ab9411207d82358bf10341021397fa3fe48e/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f70756c6c732f7369676e6f7a2f66726f6e74656e643f6c6162656c3d446f776e6c6f616473"&gt;&lt;/a&gt;
    &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/cd33e47de8e2feb970abdef5de51f59e6c007958faf6c188c56dd4c4208e58a2/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f7369676e6f7a2f7369676e6f7a"&gt;&lt;img alt="GitHub issues" src="https://camo.githubusercontent.com/cd33e47de8e2feb970abdef5de51f59e6c007958faf6c188c56dd4c4208e58a2/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f7369676e6f7a2f7369676e6f7a"&gt;&lt;/a&gt; 
    &lt;a href="https://twitter.com/intent/tweet?text=Monitor%20your%20applications%20and%20troubleshoot%20problems%20with%20SigNoz,%20an%20open-source%20alternative%20to%20DataDog,%20NewRelic.&amp;amp;url=https://signoz.io/&amp;amp;via=SigNozHQ&amp;amp;hashtags=opensource,signoz,observability" rel="nofollow"&gt; 
        &lt;img alt="tweet" src="https://camo.githubusercontent.com/90bc908826728c0e4261acfff5619fd732c7be2b2a00624fce6363c9a3623c90/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f75726c2f687474702f736869656c64732e696f2e7376673f7374796c653d736f6369616c"&gt; &lt;/a&gt; 
&lt;/p&gt;

&lt;p&gt;SigNoz helps developers monitor applications and troubleshoot problems in their deployed applications. SigNoz uses distributed tracing to gain visibility into your software stack.&lt;/p&gt;

&lt;p&gt;👉 You can see metrics like p99 latency, error rates for your services, external API calls and individual end points.&lt;/p&gt;

&lt;p&gt;👉 You can find the root cause of the problem by going to the exact traces which are causing the problem and see detailed flamegraphs of individual request traces.&lt;/p&gt;

&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/bc8a12f92d8313d86b619bd96c558b458b30f24cdb847b42e4db383aa83238a3/68747470733a2f2f7369676e6f7a2d7075626c69632e73332e75732d656173742d322e616d617a6f6e6177732e636f6d2f7369676e6f7a5f6865726f5f6769746875622e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/bc8a12f92d8313d86b619bd96c558b458b30f24cdb847b42e4db383aa83238a3/68747470733a2f2f7369676e6f7a2d7075626c69632e73332e75732d656173742d322e616d617a6f6e6177732e636f6d2f7369676e6f7a5f6865726f5f6769746875622e706e67" alt="SigNoz Feature"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/d86b90eea3d56848776f64d2e8188152844713a3079c158954a3f4a49f2fb120/68747470733a2f2f7369676e6f7a2d7075626c69632e73332e75732d656173742d322e616d617a6f6e6177732e636f6d2f436f6e747269627574696e672e737667"&gt;&lt;img src="https://camo.githubusercontent.com/d86b90eea3d56848776f64d2e8188152844713a3079c158954a3f4a49f2fb120/68747470733a2f2f7369676e6f7a2d7075626c69632e73332e75732d656173742d322e616d617a6f6e6177732e636f6d2f436f6e747269627574696e672e737667" width="50px"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
Join our Slack community&lt;/h2&gt;
&lt;p&gt;Come say Hi to us on &lt;a href="https://join.slack.com/t/signoz-community/shared_invite/zt-lrjknbbp-J_mI13rlw8pGF4EWBnorJA" rel="nofollow"&gt;Slack&lt;/a&gt; 👋&lt;/p&gt;

&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/61f3487967fd24ab9d66eddfc48ab2b822ef4f1c300ac8db16bf27f70f9f94af/68747470733a2f2f7369676e6f7a2d7075626c69632e73332e75732d656173742d322e616d617a6f6e6177732e636f6d2f46656174757265732e737667"&gt;&lt;img src="https://camo.githubusercontent.com/61f3487967fd24ab9d66eddfc48ab2b822ef4f1c300ac8db16bf27f70f9f94af/68747470733a2f2f7369676e6f7a2d7075626c69632e73332e75732d656173742d322e616d617a6f6e6177732e636f6d2f46656174757265732e737667" width="50px"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Features:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Application overview metrics like RPS, 50th/90th/99th Percentile latencies, and Error Rate&lt;/li&gt;
&lt;li&gt;Slowest endpoints in your application&lt;/li&gt;
&lt;li&gt;See exact request trace to figure out issues in downstream services, slow DB queries, call to 3rd party services like payment gateways, etc&lt;/li&gt;
&lt;li&gt;Filter traces by service name, operation, latency, error…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/SigNoz/signoz"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#launching-support-for-clickhouse"&gt;
  &lt;/a&gt;
  Launching support for ClickHouse
&lt;/h2&gt;

&lt;p&gt;In our latest release v0.3.2 , we launched support for ClickHouse as storage backend for SigNoz. ClickHouse is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP). Now when you install SigNoz, you will have the option to choose between ClickHouse or Kafka + Druid as a database system.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8gV6_QFn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4b1u2ay7hmo4mrmz39tb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8gV6_QFn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4b1u2ay7hmo4mrmz39tb.png" alt="You can install SigNoz through with commands at your terminal. When you install SigNoz, you will get the option to choose between ClickHouse or Kafka+Druid as a storage backend"&gt;&lt;/a&gt;Users can choose between ClickHouse or Kafka + Druid for their storage system of choice while installing SigNoz&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;In this article, let's dig deeper into why we decided to introduce support for Clickhouse as a database storage system and how our users can benefit from it.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#community-demands-for-clickhouse"&gt;
  &lt;/a&gt;
  Community demands for ClickHouse
&lt;/h2&gt;

&lt;p&gt;As an open-source software, we build what our community wants. We listened to &lt;a href="https://github.com/SigNoz/signoz/issues/22"&gt;demands&lt;/a&gt; from our community for supporting ClickHouse as a storage backend.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R6zzOSP9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2y29wbpmspj8kynkjxvv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R6zzOSP9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2y29wbpmspj8kynkjxvv.png" alt="Picture of the github issue a user raised for supporting ClickHouse"&gt;&lt;/a&gt;Community request for supporting Clickhouse as a storage backend for SigNoz&lt;/p&gt;

&lt;p&gt;As a storage backend, ClickHouse is less resource-intensive than using Kafka + Druid. It makes getting started with SigNoz much quicker, and users can now try out SigNoz on their local machine easily as the entire setup takes &lt;strong&gt;less than 1.5GB of memory space.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#why-clickhouse-for-signoz"&gt;
  &lt;/a&gt;
  Why Clickhouse for SigNoz?
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#improvements-in-installation-time"&gt;
  &lt;/a&gt;
  Improvements in installation time
&lt;/h3&gt;

&lt;p&gt;One of the key focus area of our engineering team is to make trying out SigNoz as simple as possible. Extending support for ClickHouse as a database is part of one such initiative.&lt;/p&gt;

&lt;p&gt;As we are self-hosted and open source, you can try SigNoz out in a matter of a few minutes to understand how it can help you with performance monitoring.&lt;/p&gt;

&lt;p&gt;You can get started with SigNoz with just three commands at your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git clone https://github.com/SigNoz/signoz.git
$ cd signoz/deploy/
$ ./install.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You can then proceed with either ClickHouse or Kafka+Druid installation set up. On a macOS 2017 model with 8 GB RAM, following were the installation times in seconds for the two set ups:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ClickHouse set up: 93.99 seconds&lt;/li&gt;
&lt;li&gt;Kafka + Druid set up: 269.25 seconds&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So in just over a minute, you will be able to access our dashboard with the Clickhouse set up on your local host.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cptTlpsR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/01sspm4ldf5oiqtidyjj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cptTlpsR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/01sspm4ldf5oiqtidyjj.png" alt="SigNoz dashboard"&gt;&lt;/a&gt;Track metrics &amp;amp; use traces to monitor app performance with SigNoz&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#improvements-in-memory-usage"&gt;
  &lt;/a&gt;
  Improvements in memory usage
&lt;/h3&gt;

&lt;p&gt;Let's analyse the performance of ClickHouse and Kafka+Druid set ups with &lt;code&gt;docker stats&lt;/code&gt; command. The &lt;code&gt;docker stats&lt;/code&gt; command displays a live data stream with CPU, memory usage, memory limit, block I/O, and network IO metrics for all the running containers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--65xX5-hm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6hacjb1wgk5py3503lpv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--65xX5-hm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6hacjb1wgk5py3503lpv.png" alt="Memory usage with ClickHouse installation with docker stats command"&gt;&lt;/a&gt;Memory usage stats snapshot with ClickHouse installation&lt;/p&gt;

&lt;p&gt;Total memory usage with ClickHouse set up: 340.391 MiB&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VDuQS3cL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3d9ogc702du4gnxc4dzu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VDuQS3cL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3d9ogc702du4gnxc4dzu.png" alt="Memory usage with kafka+druid installation with docker stats command"&gt;&lt;/a&gt;Memory usage stats snapshot with kafka + Druid installation&lt;/p&gt;

&lt;p&gt;Total memory usage with Kafka + Druid set up: 2,896.82 MiB&lt;/p&gt;

&lt;p&gt;As we can see, the ClickHouse set up uses about &lt;strong&gt;8.5x less memory&lt;/strong&gt; than the Kafka + Druid set up for getting started with SigNoz. It makes trying out SigNoz much easier for developers even on their local machine.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#signoz-architecture-with-clickhouse"&gt;
  &lt;/a&gt;
  SigNoz architecture with ClickHouse
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9dKOPYWS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s1lmyo7noo90bbi8331p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9dKOPYWS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s1lmyo7noo90bbi8331p.png" alt="SigNoz architecture with ClickHouse"&gt;&lt;/a&gt;SigNoz Architecture with ClickHouse as storage backend&lt;/p&gt;

&lt;p&gt;With ClickHouse as the storage backend, OpenTelemetry collector directly writes to ClickHouse. The query service makes queries to ClickHouse to fetch relevant data points and display it on the frontend UI.&lt;/p&gt;

&lt;p&gt;We will also be soon bringing support for long term storage from ClickHouse to S3.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#upcoming-features-in-the-clickhouse-set-up"&gt;
  &lt;/a&gt;
  Upcoming features in the ClickHouse set up
&lt;/h2&gt;

&lt;p&gt;We will soon be enabling custom metrics in SigNoz with the ClickHouse  storage backend. Metrics represent the health of your system over time and are a crucial component of observability. SigNoz uses OpenTelemetry for instrumentation and you can measure metrics like p99, p50 latency, etc.&lt;/p&gt;

&lt;p&gt;And with custom metrics you will be able to define more specific metrics to gauge the health of your system.&lt;/p&gt;

&lt;p&gt;As an open-source monitoring tool, we want to provide our users flexibility in setting up monitoring for their services. Monitoring data is often critical and private to a company, and as such, users should have flexibility in choosing a database that their teams feel most comfortable with. Providing support for different storage backends is an effort in this direction.&lt;/p&gt;

&lt;p&gt;SigNoz is also self-hosted, so you don't need to send your critical data to SaaS vendors outside your cloud. Visit our GitHub repo, and try out SigNoz in a matter of minutes.&lt;/p&gt;

&lt;p&gt;We are constantly looking out for community feedback and will be pleased to hear from you.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/SigNoz"&gt;
        SigNoz
      &lt;/a&gt; / &lt;a href="https://github.com/SigNoz/signoz"&gt;
        signoz
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      SigNoz helps developers monitor their applications &amp;amp; troubleshoot problems, an open-source alternative to DataDog, NewRelic, etc. 🔥 🖥
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
  &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/de24bcecd48c187d949b173f240555967f58a5cd424760a73f7c06f791b892ec/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f646376336570696e782f696d6167652f75706c6f61642f76313631383930343435302f7369676e6f7a2d696d616765732f4c6f676f4769746875625f7369676662752e737667"&gt;&lt;img src="https://camo.githubusercontent.com/de24bcecd48c187d949b173f240555967f58a5cd424760a73f7c06f791b892ec/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f646376336570696e782f696d6167652f75706c6f61642f76313631383930343435302f7369676e6f7a2d696d616765732f4c6f676f4769746875625f7369676662752e737667" alt="SigNoz-logo" width="240"&gt;&lt;/a&gt;
  &lt;/p&gt;
&lt;p&gt;Monitor your applications and troubleshoot problems in your deployed applications, an open-source alternative to DataDog, New Relic, etc.&lt;/p&gt;
&lt;p&gt;
    &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/8bb1977f745ee8c8107f711ecfa901421a9b929f308fd431f7211508f8ddbd87/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e"&gt;&lt;img alt="License" src="https://camo.githubusercontent.com/8bb1977f745ee8c8107f711ecfa901421a9b929f308fd431f7211508f8ddbd87/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e"&gt;&lt;/a&gt;
    &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/4d7505d3f801c171da56fe726501ab9411207d82358bf10341021397fa3fe48e/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f70756c6c732f7369676e6f7a2f66726f6e74656e643f6c6162656c3d446f776e6c6f616473"&gt;&lt;img alt="Downloads" src="https://camo.githubusercontent.com/4d7505d3f801c171da56fe726501ab9411207d82358bf10341021397fa3fe48e/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f70756c6c732f7369676e6f7a2f66726f6e74656e643f6c6162656c3d446f776e6c6f616473"&gt;&lt;/a&gt;
    &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/cd33e47de8e2feb970abdef5de51f59e6c007958faf6c188c56dd4c4208e58a2/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f7369676e6f7a2f7369676e6f7a"&gt;&lt;img alt="GitHub issues" src="https://camo.githubusercontent.com/cd33e47de8e2feb970abdef5de51f59e6c007958faf6c188c56dd4c4208e58a2/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f7369676e6f7a2f7369676e6f7a"&gt;&lt;/a&gt; 
    &lt;a href="https://twitter.com/intent/tweet?text=Monitor%20your%20applications%20and%20troubleshoot%20problems%20with%20SigNoz,%20an%20open-source%20alternative%20to%20DataDog,%20NewRelic.&amp;amp;url=https://signoz.io/&amp;amp;via=SigNozHQ&amp;amp;hashtags=opensource,signoz,observability" rel="nofollow"&gt; 
        &lt;img alt="tweet" src="https://camo.githubusercontent.com/90bc908826728c0e4261acfff5619fd732c7be2b2a00624fce6363c9a3623c90/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f75726c2f687474702f736869656c64732e696f2e7376673f7374796c653d736f6369616c"&gt; &lt;/a&gt; 
&lt;/p&gt;

&lt;p&gt;SigNoz helps developers monitor applications and troubleshoot problems in their deployed applications. SigNoz uses distributed tracing to gain visibility into your software stack.&lt;/p&gt;
&lt;p&gt;👉 You can see metrics like p99 latency, error rates for your services, external API calls and individual end points.&lt;/p&gt;
&lt;p&gt;👉 You can find the root cause of the problem by going to the exact traces which are causing the problem and see detailed flamegraphs of individual request traces.&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/bc8a12f92d8313d86b619bd96c558b458b30f24cdb847b42e4db383aa83238a3/68747470733a2f2f7369676e6f7a2d7075626c69632e73332e75732d656173742d322e616d617a6f6e6177732e636f6d2f7369676e6f7a5f6865726f5f6769746875622e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/bc8a12f92d8313d86b619bd96c558b458b30f24cdb847b42e4db383aa83238a3/68747470733a2f2f7369676e6f7a2d7075626c69632e73332e75732d656173742d322e616d617a6f6e6177732e636f6d2f7369676e6f7a5f6865726f5f6769746875622e706e67" alt="SigNoz Feature"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/d86b90eea3d56848776f64d2e8188152844713a3079c158954a3f4a49f2fb120/68747470733a2f2f7369676e6f7a2d7075626c69632e73332e75732d656173742d322e616d617a6f6e6177732e636f6d2f436f6e747269627574696e672e737667"&gt;&lt;img src="https://camo.githubusercontent.com/d86b90eea3d56848776f64d2e8188152844713a3079c158954a3f4a49f2fb120/68747470733a2f2f7369676e6f7a2d7075626c69632e73332e75732d656173742d322e616d617a6f6e6177732e636f6d2f436f6e747269627574696e672e737667" width="50px"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Join our Slack community&lt;/h2&gt;
&lt;p&gt;Come say Hi to us on &lt;a href="https://join.slack.com/t/signoz-community/shared_invite/zt-lrjknbbp-J_mI13rlw8pGF4EWBnorJA" rel="nofollow"&gt;Slack&lt;/a&gt; 👋&lt;/p&gt;

&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/61f3487967fd24ab9d66eddfc48ab2b822ef4f1c300ac8db16bf27f70f9f94af/68747470733a2f2f7369676e6f7a2d7075626c69632e73332e75732d656173742d322e616d617a6f6e6177732e636f6d2f46656174757265732e737667"&gt;&lt;img src="https://camo.githubusercontent.com/61f3487967fd24ab9d66eddfc48ab2b822ef4f1c300ac8db16bf27f70f9f94af/68747470733a2f2f7369676e6f7a2d7075626c69632e73332e75732d656173742d322e616d617a6f6e6177732e636f6d2f46656174757265732e737667" width="50px"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Features:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Application overview metrics like RPS, 50th/90th/99th Percentile latencies, and Error Rate&lt;/li&gt;
&lt;li&gt;Slowest endpoints in your application&lt;/li&gt;
&lt;li&gt;See exact request trace to figure out issues in downstream services, slow DB queries, call to 3rd party services like payment gateways, etc&lt;/li&gt;
&lt;li&gt;Filter traces by service name, operation, latency, error…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/SigNoz/signoz"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>devops</category>
      <category>database</category>
      <category>monitoring</category>
      <category>observability</category>
    </item>
    <item>
      <title>Learn React &amp; Higher Order Components (HOCs) By Building Netflix</title>
      <author>Hiep Le</author>
      <pubDate>Fri, 23 Jul 2021 12:41:12 +0000</pubDate>
      <link>https://dev.to/hieptl/learn-react-higher-order-components-hocs-by-building-netflix-3h73</link>
      <guid>https://dev.to/hieptl/learn-react-higher-order-components-hocs-by-building-netflix-3h73</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SDOGifX3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kl7ptj9gf9dcqaenyj9a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SDOGifX3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kl7ptj9gf9dcqaenyj9a.png" alt="learn-react-by-building-netflix"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Click ⭐ if you like the project. Pull Requests are highly appreciated ❤️&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Github link: &lt;a href="https://github.com/hieptl/netflix-clone/tree/main/advanced/netflix-hoc#what"&gt;https://github.com/hieptl/netflix-clone/tree/main/advanced/netflix-hoc#what&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'm Hiep. I work as a full-time software engineer. Most of my open-source projects are focused on one thing - to help people learn 📚. &lt;/p&gt;

&lt;p&gt;The repository helps you learn higher order components (hocs) by building Netflix. It means that you are learning higher order components by building a real-life project. I will explain concepts in details. This post is the third part in my series and it is suitable for beginners.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you feel the repository is useful, please help me share the post and give me a Github ⭐. It will make me feel motivation to work even harder. I will try to make many open sources and share to the community.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#preface"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Preface&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;This course will help you to learn higher order components (hocs) by building Netflix. It means that you are learning by doing a real-life project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Table of Contents&lt;/strong&gt;
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;No.&lt;/th&gt;
&lt;th&gt;Topics&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;&lt;a href="#how-to-run-the-project"&gt;How to Run the Project.&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;a href="#live-demo"&gt;Live Demo.&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;a href="#introduction-about-the-creator"&gt;Introduction about the Creator.&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2.1&lt;/td&gt;
&lt;td&gt;&lt;a href="#greenwich-university"&gt;      Greenwich University.&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2.2&lt;/td&gt;
&lt;td&gt;&lt;a href="#hitachi-vantara-vietnam"&gt;      Hitachi Vantara Vietnam.&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;a href="#prequisites"&gt;Prequisites.&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3.1&lt;/td&gt;
&lt;td&gt;&lt;a href="#softwares"&gt;      Softwares.&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3.2&lt;/td&gt;
&lt;td&gt;&lt;a href="#technical-skills"&gt;      Technical Skills.&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3.3&lt;/td&gt;
&lt;td&gt;&lt;a href="#materials"&gt;      Materials.&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;a href="#purposes-of-the-course"&gt;Purposes of the Course.&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4.1&lt;/td&gt;
&lt;td&gt;&lt;a href="#final-project"&gt;      Final Project.&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4.2&lt;/td&gt;
&lt;td&gt;&lt;a href="#job"&gt;      Job.&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;a href="#higher-order-components"&gt;Higher Order Components.&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5.1&lt;/td&gt;
&lt;td&gt;&lt;a href="#what"&gt;      What.&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5.2&lt;/td&gt;
&lt;td&gt;&lt;a href="#why"&gt;      Why.&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5.3&lt;/td&gt;
&lt;td&gt;&lt;a href="#how"&gt;      How.&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5.4&lt;/td&gt;
&lt;td&gt;&lt;a href="#when"&gt;      When.&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;&lt;a href="#apply-higher-order-components-to-netflix"&gt;Apply Higher Order Components to Netflix.&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;&lt;a href="#conclusion"&gt;Conclusion.&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;&lt;a href="#references"&gt;References.&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#table-of-images"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Table of Images.&lt;/strong&gt;
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;No.&lt;/th&gt;
&lt;th&gt;Topics&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;a href="#figure1"&gt;Figure 1: Apply Higher Order Components to Netflix.&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;a id="how-to-run-the-project"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#0-how-to-run-the-project"&gt;
  &lt;/a&gt;
  &lt;strong&gt;0. How to Run the Project.&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Step 1: Clone the project by using git clone or download the zip file.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Step 2: Open "terminal" / "cmd" / "gitbash" and change directory to "netflix-clone" and run "npm install" to install dependencies.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Step 3: Run "npm start" to run the fron-end project.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a id="live-demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-live-demo"&gt;
  &lt;/a&gt;
  &lt;strong&gt;1. Live Demo.&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://espg2.csb.app/login"&gt;https://espg2.csb.app/login&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Username: &lt;a href="mailto:demo@gmail.com"&gt;demo@gmail.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Password: 123456&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a id="introduction-about-the-creator"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-introduction-about-the-creator"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2. Introduction about the Creator.&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a id="greenwich-university"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#21-greenwich-university"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2.1. Greenwich University.&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;GPA 4.0 / 4.0.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Machine Learning paper - Recommendation System - IEEE/ICACT2020.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Co-Founder / Mentor IT club.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a id="hitachi-vantara-vietnam"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#22-hitachi-vantara-vietnam"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2.2. Hitachi Vantara Vietnam.&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Employee of the year.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Second prize - innovation contest.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Techlead - HN branch.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;One of CoE Leaders (Center of Excellence).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a id="prequisites"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-prequisites"&gt;
  &lt;/a&gt;
  &lt;strong&gt;3. Prequisites.&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a id="softwares"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#31-softwares"&gt;
  &lt;/a&gt;
  &lt;strong&gt;3.1. Softwares.&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Install NodeJS.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;An IDE or a text editor (VSCode, Intellij, Webstorm, etc).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a id="technical-skills"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#32-technical-skills"&gt;
  &lt;/a&gt;
  &lt;strong&gt;3.2. Technical Skills.&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Basic programming skill.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Basic HTML, CSS, JS skills.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Basic React skill. (If you want to learn about React, you can refer &lt;strong&gt;Learn React by Building Netflix&lt;/strong&gt;: &lt;a href="https://dev.to/hieptl/learn-react-by-building-netflix-1127"&gt;https://dev.to/hieptl/learn-react-by-building-netflix-1127&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a id="materials"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#33-materials"&gt;
  &lt;/a&gt;
  &lt;strong&gt;3.3. Materials.&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Html, css, js (source code) was prepared because I want to focus on React and share knowledge about React. Building html and css from scratch would take a lot of time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;README.md (the md file will contain everything about the course).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Netflix data will be used to import to Firebase. In this course, we use Firebase as our back-end service.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a id="purposes-of-the-course"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-purposes-of-the-course"&gt;
  &lt;/a&gt;
  &lt;strong&gt;4. Purposes of the Course.&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a id="final-project"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#41-final-project"&gt;
  &lt;/a&gt;
  &lt;strong&gt;4.1. Final Project.&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The course would help you have understanding about React and higher order components.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You could build the final project with end-to-end solution (front-end solution using React and back-end solution using Firebase).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a id="job"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#42-job"&gt;
  &lt;/a&gt;
  &lt;strong&gt;4.2. Job.&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;After finishing the course, you could get a job with fresher / junior position.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a id="higher-order-components"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-higher-order-components"&gt;
  &lt;/a&gt;
  &lt;strong&gt;5. Higher Order Components.&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a id="what"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#51-what"&gt;
  &lt;/a&gt;
  &lt;strong&gt;5.1 What.&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Higher-order function is a function that accepts another function as an argument or returns a function as a return value or both.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firstOrderFunc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello, I am a First order function&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;higherOrder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ReturnFirstOrderFunc&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;ReturnFirstOrderFunc&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;higherOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstOrderFunc&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A higher-order component (HOC) is an advanced technique in React for reusing component logic. HOCs are not part of the React API, per se. They are a pattern that emerges from React’s compositional nature.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A higher-order component (HOC) is a function that takes a component and returns a new component. Basically, it's a pattern that is derived from React's compositional nature.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We call them pure components because they can accept any dynamically provided child component but they won't modify or copy any behavior from their input components.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;EnhancedComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;higherOrderComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;WrappedComponent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a id="why"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#52-why"&gt;
  &lt;/a&gt;
  &lt;strong&gt;5.2 Why.&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;HOC can be used for many use cases:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Code reuse, logic and bootstrap abstraction.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Render hijacking.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;State abstraction and manipulation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Props manipulation.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a id="how"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#53-how"&gt;
  &lt;/a&gt;
  &lt;strong&gt;5.3 How.&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Step 1: Create a function that accept a component as parameter. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Step 2: Add common logic that can be shared between components inside that function. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Step 3: Pass the custom logic to the input component via props. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Step 4: Export the created function. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Step 5: Import the created function into any components that need to use it. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Step 6: Wrap the component by using the imported function and then export it.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;withHOC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;YourComponent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a id="when"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#54-when"&gt;
  &lt;/a&gt;
  &lt;strong&gt;5.4 When.&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We can use higher order components if we want to reuse logic and share code between components. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;By the way of illustration, we need to display a modal in different places. The code of showing / hiding the modal need to be shared between components instead of creating new functions for different components. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We can have several solutions to achieve the result such as using Redux, React Context API, ... to keep track the state of the modal. However, we will use higher order component to achieve the same result. For this reason, you can understand higher order component by applying to our Netflix.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a id="apply-higher-order-components-to-netflix"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-apply-higher-order-components-to-netflix"&gt;
  &lt;/a&gt;
  &lt;strong&gt;7. Apply Higher Order Components to Netflix.&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a id="figure1"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Hw2QhzS4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i3qqrljv7qq4qaicqyvc.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hw2QhzS4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i3qqrljv7qq4qaicqyvc.PNG" alt="apply-higher-order-components-to-netflix"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Figure 1. Apply Higher Order Components to Netflix.&lt;/p&gt;

&lt;p&gt;We will understand about higher order component by applying to our Netflix. In the first past of the series, we did not validate the user's credentials. In this part, we will validate the user's information and show the warning dialog if the user's information is invalid.&lt;/p&gt;

&lt;p&gt;Step 1: Create &lt;strong&gt;Modal.js&lt;/strong&gt; file inside &lt;strong&gt;src/components/Modal&lt;/strong&gt; folder. This file is used to define higher order component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;withModal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;WrapperComponent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;showModal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;WrapperComponent&lt;/span&gt; &lt;span class="nx"&gt;showModal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;showModal&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;withModal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;1st NOTE:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We can user higher order component pattern to share code between components. In this case, we need to show the modal in different places. For this reason, we will create a higher order component which is call &lt;strong&gt;withModal&lt;/strong&gt; to show the modal.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the &lt;strong&gt;showModal&lt;/strong&gt; function will accept an json object as parameter. The json object will contain &lt;strong&gt;message&lt;/strong&gt; property and it is used as the message of our warning dialog.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I will show the default window alert by using &lt;strong&gt;window.alert&lt;/strong&gt; because we are focusing on learning higher order component concepts. You can feel free to create your modal and add some styling for it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As mentioned before, we can pass the custom logic to the input component via props. We pass &lt;strong&gt;showModal&lt;/strong&gt; function to the input component through a prop which is also called &lt;strong&gt;showModal&lt;/strong&gt;. It means that we can show the modal by dispatching &lt;strong&gt;showModal&lt;/strong&gt; function from the input component.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Step 2: Install &lt;strong&gt;validator&lt;/strong&gt; library. This librayr provides many common functions. Therefore, we can reuse them instead of creating everything from scratch. We need to run &lt;strong&gt;npm install validator&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Step 3: Import &lt;strong&gt;validator&lt;/strong&gt; library to &lt;strong&gt;LoginForm.js&lt;/strong&gt; file because we would like to validate the user's information.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="c1"&gt;// import validator.&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;validator&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;validator&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Step 4: In &lt;strong&gt;LoginForm.js&lt;/strong&gt; file, we write a function to validate the user's credentials.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isUserCredentialsValid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;validator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isEmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;validator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isLength&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;min&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;2nd NOTE:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;validator.isEmail&lt;/strong&gt; is used to ensure that the user's email will follow the email format.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;validator.isLength(password, { min: 6 })&lt;/strong&gt; is used to validate the length of the user's password. The user's password' s length must have at least 6 characters.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Step 5: Import the above higher order component into &lt;strong&gt;LoginForm.js&lt;/strong&gt; file.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="c1"&gt;// import hoc.&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;withModal&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../modal/Modal&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Step 6: Wrap &lt;strong&gt;LoginForm&lt;/strong&gt; component inside the higher order component.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="c1"&gt;// export LoginForm component.&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;withModal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;LoginForm&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Step 7: Get &lt;strong&gt;showModal&lt;/strong&gt; function of the higher order component via props.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;showModal&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Step 8: Call &lt;strong&gt;showModal&lt;/strong&gt; function if the input user's information is invalid.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="cm"&gt;/**
   * handle event when the user clicks on "Login" button.
   */&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;login&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// call firebase authentication service.&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isUserCredentialsValid&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;firebaseAuth&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;signInWithEmailAndPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;userCredential&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="c1"&gt;// Signed in&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;userCredential&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="c1"&gt;// ...&lt;/span&gt;
          &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`signed in user`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;showModal&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Your email or password is not correct&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After finish all of the above steps, &lt;strong&gt;LoginForm&lt;/strong&gt; componnet will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * Github: https://github.com/hieptl/netflix-clone.
 * Dev.to: https://dev.to/hieptl/learn-react-by-building-netflix-1127
 */&lt;/span&gt;
&lt;span class="c1"&gt;// import react.&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// import firebase authentication.&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;firebaseAuth&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../firebase/firebase&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// import hoc.&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;withModal&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../modal/Modal&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// import validator.&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;validator&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;validator&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cm"&gt;/**
 * create LoginForm component.
 */&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;LoginForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// create email and password state to store user's credentials.&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setEmail&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setPassword&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;showModal&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isUserCredentialsValid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;validator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isEmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;validator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isLength&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;min&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * handle event when the user clicks on "Login" button.
   */&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;login&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// call firebase authentication service.&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isUserCredentialsValid&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;firebaseAuth&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;signInWithEmailAndPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;userCredential&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="c1"&gt;// Signed in&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;userCredential&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="c1"&gt;// ...&lt;/span&gt;
          &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`signed in user`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;showModal&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Your email or password is not correct&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * update email state when the user inputs the email field.
   * @param {*} e - synthetic event to get the latest email's value.
   */&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onEmailChanged&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// get email value.&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updatedEmail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// update email state.&lt;/span&gt;
    &lt;span class="nx"&gt;setEmail&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;updatedEmail&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * update password state when the user input the password field.
   * @param {*} e - synthetic event to get the latest password's value.
   */&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onPasswordChanged&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// get password value.&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updatedPassword&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// update password state.&lt;/span&gt;
    &lt;span class="nx"&gt;setPassword&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;updatedPassword&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;login-body&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;login-body__form&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Sign&lt;/span&gt; &lt;span class="nx"&gt;In&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;login-body__input mb-16&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
            &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Email or phone number&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onEmailChanged&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;login-body__input&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
            &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onPasswordChanged&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;login-body__submit-btn&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;Sign&lt;/span&gt; &lt;span class="nx"&gt;In&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;login-body__options&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Remember&lt;/span&gt; &lt;span class="nx"&gt;me&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;login-body__need-help&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Need&lt;/span&gt; &lt;span class="nx"&gt;help&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;login-body__footer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;login-body__fb&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt;
              &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://assets.nflxext.com/ffe/siteui/login/images/FB-f-Logo__blue_57.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
              &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fb&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Login&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;Facebook&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;login-body__new-to-nl&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;New&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;Netflix&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;login-body__sign-up&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Sign&lt;/span&gt; &lt;span class="nx"&gt;up&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;login-body__google_captcha&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nx"&gt;This&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="kr"&gt;protected&lt;/span&gt; &lt;span class="nx"&gt;by&lt;/span&gt; &lt;span class="nx"&gt;Google&lt;/span&gt; &lt;span class="nx"&gt;reCAPTCHA&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;ensure&lt;/span&gt; &lt;span class="nx"&gt;you&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;re not a
            bot.
            &amp;lt;span className="login-body__learn-more"&amp;gt;Learn more.&amp;lt;/span&amp;gt;
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
// export LoginForm component.
export default withModal(LoginForm);

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a id="conclusion"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Conclusion&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;In this course, we have learn about higher order components by building Netflix. I hope that you can apply higher order components to your projects. If you feel the project is useful, please help me share it to the community and give me Github ⭐&lt;/p&gt;

&lt;p&gt;&lt;a id="references"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  &lt;strong&gt;References&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;[1]. &lt;a href="https://reactjs.org/docs/higher-order-components.html"&gt;https://reactjs.org/docs/higher-order-components.html&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How to See Which Branch Your Teammate is on in IntelliJ</title>
      <author>Michael</author>
      <pubDate>Fri, 23 Jul 2021 12:32:29 +0000</pubDate>
      <link>https://dev.to/gitlive/how-to-see-which-branch-your-teammate-is-on-in-intellij-5aip</link>
      <guid>https://dev.to/gitlive/how-to-see-which-branch-your-teammate-is-on-in-intellij-5aip</guid>
      <description>&lt;p&gt;&lt;em&gt;“What branch are you on?”&lt;/em&gt; is often the first question you ask when a teammate says &lt;em&gt;“The tests aren't passing”&lt;/em&gt; or &lt;em&gt;“The build failed”&lt;/em&gt;. Here’s how you can get an answer to that question without even needing to ask.&lt;/p&gt;

&lt;p&gt;In IntelliJ, open up the Team Window by clicking GitLive on the bottom tool window bar.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RKPLL98k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627036920483/eweZ9VMcY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RKPLL98k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627036920483/eweZ9VMcY.png" alt="IJ-ultimate_2-box.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will show a list of your teammates, if they are online (or away) and the issue they are currently working on. Locate the teammate you are interested in and click the arrow on the left-hand side of their avatar.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dp9m_7me--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627035106698/ccVTONK3K.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dp9m_7me--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627035106698/ccVTONK3K.png" alt="image2-full-window-cropped.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you will see all the repositories they have cloned including the name of their current branch! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m4jlau1g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627036090036/vUfca-xY0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m4jlau1g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627036090036/vUfca-xY0.png" alt="image3-full-croped.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: If an issue has been connected to the branch you’ll see the issue name instead, if that's the case just hover your cursor over the issue name and a tooltip will appear showing you the branch name (and even the commit hash)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--udh3AD1j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627036103488/ATgcnjXzt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--udh3AD1j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627036103488/ATgcnjXzt.png" alt="img-4-full-figma-cropped.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Don’t have the GitLive extension installed yet? You can find it &lt;a href="https://plugins.jetbrains.com/plugin/11955-gitlive"&gt;here&lt;/a&gt; and, if you need help setting it up, follow the instructions  &lt;a href="https://docs.git.live/docs/installation/"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Building a User Dashboard with Redwood</title>
      <author>Milecia</author>
      <pubDate>Fri, 23 Jul 2021 11:52:26 +0000</pubDate>
      <link>https://dev.to/flippedcoding/building-a-user-dashboard-with-redwood-ipd</link>
      <guid>https://dev.to/flippedcoding/building-a-user-dashboard-with-redwood-ipd</guid>
      <description>&lt;p&gt;There's a dashboard for just about every application you log in to these days. Most of them are built with modern frameworks like React or Angular and they have some kind of back-end to support them. Users depend on these dashboards to check their account info, make updates to their businesses, and handle a number of other actions.&lt;/p&gt;

&lt;p&gt;In this tutorial, we'll be making a user dashboard for a management system with Redwood. It'll have a few actions that a user can take to add other users to the account with different roles. The dashboard will also let a user add new items to their inventory and the items will be attached to different locations.&lt;/p&gt;

&lt;p&gt;Let's kick it off with a little background on Redwood.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-redwood"&gt;
  &lt;/a&gt;
  What is Redwood
&lt;/h2&gt;

&lt;p&gt;Redwood is a full-stack framework built with Prisma, React, and GraphQL. It comes with a lot of features with a few commands that we'll be using to make this app quickly. If you're interested in learning more about Redwood, make sure to &lt;a href="https://redwoodjs.com/docs/introduction"&gt;check out their docs&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#set-up-the-project"&gt;
  &lt;/a&gt;
  Set up the project
&lt;/h2&gt;

&lt;p&gt;Now let's jump into getting our dashboard set up. We'll bootstrap this app by running the following command. Just a heads up, it might take a few minutes for it to finish, but it'll be worth the wait.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn create redwood-app ./redwood-dashboard&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;When the command has finished executing, you'll notice you have quite a few folders and files. The most important folders are the &lt;code&gt;api&lt;/code&gt; directory and the &lt;code&gt;web&lt;/code&gt; directory. The &lt;code&gt;api&lt;/code&gt; directory holds all of the code for the back-end and database while the &lt;code&gt;web&lt;/code&gt; directory holds everything for the front-end.&lt;/p&gt;

&lt;p&gt;Before we start working on the app, you should run it to see how it works first. Use the following command to start both the front-end and back-end.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn rw dev&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here's what you should see in your browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bTkpTkVR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/jesse-thisdot/image/upload/v1624049189/e-603fc55d218a650069f5228b/qeck1tbl8odgdkh3m1bc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bTkpTkVR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/jesse-thisdot/image/upload/v1624049189/e-603fc55d218a650069f5228b/qeck1tbl8odgdkh3m1bc.png" alt="base Redwood app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#defining-the-dashboard-model"&gt;
  &lt;/a&gt;
  Defining the dashboard model
&lt;/h2&gt;

&lt;p&gt;Since you've seen the app in action, let's start taking advantage of some Redwood commands to work on the back-end. We'll start by making a Prisma model for the dashboard. This is how our app will connect to a Postgres database. Inside of the &lt;code&gt;api &amp;gt; db&lt;/code&gt;, open the &lt;code&gt;schema.prisma&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;This is where we'll make the schema for the tables we want in our database using a few different kinds of relations. You'll see that Redwood already has a few configs set and an example of a user model.&lt;/p&gt;

&lt;p&gt;We'll be changing the &lt;code&gt;datasource db provider&lt;/code&gt; to &lt;code&gt;postgresql&lt;/code&gt; which you can see in the code snippet below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;datasource&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;provider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;postgresql&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;url&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;DATABASE_URL&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we'll remove the &lt;code&gt;TODO&lt;/code&gt; and update the example user model.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;model&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;id&lt;/span&gt;    &lt;span class="nx"&gt;Int&lt;/span&gt;    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;id&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;default&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;autoincrement&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;unique&lt;/span&gt;
  &lt;span class="nx"&gt;name&lt;/span&gt;  &lt;span class="nb"&gt;String&lt;/span&gt;
  &lt;span class="nx"&gt;role&lt;/span&gt;  &lt;span class="nb"&gt;String&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our updated &lt;code&gt;User&lt;/code&gt; model has a few columns for information we want to store about a user. The &lt;code&gt;email&lt;/code&gt; field has a constraint that it always has to be a unique value. The same email address can't be in the database multiple times. Next, we'll add a new model for our &lt;code&gt;Item&lt;/code&gt; and &lt;code&gt;Location&lt;/code&gt; tables. These need to be created at the same time because they have a relationship with each other.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;model&lt;/span&gt; &lt;span class="nx"&gt;Item&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;id&lt;/span&gt;         &lt;span class="nx"&gt;Int&lt;/span&gt;      &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;id&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;default&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;autoincrement&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="nx"&gt;sku&lt;/span&gt;        &lt;span class="nb"&gt;String&lt;/span&gt;   &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;unique&lt;/span&gt;
  &lt;span class="nx"&gt;name&lt;/span&gt;       &lt;span class="nb"&gt;String&lt;/span&gt;
  &lt;span class="nx"&gt;location&lt;/span&gt;   &lt;span class="nx"&gt;Location&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;relation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;locationId&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;references&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="nx"&gt;locationId&lt;/span&gt; &lt;span class="nx"&gt;Int&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;model&lt;/span&gt; &lt;span class="nx"&gt;Location&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;id&lt;/span&gt;       &lt;span class="nx"&gt;Int&lt;/span&gt;    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;id&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;default&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;autoincrement&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="nx"&gt;name&lt;/span&gt;     &lt;span class="nb"&gt;String&lt;/span&gt;
  &lt;span class="nx"&gt;district&lt;/span&gt; &lt;span class="nx"&gt;Int&lt;/span&gt;
  &lt;span class="nx"&gt;Item&lt;/span&gt;     &lt;span class="nx"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we'll update the &lt;code&gt;seed.js&lt;/code&gt; file so that there are a few values present before we start our app. This is common on product dashboards for populating dropdown options or initializing tags that users can add to different settings. We'll be adding a user, an item, and one location to seed our database. Just a heads up, I've deleted a lot of comments from this file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* eslint-disable no-console */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;PrismaClient&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@prisma/client&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dotenv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;dotenv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;PrismaClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Please define your seed data.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Kaiya&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;best@test.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;inventory&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Compound North&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;district&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Morning Glory&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;sku&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hf8029ht8942ht8429pht8p942p&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;locationId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$disconnect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the schema and seed data in place, we're almost ready to run our first migration. Before we do that, we need to be connected to the database. So in the &lt;code&gt;.env&lt;/code&gt; file at the root of the project, update the &lt;code&gt;DATABASE_URL&lt;/code&gt; to match your Postgres instance. It'll look similar to this.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;DATABASE_URL=postgres://postgres:admin@localhost:5432/dashboard&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you don't have a local Postgres instance to work with, &lt;a href="https://www.postgresql.org/download/"&gt;you can download it here&lt;/a&gt; pretty quickly.&lt;/p&gt;

&lt;p&gt;Now we're going to run the migration with:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn rw prisma migrate dev&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will prompt you for a migration name, create the database and the tables, and add the seed data. If you look at your database through pgAdmin, you'll see something like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--88FsiqMC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/jesse-thisdot/image/upload/v1624049253/e-603fc55d218a650069f5228b/gjelsegxua1mgaiy3l5t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--88FsiqMC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/jesse-thisdot/image/upload/v1624049253/e-603fc55d218a650069f5228b/gjelsegxua1mgaiy3l5t.png" alt="seeded database in pgAdmin"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that you have your database ready to store and send the values we need, let's move on to our back-end and front-end.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-the-backend-and-frontend"&gt;
  &lt;/a&gt;
  Adding the back-end and front-end
&lt;/h2&gt;

&lt;p&gt;Redwood has one particular command that does a lot of work for us. It will create the entire CRUD for a table from the front-end components and routes to the back-end GraphQL queries, types, and mutations. We're going to take advantage of that to make most of our dashboard. Let's start with the following command.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn rw g scaffold user&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will generate several pages and components and GraphQL files to handle all of the CRUD actions for the user's portion of the dashboard. Take a look in &lt;code&gt;web &amp;gt; pages&lt;/code&gt;. You should see a new directory called &lt;code&gt;User&lt;/code&gt;. This has all of the pages we need to handle everything about users.&lt;/p&gt;

&lt;p&gt;Now take a look in &lt;code&gt;web &amp;gt; components&lt;/code&gt;. There will be another &lt;code&gt;User&lt;/code&gt; folder. This one contains the components we use to interact with the GraphQL server. Most of the data is fetched in these components and requests are sent from these components.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;web &amp;gt; layouts&lt;/code&gt; folder will also have a new directory containing a layout file for your &lt;code&gt;User&lt;/code&gt; pages. This is how you can create styles for a specific set of pages.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;Routes.js&lt;/code&gt; file, you'll see there is a new set of routes for users wrapped in the &lt;code&gt;UserLayout&lt;/code&gt;. All of the pages generate also have their routes automatically added to this file inside of their parent layout.&lt;/p&gt;

&lt;p&gt;There were also some new files generated in the &lt;code&gt;api&lt;/code&gt; directory. If you look inside &lt;code&gt;api &amp;gt; src &amp;gt; graphql&lt;/code&gt;, you'll find the GraphQL schema for all the CRUD operations you need and the types have been defined by the model in the &lt;code&gt;schema.prisma&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Then inside &lt;code&gt;api &amp;gt; src &amp;gt; services&lt;/code&gt;, you'll find all of the GraphQL resolvers for the queries and mutations defined in the schema.&lt;/p&gt;

&lt;p&gt;All of these pages, components, types, and resolvers were generated by that one Redwood command. Let's run the app with &lt;code&gt;yarn rw dev&lt;/code&gt; so you can see all of this working. If you go to the &lt;code&gt;users&lt;/code&gt; page in the browser, you should see something similar to this.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The home page will return a 404 right now because we haven't added a component for that route. We'll do that a bit later, but the &lt;code&gt;/users&lt;/code&gt; page will still work.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AWsnaaaw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/jesse-thisdot/image/upload/v1624049294/e-603fc55d218a650069f5228b/z0ywmlzj1sywxdmw1vjf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AWsnaaaw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/jesse-thisdot/image/upload/v1624049294/e-603fc55d218a650069f5228b/z0ywmlzj1sywxdmw1vjf.png" alt="users CRUD in browser"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can add a new user, update the current user, or delete the current user with the buttons on the page.&lt;/p&gt;

&lt;p&gt;We're going to run that &lt;code&gt;scaffold&lt;/code&gt; command two more times to generate the CRUD for the items and locations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn rw g scaffold location
yarn rw g scaffold item
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have all of the actions we need for our user dashboard. There are a couple of things we need to do to give this dashboard a more realistic feel. We'll add a home page and a layout to help us navigate between parts of the dashboard.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#making-the-home-page"&gt;
  &lt;/a&gt;
  Making the home page
&lt;/h3&gt;

&lt;p&gt;Let's start by adding the &lt;code&gt;styled-components&lt;/code&gt; package because we're going to use it to style a few things. First, go to the &lt;code&gt;web&lt;/code&gt; directory in your terminal. That's where this package will need to be installed.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn add styled-components&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now let's run one of those magic Redwood commands to generate the home page and its routing.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn rw g page home /&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will create a new directory in &lt;code&gt;web &amp;gt; src &amp;gt; pages&lt;/code&gt; for the &lt;code&gt;HomePage&lt;/code&gt; component and it'll add a new route to &lt;code&gt;Routes.js&lt;/code&gt;. You can re-run your app here to see the new home page. It'll look like this in the browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sFQbXX_d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/jesse-thisdot/image/upload/v1624049318/e-603fc55d218a650069f5228b/dcsgwketcrhpwiuddwq8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sFQbXX_d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/jesse-thisdot/image/upload/v1624049318/e-603fc55d218a650069f5228b/dcsgwketcrhpwiuddwq8.png" alt="new home page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that we have a home page in place, let's make a layout that will apply to this and all the other pages we have so far. Of course, there's a Redwood command to handle that.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn rw g layout home&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will create a new folder in &lt;code&gt;web &amp;gt; src &amp;gt; layouts&lt;/code&gt; for our home page. We're going to use a few styled components in the &lt;code&gt;HomeLayout&lt;/code&gt; component to create a side navigation menu and give the dashboard a little definition. We'll also be using Redwood routing to add links to the other pages in the side navigation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;routes&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@redwoodjs/router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;HomeLayout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;FlexBox&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SideNav&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;LinkContainer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Link&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/LinkContainer&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;LinkContainer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;locations&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Locations&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Link&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/LinkContainer&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;LinkContainer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Items&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Link&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/LinkContainer&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/SideNav&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;FullPage&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/FullPage&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/FlexBox&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;FlexBox&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
  display: flex;
`&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;FullPage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
  height: 100vh;
  width: 100%;
`&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;LinkContainer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
  padding: 12px;

  &amp;gt; * {
    color: #000;
    font-family: sans-serif;
    font-size: 18px;
    text-decoration: none;
  }

  &amp;gt; *:hover {
    color: #5b5b5b;
  }
`&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SideNav&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nav&lt;/span&gt;&lt;span class="s2"&gt;`
  border-right: 1px solid;
  width: 250px;
`&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;HomeLayout&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we need to apply this layout to all of the pages in our app. We'll do that in the &lt;code&gt;Routes.js&lt;/code&gt; file. This means adding a &lt;code&gt;&amp;lt;Set&amp;gt;&lt;/code&gt; component around all of the existing routes like below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Set&lt;/span&gt; &lt;span class="nx"&gt;wrap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;HomeLayout&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;HomePage&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;home&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Set&lt;/span&gt; &lt;span class="nx"&gt;wrap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ItemsLayout&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/items/new&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ItemNewItemPage&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;newItem&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/items/{id:Int}/edit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ItemEditItemPage&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;editItem&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/items/{id:Int}&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ItemItemPage&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;item&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/items&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ItemItemsPage&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;items&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Set&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Set&lt;/span&gt; &lt;span class="nx"&gt;wrap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;LocationsLayout&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/locations/new&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;LocationNewLocationPage&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;newLocation&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/locations/{id:Int}/edit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;LocationEditLocationPage&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;editLocation&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/locations/{id:Int}&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;LocationLocationPage&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;location&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/locations&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;LocationLocationsPage&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;locations&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Set&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Set&lt;/span&gt; &lt;span class="nx"&gt;wrap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;UsersLayout&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/users/new&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;UserNewUserPage&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;newUser&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/users/{id:Int}/edit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;UserEditUserPage&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;editUser&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/users/{id:Int}&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;UserUserPage&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;user&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/users&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;UserUsersPage&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;users&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Set&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;notfound&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;NotFoundPage&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Set&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Router&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if you run &lt;code&gt;yarn rw dev&lt;/code&gt;, you'll see something like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--utvRVBZW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/jesse-thisdot/image/upload/v1624049368/e-603fc55d218a650069f5228b/cmymcv9omp6le8jud6oc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--utvRVBZW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/jesse-thisdot/image/upload/v1624049368/e-603fc55d218a650069f5228b/cmymcv9omp6le8jud6oc.png" alt="dashboard with global layout applied"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you go any of the links in the side navigation, you'll see something like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3IGy_OUI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/jesse-thisdot/image/upload/v1624049383/e-603fc55d218a650069f5228b/dqgaomfednzrvetjgk0l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3IGy_OUI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/jesse-thisdot/image/upload/v1624049383/e-603fc55d218a650069f5228b/dqgaomfednzrvetjgk0l.png" alt="users in the dashboard with layout"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'll leave the extra styling to you. Styling this could be a completely separate tutorial!&lt;/p&gt;

&lt;p&gt;This might feel like a cliffhanger since we didn't actually write much code, but that's what I like about Redwood. You can get big apps up and running quickly and things just work.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finished-code"&gt;
  &lt;/a&gt;
  Finished code
&lt;/h2&gt;

&lt;p&gt;You can check out the front-end without the connection to the back-end here on this &lt;a href="https://codesandbox.io/s/runtime-water-1fvey?file=/src/App.js"&gt;Code Sandbox&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you want all of the code for the front-end and back-end, check out the &lt;a href="https://github.com/flippedcoder/blog-examples/tree/main/redwood-user-dashboard"&gt;&lt;code&gt;redwood-user-dashboard&lt;/code&gt; in this Git repo&lt;/a&gt;!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Dashboards are a major part of many apps so it's helpful to know how to create one quickly. Redwood is a framework that will help you get started with advanced projects like these and it makes it fast to generate complex structures.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>graphql</category>
      <category>prisma</category>
      <category>react</category>
    </item>
    <item>
      <title>How I failed my first startup</title>
      <author>CodeOzz</author>
      <pubDate>Fri, 23 Jul 2021 11:49:30 +0000</pubDate>
      <link>https://dev.to/codeozz/how-i-failed-my-first-startup-gdf</link>
      <guid>https://dev.to/codeozz/how-i-failed-my-first-startup-gdf</guid>
      <description>&lt;p&gt;With three friends, we try to create our first startup 5 years ago, we failed it, and we learn a lot with this !&lt;/p&gt;

&lt;p&gt;I will tell you the story from scratch !&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-idea"&gt;
  &lt;/a&gt;
  The idea
&lt;/h3&gt;

&lt;p&gt;The main idea was to develop a mobile app that will help user to make great recipes (depending on the price setup by the user) and generate a shopping list ! &lt;/p&gt;

&lt;p&gt;The target was the student, people that have not a lot of money, big family ect...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#first-step"&gt;
  &lt;/a&gt;
  First step
&lt;/h3&gt;

&lt;p&gt;We were all student in the same school, we had no a lot of free time, but we need to use our free time to learn mobile development !&lt;/p&gt;

&lt;p&gt;We first learn &lt;strong&gt;Java&lt;/strong&gt;, me made the first &lt;em&gt;sketchs&lt;/em&gt;, call &lt;em&gt;designer&lt;/em&gt;, a friend help use to &lt;em&gt;make video&lt;/em&gt; for recipe !&lt;/p&gt;

&lt;p&gt;We made a lot of survey on facebook in order to check if our app can really help people !&lt;/p&gt;

&lt;p&gt;All things was very nice, but some mistakes begin to happen...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#identify-the-target"&gt;
  &lt;/a&gt;
  Identify the target
&lt;/h3&gt;

&lt;p&gt;Our mind were too attach to the idea, we were on our bubble, we don't check competition, we don't made a correct and viable business plan, no marketing, we were not ready for the business...&lt;/p&gt;

&lt;p&gt;When we check the competition, a lot of competitor was here with the same idea globally, with a solid marketing !&lt;/p&gt;

&lt;p&gt;Our main mistake -&amp;gt; Be focus and be only in our idea all day, but we don't check the other app, we don't check the &lt;strong&gt;real&lt;/strong&gt; solution for our client.&lt;/p&gt;

&lt;p&gt;We made an app, and we need to convince the client and sell it our solution with a bad business plan -&amp;gt; bad marketing !&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#other-important-errors"&gt;
  &lt;/a&gt;
  Other important errors
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Our skill in mobile development was not enough, we had a bad architecture, we were too junior !&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We don't use git, so we develop our feature on our side, and merge it together, very bad to practice this ! 😂&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Not using good management practice like &lt;strong&gt;Scrum&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;No Mentor (very important)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;We were young, we had a beautiful idea, and we try to make an app without business experience.&lt;/p&gt;

&lt;p&gt;We learn a lot, very lot, for example, the marketing of a product is &lt;strong&gt;essential&lt;/strong&gt;, it's more important than the product itself.&lt;/p&gt;

&lt;p&gt;I'm developer not a marketing man, but when you create a product, the client don't care about our technos, your methods, the most important is the solution that your product can solve. And the marketing will convince your client to use your solution !&lt;/p&gt;

&lt;p&gt;Advice that I can give you:&lt;/p&gt;

&lt;p&gt;-&amp;gt; Be aware of the concurrence&lt;/p&gt;

&lt;p&gt;-&amp;gt; Find clients and identify their problem and how your product can solve them, BEFORE creating our product&lt;/p&gt;

&lt;p&gt;-&amp;gt; Have a mentor and a good management method like scrum&lt;/p&gt;

&lt;p&gt;-&amp;gt; Use git !&lt;/p&gt;

&lt;p&gt;-&amp;gt; Marketing &amp;gt; product&lt;/p&gt;

&lt;p&gt;-&amp;gt; Have a correct and business plan viability &lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


</description>
      <category>startup</category>
      <category>webdev</category>
      <category>writing</category>
    </item>
    <item>
      <title>Day 1 / 100</title>
      <author>aliasgar-kaeed-challawala</author>
      <pubDate>Fri, 23 Jul 2021 11:39:55 +0000</pubDate>
      <link>https://dev.to/aliasgarkc/day-1-100-k4p</link>
      <guid>https://dev.to/aliasgarkc/day-1-100-k4p</guid>
      <description>&lt;p&gt;So, Finally after so many days of procrastination, here I am taking up the 100DaysOfCode challenge. Today was the day 1 of the challenge. I started with solving some problems on Hackerrank and then went on to watch some tutorials on data structures and algorithms, specifically on time and space complexity. After that I continued learning JavaScript on Udemy, had a quick glance on the basics(which I already learnt before) and then went on to learn about AJAX and APIs. I also learned to use Postman, which I believe is pretty useful when working with APIs. Pretty satisfied with what I learnt today and hoping to do the same for rest of the challenge and also continue after the challenge ends. &lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>programming</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Tronic247 Material a Material design CSS framework for devs</title>
      <author>Posandu Mapa</author>
      <pubDate>Fri, 23 Jul 2021 11:38:38 +0000</pubDate>
      <link>https://dev.to/posandu/tronic247-material-a-material-design-css-framework-for-devs-49cc</link>
      <guid>https://dev.to/posandu/tronic247-material-a-material-design-css-framework-for-devs-49cc</guid>
      <description>&lt;p&gt;Tronic247 Material is a CSS framework for the devs who loves material design. See it on Github and give a star ;D&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Tronic247"&gt;
        Tronic247
      &lt;/a&gt; / &lt;a href="https://github.com/Tronic247/material"&gt;
        material
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Material design framework using jQuery and CSS
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/76736580/125033764-5b42ca80-e0ad-11eb-944c-32c9c0bba64c.gif"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F_WLAz3V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/76736580/125033764-5b42ca80-e0ad-11eb-944c-32c9c0bba64c.gif" height="200"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Material design&lt;/b&gt; framework based on &lt;b&gt;jQuery&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/9a645cb6506f1b8530b757c60a57537e1aabc580508cbc72e3f6339af8c1e367/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f74726f6e69633234372f6d6174657269616c3f7374796c653d666c61742d737175617265"&gt;&lt;img src="https://camo.githubusercontent.com/9a645cb6506f1b8530b757c60a57537e1aabc580508cbc72e3f6339af8c1e367/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f74726f6e69633234372f6d6174657269616c3f7374796c653d666c61742d737175617265"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/2df265a2a9843f1750c04365e298de0fc85b70ab50c1fefebb1c565d202f519c/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6173742d636f6d6d69742f74726f6e69633234372f6d6174657269616c3f7374796c653d666c61742d737175617265"&gt;&lt;img src="https://camo.githubusercontent.com/2df265a2a9843f1750c04365e298de0fc85b70ab50c1fefebb1c565d202f519c/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6173742d636f6d6d69742f74726f6e69633234372f6d6174657269616c3f7374796c653d666c61742d737175617265"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/512382b84c5871e4ac04427fcfe4c92a0db81f0e0f17c95f986355703d4fec61/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f74726f6e69633234372f6d6174657269616c3f7374796c653d666c61742d737175617265"&gt;&lt;img src="https://camo.githubusercontent.com/512382b84c5871e4ac04427fcfe4c92a0db81f0e0f17c95f986355703d4fec61/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f74726f6e69633234372f6d6174657269616c3f7374796c653d666c61742d737175617265"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/938f2f90a1747aeabd2120dd19cd3b38c3748eee04593ee63d884fe49cea00c6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f54726f6e69633234372d50726f647563742d253233653431633236"&gt;&lt;img src="https://camo.githubusercontent.com/938f2f90a1747aeabd2120dd19cd3b38c3748eee04593ee63d884fe49cea00c6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f54726f6e69633234372d50726f647563742d253233653431633236"&gt;&lt;/a&gt; &lt;a href="https://gitter.im/Tronic247-Material/community?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/9e8a06acd4a3e0740ee49e20da918fabfa69761b1b2963213e2d5b56e401631e/68747470733a2f2f6261646765732e6769747465722e696d2f54726f6e69633234372d4d6174657269616c2f636f6d6d756e6974792e737667"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/952e52a0ab96fef8d62ec3fbca6d952aedb4d98377481fbcd9d6b64a3467c377/68747470733a2f2f6769746875622d726561646d652d73746174732e76657263656c2e6170702f6170692f746f702d6c616e67732f3f757365726e616d653d74726f6e6963323437267265706f3d6d6174657269616c266c61796f75743d636f6d70616374"&gt;&lt;img src="https://camo.githubusercontent.com/952e52a0ab96fef8d62ec3fbca6d952aedb4d98377481fbcd9d6b64a3467c377/68747470733a2f2f6769746875622d726561646d652d73746174732e76657263656c2e6170702f6170692f746f702d6c616e67732f3f757365726e616d653d74726f6e6963323437267265706f3d6d6174657269616c266c61796f75743d636f6d70616374"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Contributions needed&lt;/h2&gt;
&lt;h4&gt;
Please note that the documentation is incomplete. Please make your contribution to this repo &lt;a href="https://github.com/Tronic247/material-docs"&gt;https://github.com/Tronic247/material-docs&lt;/a&gt;
&lt;/h4&gt;
&lt;h4&gt;
Help this project to make the next best framework!&lt;/h4&gt;
&lt;h2&gt;
The people who love this framework&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/Tronic247/material/stargazers"&gt;&lt;img src="https://camo.githubusercontent.com/18eda974106f400e17dd00932852b10d12b31fa55f026449297b95f1c53c2b7e/68747470733a2f2f7265706f726f737465722e636f6d2f73746172732f6e6f746578742f54726f6e69633234372f6d6174657269616c" alt="Stargazers repo roster for @Tronic247/material"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Getting started&lt;/h2&gt;
&lt;p&gt;See how to &lt;a href="https://material.pages.dev/getting-started" rel="nofollow"&gt;getting started here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Tronic247/material"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


</description>
      <category>showdev</category>
      <category>css</category>
      <category>frameworks</category>
      <category>javascript</category>
    </item>
    <item>
      <title>WEATHER API IN 6 LINES OF CODE</title>
      <author>Senthil Pitchappan V</author>
      <pubDate>Fri, 23 Jul 2021 11:18:49 +0000</pubDate>
      <link>https://dev.to/senthil_v/weather-api-in-6-lines-of-code-bh</link>
      <guid>https://dev.to/senthil_v/weather-api-in-6-lines-of-code-bh</guid>
      <description>&lt;p&gt;This can be used in any application with minimum lines of code. I guess this is the best Weather API you will find on the internet. Easy to use and Opensource.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#to-get-api-key"&gt;
  &lt;/a&gt;
  To get API Key
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Go to &lt;a href="https://openweathermap.org/api"&gt;Open Weather&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Sign in / Sign up to your account&lt;/li&gt;
&lt;li&gt;Go to &lt;a href="https://home.openweathermap.org/api_keys"&gt;API Key Page&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Give your API Key a name, and click generate.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import requests
api_address='http://api.openweathermap.org/data/2.5/weather?appid=YOUR_API_KEY&amp;amp;q='
city = input('City Name :')
url = api_address + city
json_data = requests.get(url).json()
print(json_data)

formatted_data = json_data['weather'][0]['main']
print(formatted_data)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>flask</category>
      <category>python</category>
      <category>weather</category>
      <category>daily</category>
    </item>
    <item>
      <title>Write Readable &amp; Consistent Functions</title>
      <author>Liu YongLiang</author>
      <pubDate>Fri, 23 Jul 2021 11:06:23 +0000</pubDate>
      <link>https://dev.to/tlylt/write-readable-consistent-functions-5gj4</link>
      <guid>https://dev.to/tlylt/write-readable-consistent-functions-5gj4</guid>
      <description>&lt;h5&gt;
  &lt;a href="#ps-i-also-publish-my-articles-on-my-blog-because-i-get-to-decide-the-style-"&gt;
  &lt;/a&gt;
  p.s I also publish my articles on my &lt;a href="https://tlylt.github.io/blog/write-readable-and-consistent-functions/"&gt;blog&lt;/a&gt; because I get to decide the style :)
&lt;/h5&gt;

&lt;h2&gt;
  &lt;a href="#motivation"&gt;
  &lt;/a&gt;
  Motivation
&lt;/h2&gt;

&lt;p&gt;I try to watch coding-related conference talks once in a while and thought that my recent pick of &lt;a href="https://youtu.be/y7RrP_fOYUQ"&gt;Design Strategies for JavaScript API&lt;/a&gt; by Ariya resonate with me. Here's a summary and discussion on the topic of code quality based on ideas from the talk.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#code-quality"&gt;
  &lt;/a&gt;
  Code Quality
&lt;/h2&gt;

&lt;p&gt;While the talk focuses on API design, it speaks to all programmers as writing functions that are used across classes, modules, and files is a common task. What's worse than inconveniencing others is the fact that some functions are misleading even to the author. When we do write functions, we should strive to achieve the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Readable&lt;/li&gt;
&lt;li&gt;Consistent&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#readability"&gt;
  &lt;/a&gt;
  Readability
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#read-out-loud"&gt;
  &lt;/a&gt;
  Read Out Loud
&lt;/h3&gt;

&lt;p&gt;If you can't pronounce or easily spell out the function name, it deserves a better name.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#avoid-boolean-traps"&gt;
  &lt;/a&gt;
  Avoid Boolean Traps
&lt;/h2&gt;

&lt;p&gt;Often the first toolkit that we get hold of when we start to modify a function to meet the new requirements is "Boolean parameter". We add a true/false value at the end of the existing parameter list. It won't be long before our list of parameters grows out of control and we can't pinpoint which parameter is responsible for what anymore.&lt;/p&gt;

&lt;p&gt;One potential fix is to use an option object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;turn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;left&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// turn left and take one step forward&lt;/span&gt;
&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;turn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;left&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// turn left and stay at the same place&lt;/span&gt;
&lt;span class="c1"&gt;// change to&lt;/span&gt;
&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;turn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;left&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;stepForward&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;turn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;left&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;stepForward&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another refactoring idea is to abstract out the commonly used function into a separate function, so perhaps:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;turn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;left&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// turn left and take one step forward&lt;/span&gt;
&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;turn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;left&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// turn left and stay at the same place&lt;/span&gt;
&lt;span class="c1"&gt;// change to&lt;/span&gt;
&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;turnAndStepForward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;left&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// if this combination is often used &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Do not jump into abstractions &lt;a href="https://youtu.be/wuVy7rwkCfc"&gt;too quickly&lt;/a&gt; though.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-a-positive-tone"&gt;
  &lt;/a&gt;
  Use a Positive Tone
&lt;/h2&gt;

&lt;p&gt;This might appear to be a glass-half-full or glass-half-empty subjectivity point of view. However, the talk gave by Ariya suggests that we should avoid double negatives such as &lt;code&gt;x.setDisabled(true)&lt;/code&gt; and use &lt;code&gt;x.setEnabled(true)&lt;/code&gt; instead. This is to help with understanding statements more intuitively. It is also important to use one over the other consistently.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#explicit-immutability"&gt;
  &lt;/a&gt;
  Explicit Immutability
&lt;/h2&gt;

&lt;p&gt;I think this is one of the main takeaways I gathered from the talk. While I try my best to write immutable functions, some level of mutability is hard to avoid. When we do have functions that can either be mutable or immutable, it might be beneficial to indicate that in the function name. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;aString&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// modify the existing string&lt;/span&gt;
&lt;span class="nx"&gt;aString&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trimmed&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// only return a modified string&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#consistency"&gt;
  &lt;/a&gt;
  Consistency
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#naming"&gt;
  &lt;/a&gt;
  Naming
&lt;/h3&gt;

&lt;p&gt;To be consistent is to be predictable. This relies on making smart observations about the existing norm and agreed-upon conventions. With the knowledge of what we believe all programmers should know, which can be patterns and structures that are familiar, best-practices, or stood the test of time, we can write functions that will turn out to be unsurprising to potential readers.&lt;/p&gt;

&lt;p&gt;On a smaller scale, if two functions do similar things, they ought to be named similarly. This is an extension of the idea of polymorphism. &lt;br&gt;
For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;turn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;left&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;car&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;steer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;left&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Perhaps a better way to name the functions will be to use &lt;code&gt;turn&lt;/code&gt; for both.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;turn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;left&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;car&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;turn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;left&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h3&gt;

&lt;p&gt;In the same vein, having consistent parameters will help to reduce mistakes. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// first horizontally, second vertically&lt;/span&gt;
&lt;span class="nx"&gt;rectangle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// first vertically, second horizontally&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Suppose that both objects have a method called &lt;code&gt;rotate&lt;/code&gt; but the parameters are two different ordered pairs of the same values. That is a disaster in the making.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;With the help of powerful IDEs, we now enjoy the convenience of having documentation of functions available as we write code. This may make recognizing what a function is doing or what each parameter means easier, but it should not be an encouragement to write bad functions. Also, if someone is already making a mess writing code, it may not be wise to trust his/her documentations, if there is any...&lt;/p&gt;

</description>
      <category>computerscience</category>
      <category>codequality</category>
      <category>codenewbie</category>
      <category>javascript</category>
    </item>
    <item>
      <title>TOP 5 .NET MAUI new features🏅</title>
      <author>Dotnetsafer</author>
      <pubDate>Fri, 23 Jul 2021 10:55:04 +0000</pubDate>
      <link>https://dev.to/dotnetsafer/top-5-net-maui-new-features-1mlb</link>
      <guid>https://dev.to/dotnetsafer/top-5-net-maui-new-features-1mlb</guid>
      <description>&lt;h2&gt;
  &lt;a href="#about-net-maui"&gt;
  &lt;/a&gt;
  🔄 About .NET MAUI
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Microsoft&lt;/em&gt; has already started publishing &lt;strong&gt;.NET MAUI&lt;/strong&gt; Previews these days. They show some exciting new features that will greatly reduce time and improve performance when programming.&lt;/p&gt;

&lt;p&gt;In case you don’t know what &lt;em&gt;.NET MAUI&lt;/em&gt; is, it’s the &lt;strong&gt;evolution&lt;/strong&gt; of &lt;strong&gt;Xamarin.Forms&lt;/strong&gt;, extended from mobile to desktop scenarios, with &lt;strong&gt;UI&lt;/strong&gt; controls rebuilt from scratch for performance and extensibility.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#possible-new-c-10-features"&gt;
  &lt;/a&gt;
  ✅ Possible new C# 10 features
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#net-hot-reload"&gt;
  &lt;/a&gt;
  🔼.NET Hot Reload
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;.NET Hot Reload&lt;/strong&gt; is a new feature, which according to &lt;em&gt;Microsoft&lt;/em&gt;, will allow you to make live edits to the source code of your &lt;em&gt;.NET MAUI&lt;/em&gt; application while it is running, &lt;strong&gt;reducing&lt;/strong&gt; the number of times you need to rebuild your application.&lt;/p&gt;

&lt;p&gt;They also tell us that in the next versions &lt;em&gt;.NET Hot Reload&lt;/em&gt; will also be available for &lt;strong&gt;Android&lt;/strong&gt;, &lt;strong&gt;iOS&lt;/strong&gt; and &lt;strong&gt;macOS&lt;/strong&gt;, and will also integrate &lt;em&gt;XAML Hot Reload&lt;/em&gt; and &lt;em&gt;Live Visual Tree&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ECz7w4hb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1362/1%2ARsAUPN10hT2HSJY8o1H3mw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ECz7w4hb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1362/1%2ARsAUPN10hT2HSJY8o1H3mw.png" alt=".NET MAUI features"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#blazorwebview"&gt;
  &lt;/a&gt;
  🔼BlazorWebView
&lt;/h3&gt;

&lt;p&gt;The &lt;strong&gt;new&lt;/strong&gt; &lt;em&gt;BlazorWebView&lt;/em&gt; lets you &lt;strong&gt;host&lt;/strong&gt; a Blazor web application &lt;strong&gt;directly&lt;/strong&gt; in your .NET MAUI application and take advantage of native platform functionality and user interface controls. The control can be added to &lt;strong&gt;any XAML page&lt;/strong&gt; and pointed to the root of the Blazor application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;BlazorWebView&lt;/span&gt;  
  &lt;span class="n"&gt;HostPage&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"wwwroot/index.html"&lt;/span&gt;  
  &lt;span class="n"&gt;Services&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"{StaticResource Services}"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;  
 &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;BlazorWebView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RootComponent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;  
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;RootComponent&lt;/span&gt;  
      &lt;span class="n"&gt;Selector&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#app"&lt;/span&gt;  
      &lt;span class="n"&gt;ComponentType&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"{x:Type local:Main}"&lt;/span&gt;  
    &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;  
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;BlazorWebView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RootComponent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;  
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;BlazorWebView&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#slim-processors"&gt;
  &lt;/a&gt;
  🔼Slim processors
&lt;/h3&gt;

&lt;p&gt;Also &lt;em&gt;.NET MAUI&lt;/em&gt; will have a function to &lt;strong&gt;migrate&lt;/strong&gt; a custom renderer from &lt;em&gt;Xamarin.Forms.&lt;/em&gt; Although these can be used with some compatibility package, &lt;em&gt;Microsoft&lt;/em&gt; claims that this will help the application to be much lighter and to develop it much more efficient.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;dotnet build -t:Run -f net6.0-android&lt;br&gt;&lt;br&gt;
dotnet build -t:Run -f net6.0-ios&lt;br&gt;&lt;br&gt;
dotnet build -t:Run -f net6.0-maccatalyst&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h3&gt;
  &lt;a href="#splash-screen"&gt;
  &lt;/a&gt;
  🔼Splash Screen
&lt;/h3&gt;

&lt;p&gt;On mobile platforms especially you want your &lt;strong&gt;first screen&lt;/strong&gt; to appear as &lt;strong&gt;quickly&lt;/strong&gt; as possible, and this is done by implementing a static splash screen. &lt;em&gt;.NET MAUI&lt;/em&gt; now has a single place to describe your splash screen for all platforms that support them.&lt;/p&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0ua8GE3R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1000/1%2A8it4VGa0x4ZtG9Swd2eq0g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0ua8GE3R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1000/1%2A8it4VGa0x4ZtG9Swd2eq0g.png" alt=".NET MAUI update"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#unification-of-libraries-in-net-maui"&gt;
  &lt;/a&gt;
  🔼Unification of libraries in .NET MAUI
&lt;/h3&gt;

&lt;p&gt;As &lt;em&gt;Microsoft&lt;/em&gt; tells us, &lt;em&gt;.NET MAUI&lt;/em&gt; will come with a &lt;strong&gt;unification&lt;/strong&gt; of critical libraries. You will provide several benefits by merging the &lt;em&gt;Xamarin.Essentials&lt;/em&gt; library into the &lt;em&gt;.NET MAUI&lt;/em&gt; so that with these, you can &lt;strong&gt;easily&lt;/strong&gt; use the device’s capabilities such as device sensors, photos, contacts, and many services that you use on a regular basis, such as authentication and secure storage.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-to-expect-from-this-in-the-future-on-maui"&gt;
  &lt;/a&gt;
  🤔 What to expect from this in the future on Maui?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;em&gt;.NET MAUI&lt;/em&gt; at the time managed to have &lt;strong&gt;feature-parity&lt;/strong&gt; (equality of characteristics) and achieve much &lt;strong&gt;better performance&lt;/strong&gt; (than it already has in itself) than it has today to develop &lt;strong&gt;Android&lt;/strong&gt; applications, &lt;strong&gt;iOS&lt;/strong&gt;, &lt;strong&gt;UWP&lt;/strong&gt; and other platforms.&lt;/li&gt;
&lt;li&gt;  In addition, we will not have to worry about having to implement complex &lt;em&gt;Handlers&lt;/em&gt; or the cross-platform appearance that we really need to do, which we would end up doing (if it were the case) at a native level using the same &lt;strong&gt;APIs&lt;/strong&gt; of the mobile platforms.&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#conclution"&gt;
  &lt;/a&gt;
  🟢 Conclution:
&lt;/h2&gt;

&lt;p&gt;.NET MAUI has only a few months left to go officially. The latest features mentioned by Microsoft in the Previews are very powerful. At the moment we still have a little left to have it and apparently it will greatly facilitate developers to program web, console or mobile applications.&lt;/p&gt;

&lt;p&gt;What do you think?🤔&lt;/p&gt;

</description>
      <category>csharp</category>
      <category>dotnet</category>
      <category>netcore</category>
      <category>netmaui</category>
    </item>
    <item>
      <title>Story of Pixel: How we made an off-the-shelf design system our own</title>
      <author>Ari Koponen</author>
      <pubDate>Fri, 23 Jul 2021 10:52:23 +0000</pubDate>
      <link>https://dev.to/supermetrics/story-of-pixel-how-we-made-an-off-the-shelf-design-system-our-own-3fnj</link>
      <guid>https://dev.to/supermetrics/story-of-pixel-how-we-made-an-off-the-shelf-design-system-our-own-3fnj</guid>
      <description>&lt;p&gt;&lt;em&gt;How we used a ready-made design system as the basis of our design system, Pixel, but made it our own.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h2&gt;

&lt;p&gt;Supermetrics has been doubling in size for the past five years. In the beginning, the product was just a single sidebar within Google docs, and most code was on the backend. UI possibilities and requirements were limited. Today, Supermetrics has multiple applications and around ten front-end developers working across five teams. For the company, great UX is among the most critical competitive advantages.&lt;/p&gt;

&lt;p&gt;The front-end applications have grown organically over the years. Because of the history, many UI components were not reusable. Styles were copy-pasted between applications. Despite SCSS variables and naming conventions, there were consistency issues with colors, spacing, and font sizes.&lt;/p&gt;

&lt;p&gt;Building the new design system was one of my most exciting projects while I was working at Supermetrics. I had joined the company last October, and one part of my job description was "redesigning our Team site with our Head of Design." The main business drivers for the redesign were that development was slow, the UI was inconsistent, and it was hard to support the new most important user flows. Previously, the UI was mainly used for license and team management and was structured around those needs. Now, users have more complex needs like configuring and monitoring data transfers. This requires a very different approach to the UI.&lt;/p&gt;

&lt;p&gt;Redesigning the Team site is a significant undertaking. It is Supermetrics' biggest custom UI written in React, TypeScript, and SCSS with hundreds of components and almost 100K lines of code. Redesigning it would also lead to updating the UIs of other applications to keep a consistent user experience across the product suite.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-goal"&gt;
  &lt;/a&gt;
  The Goal
&lt;/h2&gt;

&lt;p&gt;We started discussing with our Head of Design Ivana Pesic and some of the front-end developers what would be the best way for us to achieve our business goals: supporting the new flows, consistency across all our apps, and making development faster. One of the most promising ideas was to build a design system. This would allow us to have a central repository of UI components and assets together with accompanying guidelines and documentation.&lt;/p&gt;

&lt;p&gt;Our team was already somewhat familiar with the concept of design systems but wanted to make sure it was a worthwhile undertaking. We read about other companies' experiences and resources like Brad Frost’s &lt;a href="https://atomicdesign.bradfrost.com/"&gt;Atomic Design&lt;/a&gt; book to improve our understanding. These gave us further confidence that a design system could help us sustainably reach our goals. &lt;/p&gt;

&lt;p&gt;We set out to create a design system of our own with four goals in mind:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Consistently great UI.&lt;/strong&gt; Make sure all teams could create UIs that feel like they belong together.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Shared vocabulary.&lt;/strong&gt; Improve the communication between designers, developers, and other stakeholders in the company around designing and building UIs with great UX.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Educating people within the organization.&lt;/strong&gt; Raise the bar of our UI/UX design across the whole organization by giving people tools that help them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Improve speed of development.&lt;/strong&gt; Stop reinventing the wheel and copy-pasting when it is not useful.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#choosing-the-approach"&gt;
  &lt;/a&gt;
  Choosing the approach
&lt;/h2&gt;

&lt;p&gt;Once we knew why we were building a design system, it was time to decide how we'd do it. Should we build our design system from scratch or use an off-the-shelf solution? Building from scratch gives you more control and makes the design system reflect your company brand better. However, it is very time-consuming, and there are no real guarantees that the result is any better than using an off-the-shelf one. To make a decision, we needed to know what we needed.&lt;/p&gt;

&lt;p&gt;To gather design requirements, we:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Did a component inventory of all the components we'd need. &lt;/li&gt;
&lt;li&gt;Refreshed our brand book and style guide.&lt;/li&gt;
&lt;li&gt;Made some designs to have an idea of the overall design style.&lt;/li&gt;
&lt;li&gt;Researched many of the available options to have a general idea of what ready-made solutions were available.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On the technical side, we listed out the technical things we'd want to have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Strictly-typed TypeScript. For great auto-complete and type-safety.&lt;/li&gt;
&lt;li&gt;Maintainable CSS. For us, this meant: style-colocation, avoiding global scope, dead code elimination, and enforcing the design system styles, while still allowing one-off overrides.&lt;/li&gt;
&lt;li&gt;Themeability. We knew we wanted to change the colors and fonts of any ready-made solution and themeability means that our changes are much less likely to break.&lt;/li&gt;
&lt;li&gt;Tree-shakeability / ES modules. We knew all applications wouldn't use the whole design system, and we wanted the JavaScript bundle sizes to stay small for a great user experience.&lt;/li&gt;
&lt;li&gt;Copy-pasteable component code. If we would need to modify some of the components heavily, we wanted to make sure we could use the original component as the basis.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With these requirements in mind, we researched if any of the ready-made options would fit. In this process, UXPin's Adele was very helpful. We found multiple promising options and dug a little deeper into them. At first, none of them seemed to fit our requirements, and we seriously considered building everything from scratch or using a UI component library like Chakra UI and adding the rest ourselves. &lt;/p&gt;

&lt;p&gt;In the end, after much discussion and evaluation, we concluded Zendesk's Garden was the best fit for us in terms of technologies, default styles, and themeability. I sent the Garden documentation to some of our front-end developers for review, and all concluded that it looked good.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-the-design-system-our-own"&gt;
  &lt;/a&gt;
  Making the design system our own
&lt;/h2&gt;

&lt;p&gt;Although Zendesk's Garden matched our needs, we did not want just to copy their styles and call it a day. We gave the design system the name "Pixel" after our cute dog-mascot. We created a custom theme with our fonts, colors, shadows, and spacings. We also added some Supermetrics feel to the designs with small details like fully rounded buttons, SVG graphics, and hand-selected icons.&lt;/p&gt;

&lt;p&gt;Also, on the technical side, we did not want our apps to depend directly on Zendesk's packages that we had no control over. We created a separate, privately hosted NPM package for Pixel, where we individually import and export the components that we want to use from Zendesk's packages. In this way, we can get all bug fixes and new features from Zendesk's Garden simply by updating our dependencies while still distributing our customizations to our own apps in a controlled way. We can also replace any part of the design system without affecting the consuming apps. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--__MNNVfM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yu1qmlihbc1t67tqlhes.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--__MNNVfM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yu1qmlihbc1t67tqlhes.png" alt="Pixel in action in our license checkout flow."&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Pixel in action in our license checkout flow.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lessons-learned-from-building-on-top-of-a-readymade-design-system"&gt;
  &lt;/a&gt;
  Lessons learned from building on top of a ready-made design system
&lt;/h2&gt;

&lt;p&gt;As we expected, there are pros and cons to using a ready-made design system.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-pros"&gt;
  &lt;/a&gt;
  The pros
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Fast time to use.&lt;/strong&gt; The design system was used in three apps in less than six months from the start of the project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A great technical foundation.&lt;/strong&gt; The design system we chose had a ready-made Storybook and tests that we can use even when making changes to the components.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;More concrete discussion.&lt;/strong&gt; Our design discussions often start with the capabilities of the design system we're building on top of. This frames the discussion, allows us to find practical solutions faster, and helps us iterate in smaller steps.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-cons"&gt;
  &lt;/a&gt;
  The cons
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Unscheduled fundamental discussions.&lt;/strong&gt; With a ready-made design system, you skip important fundamental discussions. Our organization thinks differently about design than Zendesk. The differences often manifest themselves when we're designing and building a feature. Sometimes we've needed to start unexpectedly asking very fundamental questions about things like buttons and links or animations.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dirty overrides to the ready-made components.&lt;/strong&gt; We've aligned our designs to the limits of the ready-made design system as much as is feasible. Still, we have needed style overrides for, e.g., button variants. These overrides always feel a little bit hacky and may break at some point when the ready-made design system breaks.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#solutions"&gt;
  &lt;/a&gt;
  Solutions
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Accepting the trade-off we've made.&lt;/strong&gt; We knew we were taking UI/UX and technical design debt when we chose to speed up things with a ready-made solution. This debt has to be paid back, and sometimes this happens at inconvenient times. Mentally accepting this and being prepared when working on new features helps.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Using a separate NPM package.&lt;/strong&gt; We have mitigated most of the downsides of depending on an existing design system by our own private NPM Package. For example, we have already modified the Garden typography components heavily. We were able to copy-paste the original components to our package and modify them to our needs without making it feel hacky for consuming applications. We've also added a complete set of layout components inspired by SEEK's Braid design system, which we've built from scratch. For the consuming applications, there is no difference.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#future"&gt;
  &lt;/a&gt;
  Future
&lt;/h2&gt;

&lt;p&gt;In total, Pixel is now used in four different applications. The redesign of the Team site with Pixel has also begun, which makes the team super excited. The redesign will require many new UI components, some of which will belong to the design system and some which are application-specific.&lt;/p&gt;

&lt;p&gt;In its current state, Pixel is still more like a component library than a full-blown design system. The documentation around the thinking on design philosophy and copywriting guidelines still need to be polished. The work has only begun, but now there is a great place to iterate and improve on.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>design</category>
      <category>react</category>
    </item>
  </channel>
</rss>
