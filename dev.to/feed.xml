<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Asymptotic Notations</title>
      <author>Abhishek Chandra</author>
      <pubDate>Fri, 09 Jul 2021 16:24:37 +0000</pubDate>
      <link>https://dev.to/abhishekchandra2522k/asymptotic-notations-14nn</link>
      <guid>https://dev.to/abhishekchandra2522k/asymptotic-notations-14nn</guid>
      <description>&lt;p&gt;The objective of this article is to explain Analysis of Algorithms and Asymptotic Notations i.e. &lt;strong&gt;Big-O, Omega-Ω, and Theta-Θ.&lt;/strong&gt; These topics are the most basic foundation for Data Structures and Algorithms. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#analysis-of-algorithms"&gt;
  &lt;/a&gt;
  Analysis of Algorithms
&lt;/h2&gt;

&lt;p&gt;The idea of &lt;em&gt;analysis of algorithms&lt;/em&gt; is to compare algorithms mainly in terms of running time and space consumed. &lt;br&gt; For example,&lt;br&gt;
To go from city 'M' to city 'Z', there can be many ways to carry-out this task: by &lt;em&gt;flight&lt;/em&gt;, by &lt;em&gt;bus&lt;/em&gt;, by &lt;em&gt;train&lt;/em&gt; and also by &lt;em&gt;bicycle&lt;/em&gt;. Depending on the accessibility and convenience, we choose the one that suits us. Similarly, in computer science we have various algorithms available for solving a same problem, for example we can solve sorting problem by many algorithms like &lt;code&gt;selection-sort&lt;/code&gt;, &lt;code&gt;bubble-sort&lt;/code&gt;, &lt;code&gt;merge-sort&lt;/code&gt;  and &lt;em&gt;many more&lt;/em&gt; but we will choose the one with lesser complexity. (Best algorithm for sorting is &lt;code&gt;quick-sort&lt;/code&gt; with complexity &lt;code&gt;O(nlog(n))&lt;/code&gt; ) &lt;br&gt;&lt;br&gt;
This concludes that Analysis of Algorithm should be used in determining which method is more efficient and also which method is good in terms of time and space consumed.&lt;/p&gt;

&lt;p&gt;Prior to learning Asymptotic Notations, Let's see what is &lt;strong&gt;&lt;em&gt;rate of growth&lt;/em&gt;&lt;/strong&gt; of an algorithm.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rate of growth&lt;/strong&gt; is nothing but the rate at which the run time complexity of the algorithm increases as a function of the input.&lt;br&gt;&lt;br&gt;
Let's suppose we have to purchase a laptop and a mouse. If someone asks you what are you purchasing, then in general you will say buying a laptop and ignore buying the mouse part. This is because, cost of laptop is too big compared to cost of mouse. So, we can say&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Total Cost = cost_of_laptop + cost_of_mouse&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Total Cost ≈ cost_of_laptop (approximately)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For the above mentioned example, we can represent the cost of laptop and cost of mouse as a function and for a given function, we can ignore the lower order terms (that are relatively insignificant for large value of input size, n). Let us consider another example in terms of algebra, let n&lt;sup&gt;4&lt;/sup&gt;, n&lt;sup&gt;2&lt;/sup&gt;, 100n and 5 are individual costs of some function, here we can approximate this function to n&lt;sup&gt;4&lt;/sup&gt; i.e. the highest rate of growth.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;n&lt;sup&gt;4&lt;/sup&gt; + n&lt;sup&gt;2&lt;/sup&gt; + 100n + 5 ≈ n&lt;sup&gt;4&lt;/sup&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here's the list of most common rate of growths.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Time Complexity&lt;/th&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Constant&lt;/td&gt;
&lt;td&gt;accessing an array element&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;log(n)&lt;/td&gt;
&lt;td&gt;Logarithmic&lt;/td&gt;
&lt;td&gt;finding an element in a &lt;em&gt;sorted&lt;/em&gt; array&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;Linear&lt;/td&gt;
&lt;td&gt;finding an element in a &lt;em&gt;unsorted&lt;/em&gt; array&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;nlog(n)&lt;/td&gt;
&lt;td&gt;Linear Logarithmic&lt;/td&gt;
&lt;td&gt;sorting n items with &lt;em&gt;divide-and-conquer&lt;/em&gt; (Merge Sort)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;n&lt;sup&gt;2&lt;/sup&gt;
&lt;/td&gt;
&lt;td&gt;Quadratic&lt;/td&gt;
&lt;td&gt;shortest path between two nodes in a graph&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;n&lt;sup&gt;3&lt;/sup&gt;
&lt;/td&gt;
&lt;td&gt;Cubic&lt;/td&gt;
&lt;td&gt;matrix multiplication&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;sup&gt;n&lt;/sup&gt;
&lt;/td&gt;
&lt;td&gt;Exponential&lt;/td&gt;
&lt;td&gt;tower of hanoi problem&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Before going to Asymptotic Notations, We also need to know about Types Of Analysis.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#types-of-analysis"&gt;
  &lt;/a&gt;
  Types of Analysis
&lt;/h3&gt;

&lt;p&gt;If we have to analyse an algorithm, we need to know on what inputs the algorithm takes less time, and on what inputs the algorithm is taking more time. That means we can represent algorithms with multiple expressions: one for the case where it takes &lt;em&gt;less time&lt;/em&gt; and other for the case where it takes &lt;em&gt;more time&lt;/em&gt;. &lt;br&gt;&lt;br&gt;
In general, when the algorithm takes less time it is called as the &lt;strong&gt;&lt;em&gt;best case&lt;/em&gt;&lt;/strong&gt; and when the algorithm takes more time than it is called as the &lt;strong&gt;&lt;em&gt;worst case&lt;/em&gt;&lt;/strong&gt;. &lt;br&gt;
To analyse an algorithm we need some kind of syntax and that forms the base for asymptotic analysis / notation. &lt;br&gt;
There are three types of analysis:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Worst Case&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;defines the input for which algorithm takes longest time to execute.&lt;/li&gt;
&lt;li&gt;algorithm runs slower.&lt;/li&gt;
&lt;li&gt;algorithm which executes maximum number of steps on input data of size n.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Best Case&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;defines the input for which algorithm takes lowest time to execute.&lt;/li&gt;
&lt;li&gt;algorithm runs fastest.&lt;/li&gt;
&lt;li&gt;algorithm which executes least number of steps on input data of size n.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Average Case&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;provides a prediction about the running time of the algorithm.&lt;/li&gt;
&lt;li&gt;assumes that the input is random.&lt;/li&gt;
&lt;li&gt;algorithm which performs average number of steps on input data of size n.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;Lower Bound &amp;lt;= Average Time &amp;lt;= Upper Bound&lt;/code&gt;&lt;/p&gt;



&lt;h1&gt;
  &lt;a href="#asymptotic-notations"&gt;
  &lt;/a&gt;
  Asymptotic Notations
&lt;/h1&gt;

&lt;p&gt;Asymptotic Notations is having an expressions for the best, average and worst cases, for all the three cases we need to identify the upper and lower bounds. To represent these upper and lower bounds we need some kind of syntax and that is the following discussion. Let us assume that for a given algorithm, it can be represented in the form of function &lt;em&gt;f(n)&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#big-o-notation-"&gt;
  &lt;/a&gt;
  Big - O Notation :
&lt;/h2&gt;

&lt;p&gt;This notation gives the &lt;strong&gt;&lt;em&gt;tight upper bound&lt;/em&gt;&lt;/strong&gt; of the given algorithm / function &lt;em&gt;f(n)&lt;/em&gt;. It is represented as &lt;/p&gt;

&lt;p&gt;&lt;code&gt;f(n) = O(g(n))&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It means, for larger values of n, the &lt;em&gt;upper bound&lt;/em&gt; of function &lt;em&gt;f(n)&lt;/em&gt; is a function &lt;em&gt;g(n)&lt;/em&gt;. &lt;br&gt;&lt;br&gt;
Here &lt;em&gt;upper bound&lt;/em&gt; means, value of f(n) cannot exceed g(n) after a particular value of n. (represented as n0 in the graphical approach). &lt;br&gt;&lt;br&gt;
Let's see this with a graphical approach.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8rnxIn-U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625574434388/c5xYTEjgFV.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8rnxIn-U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625574434388/c5xYTEjgFV.jpeg" alt="asymptotic_notations-1.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After &lt;em&gt;n = n0&lt;/em&gt;, value of g(n) is always greater than or equal to the given algorithm's rate of growth f(n). &lt;/p&gt;

&lt;p&gt;Also, for example, if &lt;em&gt;f(n)&lt;/em&gt; = n&lt;sup&gt;4&lt;/sup&gt; + 100n + 50 is the given algorithm, then n&lt;sup&gt;4&lt;/sup&gt; is &lt;em&gt;g(n)&lt;/em&gt;. That means, &lt;em&gt;g(n) = n&lt;sup&gt;4&lt;/sup&gt;&lt;/em&gt; gives the maximum rate of growth for &lt;em&gt;f(n)&lt;/em&gt; at larger values of n. &lt;/p&gt;

&lt;p&gt;O-Notation can be also be defined as &lt;strong&gt;O(g(n))&lt;/strong&gt; = { &lt;strong&gt;f(n)&lt;/strong&gt; : there exists positive constant c and n0 such that &lt;code&gt;0 ≤ f(n) ≤ cg(n)&lt;/code&gt; for all  n ≥ n0 }. &lt;/p&gt;

&lt;p&gt;Our objective is to get smallest rate of growth g(n) which is greater than or equal to f(n)'s rate of growth.&lt;br&gt;&lt;br&gt;
Generally we discard lower values of n. That means the rate of growth at lower values of n is not important. In the graph, n0 is the point from which we need to consider the rate of growths for a given algorithm. Below n0 the rate of growths could be different.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#some-big-o-examples"&gt;
  &lt;/a&gt;
  Some Big - O Examples:
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;f(n) = n&lt;sup&gt;2&lt;/sup&gt; + 1&lt;/strong&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;n&lt;sup&gt;2&lt;/sup&gt; + 1 ≤ 2n&lt;sup&gt;2&lt;/sup&gt;, for all n ≥ 1&lt;/p&gt;

&lt;p&gt;Therefore, n&lt;sup&gt;2&lt;/sup&gt; + 1 = O(n&lt;sup&gt;2&lt;/sup&gt;), with c = 2 and n0 = 1&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;f(n) = 2n&lt;sup&gt;3&lt;/sup&gt; - 2n&lt;sup&gt;2&lt;/sup&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;2n&lt;sup&gt;3&lt;/sup&gt; - 2n&lt;sup&gt;2&lt;/sup&gt; ≤ 2n&lt;sup&gt;3&lt;/sup&gt;, for all n ≥ 1&lt;/p&gt;

&lt;p&gt;Therefore, 2n&lt;sup&gt;3&lt;/sup&gt; - 2n&lt;sup&gt;2&lt;/sup&gt; = O(2n&lt;sup&gt;3&lt;/sup&gt;), with c = 2 and n0 = 1&lt;/p&gt;

&lt;p&gt;There is one more thing related to values of n0 and c, that is, there is no isolated set of values for n0 and c in finding the asymptotic bounds. Let us see an example, &lt;br&gt;
100n + 5 = O(n). For this function, there can be multiple values for n0 and c, giving us an asymptotic solution / bound.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution 1&lt;/strong&gt;: 100n + 5 ≤ 100n + n = 101n, for all n ≥ 5, n0 = 5 and c = 101. &lt;br&gt;&lt;br&gt;
&lt;strong&gt;Solution 2&lt;/strong&gt;: 100n + 5 ≤ 100n + 5n = 105n, for all n ≥ 1, n0 = 1 and c = 105.&lt;/p&gt;

&lt;p&gt;Both possibilities are correct.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note :&lt;/strong&gt; Most of the time we are interested in knowing the Big - O Notation i.e. Tight Upper Bound of an algorithm because it allows us to estimate weather an algorithm is feasible for our application or not, by telling us that this algorithm will not take more than such-and-such amount of memory or time when run on an input of size n. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#omega-%CF%89-notation-"&gt;
  &lt;/a&gt;
  Omega - Ω Notation :
&lt;/h2&gt;

&lt;p&gt;This notation gives the &lt;strong&gt;&lt;em&gt;tight lower bound&lt;/em&gt;&lt;/strong&gt; of the given algorithm / function &lt;em&gt;f(n)&lt;/em&gt;. We can represent it as &lt;/p&gt;

&lt;p&gt;&lt;code&gt;f(n) = Ω(g(n))&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It means, for larger values of n, g(n) is the &lt;em&gt;lower bound&lt;/em&gt; of function f(n). &lt;br&gt;&lt;br&gt;
Here &lt;em&gt;lower bound&lt;/em&gt; means, rate of growth of &lt;em&gt;f(n)&lt;/em&gt; is always greater than or equal to the rate of growth of function &lt;em&gt;g(n)&lt;/em&gt; after a particular value of n i.e. n0. &lt;br&gt;&lt;br&gt;
Let's see this with a graphical approach.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SpcKJjGp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625827947954/nqxScttcq.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SpcKJjGp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625827947954/nqxScttcq.jpeg" alt="asymptotic_notations-2.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After n = n0, value of g(n) is always smaller than or equal to the given algorithm's rate of growth f(n). &lt;/p&gt;

&lt;p&gt;Ω Notation can also be defined as &lt;strong&gt;Ω(g(n))&lt;/strong&gt; = { &lt;strong&gt;f(n)&lt;/strong&gt; : there exists positive constants n0 and c such that* &lt;code&gt;0 ≤ cg(n) ≤ f(n)&lt;/code&gt; * for all n ≥ n0 }. &lt;/p&gt;

&lt;p&gt;Here, our objective is to get largest rate of growth g(n) which is less than or equal to f(n)'s rate of growth. g(n) is asymptotic lower bound for the given algorithm's rate of growth f(n).&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#some-%CF%89-examples-"&gt;
  &lt;/a&gt;
  Some Ω Examples :
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;f(n) = 5n&lt;sup&gt;2&lt;/sup&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;∃ (there exists) c, n0, such that: 0 ≤ cn ≤ 5n&lt;sup&gt;2&lt;/sup&gt;  =&amp;gt; c = 1 and n0 = 1&lt;/p&gt;

&lt;p&gt;Therefore, 5n&lt;sup&gt;2&lt;/sup&gt; = Ω(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;2n = Ω(n), n&lt;sup&gt;3&lt;/sup&gt; = Ω(n&lt;sup&gt;3&lt;/sup&gt;), logn = Ω(logn)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;*&lt;em&gt;Note : *&lt;/em&gt;  Lower bounds are of great use as well. Lower bounds can give information about whether we can improve our algorithm or is it feasible. We can also know that our algorithm is optimal, if our lower bound is equal to the upper bound. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#theta-%CE%B8-notation-"&gt;
  &lt;/a&gt;
  Theta - Θ Notation :
&lt;/h2&gt;

&lt;p&gt;This notation gives a range of upper bound and lower bound and determines whether the upper bound and lower bound of the given algorithm are same. The average running time of an algorithm is always between the &lt;strong&gt;lower bound&lt;/strong&gt; (&lt;em&gt;Omega - Ω&lt;/em&gt;) and &lt;strong&gt;upper bound&lt;/strong&gt; (&lt;em&gt;Big - O&lt;/em&gt;) of the function. If the upper bound and lower bound of a function gives the same result (rate of growth) then Theta - Θ will also have the same rate of growth. &lt;/p&gt;

&lt;p&gt;For example, assume f(n) = 10n + n, then its tight upper bound is O(n) and the lower bound is Ω(n). &lt;br&gt;
In this case, rate of growths in the best case and worst case are same. As a result, the average case will also be the same. &lt;br&gt;
If for a given algorithm, the rate of growths O and Ω are not same then the rate of growth for Θ may not be same. In this case, we have to consider all possible time complexities and take average of those. (for example, &lt;em&gt;quick sort&lt;/em&gt; average case gives Θ(nlogn) complexity)&lt;/p&gt;

&lt;p&gt;Let us also see this in a graphical approach.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n-zjK8K6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625828191290/0lp6yHxKk.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n-zjK8K6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625828191290/0lp6yHxKk.jpeg" alt="asymptotic_notations-3.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After n = n0, the value of f(n) is always between c2g(n) and c1g(n). &lt;/p&gt;

&lt;p&gt;Θ Notation can also be defined as &lt;strong&gt;Θ(g(n))&lt;/strong&gt; = { &lt;strong&gt;f(n)&lt;/strong&gt; : there exists positive constants c1, c2, and n0 such that*  0 ≤ c1g(n) ≤ f(n) ≤ c2g(n) , for all n ≥ n0 }. g(n) is an asymptotic tight bound for f(n).&lt;/p&gt;

&lt;p&gt;Θ(g(n)) is a set of functions with same order of growth as g(n).&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#some-%CE%B8-examples"&gt;
  &lt;/a&gt;
  Some Θ Examples:
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Prove n ≠ Θ(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;c1n&lt;sup&gt;2&lt;/sup&gt; ≤ n ≤  c2n&lt;sup&gt;2&lt;/sup&gt;, only holds for n ≤ 1 / &lt;br&gt;
 c1&lt;/p&gt;

&lt;p&gt;Therefore, n ≠ Θ(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Prove 6n&lt;sup&gt;3&lt;/sup&gt; ≠ Θ(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/strong&gt;
c1n&lt;sup&gt;2&lt;/sup&gt; ≤ 6n&lt;sup&gt;3&lt;/sup&gt; ≤  c2n&lt;sup&gt;2&lt;/sup&gt;, only holds for n ≤ c2 / 6&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Therefore, 6n&lt;sup&gt;3&lt;/sup&gt; ≠ Θ(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#why-is-it-called-asymptotic-notations"&gt;
  &lt;/a&gt;
  Why is it called Asymptotic Notations?
&lt;/h4&gt;

&lt;p&gt;For all the three notations, O, Ω, Θ, in every case for a given function f(n) we are trying to find other function g(n) which approximates f(n) at large values of n. That means, g(n) is also a &lt;em&gt;curve&lt;/em&gt; which approximates f(n) at large values of n. &lt;/p&gt;

&lt;p&gt;In mathematics, we call such curves as &lt;strong&gt;asymptotic curves&lt;/strong&gt;. In other terms, g(n) is the asymptotic curve for f(n). For this reason, we call algorithm analysis as &lt;strong&gt;asymptotic analysis&lt;/strong&gt; and notations as &lt;strong&gt;asymptotic notations&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#properties-of-notations"&gt;
  &lt;/a&gt;
  Properties of Notations:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Transitivity&lt;/strong&gt; : f(n) = Θ(g(n)) and g(n) = Θ(h(n)), then f(n) = Θ(h(n)). Valid for O and Ω as well.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Reflexivity&lt;/strong&gt; : f(n) = Θ(f(n)). Valid for O and Ω as well.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Symmetry&lt;/strong&gt; : f(n) = Θ(g(n)) if and only if g(n) = Θ(f(n)).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Transpose symmetry&lt;/strong&gt; : f(n) = O(g(n)) if and only if g(n) = Ω(f(n)).&lt;/li&gt;
&lt;/ul&gt;



&lt;h1&gt;
  &lt;a href="#bonus-"&gt;
  &lt;/a&gt;
  Bonus :
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#master-theorem-for-divide-and-conquer"&gt;
  &lt;/a&gt;
  Master Theorem for Divide and Conquer
&lt;/h3&gt;

&lt;p&gt;All divide and conquer algorithms works by dividing the problem into sub-problems, each of which is part of the original problem and then we perform some additional work to compute the final answer. As an example, &lt;em&gt;merge sort&lt;/em&gt; algorithm operates on two sub problems, each of which is half the size of the original problem and then performs O(n) additional work for merging the sub-problems.&lt;/p&gt;

&lt;p&gt;This gives the running time of the equation : &lt;/p&gt;

&lt;p&gt;&lt;code&gt;T(n) = 2T(n / 2) + O(n)&lt;/code&gt;  &lt;/p&gt;

&lt;p&gt;Master theorem can be used to determine the running time of divide and conquer algorithms. For a given algorithm, first we try to find the recurrence relation of the problem. If the recurrence relation is of the below form then we can directly give the answer without fully solving it. &lt;/p&gt;

&lt;p&gt;If the recurrence relation is of the form, ** T(n) = aT(n / b) + Θ(n&lt;sup&gt;k&lt;/sup&gt;log&lt;sup&gt;p&lt;/sup&gt;n)**, where a ≥ 1, b &amp;gt; 1, k ≥ 0 and p is a real number, then:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;If a &amp;gt; b&lt;sup&gt;k&lt;/sup&gt;, then T(n) = Θ(n&lt;sup&gt;log&lt;sup&gt;a&lt;/sup&gt;b&lt;/sup&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If a = b&lt;sup&gt;k&lt;/sup&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;If p &amp;gt; -1, then T(n) = Θ(n&lt;sup&gt;log&lt;sup&gt;a&lt;/sup&gt;b&lt;/sup&gt;log&lt;sup&gt;p+1&lt;/sup&gt;n).
&lt;/li&gt;
&lt;li&gt;If p = -1, then T(n) = Θ(n&lt;sup&gt;log&lt;sup&gt;a&lt;/sup&gt;b&lt;/sup&gt;loglogn).
&lt;/li&gt;
&lt;li&gt;If p &amp;lt; -1, then T(n) = Θ(n&lt;sup&gt;log&lt;sup&gt;a&lt;/sup&gt;b&lt;/sup&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;If a &amp;lt; b&lt;sup&gt;k&lt;/sup&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;If p ≥ 0, then T(n) = Θ(n&lt;sup&gt;k&lt;/sup&gt;log&lt;sup&gt;p&lt;/sup&gt;n) 
&lt;/li&gt;
&lt;li&gt;If p &amp;lt; 0, then T(n) = O(n&lt;sup&gt;k&lt;/sup&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank You!&lt;/p&gt;

</description>
      <category>algorithms</category>
    </item>
    <item>
      <title>Announcing a New Free Curriculum: IoT for Beginners</title>
      <author>Jim Bennett ☁️</author>
      <pubDate>Fri, 09 Jul 2021 16:22:23 +0000</pubDate>
      <link>https://dev.to/azure/announcing-a-new-free-curriculum-iot-for-beginners-5ca2</link>
      <guid>https://dev.to/azure/announcing-a-new-free-curriculum-iot-for-beginners-5ca2</guid>
      <description>&lt;p&gt;It is our very great pleasure to announce the release of a new, free, MIT-licensed open-source curriculum all about the Internet of Things: &lt;a href="https://aka.ms/iot-beginners"&gt;IoT for Beginners&lt;/a&gt;. Brought to you by a team of Azure Cloud Advocates, Program Managers, and &lt;a href="https://studentambassadors.microsoft.com/?WT.mc_id=academic-17441-jabenn"&gt;Microsoft Learn Student Ambassadors&lt;/a&gt;, we hope to empower students of all ages to learn the basics of IoT. Presuming no knowledge of IoT, we offer a free 12-week, 24-lesson curriculum to help you dive into this amazing field.&lt;/p&gt;

&lt;p&gt;If you liked our first two curricula, &lt;a href="https://aka.ms/webdev-beginners"&gt;Web Dev for Beginners&lt;/a&gt; and &lt;a href="https://aka.ms/ml-beginners"&gt;Machine Learning for beginners&lt;/a&gt;, you will love IoT for Beginners!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#join-us-on-the-journey-of-your-food-from-farm-to-table"&gt;
  &lt;/a&gt;
  Join us on the journey of your food, from farm to table!
&lt;/h2&gt;

&lt;p&gt;🌽 Join us as we take the same journey as your food as it travels from farm to table, taking advantage of IoT on the way to improve farming, transport, manufacturing and food processing, retail and smart homes. 🌽&lt;/p&gt;

&lt;p&gt;Our curricula are structured with a modified Project-Based pedagogy and include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a pre-lesson warmup quiz&lt;/li&gt;
&lt;li&gt;a written lesson&lt;/li&gt;
&lt;li&gt;video&lt;/li&gt;
&lt;li&gt;knowledge checks&lt;/li&gt;
&lt;li&gt;a project to build&lt;/li&gt;
&lt;li&gt;infographics, sketchnotes, and visuals&lt;/li&gt;
&lt;li&gt;a challenge&lt;/li&gt;
&lt;li&gt;an assignment&lt;/li&gt;
&lt;li&gt;a post-lesson quiz&lt;/li&gt;
&lt;li&gt;opportunities to deepen your knowledge on Microsoft Learn&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-will-you-learn"&gt;
  &lt;/a&gt;
  What will you learn?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t3vLiXhq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sh8zwiv1ikfycaiz9ce0.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t3vLiXhq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sh8zwiv1ikfycaiz9ce0.jpg" alt="A roadmap of the lessons"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The lessons are grouped so that you can deep-dive into use cases of IoT. We start with an introduction to IoT, covering devices, sensors, actuators and cloud connectivity, where you will build an internet connected version of the "Hello world" of IoT, an LED. We then move on to farming, learning about digital agriculture and feedback loops to control automated watering systems. Your food then leaves the farm on trucks, and you learn how to track vehicles using GPS, visualize their journeys and get alerts when a truck approaches a processing plant. Once in the plant, we move to AIoT, learning how to distinguish between ripe and unripe fruit using AI models running from IoT devices and on the edge. Next we move to the supermarket, using IoT to manage stock levels. Finally we take the food home to cook, and learn about consumer smart devices, building a voice controlled smart timer that can even speak multiple languages.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hardware"&gt;
  &lt;/a&gt;
  Hardware
&lt;/h2&gt;

&lt;p&gt;The hard part (pun intended) for IoT is hardware, so we've designed this curriculum to be as accessible as possible. We want you to Learn IoT, not learn how to solder, know how to read resistor color codes, or know what a microfarad is, so we've made hardware choices to make things easier.&lt;/p&gt;

&lt;p&gt;You can choose to learn using microcontrollers using Arduino with a &lt;a href="https://www.seeedstudio.com/Wio-Terminal-p-4509.html"&gt;Wio Terminal&lt;/a&gt;, or single board computers using a &lt;a href="https://www.raspberrypi.org/products/raspberry-pi-4-model-b/"&gt;Raspberry Pi&lt;/a&gt;. We've also added a virtual hardware option so you can learn without having to purchase anything!&lt;/p&gt;

&lt;p&gt;For sensors and actuators, we've gone with the &lt;a href="https://www.seeedstudio.com/category/Grove-c-1003.html"&gt;Grove kit&lt;/a&gt; from &lt;a href="https://www.seeedstudio.com"&gt;Seeed Studio&lt;/a&gt;, with easy to connect sensors and actuators.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5BPFTGCk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/72a2qbz99w152787ihnk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5BPFTGCk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/72a2qbz99w152787ihnk.png" alt="The Seeed studio logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our friends at Seeed have made it easy to buy the hardware, with packages containing all of the kit you need.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.seeedstudio.com/IoT-for-beginners-with-Seeed-and-Microsoft-Wio-Terminal-Starter-Kit-p-5006.html"&gt;IoT for beginners with Seeed and Microsoft - Wio Terminal Starter Kit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.seeedstudio.com/IoT-for-beginners-with-Seeed-and-Microsoft-Raspberry-Pi-Starter-Kit.html"&gt;IoT for beginners with Seeed and Microsoft - Raspberry Pi 4 Starter Kit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are interested in learning using virtual hardware, you can write IoT code locally as if you were using a Raspberry Pi, then simulate sensors and actuators using &lt;a href="https://github.com/CounterFit-IoT"&gt;CounterFit&lt;/a&gt;, a free, open source tool for simulating hardware.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-sneak-peek"&gt;
  &lt;/a&gt;
  A sneak peek
&lt;/h2&gt;

&lt;p&gt;This curriculum is filled with a lot of art, created by our team. Take a look at this cool sketchnote created by &lt;a class="mentioned-user" href="https://dev.to/nitya"&gt;@nitya&lt;/a&gt;
.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jFmwlXZB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1hyb1avye1l5w92kx5q8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jFmwlXZB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1hyb1avye1l5w92kx5q8.png" alt="A sketch note visualizing lesson 1 of the curriculum"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#without-further-ado-please-meet-iot-for-beginners-a-curriculum"&gt;
  &lt;/a&gt;
  Without further ado, please meet &lt;a href="https://aka.ms/iot-beginners"&gt;IoT For Beginners: A Curriculum&lt;/a&gt;!
&lt;/h2&gt;

</description>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>iot</category>
      <category>python</category>
    </item>
    <item>
      <title>Itty Bitty</title>
      <author>Siddharth</author>
      <pubDate>Fri, 09 Jul 2021 16:15:40 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/itty-bitty-328f</link>
      <guid>https://dev.to/siddharthshyniben/itty-bitty-328f</guid>
      <description>&lt;p&gt;This is one of the strangest ideas I've ever seen in a while. Nicholas Jitkoff has made a tool called &lt;a href="https://itty.bitty.site/"&gt;itty.bitty&lt;/a&gt; that creates websites with all of the assets being contained within their own link. You can create a website without any HTML or CSS resources at all because it’s all been encoded into the URL itself.&lt;/p&gt;

&lt;p&gt;For example: take a look at this humongous link:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;https://itty.bitty.site/#About/XQAAAAI9BwAAAAAAAAAeHMqHyTY4PyKmqfkwr6ooCXSIMxPQ7ojYR153HqZD3W+keVdvwyoyd+luwncAksvskG/my97qDaUEyfDGB0QDbdURMwS0L90o5EpQ7O+BMmWrcB7fs71TJEJv1I/T/JfksoiYu9CqkeO/3MjEVGWv6XhfDjWJZ9laLARogtAZtwl7FltrwO/ppSfgeKOjxCxTNdUQH9WBM3de22qOzClzeZaSsSM+/ETbHBIHe1Qc+UF7PDfY470lZNjQg3wfOam9KudUiHOOQD3Kn8FLfaae0lmdK4VHRgxpDtL1nExkdF+pzNQAIyktIv3dQUPDKhGJ61c+WBTNP6NI5AvZ0uFT+Mc2oG0mMUwwuupCrjTxxpYv3l4L3W5lBXqWDjEH+cL8VZc6xz4WwIMG5J9jaQTv1SSxJ1dLg2Z2F7iNQ0fCFI74yeqBM1koHGbscBj4GpwWuA7y/fMCu3sEzcwefjBOuUwDdDfsdxqQLnjywtBxR5qHmngo/agjHyILkZxU8IiTgJeSbjcEOWdiVxcb9tEdtZ7eDwWQcwMsQdU9A9sCnargxl1IdVsbB9dfcFTQL8OpvjdqnmFZZJ6n2cKr51FonrcrMjm68aS4Lemk+D4sRaHnN+O5BrF10BiSfjumSkvhZ0Uwu/tR35LSmtC1UmVPgRNMwWkSHZjfjEdqueqhYglmB7nHQ8TDWCTb7lJLtTdhx1btg7UWsAuNIhffUpBo+T+3oh8sg8c41WaX5JaNL19UkD2M0qFd8Sayfr0qeGXnrLrKkS0t56ckjui2rTTmUDKFup4CnEtE7fu6nGYeGSoCwGoRlYQD/SU1/GSIWfs8hSpK3KeSZgUQXk14b7dh2LaqrVKGJLja/hFcQCt2gdGD+Ml+iH+Cy0lqj3D32RSarS3k4mJyTKsGnETyXVlCbJtC7kiZ/gZ7i8ChR2hL1qWb7ZInxaHN7WVbsLxZmEIp0Bf+we6YCbg0JrLMoTqXqfx7lb4bGgIRzD4Kz+U9pve9VS4eU4c7JKX6XVLqg56dRO7Kw8MVipjdSANC/f54eQJ+YfB3RYT4eih7PAmHp62d8GiCJABN36B6oiENrnHkBvFu9JPTwo6BStvfP+fZEKFoxaKO3f78thxD7GZdMp0PLwZagS3G6TDAdY1nwSqtQC0G/9GR+VUHkDi2Mz5yxc/r8tfic+7p22WjmOGSge8joCeO7y5NARFillrggokK5I9rjSYy/pnNrfHBbORUL1ZCBf4FrD4=&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And a &lt;a href="https://itty.bitty.site/#About/XQAAAAI9BwAAAAAAAAAeHMqHyTY4PyKmqfkwr6ooCXSIMxPQ7ojYR153HqZD3W+keVdvwyoyd+luwncAksvskG/my97qDaUEyfDGB0QDbdURMwS0L90o5EpQ7O+BMmWrcB7fs71TJEJv1I/T/JfksoiYu9CqkeO/3MjEVGWv6XhfDjWJZ9laLARogtAZtwl7FltrwO/ppSfgeKOjxCxTNdUQH9WBM3de22qOzClzeZaSsSM+/ETbHBIHe1Qc+UF7PDfY470lZNjQg3wfOam9KudUiHOOQD3Kn8FLfaae0lmdK4VHRgxpDtL1nExkdF+pzNQAIyktIv3dQUPDKhGJ61c+WBTNP6NI5AvZ0uFT+Mc2oG0mMUwwuupCrjTxxpYv3l4L3W5lBXqWDjEH+cL8VZc6xz4WwIMG5J9jaQTv1SSxJ1dLg2Z2F7iNQ0fCFI74yeqBM1koHGbscBj4GpwWuA7y/fMCu3sEzcwefjBOuUwDdDfsdxqQLnjywtBxR5qHmngo/agjHyILkZxU8IiTgJeSbjcEOWdiVxcb9tEdtZ7eDwWQcwMsQdU9A9sCnargxl1IdVsbB9dfcFTQL8OpvjdqnmFZZJ6n2cKr51FonrcrMjm68aS4Lemk+D4sRaHnN+O5BrF10BiSfjumSkvhZ0Uwu/tR35LSmtC1UmVPgRNMwWkSHZjfjEdqueqhYglmB7nHQ8TDWCTb7lJLtTdhx1btg7UWsAuNIhffUpBo+T+3oh8sg8c41WaX5JaNL19UkD2M0qFd8Sayfr0qeGXnrLrKkS0t56ckjui2rTTmUDKFup4CnEtE7fu6nGYeGSoCwGoRlYQD/SU1/GSIWfs8hSpK3KeSZgUQXk14b7dh2LaqrVKGJLja/hFcQCt2gdGD+Ml+iH+Cy0lqj3D32RSarS3k4mJyTKsGnETyXVlCbJtC7kiZ/gZ7i8ChR2hL1qWb7ZInxaHN7WVbsLxZmEIp0Bf+we6YCbg0JrLMoTqXqfx7lb4bGgIRzD4Kz+U9pve9VS4eU4c7JKX6XVLqg56dRO7Kw8MVipjdSANC/f54eQJ+YfB3RYT4eih7PAmHp62d8GiCJABN36B6oiENrnHkBvFu9JPTwo6BStvfP+fZEKFoxaKO3f78thxD7GZdMp0PLwZagS3G6TDAdY1nwSqtQC0G/9GR+VUHkDi2Mz5yxc/r8tfic+7p22WjmOGSge8joCeO7y5NARFillrggokK5I9rjSYy/pnNrfHBbORUL1ZCBf4FrD4="&gt;clickable version&lt;/a&gt; If you like&lt;/p&gt;

&lt;p&gt;This link contains all of the HTML and CSS to be contained in the site. It's an awesome idea, so why don't you make your own &lt;a href="//itty.bitty.site"&gt;itty bitty site&lt;/a&gt;?&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Amazing Music Card Using HTML &amp; CSS</title>
      <author>Nikhil Bobade </author>
      <pubDate>Fri, 09 Jul 2021 16:05:29 +0000</pubDate>
      <link>https://dev.to/nikhil27b/amazing-music-card-using-html-css-2o1d</link>
      <guid>https://dev.to/nikhil27b/amazing-music-card-using-html-css-2o1d</guid>
      <description>&lt;p&gt;Hello Guys,&lt;/p&gt;

&lt;p&gt;Today I created a Amazing Music Card Using HTML &amp;amp; CSS. this simple music card using gradient colors and flex also I added font awesome icons to create the controls also added some box-shadow for image. I hope you like this also comments about your thoughts.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/nikhil27b" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L13Hplw---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--DVAuMQ0j--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/481802/ff897af1-c333-4e04-8f08-d6d1356a1c14.jpeg" alt="nikhil27b"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/nikhil27b/glassmorphism-sign-in-form-using-html-css-3a2a" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Glassmorphism Sign In Form Using HTML &amp;amp; CSS&lt;/h2&gt;
      &lt;h3&gt;Nikhil Bobade  ・ Jul 6 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;For more content follow me on Instagram  &lt;a href="https://www.instagram.com/developer_nikhil27/"&gt;@developer_nikhil27&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/NikhilBobade/embed/WNjxqKQ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Amazon SSM Agent - Risk Of Security</title>
      <author>Vu Dao</author>
      <pubDate>Fri, 09 Jul 2021 15:50:53 +0000</pubDate>
      <link>https://dev.to/awscommunity-asean/amazon-ssm-agent-risk-of-security-4bij</link>
      <guid>https://dev.to/awscommunity-asean/amazon-ssm-agent-risk-of-security-4bij</guid>
      <description>&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#What-is-AWS-SSM-Agent?"&gt;What is AWS SSM Agent?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Understand-Amazon-SSM-Agent-In-2-Minutes"&gt;Understand Amazon SSM Agent In 2 Minutes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#How-is-the-security-risk?"&gt;How is the security risk?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Solution"&gt;Solution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-Conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#what-is-aws-ssm-agent"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;What is AWS SSM Agent?&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/ssm-agent.html"&gt;AWS Systems Manager Agent&lt;/a&gt; (SSM Agent) is Amazon software that can be installed and configured on an EC2 instance, an on-premises server, or a virtual machine (VM). SSM Agent makes it possible for Systems Manager to update, manage, and configure these resources. The agent processes requests from the Systems Manager service in the AWS Cloud, and then runs them as specified in the request. SSM Agent then sends status and execution information back to the Systems Manager service by using the Amazon Message Delivery Service (service prefix: ec2messages).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#understand-amazon-ssm-agent-in-2-minutes"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;Understand Amazon SSM Agent In 2 Minutes&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;In order to provide access to an EC2 through SSM (from console or AWS CLI), we need to install SSM agent on it (as default) and then provide IAM policy to the EC2 so that the SSM Agent service inside the EC2 has permission to get the EC2 information, SSM documents&lt;/li&gt;
&lt;li&gt;Reference to &lt;a href="https://dev.to/vumdao/understand-amazon-ssm-agent-in-2-minutes-1363"&gt;Understand Amazon SSM Agent In 2 Minutes&lt;/a&gt; for more detail&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-is-the-security-risk"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;How is the security risk?&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;We often attach following IAM policy to the EC2 to enable SSH access from Session Manager
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "AmazonSSMtoEC2",
            "Effect": "Allow",
            "Action": [
                "ssm:*",
                "ssmmessages:CreateControlChannel",
                "ssmmessages:CreateDataChannel",
                "ssmmessages:OpenControlChannel",
                "ssmmessages:OpenDataChannel",
                "ec2messages:AcknowledgeMessage",
                "ec2messages:DeleteMessage",
                "ec2messages:FailMessage",
                "ec2messages:GetEndpoint",
                "ec2messages:GetMessages",
                "ec2messages:SendReply"
            ],
            "Resource": "*"
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;With this policy, we are providing the SSM agent within the EC2 ability to access any EC2 instances that have SSM agent enabled. Eg.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Access the EC2
$ aws ssm start-session --target i-011ce869cbf141225 --region ap-northeast-1

Starting session with SessionId: dev-01fe8e68e8f5c70f5
$ sudo su
root@ec2-instance:/var/snap/amazon-ssm-agent/3553# 

# From this one we can install session manager plugin
root@ec2-instance:/var/snap/amazon-ssm-agent/3553# curl "https://s3.amazonaws.com/session-manager-downloads/plugin/latest/ubuntu_arm64/session-manager-plugin.deb" -o "session-manager-plugin.deb"
root@ec2-instance:/var/snap/amazon-ssm-agent/3553# dpkg -i session-manager-plugin.deb 

# And then access to anywhere
$ aws ssm start-session --target i-0df199f1ba0b1fc11 --region ap-southeast-1

Starting session with SessionId: i-011ce869cbf141225-0b8c635c96e4aa038
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  🚀 Solution &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Best practice of provide IAM policy is avoiding wildcard as much as possible
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Action": [
                "ssm:ListDocuments",
                "ssm:ListCommands",
                "ssm:ListCommandInvocations",
                "ssm:ListDocumentVersions",
                "ssm:DescribeDocument",
                "ssm:GetDocument",
                "ssm:DescribeInstanceInformation",
                "ssm:DescribeDocumentParameters",
                "ssm:DescribeInstanceProperties",
                "ssmmessages:CreateControlChannel",
                "ssmmessages:CreateDataChannel",
                "ssmmessages:OpenControlChannel",
                "ssmmessages:OpenDataChannel",
                "ec2messages:AcknowledgeMessage",
                "ec2messages:DeleteMessage",
                "ec2messages:FailMessage",
                "ec2messages:GetEndpoint",
                "ec2messages:GetMessages",
                "ec2messages:SendReply"
            ],
            "Resource": "*",
            "Effect": "Allow"
        },
        {
            "Sid": "AmazonSSMtoEC2",
            "Effect": "Allow",
            "Action": [
                "ssm:*"
            ],
            "Resource": "arn:aws:ec2:ap-northeast-1:123456789012:instance/i-011ce869cbf141225"
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;With the above policy we now restrict the EC2 to provide SSM itself and not able to acess others through SSM
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ aws ssm start-session --target i-0df199f1ba0b1fc11 --region ap-southeast-1

An error occurred (AccessDeniedException) when calling the StartSession operation: User: arn:aws:sts::123456789012:assumed-role/role-ssm/i-011ce869cbf141225 is not authorized to perform: ssm:StartSession on resource: arn:aws:ec2:ap-southeast-1:123456789012:instance/i-0df199f1ba0b1fc11
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;View the log here: /var/log/amazon/ssm/amazon-ssm-agent.log&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  🚀 Conclusion &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;We use SSM to provide access EC2 instnance or send commands without key pem, so please be careful with setup IAM permission to ensure security.&lt;/li&gt;
&lt;li&gt;More about SSM agent, &lt;a href="https://dev.to/awscommunity-asean/aws-ssm-agent-connection-error-3kn9"&gt;AWS SSM Agent - Connection Error&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;div class="ltag__user ltag__user__id__512906"&gt;
  
    .ltag__user__id__512906 .follow-action-button {
      background-color: #000000 !important;
      color: #62df88 !important;
      border-color: #000000 !important;
    }
  
    &lt;a href="/vumdao" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bGwkUMWT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ugeYdWM---/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/512906/2472752c-cfd5-4e02-b3d8-55b790178884.png" alt="vumdao image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/vumdao"&gt;Vu Dao&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/vumdao"&gt;Awesome Devops || AWS SA || CloudOpz&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;




&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/vumdao"&gt;
        vumdao
      &lt;/a&gt; / &lt;a href="https://github.com/vumdao/vumdao"&gt;
        vumdao
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


</description>
      <category>aws</category>
      <category>ssm</category>
      <category>cloudopz</category>
      <category>iam</category>
    </item>
    <item>
      <title>Vue Academy #2: V-model directive</title>
      <author>CodeOzz</author>
      <pubDate>Fri, 09 Jul 2021 15:25:06 +0000</pubDate>
      <link>https://dev.to/codeozz/vue-academy-2-v-model-directive-36oh</link>
      <guid>https://dev.to/codeozz/vue-academy-2-v-model-directive-36oh</guid>
      <description>&lt;p&gt;Welcome to the second vue academy ! It will be a list of lot of article on vue! I have 2.5 years of experience in this and I can teach a few thing about this !&lt;/p&gt;

&lt;p&gt;For this course we will focus on v-model directive !&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-start"&gt;
  &lt;/a&gt;
  Let's start
&lt;/h3&gt;

&lt;p&gt;First problematic, how do we &lt;strong&gt;manage&lt;/strong&gt; an input value in &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; ?&lt;/p&gt;

&lt;p&gt;We could do the next :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;HelloWorld&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;updateMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
        &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;updateMessage&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/template&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We need to bind value of input to our current data &lt;code&gt;message&lt;/code&gt; and handle event from this input in order to update our current data &lt;code&gt;message&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It's not really friendly and we have to do this for every  component...&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#vmodel"&gt;
  &lt;/a&gt;
  v-model
&lt;/h3&gt;

&lt;p&gt;You can use the v-model directive to create two-way data bindings on form input, textarea, and select elements. It automatically picks the correct way to update the element based on the input type.&lt;/p&gt;

&lt;p&gt;So we can replace the code above by&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;HelloWorld&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/template&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We can remove the method that update value ! Since v-model will directly update it.&lt;/p&gt;

&lt;p&gt;It's very useful ! &lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



</description>
      <category>vue</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>typescript</category>
    </item>
    <item>
      <title>JavaScript Bundlers: An in-depth comparative 👍👎 Is Webpack still the best bundler in 2021? 📦</title>
      <author>_CODE</author>
      <pubDate>Fri, 09 Jul 2021 15:15:54 +0000</pubDate>
      <link>https://dev.to/underscorecode/javascript-bundlers-an-in-depth-comparative-is-webpack-still-the-best-bundler-in-2021-59jk</link>
      <guid>https://dev.to/underscorecode/javascript-bundlers-an-in-depth-comparative-is-webpack-still-the-best-bundler-in-2021-59jk</guid>
      <description>&lt;p&gt;Hello, everybody! 🚀&lt;/p&gt;

&lt;p&gt;For the last few days, I've been doing some research on the currently available &lt;strong&gt;JavaScript bundlers&lt;/strong&gt; to try to draw my own conclusions about them and figure out which one would be more appropriate for my projects. And, of course, to find out if it's all about popularity and we developers are overrating some of them and underrating the others 😇&lt;/p&gt;

&lt;p&gt;Since the only bundler I've been working with for the last few years is &lt;strong&gt;Webpack&lt;/strong&gt;, I decided to take a look at &lt;strong&gt;npm trends&lt;/strong&gt; to find out &lt;strong&gt;which the most popular JS bundlers are in 2021&lt;/strong&gt; and give them a try.&lt;/p&gt;

&lt;p&gt;And this is what I got: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l79Te5lD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ispe7ysyot47gsnid67.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l79Te5lD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ispe7ysyot47gsnid67.png" alt="Comparative chart from npm-trends showing the top 5 JS bundlers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So today, we'll be making a comparison between the &lt;strong&gt;5 most popular bundlers&lt;/strong&gt; according to &lt;strong&gt;&lt;em&gt;npm trends&lt;/em&gt;&lt;/strong&gt;: Webpack, Rollup, Browserify, ESbuild and Parcel.&lt;/p&gt;

&lt;p&gt;In this comparative, we will create a &lt;strong&gt;really basic scenario&lt;/strong&gt; for each of them with a couple of the most used resources/tools these days, and we'll be talking about their &lt;strong&gt;pros and cons&lt;/strong&gt; and comparing them all based on &lt;strong&gt;a few parameters&lt;/strong&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#first-things-first-what-is-a-bundler"&gt;
  &lt;/a&gt;
  First things first. What is a &lt;strong&gt;&lt;em&gt;bundler&lt;/em&gt;&lt;/strong&gt;? 🤔
&lt;/h1&gt;

&lt;p&gt;A &lt;strong&gt;bundler&lt;/strong&gt; is a tool that &lt;strong&gt;puts together all your JavaScript code and its dependencies&lt;/strong&gt; and throws a &lt;strong&gt;new JavaScript output file&lt;/strong&gt; with everything merged, ready for the web, commonly known as &lt;em&gt;the bundle file&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;These &lt;em&gt;bundlers&lt;/em&gt; can work with &lt;strong&gt;other types of files&lt;/strong&gt; as well apart from JavaScript, but &lt;strong&gt;&lt;em&gt;they need a little help&lt;/em&gt;&lt;/strong&gt; to perform their &lt;em&gt;bundles&lt;/em&gt;. We'll talk about this more in depth in each of the examples below.&lt;/p&gt;

&lt;p&gt;None of them require a &lt;em&gt;config&lt;/em&gt; file, what perfectly works for the most basic bundle. This means you have a &lt;em&gt;.js&lt;/em&gt; file converted into another &lt;em&gt;.js&lt;/em&gt; file with minimal setup. But, once you start having &lt;strong&gt;more and more kinds of files that need to be transpiled&lt;/strong&gt; and, consequently, configured, it's time to add a &lt;strong&gt;&lt;em&gt;config&lt;/em&gt;&lt;/strong&gt; &lt;strong&gt;file&lt;/strong&gt; because, otherwise, you'll find yourself immersed in &lt;strong&gt;chaos&lt;/strong&gt; 😰&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-scenario-%F0%9F%96%A5"&gt;
  &lt;/a&gt;
  The scenario 🖥
&lt;/h1&gt;

&lt;p&gt;To try out these bundlers, &lt;strong&gt;we don't need a specific complex structure&lt;/strong&gt; for our project, so let's propose a really basic scenario: &lt;strong&gt;an HTML file&lt;/strong&gt;, with &lt;strong&gt;some styles&lt;/strong&gt; (we'll slightly complicate it by using a &lt;strong&gt;preprocessor&lt;/strong&gt; like SASS) and &lt;strong&gt;ready to use ES6&lt;/strong&gt;, which means we will include &lt;em&gt;Babel&lt;/em&gt; even though we're not using React, Vue or any library/framework that rely on it in this comparative. But let's get it setup anyway.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/dist
   bundle.js
   [styles.css]
/src
   index.js
/styles
   styles.scss
index.html
package.json
[*.config.js]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;/dist&lt;/strong&gt; will be &lt;strong&gt;the folder created after the bundle process&lt;/strong&gt; and will &lt;strong&gt;contain all the bundled files&lt;/strong&gt;. The bundled file for the styles is &lt;strong&gt;optional&lt;/strong&gt; because we can choose either to inject the styles directly in the HTML or generate a new &lt;em&gt;transpiled&lt;/em&gt; file containing the styles.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;/src&lt;/strong&gt; is the folder containing the &lt;strong&gt;entry point&lt;/strong&gt; from which the bundler will &lt;strong&gt;start the bundle process&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;/styles&lt;/strong&gt; is the folder containing the &lt;strong&gt;original styles file&lt;/strong&gt;, before the bundle.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;index.html&lt;/strong&gt; is the file containing what we'll see in the &lt;strong&gt;browser&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;package.json&lt;/strong&gt; is the file where all the &lt;strong&gt;dependencies&lt;/strong&gt;, &lt;strong&gt;scripts&lt;/strong&gt; and &lt;strong&gt;some configurations&lt;/strong&gt; are stored.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;*.config.js&lt;/strong&gt; is the file where all the &lt;strong&gt;config for the bundler&lt;/strong&gt; is defined. This file is &lt;strong&gt;optional&lt;/strong&gt; for every bundler in this list, &lt;strong&gt;but highly recommended&lt;/strong&gt;. * will be replaced accordingly by the name of the bundler.&lt;/p&gt;




&lt;p&gt;Having said all this, let's see what each of these 5 bundlers can offer us.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-webpack"&gt;
  &lt;/a&gt;
  1. Webpack
&lt;/h1&gt;

&lt;p&gt;Loved by many, hated by some, known to all. And still &lt;strong&gt;the most popular bundler in 2021&lt;/strong&gt;. With &lt;strong&gt;more than 15 million weekly downloads&lt;/strong&gt; (at the time of writing this post), there's no doubt that &lt;strong&gt;Webpack is still the bundler&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;par excellence&lt;/em&gt;&lt;/strong&gt; in 2021. But, is it the easiest to use, configure and understand how it works?&lt;/p&gt;

&lt;p&gt;Let's have a look at how we should configure it to have it ready to work.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#approach-used-by-webpack"&gt;
  &lt;/a&gt;
  Approach used by Webpack
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;em&gt;build&lt;/em&gt; script&lt;/li&gt;
&lt;li&gt;A &lt;em&gt;config&lt;/em&gt; file&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Loaders&lt;/em&gt; used to &lt;em&gt;transform&lt;/em&gt; files&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Plugins&lt;/em&gt; for more complex stuff&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;package.json&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"rm -rf dist &amp;amp;&amp;amp; webpack --mode development"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Really really easy. There's no need to do anything else for a basic configuration. Actually, if you don't want to use a different name for your configuration file, you don't even need to specify a configuration in the build script. If you want to use a different one, you should add &lt;em&gt;--config your_config_file.js&lt;/em&gt; to the command.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that we'll be adding the command &lt;em&gt;rm -rf dist&lt;/em&gt; to every build of every bundler. What this does is removing the &lt;em&gt;dist&lt;/em&gt; folder every time a new &lt;em&gt;build&lt;/em&gt; script is executed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;webpack.config.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="na"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src/index.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bundle.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dist&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="na"&gt;module&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
         &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.(&lt;/span&gt;&lt;span class="sr"&gt;js|jsx&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;exclude&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/node-modules/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;use&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;babel-loader&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

         &lt;span class="p"&gt;},&lt;/span&gt;
         &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;html$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;use&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;html-loader&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
         &lt;span class="p"&gt;},&lt;/span&gt;
         &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.(&lt;/span&gt;&lt;span class="sr"&gt;scss|sass&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;use&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;style-loader&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;css-loader&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sass-loader&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
         &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;]&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Maybe a little bit more tricky and difficult to understand at first than the other bundlers, but really &lt;strong&gt;easy once you get the sense of how everything works together&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-happening-in-this-config-file"&gt;
  &lt;/a&gt;
  What is happening in this &lt;em&gt;config&lt;/em&gt; file? 🙃
&lt;/h2&gt;

&lt;p&gt;Well, first, we need an &lt;strong&gt;entry point&lt;/strong&gt; for our bundler to start merging everything. That is specified in the &lt;em&gt;entry&lt;/em&gt; attribute and the file will be our file &lt;em&gt;index.js&lt;/em&gt; in the folder &lt;em&gt;src&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Same for the &lt;strong&gt;output file&lt;/strong&gt;, we'll tell Webpack our file will be called &lt;em&gt;bundle.js&lt;/em&gt; and it should be stored in the folder &lt;em&gt;dist&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;And now, what's only left is to &lt;strong&gt;handle the files that are not JavaScript (ES5)&lt;/strong&gt;. Webpack takes care of these files using &lt;strong&gt;loaders&lt;/strong&gt;. To &lt;em&gt;transform&lt;/em&gt; these files, we just need to indicate the file format and which loader(s) will deal with them.&lt;/p&gt;

&lt;p&gt;So that's what we need: a few loaders to take care of our styles, our HTML and our JS (ES6 - remember that we're getting it ready for formats like &lt;em&gt;.jsx&lt;/em&gt;): &lt;code&gt;style-loader&lt;/code&gt;, &lt;code&gt;css-loader&lt;/code&gt; and &lt;code&gt;sass-loader&lt;/code&gt; for the styles, &lt;code&gt;html-loader&lt;/code&gt; for the HTML files and &lt;code&gt;babel-loader&lt;/code&gt; for ES6.&lt;/p&gt;

&lt;p&gt;Notice that we're also &lt;em&gt;transforming&lt;/em&gt; the HTML file (this loader will be useful if we want to add resources that are loaded directly in the HTML file, such as images). This loader is really useful in bigger projects, but not necessary in this case (due to its simple structure), we'll skip this step for the rest of the bundlers.&lt;/p&gt;

&lt;p&gt;And this is it. Everything will be bundled once we run the &lt;em&gt;build&lt;/em&gt; command.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-the-bundle"&gt;
  &lt;/a&gt;
  About the bundle
&lt;/h2&gt;

&lt;p&gt;Since we're using &lt;code&gt;style-loader&lt;/code&gt; to bundle the styles, instead of a plugin to minify CSS and generate a new file (&lt;code&gt;MiniCSSExtractPlugin&lt;/code&gt;), the styles are injected into the HTML file inside a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag, so the only output file is &lt;code&gt;bundle.js&lt;/code&gt;, which needs to be added to &lt;code&gt;index.html&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-do-i-think-about-webpack"&gt;
  &lt;/a&gt;
  What do I think about Webpack? 👇
&lt;/h2&gt;

&lt;p&gt;I have to admit that first time I had to face Webpack I thought the configuration would be impossible. It was my first time using a bundler and I was barely able to understand the overall concept. Let alone all the loaders and more complex related stuff because it was a bigger project.&lt;/p&gt;

&lt;p&gt;But after a few from-scratch configurations on my part, I have to say that now &lt;strong&gt;I find it more intuitive and easier to set up&lt;/strong&gt; if I compare it to what it felt like to get to know the rest of them.&lt;/p&gt;

&lt;p&gt;Let's take a look at the others and you'll understand why! &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-rollup"&gt;
  &lt;/a&gt;
  2. Rollup
&lt;/h1&gt;

&lt;p&gt;Let's now turn our attention to &lt;strong&gt;Rollup&lt;/strong&gt;. As well as the rest of the loaders, this has been my first time trying it out, so I'll also provide my first impressions about it 🤓&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#approach-used-by-rollup"&gt;
  &lt;/a&gt;
  Approach used by Rollup
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;em&gt;build&lt;/em&gt; command.&lt;/li&gt;
&lt;li&gt;An &lt;em&gt;optional&lt;/em&gt; &lt;em&gt;config&lt;/em&gt; file.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Plugins&lt;/em&gt; used to &lt;em&gt;transform&lt;/em&gt; files&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;package.json&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Basic bundle with no &lt;em&gt;config&lt;/em&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"rm -rf dist &amp;amp;&amp;amp; rollup src/index.js --file dist/bundle.js"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using a &lt;em&gt;config&lt;/em&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"rm -rf dist &amp;amp;&amp;amp; rollup -c"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A really easy command for building, as well, so nothing else to point out here.&lt;/p&gt;

&lt;p&gt;Let's now check the &lt;em&gt;config&lt;/em&gt; file, that is &lt;strong&gt;optional&lt;/strong&gt; but &lt;strong&gt;recommended&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rollup.config.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;babel&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@rollup/plugin-babel&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;scss&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rollup-plugin-scss&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="na"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src/index.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./dist/bundle.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cjs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="nx"&gt;babel&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;exclude&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;node_modules/**&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
      &lt;span class="nx"&gt;scss&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;styles.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
   &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What Webpack defines as &lt;em&gt;loaders&lt;/em&gt;, here in Rollup are called just &lt;em&gt;plugins&lt;/em&gt;. This time we just need a couple of them: the one for transpiling ES6 into ES5 (Babel) and the one for SCSS: &lt;code&gt;@rollup/plugin-babel&lt;/code&gt; and &lt;code&gt;rollup-plugin-scss&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;These plugins have also &lt;strong&gt;their own optional configuration&lt;/strong&gt;. In this case, for Babel, we're excluding the folder &lt;em&gt;node_modules&lt;/em&gt; and for SCSS we're giving the output file a different name. Otherwise, it will remain &lt;em&gt;output.css&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;For configurations with &lt;strong&gt;plain CSS&lt;/strong&gt;, there's a plugin called &lt;code&gt;rollup-plugin-css-only&lt;/code&gt; that works in the exact same way as the plugin we're using for SCSS.&lt;/p&gt;

&lt;p&gt;Note that we need to specify the entry and the output points exactly as we did before with Webpack. &lt;/p&gt;

&lt;p&gt;And that would be it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-the-bundle"&gt;
  &lt;/a&gt;
  About the bundle
&lt;/h2&gt;

&lt;p&gt;The Rollup bundle comprises two files: &lt;code&gt;bundle.js&lt;/code&gt; and &lt;code&gt;styles.css&lt;/code&gt;. It's necessary to import the original styles files in the entry point &lt;code&gt;index.js&lt;/code&gt; for the bundler to be able to find the file (there's no other place where we can reference it).&lt;/p&gt;

&lt;p&gt;Also both &lt;em&gt;bundles&lt;/em&gt; need to be added to the HTML index file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-first-impressions-about-rollup"&gt;
  &lt;/a&gt;
  My first impressions about Rollup 👇
&lt;/h2&gt;

&lt;p&gt;To be honest, I wasn't expecting much of these other &lt;em&gt;easier slash light-weight&lt;/em&gt; bundlers since Webpack has always worked for me, and I have to say that Rollup has surprised me in a good way.&lt;/p&gt;

&lt;p&gt;I find it &lt;strong&gt;pretty similar with Webpack&lt;/strong&gt; (&lt;em&gt;config&lt;/em&gt; file with almost the same structure, &lt;em&gt;plugins&lt;/em&gt; work in the same way as &lt;em&gt;loaders&lt;/em&gt; to translate &lt;em&gt;no-js&lt;/em&gt; files, the easy build command...), which means familiarity, usage recall and, consequently,  ease of use. &lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;only drawback&lt;/strong&gt; I've been able to find so far is &lt;strong&gt;the large number of dependencies it relies on&lt;/strong&gt;, and consequently, the &lt;strong&gt;huge size&lt;/strong&gt; of the project (3x a project bundled with Webpack). We'll be focusing on this more in depth at the end of the post 🔜&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-browserify"&gt;
  &lt;/a&gt;
  3. Browserify
&lt;/h1&gt;

&lt;p&gt;Let's now talk about &lt;strong&gt;Browserify&lt;/strong&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#approach-used-by-browserify"&gt;
  &lt;/a&gt;
  Approach used by Browserify
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;No &lt;em&gt;config&lt;/em&gt; file&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Transforms&lt;/em&gt; used to &lt;em&gt;transform&lt;/em&gt; files&lt;/li&gt;
&lt;li&gt;Everything you need to configure -&amp;gt; &lt;code&gt;package.json&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The method used by Browserify has nothing to do with the &lt;em&gt;traditional&lt;/em&gt; approach of a &lt;em&gt;build&lt;/em&gt; command and a &lt;em&gt;config&lt;/em&gt; file. With this bundler, &lt;strong&gt;every possible configuration&lt;/strong&gt; is allocated in &lt;code&gt;package.json&lt;/code&gt; and &lt;strong&gt;the build command can get a little bit tedious&lt;/strong&gt; if we don't have the concepts clear.&lt;/p&gt;

&lt;p&gt;It also needs &lt;strong&gt;plugins&lt;/strong&gt; (or &lt;em&gt;transforms&lt;/em&gt;, as they are also called) to &lt;em&gt;transform&lt;/em&gt; everything into something &lt;em&gt;readable&lt;/em&gt; by the browser.&lt;/p&gt;

&lt;p&gt;Let's have a glance at how we can configure it:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;package.json&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"rm -rf dist &amp;amp;&amp;amp; browserify -o dist/bundle.js src/index.js"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A very basic use of this bundler could be something like the code snippet above. We only have defined the input and output files (no configuration for styles or anything more complex).&lt;/p&gt;

&lt;p&gt;Note the &lt;strong&gt;length of the build command&lt;/strong&gt; having only declared the input source and the output.&lt;/p&gt;

&lt;p&gt;Let me show you how it would look like if we add the suitable plugin for handling plain CSS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"rm -rf dist &amp;amp;&amp;amp; browserify -t [browserify-css --output dist/styles.css] -o dist/bundle.js src/index.js"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, if we wanted to add some configuration to the plugin, we would do something like the following down below in the same file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"browserify"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"browserify-css"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"autoInject"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"minify"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"rootDir"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"."&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It starts getting not &lt;em&gt;that maintainable&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;And now, let's complicate it a little bit more by adding plugins for SCSS and Babel. We need a couple of &lt;em&gt;plugins&lt;/em&gt; called &lt;code&gt;Babelify&lt;/code&gt; and &lt;code&gt;scssify&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#something-to-take-into-account"&gt;
  &lt;/a&gt;
  Something to take into account
&lt;/h3&gt;

&lt;p&gt;I've been trying out this bundler with &lt;strong&gt;the last released version of Node&lt;/strong&gt; (v16.4.2) and the command line throws multiple errors when trying to install any dependencies that rely on &lt;code&gt;node-sass&lt;/code&gt; (&lt;code&gt;scssify&lt;/code&gt; and &lt;code&gt;sassify&lt;/code&gt;, more specifically). A very negative point.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We could do this in two different ways: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;By saturating the build script with more content 😅&lt;/li&gt;
&lt;li&gt;By adding a &lt;em&gt;transform&lt;/em&gt; property&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#via-the-build-script"&gt;
  &lt;/a&gt;
  Via the build script
&lt;/h3&gt;

&lt;p&gt;For specifying several &lt;em&gt;transforms&lt;/em&gt; in the &lt;em&gt;build&lt;/em&gt; script using Browserify, we should add as many as &lt;em&gt;-t&lt;/em&gt; [ &lt;em&gt;transform options&lt;/em&gt; ] as needed, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"rm -rf dist &amp;amp;&amp;amp; browserify -t [ scssify --output dist/styles.css ] -t [ babelify --presets [ @babel/preset-env ] ] -o dist/bundle.js src/index.js"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you're using this method, pay close attention to the &lt;strong&gt;white spaces&lt;/strong&gt; inside the arrays. &lt;strong&gt;They matter&lt;/strong&gt; ✌️&lt;/p&gt;

&lt;p&gt;I find this method &lt;strong&gt;tedious&lt;/strong&gt; and &lt;strong&gt;difficult to understand&lt;/strong&gt;, and above all, &lt;strong&gt;difficult to maintain&lt;/strong&gt;. And we're only using two plugins. All said.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#via-the-transform-property"&gt;
  &lt;/a&gt;
  Via the transform property
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"browserify"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"transform"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"babelify"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"presets"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
               &lt;/span&gt;&lt;span class="s2"&gt;"@babel/preset-env"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"scssify"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"autoInject"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By using this method, the &lt;em&gt;build&lt;/em&gt; script will look like it was originally, when it just performed the simple bundle of the input js file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"rm -rf dist &amp;amp;&amp;amp; browserify -o dist/bundle.js src/index.js"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Much better 😊&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-the-bundle"&gt;
  &lt;/a&gt;
  About the bundle
&lt;/h2&gt;

&lt;p&gt;The Browserify bundle consists of the &lt;code&gt;bundle.js&lt;/code&gt; file and, only &lt;strong&gt;if we set an output file for the styles&lt;/strong&gt; in the plugin that takes care of them, &lt;strong&gt;we'll get a&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;styles.css&lt;/em&gt;&lt;/strong&gt; file. &lt;strong&gt;Otherwise&lt;/strong&gt;, the styles will be injected at the bottom of the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; element in the HTML file &lt;strong&gt;inside a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; element&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Take a look at this two different config examples for &lt;code&gt;browserify-css&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"browserify-css"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"autoInject"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"minify"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"rootDir"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"output"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"dist/styles.css"&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This config above will create a separate &lt;em&gt;.css&lt;/em&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"browserify-css"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"autoInject"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"minify"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"rootDir"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"."&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And this other config will inject the code into a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag in the head of &lt;code&gt;index.html&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-first-impressions-about-browserify"&gt;
  &lt;/a&gt;
  My first impressions about Browserify 👇
&lt;/h2&gt;

&lt;p&gt;My less favorite so far. &lt;strong&gt;I don't find it&lt;/strong&gt; as &lt;strong&gt;intuitive&lt;/strong&gt; as the other two, and the &lt;strong&gt;approach&lt;/strong&gt; it uses is totally &lt;strong&gt;different&lt;/strong&gt; from what we are &lt;em&gt;regularly&lt;/em&gt; used to. Also, I think the &lt;strong&gt;configuration is more tedious&lt;/strong&gt; if at first you don't know how and where to handle the required plugins.&lt;/p&gt;

&lt;p&gt;Also, &lt;strong&gt;blank spaces matter&lt;/strong&gt;, and if you don't know that beforehand, you can perfectly spend 2 hours trying to figure out what's wrong with your code 👎&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-esbuild"&gt;
  &lt;/a&gt;
  4. ESBuild
&lt;/h1&gt;

&lt;p&gt;Time to talk about &lt;strong&gt;ESBuild&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#approach-used-by-esbuild"&gt;
  &lt;/a&gt;
  Approach used by ESBuild
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;em&gt;build&lt;/em&gt; command (encourages the use of the terminal)&lt;/li&gt;
&lt;li&gt;An &lt;em&gt;optional&lt;/em&gt; &lt;em&gt;config&lt;/em&gt; file&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Plugins&lt;/em&gt; used to transform files&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With ESBuild you can use &lt;strong&gt;either the command line or a&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;config&lt;/em&gt;&lt;/strong&gt; &lt;strong&gt;file&lt;/strong&gt; as well as the others, even for more complex configurations. It's totally up to you, but specifying a &lt;em&gt;config&lt;/em&gt; file is always recommended for &lt;strong&gt;maintainability, scalability, readability and productivity&lt;/strong&gt; reasons.&lt;/p&gt;

&lt;p&gt;We're going to create a &lt;em&gt;config&lt;/em&gt; file called &lt;code&gt;esbuild.config.js&lt;/code&gt; and we'll execute it from the &lt;em&gt;build&lt;/em&gt; script by running the command &lt;code&gt;node&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But first, let's have a look at the simplest way to start bundling our files with ESBuild (no &lt;em&gt;config&lt;/em&gt; file is required this time):&lt;/p&gt;

&lt;p&gt;&lt;code&gt;package.json&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"rm -rf dist &amp;amp;&amp;amp; esbuild --bundle src/index.js --outfile=dist/bundle.js"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As usual, we declare the entry point and the output file. And that's it. But what happens when we need to &lt;strong&gt;keep bundling more different kind of files&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;Let's then take a look at the following example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"rm -rf dist &amp;amp;&amp;amp; esbuild --bundle src/index.js --outfile=dist/bundle.js &amp;amp;&amp;amp; esbuild --bundle styles/styles.css --outfile=dist/bundle.css"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are now bundling the styles as well, and adding a little more information to the &lt;em&gt;build&lt;/em&gt; script (mess alert again!) by defining two different bundlers. We could (and definitely will) have more filetypes that would need to get bundled and this could become a total mess.&lt;/p&gt;

&lt;p&gt;So, let's put aside this approach and let's create a &lt;em&gt;config&lt;/em&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;esbuild.config.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;esbuild&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;esbuild&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;sassPlugin&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;esbuild-sass-plugin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;babel&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;esbuild-plugin-babel&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;esbuild&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;build&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
   &lt;span class="na"&gt;entryPoints&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;src/index.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
   &lt;span class="na"&gt;bundle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;outfile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dist/bundle.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;sassPlugin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;babel&lt;/span&gt;&lt;span class="p"&gt;()],&lt;/span&gt;
&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here comes what I found (let me say) &lt;em&gt;weird&lt;/em&gt; and what took me some time to figure out.&lt;/p&gt;

&lt;p&gt;Maybe because I was expecting to run this &lt;em&gt;config&lt;/em&gt; file in the same way as Webpack and Rollup do (they run their &lt;em&gt;config&lt;/em&gt; file by default if it exists and has the default name), I had some trouble trying to tell ESBuild to take it as an input for configuration.&lt;/p&gt;

&lt;p&gt;Finally, I realized that &lt;strong&gt;it should be called via the node command&lt;/strong&gt; to just run the script 😬&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"rm -rf dist &amp;amp;&amp;amp; node esbuild.config.js"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that was all. &lt;/p&gt;




&lt;p&gt;Something I want to mention here is that, the fact that &lt;strong&gt;there aren't so many plugins from where to pick&lt;/strong&gt; and also &lt;strong&gt;most of them are way outdated&lt;/strong&gt;, doesn't make me particularly happy. And, if you allow me some advice, &lt;strong&gt;try to pick plugins which use either CommonJS&lt;/strong&gt; (which inserts modules through &lt;em&gt;require&lt;/em&gt;) &lt;strong&gt;or ES Modules&lt;/strong&gt; (which does the same using &lt;em&gt;import&lt;/em&gt;),  because if you mix them up... the only things you'll get will be errors and mess everywhere! 😖&lt;/p&gt;

&lt;p&gt;Just make sure you &lt;strong&gt;change the type attribute&lt;/strong&gt; in &lt;code&gt;package.json&lt;/code&gt; &lt;strong&gt;if you're using ES Modules&lt;/strong&gt; (&lt;em&gt;import&lt;/em&gt;) to load your plugins into the &lt;em&gt;config&lt;/em&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"module"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Practically all plugins have been created by the community (if not all). For this example, I've chosen &lt;code&gt;esbuild-sass-plugin&lt;/code&gt; for SASS/SCSS and &lt;code&gt;esbuild-plugin-babel&lt;/code&gt; for Babel. Both of them work with &lt;em&gt;import&lt;/em&gt;, so no extra problems.&lt;/p&gt;

&lt;p&gt;A great point to mention: ESBuild is really &lt;strong&gt;fast compared with the others&lt;/strong&gt;. At least in this scenario.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-first-impressions-about-esbuild"&gt;
  &lt;/a&gt;
  My first impressions about ESBuild 👇
&lt;/h2&gt;

&lt;p&gt;Mixed emotions. At first, I thought it would be very easy to configure (it is if you only intend to perform a regular bundle) but then I started to &lt;strong&gt;struggle a bit&lt;/strong&gt; with the &lt;em&gt;config&lt;/em&gt; file, &lt;strong&gt;not because of the syntax&lt;/strong&gt; but because of the &lt;strong&gt;multiple errors thrown&lt;/strong&gt; on the terminal &lt;strong&gt;regarding Node&lt;/strong&gt;. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-parcel"&gt;
  &lt;/a&gt;
  5. Parcel
&lt;/h1&gt;

&lt;p&gt;Let's now have a look at the last bundler in this list: the &lt;em&gt;famous&lt;/em&gt; Parcel. Hi to the huge community of Parcel fans out there 👋&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#approach-used-by-parcel"&gt;
  &lt;/a&gt;
  Approach used by Parcel
&lt;/h2&gt;

&lt;p&gt;The Parcel approach is mainly based on a &lt;strong&gt;&lt;em&gt;zero&lt;/em&gt;&lt;/strong&gt; &lt;strong&gt;configuration&lt;/strong&gt; environment 😱 I was reluctant to believe it at first (that's the main reason why I wanted to try it out so bad), but, yes, it's possible to bundle a project like the one we're testing in this post by writing the bare minimum configuration, in a few minutes and without racking your brains 🙌&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#zero-configuration-are-you-sure"&gt;
  &lt;/a&gt;
  Zero configuration? Are you sure? 😪
&lt;/h2&gt;

&lt;p&gt;By zero they mean &lt;strong&gt;very little and precise&lt;/strong&gt;. Let me show you the configuration I used for this basic project:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;package.json&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"rm -rf dist &amp;amp;&amp;amp; rm -rf  &amp;amp;&amp;amp; parcel build src/index.js --no-scope-hoist --no-source-maps"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The procedure is pretty much the same: we need to indicate where the &lt;strong&gt;entry point&lt;/strong&gt; for our app is located. And I also added the flags &lt;code&gt;--no-scope-hoist&lt;/code&gt; &lt;strong&gt;to avoid odd behaviors&lt;/strong&gt; regarding &lt;code&gt;require&lt;/code&gt; when running &lt;em&gt;js&lt;/em&gt; scripts and &lt;code&gt;--no-source-maps&lt;/code&gt; &lt;strong&gt;to avoid the creation of&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;sourcemaps&lt;/em&gt;&lt;/strong&gt;. Otherwise, Parcel will create one for every bundle file by default.&lt;/p&gt;

&lt;p&gt;Now, if we want &lt;strong&gt;to change the location and the name of the output&lt;/strong&gt; bundle file, we need to change the value of the &lt;em&gt;main&lt;/em&gt; property attribute in &lt;code&gt;package.json&lt;/code&gt;, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"main"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"dist/bundle.js"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Otherwise, the bundle will be generated at root level and will be called with the name that is stored in &lt;em&gt;main&lt;/em&gt;, in most cases &lt;em&gt;index.js&lt;/em&gt; (if we didn't change it when running &lt;code&gt;npm init&lt;/code&gt;).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#now-lets-zeroconfigure-the-styles-and-babel"&gt;
  &lt;/a&gt;
  Now, let's &lt;em&gt;(zero)configure&lt;/em&gt; the styles and Babel
&lt;/h2&gt;

&lt;p&gt;Since we're using SCSS, we need to use SASS as a preprocessor. So, what was my surprise when I read that &lt;strong&gt;SASS is already included with Parcel installation&lt;/strong&gt;. But not only &lt;em&gt;SASS&lt;/em&gt;, also &lt;em&gt;LESS&lt;/em&gt;, &lt;em&gt;Stylus&lt;/em&gt;, and... &lt;em&gt;Babel&lt;/em&gt;! 😧&lt;/p&gt;

&lt;p&gt;So the only step to take here is to create a couple of config files for SASS and Babel.&lt;/p&gt;

&lt;p&gt;Our SASS config file will be named &lt;code&gt;.sassrc&lt;/code&gt; and will contain the following code inside:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;includePaths&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;node_modules&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And when we run the &lt;em&gt;build&lt;/em&gt; command, Parcel will automatically install the plugin &lt;code&gt;@parcel/transformer-sass&lt;/code&gt; as a dependency and will create a &lt;code&gt;bundle.css&lt;/code&gt; file in the same specified directory for the bundle, and that's all the configuration. Pretty cool, right? &lt;/p&gt;

&lt;p&gt;Now don't forget to link this file to your HTML 🤗  And remember that your &lt;em&gt;.scss&lt;/em&gt; file should has been previously &lt;strong&gt;imported on your entry point&lt;/strong&gt; file in order for the bundler to know what file it has to transform.&lt;/p&gt;

&lt;p&gt;On Babel side, we need to create a &lt;code&gt;.babelrc&lt;/code&gt;config file to specify the needed presets (let's say we want to get it ready for using React in the future):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;presets&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@babel/preset-env&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@babel/preset-react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Parcel will automatically call &lt;code&gt;@parcel/transformer-babel&lt;/code&gt; and will do the job for us.&lt;/p&gt;

&lt;p&gt;Don't forget to previously install &lt;code&gt;@babel/preset-env&lt;/code&gt;, &lt;code&gt;@babel/preset-react&lt;/code&gt; and all the dependencies needed by React. &lt;/p&gt;

&lt;p&gt;And that's... it. We're all set and ready to rock 😁 &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-first-impressions-about-parcel"&gt;
  &lt;/a&gt;
  My first impressions about Parcel 👇
&lt;/h2&gt;

&lt;p&gt;The first thing I want to point out is that Parcel wasn't that easy for me at the beginning since I had a really (really) hard time trying to get it ready to work, and it seemed like it wouldn't stop throwing errors regarding the OS and creating more trouble out of outdated versions of some dependencies 😥 So, to be honest, Parcel wasn't going to be in this list because I didn't want to talk about it if I couldn't try it out myself. &lt;/p&gt;

&lt;p&gt;But, &lt;em&gt;magically&lt;/em&gt; ✨ (and due to my tireless perseverance 😅), I finally could make it and set everything up to get it ready 🙌&lt;/p&gt;

&lt;p&gt;And after that, it was really easy compared to the rest of the bundlers. So let's draw a veil over the setbacks and let's give it a chance.&lt;/p&gt;

&lt;p&gt;Parcel is also pretty &lt;strong&gt;fast&lt;/strong&gt;, because it uses &lt;strong&gt;&lt;em&gt;cache&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;But... something I don't like at all is the &lt;strong&gt;several security vulnerabilities that appear after installing it&lt;/strong&gt; (around 12, some of them high risk) 😖 That doesn't speak well of you, Parcel. Not to mention the &lt;strong&gt;huge size of the project&lt;/strong&gt;. &lt;strong&gt;The heaviest&lt;/strong&gt; in this comparative.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-comparison"&gt;
  &lt;/a&gt;
  The comparison 📈
&lt;/h1&gt;

&lt;p&gt;Here you have the highlights of this comparative summed up in a table:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Des71L_W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/naipfc68z6u3looyvidm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Des71L_W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/naipfc68z6u3looyvidm.png" alt="Table that compares different features of the 5 mentioned bundlers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-my-final-verdict"&gt;
  &lt;/a&gt;
  What is my final verdict? 😼
&lt;/h1&gt;

&lt;p&gt;Well, I think some of &lt;strong&gt;these other bundlers apart from Webpack can be cool to use for small or side projects&lt;/strong&gt;, but in reality, I personally think that &lt;strong&gt;Webpack&lt;/strong&gt; is still the &lt;strong&gt;best option for robust projects&lt;/strong&gt; (we just have to look at the huge number of downloads per week compared to the rest). &lt;/p&gt;

&lt;p&gt;Also, I find it the &lt;strong&gt;easiest to manage&lt;/strong&gt; since once you get the sense of how it deals with configuration, it's easier to keep adding values to that configuration. But it's not something that obvious. You have to take your time playing with it to get a very basic idea at first.&lt;/p&gt;

&lt;p&gt;Moreover, you have the majority of resources you need (loaders, plugins...) available &lt;strong&gt;from the creators&lt;/strong&gt;, so you make sure you're using &lt;strong&gt;a real source of truth&lt;/strong&gt;. And they are updated really frequently, so you can use it without worry with newer versions of Node and other packages.&lt;/p&gt;

&lt;p&gt;So, yes, &lt;strong&gt;I will keep choosing Webpack&lt;/strong&gt; as my first option over the others.&lt;/p&gt;




&lt;p&gt;My second choice would be &lt;strong&gt;Rollup&lt;/strong&gt; for sure, and I truly think &lt;strong&gt;I will definitely use it in some of my side projects&lt;/strong&gt; since I found it &lt;strong&gt;intuitive to configure&lt;/strong&gt; and it &lt;strong&gt;seems like it works properly on robust projects&lt;/strong&gt; as well. &lt;/p&gt;

&lt;p&gt;And about their &lt;em&gt;plugins&lt;/em&gt;, most of them are also available &lt;strong&gt;from the creators&lt;/strong&gt;, so, again, a real source of truth and many more advantages.&lt;/p&gt;




&lt;p&gt;I also think &lt;strong&gt;Parcel&lt;/strong&gt; is &lt;strong&gt;a very interesting option&lt;/strong&gt; and I'd like to try it with larger projects and check if it really doesn't need further configuration. Definitely a great find.&lt;/p&gt;

&lt;p&gt;And a big plus to the fact that &lt;strong&gt;plugins&lt;/strong&gt; like &lt;em&gt;Babel&lt;/em&gt;, &lt;em&gt;SASS&lt;/em&gt;, &lt;em&gt;LESS&lt;/em&gt; and some more are &lt;strong&gt;built-in and ready to use&lt;/strong&gt; out of the box.&lt;/p&gt;




&lt;p&gt;What about &lt;strong&gt;Browserify&lt;/strong&gt; and &lt;strong&gt;ESBuild&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;These two have been &lt;strong&gt;the ones with which I have struggled more&lt;/strong&gt;, especially Browserify. The fact that it doesn't require a &lt;em&gt;config&lt;/em&gt; file and everything should be declared in &lt;em&gt;package.json&lt;/em&gt; kinda forces you to &lt;strong&gt;change the way you think of how bundlers&lt;/strong&gt; are &lt;strong&gt;&lt;em&gt;traditionally&lt;/em&gt;&lt;/strong&gt; &lt;strong&gt;configured&lt;/strong&gt;. Not to mention you end up &lt;em&gt;saturating&lt;/em&gt; the file with &lt;strong&gt;way a lot tricky configurations&lt;/strong&gt;, which makes it &lt;strong&gt;difficult to read and maintain&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Also, when it comes to &lt;em&gt;plugins&lt;/em&gt;, &lt;strong&gt;most of them are not developed and maintained by the creators&lt;/strong&gt; (especially the most common) and are &lt;strong&gt;really outdated&lt;/strong&gt; (many of them haven't been updated in the last 4 years) and this fact &lt;strong&gt;leads to problems with newer Node/other packages versions&lt;/strong&gt; and compatibility in general.&lt;/p&gt;




&lt;p&gt;And on &lt;strong&gt;ESBuild&lt;/strong&gt; side, I didn't especially like it either. The first impression was good but then, since the &lt;em&gt;config&lt;/em&gt; file caused me some trouble, it mainly &lt;strong&gt;ended up in confusion about how to manage configuration&lt;/strong&gt; with and without this file. So I found it quite &lt;strong&gt;ambiguous&lt;/strong&gt; and took me a bit to realize &lt;strong&gt;how to set up both scenarios&lt;/strong&gt; in different ways.&lt;/p&gt;

&lt;p&gt;About their &lt;em&gt;plugins&lt;/em&gt;, same as Browserify, &lt;strong&gt;practically all of them has been created by the community&lt;/strong&gt;, not the author, so you have to use them at your own risk. But as a plus point, &lt;strong&gt;they are often updated and maintained&lt;/strong&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#now-its-your-turn"&gt;
  &lt;/a&gt;
  Now it's your turn! 🔥
&lt;/h1&gt;

&lt;p&gt;What do you think of this comparative? Do you agree? Which one is your preferred bundler? Do you know some other bundler that is not on the list? Would you like to suggest different bundlers for future comparative posts? Comment below!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  Disclaimer 👇
&lt;/h1&gt;

&lt;p&gt;Remember this is just a post showing &lt;strong&gt;my impressions about something I tried for the first time&lt;/strong&gt;. I have decided to share the process with you and my opinion about what I experienced. &lt;strong&gt;The opinions expressed in this post don't mean that some bundlers are better over others&lt;/strong&gt;. My advice is to try them all out and draw your own conclusions, like I did. And based on that, use the ones you like best and fit your needs.&lt;/p&gt;




&lt;p&gt;🎉 Don't forget to follow &lt;a class="mentioned-user" href="https://dev.to/underscorecode"&gt;@underscorecode&lt;/a&gt;
 on &lt;a href="https://instagram.com/underscorecode"&gt;Instagram&lt;/a&gt; and &lt;a href="https://twitter.com/underscorecode"&gt;Twitter&lt;/a&gt; for more daily webdev content 🖥🖤&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#and-last-but-not-least-a-quick-friendly-reminder-before-we-go"&gt;
  &lt;/a&gt;
  And last but not least... A quick friendly reminder before we go 😊
&lt;/h4&gt;

&lt;p&gt;We all know there are million ways to get things done when it comes to programming and development, and we're here to &lt;strong&gt;help and learn&lt;/strong&gt;, so, if you know another possible way to do what others are sharing (&lt;strong&gt;not better, not worse, just different&lt;/strong&gt;), feel free to share it if you feel like it, but, please, &lt;strong&gt;always be kind and respectful&lt;/strong&gt; with the author and the rest of the community. Thank you and happy coding!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webpack</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>5 Handy CLI Tools to Spice up Your Terminal</title>
      <author>Elena Lape</author>
      <pubDate>Fri, 09 Jul 2021 15:09:02 +0000</pubDate>
      <link>https://dev.to/elenalape/5-handy-cli-tools-to-spice-up-your-terminal-31do</link>
      <guid>https://dev.to/elenalape/5-handy-cli-tools-to-spice-up-your-terminal-31do</guid>
      <description>&lt;p&gt;The Command Line.&lt;/p&gt;

&lt;p&gt;A developer's best mate, and also one of the main sources of our frustration (it's &lt;code&gt;esc&lt;/code&gt;, then &lt;code&gt;:q&lt;/code&gt; to quit Vim, by the way).&lt;/p&gt;

&lt;p&gt;Regardless of its social status, there are plenty of great CLI tools that can make quite a difference in the overall terminal experience.&lt;/p&gt;

&lt;p&gt;Here are some of my favourites, in no particular order. Some are tools that I use every day in my work, and others are just fun apps to try if you get bored of a GUI.&lt;/p&gt;

&lt;p&gt;Shall we?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-ohmyzsh"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://ohmyz.sh/"&gt;Oh-My-Zsh&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A4ap7Ood--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/467bung2smmypgklrfk9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A4ap7Ood--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/467bung2smmypgklrfk9.jpg" alt="oh-my-zsh screenshot with wedisagree theme"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ohmyz.sh/"&gt;Oh-My-Zsh&lt;/a&gt; is a framework for managing your Zsh configuration. It comes bundled with thousands of helpful functions, helpers, plugins, and themes.&lt;/p&gt;

&lt;p&gt;In short — Oh-My-Zsh makes the terminal less intimidating by bringing some colour and autocompletion to tools like &lt;a href="https://git-scm.com/"&gt;Git&lt;/a&gt; and &lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt;, as well as plenty of package managers and other popular command line utilities.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# To install
$ sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"

# To configure your plugins, themes, aliases etc.
$ vi ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Admittedly, my favourite part is that there are lots of different &lt;a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes"&gt;themes&lt;/a&gt; to choose from — my favourite is &lt;a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes#wedisagree"&gt;&lt;code&gt;wedisagree&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Note that Oh-My-Zsh is for the &lt;strong&gt;ZSH/Z-Shell&lt;/strong&gt; (not bash or any other), so make sure you’ve got &lt;a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Installing-ZSH"&gt;ZSH&lt;/a&gt; going first.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-httpie"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://httpie.io"&gt;HTTPie&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YvQFrYlX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/httpie/httpie/master/httpie.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YvQFrYlX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/httpie/httpie/master/httpie.gif" alt="HTTPie in the terminal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ever wanted to make a request to an API or a website, without having to pull out an arsenal of devtools?&lt;/p&gt;

&lt;p&gt;Say no more — &lt;a href="https://httpie.io"&gt;HTTPie&lt;/a&gt; is here to save the day.&lt;/p&gt;

&lt;p&gt;HTTPie is a CLI HTTP client that comes with colourised output (that goes fashionably well with Oh-My-Zsh's &lt;code&gt;wedisagree&lt;/code&gt;), really intuitive syntax, and a number of other features to make testing and debugging APIs as simple as it gets.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# To install with brew
$ brew install httpie

# To make a request
$ http httpie.io/hello
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One feature I find particularly handy is the &lt;a href="https://httpie.io/docs/2.4.0#offline-mode"&gt;&lt;code&gt;--offline&lt;/code&gt; mode&lt;/a&gt;, which lets you build and print out a (colourised and formatted) HTTP request without sending it. That way, you can see exactly the stuff the API in question is going to receive.&lt;/p&gt;

&lt;p&gt;Check out my recent &lt;a href="https://dev.to/elenalape/apis-101-getting-started-with-httpie-2o9g"&gt;Getting started with HTTPie guide&lt;/a&gt; to learn more.&lt;/p&gt;

&lt;p&gt;Full disclosure: I am part of the HTTPie team. However, I have been using it even before I joined!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-wttrin"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://github.com/chubin/wttr.in"&gt;Wttr.in&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fujA09re--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/te5m2bi8mg9sezcdvs0v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fujA09re--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/te5m2bi8mg9sezcdvs0v.png" alt="wttr.in weather forecast preview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using a command line just for the sake of using a command line?&lt;/p&gt;

&lt;p&gt;Sign. me. up.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/chubin/wttr.in"&gt;Wttr.in&lt;/a&gt; is a console-based weather report app. Just add your city to the URL, and send a request like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Using HTTPie
$ http wttr.in/london 

# Or, using cURL
$ curl wttr.in/london 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I’ve aliased &lt;code&gt;http wttr.in/London&lt;/code&gt; with &lt;code&gt;weather&lt;/code&gt;. So now, each time I want to see the weather forecast for London, I am able to simply type &lt;code&gt;weather&lt;/code&gt; and save all those precious seconds of having to pick up my phone and navigate to the weather app. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-kalk"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://kalk.dev/"&gt;Kalk&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fayW8_XN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zwsgl326s2oaf4ohx5wo.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fayW8_XN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zwsgl326s2oaf4ohx5wo.gif" alt="Kalk calculator preview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Computers have evolved so far ahead from their original purpose, which was to calculate things.&lt;/p&gt;

&lt;p&gt;Sure, you can and create some sick beats with your machine, or run Overwatch at one bazillion frames per second. &lt;/p&gt;

&lt;p&gt;But something as simple as &lt;em&gt;calculating&lt;/em&gt; what grade you need to score in an exam to pass the course is more tricky than it should be. Your default OS calculator is an option, but it's very basic. Google kiiind of does the job, but requires internet connection. So do more advanced tools like &lt;a href="https://www.wolframalpha.com/"&gt;Wolfram Alpha&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://kalk.dev/"&gt;Kalk&lt;/a&gt; is... a CLI for a calculator.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# To install using brew
$ brew install kalk

# To launch
$ kalk
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kalk 0.4.0+3fb73b1 - Copyright (c) 2020-2021 Alexandre Mutel
# Type `help` for more information and at https://github.com/xoofx/kalk

&amp;gt;&amp;gt;&amp;gt; # You can do things such as
&amp;gt;&amp;gt;&amp;gt; x=2; round((54+4)/(4+x))

# x = 2; round((54 + 4) / (4 + x))
x = 2
out = 10
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's simply brilliant both as your regular everyday calculator, and a more advanced one that will solve your equations using the same syntax you'd use in a maths class. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-taskwarrior"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://taskwarrior.org/"&gt;Taskwarrior&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qJCwS8_Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yl24k97hju6b6yd5vzze.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qJCwS8_Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yl24k97hju6b6yd5vzze.png" alt="taskwarrior screenshot from wikipedia.org"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's an open secret that creating to-do lists is peak procrastination, as a queen of procrastination, I'd like to introduce you to one more way &lt;em&gt;to-do&lt;/em&gt; it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://taskwarrior.org/"&gt;Taskwarrior&lt;/a&gt; is a nifty tool if you want to keep all your &lt;em&gt;actual&lt;/em&gt; to-dos separate from shopping lists and song lyric ideas that you've got sitting in your note taking app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# To install with brew
$ brew install taskd

# To create a new task (it will prompt you to create a ~/.taskrc file upon the first run; select yes
$ task add 'Write a dev.to article about CLI tools'

# To view all pending tasks
$ task

# To mark task as complete
$ task &amp;lt;task_id&amp;gt; done
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also annotate, set a priority level or a by-date to individual tasks or their groups.&lt;/p&gt;

&lt;p&gt;Taskwarrior's &lt;a href="https://taskwarrior.org/docs/30second.html"&gt;30 second tutorial&lt;/a&gt; has got everything you need to get started.&lt;/p&gt;




&lt;p&gt;Do you have any favourite CLI tools you'd like to share? Please let me know if you give any of the ones listed above a try! &lt;/p&gt;

&lt;p&gt;I'm going to go finish that burning &lt;code&gt;task&lt;/code&gt; now.&lt;/p&gt;

&lt;p&gt;Unless the &lt;code&gt;weather&lt;/code&gt; is too nice for it.&lt;/p&gt;

</description>
      <category>githunt</category>
      <category>productivity</category>
      <category>tooling</category>
      <category>todayilearned</category>
    </item>
    <item>
      <title>DEPLOY NEXT.JS APP TO VERCEL</title>
      <author>Ha Tuan Em</author>
      <pubDate>Fri, 09 Jul 2021 15:08:18 +0000</pubDate>
      <link>https://dev.to/hte305/deploy-next-js-app-to-vercel-2kj2</link>
      <guid>https://dev.to/hte305/deploy-next-js-app-to-vercel-2kj2</guid>
      <description>&lt;p&gt;Someone want to me make a post for explain how to deploy NEXT.JS application to &lt;a href="https://vercel.com/"&gt;Vercel&lt;/a&gt;. Base on require of them I will make a post. Hope, it will help something to you.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#i-initial-nextjs-app-or-you-can-clone-my-shopping-cart-repository"&gt;
  &lt;/a&gt;
  I. Initial Next.js app or you can clone my shopping cart &lt;a href="https://github.com/hatuanem199801/next-shopping-example"&gt;repository&lt;/a&gt;
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;create-next-app shopping-cart
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#ii-after-creating-your-application-commit-them-to-github"&gt;
  &lt;/a&gt;
  II. After creating your application, commit them to Github.
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add .
git commit -m "Complete project"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#iii-create-project-in-vercel"&gt;
  &lt;/a&gt;
  III. Create project in Vercel
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9zpqYTvD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qdjw54je867grxworj2o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9zpqYTvD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qdjw54je867grxworj2o.png" alt="Create project"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#iv-import-project-or-you-can-search-by-name-of-repository"&gt;
  &lt;/a&gt;
  IV. Import project or you can search by name of repository.
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xoR8GhQJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ijwzn53vnyqo826aaohd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xoR8GhQJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ijwzn53vnyqo826aaohd.png" alt="import project"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#v-configure-application"&gt;
  &lt;/a&gt;
  V. Configure application
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;You can add &lt;code&gt;env&lt;/code&gt; as MONGOURI or SERECTKEY, ... in box &lt;code&gt;Environment Variables&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Override command of application in box &lt;code&gt;Build and Output Settings&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Zxo0bUxC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/coad6982e1f71rpqeqpl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zxo0bUxC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/coad6982e1f71rpqeqpl.png" alt="Configure application"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#vi-deploy-and-done"&gt;
  &lt;/a&gt;
  VI. Deploy and done
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TC6nljPg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/unnkhpj9wo0hvn5ur1ym.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TC6nljPg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/unnkhpj9wo0hvn5ur1ym.png" alt="Deploy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Enjoy your time 🪴&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you for reading.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/hte305"&gt;&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eKzEoK4A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ddtyyk0zuud3h7o0sjpq.png" alt="Buy me a coffee"&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>vercel</category>
      <category>deploy</category>
      <category>shoppingcart</category>
    </item>
    <item>
      <title>Speeding up the development builds after upgrading to Angular v12</title>
      <author>Brandon Roberts</author>
      <pubDate>Fri, 09 Jul 2021 15:07:52 +0000</pubDate>
      <link>https://dev.to/brandontroberts/speeding-up-the-development-serve-after-upgrading-to-angular-v12-5db5</link>
      <guid>https://dev.to/brandontroberts/speeding-up-the-development-serve-after-upgrading-to-angular-v12-5db5</guid>
      <description>&lt;p&gt;After you've upgraded to Angular v12 from a previous version of Angular, you may notice your &lt;code&gt;ng serve&lt;/code&gt; times have increased, along with missing sourcemaps, and longer rebuild times during development. This post helps you set a default configuration to development to get your application serving the same as previously.&lt;/p&gt;

&lt;p&gt;In Angular version 12, running &lt;code&gt;ng build&lt;/code&gt; now defaults to production mode. This is a welcomed change, as there is less chance of accidentally deploying a development build to production, which is a lot slower and bigger, giving the perception that Angular is slow. This also aligns with other web frameworks that build for production out of the box.&lt;/p&gt;

&lt;p&gt;The way Angular serves the application, it essentially does a build with watch mode. As mentioned before, doing a build is now done by default with production optimizations enabled. This adds more time to the build process.&lt;/p&gt;

&lt;p&gt;There is a migration to add a "development" build configuration.&lt;/p&gt;

&lt;p&gt;To run this migration, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ng update @angular/cli &lt;span class="nt"&gt;--migrate-only&lt;/span&gt; production-by-default
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;One caveat is that it only supports migrating first-party Angular builders for development mode, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;@angular-devkit/build-angular:dev-server&lt;/li&gt;
&lt;li&gt;@angular-devkit/build-angular:protractor&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To fix this manually, you add the development options as defaults, and a &lt;code&gt;defaultConfiguration&lt;/code&gt; set to an empty string so it doesn't default to &lt;code&gt;production&lt;/code&gt;.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;Now, when running &lt;code&gt;ng serve&lt;/code&gt; you will get a development build, which is faster for local development.&lt;/p&gt;

&lt;p&gt;If you liked this, click the ❤️ so other people will see it. Follow &lt;a href="https://twitter.com/brandontroberts"&gt;me on Twitter&lt;/a&gt; for more tips on Angular, &lt;a href="https://nx.dev"&gt;Nx&lt;/a&gt;, and &lt;a href="https://ngrx.io"&gt;NgRx&lt;/a&gt;!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#see-also"&gt;
  &lt;/a&gt;
  See Also
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.angular.io/angular-v12-is-now-available-32ed51fbfd49"&gt;Angular v12 blog post&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>angular</category>
    </item>
    <item>
      <title>How to Game Dev Metrics w/ Ray Elenteny</title>
      <author>Conor Bronsdon</author>
      <pubDate>Fri, 09 Jul 2021 14:52:28 +0000</pubDate>
      <link>https://dev.to/conorbronsdon/how-to-game-dev-metrics-w-ray-elenteny-5h3l</link>
      <guid>https://dev.to/conorbronsdon/how-to-game-dev-metrics-w-ray-elenteny-5h3l</guid>
      <description>&lt;p&gt;What leads teams to game metrics within their organization?&lt;/p&gt;

&lt;p&gt;On this week’s episode of &lt;a href="https://devinterrupted.com/podcast/how-to-game-dev-metrics/"&gt;Dev Interrupted&lt;/a&gt;, we speak with agile expert Ray Elenteny, Principal Owner at Solutech Consulting, about how people game dev metrics and the underlying issues in culture &amp;amp; leadership that lead to it.&lt;/p&gt;

&lt;p&gt;So whether you're trying to game your own metrics (don't do it!) or solve culture issues that have led to this issue at your organization, give this episode a listen.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#listen-to-the-full-episode"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Listen to the full episode&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/2AJVkiMHT3Zd4vb3pzLEbs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#episode-highlights-include"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Episode Highlights include:&lt;/strong&gt;
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Which metrics are easiest to game&lt;/li&gt;
&lt;li&gt;The long-term implications of gaming metrics&lt;/li&gt;
&lt;li&gt;How poor culture and leadership lead engineering teams to game dev metrics&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#join-the-dev-interrupted-discord-server"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Join the Dev Interrupted Discord Server&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;With over 1200 members, the Dev Interrupted Discord Community is the best place for Engineering Leaders to engage in daily conversation. No sales people allowed. &lt;a href="https://discord.gg/tpkmwM6c3g"&gt;Join the community &amp;gt;&amp;gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wzIBzHH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19j3dzgz4r4kzav3w6z8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wzIBzHH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19j3dzgz4r4kzav3w6z8.png" alt="Join the Dev Interrupted Discord Community!"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devops</category>
      <category>agile</category>
      <category>leadership</category>
      <category>culture</category>
    </item>
    <item>
      <title>Learning new tech as a beginner.</title>
      <author>Asim Shrestha</author>
      <pubDate>Fri, 09 Jul 2021 14:47:40 +0000</pubDate>
      <link>https://dev.to/alex1the1great/learning-new-tech-as-a-beginners-2gl7</link>
      <guid>https://dev.to/alex1the1great/learning-new-tech-as-a-beginners-2gl7</guid>
      <description>&lt;h3&gt;
  &lt;a href="#1-code-everyday"&gt;
  &lt;/a&gt;
  1. Code everyday.
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;To become good a coding you have to code every single day. Even if for just 20 minutes a day. You just have to be consistent.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#2-take-your-first-tutorial"&gt;
  &lt;/a&gt;
  2. Take your first tutorial.
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Complete the tutorial. Understand everything, shallow understanding is fine while starting.&lt;/li&gt;
&lt;li&gt;You do not need to understand exactly how the functions work, but you do need to be able to import and use them correctly.&lt;/li&gt;
&lt;li&gt;Don't rush to complete the tutorial. If you feel like skipping any topics from tutorial, take a break and come back later.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#3-add-at-least-2-new-features-to-the-project-after-completing-the-tutorial"&gt;
  &lt;/a&gt;
  3. Add at least 2 new features to the project after completing the tutorial.
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Following tutorial, we are not using our brain. So, we have to use our brain and think ourselves try to add simple features at least. You have understood the tutorial it will not a big deal.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#4-build-a-new-projects-amp-complete-it"&gt;
  &lt;/a&gt;
  4. Build a new projects &amp;amp; complete it.
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Ideas don't come out fully formed. They only become clear as you work on them. YOU JUST HAVE TO GET STARTED.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Build a complete new project with the knowledge which you have acquire from the tutorial.&lt;/li&gt;
&lt;li&gt;If you like your new project which you are building then keep on updating(iterating) it.&lt;/li&gt;
&lt;li&gt;Instead of making multiple simple projects, build a big project.&lt;/li&gt;
&lt;li&gt;If you keep on adding new features to a simple project, then it will start to grow to a big project.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#5-habit-of-figuring-out-anything"&gt;
  &lt;/a&gt;
  5. Habit of Figuring out anything.
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Face your challenges.&lt;/li&gt;
&lt;li&gt;How can I add this features to my project?

&lt;ul&gt;
&lt;li&gt;Reading documentation.&lt;/li&gt;
&lt;li&gt;Learning from an article.&lt;/li&gt;
&lt;li&gt;Watching videos.&lt;/li&gt;
&lt;li&gt;Asking for help in stack overflow or any other platform.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>programming</category>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>python</category>
    </item>
  </channel>
</rss>
