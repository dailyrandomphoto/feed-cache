<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network. Open source and radically transparent.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>52 Virtual Cups of Coffee: A Developers Journey for Navigating Uncertainties</title>
      <author>zahrakhadijha</author>
      <pubDate>Thu, 10 Dec 2020 00:52:00 +0000</pubDate>
      <link>https://dev.to/zahrakhadijha/52-virtual-cups-of-coffee-a-developers-journey-for-navigating-uncertainties-2j01</link>
      <guid>https://dev.to/zahrakhadijha/52-virtual-cups-of-coffee-a-developers-journey-for-navigating-uncertainties-2j01</guid>
      <description>&lt;p&gt;I have been trying to work out life's riddle for the past &lt;strong&gt;8 months&lt;/strong&gt;. After having a conversation with my roommate on how lost and clueless I felt in my job search, she recommended that I read the book &lt;a href="https://www.amazon.com/Cups-Coffee-insightful-navigating-uncertainties/dp/150060206X"&gt;52 Cups of Coffee&lt;/a&gt;. The book is about a girl who embarked on an experiment to having 1 cup of coffee each week for a year with someone she wouldn't normally meet. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;"Who you are in five years depends on the people you meet and the books you read."&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This quote was on the first page of the book. I started pondering on it and realized how much I resonated with it. It's true, you are made up of the people you surround yourself with and the words you consume. Parts of who I am are made up of the inspiring people I've met in my life. My perspective in life has broadened because of the books I've had the opportunity to read. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-background" class="anchor"&gt;
  &lt;/a&gt;
  My background üë©üèΩ‚Äçüíª
&lt;/h2&gt;

&lt;p&gt;I am a &lt;strong&gt;Frontend Engineer&lt;/strong&gt; looking for my first role in the tech industry! Earlier this year, I saw an opportunity to leave a career path that I was deeply unhappy in to finally pursue Software Engineering. I've been thinking about this path since 2017 when I went to a music festival in New York City and got to experience interactive art, sound systems and robots all created with code. I didn't have the guts to do anything about it then. &lt;/p&gt;

&lt;p&gt;In May 2020, I got accepted to General Assembly's Full Stack Software Engineering Immersive Program. Ever since, I'm committed to putting my 100% into making this career-transition into frontend engineering. And in the future, I'd like to get into &lt;strong&gt;robotics&lt;/strong&gt; and &lt;strong&gt;hardware&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Prior to this, I was working in Events &amp;amp; Digital Marketing and acquired a very heavy client-facing background. This is where I've developed a lot of my soft skills in working with people and being around different personalities. I love people and collaboration so I'll never turn away an opportunity to talk to others. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#this-project-%EF%B8%8F" class="anchor"&gt;
  &lt;/a&gt;
  This Project ‚òïÔ∏è
&lt;/h2&gt;

&lt;p&gt;As I'm reading "52 Cups of Coffee," I decided that I want to have a (virtual) cup of coffee with someone, too and pick their brains about what they're up to in life. I'm inspired by all kinds of people doing all kinds of interesting and cool things, so this wouldn't be restricted to &lt;em&gt;just&lt;/em&gt; engineers. I want to get to know entrepreneurs, creators, people who are on untraditional paths to doing amazing things and learn to ask good, insightful questions.&lt;/p&gt;

&lt;p&gt;But &lt;em&gt;HOW&lt;/em&gt;? We're in a pandemic! &lt;em&gt;How do I message people I want to talk to ‚Äî who are probably getting other messages from other people ‚Äî and ask to have a zoom coffee meeting with them? How do I ask without the conversation sounding so transactional?&lt;/em&gt; I could use LinkedIn, Twitter, maybe Instagram? &lt;/p&gt;

&lt;p&gt;I've absolutely made genuine connections on &lt;a href="https://twitter.com/zahrakhadijha"&gt;Twitter&lt;/a&gt;. I think the tech community is supportive and wonderful and I learn new things all the time. And I've also had some luck on LinkedIn. But I wanted to branch out and I wanted to have genuine conversations with different kinds of people to gain perspective and navigate my own uncertainties. I decided to join LunchClub. &lt;/p&gt;

&lt;p&gt;I have my first video call with a founder of a sparkling wine brand on Friday at 9 a.m. I'm going in with the expectation that I will learn something from the choices he's made in his life and take them along with me on my own journey. &lt;/p&gt;

&lt;p&gt;I'm excited, I'm going to jot down questions to ask ü§ó So until next week...we'll see what happens!&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>career</category>
    </item>
    <item>
      <title>In JS how do you know the right condition to use inside your for loop?</title>
      <author>scothinks</author>
      <pubDate>Wed, 09 Dec 2020 23:09:03 +0000</pubDate>
      <link>https://dev.to/scothinks/in-js-how-do-you-know-the-right-condition-to-use-inside-your-for-loop-4blm</link>
      <guid>https://dev.to/scothinks/in-js-how-do-you-know-the-right-condition-to-use-inside-your-for-loop-4blm</guid>
      <description>&lt;p&gt;I'm new to JavaScript and I've been struggling with iterating with for loops. &lt;/p&gt;

&lt;p&gt;The early classes were easy to understand when the condition was simply i &amp;lt; 9 or i &amp;gt; 9. &lt;/p&gt;

&lt;p&gt;The issue I have now is knowing when to use conditions like i &amp;lt; arr.length for example. &lt;/p&gt;

&lt;p&gt;Many times when I do JS challenges and check the solution for challenges I fail, I see these type of conditions and I don't know why one condition is used instead of another. &lt;/p&gt;

&lt;p&gt;Can anyone help me out with this, please? &lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>Load Testing with¬†Locust</title>
      <author>Tavishi Gupta</author>
      <pubDate>Wed, 09 Dec 2020 18:38:16 +0000</pubDate>
      <link>https://dev.to/tavishigupta/load-testing-with-locust-148l</link>
      <guid>https://dev.to/tavishigupta/load-testing-with-locust-148l</guid>
      <description>&lt;p&gt;In this post, I will walk through how my team mapped performance characteristics for a web app we created for a customer, and how we picked between using just an App Service, a CDN (Content Delivery Network) and Front Door (all Azure Services). I will use a simple &lt;a href="https://github.com/Azure-Samples/azure-voting-app-redis"&gt;voting app&lt;/a&gt; in this blog as an example to compare the results. For our load/performance testing framework we chose to use &lt;a href="https://locust.io/"&gt;Locust&lt;/a&gt;, an open source load testing tool, as it is scriptable and distributed, and very easy to deploy on Azure. Feel free to follow along for testing your own app!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#goal" class="anchor"&gt;
  &lt;/a&gt;
  Goal
&lt;/h3&gt;

&lt;p&gt;Through load/performance testing, our goal was to determine the number of concurrent users and response times that our customer's application could handle. This would help us understand the bottlenecks and capabilities of the page speed, scalability and stability of the web app. We tested the time-to-first-byte speed for the web app as the key performance metric.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#definitions" class="anchor"&gt;
  &lt;/a&gt;
  Definitions
&lt;/h3&gt;

&lt;p&gt;Before I move into the how and why of our top pick, I'm going to define the 3 solutions so you can better understand what we are comparing here.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://azure.microsoft.com/en-us/services/app-service/"&gt;Azure App Service&lt;/a&gt;: A fully managed platform for building, deploying and scaling your web apps.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.cloudflare.com/learning/cdn/what-is-a-cdn/"&gt;Content Delivery Network&lt;/a&gt;: A content delivery network (CDN) refers to a geographically distributed group of servers which work together to provide fast delivery of Internet content. A CDN allows for the quick transfer of assets needed for loading Internet content including HTML pages, JavaScript files, stylesheets, images, and videos.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.microsoft.com/en-us/azure/frontdoor/front-door-overview"&gt;Azure Front Door&lt;/a&gt;: Front Door is a global, scalable entry-point that uses the Microsoft global edge network to create fast, secure, and widely scalable web applications.&lt;/li&gt;
&lt;/ol&gt;




&lt;h3&gt;
  &lt;a href="#how-to-set-up-and-use%C2%A0locust" class="anchor"&gt;
  &lt;/a&gt;
  How to Set up and Use¬†Locust
&lt;/h3&gt;

&lt;p&gt;You can use &lt;a href="https://github.com/tavishigupta/locust-blog/tree/master/deployment"&gt;this&lt;/a&gt; deployment script to deploy the locust structure in Azure. If you already know how set up Locust and what the different metrics mean, feel free to skip this section!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#start-a%C2%A0test" class="anchor"&gt;
  &lt;/a&gt;
  Start a¬†Test
&lt;/h4&gt;

&lt;p&gt;Go to the Locust dashboard and follow the instructions. The Locust dashboard can be reached by going to the IP of the master node and port 8089 (Example: &lt;a href="http://7xttd3hv5jaac-master.eastus.azurecontainer.io:8089"&gt;http://7xttd3hv5jaac-master.eastus.azurecontainer.io:8089&lt;/a&gt;).&lt;br&gt;&lt;br&gt;
Enter the desired numbers and start swarming.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--af8f1KYk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cfjcqquvhkim6letjhui.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--af8f1KYk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cfjcqquvhkim6letjhui.png" alt="Dashboard"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#how-to-pick-values" class="anchor"&gt;
  &lt;/a&gt;
  How to pick values:
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Total users to simulate&lt;/em&gt;: It's recommended that you start with a number of simulated users that are greater than &lt;code&gt;number of user classes * number of workers&lt;/code&gt; when running Locust distributed. In our current case, we have 1 user class and 3 worker nodes.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Hatch rate&lt;/em&gt;: If the hatch rate is lower than the number of worker nodes, the hatching would occur in "bursts" where all worker node would hatch a single user and then sleep for multiple seconds, hatch another user, sleep and repeat.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Host&lt;/em&gt;: The host attribute is a URL prefix (e.g., "&lt;a href="http://google.com%22"&gt;http://google.com"&lt;/a&gt;) to the host that is to be loaded.
&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: If number of workers on the dashboard is more that the worker nodes available, &lt;a href="https://github.com/tavishigupta/locust-blog/tree/master/deployment"&gt;redeploy&lt;/a&gt; the dashboard with the required number of worker nodes/instances.  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#view-and-analyze%C2%A0results" class="anchor"&gt;
  &lt;/a&gt;
  View and Analyze¬†Results
&lt;/h4&gt;

&lt;p&gt;After swarming for a while, your dashboard will look something like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--shqrcxkL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/unw28myqp76czpse66xe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--shqrcxkL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/unw28myqp76czpse66xe.png" alt="Analysis Dashboard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#definitions" class="anchor"&gt;
  &lt;/a&gt;
  Definitions:
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Requests&lt;/em&gt;: Total number of requests made so far&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Fails&lt;/em&gt;: Number of requests that have failed&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Median&lt;/em&gt;: Response speed for 50 percentile in ms&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;90%ile&lt;/em&gt;: Response speed for 90 percentile in ms&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Average&lt;/em&gt;: Average response speed in ms
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Min&lt;/em&gt;: Minimum response speed in ms
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Max&lt;/em&gt;: Maximum response speed in ms
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Average size (bytes)&lt;/em&gt;: Average response size in bytes
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Current RPS&lt;/em&gt;: Current requests per second&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Current Failures/s&lt;/em&gt;: Total number of failures per second
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Your graphs will look something like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qT3St9y3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gfd1p1eyi04r20kyqrza.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qT3St9y3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gfd1p1eyi04r20kyqrza.png" alt="graph1"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1S2tB23m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/68tn4dju6bp2jy4dftr8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1S2tB23m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/68tn4dju6bp2jy4dftr8.png" alt="graph2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These graphs can be downloaded using the download icon next to them.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y8G4egaJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/uhv5wotr3wdkn82gs4k8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y8G4egaJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/uhv5wotr3wdkn82gs4k8.png" alt="downloads button"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And/or you can download the data under the download data tab.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y8G4egaJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/uhv5wotr3wdkn82gs4k8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y8G4egaJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/uhv5wotr3wdkn82gs4k8.png" alt="downloads tab"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can analyze the graphs based on &lt;strong&gt;response&lt;/strong&gt; and &lt;strong&gt;volume&lt;/strong&gt; metrics.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#response-metrics" class="anchor"&gt;
  &lt;/a&gt;
  Response Metrics
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Average response time&lt;/em&gt; measures the average amount of time that passes between a client's initial request and the last byte of a server's response, including the delivery of HTML, images, CSS, JavaScript, and any other resources. It's the most accurate standard measurement of the actual user experience.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Peak response time&lt;/em&gt; measures the roundtrip of a request/response cycle (RTT) but focuses on the longest cycle rather than taking an average. High peak response times help identify problematic anomalies.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Error rates&lt;/em&gt; measure the percentage of problematic requests compared to total requests. It's not uncommon to have some errors with a high load, but obviously, error rates should be minimized to optimize the user experience.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#volume-metrics" class="anchor"&gt;
  &lt;/a&gt;
  Volume Metrics
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Concurrent users&lt;/em&gt; measure how many virtual users are active at a given point in time. While similar to requests per second (see below), the difference is that each concurrent user can generate a high number of requests.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Requests per second&lt;/em&gt; measures the raw number of requests that are being sent to the server each second, including requests for HTML pages, CSS stylesheets, XML documents, JavaScript files, images, and other resources.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Throughput&lt;/em&gt; measures the amount of bandwidth, in kilobytes per second, consumed during the test. Low throughput could suggest the need to compress resources.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#deploy-the-app-service-cdn-and-front%C2%A0door" class="anchor"&gt;
  &lt;/a&gt;
  Deploy the App Service, CDN and Front¬†Door
&lt;/h3&gt;

&lt;p&gt;Next, I deployed my app service in conjunction with front door. I used a &lt;a href="https://github.com/Azure-Samples/frontdoor-appservice-vnet-terraform"&gt;terraform script&lt;/a&gt; written by my colleague to do so. Next, I added a CDN to my app service using &lt;a href="https://docs.microsoft.com/en-us/azure/cdn/cdn-add-to-web-app"&gt;this&lt;/a&gt; tutorial. For the purpose of this test, I removed all access restrictions for the app service, so that I could avoid the forbidden access (403) issues. I did this by navigating to the &lt;strong&gt;networking&lt;/strong&gt; tab in my app service resource, and then removing all the access restrictions. You can follow along though these screenshots:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QfHJdrqV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1x5n8a6vxfpmr2uyazto.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QfHJdrqV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1x5n8a6vxfpmr2uyazto.png" alt="networking"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lzp71c5s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/sfx0dnq52y08hsquhocb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lzp71c5s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/sfx0dnq52y08hsquhocb.png" alt="access restriction"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once this is done, you should have &lt;em&gt;3 endpoints&lt;/em&gt;: an App Service endpoint, a CDN endpoint and a Front Door endpoint.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#running-the-locust%C2%A0tests" class="anchor"&gt;
  &lt;/a&gt;
  Running the Locust¬†Tests
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#assumptions" class="anchor"&gt;
  &lt;/a&gt;
  Assumptions
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;The goal of load/performance testing was &lt;strong&gt;not&lt;/strong&gt; to check the correctness of the code or data. Those would require integration or acceptance tests.&lt;/li&gt;
&lt;li&gt;The responsiveness of the different elements of the page were &lt;strong&gt;not&lt;/strong&gt; being tested in the load/performance test.&lt;/li&gt;
&lt;li&gt;The loading time of each components on the map (graphs, content, logos) was &lt;strong&gt;not&lt;/strong&gt; measured since the data points were not being rendered on the initial load.&lt;/li&gt;
&lt;li&gt;The data was embedded as a static geojson in the web app.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#constraints" class="anchor"&gt;
  &lt;/a&gt;
  Constraints
&lt;/h4&gt;

&lt;p&gt;For our customer, we only tested 2 routes (/ and /about) based on how the web app was set up. For our purposes, to keep things simple, I am only testing 1 route (/). If you would like to test more than 1 route, feel free to edit the python script however you'd like by reading the &lt;a href="https://docs.locust.io/en/stable/writing-a-locustfile.html"&gt;locust documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#inputs-amp-controlled-variables" class="anchor"&gt;
  &lt;/a&gt;
  Inputs &amp;amp; Controlled Variables
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Number of concurrent users&lt;/strong&gt;: This value was kept constant at 5000 concurrent users.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Hatching rate&lt;/strong&gt;: This value was kept constant at 10 users being spawned every second.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Time&lt;/strong&gt;: Each test was run for about 20 minutes.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Host&lt;/strong&gt;: This variable was specified based on which infrastructure was being tested. So there were 3 hosts that were tested.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#comparing-and-analyzing-the%C2%A0results" class="anchor"&gt;
  &lt;/a&gt;
  Comparing and Analyzing the¬†Results
&lt;/h3&gt;

&lt;p&gt;Some things to note here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In the &lt;strong&gt;Total Requested&lt;/strong&gt; chart, the green line shows the successful requests, and the red line shows the failures.&lt;/li&gt;
&lt;li&gt;In the &lt;strong&gt;Response Time&lt;/strong&gt; chart, the green line shows the median response time, and the yellow line shows the 90th percentile.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#case-1-just-the-app%C2%A0service" class="anchor"&gt;
  &lt;/a&gt;
  Case 1: Just the App¬†Service
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tudtcmzU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/654mklmg64qcshmemdfr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tudtcmzU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/654mklmg64qcshmemdfr.png" alt="case1 dashboard"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J8hJu0-E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xrizb3jhlvk4mj84y5ka.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J8hJu0-E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xrizb3jhlvk4mj84y5ka.png" alt="case1 charts"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#case-2-app-service-with-a%C2%A0cdn" class="anchor"&gt;
  &lt;/a&gt;
  Case 2: App Service with a¬†CDN
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LTwegfez--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3uyp0e1x82o8f6o6ulwj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LTwegfez--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3uyp0e1x82o8f6o6ulwj.png" alt="case2 dashboard"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dzoyVQYm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2zysvm4fbvcs759zm9g1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dzoyVQYm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2zysvm4fbvcs759zm9g1.png" alt="case2 charts"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#case-3-app-service-with-front%C2%A0door" class="anchor"&gt;
  &lt;/a&gt;
  Case 3: App Service with Front¬†Door
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--13zwTyEn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/eod9ddhsb47cmfwsl27l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--13zwTyEn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/eod9ddhsb47cmfwsl27l.png" alt="case3 dashboard"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3PgWrWCq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dpvpflegin2epdo1u6j1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3PgWrWCq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dpvpflegin2epdo1u6j1.png" alt="case3 charts"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#analysis" class="anchor"&gt;
  &lt;/a&gt;
  Analysis
&lt;/h4&gt;

&lt;p&gt;If you have been following along with the set up, deployment and running test, the next step is to analyze our data and understand the metrics we use to measure performance. For my particular example, I will be looking at the response time, error rate, requests per second and peak response time. Before we dive into the comparisons, here are some benchmarks and explanations for comparison:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In 2020, &lt;a href="https://backlinko.com/page-speed-stats"&gt;the average Time-To-First-Byte&lt;/a&gt; (TTFB) speed was found to be 1.28 seconds (1280ms) on desktop and 2.59 seconds (1590ms) on mobile. However, Google's best practice is to achieve a time under 200ms.&lt;/li&gt;
&lt;li&gt;On average, larger scale applications can reach ~2000 requests per second. Since the application I am testing is lightweight, these numbers might not be very useful. I will still do an analysis so you can do it for yourself.&lt;/li&gt;
&lt;li&gt;Similar to the average response time, the peak response time (PRT) is the measurement of the longest responses for all requests coming through the server. This is a good indicator of performance pain points in the application.&lt;/li&gt;
&lt;li&gt;According to &lt;a href="https://httparchive.org/"&gt;HTTPArchive&lt;/a&gt; and their &lt;a href="https://httparchive.org/reports/page-weight"&gt;page weight report&lt;/a&gt;, the average size of a website is 1.966 Mb for desktop and 1.778 Mb for mobile at the time of writing. Google's best practice is to be below 0.5 Mb.

&lt;ul&gt;
&lt;li&gt;The web app we are testing is very lightweight, so it's only 949 bytes. However, our customer's app size was about 4.5 Mb, which was larger to load.
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EUG2owo---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ciuu3vsuzikt4yiqm5tk.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EUG2owo---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ciuu3vsuzikt4yiqm5tk.PNG" alt="table"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#what-do-the-errors-mean" class="anchor"&gt;
  &lt;/a&gt;
  What do the errors mean?
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;104 Connection Reset by Peer&lt;/em&gt;: Connection Reset error indicates that a TCP RST was received, and the connection is now closed. This occurs when a packet is sent from the user's end of the connection, but the other end does not recognize the connection; it will send back a packet with the RST bit set in order to forcibly close the connection. This usually happens when there is too much load on the server.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;502 Bad-Gateway&lt;/em&gt;: Bad Gateway server error response code indicates that the server, while acting as a gateway or proxy, received an invalid response from the upstream server.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;503 Service unavailable&lt;/em&gt;: Service Unavailable server error response code indicates that the server is not ready to handle the request. This can also be a result of an uncaught error in your code.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;504 Gateway-Timeout&lt;/em&gt;: Gateway Timeout server error response code indicates that the server, while acting as a gateway or proxy, did not get a response in time from the upstream server that it needed in order to complete the request.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#our-final%C2%A0choice" class="anchor"&gt;
  &lt;/a&gt;
  Our Final¬†Choice
&lt;/h3&gt;

&lt;p&gt;As we can see in the analysis section, the app service performs quite poorly by itself with poor average TTFB, many failures, high peak response time and (for a lightweight application) low requests per seconds. On the other hand, the CDN and Front Door solutions perform pretty much on par given most of the metrics. For our purposes, we picked Front Door because we needed a WAF (Web Application Firewall), which is still in preview for CDN.&lt;/p&gt;




&lt;p&gt;I hope reading about how we went about performance/load testing is helpful in setting up your own testing practices! Please feel free to comment or DM me on Twitter (&lt;a href="https://twitter.com/itstavishi"&gt;@itstavishi&lt;/a&gt;) with any questions, updates or comments you would like me to address!&lt;/p&gt;

</description>
      <category>testing</category>
      <category>loadtesting</category>
      <category>azure</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Colors and the Web</title>
      <author>Chris DeMars</author>
      <pubDate>Wed, 09 Dec 2020 18:31:44 +0000</pubDate>
      <link>https://dev.to/chrisdemars/colors-and-the-web-2fnh</link>
      <guid>https://dev.to/chrisdemars/colors-and-the-web-2fnh</guid>
      <description>&lt;p&gt;How are things going friends? I know 2020 has been a garbage fire but we are almost through it. Cheers to 2021! I wanted to bring you an article on color, the web, and how CVD's (color vision deficiencies) can affect the user experience. We aren't going too in-depth on a medical level, but I wanted to explain how color plays a big part.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#color-vision-deficiencies" class="anchor"&gt;
  &lt;/a&gt;
  Color Vision Deficiencies
&lt;/h2&gt;

&lt;p&gt;The acronym CVD is something you may or may not have heard of in your journey of working on the web or software. In the most plain terms it means color blindness. According to the American Optometric Association, it means:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Color vision deficiency is the inability to distinguish certain shades of color.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That being said, it does not mean you only see in shades of gray 100% of the time, but it is a replacement or absence of colors that someone with normal vision can see.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cvd-by-the-numbers" class="anchor"&gt;
  &lt;/a&gt;
  CVD by the Numbers
&lt;/h2&gt;

&lt;p&gt;What do the numbers look like for people who are color blind? Glad you asked and the numbers might surprise you if you were already unaware.&lt;/p&gt;

&lt;p&gt;üôç‚Äç‚ôÇÔ∏è &lt;strong&gt;1 in 12 men experience some type of CVD&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;üôç‚Äç‚ôÄÔ∏è &lt;strong&gt;1 in 200 women experience some type of CVD&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Color blindness is mostly due to genetics, with women being the carrier of the gene. For more information check out the link below!&lt;/p&gt;

&lt;p&gt;‚û° &lt;a href="https://www.colourblindawareness.org/colour-blindness/inherited-colour-vision-deficiency/real-family-tree/"&gt;https://www.colourblindawareness.org/colour-blindness/inherited-colour-vision-deficiency/real-family-tree/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#types-of-cvd" class="anchor"&gt;
  &lt;/a&gt;
  Types of CVD
&lt;/h2&gt;

&lt;p&gt;When it comes to types of color blindness, we have 4 main types which I have listed below in comparison to normal color vision:&lt;/p&gt;

&lt;p&gt;Normal color vision&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yoJAzJ7z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/o8xnm30qm7240c8t4fcq.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yoJAzJ7z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/o8xnm30qm7240c8t4fcq.jpg" alt="normal color vison"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Deuteranopia

&lt;ul&gt;
&lt;li&gt;Reduced sensitivity to green light and it is the most common type of color vision deficiency&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TBRt2TYw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8x36abyv1ofkvmt7sf9k.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TBRt2TYw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8x36abyv1ofkvmt7sf9k.jpg" alt="Deuteranopia color blindness"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Protanopia

&lt;ul&gt;
&lt;li&gt;Reduced sensitivity to red light&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MqUUAWBP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/d9psaky1g4llc8eza840.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MqUUAWBP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/d9psaky1g4llc8eza840.jpg" alt="Protanopia color blindness"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Tritanopia

&lt;ul&gt;
&lt;li&gt;Reduced sensitivity to blue light and is extremely rare&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lb-HGJLw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/a04nqu208kzfx3bnippx.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lb-HGJLw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/a04nqu208kzfx3bnippx.jpg" alt="Tritanopia color blindness"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Monochromatic

&lt;ul&gt;
&lt;li&gt;Vision in shades of gray. The most rare type of CVD. By the numbers 1 in 33,000 people experience this type of CVD&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WWXwXJCH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wuxn351ip1m5bgku4kws.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WWXwXJCH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wuxn351ip1m5bgku4kws.jpg" alt="Monocrhomatic color blindness"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#problems-we-face" class="anchor"&gt;
  &lt;/a&gt;
  Problems We Face
&lt;/h2&gt;

&lt;p&gt;There are a lot of problems when it comes to accessibility as a whole but two of the biggest and most often are low hanging fruit are color contrast and communication through color.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#color-contrast" class="anchor"&gt;
  &lt;/a&gt;
  Color Contrast
&lt;/h3&gt;

&lt;p&gt;Color contrast is how the foreground color "pops" off the background color. The Bureau of Internet Accessibility puts it in more technical terms.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Color contrast is the difference in light between font (or anything in the foreground) and its background. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When determining colors to use always keep the user in mind. Too many times we build things that we think are really cool and almost never seem to put ourselves in the users shoes. This is one piece of the puzzle we have to be cognizant of.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hdrR9UPb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/eqyn2641bkoxinxcil6i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hdrR9UPb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/eqyn2641bkoxinxcil6i.png" alt="Failing color contrast example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The above colors fail because the lightness of the gray foreground color almost blends in with the white background color. The contrast ratios vary according to the size of the text. This fails at a small text size, but it would pass at a larger text size.&lt;/p&gt;

&lt;p&gt;If you are looking for more information about color contrast, levels of conformance (A, AA, AAA) and how to test and find the right combinations, check out my article below.&lt;/p&gt;

&lt;p&gt;‚û°Ô∏è &lt;a href="https://uxdesign.cc/chrome-devtools-accessible-colors-300ec462a63c"&gt;Chrome DevTools: Accessible Colors&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#communication-through-color" class="anchor"&gt;
  &lt;/a&gt;
  Communication Through Color
&lt;/h3&gt;

&lt;p&gt;This is a very big problem. One thing that we can not do is communicate &lt;strong&gt;SOLELY&lt;/strong&gt; through the use of color. Perfect example, I was working at a company in Michigan and saw a post on one of our intranet portals. It was a new tool that was being built for internal users yet it was built to communicate intent with color only. There were ZERO fallbacks as to what those colors meant. &lt;/p&gt;

&lt;p&gt;To me this was a red flag and I called it out. Long story short, the legal team caught wind of it and I was pulled into an office to discuss "why I shouldn't call out things like that." The convo turned out with me getting praise for ruffling feathers about the importance of accessibility.&lt;/p&gt;

&lt;p&gt;Something like the example below would not work if by chance you said "change your status to red, green or yellow." What if the person using the tool can't see those colors? What if that user does in fact experience monochromatic color blindness? Being exclusive to you users is not the path you want to travel down. It comes with a price.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Below is an example of communication through color.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Normal color vision&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ESBgyQP7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/nogpkgkken4hytsy0egw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ESBgyQP7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/nogpkgkken4hytsy0egw.png" alt="Chart with colors"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Monochromatic color vision&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--owPht2Xn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ck5mjvwsgai7y553so0z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--owPht2Xn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ck5mjvwsgai7y553so0z.png" alt="Chart with monochromatic colors"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solutions" class="anchor"&gt;
  &lt;/a&gt;
  Solutions
&lt;/h2&gt;

&lt;p&gt;There are a few tools out there that can help with figuring out what colors are best. Chrome has it's own contrast checker built in to the DevTools which you can learn more about in the article I posted above that I wrote.&lt;/p&gt;

&lt;p&gt;Lea Verou also has a great tool that I tend to highlight called &lt;a href="https://contrast-ratio.com/"&gt;Contrast Ratio&lt;/a&gt;. It allows you to input a color for the foreground and background and see if they pass, you can also swap the colors to check them as well.&lt;/p&gt;

&lt;p&gt;Our friends at WebAIM have a great tool as well, &lt;a href="https://webaim.org/resources/contrastchecker/"&gt;Contrast Checker&lt;/a&gt;. It is very insightful and has a link at the bottom of the page to check the contrast of links.&lt;/p&gt;

&lt;p&gt;One of the biggest ways to tackle color contrast issues in my opinion is through communication. Work and communicate with your marketing or design teams to come up with the best, accessible color combinations you can as to not leave out users.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up" class="anchor"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;As you can see, color is &lt;strong&gt;VERY&lt;/strong&gt; important on the web. Users have to be able to see what they are doing and have an amazing user experience at the same time. One thing I would hate to happen is to ship an something that someone couldn't use. Knowing that my experience was not inclusive and not doing anything about it.&lt;/p&gt;

&lt;p&gt;We work on the web for a reason, probably multiple reasons, but the main reason being the user. We are the voice of the user and must do everything in power to advocate for them. It is why I do what I do. That being said I leave you with this quote, one of my personal ones.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Accessibility is &lt;strong&gt;NOT&lt;/strong&gt; a requirement, it is a &lt;strong&gt;MUST&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>a11y</category>
      <category>ux</category>
      <category>webdev</category>
      <category>inclusion</category>
    </item>
    <item>
      <title>14 Awesome JavaScript Array Tips You Should Know About</title>
      <author>Kai</author>
      <pubDate>Wed, 09 Dec 2020 18:31:07 +0000</pubDate>
      <link>https://dev.to/kais_blog/14-awesome-javascript-array-tips-you-should-know-about-1d0m</link>
      <guid>https://dev.to/kais_blog/14-awesome-javascript-array-tips-you-should-know-about-1d0m</guid>
      <description>&lt;p&gt;&lt;em&gt;This post was originally published at &lt;a href="https://kais.blog/p/14-awesome-javascript-array-tips-you-should-know-about"&gt;kais.blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you like my content and you want to see more, please &lt;a href="https://twitter.com/intent/follow?screen_name=kais_blog"&gt;follow me on Twitter&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Questions, feedback or just wanna chat? Come and join my &lt;a href="https://discord.gg/fvGZsz6uXM"&gt;Discord&lt;/a&gt;!&lt;/p&gt;




&lt;p&gt;Arrays are everywhere. Whenever you are working with JavaScript you are probably working with one or multiple arrays. Many times I've seen programmers using specific libraries to work with their arrays. However, I'd like to show you 14 awesome tips about JavaScript arrays, you may not have known. This way, you can get rid of external dependencies and use these simple code snippets instead.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#1-how-to-use-array-destructuring"&gt;How to Use &lt;strong&gt;Array Destructuring&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2-how-to-create-a-duplicate-free-version-of-an-array"&gt;How to &lt;strong&gt;Create&lt;/strong&gt; a &lt;strong&gt;Duplicate-free Version&lt;/strong&gt; of an Array&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#3-how-to-find-all-elements-matching-a-condition"&gt;How to &lt;strong&gt;Find All&lt;/strong&gt; Elements Matching a Condition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#4-how-to-remove-all-falsy-values-from-an-array"&gt;How to &lt;strong&gt;Remove&lt;/strong&gt; All &lt;strong&gt;Falsy Values&lt;/strong&gt; From an Array&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#5-how-to-find-the-first-element-matching-a-condition"&gt;How to &lt;strong&gt;Find&lt;/strong&gt; the &lt;strong&gt;First&lt;/strong&gt; Element Matching a Condition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#6-how-to-check-if-any--every-element-matches-a-condition"&gt;How to &lt;strong&gt;Check&lt;/strong&gt; If &lt;strong&gt;Any / Every&lt;/strong&gt; Element Matches a Condition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#7-how-to-find-the-intersection-of-two-arrays"&gt;How to &lt;strong&gt;Find&lt;/strong&gt; the &lt;strong&gt;Intersection&lt;/strong&gt; of Two Arrays&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#8-how-to-find-the-difference-of-two-arrays"&gt;How to &lt;strong&gt;Find&lt;/strong&gt; the &lt;strong&gt;Difference&lt;/strong&gt; of Two Arrays&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#9-how-to-find-the-union-of-two-arrays"&gt;How to &lt;strong&gt;Find&lt;/strong&gt; the &lt;strong&gt;Union&lt;/strong&gt; of Two Arrays&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#10-how-to-retrieve-the-first-and-last-element"&gt;How to &lt;strong&gt;Retrieve&lt;/strong&gt; the &lt;strong&gt;First&lt;/strong&gt; and &lt;strong&gt;Last&lt;/strong&gt; Element&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#11-how-to-prepend--append-an-element-to-an-array"&gt;How to &lt;strong&gt;Prepend / Append&lt;/strong&gt; an &lt;strong&gt;Element&lt;/strong&gt; to an Array&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#12-how-to-copy-an-array"&gt;How to &lt;strong&gt;Copy&lt;/strong&gt; an &lt;strong&gt;Array&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#13-how-to-find-the-minimum-and-maximum-value-from-an-array"&gt;How to &lt;strong&gt;Find&lt;/strong&gt; the &lt;strong&gt;Minimum&lt;/strong&gt; and &lt;strong&gt;Maximum&lt;/strong&gt; Value From an Array&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#14-how-to-sort-an-array-of-numbers"&gt;How to &lt;strong&gt;Sort&lt;/strong&gt; an Array of &lt;strong&gt;Numbers&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#1-how-to-use-array-destructuring" class="anchor"&gt;
  &lt;/a&gt;
  1. How to Use Array Destructuring
&lt;/h1&gt;

&lt;p&gt;Array destructuring allows you to extract single elements from a JavaScript array with a sweet syntax. Take a look at the following example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçé&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçå&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçí&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;apple&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;apple&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// "üçé"&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;banana&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;banana&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// "üçå"&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cherry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cherry&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// "üçí"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The same could be rewritten using array destructuring:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;apple&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;banana&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cherry&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçé&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçå&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçí&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;apple&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// "üçé"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;banana&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// "üçå"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cherry&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// "üçí"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Awesome! Also, you can skip certain elements, if you want to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;apple&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cherry&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçé&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçå&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçí&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;apple&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// "üçé"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cherry&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// "üçí"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Note the &lt;em&gt;empty slot&lt;/em&gt; above. If you just leave out the variable name and add another comma, you can easily skip any element you don't need.&lt;/p&gt;

&lt;p&gt;Here are two other awesome things you can do with array destructuring:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Assign a default value for a missing element.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;apple&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;banana&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cherry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;melon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçâ&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçé&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçå&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçí&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;melon&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// "üçâ"&lt;/span&gt;

&lt;span class="c1"&gt;// Get all remaining elements from an array using the spread operator (`...`).&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;apple&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;remainingFruits&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçé&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçå&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçí&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;remainingFruits&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ["üçå", "üçí"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;There's even more you can do with array destructuring. Maybe I'll write another post about this later.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-how-to-create-a-duplicatefree-version-of-an-array" class="anchor"&gt;
  &lt;/a&gt;
  2. How to Create a Duplicate-free Version of an Array
&lt;/h1&gt;

&lt;p&gt;When you want to remove all duplicates from an array, people often use a library like &lt;code&gt;lodash&lt;/code&gt;. The library is by no means bad, however, there's a much easier way to do it. You can get all unique values without any external dependency. To do that, create a new &lt;code&gt;Set&lt;/code&gt; from your array. Then, use the spread operator (&lt;code&gt;...&lt;/code&gt;) to create a new array from your set. Because a set can only hold unique values, all duplicates are now removed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçé&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçå&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçå&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçí&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçé&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// Create a new set from `fruits`, thereby removing all duplicates.&lt;/span&gt;
&lt;span class="c1"&gt;// Then, create a new array from it.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;uniqueFruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;uniqueFruits&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ["üçé", "üçå", "üçí"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#3-how-to-find-all-elements-matching-a-condition" class="anchor"&gt;
  &lt;/a&gt;
  3. How to Find All Elements Matching a Condition
&lt;/h1&gt;

&lt;p&gt;If you are working with arrays, sometimes you'd like to remove some elements. Maybe you want to remove odd numbers, maybe you are just looking for short strings. Whatever you wish for, you can use &lt;code&gt;Array#filter&lt;/code&gt; for that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Kai&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Katharina&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Tim&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// Keep names that are shorter than 4 characters.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;shortNames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;shortNames&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ["Kai", "Tim"]&lt;/span&gt;

&lt;span class="c1"&gt;// Find a name that are longer than 10 characters.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;extraLongNames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;extraLongNames&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// []&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#4-how-to-remove-all-falsy-values-from-an-array" class="anchor"&gt;
  &lt;/a&gt;
  4. How to Remove All Falsy Values From an Array
&lt;/h1&gt;

&lt;p&gt;Sometimes, your array contains falsy values, and you want to remove them. Falsy values are &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;""&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;, and &lt;code&gt;NaN&lt;/code&gt;. You can filter them out very easily. For that, you can use the &lt;code&gt;Array#filter&lt;/code&gt; method again and simply check the element's truthiness:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçé&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçå&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçí&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// Keep all array elements where `fruit` is truthy.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filteredFruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fruit&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filteredFruits&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ["üçé", "üçå", "üçí"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#5-how-to-find-the-first-element-matching-a-condition" class="anchor"&gt;
  &lt;/a&gt;
  5. How to Find the First Element Matching a Condition
&lt;/h1&gt;

&lt;p&gt;Similar to 3., sometimes we just need the first element that matches our condition. Therefore, we can make use of the &lt;code&gt;Array#find&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Kai&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Katharina&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Tim&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// Find a name that is shorter than 4 characters.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;shortName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;shortName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// "Kai"&lt;/span&gt;

&lt;span class="c1"&gt;// Find a name that is longer than 10 characters.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;extraLongName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;extraLongName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#6-how-to-check-if-any-every-element-matches-a-condition" class="anchor"&gt;
  &lt;/a&gt;
  6. How to Check If Any / Every Element Matches a Condition
&lt;/h1&gt;

&lt;p&gt;JavaScript arrays implement two awesome methods. &lt;code&gt;Array#some&lt;/code&gt; and &lt;code&gt;Array#every&lt;/code&gt;. Often, I'll notice that many people don't know these two. You can use them, to check whether any element (&lt;code&gt;Array#some&lt;/code&gt;) or every element (&lt;code&gt;Array#every&lt;/code&gt;) matches a certain condition.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Kai&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Katharina&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Tim&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// Check if ANY name is shorter than 4 characters.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;containsShortName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;containsShortName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;

&lt;span class="c1"&gt;// Check if EVERY name is longer than 3 characters.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;containsOnlyLongNames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;every&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;containsOnlyLongNames&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#7-how-to-find-the-intersection-of-two-arrays" class="anchor"&gt;
  &lt;/a&gt;
  7. How to Find the Intersection of Two Arrays
&lt;/h1&gt;

&lt;p&gt;When comparing two arrays, you might want to find out, which elements are included in both arrays. That means, we want to find the intersection of both arrays. Therefore, we can use a combination of &lt;code&gt;Array#filter&lt;/code&gt; and &lt;code&gt;Array#includes&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fruitsA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçé&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçå&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçí&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fruitsB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçí&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçÜ&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçâ&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçå&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;intersection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fruitsA&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fruit&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fruitsB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;intersection&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ["üçå", "üçí"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#8-how-to-find-the-difference-of-two-arrays" class="anchor"&gt;
  &lt;/a&gt;
  8. How to Find the Difference of Two Arrays
&lt;/h1&gt;

&lt;p&gt;Similar to 7. we can use a combination of &lt;code&gt;Array#filter&lt;/code&gt; and &lt;code&gt;Array#includes&lt;/code&gt; to find the difference between two arrays. The implementation differs on whether you'd like to include all elements from the second array that are not in the first, or not.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fruitsA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçé&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçå&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçí&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fruitsB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçí&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçÜ&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçâ&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçå&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// Keep all elements from `fruitsA` that are not included in `fruitsB`. &lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;difference&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fruitsA&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fruit&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;fruitsB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;difference&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ["üçé"]&lt;/span&gt;

&lt;span class="c1"&gt;// Keep all elements from `fruitsA` that are not included in `fruitsB` and vice versa.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;difference&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;fruitsA&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fruit&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;fruitsB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;fruitsB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fruit&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;fruitsA&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;difference&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ["üçé", "üçÜ", "üçâ"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#9-how-to-find-the-union-of-two-arrays" class="anchor"&gt;
  &lt;/a&gt;
  9. How to Find the Union of Two Arrays
&lt;/h1&gt;

&lt;p&gt;Maybe you want to merge two arrays and but throw out all duplicates. Good thing, you've learned how to remove duplicates in tip 2. We'll use the spread operator (&lt;code&gt;...&lt;/code&gt;) and a set again.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fruitsA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçé&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçå&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçí&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fruitsB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçí&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçÜ&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçâ&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçå&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// Merge `fruitsA` and `fruitsB`. Then, use a set for removing duplicates.&lt;/span&gt;
&lt;span class="c1"&gt;// After that, create a new array from the set.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;union&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;([...&lt;/span&gt;&lt;span class="nx"&gt;fruitsA&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;fruitsB&lt;/span&gt;&lt;span class="p"&gt;])];&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;union&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ["üçé", "üçå", "üçí", "üçÜ", "üçâ"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#10-how-to-retrieve-the-first-and-last-element" class="anchor"&gt;
  &lt;/a&gt;
  10. How to Retrieve the First and Last Element
&lt;/h1&gt;

&lt;p&gt;From time to time, the only element you are interested in is the first or last one. An easy way to access them are the &lt;code&gt;Array#shift&lt;/code&gt; and &lt;code&gt;Array#pop&lt;/code&gt; methods. However, you should note, that the first and last element will be removed from the array. Sometimes, you don't want to modify your original array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçé&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçå&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçí&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// Find the first element. Attention! This modifies the original array.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// "üçé"&lt;/span&gt;

&lt;span class="c1"&gt;// Find the last element. Attention! This modifies the original array.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;last&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;last&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// "üçí"&lt;/span&gt;

&lt;span class="c1"&gt;// Remember, both methods modify the original array.&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ["üçå"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#11-how-to-prepend-append-an-element-to-an-array" class="anchor"&gt;
  &lt;/a&gt;
  11. How to Prepend / Append an Element to an Array
&lt;/h1&gt;

&lt;p&gt;You'll know this probably. However, just in case, I'm telling you how you can prepend or append an element to a JavaScript array. While almost everyone knows, how to add an element to the end of an array. Sometimes, people don't know how to add an element to the beginning. I'll show you both ways. Also, I'll show you how to add multiple elements at once.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçé&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçå&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçí&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// Append an element with `Array#push`.&lt;/span&gt;
&lt;span class="c1"&gt;// This means, we'll add it to the end.&lt;/span&gt;
&lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçâ&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ["üçé", "üçå", "üçí", "üçâ"];&lt;/span&gt;

&lt;span class="c1"&gt;// Prepend an element with `Array#unshift`.&lt;/span&gt;
&lt;span class="c1"&gt;// This means, we'll add it to the beginning.&lt;/span&gt;
&lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unshift&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçÜ&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ["üçÜ", "üçé", "üçå", "üçí", "üçâ"];&lt;/span&gt;

&lt;span class="c1"&gt;// You can also add multiple items at once.&lt;/span&gt;
&lt;span class="c1"&gt;// Works with `push` and `unshift`.&lt;/span&gt;
&lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçç&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçä&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unshift&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçç&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçä&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Also, you could use the spread operator (...).&lt;/span&gt;
&lt;span class="c1"&gt;// This would all elements from another array.&lt;/span&gt;
&lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(...[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçç&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçä&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unshift&lt;/span&gt;&lt;span class="p"&gt;(...[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçç&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçä&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#12-how-to-copy-an-array" class="anchor"&gt;
  &lt;/a&gt;
  12. How to Copy an Array
&lt;/h1&gt;

&lt;p&gt;As you have seen in the tips before, some actions modify your original array. Sometimes this is undesirable. Thus, we need a way to copy our array. An easy way to do this, is the &lt;code&gt;Array#slice&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// This example is similar to tip 11.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fruitsA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçé&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçå&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçí&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// Here, we copy the `fruitsA` array.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fruitsB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fruitsA&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// Find the first element. Attention! This modifies our `fruitsB` array.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fruitsB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// "üçé"&lt;/span&gt;

&lt;span class="c1"&gt;// Find the last element. Attention! This modifies our `fruitsB` array.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;last&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fruitsB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;last&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// "üçí"&lt;/span&gt;

&lt;span class="c1"&gt;// This time, our original arrays stays intact.&lt;/span&gt;
&lt;span class="c1"&gt;// Only `fruitsB` has changed.&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fruitsA&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ["üçé", "üçå", "üçí"]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fruitsB&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ["üçå"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;CAUTION! This does not create a deep copy. Objects and nested arrays are passed by reference. So, let's say &lt;code&gt;fruitsA&lt;/code&gt; would contain an object, and you'd copy the array into &lt;code&gt;fruitsB&lt;/code&gt;. Then, you'd take out this object from &lt;code&gt;fruitsB&lt;/code&gt; and modify it. You might think this would leave your initial array intact. But, sorry to say that, you are wrong. The object you retrieved from &lt;code&gt;fruitsB&lt;/code&gt; still referenced the object from &lt;code&gt;fruitsA&lt;/code&gt;. Thus, any change to the object in &lt;code&gt;fruitsB&lt;/code&gt; would be mirrored to the same object in &lt;code&gt;fruitsA&lt;/code&gt;. This is important to remember! For deep copies, consider using a dedicated library.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#13-how-to-find-the-minimum-and-maximum-value-from-an-array" class="anchor"&gt;
  &lt;/a&gt;
  13. How to Find the Minimum and Maximum Value From an Array
&lt;/h1&gt;

&lt;p&gt;If you are working with a lot of numbers, there'll be the time you'll need to find the minimum or maximum value. Probably, you know that you can use &lt;code&gt;Math#min&lt;/code&gt; and &lt;code&gt;Math#max&lt;/code&gt;. Combine that with the spread operator (&lt;code&gt;...&lt;/code&gt;) and you can easily check the full array for its minimum and maximum value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;priceHistory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;450&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;330&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;600&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;910&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// Find the minimum value.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;minimumPrice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;priceHistory&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;minimumPrice&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 330&lt;/span&gt;

&lt;span class="c1"&gt;// Find the maximum value.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;maximumPrice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;priceHistory&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;maximumPrice&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 910&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#14-how-to-sort-an-array-of-numbers" class="anchor"&gt;
  &lt;/a&gt;
  14. How to Sort an Array of Numbers
&lt;/h1&gt;

&lt;p&gt;If you want to sort an array, you'll probably use &lt;code&gt;Array#sort&lt;/code&gt;. However, numbers aren't sorted the way you'd think. When sorting arrays in JavaScript, the elements are converted to strings by default. Then, the elements are sorted by comparing their UTF-16 codepoints. For numbers, this could result in an unexpected order. Therefore, we'll change the default behaviour and pass a function to the &lt;code&gt;Array#sort&lt;/code&gt; method. It works by always comparing two elements (&lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;) at a time. If the result is less than 0, &lt;code&gt;a&lt;/code&gt; comes first. If the result is greater than 0, &lt;code&gt;b&lt;/code&gt; comes first.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// Sort in ascending order. Attention! This modifies the original array.&lt;/span&gt;
&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [9, 11, 15, 23, 52]&lt;/span&gt;

&lt;span class="c1"&gt;// Sort in descending order. Attention! Again, this modifies the original array.&lt;/span&gt;
&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [52, 23, 15, 11, 9]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Arrays can be used for a wide range of things. Often, there are simple native ways that do the job. Maybe you already knew all of these tips. Maybe not. Nevertheless, I hope this post was interesting for you. I'll try to update this post with new tips in the future.&lt;/p&gt;

&lt;p&gt;Thanks a lot for reading this post. Please consider sharing it with your friends and colleagues. See you soon!&lt;/p&gt;




&lt;p&gt;If you like my content and you want to see more, please &lt;a href="https://twitter.com/intent/follow?screen_name=kais_blog"&gt;follow me on Twitter&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Questions, feedback or just wanna chat? Come and join my &lt;a href="https://discord.gg/fvGZsz6uXM"&gt;Discord&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This post was originally published at &lt;a href="https://kais.blog/p/14-awesome-javascript-array-tips-you-should-know-about"&gt;kais.blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Why All Developers Should Blog - No Excuses!</title>
      <author>Fahad Imran üë®‚Äçüíª</author>
      <pubDate>Wed, 09 Dec 2020 18:22:32 +0000</pubDate>
      <link>https://dev.to/codewithfahad/why-all-developers-should-blog-no-excuses-4a7c</link>
      <guid>https://dev.to/codewithfahad/why-all-developers-should-blog-no-excuses-4a7c</guid>
      <description>&lt;h2&gt;
  &lt;a href="#why-developers-fear-blogging" class="anchor"&gt;
  &lt;/a&gt;
  üò® Why Developers fear Blogging?
&lt;/h2&gt;

&lt;p&gt;Blogging can be an &lt;strong&gt;intimidating task&lt;/strong&gt;. Especially when you're new in the field of development and programming.&lt;/p&gt;

&lt;p&gt;Let's talk about the common reason new developers choose to &lt;strong&gt;NOT&lt;/strong&gt; start blogging:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I don't know enough to write about it.&lt;/li&gt;
&lt;li&gt;If I make a mistake people will criticize me.&lt;/li&gt;
&lt;li&gt;My writing skills are poor.&lt;/li&gt;
&lt;li&gt;Who will read my blogs?&lt;/li&gt;
&lt;li&gt;What do I blog about?&lt;/li&gt;
&lt;li&gt;What's the point of blogging?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now let's &lt;strong&gt;address&lt;/strong&gt; these concerns one by one. By the end of this blog post hopefully, some of your fears and doubts about blogging will be cleared and you'll be motivated to start writing! üí™&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i-dont-know-enough-to-write-about-it" class="anchor"&gt;
  &lt;/a&gt;
  üòï I don't know enough to write about it
&lt;/h2&gt;

&lt;p&gt;It's fine. You'll never know it all! No one does. &lt;/p&gt;

&lt;p&gt;But when you'll start writing about a topic, it will &lt;strong&gt;improve&lt;/strong&gt; your understanding immensely. When you explain a topic in your own words you'll grasp it more deeply and it is, in my opinion, the best form of learning. You'll realize what parts you didn't understand and where you went wrong. &lt;/p&gt;

&lt;p&gt;This will result in a very effective and thorough understanding of the topic. And the best part is, during the writing process you'll research more about the topic, read articles, watch videos to broaden your knowledge about the technology or framework. &lt;/p&gt;

&lt;p&gt;Thus, once you've written about a topic you'll be &lt;strong&gt;confident&lt;/strong&gt; in your understanding and skills!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#if-i-make-a-mistake-people-will-criticize-me" class="anchor"&gt;
  &lt;/a&gt;
  üò• If I make a mistake people will criticize me
&lt;/h2&gt;

&lt;p&gt;Totally not a big deal. No one is &lt;strong&gt;perfect&lt;/strong&gt;. And you shouldn't fear the judgment of people. If people criticize you then there will be even more that support you and admire your work. &lt;/p&gt;

&lt;p&gt;Plus, there are great communities like Dev.to and Hashnode that welcome new developers with open arms. You can start off here and you'll be amazed by the response! Just start!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-writing-skills-are-poor" class="anchor"&gt;
  &lt;/a&gt;
  üôà My writing skills are poor
&lt;/h2&gt;

&lt;p&gt;Not to worry. English is my &lt;strong&gt;second language&lt;/strong&gt;. And I see many developers that blog consistently and English is not their primary language. &lt;/p&gt;

&lt;p&gt;The only way to &lt;strong&gt;improve&lt;/strong&gt; your writing skills is to &lt;strong&gt;write more&lt;/strong&gt;. Once you start writing, your expression will improve and you'll be able to write elegantly and with fewer mistakes. &lt;/p&gt;

&lt;p&gt;I would recommend using tools like Grammarly to avoid grammatical and spelling mistakes when starting out.&lt;/p&gt;

&lt;p&gt;The simple fact of the matter is that if your blogs provide value to others, people don't care too much about your English or sentence structure. So, don't freak out about language and start writing! It's the &lt;strong&gt;fastest&lt;/strong&gt; way to improve.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#who-will-read-my-blogs" class="anchor"&gt;
  &lt;/a&gt;
  üöÄ Who will read my blogs?
&lt;/h2&gt;

&lt;p&gt;You'll be &lt;strong&gt;amazed&lt;/strong&gt; at how many people will like your work. &lt;/p&gt;

&lt;p&gt;What you must understand is that whatever level you are in the field of programming or development, there are many people who are going through the process that you went through.&lt;/p&gt;

&lt;p&gt;Suppose you know about HTML or CSS, but are afraid that you don't know any frameworks so you have nothing to contribute. Wrong!&lt;/p&gt;

&lt;p&gt;Write about what you know! There are many developers who are just starting out and they don't know HTML or CSS yet. Your blogs will &lt;strong&gt;appeal&lt;/strong&gt; to them and they'll read and benefit from them. &lt;/p&gt;

&lt;p&gt;And as you grow as a developer and gain more experience, you can write about new things you learn and thus &lt;strong&gt;diversify&lt;/strong&gt; your target audience. &lt;/p&gt;

&lt;p&gt;So, don't worry about who'll read your blogs because many people would!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-do-i-blog-about" class="anchor"&gt;
  &lt;/a&gt;
  üíª What do I blog about?
&lt;/h2&gt;

&lt;p&gt;Anything and Everything! &lt;/p&gt;

&lt;p&gt;Whatever you are learning currently or have learned in the past. Blog about the technologies are familiar with and enjoy using. &lt;/p&gt;

&lt;p&gt;Maybe you encountered a &lt;strong&gt;bug&lt;/strong&gt; and &lt;strong&gt;solved it&lt;/strong&gt;. Blog about it!&lt;/p&gt;

&lt;p&gt;Maybe you go to &lt;strong&gt;college&lt;/strong&gt; and are majoring in &lt;strong&gt;Computer Science&lt;/strong&gt;, you can share insights about your journey, what you're learning, your experiences!&lt;/p&gt;

&lt;p&gt;Maybe you are &lt;strong&gt;looking for a job&lt;/strong&gt; and interviewing in different companies. You can blog about the &lt;strong&gt;interview process&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Maybe you know &lt;strong&gt;front-end development&lt;/strong&gt; or you are good at &lt;strong&gt;DevOps&lt;/strong&gt;. Blog!&lt;/p&gt;

&lt;p&gt;Maybe you have bookmarked &lt;strong&gt;cool resources&lt;/strong&gt; that can help people who are new to development. Share away!&lt;/p&gt;

&lt;p&gt;Think of blogging as a way to &lt;strong&gt;document&lt;/strong&gt; your journey. Everyone is unique and there is never a shortage of topics to write about. Imagine your blog as a way to solve problems and help other developers.&lt;/p&gt;

&lt;p&gt;I blog about web development because it's what I &lt;strong&gt;love&lt;/strong&gt; and am familiar with. Similarly, you can also write about your favorite topics and improve as a developer while helping others too!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-the-point" class="anchor"&gt;
  &lt;/a&gt;
  ü§∑‚Äç‚ôÇÔ∏è What's the point?
&lt;/h2&gt;

&lt;p&gt;Opportunities! &lt;/p&gt;

&lt;p&gt;By blogging and having some sort of online presence opportunities will come your way. Having your work online will help you during &lt;strong&gt;job interviews&lt;/strong&gt;, getting &lt;strong&gt;freelance projects&lt;/strong&gt;, and even as a &lt;strong&gt;full-time career&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Many developers have narrated their experience of going into technical interviews and not being asked even &lt;strong&gt;a single question&lt;/strong&gt; because the interviewer had read their blog and knew they were the right fit for the job.&lt;/p&gt;

&lt;p&gt;Having a blog online shows that you are &lt;strong&gt;dedicated&lt;/strong&gt; and &lt;strong&gt;passionate&lt;/strong&gt; about your work. It helps you make connections, interact with amazing people, and add on your portfolio as well.&lt;/p&gt;

&lt;p&gt;Thus, there are literally so many reasons why you should have a blog of some sort and it will help you in so many places!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thats-all-folks" class="anchor"&gt;
  &lt;/a&gt;
  üôè That's All Folks!
&lt;/h2&gt;

&lt;p&gt;In short, blogging will not only improve your understanding but will also help you get more opportunities and allow you to help other developers as well!&lt;/p&gt;

&lt;p&gt;So, don't be afraid of blogging and start writing today! Pick a user-friendly community (my advice is Dev or Hashnode) and publish your first blog today. Trust me, it will be worth it!&lt;/p&gt;

&lt;p&gt;Thanks for reading and happy coding! üòÄ&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#follow-me-around-the-web" class="anchor"&gt;
  &lt;/a&gt;
  üåç Follow me around the web
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://twitter.com/codewithfahad"&gt;Twitter&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codewithfahad.com"&gt;Blog&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/codewithfahad"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Learning to code later in life</title>
      <author>holly boyles</author>
      <pubDate>Wed, 09 Dec 2020 18:21:01 +0000</pubDate>
      <link>https://dev.to/hmboyles/learning-to-code-later-in-life-3kc3</link>
      <guid>https://dev.to/hmboyles/learning-to-code-later-in-life-3kc3</guid>
      <description>&lt;p&gt;Hi!  My name is Holly and I am learning to code at 40 years old.  I started my coding journey at the young age of 37.  It stalled for a year while I was dealing with some life moments, but a year ago I picked back up where I left off.  &lt;/p&gt;

&lt;p&gt;&lt;em&gt;What does learning to code at my age look like?&lt;/em&gt;  I am a full time student.  I chose a path that included college because I live in a state that offers a tuition-free 2 year degree for any adult that meets the criteria for the program. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Why learn to code?&lt;/em&gt;  I worked as a  dental assistant for over 15 years.  It was an amazing career for me for a long time.  Once I made the decision to go back to college, I did not immediately look at tech as an option.  I really had no clue what I wanted to do.  I just knew that I needed to be challenged.  I went through the programs offered and narrowed down my options.  Once programming was on my radar, I utilized several free coding sites to learn as much as I could to see if this was what I wanted.  I loved it! &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Do I believe anyone can learn to code?&lt;/em&gt;  YES! If you are passionate and dedicated to learning, you can learn to code at any age.  &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Tell me, how old were you when you started your journey?&lt;/em&gt;&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>motivation</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>Ugly Sweater CSS</title>
      <author>Chris Jarvis</author>
      <pubDate>Wed, 09 Dec 2020 17:35:11 +0000</pubDate>
      <link>https://dev.to/jarvisscript/ugly-sweater-css-36am</link>
      <guid>https://dev.to/jarvisscript/ugly-sweater-css-36am</guid>
      <description>&lt;p&gt;Back in October I did a series of faces made with CSS for &lt;a href="https://dev.to/jarvisscript/css-alien-face-wip-38ig"&gt;Halloween&lt;/a&gt;. Now that it's holiday season I'm was looking around for blog ideas. I thought about ornaments but I wanted something that was more fun. &lt;br&gt;
I have a LEGO Advent Calendar that has Star Wars Characters wearings ugly sweaters. I saw this BB-8 sweater and thought that's it, Ugly Sweaters.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cc96Z0VG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yodaarchives.files.wordpress.com/2020/12/poe.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cc96Z0VG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yodaarchives.files.wordpress.com/2020/12/poe.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I used the dev tools to get the sweater color. To make the collar and bottom of the sweater, I made a div for each and inserted 10 divs with width of 10%. I named these divs "stitch." I used &lt;code&gt;border: 2px dashed black;&lt;/code&gt; with the sections next to each other the sides were doubled and too thick, so I reduced the &lt;code&gt;border-Left:&lt;/code&gt; and &lt;code&gt;border-Right:&lt;/code&gt; to 1px.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"collar"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"stitch"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"stitch"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"stitch"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"stitch"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"stitch"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"stitch"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"stitch"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"stitch"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"stitch"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"stitch"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.collar&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;.base&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-wrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;nowrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.stitch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;dashed&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;dashed&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;dashed&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xmkjEcJd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/yfl3jashg9co58locpj9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xmkjEcJd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/yfl3jashg9co58locpj9.jpg" alt="graphic to simulate a sweater. The background is green, snow is falling."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I used a similar method to make the red and green pattern. This time I used a dotted border to change the look of the stitching. The green section originally didn't have a background color and was just transparent to show the sweater background. But when I added a snow graphic as a background image, the snow showed in the "green" sections. I added green back to cover the snow.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.red_stitch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;dotted&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.transparent_stitch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#3d8425&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;dotted&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The background snow was a tip from &lt;a href="https://carloseo.com/let-it-snow-css-animation/"&gt;Carlos Escalera&lt;/a&gt;. I thought about trying to code snow myself but this background image tip was so direct to the point and my challenge was to make the character. &lt;/p&gt;

&lt;p&gt;That's the overall sweater now it's time to add our little friend.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#first-draw-two-circles" class="anchor"&gt;
  &lt;/a&gt;
  First draw two circles
&lt;/h2&gt;

&lt;p&gt;BB-8's body and head are both circular. They began as rectangles and were rounded with &lt;code&gt;border-radius&lt;/code&gt;. The body has the same &lt;code&gt;border-radius&lt;/code&gt; all around but I played with the radiuses on the top and bottom till I got the half sphere of BB-8's head. The head has a bottom border color that matches the sweater.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rIKz4Iwe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2x9k2laxphqt98kt5tpw.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rIKz4Iwe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2x9k2laxphqt98kt5tpw.jpg" alt="bb-8 on a green ugly sweater. It is snowing."&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.droid_body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;120px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;120px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.droid_head&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;88px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-top-right-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;70%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-top-left-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;70%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-bottom-left-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-bottom-right-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#3d8425&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-125px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The orange circle on the body is just a circle with a thick border.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;          &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"droid_body"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"droid_circle"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;            

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.droid_circle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;orange&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;35px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;35px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;BB's head contains several rectangles and squares. The biggest note here is that the antenna is taller than the head. They are the same color so you can only see what extends out of the head div. The antenna is visible due to the &lt;code&gt;overflow: visible;&lt;/code&gt; on the head div.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;       &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"droid_head"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"droid_block"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"droid_block"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;         
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"droid_eye"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"droid_antenna"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"droid_dot"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"droid_block"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

       &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.droid_attenna&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;12px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#what-i-learned" class="anchor"&gt;
  &lt;/a&gt;
  What I learned
&lt;/h2&gt;

&lt;p&gt;This was a fun project. I enjoyed building the sweater out of shapes and layer the shapes into something recognizable. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2i_4TABT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6yyscndjujwetzykfy65.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2i_4TABT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6yyscndjujwetzykfy65.jpg" alt="minimalist bb 8"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;-$JarvisScript git push
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>css</category>
      <category>frontend</category>
    </item>
    <item>
      <title>How to Make Vim a Python IDE - Best IDE for Python.</title>
      <author>ShahinSha</author>
      <pubDate>Wed, 09 Dec 2020 15:47:00 +0000</pubDate>
      <link>https://dev.to/shahinsha/how-to-make-vim-a-python-ide-best-ide-for-python-23e1</link>
      <guid>https://dev.to/shahinsha/how-to-make-vim-a-python-ide-best-ide-for-python-23e1</guid>
      <description>&lt;p&gt;Hello everyone,&lt;br&gt;
I'm back with another Linux tutorial. We are going to talk about something which is also my personal favorite - &lt;strong&gt;VIM&lt;/strong&gt;.&lt;br&gt;
We are all fed up with iDE's and text editors which takes years to open up and setting up these things takes more time than writing the whole code. That's why I have come up with the best solution.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#whats-vim" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What's Vim?&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Before we go any further, let's talk about what vim is. Vim is a very lightweight text editor that can be customized however we want. It normally runs in the terminal and is very easy to learn.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#why-vim" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Why Vim?&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;As I mentioned earlier, Vim is very fast and highly customizable. Also, who doesn't want to work on an IDE   which opens up within a second? Another reason to choose vim is because of its keyboard shortcuts. While using vim you don't need to touch the mouse. This will reduce your coding time by half. I'm sure by the end of the day, you will be a fan. Let's get started now.&lt;/p&gt;

&lt;p&gt;After this tutorial, our vim will look like :&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9s28-ELG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fnkqpo9g63fa7xgsit5b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9s28-ELG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fnkqpo9g63fa7xgsit5b.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#installing-vim" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Installing Vim&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Vim installation is a very easy step. For now, I'm going to focus on Linux installation but I'll provide the links for other operating systems.&lt;br&gt;
&lt;strong&gt;Windows&lt;/strong&gt; - &lt;a href="https://www.freecodecamp.org/news/vim-windows-install-powershell/"&gt;Vim in windows&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mac&lt;/strong&gt; - We are going to install vim using &lt;a href="https://brew.sh/"&gt;Homebrew&lt;/a&gt;. Open your terminal and type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ brew update
$ brew install vim
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This will install vim on your machine.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Linux&lt;/strong&gt; - Installing vim in Linux is very easy. Open your terminal and type:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For Debian based distros:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo apt-get remove vim-tiny
$ sudo apt-get update
$ sudo apt-get install vim
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;For Arch based distros:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo pacman -S vim
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;For fedora:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo dnf install vim-enhanced
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#installing-plugin-manager" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Installing Plugin Manager&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Vim comes with a native plugin manager but we have something better than that. We are going to install &lt;strong&gt;Vundle&lt;/strong&gt;. It makes installing and updating packages trivial.&lt;br&gt;
Let's install vundle:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open your terminal and type :
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;This will clone the vundle repository in your machine.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Next step is the vim configuration file(vimrc). You will need this file throughout the tutorial. Do the following in your terminal:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cd ~
$ touch ~/.vimrc
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Add vundle to your vim configuration. Go to your terminal and type:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo nano ~/.vimrc
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;this will open the vimrc file. Now copy the code below and paste it there.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" All of your Plugins must be added before the following line
call vundle#end()
filetype plugin indent on
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now &lt;code&gt;ctrl+o&lt;/code&gt; to write the file then press &lt;code&gt;Enter&lt;/code&gt; and finally &lt;code&gt;ctrl+x&lt;/code&gt; to exit the editor.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now let's install vundle plugin inside vim. fire up your terminal and type &lt;code&gt;vim&lt;/code&gt; and now vim will load up. Now type &lt;code&gt;:PluginInstall&lt;/code&gt; and press &lt;code&gt;Enter&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#making-vim-an-ide" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Making Vim an IDE&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Now comes the best part - Installing all plugins to make vim an IDE. This step is very easy, we are going to add a line in our vimrc and go to vim and install it. Dont worry this may look a bit confusing but it's very easy. Let's get started :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open your terminal type &lt;code&gt;sudo nano ~/.vimrc&lt;/code&gt; and clear everything there and then paste the code:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;set nocompatible              " required
filetype off                  " required
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'gmarik/Vundle.vim'

" All Plugins

Plugin 'mhartington/oceanic-next'
Plugin 'tmhedberg/SimpylFold'
Plugin 'vim-scripts/indentpython.vim'
Plugin 'vim-syntastic/syntastic'
Plugin 'nvie/vim-flake8'
Plugin 'scrooloose/nerdtree'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'kien/ctrlp.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'zxqfl/tabnine-vim'
Plugin 'frazrepo/vim-rainbow'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'davidhalter/jedi-vim'
Plugin 'ycm-core/YouCompleteMe'


call vundle#end()            " required
filetype plugin indent on    " required


" setting horizontal and vertical splits
set splitbelow
set splitright

"split navigations
nnoremap &amp;lt;C-J&amp;gt; &amp;lt;C-W&amp;gt;&amp;lt;C-J&amp;gt;
nnoremap &amp;lt;C-K&amp;gt; &amp;lt;C-W&amp;gt;&amp;lt;C-K&amp;gt;
nnoremap &amp;lt;C-L&amp;gt; &amp;lt;C-W&amp;gt;&amp;lt;C-L&amp;gt;
nnoremap &amp;lt;C-H&amp;gt; &amp;lt;C-W&amp;gt;&amp;lt;C-H&amp;gt;

" Enable folding
set foldmethod=indent
set foldlevel=99

" Enable folding with the spacebar
nnoremap &amp;lt;space&amp;gt; za


" Setting up indendation

au BufNewFile, BufRead *.py
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=79 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix

au BufNewFile, BufRead *.js, *.html, *.css
    \ set tabstop=2 |
    \ set softtabstop=2 |
    \ set shiftwidth=2

highlight BadWhitespace ctermbg=red guibg=darkred
au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/

let g:ycm_autoclose_preview_window_after_completion=1
map &amp;lt;leader&amp;gt;g  :YcmCompleter GoToDefinitionElseDeclaration&amp;lt;CR&amp;gt;

" setting up pyflakes

let python_highlight_all=1
syntax on

" nerd tree settings
let NERDTreeIgnore=['\.pyc$', '\~$'] "ignore files in NERDTree

" setting up line numbering
set nu

" Rainbow bracket settings
let g:rainbow_active = 1
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Just like we did before press &lt;code&gt;ctrl+o&lt;/code&gt; to write and &lt;code&gt;Enter&lt;/code&gt; to save. Then press &lt;code&gt;Ctrl+x&lt;/code&gt; to exit.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The next step is to install everything using the plugin manager. Open the terminal and type &lt;code&gt;vim&lt;/code&gt;. Now, install the plugin by typing &lt;code&gt;:PluginInstall&lt;/code&gt;. This will take some time but it will install all the plugins.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The ycmserver error - when you open vim you may encounter some errors but don't worry, it's very easy to fix it. open your terminal and type:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ pip install cmake
$ cd ~/.vim/bundle/YouCompleteMe
$ ./install.py
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Let's set up a color scheme for our IDE. We are going to install the oceanic theme for now. fire up your terminal and type:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git clone https://github.com/mhartington/oceanic-next.git
$ cd oceanic-next
$ cp colors/OceanicNext.vim ~/.vim/colors
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now open your vimrc and add the color schemes. To do this open your terminal and type :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo nano ~/.vimrc
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;this will open your vimrc file. Now paste the code below there:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;" Theme
 syntax enable
" for vim 7
 set t_Co=256

" for vim 8
 if (has("termguicolors"))
  set termguicolors
 endif

colorscheme OceanicNext
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now &lt;code&gt;Ctrl+o&lt;/code&gt; to write and press &lt;code&gt;Enter&lt;/code&gt; to save it. Press &lt;code&gt;Ctrl+x&lt;/code&gt; to exit.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FrCvB5Wk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lt2ansjad8v8ejvlhfu8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FrCvB5Wk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lt2ansjad8v8ejvlhfu8.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U14ihpb3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/iks9fprso4wxdmgf2e7k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U14ihpb3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/iks9fprso4wxdmgf2e7k.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Aoqc-bPB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2e0j4h15qhmcbz71sede.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Aoqc-bPB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2e0j4h15qhmcbz71sede.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nicely done guys. We made vim a powerful yet lightweight ide.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#features-of-our-new-vim-ide" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Features of our new Vim IDE&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;We did so many things but I did not explain what we were doing or what features we added to our Vim-Ide. Trust me, you guys are going to be surprised when you hear the features of your new ide. Let's get into it now.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Split layout&lt;/strong&gt; - If you open a file with :sp , you split the layout vertically (opening the new file below the current file). If you reverse the keys to :vs , you get a horizontal split (opening the new file to the right of your current file).Key combos: &lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;j&lt;/code&gt;  move to the split below, &lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;k&lt;/code&gt;move to the split above, 
&lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;l&lt;/code&gt; move to the split to the right,&lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;h&lt;/code&gt; move to the split to the left.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3MrZPKVb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3dgx4u0z3wu2nzyv7r06.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3MrZPKVb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3dgx4u0z3wu2nzyv7r06.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Code Folding&lt;/strong&gt; - Modern IDEs can fold the codes at functions and import statements, by showing the first line only. You can also do it here by pressing the &lt;code&gt;Space&lt;/code&gt; key.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k36rW4dz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0eu4jisa8s1pit2525g6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k36rW4dz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0eu4jisa8s1pit2525g6.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Autocomplete&lt;/strong&gt; - Just like any other IDE, vim can predict what you are going to do next.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mv83H8PK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rimb656db0nq5xfn0itg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mv83H8PK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rimb656db0nq5xfn0itg.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Super Searching&lt;/strong&gt; - You can navigate to any file or any tag just by pressing &lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;p&lt;/code&gt;. This is one of my favorite features of vim.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qci2lq6e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/217rs2zqpfe3ho4hnck2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qci2lq6e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/217rs2zqpfe3ho4hnck2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Syntax Checking/Highlighting&lt;/strong&gt; - After you write the code in vim. Our flake-8 and syntastic plugin will highlight all the errors in your code and also tell you how to fix it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CfOckOuB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8v7qpqmpnyxpu68x2ku4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CfOckOuB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8v7qpqmpnyxpu68x2ku4.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have added almost every feature of ide to our vim. You can now code in a feature-rich ide without having to wait an hour to open up.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#small-intro-to-vim" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Small Intro to Vim&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;I believe some of you have experience using vim. It's okay even if you don't have any, I will give you a small intro of the basics.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Modes&lt;/strong&gt; - Vim is usually opened in command mode, this means that you can write anything but you do all other commands here like we installed the plugins. Commands usually start with &lt;code&gt;:&lt;/code&gt;.  In order to change from command mode to writing mode press &lt;code&gt;i&lt;/code&gt;. You are now in insert mode, you can write everything here and go back to command mode by pressing &lt;code&gt;Esc&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Writing, saving, and exiting&lt;/strong&gt; -  When we change to insert mode from command mode(&lt;code&gt;i&lt;/code&gt;) we can edit the code. After we finish, we need to save this and exit, but how?&lt;br&gt;
To do this, you need to go back to command mode by pressing &lt;code&gt;Esc&lt;/code&gt; and press &lt;code&gt;:w&lt;/code&gt; to write everything. you can exit the editor by using the command &lt;code&gt;:q&lt;/code&gt;. If we need to exit without saving, use the command &lt;code&gt;:q!&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Additional resource&lt;/strong&gt; - If you need to learn more about vim and its features, go to &lt;a href="http://vimcasts.org/"&gt;vimcasts&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Conclusion&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Vim is something every programmer should try at least once. I hope this blog helped someone or encouraged someone to try it out. There are tons of plugins out there, go find yours and try them out. If you find any difficulties, please let me know in the comments. That's it for today and I will be back with another tutorial soon.&lt;/p&gt;

</description>
      <category>vim</category>
      <category>python</category>
      <category>linux</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>What External Display do you use with your computer?</title>
      <author>Andrew Baisden</author>
      <pubDate>Wed, 09 Dec 2020 14:30:54 +0000</pubDate>
      <link>https://dev.to/andrewbaisden/what-external-display-do-you-use-with-your-computer-ci2</link>
      <guid>https://dev.to/andrewbaisden/what-external-display-do-you-use-with-your-computer-ci2</guid>
      <description>&lt;p&gt;There is so much choice when it comes to buying an external display to use with your computer. I currently have an Apple Thunderbolt Display which is cool however the product has been discontinued. And it only works with older Macs that have a MagSafe connector which limits its usage. MagSafe lacked the versatility and convienience of today's USB-C type connections. It was only a dedicated port for power supply and Apple needed something more useful.&lt;/p&gt;

&lt;p&gt;What type of external display do you use with your computer?&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>productivity</category>
      <category>watercooler</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>ShellPipe.py | A Remedy to Overkill Shell Scripting</title>
      <author>Tai Kedzierski</author>
      <pubDate>Wed, 09 Dec 2020 14:23:19 +0000</pubDate>
      <link>https://dev.to/taikedz/shellpipe-shellpipe-py-is-exactly-what-you-think-12bi</link>
      <guid>https://dev.to/taikedz/shellpipe-shellpipe-py-is-exactly-what-you-think-12bi</guid>
      <description>&lt;p&gt;&lt;a href="https://dev.to/taikedz/your-bash-scripts-are-rubbish-use-another-language-5dh7"&gt;In my previous post&lt;/a&gt;, I had a bit of a rant about people not learning the idiosyncracies of the language that is bash, and more generally those of shell languages as a whole, leading to a lot of frankly horrible scripting out in the wild.&lt;/p&gt;

&lt;p&gt;I've written so much shell script - and put so much emphasis on clean code in shell - for the sake of a handful of key operations that just must be commands, where I would have rather been managing much nicer code.&lt;/p&gt;

&lt;p&gt;So today I turn that right around: rather than try to apply clean code to shell scripts (and crah against the rocky shores of other devs' "but it's just a shell script"), I'm going to bring the best part of shells to Python: &lt;a href="https://github.com/taikedz/shellpipe"&gt;ShellPipe.py&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The fact of the matter is, a lot of shell scripting is used to glue other tools together, and that's certainly where it excels. Python by contrast, just as most other languages, require some minor passing and tracking of outputs and inputs to achieve the same effects and, whilst generally better languages, aren't quite as eloquent to the task of unifying disparate, uninterfaceable tools. For this eason, I have continued to write bash scripts as glue, rather than try to do that passing around. For this reason in turn, I have written extensive amounts of bash that really should have been written in another language.&lt;/p&gt;

&lt;p&gt;On the last post, I got &lt;a href="https://dev.to/xtofl/comment/14ihn"&gt;a comment from @xtofl&lt;/a&gt; indicating that they'd had a quick go at re-purposing the bitwise OR operator in Python into a pipe-like operator. They expanded on that technique in &lt;a href="https://dev.to/xtofl/i-want-my-bash-pipe-34i2"&gt;a later post&lt;/a&gt; with their proposition for chaining functions, pipe-style, which whilst intersting, does not meet my more basic sysadminy needs.&lt;/p&gt;

&lt;p&gt;I remembered their little comment yesterday and decided to have a go of it myself.&lt;/p&gt;

&lt;p&gt;I'm quite proud of myself. Though maybe I should feel &lt;em&gt;gravely ashamed&lt;/em&gt;. I can now do this in a python script:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;shellpipe&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sh&lt;/span&gt;

&lt;span class="c1"&gt;# Run a command
&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;'git clone https://github.com/taikedz/shellpipe'&lt;/span&gt;

&lt;span class="c1"&gt;# Chain commands, see their output. Using strings or lists, whatever.
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;"find shellpipe/shellpipe"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;'grep -vE ".*&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;.pyc"'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'du'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'-sh'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I would have ideally wanted to do something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mysql_result = sh(f'mysql {user} -p{pass} db') &amp;lt; """
CREATE TABLE ...
"""
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;which unfortunately is not possible whilst also keeping the immediacy of runs - the comparator needs to evaluate the left hand statement (LHS) entirely first, before the right hand (RHS) is checked. My current implementation runs on-creation, which means the command itself is run before the "redirect" can be processed. &lt;/p&gt;

&lt;p&gt;If I defer the execution until after the redirection is done (this was actually how the first implementation worked), I would have to do something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;mysql_result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;f'mysql &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; -p&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;pass&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; db'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"""
CREATE TABLE ...
"""&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Which is much less elegant. Also, having the external script in an actual file is better practice in most setups so what I actually need to do with the current implmentation is&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"script.mysql"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"r"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fh&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;mysql_result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;f'mysql &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; -p&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;pass&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; db'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;fh&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;which is generally more reasonable, anyway. Don't hard-code other scripts in your program, store them neatly (he said, shoehorning shell commands into a Python program).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-this-sorcery" class="anchor"&gt;
  &lt;/a&gt;
  What is this sorcery??
&lt;/h2&gt;

&lt;p&gt;I have hijacked bitwise OR-ing. Or at least, I have for the purpose of my custom class, &lt;code&gt;ShellPipe&lt;/code&gt; (which is simply provided through sleight of assignment as &lt;code&gt;sh = ShellPipe&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;What ShellPipe does is define its own &lt;code&gt;__or__()&lt;/code&gt; function, which is called any time it is placed in a &lt;code&gt;x | y&lt;/code&gt; operation in Python. Similar things exist for &lt;code&gt;__and__&lt;/code&gt; (the &lt;code&gt;&amp;amp;&lt;/code&gt; bitwise AND operator implementor) and &lt;code&gt;__lt__&lt;/code&gt; (the less-than operator implementor) so as to be able to use custom, complex classes as sortable items.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;this.__or__(that)&lt;/code&gt; normally should simply return an object of the same type as &lt;code&gt;this&lt;/code&gt; and &lt;code&gt;that&lt;/code&gt; , but we can abuse this a little by not requiring the one side to be of the same type as the other. Conceivably, we could return whatever we want.&lt;/p&gt;

&lt;p&gt;When invoking &lt;code&gt;x | y&lt;/code&gt;, only the &lt;code&gt;__or__()&lt;/code&gt; of the object on the left hand side of the statement gets executed, and that pair then returns usually a new object that is the union of the two.&lt;/p&gt;

&lt;p&gt;It looks like this (rather, it is exactly this):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__or__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;our_out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;our_out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;other&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ShellPipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command_list&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;our_out&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;By invoking &lt;code&gt;ShellPipe() | "a string"&lt;/code&gt; , I capitalize on this by allowing &lt;code&gt;ShellPipe&lt;/code&gt;'s function to see that on the other side of the operation there is a string, and so it wraps that in a &lt;code&gt;ShellPipe(...)&lt;/code&gt; of its own - and the result is that the string has become a runnable piece of code, in a way.&lt;/p&gt;

&lt;p&gt;So what is happening when I invoke &lt;code&gt;ShellPipe() | "cmd1" | "cmd2"&lt;/code&gt; ?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In this case, the first LHS (an empty instance) doesn't do anything, as it was not built with a command (it could have been, twelve and two sixes as we say here)&lt;/li&gt;
&lt;li&gt;and it turns the RHS into a &lt;code&gt;ShellPipe("cmd1")&lt;/code&gt; and returns it - &lt;code&gt;cmd1&lt;/code&gt; immediately executes as a result of being defined&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;cmd1&lt;/code&gt; is now the new LHS, and it keeps a hold of its output stream, passing it into the construction of the now-new RHS, &lt;code&gt;ShellPipe("cmd2", stdin=cmd1_stdout)&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And so on and so forth. Quite simple, really. Once the end of the chain is reached, the last item that was executed is also returned and so in&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;mypipe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sh&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;"cmd1"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;"cmd2"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;"cmd3"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;code&gt;mypipe&lt;/code&gt; is in fact the &lt;code&gt;ShellPipe("cmd3")&lt;/code&gt; object created by &lt;code&gt;cmd2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It is the output of this last command that we can then inspect with &lt;code&gt;mypipe.get_stdout()&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#but-why" class="anchor"&gt;
  &lt;/a&gt;
  But why??
&lt;/h2&gt;

&lt;p&gt;Is this useful and better than using &lt;code&gt;subprocess.Popen()&lt;/code&gt; directly? It is certainly mostly syntactic sugar, and importing features from one language into another is not always the best answer, but my use cases have veered more towards &lt;em&gt;"I want to use Python for most things, but there's that ONE tool that can only be used as a command."&lt;/em&gt; String and stream manipulation is easier in Python (once you need to manage context beyond a single line), and the rich typing experience - which allowed the &lt;code&gt;__or__()&lt;/code&gt; overloading in the first place - is better there than in shell scripts.&lt;/p&gt;

&lt;p&gt;The downside of my implementation is that it runs each command entirely before passing on to the next one - if a command should produce a large amount of output, that would be stored to file descriptor (and likely thus in RAM) before being passed to the next command. Also, if several commands take a significant amount of time to run, this is not going to work well either.&lt;/p&gt;

&lt;p&gt;But there are just &lt;em&gt;those&lt;/em&gt; times, where &lt;em&gt;that one tool&lt;/em&gt; that is available as a command only, and nobody has python-packaged for, is easier to just... use as a command.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gitlab.com/taikedz/bash-builder"&gt;If I consider&lt;/a&gt; . &lt;a href="https://github.com/taikedz/handy-scripts/blob/master/bin/rmkernel.sh"&gt;all the&lt;/a&gt; . &lt;a href="https://gitlab.com/taikedz/bash-builder/-/tree/master/examples/ssh-connection-manager/src"&gt;bash code&lt;/a&gt; . &lt;a href="https://github.com/taikedz/git-shortcuts"&gt;I've written&lt;/a&gt; . &lt;a href="https://gitlab.com/taikedz/alpacka"&gt;where most of it&lt;/a&gt; . &lt;a href="https://github.com/taikedz/mkservice/tree/master/src"&gt;was just managing variables&lt;/a&gt; . &lt;a href="https://github.com/taikedz/github-do"&gt;for the sake of&lt;/a&gt; . &lt;a href="https://github.com/taikedz/handy-scripts/blob/master/src/wifi"&gt;a handful of&lt;/a&gt; . &lt;a href="https://github.com/taikedz/pipsy"&gt;piped shell commands&lt;/a&gt; and clean code ...&lt;/p&gt;

&lt;p&gt;... I feel vindicated. This is a &lt;em&gt;good&lt;/em&gt; abomination üòå&lt;/p&gt;

</description>
      <category>python</category>
      <category>bash</category>
      <category>linux</category>
      <category>automation</category>
    </item>
    <item>
      <title>Happiness status of your GitHub repo: repostatus</title>
      <author>Deepjyoti Barman</author>
      <pubDate>Wed, 09 Dec 2020 14:21:23 +0000</pubDate>
      <link>https://dev.to/deepjyoti30/happiness-status-of-your-github-repo-repostatus-3516</link>
      <guid>https://dev.to/deepjyoti30/happiness-status-of-your-github-repo-repostatus-3516</guid>
      <description>&lt;p&gt;People always ask "why this repo" and never ask "how is this repo", so I created an app that finds how &lt;strong&gt;happy&lt;/strong&gt; a repository is.&lt;/p&gt;

&lt;p&gt;TLDR; The app runs a sentiment analysis engine on your repo and finds how happy it is. Check &lt;a href="https://repostatus.deepjyoti30.dev"&gt;repostatus&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how" class="anchor"&gt;
  &lt;/a&gt;
  How?
&lt;/h2&gt;

&lt;p&gt;So how exactly do you find the sentiment of a non living thing? Well, even I had that thought in my mind. Any repository is made up of people that contribute to that repo, people that interact in the repo's comments.&lt;/p&gt;

&lt;p&gt;So, if we are able to run a sentiment analysis engine on the interactions of the people that are contributing to that repo, we might get somewhere?&lt;/p&gt;

&lt;p&gt;&lt;code&gt;repostatus&lt;/code&gt; extracts three important part of the repo (by using GitHub's API):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the commit messages&lt;/li&gt;
&lt;li&gt;the comments on the issues&lt;/li&gt;
&lt;li&gt;the comments on PR's&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once, we have these three things, we can combine them, filter out the unnecessary data and run our engine on it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tech" class="anchor"&gt;
  &lt;/a&gt;
  Tech
&lt;/h2&gt;

&lt;p&gt;The backend is written in &lt;code&gt;Python&lt;/code&gt; (FastAPI) and the frontend is written in &lt;code&gt;Vue&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;First things first,  the sentiment analysis engine used by  &lt;code&gt;repostatus&lt;/code&gt; is the &lt;a href="https://textblob.readthedocs.io/en/dev/"&gt;textblob&lt;/a&gt; library. It is very easy to use and works great.&lt;/p&gt;

&lt;p&gt;So now that we have the engine at our ease, what's next.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#backend" class="anchor"&gt;
  &lt;/a&gt;
  Backend
&lt;/h3&gt;

&lt;p&gt;My goto tech stack is Python so no wonder I went with that for the API.&lt;/p&gt;

&lt;p&gt;I used &lt;a href="https://fastapi.tiangolo.com/"&gt;FastAPI&lt;/a&gt; for the backend. Off late, I have started liking &lt;code&gt;FastAPI&lt;/code&gt; more and more and it was an obvious no brainer to go with it for the backend. It's ease of use with the efficiency is just awesome. If you haven't checked it out, do that, I'm sure you'll love it if you're a Python developer.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#services" class="anchor"&gt;
  &lt;/a&gt;
  Services
&lt;/h4&gt;

&lt;p&gt;Services that the API will offer are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Internal API for the webapp&lt;/li&gt;
&lt;li&gt;Public API&lt;/li&gt;
&lt;li&gt;Badge API (Yep, you can use repostatus badges on your README).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I wanted to provide a Public API so that people would be able to use it for their own fun projects. The API is capable of working with both private and public repo's. The details for that can be found &lt;a href="https://repostatus.deepjyoti30.dev/api"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The badge is another thing that I thought would be a nice little addition. This badge works similar to how the &lt;code&gt;travis&lt;/code&gt; build badges work or any badge. You can simply use the URL to embed it into your repositories README.&lt;/p&gt;

&lt;p&gt;More details about the badge can be found &lt;a href="https://repostatus.deepjyoti30.dev/badge"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#frontend" class="anchor"&gt;
  &lt;/a&gt;
  Frontend
&lt;/h3&gt;

&lt;p&gt;I love using VueJS. It was obvious that I would use that to build the frontend. Now for the frontend I wanted to make sure that it doesn't restrict the user too much.&lt;/p&gt;

&lt;p&gt;Thus, &lt;code&gt;repostatus&lt;/code&gt; works with both private and public repos. For private repos, GitHub's OAuth is used which gives us access to that particular repo and then we run the engine over the repo.&lt;/p&gt;

&lt;p&gt;One issue that I faced while implementing the OAuth was that I wanted to make the process seamless. If you go the the app now and select on the OAuth option, you will see the process is pretty neat.&lt;/p&gt;

&lt;p&gt;Here's what it does:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Opens a new window and asks the user to give access&lt;/li&gt;
&lt;li&gt;User gives access and GitHub redirects the user to my sites &lt;code&gt;callback&lt;/code&gt; endpoint.&lt;/li&gt;
&lt;li&gt;Window closes and the app shows all the users repos.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The above steps makes it look real seamless. However, the hard part for me was to figure out how do I know when the OAuth is done and then show the window.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#seamless-oauth" class="anchor"&gt;
  &lt;/a&gt;
  Seamless OAuth
&lt;/h4&gt;

&lt;p&gt;So in order to make it seamless, I implemented the following flow:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;User clicks on OAuth button, new window is opened and the app keeps waiting for it to close.&lt;/li&gt;
&lt;li&gt;In the new window, the user is redirected to the callback URL which returns a nice HTML page that shows the user that the window will close in 5 secs. After 5 seconds the window closes and the app knows that the OAuth is done.&lt;/li&gt;
&lt;li&gt;The app then tries to find the repo's of that user and accordingly shows the user all the repos.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I know, it's not much. I have to say, though, I really liked implementing this one little feature and making it so seamless. I'm not even kidding, I just kept on doing OAuth on repeat after implementing it, for a while.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#badge" class="anchor"&gt;
  &lt;/a&gt;
  Badge
&lt;/h2&gt;

&lt;p&gt;An example of the badge can be seen below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vFh5lO2G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://apis.deepjyoti30.dev/repostatus/badge%3Frepo%3Ddeepjyoti30%252Fytmdl%26style%3Dfor-the-badge" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vFh5lO2G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://apis.deepjyoti30.dev/repostatus/badge%3Frepo%3Ddeepjyoti30%252Fytmdl%26style%3Dfor-the-badge" alt="[RepoStatus](https://repostatus.deepjyoti30.dev/badge)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Isn't it cool?! It supports options like &lt;code&gt;style&lt;/code&gt; of the badge where &lt;code&gt;for-the-badge&lt;/code&gt; can be used. It changes the color of the badge based on the &lt;code&gt;happiness status&lt;/code&gt; of the repo.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-is-happiness-exactly-calculated" class="anchor"&gt;
  &lt;/a&gt;
  How is happiness exactly calculated
&lt;/h2&gt;

&lt;p&gt;As I mentioned earlier, the happiness of any repo depends on certain parts of the repo. Thus, once the &lt;code&gt;commit messages&lt;/code&gt;, &lt;code&gt;issue comments&lt;/code&gt; and the &lt;code&gt;PR's comments&lt;/code&gt; are extracted, they are run through a filter.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#filtering-the-data" class="anchor"&gt;
  &lt;/a&gt;
  Filtering the data
&lt;/h3&gt;

&lt;p&gt;This step makes sure that the data is cleared off of any unreadable content, like an image that the user might have posted in the comments. Or some code inside a code block that the user might have added in an issue report.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#running-the-engine" class="anchor"&gt;
  &lt;/a&gt;
  Running the engine
&lt;/h3&gt;

&lt;p&gt;Once the data is cleared off all the unreadable content, it is passed to the &lt;code&gt;textblob&lt;/code&gt; library that runs the engine on the data.&lt;/p&gt;

&lt;p&gt;Now, this library returns a float &lt;code&gt;score&lt;/code&gt;. This score is between -1 and +1 where +1 indicates &lt;code&gt;happy&lt;/code&gt; and -1 indicates &lt;code&gt;sad&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Thus, when the engine is run on the comments, let's say we get a score of 0.8, this means, based on the comments, the repo is not &lt;code&gt;that&lt;/code&gt; happy but it's more happier as compared to being sad. So &lt;code&gt;repostatus&lt;/code&gt; considers that based on the comments the repo is &lt;code&gt;happy&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We do the above process on other aspects of the repo too, the commit messages etc.&lt;/p&gt;

&lt;p&gt;Once, all the individual scores are available, they are added up and an average is calculated. This average, mathematically, is also between &lt;code&gt;-1&lt;/code&gt; and &lt;code&gt;+1&lt;/code&gt;. This is the overall &lt;code&gt;happiness status&lt;/code&gt; of the repo.&lt;/p&gt;

&lt;p&gt;Based on this score, it is decided what color is to be assigned to the repo.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#caching" class="anchor"&gt;
  &lt;/a&gt;
  Caching
&lt;/h3&gt;

&lt;p&gt;Since the engine takes a pretty hefty amount of memory, the score of any repo is cached for 15 days.&lt;/p&gt;

&lt;p&gt;The badges are cached for 24 hours and only after that they are updated.&lt;/p&gt;

&lt;p&gt;This caching was necessary in order to make sure the performance of the API was not effected.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#try-repostatus-here" class="anchor"&gt;
  &lt;/a&gt;
  Try &lt;a href="https://repostatus.deepjyoti30.dev"&gt;repostatus here&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#source" class="anchor"&gt;
  &lt;/a&gt;
  Source
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;repostatus&lt;/code&gt; is open source. Source for the backend and the frontend can be found below&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJ70wriM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/trotsly"&gt;
        trotsly
      &lt;/a&gt; / &lt;a href="https://github.com/trotsly/repostatus"&gt;
        repostatus
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Get Happiness status of your repo
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;div&gt;
&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/trotsly/repostatus/master/.github/logo_large.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r8nMPM5T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/trotsly/repostatus/master/.github/logo_large.png" alt="repostatus logo"&gt;&lt;/a&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2&gt;
&lt;i&gt;Get Happiness status of your repo&lt;/i&gt;
&lt;/h2&gt;
&lt;br&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/2e768dbef191b91fad8137362839b5e971e16903243a0e3d0afe77ad436a8272/68747470733a2f2f617069732e646565706a796f746933302e6465762f7265706f7374617475732f62616467653f7265706f3d74726f74736c792532467265706f737461747573267374796c653d666f722d7468652d6261646765"&gt;&lt;img src="https://camo.githubusercontent.com/2e768dbef191b91fad8137362839b5e971e16903243a0e3d0afe77ad436a8272/68747470733a2f2f617069732e646565706a796f746933302e6465762f7265706f7374617475732f62616467653f7265706f3d74726f74736c792532467265706f737461747573267374796c653d666f722d7468652d6261646765" alt="Status of repostatus"&gt;&lt;/a&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;p&gt;Backend for &lt;a href="https://repostatus.deepjyoti30.dev" rel="nofollow"&gt;repostatus&lt;/a&gt;. Repostatus lets you calculate the happiness status of your repository.&lt;/p&gt;
&lt;h2&gt;
What we do?&lt;/h2&gt;
&lt;p&gt;We consider various parts of the repo like commit messages, comments on issues, pulls etc and run a sentiment analysis engine on the data in order to find out the happiens status.&lt;/p&gt;
&lt;h2&gt;
Setup&lt;/h2&gt;
&lt;p&gt;You'll need to setup an environ variable named &lt;code&gt;GITHUB_TOKEN&lt;/code&gt; that will contain an access token. In order to get the token, follow &lt;a href="https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/creating-a-personal-access-token"&gt;this&lt;/a&gt; article and accordingly save it to the environment.&lt;/p&gt;
&lt;p&gt;One way to save something to environment is:&lt;/p&gt;
&lt;div class="highlight highlight-source-python js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s1"&gt;os&lt;/span&gt; &lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-s1"&gt;environ&lt;/span&gt;
&lt;span class="pl-s1"&gt;environ&lt;/span&gt;.&lt;span class="pl-en"&gt;set&lt;/span&gt;(&lt;span class="pl-s"&gt;'GITHUB_TOKEN'&lt;/span&gt;, &lt;span class="pl-s"&gt;'&amp;lt;your_token&amp;gt;'&lt;/span&gt;)&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Otherwise, it can also be set through the rc file, i:e &lt;code&gt;zshrc, bashrc etc&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
Tests&lt;/h2&gt;
&lt;p&gt;For the tests, we are using &lt;a href="https://github.com/pytest-dev/pytest"&gt;pytest&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you wish to run the tests yourself, make sure you have it installed. The tests can be run by the‚Ä¶&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/trotsly/repostatus"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>python</category>
      <category>opensource</category>
    </item>
  </channel>
</rss>
