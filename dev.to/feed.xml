<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Multiple Classes in Material UI or MUI</title>
      <author>Rohit Nishad</author>
      <pubDate>Mon, 04 Oct 2021 11:55:55 +0000</pubDate>
      <link>https://dev.to/rohitnishad613/multiple-classes-in-material-ui-or-mui-3ee6</link>
      <guid>https://dev.to/rohitnishad613/multiple-classes-in-material-ui-or-mui-3ee6</guid>
      <description>&lt;p&gt;You can either use a proper String concatenation or if your needs are wide and highly used then I recommend adding a package for this purpose. In this post, we talk about Multiple classes in Material UI.&lt;/p&gt;

&lt;p&gt;So let’s add Multiple classes in Material UI with or without usestyles, withstyles, makestyle.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#method-1-concat-classes-properly-in-classname-property"&gt;
  &lt;/a&gt;
  Method #1: Concat classes properly in className property
&lt;/h2&gt;

&lt;p&gt;You can concat your classes with backticks&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const classes = usestyles()
className={`${classes.container} ${classes.spacious}`}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For more info and credit &lt;a href="https://360techexplorer.com/material-ui-multiple-classes/"&gt;read this blog post from 360TechExplorer.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>design</category>
      <category>react</category>
      <category>beginners</category>
    </item>
    <item>
      <title>New open source desktop tool for your k8s manifests</title>
      <author>Ole Lensmar</author>
      <pubDate>Mon, 04 Oct 2021 10:57:17 +0000</pubDate>
      <link>https://dev.to/olensmar/new-open-source-desktop-tool-for-your-k8s-manifests-76a</link>
      <guid>https://dev.to/olensmar/new-open-source-desktop-tool-for-your-k8s-manifests-76a</guid>
      <description>&lt;p&gt;Hi everyone - I'm happy to announce 1.2.0 of &lt;a href="https://github.com/kubeshop/monokle"&gt;Monokle&lt;/a&gt; - an open-source desktop tool that makes working with k8s manifests a lot easier.&lt;/p&gt;

&lt;p&gt;Monokle helps you create, edit and validate yaml manifests, visualize and validate resource links and dependencies, debug the output of kustomize and helm, connect and compare resources to your clusters, and more!&lt;/p&gt;

&lt;p&gt;Download the latest installers &lt;a href="https://github.com/kubeshop/monokle/releases/tag/v1.2.0"&gt;from GitHub&lt;/a&gt; and check out the &lt;a href="https://kubeshop.github.io/monokle/"&gt;documentation&lt;/a&gt; - and join us on GitHub or Discord to let us know what we can do to improve your everyday manifest workflows.&lt;/p&gt;

&lt;p&gt;Looking forward to hearing from you!&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>opensource</category>
      <category>devops</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Land a React Job: The lazy way</title>
      <author>Valentin Vuk</author>
      <pubDate>Mon, 04 Oct 2021 10:38:18 +0000</pubDate>
      <link>https://dev.to/bornfightcompany/land-a-react-job-the-lazy-way-2d1o</link>
      <guid>https://dev.to/bornfightcompany/land-a-react-job-the-lazy-way-2d1o</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hang-on-lads-ive-got-a-great-idea"&gt;
  &lt;/a&gt;
  Hang on, lads. I've got a great idea.
&lt;/h2&gt;

&lt;p&gt;So you've run out of Netflix TV shows to watch, YouTube algorithm is now showing videos like &lt;em&gt;Man eats 87 SpongeBob stickers in an alley&lt;/em&gt; and you learned a little bit about that Facebook JavaScript library while in lockdown? &lt;br&gt;
Then it's time to &lt;strong&gt;REACT&lt;/strong&gt; and land a job so you can buy that AppleTV subscription that will get you fired, but eh, at least it will last few months because they’re kinda killing it lately with movies and tv shows.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;I choose a lazy person to do a hard job. Because a lazy person will find an easy way to do it.&lt;/em&gt;&lt;br&gt;
&lt;em&gt;- Bill Gates&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#chapter-one-el-cl%C3%A1sico"&gt;
  &lt;/a&gt;
  Chapter One: El Clásico
&lt;/h2&gt;

&lt;p&gt;You are gonna build ...wait for it...wait...just a little bit... app that fetches list of data and displays it to the user in a nice way. Yeah the classic I know, but the companies really dig it, especially if you use some nice css library and interesting API with it.&lt;/p&gt;

&lt;p&gt;Lazy steps: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/public-apis/public-apis"&gt;Go here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Choose a crypto or games &amp;amp; comics API with Auth = NO, HTTPS = YES, CORS = NO (if you're feeling extra productive, you can risk it with unknown)&lt;/li&gt;
&lt;li&gt;Follow along &lt;a href="https://www.youtube.com/watch?v=HaEB0vdxpdg"&gt;this kinda video&lt;/a&gt; and just change API specifics to yours&lt;/li&gt;
&lt;li&gt;EXTRA: Try out the API you chose with &lt;a href="https://www.postman.com/"&gt;Postman&lt;/a&gt;. Just paste the URL into it and it's just enough experience that you can add it to your CV. And you guessed it, the companies really dig it&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#chapter-two-graphs"&gt;
  &lt;/a&gt;
  Chapter Two: Graphs
&lt;/h2&gt;

&lt;p&gt;Take a piece of paper, grab a pen and draw this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XxbWcHEk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/okf72k51xznkyh12mfff.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XxbWcHEk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/okf72k51xznkyh12mfff.jpeg" alt="Graph of least action"&gt;&lt;/a&gt;&lt;br&gt;
This graph represents principle of &lt;strong&gt;Least action&lt;/strong&gt; on the most complicated equation in the world. But also it's the symbol of our lazy, the least possible action needed mission. So let me introduce you to another graph, GraphQL. It's newer, better, faster and most importantly sounds smart and fancy, query language for APIs. To summarise even more, it replaces REST API. &lt;/p&gt;

&lt;p&gt;Lazy steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Read and learn &lt;a href="https://graphql.org/learn/queries/"&gt;this&lt;/a&gt;. Probably the most boring part of our mission, but &lt;em&gt;JUST DO IT!&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Start a new react project, choose &lt;a href="https://github.com/APIs-guru/graphql-apis"&gt;GraphQL API&lt;/a&gt; and install &lt;a href="https://www.apollographql.com/docs/react/"&gt;Apollo Client&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;Apollo Client gives your React project the power to use GraphQL queries. useQuery hook is all you need, so learn it &lt;a href="https://www.apollographql.com/docs/react/data/queries/"&gt;here&lt;/a&gt;, read to and including &lt;em&gt;Inspecting loading states&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;This project in itself is the same as the first one, just with different API endpoint and instead of fetch(), we implement useQuery(), so just reuse the logic ;)
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#chapter-three-the-next-episode"&gt;
  &lt;/a&gt;
  Chapter Three: The Next Episode
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;“The Next Episode” was released as the third single from Dr. Dre’s 2001 and features his frequent Dogg Pound collaborators Snoop Dogg, Nate Dogg and Kurupt. The single peaked at #23 on the US Billboard Hot 100 chart, while achieving platinum status.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Single that will make our status platinum is called &lt;strong&gt;Next.js&lt;/strong&gt;. New, shiny, talented kid on the block, wonderkid, the &lt;strong&gt;NEXT&lt;/strong&gt; big thing. It's the final touch to our mission. It will leave your interviewers speechless. Next.js is a minimalistic framework for server-rendered React applications as well as statically exported React apps. If it sounds complicated, lazy step one will explain all.&lt;/p&gt;

&lt;p&gt;Lazy steps: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Watch this &lt;a href="https://youtu.be/Sklc_fQBmcs"&gt;video&lt;/a&gt; by Fireship&lt;/li&gt;
&lt;li&gt;Start a new &lt;a href="https://nextjs.org/docs/getting-started"&gt;Next project&lt;/a&gt; with yarn (nice bonus touch)&lt;/li&gt;
&lt;li&gt;Recreate "Chapter two" project in Next&lt;/li&gt;
&lt;li&gt;Go to &lt;a href="https://vercel.com/"&gt;Vercel&lt;/a&gt; and sign up with your GitHub account&lt;/li&gt;
&lt;li&gt;In Vercel, click New Project -&amp;gt; Import Git Repository, choose this project and deploy it...yeah, it's that easy :)&lt;/li&gt;
&lt;li&gt;EXTRA: Vercel deployment also works with CRA projects, so deploy the rest of them &lt;/li&gt;
&lt;li&gt;EXTRA: Enable Vercel analytics for your Next.js project, it's just a click of a button, but hey, you used advanced analytics in your projects ;)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#the-end"&gt;
  &lt;/a&gt;
  The End
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Carl Hanratty&lt;/em&gt;: How did you do it, Frank? How did you cheat on the bar exam in Louisiana?&lt;br&gt;
&lt;em&gt;Frank Abagnale Jr.&lt;/em&gt;: I didn't cheat. I studied for two weeks and I passed.&lt;br&gt;
&lt;em&gt;- Catch Me If You Can (2002)&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Don't lie to yourself, these are the things you now know besides React, HTML and CSS:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;npm &amp;amp; yarn&lt;/li&gt;
&lt;li&gt;fetch API, test API with Postman&lt;/li&gt;
&lt;li&gt;GraphQL data structure and queries, Apollo Client for React, useQuery...&lt;/li&gt;
&lt;li&gt;SSG, SSR, Next.js, routing&lt;/li&gt;
&lt;li&gt;Vercel, deployment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Go on now, apply for the jobs, get one, earn paycheck or two, buy consuming content and subscription, get fired and repeat the process :)&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>career</category>
      <category>engineeringmonday</category>
    </item>
    <item>
      <title>My first pull requests</title>
      <author>Jozsef Polgar</author>
      <pubDate>Mon, 04 Oct 2021 10:31:31 +0000</pubDate>
      <link>https://dev.to/polgarj/my-first-pull-requests-1mno</link>
      <guid>https://dev.to/polgarj/my-first-pull-requests-1mno</guid>
      <description>&lt;h2&gt;
  &lt;a href="#this-year-im-participating-in-hacktoberfest"&gt;
  &lt;/a&gt;
  This year I'm participating in hacktoberfest.
&lt;/h2&gt;

&lt;p&gt;I never contributed to open-source projects before, but it changed with the start of this October. On the first weekend, I did 6 pull requests and 4 of them are already approved. I just did some small steps to gain a little self-confidence.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-first-pull-requests"&gt;
  &lt;/a&gt;
  My first pull requests
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#the-first-one-was-opendrinks-where-the-task-was-to-add-a-new-recipe-to-the-page-i-added-my-favourite-pumpkin-juice-recipe-in-this-project-i-made-2-mistakes"&gt;
  &lt;/a&gt;
  The first one was  &lt;a href="https://opendrinks.io/"&gt;opendrinks&lt;/a&gt;, where the task was to add a new recipe to the page. I added my favourite pumpkin juice recipe. In this project, I made 2 mistakes.
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;I forgot to upload a picture.&lt;/li&gt;
&lt;li&gt;I uploaded a file, which was created by a VSC plugin.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#covidoff"&gt;
  &lt;/a&gt;
  &lt;a href="https://covidoff.live/"&gt;Covid-off&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;I fixed alignment issues in a section, where you can find a lot of cards with the contact information of doctors. This pull request is not yet accepted.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#i-found-4-personal-sites-with-smaller-issues"&gt;
  &lt;/a&gt;
  I found 4 personal sites with smaller issues
&lt;/h3&gt;

&lt;p&gt;One of them had 2 different navigation bars on 2 pages. I found out, that the pages had different Bootstrap versions and this caused the problem.&lt;br&gt;
One had a form with messed-up accessibility.&lt;br&gt;
One had a scroll back to the top button, but it was not positioned well. &lt;br&gt;
And one had 2 CTA buttons on the main page with not so great hover effect.&lt;br&gt;
I fixed all of them and created a pull request, but the scroll to the top button issue is not yet accepted.&lt;/p&gt;

&lt;p&gt;So these were my first pull requests. Now I feel ready and I want to be a regular contributor from now on.&lt;/p&gt;

&lt;p&gt;Share your hacktoberfest story with me in the comment section.&lt;/p&gt;

</description>
      <category>hacktoberfest</category>
    </item>
    <item>
      <title>What is Elasticity demand? Types, definitions and Processes. </title>
      <author>Analytics steps</author>
      <pubDate>Mon, 04 Oct 2021 10:01:00 +0000</pubDate>
      <link>https://dev.to/analyticsstepss/what-is-elasticity-demand-types-definitions-and-processes-4pbc</link>
      <guid>https://dev.to/analyticsstepss/what-is-elasticity-demand-types-definitions-and-processes-4pbc</guid>
      <description>&lt;p&gt;What is Elasticity- If the quantity demanded of a product changes greatly in response to changes in its price, it is termed "elastic." That is, the demand point for the product is stretched far from its prior point. If the quantity purchased shows a small change after a change in its price, it is termed "inelastic." The quantity didn't stretch much from its prior point.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.analyticssteps.com/blogs/elasticity-demand-and-its-types"&gt;Elasticity demand&lt;/a&gt;- Price elasticity of demand is a measurement of the change in consumption of a product about a change in its price.&lt;/p&gt;

&lt;p&gt;Types of Elasticity Demand-&lt;/p&gt;

&lt;p&gt;Price Elasticity of Demand (PED)&lt;br&gt;
Income Elasticity of Demand (YED)&lt;br&gt;
Cross Elasticity of Demand (XED)&lt;/p&gt;

&lt;p&gt;To calculate the elasticity of demand, consider this example: Suppose that the price of apples falls by 6% from $1.99 a bushel to $1.87 a bushel. In response, grocery shoppers increase their apple purchases by 20%. The elasticity of apples therefore is: 0.20/0.06 = 3.33, The demand for apples is quite elastic.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Create a backend in Javascript: NodeJS Files and Folders Manipulation</title>
      <author>Eric The Coder</author>
      <pubDate>Mon, 04 Oct 2021 09:46:56 +0000</pubDate>
      <link>https://dev.to/ericchapman/create-a-backend-in-javascript-nodejs-files-and-folders-manipulation-3782</link>
      <guid>https://dev.to/ericchapman/create-a-backend-in-javascript-nodejs-files-and-folders-manipulation-3782</guid>
      <description>&lt;p&gt;Here is a series of articles to help you create backend applications in Javascript.&lt;/p&gt;

&lt;p&gt;Node.js is now a must, so it is essential for a developer to master it.&lt;/p&gt;

&lt;p&gt;I will publish a new article every two days and little by little you will learn everything there is to know about Node.js&lt;/p&gt;

&lt;p&gt;To not miss anything follow me on twitter: &lt;a href="https://twitter.com/EricTheCoder_"&gt;https://twitter.com/EricTheCoder_&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#modules-included-with-nodejs"&gt;
  &lt;/a&gt;
  Modules included with NodeJS
&lt;/h2&gt;

&lt;p&gt;NodeJS comes with several modules with functions that allow you to easily perform the most common tasks.&lt;/p&gt;

&lt;p&gt;You will see later that it is also possible to add other modules created by the community and extend the functionality of your application almost unlimited.&lt;/p&gt;

&lt;p&gt;Here I will present you only a few examples of NodeJS modules. You can consult the NodeJS documentation for full details of the modules and how they work. &lt;a href="https://nodejs.org/en/docs/"&gt;https://nodejs.org/en/docs/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-path-module"&gt;
  &lt;/a&gt;
  The Path module
&lt;/h2&gt;

&lt;p&gt;The 'path' module contains functions that allow proper handling of folder and file locations&lt;/p&gt;

&lt;p&gt;To reference a module, just use its name&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;products_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/data/products/products.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nx"&gt;products_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;basename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;products_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;products_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// products.json&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The path.basename() function allows you to return the name of the file only so in this case 'products.json'&lt;/p&gt;

&lt;p&gt;Another handy function is path.join(). This function allows you to join together one or more folders and files. example :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;data_folder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/data/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nx"&gt;products_folder&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/products&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nx"&gt;products_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;products.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;full_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data_folder&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;products_folder&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;products_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;full_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// /data/products/products.json&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;path.join() concatenates all given path segments together using the platform-specific separator as a delimiter, then normalizes the resulting path&lt;/p&gt;

&lt;p&gt;Finally, sometimes you would like to have the absolute path on the server&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;data_folder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/data/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nx"&gt;products_folder&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/products&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nx"&gt;products_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;products.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;full_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data_folder&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;products_folder&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;products_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;abs_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;products&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;products.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;abs_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// /Users/username/Documents/dev/learn_node/data/products/products.json&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;path.resolve() process the sequence of paths from right to left, with each subsequent path prepended until an absolute path is constructed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-file-system-module"&gt;
  &lt;/a&gt;
  The File System module
&lt;/h2&gt;

&lt;p&gt;Undoubtedly one of the most used module, this module allows you to handle files and folders on the server&lt;/p&gt;

&lt;p&gt;The FS module allows the manipulation of files and folders in two different ways. You can do this in synchronous or asynchronous mode.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#synchronous-functions"&gt;
  &lt;/a&gt;
  Synchronous functions
&lt;/h3&gt;

&lt;p&gt;This means that this function is blocking, NodeJS will wait for the function return value before resuming the execution of the application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#asynchronous-functions"&gt;
  &lt;/a&gt;
  Asynchronous functions
&lt;/h3&gt;

&lt;p&gt;This means that NodeJS will not wait for the function return value, it will continue your application execution and when the function is finished, will process the result.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#which-method-to-use"&gt;
  &lt;/a&gt;
  Which method to use?
&lt;/h3&gt;

&lt;p&gt;It depends on the type of application you want to develop. If for example you are developing a web server in this case it is preferable, not to say essential, to use an asynchronous function. A synchronous function would block the execution of the server not only for the current user but also would block all users.&lt;/p&gt;

&lt;p&gt;On the other hand in certain very precise cases the use of a synchronous function can be justified. For example, before launching a web server, if you need to read a configuration file, in this case, a synchronous function guarantees that you will read the file before the server is launched.&lt;/p&gt;

&lt;p&gt;In short, in general, always used an asynchronous function and only if necessary, a synchronous function.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-see-an-example-of-using-the-fs-module-with-the-two-types-of-functions"&gt;
  &lt;/a&gt;
  Let's see an example of using the 'fs' module with the two types of functions:
&lt;/h3&gt;

&lt;p&gt;Synchronous function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// app.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;info.txt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;utf-8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// file content&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The file has been read&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the result is easily predictable, the code will be executed line by line.&lt;/p&gt;

&lt;p&gt;Asynchronous function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;info.txt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;utf-8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The file has been read&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, NodeJS will not wait for the function to return to continue execution.&lt;/p&gt;

&lt;p&gt;This will have the consequence of displaying 'The file has been read' first and when the readFile() has finished its work, NodeJS will execute the callback function console.log(data)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reading-and-creating-a-file"&gt;
  &lt;/a&gt;
  Reading and creating a file
&lt;/h3&gt;

&lt;p&gt;Note that for the rest of this tutorial we will only use asynchronous functions.&lt;/p&gt;

&lt;p&gt;First we will create a text file. To do this we will use the writeFile function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is my Hello World file&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;info.txt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;utf-8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;File created&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The writeFile () function is quite self-descriptive. You must specify the file name, data and encoding option. (utf-8 for text)&lt;/p&gt;

&lt;p&gt;If you run this code, the info.txt file will be created in the current folder.&lt;/p&gt;

&lt;p&gt;Then it will be possible to read this file with the readFile function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;info.txt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;utf-8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the file does not exist you can return an error&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;info.txt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;utf-8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is also possible to read a file with readFile but using promises.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;promises&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;info.txt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;utf8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Different import and different syntax but same result&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#copy-a-file"&gt;
  &lt;/a&gt;
  Copy a file
&lt;/h3&gt;

&lt;p&gt;To copy a file we use the copyFile function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;copyFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;info.txt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;info2.txt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;File copied&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#create-a-folder"&gt;
  &lt;/a&gt;
  Create a folder
&lt;/h3&gt;

&lt;p&gt;To create a folder we use the mkdir function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mkdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Data folder created&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The folder is created inside the current folder&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#list-files-in-a-folder"&gt;
  &lt;/a&gt;
  List files in a folder
&lt;/h3&gt;

&lt;p&gt;It is possible to get the list of files in a folder&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;'.' represents the current file&lt;br&gt;
files is a array containing all folder file name&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#rename-a-file"&gt;
  &lt;/a&gt;
  Rename a file
&lt;/h3&gt;

&lt;p&gt;To rename a file we use the rename() function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;info.txt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data.txt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;File renamed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-possibilities-are-almost-endless"&gt;
  &lt;/a&gt;
  The possibilities are almost endless!
&lt;/h3&gt;

&lt;p&gt;You now have a base with the 'fs' module if you want to know all the available 'fs' functions, consult the NodeJS website for all the details:&lt;br&gt;
&lt;a href="https://nodejs.org/api/fs.html"&gt;https://nodejs.org/api/fs.html&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;That's all for today, follow me on twitter: &lt;a href="https://twitter.com/EricTheCoder_"&gt;https://twitter.com/EricTheCoder_&lt;/a&gt; to be notified of the publication of the next article (within two days).&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Design Patterns : Introduction</title>
      <author>Nishchya Verma</author>
      <pubDate>Mon, 04 Oct 2021 09:45:37 +0000</pubDate>
      <link>https://dev.to/nishchay7pixels/design-patterns-introduction-4m6f</link>
      <guid>https://dev.to/nishchay7pixels/design-patterns-introduction-4m6f</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wugotkPP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zmfqc3o8gagvl44ept5a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wugotkPP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zmfqc3o8gagvl44ept5a.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-design-patterns"&gt;
  &lt;/a&gt;
  What is Design Patterns?
&lt;/h2&gt;

&lt;p&gt;"You know what is a blueprint right?" Its a design plan and Design patterns are the blueprint that you customize as per your own software requirements in order to solve recurring problems in your source code. &lt;br&gt;
Simple? Well let me put it this way, Design patterns give you a way to write your code and structure it in a manner that makes it more effective and at the same time enhance its readability. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#design-patterns-are-not-algorithms"&gt;
  &lt;/a&gt;
  Design patterns are not Algorithms!
&lt;/h2&gt;

&lt;p&gt;Often people confuse design patterns with Algorithms. Design patterns are not specific to a problem statement. While algorithms are set of instructions to solve a problem, design patterns are more like how to make the implementation of your algorithm more readable. &lt;br&gt;
In other words, while an algorithm always defines a clear set of instructions that can achieve some goal with, a pattern is a more high-level description of a solution. Its possible that two code follow two different algorithms but implement same Design pattern.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-do-they-matter"&gt;
  &lt;/a&gt;
  Why do they matter?
&lt;/h2&gt;

&lt;p&gt;The answer to that is simple, every code follow a design pattern, some may be well defined like the ones I'll be sharing about in this Series and others may be just "Poorly designed". Design Patterns are a blueprint of tried and tested solution to common problem in software design.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-design-pattern-are-classified"&gt;
  &lt;/a&gt;
  How Design Pattern are classified?
&lt;/h2&gt;

&lt;p&gt;A pizza if designed round (mostly) and a burger(is also round but not pizza round). You getting me? I guess no, well Design patterns  differ in their complexity, level of detail and how are they applicable to the entire system being designed. All patterns can be categorized as below,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Creational patterns -&lt;/strong&gt; 
How objects should be created. eg. Factory Pattern, Singleton Pattern, etc.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Structural patterns -&lt;/strong&gt; 
How application classes and objects to be structured. eg. Decorator pattern, Adapter Pattern, etc.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Behavioral patterns -&lt;/strong&gt;
How different components of an application should behave. eg. Iterator pattern, Observer pattern, etc. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In next few posts we will be discussing each of the above category and the respective patterns that belong to those categories.&lt;br&gt;
Stay tuned!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d9fvtnwc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/neqy7nbeljhpl9hptvkc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d9fvtnwc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/neqy7nbeljhpl9hptvkc.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>opensource</category>
      <category>algorithms</category>
      <category>design</category>
    </item>
    <item>
      <title>Créer un backend en Javascript : Manipulation de fichiers et dossiers avec NodeJS</title>
      <author> Eric Le Codeur</author>
      <pubDate>Mon, 04 Oct 2021 09:44:48 +0000</pubDate>
      <link>https://dev.to/ericlecodeur/creer-un-backend-en-javascript-manipulation-de-fichiers-et-dossiers-avec-nodejs-2i6</link>
      <guid>https://dev.to/ericlecodeur/creer-un-backend-en-javascript-manipulation-de-fichiers-et-dossiers-avec-nodejs-2i6</guid>
      <description>&lt;p&gt;Voici une série d'articles qui vous permettra créer des applications backend en Javascript.&lt;/p&gt;

&lt;p&gt;Node.js est aujourd'hui un incontournable, il est donc essentiel pour un développeur de le maitriser.&lt;/p&gt;

&lt;p&gt;Je vais donc publier un nouvel article environ au deux jours et petit à petit vous apprendrez tout ce qu'il y a à savoir sur Node.js&lt;/p&gt;

&lt;p&gt;Pour ne rien manquer suivez moi sur twitter : &lt;a href="https://twitter.com/EricLeCodeur"&gt;https://twitter.com/EricLeCodeur&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#modules-inclut-avec-nodejs"&gt;
  &lt;/a&gt;
  Modules inclut avec NodeJS
&lt;/h2&gt;

&lt;p&gt;NodeJS est livré avec plusieurs modules avec des fonctions qui vous permettent d'exécuter facilement les tâches les plus courantes.&lt;/p&gt;

&lt;p&gt;Vous verrez plus tard qu'il est également possible d'ajouter d'autres modules créé par la communauté et d'étendre les fonctionnalités de votre application de façon presque illimité.&lt;/p&gt;

&lt;p&gt;Ici je vais vous présenter seulement quelques exemples de modules NodeJS. Vous pouvez consulter la documentation de NodeJS pour le détails complets des modules et de leurs fonctionnements. &lt;a href="https://nodejs.org/en/docs/"&gt;https://nodejs.org/en/docs/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#le-module-path"&gt;
  &lt;/a&gt;
  Le module Path
&lt;/h2&gt;

&lt;p&gt;Le module 'path' contient des fonctions qui permettent de traiter adéquatement les emplacements de dossier et fichiers&lt;/p&gt;

&lt;p&gt;Pour référencer un module, il suffit d'utiliser son nom&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;products_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/data/products/products.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nx"&gt;products_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;basename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;products_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;products_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// products.json&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;La fonction path.basename() permet de retourner le nom du fichier seulement donc dans ce cas-ci 'products.json'&lt;/p&gt;

&lt;p&gt;Une autre fonction pratique est path.join(). Cette fonction permet de joindre ensemble un ou plusieurs dossier et fichier. exemple :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;data_folder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/data/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nx"&gt;products_folder&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/products&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nx"&gt;products_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;products.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;full_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data_folder&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;products_folder&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;products_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;full_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// /data/products/products.json&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;path.join() concatène tous les segments de chemin donnés en utilisant le séparateur spécifique à la plate-forme comme délimiteur, puis normalise le chemin résultant&lt;/p&gt;

&lt;p&gt;Enfin, parfois vous aimeriez avoir la path absolue sur le serveur&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;data_folder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/data/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nx"&gt;products_folder&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/products&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nx"&gt;products_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;products.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;full_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data_folder&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;products_folder&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;products_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;abs_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;products&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;products.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;abs_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// /Users/username/Documents/dev/learn_node/data/products/products.json&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;path.resolve() traite la séquence de chemins de droite à gauche, chaque chemin suivant étant ajouté jusqu'à ce qu'un chemin absolu soit construit.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#le-module-file-system"&gt;
  &lt;/a&gt;
  Le module File System
&lt;/h2&gt;

&lt;p&gt;Sans doute un des module les plus utilisé, ce module permet de manipuler les fichiers et dossiers sur le serveur&lt;/p&gt;

&lt;p&gt;Le module FS permet la manipulation des fichiers et dossiers de deux façon différentes. Vous pouvez le faire en mode synchrone ou asynchrone.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fonctions-synchrones"&gt;
  &lt;/a&gt;
  Fonctions &lt;strong&gt;synchrones&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Cela signifie que cette fonction est bloquante, NodeJS attendra le retour de la fonction  avant de continuer l'exécution de l'application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fonctions-asynchrones"&gt;
  &lt;/a&gt;
  Fonctions &lt;strong&gt;asynchrones&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Cela signifie que NodeJS n'attendra pas que la fonction retourne une valeur, il va continuer l'exécution de votre application et quand la fonction sera terminé, il traitera le résultat.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quelle-m%C3%A9thode-utiliser-"&gt;
  &lt;/a&gt;
  Quelle méthode utiliser ?
&lt;/h3&gt;

&lt;p&gt;Ça dépend du type d'application que vous désirez développer. Si par exemple vous développer un serveur web et bien dans ce cas il est préférable, pour ne pas dire essentiel, d'utiliser une fonction asynchrone. Une fonction synchrone bloquerait l'exécution du serveur non seulement pour l'usager en cours mais également bloquerait tous les autres usager. &lt;/p&gt;

&lt;p&gt;Par contre dans certain cas très précis l'utilisation d'une fonction synchrone peut être justifié. Par exemple, avant de lancer un serveur web, si vous devez lire un fichier contenant la configuration de ce serveur, dans ce cas, une fonction synchrone vous garantie la lecture du fichier avant le lancement du serveur.&lt;/p&gt;

&lt;p&gt;Bref, de façon général, utilisé toujours une fonction asynchrone et seulement au besoin, une fonction synchrone.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#voyons-un-exemple-dutilisation-du-module-fs-avec-les-deux-types-de-fonctions-"&gt;
  &lt;/a&gt;
  Voyons un exemple d'utilisation du module 'fs' avec les deux types de fonctions :
&lt;/h3&gt;

&lt;p&gt;Fonction synchrone&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// app.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;info.txt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;utf-8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// file content&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Le fichier a été lu&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ici c'est simple, le code s'exécutera ligne par ligne. &lt;/p&gt;

&lt;p&gt;Fonction asynchrone&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;info.txt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;utf-8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Le fichier a été lu&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ici la fonction readFile sers lancé en mode asynchrone, donc NodeJS n'attendra pas le retour de la fonction pour continuer l'exécution. &lt;/p&gt;

&lt;p&gt;Ce qui aura comme conséquence d'afficher 'le fichier à été lu' en premier et seulement lorsque la fonction readFile aura terminé sont travail, NodeJS exécutera la fonction callback soit console.log(data)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lecture-et-cr%C3%A9ation-dun-fichier"&gt;
  &lt;/a&gt;
  Lecture et création d'un fichier
&lt;/h3&gt;

&lt;p&gt;Á noter que pour le suite de ce tutoriel nous allons utiliser seulement les fonctions asynchrones. &lt;/p&gt;

&lt;p&gt;D'abord nous allons créer un fichier text. Pour ce faire nous allons utiliser la fonction writeFile&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is my Hello World file&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;info.txt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;utf-8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;File created&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;La fonction writeFile() est assez auto-descriptive. Vous devez spécifier le nom du fichier, les données et l'option d'encodage. (utf-8 pour le texte)&lt;/p&gt;

&lt;p&gt;Si vous exécuté ce code, le fichier info.txt sera créer dans le dossier en cours.&lt;/p&gt;

&lt;p&gt;Ensuite il sera possible de lire ce fichier avec la fonction readFile&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;info.txt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;utf-8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Si le fichier n'existe pas vous pouvez retourner une erreur&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;info.txt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;utf-8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Il est également possible de lire un fichier avec readFile mais en utilisant les promesses.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;promises&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;info.txt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;utf8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Différente syntaxe, même résultat&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#copier-un-fichier"&gt;
  &lt;/a&gt;
  Copier un fichier
&lt;/h3&gt;

&lt;p&gt;Pour copier un fichier nous utilisons la fonction copyFile&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;copyFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;info.txt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;info2.txt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;File copied&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#cr%C3%A9er-un-dossier"&gt;
  &lt;/a&gt;
  Créer un dossier
&lt;/h3&gt;

&lt;p&gt;Pour créer un dossier nous utilisons la fonction mkdir&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mkdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Data folder created&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Le dossier est créer à l'intérieur du dossier en cours&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lecture-des-fichiers-dun-dossier"&gt;
  &lt;/a&gt;
  Lecture des fichiers d'un dossier
&lt;/h3&gt;

&lt;p&gt;Il est possible d'obtenir la liste des fichiers d'un dossier&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;'.' représente le dossier en cours&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#renommer-un-fichier"&gt;
  &lt;/a&gt;
  Renommer un fichier
&lt;/h3&gt;

&lt;p&gt;Pour renommer un fichier nous utilisons la fonction rename&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;info.txt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data.txt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;File renamed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#les-possibilit%C3%A9-sont-presque-infini-"&gt;
  &lt;/a&gt;
  Les possibilité sont presque infini !
&lt;/h3&gt;

&lt;p&gt;Vous avez maintenant une base avec le module 'fs' si vous désirez connaitre toutes les fonctions disponible, consulter le site de NodeJS pour tous les détails:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nodejs.org/api/fs.html"&gt;https://nodejs.org/api/fs.html&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;C'est tout pour aujourd'hui, suivez moi sur twitter : &lt;a href="https://twitter.com/EricLeCodeur"&gt;https://twitter.com/EricLeCodeur&lt;/a&gt; afin d'être avisé de la parution du prochain article (d'ici deux jours).&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>express</category>
      <category>beginners</category>
    </item>
    <item>
      <title>I crossed 3️⃣0️⃣0️⃣K Post Views on DEV!</title>
      <author>Saeed Ahmad</author>
      <pubDate>Mon, 04 Oct 2021 09:33:21 +0000</pubDate>
      <link>https://dev.to/mrsaeeddev/i-crossed-3-0-0-k-post-views-on-dev-5aol</link>
      <guid>https://dev.to/mrsaeeddev/i-crossed-3-0-0-k-post-views-on-dev-5aol</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction:
&lt;/h2&gt;

&lt;p&gt;I'm Saeed, a Senior Software Engineer from Pakistan. My journey into the world of software development started in around 2016. It was good.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--L2-RYyQP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1402112310836142080/9b31bsSU_normal.png" alt=" Saeed - Helping Devs to be better Engineers! profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
         Saeed - Helping Devs to be better Engineers!
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/mrsaeeddev"&gt;@mrsaeeddev&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Hi there 👋&lt;br&gt;&lt;br&gt;Welcome to my &lt;a href="https://twitter.com/Twitter"&gt;@Twitter&lt;/a&gt; account!&lt;br&gt;&lt;br&gt;👨‍💻 I'm a senior software engineer&lt;br&gt;👨‍🏫 I'm a lead instructor at a web development boot camp&lt;br&gt;🚧 I tweet about programming, systems, and data&lt;br&gt;&lt;br&gt;Fun fact: I make really good ☕ Chai&lt;br&gt;&lt;br&gt;🛑Do have a look at my profile and appreciate my work!
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      02:26 AM - 11 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1425282408308412418" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1425282408308412418" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1425282408308412418" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;I started with learning C-language. Later on I started learning JavaScript and React. After that, landed a job as an engineer at one of the local food-tech startups.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-journey-with-dev"&gt;
  &lt;/a&gt;
  My Journey with DEV:
&lt;/h2&gt;

&lt;p&gt;I started writing on DEV in the end of 2019. When I started writing here, I didn't realize that this platform would play such a big role in my life and will totally change it.&lt;/p&gt;

&lt;p&gt;Before writing on DEV, fewer people in the community knew me but after starting here, I started getting recognition in the local community.&lt;/p&gt;

&lt;p&gt;I remember when in one of the local meetups, many fellow community members reached out to me themselves telling me that they follow my posts on DEV and really like them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gQ02j9HT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zm9pxcf5pc740qu5e8gc.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gQ02j9HT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zm9pxcf5pc740qu5e8gc.gif" alt="Chimpanzee coding GIF"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#professional-life-after-dev"&gt;
  &lt;/a&gt;
  Professional life after DEV:
&lt;/h2&gt;

&lt;p&gt;I was already working in a company so continued working there. Some days later, switched my company due to some reasons. &lt;/p&gt;

&lt;p&gt;After some months, I lost my new job due to downsizing. COVID had just hit and companies were laying off their employees.&lt;/p&gt;

&lt;p&gt;What's more fascinating than this is that I got my next job in under 10 days!!!&lt;/p&gt;

&lt;p&gt;All due to my connections that I built through my technical writing on DEV and recognition due to it.&lt;/p&gt;

&lt;p&gt;I also started writing on various platforms especially LinkedIn after this and got around 13k followers there. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-im-doing-now"&gt;
  &lt;/a&gt;
  What I'm doing now?
&lt;/h2&gt;

&lt;p&gt;These days, I'm working as a boot camp instructor. Alongside that, I'm learning web3 and blockchain. Also, I do post tips and content related for engineers and I'm focused on helping them to be a better versions of themselves.&lt;/p&gt;

&lt;p&gt;If you are interested in any of these, follow me on Twitter (link in the start)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#300k"&gt;
  &lt;/a&gt;
  300K!
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lwd1Kjrv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xp4hqzoq70ukkqh2504v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lwd1Kjrv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xp4hqzoq70ukkqh2504v.png" alt="300K view on DEV - Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'm feeling really accomplished and happy on achieving this milestone. Although since a while I haven't been that active here but still it seems a great achievement. &lt;/p&gt;

&lt;p&gt;I thank everyone especially the team at DEV, most notably &lt;a class="mentioned-user" href="https://dev.to/jess"&gt;@jess&lt;/a&gt;
, &lt;a class="mentioned-user" href="https://dev.to/ben"&gt;@ben&lt;/a&gt;
, &lt;a class="mentioned-user" href="https://dev.to/peter"&gt;@peter&lt;/a&gt;
, &lt;a class="mentioned-user" href="https://dev.to/graciegregory"&gt;@graciegregory&lt;/a&gt;
, &lt;a class="mentioned-user" href="https://dev.to/nickytonline"&gt;@nickytonline&lt;/a&gt;
, &lt;a class="mentioned-user" href="https://dev.to/ridhwana"&gt;@ridhwana&lt;/a&gt;
 &amp;amp; all the amazing team members for their continuous efforts to make this platform a great place for the open source and development communities.&lt;/p&gt;

&lt;p&gt;Thank you so much DEV for helping me to achieve this milestone!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Preparing a Phoenix 1.6 app for deployment with Elixir Releases</title>
      <author>Miguel Cobá</author>
      <pubDate>Mon, 04 Oct 2021 09:19:58 +0000</pubDate>
      <link>https://dev.to/miguelcoba/preparing-a-phoenix-1-6-app-for-deploying-with-elixir-releases-3gf6</link>
      <guid>https://dev.to/miguelcoba/preparing-a-phoenix-1-6-app-for-deploying-with-elixir-releases-3gf6</guid>
      <description>&lt;p&gt;I'm going to prepare a Phoenix application for deployment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;Ensure to have your &lt;a href="https://dev.to/miguelcoba/creating-a-phoenix-application-with-asdf-16km"&gt;Phoenix 1.6 app&lt;/a&gt; running locally.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#runtime-configuration"&gt;
  &lt;/a&gt;
  Runtime configuration
&lt;/h2&gt;

&lt;p&gt;When deploying to production is better to inject runtime info to the application when it starts instead of having that info hardcoded in the source code. We pass info to the app to affect the way it works depending on the environment we are deploying the app to (e.g. staging, production).&lt;/p&gt;

&lt;p&gt;Elixir 1.11 has introduced a way to inject this runtime info easily with the &lt;code&gt;config/runtime.exs&lt;/code&gt; config file. If you open that file you'll see that it obtains some values from environment variables. The default environment variables to configure are &lt;code&gt;POOL_SIZE&lt;/code&gt;, &lt;code&gt;PORT&lt;/code&gt;, &lt;code&gt;DATABASE_URL&lt;/code&gt; and &lt;code&gt;SECRET_KEY_BASE&lt;/code&gt;. We need to specify a value for those envvars if we want our deployment to work correctly.&lt;/p&gt;

&lt;p&gt;For now we are going to test it locally, in our laptop. In a deployment service, like Gigalixir or Fly.io, those envvars are going to be provided when the app starts. We are going to do that manually here:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export POOL_SIZE=2
export PORT=4001
export DATABASE_URL=ecto://postgres:postgres@localhost/saturn_dev
export SECRET_KEY_BASE=$(mix phx.gen.secret)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I have my database named locally saturn_dev and the user and password the ones shown. You can see your own connection parameters in &lt;code&gt;config/dev.exs&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#build-in-production-mode"&gt;
  &lt;/a&gt;
  Build in production mode
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#compile-elixir-code"&gt;
  &lt;/a&gt;
  Compile elixir code
&lt;/h3&gt;

&lt;p&gt;We can now get the production dependencies:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mix deps.get --only prod
MIX_ENV=prod mix compile
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#compile-assets"&gt;
  &lt;/a&gt;
  Compile assets
&lt;/h3&gt;

&lt;p&gt;If the project has JS, CSS or other assets you can also compile them with the esbuild wrapper that phoenix now uses:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;MIX_ENV=prod mix assets.deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#test-that-the-project-starts-in-prod-mode"&gt;
  &lt;/a&gt;
  Test that the project starts in prod mode
&lt;/h3&gt;

&lt;p&gt;By now, if you haven't closed the terminal, you'll have the previous envvars still defined. If you have closed the terminal, you need to set them again.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;MIX_ENV=prod mix phx.server
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you go to &lt;a href="http://localhost:4001/"&gt;http://localhost:4001/&lt;/a&gt; you'll see the homepage of the app, but this time it is using the configuration that the &lt;code&gt;config/runtime.exs&lt;/code&gt; read from the terminal when it started instead of using the &lt;code&gt;config/dev.exs&lt;/code&gt; configuration. One thing you'll notice is that the LiveDashboard link is gone. This works only in dev mode.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kt3GIdux--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/psllr3788go8fbzn9koc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kt3GIdux--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/psllr3788go8fbzn9koc.png" alt="Phoenix App running in prod mode"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#generate-a-release"&gt;
  &lt;/a&gt;
  Generate a release
&lt;/h2&gt;

&lt;p&gt;We need to do an extra step before building the release using Elixir Releases. Open &lt;code&gt;config/runtime.exs&lt;/code&gt; and uncomment the following line, in the section titled "Using releases"&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;config :saturn, SaturnWeb.Endpoint, server: true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This direct the app to start the webserver when running the release executable. When we used &lt;code&gt;mix phx.server&lt;/code&gt; this was done for us. Now we need to explicitly enable it.&lt;/p&gt;

&lt;p&gt;After saving those changes we can now generate the release:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;MIX_ENV=prod mix release
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#run-the-release"&gt;
  &lt;/a&gt;
  Run the release
&lt;/h2&gt;

&lt;p&gt;We can now run the release executable generated by the mix release task:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;_build/prod/rel/saturn/bin/saturn start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you go again to &lt;a href="http://localhost:4001/"&gt;http://localhost:4001/&lt;/a&gt; you'll see the app running, but this time from the self-contained bundle that the Elixir Releases generated for us. &lt;/p&gt;

&lt;p&gt;You can put the contents of the &lt;code&gt;_build/prod/rel/saturn&lt;/code&gt; folder in any production server and start it. You don't need anything else installed because this folder includes all the dependencies and binaries required to run the application.&lt;/p&gt;

&lt;p&gt;You could do that manually, for example, by copying this folder to a DigitalOcean droplet or any other VPS provider, but there are better ways to do that.&lt;/p&gt;

&lt;p&gt;I'll show you how to deploy to &lt;a href="https://gigalixir.com/"&gt;Gigalixir&lt;/a&gt; in a future post.&lt;/p&gt;

&lt;p&gt;Miguel Cobá&lt;/p&gt;

</description>
      <category>elixir</category>
      <category>beginners</category>
      <category>deploy</category>
    </item>
    <item>
      <title>Guidelines for choosing a Node.js framework</title>
      <author>Simon Plenderleith</author>
      <pubDate>Mon, 04 Oct 2021 09:07:00 +0000</pubDate>
      <link>https://dev.to/simonplend/guidelines-for-choosing-a-node-js-framework-1ifk</link>
      <guid>https://dev.to/simonplend/guidelines-for-choosing-a-node-js-framework-1ifk</guid>
      <description>&lt;p&gt;I often see the question "What’s the best Node.js framework?" crop up on message boards and social media. The replies tend to be full of strong opinions. Some developers will even get into arguments about it. If you’re trying to figure out the right framework for your project, none of this is going to be much help.&lt;/p&gt;

&lt;p&gt;With lots of frameworks to choose from, and all those strong opinions, it’s easy to feel a little lost. Comparing frameworks based on the features they list can be a headache, and features are only part of the picture. It would be awesome if you had a clear checklist you could evaluate Node.js frameworks against.&lt;/p&gt;

&lt;p&gt;I can’t provide you with an exhaustive checklist, as every project, team and developer have different needs. I do have some guidelines though to help you think about what matters to you when choosing a Node.js framework.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Thank you to the following folks who shared &lt;a href="https://twitter.com/simonplend/status/1438479239041404932"&gt;on Twitter&lt;/a&gt; what they consider when choosing a Node.js framework: &lt;a href="https://twitter.com/i_like_robots"&gt;Matt Hinchcliffe&lt;/a&gt;, &lt;a href="https://twitter.com/AlexWilsonV1"&gt;Alex Wilson&lt;/a&gt;, &lt;a href="https://twitter.com/_aantipov"&gt;Alexey Antipov&lt;/a&gt; and &lt;a href="https://twitter.com/58bits"&gt;Anthony Bouch&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#jump-links"&gt;
  &lt;/a&gt;
  Jump links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#whats-your-use-case"&gt;What’s your use case?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#framework-styles"&gt;Framework styles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#support-for-promises-and-async-await"&gt;Support for promises and async / await&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#documentation"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#practical-examples"&gt;Practical examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#community-and-ecosystem"&gt;Community and ecosystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#project-health"&gt;Project health&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#whats-your-use-case"&gt;
  &lt;/a&gt;
  What’s your use case?
&lt;/h2&gt;

&lt;p&gt;Context is everything. Try and get clear on your requirements before you start looking at frameworks and their features. This will help you you figure out if a framework is designed to support your intended use case. If it’s not, you could find yourself fighting against it when building your application.&lt;/p&gt;

&lt;p&gt;Here are some use cases you might want to consider:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Full stack application vs API.&lt;/strong&gt; Will your application be serving up HTML pages or will it be an API sending JSON responses? If it’s an API, will it be &lt;a href="https://en.wikipedia.org/wiki/Representational_state_transfer"&gt;REST&lt;/a&gt; or &lt;a href="https://graphql.org/"&gt;GraphQL&lt;/a&gt; based?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Server-side rendering.&lt;/strong&gt; Do you plan to use React or Vue components in your application? Some frameworks provide helpers to simplify integrating these frameworks in your applications.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Serverless.&lt;/strong&gt; Will you be deploying your application to a serverless platform? For some serverless platforms like AWS Lambda, &lt;a href="https://www.techtalksbyanvita.com/post/serverless-cold-starts-can-we-mitigate-these"&gt;cold start time&lt;/a&gt; really matters. If a framework has a lot of initialisation to do before it can handle a request, it could have a big impact on your response times.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Real-time.&lt;/strong&gt; If you want to use WebSockets, look for built-in framework support, or a community maintained library which you integrate with the framework.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;TypeScript.&lt;/strong&gt; Do you want to write your application in &lt;a href="https://www.typescriptlang.org/"&gt;TypeScript&lt;/a&gt;? Some frameworks are designed only for TypeScript, some include type definitions, and others only have third-party types available which are maintained by the community. Even if you don’t intend to write your application in TypeScript, your code editor might be able to give you helpful hints based on a framework’s type definitions.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#framework-styles"&gt;
  &lt;/a&gt;
  Framework styles
&lt;/h2&gt;

&lt;p&gt;Some developers love frameworks which come with "batteries included", whereas others loathe them. "Batteries" in this context refers to features beyond HTTP request/response handling and routing. This might include things like validation, logging, authentication, database abstractions and dependency injection. Frameworks in this category tend to be highly opinionated about how applications should be built. They require you to structure things in a specific way so you can take advantage of the features which they offer.&lt;/p&gt;

&lt;p&gt;At the other end of the spectrum you’ll find minimal frameworks. They tend to offer HTTP request/response handling, routing, and not a whole lot more. They’re not particularly opinionated and provide you with the freedom to structure your applications as you wish. As they provide a limited amount of functionality "out-of-the-box", you will need to choose and integrate other packages to provide any other functionality you require.&lt;/p&gt;

&lt;p&gt;There are some frameworks which sit in the middle. They have &lt;em&gt;some&lt;/em&gt; opinions and provide &lt;em&gt;some&lt;/em&gt; additional functionality beyond the basics, such as logging and validation.&lt;/p&gt;

&lt;p&gt;The style of framework you choose can be guided by the use cases I’ve mentioned above. It’s also likely to come down to your personal preferences (or those of your team). You might not have any preferences yet, but it will help if you pay attention to each framework’s style.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#support-for-promises-and-async-await"&gt;
  &lt;/a&gt;
  Support for promises and async / await
&lt;/h2&gt;

&lt;p&gt;As Node.js and &lt;a href="https://en.wikipedia.org/wiki/ECMAScript"&gt;ECMAScript&lt;/a&gt; have evolved, applications designed around the &lt;a href="https://nodejs.dev/learn/javascript-asynchronous-programming-and-callbacks"&gt;callback pattern&lt;/a&gt; have faded away. Instead, we can now happily write applications with promises and &lt;code&gt;async&lt;/code&gt; / &lt;code&gt;await&lt;/code&gt;. This means it’s important for Node.js frameworks to be promise-aware. They should allow you to write &lt;code&gt;async&lt;/code&gt; route handler functions and safely handle uncaught promise rejections for you.&lt;/p&gt;

&lt;p&gt;If a framework doesn’t meet these basic requirements, it increases the risk of memory leaks or crashes in your applications. I’ve written an &lt;a href="https://simonplend.com/are-you-using-promises-and-async-await-safely-in-node-js/"&gt;in-depth article&lt;/a&gt; which explains why this matters and what to look out for.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#documentation"&gt;
  &lt;/a&gt;
  Documentation
&lt;/h2&gt;

&lt;p&gt;Firstly, does the framework have documentation?! You’re likely to struggle building an application with a framework if it doesn’t have documentation. If you don’t see any, you should probably avoid using it.&lt;/p&gt;

&lt;p&gt;Once you’ve established that a framework has documentation, try and get a sense of its quality. Not all documentation is created equal, so here are some things to consider:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Can you comfortably navigate and search it?&lt;/strong&gt; The structure of documentation really matters. It can also be a big help if there’s a built-in search feature.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Does it make sense to you?&lt;/strong&gt; There might be lots of documentation, but if it’s poorly written it’s not going to be much help.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Do you think you will be able to apply it when writing your own code?&lt;/strong&gt; It’s one thing to read and understand how to do something, and totally another to apply it yourself when building a real application.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#practical-examples"&gt;
  &lt;/a&gt;
  Practical examples
&lt;/h2&gt;

&lt;p&gt;Reading through endless documentation to learn how to use a framework can feel overwhelming. Once you’ve got a general sense of what a framework can do, it really helps if there are &lt;em&gt;practical&lt;/em&gt; examples available which show you how to use it. A "hello world" example might show you the basics of how to use a framework, but it’s often not much help if you want to do something more complex. Practical examples will show solutions for real problems you might need to solve. Ideally they’ll also demonstrate the "best practices" for using that particular framework.&lt;/p&gt;

&lt;p&gt;You might find practical examples in the framework documentation, or perhaps in an &lt;code&gt;examples&lt;/code&gt; folder in the project’s GitHub repository. Some frameworks even have full example applications on GitHub which you can browse, run and pick apart.&lt;/p&gt;

&lt;p&gt;Seeing how the people who created a framework use it can be an excellent way of learning how to use it yourself. Instead of just grinding your way through documentation, practical examples will help you accelerate your learning curve with a new framework.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#community-and-ecosystem"&gt;
  &lt;/a&gt;
  Community and ecosystem
&lt;/h2&gt;

&lt;p&gt;The community which exists around a framework really matters. When shit hits the fan and you get really stuck or run into a weird bug, it’s important to know where you can go for help. Check if there’s a message board, Slack or Discord server for the framework you’re looking at. Dip into it and get a feel for the community. Do the people there seem welcoming and supportive? Are they happy to accept contributions? The community around a framework might not matter to you on day one, but you’ll definitely need it in the long term.&lt;/p&gt;

&lt;p&gt;Framework popularity isn’t everything, but you’ll be building your whole application around it, so it’s important to check that it’s used by other developers. If a framework has widespread adoption it will make it easier to find libraries which have been written to work with it (e.g. middleware or plugins). It can be fairly straightforward to swap out one library for another in your application, but that’s generally not the case with a framework.&lt;/p&gt;

&lt;p&gt;The stars for a repository on GitHub are often cited as an indicator of popularity, but I think they’re better viewed as a measure of general interest rather than actual usage. A simple way to determine if a framework is being used is by looking at its package download counts. They can’t be taken as a measure of how many projects are &lt;em&gt;using&lt;/em&gt; a framework — many frameworks are bundled with other libraries but not used — but they can give you an idea of whether a framework is widely used. You can view weekly downloads on a package’s npm page, and the tool &lt;a href="https://www.npmtrends.com/"&gt;npm trends&lt;/a&gt; shows package downloads over time. It also allows you to compare packages.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#project-health"&gt;
  &lt;/a&gt;
  Project health
&lt;/h2&gt;

&lt;p&gt;When choosing a framework to build your application with, you want to be confident that the project is in good health and will continue to be maintained for the foreseeable future. Here are some indicators to look for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Releases.&lt;/strong&gt; Some developers hold the opinion that a framework doesn’t need new releases if it’s already "feature complete", but security updates and bug fixes are necessary. There is always the potential that major vulnerabilities exist in a framework (or one of its dependencies). It’s wise to avoid any framework which is unmaintained and no longer putting out releases.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Activity on issues.&lt;/strong&gt; Lots of issues with no recent responses from maintainers could be an indicator that the project is unmaintained. On the flip side, if there are no issues at all, it could suggest that usage of the framework is very low.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Pull requests.&lt;/strong&gt; A healthy project will typically have some recent pull request activity. Lots of old and inactive open pull requests could indicate that the project is no longer being maintained.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Contributors.&lt;/strong&gt; If there are only one or two contributors to a framework it could suggest there isn’t much of a community around it. It also creates a risk around the long term maintenance of that framework if those contributors step back from the project. A healthy project will have numerous contributors, adding changes large and small.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Dependency graph.&lt;/strong&gt; The more dependencies a framework has, the larger the attack surface area. It can also make debugging issues in your applications much more difficult. You don’t need to find a framework with zero dependencies, but you should have some awareness of a framework’s dependency graph. The tool &lt;a href="https://npmgraph.js.org"&gt;npmgraph&lt;/a&gt; can provide you with an excellent overview.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following tools can help you determine the health of a framework project:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://snyk.io/advisor/"&gt;Snyk Open Source Advisor&lt;/a&gt;.&lt;/strong&gt; This tool generates a "health score" for packages. It pulls in data from several difference sources and summarises them to help you determine the health of a project.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;The ‘Insights’ tab on GitHub repositories.&lt;/strong&gt; This tab provides a comprehensive overview of recent project activity (releases, pull requests, issues and contributors).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://moiva.io/"&gt;Moiva&lt;/a&gt;.&lt;/strong&gt; This is an open source tool which provides similar data to the Snyk and GitHub tools, but it conveniently allows you to compare metrics between frameworks.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;If you’re looking for a list of Node.js frameworks, check out the list on &lt;a href="https://github.com/sindresorhus/awesome-nodejs#web-frameworks"&gt;Awesome Node.js&lt;/a&gt;. It includes popular Node.js frameworks, as well as some lesser known alternatives.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;It turns out there are plenty of things to consider when choosing a Node.js framework. There’s one last thing, however, which you might want to ask yourself when evaluating a framework: do you think you’ll enjoy writing applications with it? Personally, if I don’t enjoy using a framework, every time I need to work with it becomes a chore. The sweet spot is a framework which meets your requirements &lt;em&gt;and&lt;/em&gt; which you enjoy using.&lt;/p&gt;

&lt;p&gt;Choosing a Node.js framework can be tricky, but hopefully the guidelines I’ve shared will help you refine your own personal checklist. Good luck choosing the "best" framework for your project!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#want-to-create-better-nodejs-applications"&gt;
  &lt;/a&gt;
  Want to create better Node.js applications?
&lt;/h2&gt;

&lt;p&gt;I write articles to help you level up as a Node.js developer. I'll send practical advice straight to your inbox every couple of weeks if you &lt;a href="https://simonplend.com/subscribe/"&gt;get on the list&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>node</category>
      <category>frameworks</category>
    </item>
    <item>
      <title>Attend and Get Certified in Power BI Course</title>
      <author>Veer Rao</author>
      <pubDate>Mon, 04 Oct 2021 08:51:49 +0000</pubDate>
      <link>https://dev.to/veer26/attend-and-get-certified-in-power-bi-course-e1d</link>
      <guid>https://dev.to/veer26/attend-and-get-certified-in-power-bi-course-e1d</guid>
      <description>&lt;p&gt;Power BI training helps you become a master of Microsoft Power BI tools. Our KBS training institute is the leader in providing the best Power BI online training. Our online training classes will make you proficient in understanding Power BI architecture, Power BI integrations, Content packs, Data modeling, Service, Desktop, Mobile applications, and visualizations. Our Power BI Online Training course helps you to equip in clearing the Power BI Certification Exam.&lt;/p&gt;

&lt;p&gt;Here’re some of the job roles:&lt;br&gt;
• Power BI Admin&lt;br&gt;
• Power BI developer&lt;br&gt;
• Data Engineer&lt;br&gt;
• Data Scientist&lt;br&gt;
• Data Architect&lt;br&gt;
• Business Analyst&lt;br&gt;
• Business Intelligence Developer&lt;/p&gt;

&lt;p&gt;About Us&lt;br&gt;
KBS Training Institute offering vast IT learning courses via class room training, corporate training and online training platform. Expanding its operations across USA, UK, Europe and Asia, KBS Training has acquired huge market in India for IT learning. Students, job seekers and IT professionals come from various backgrounds are always in search of short-term IT programs to get knowledge and expand their skill-set. &lt;/p&gt;

&lt;p&gt;Contact Us&lt;br&gt;
Mail ID : &lt;a href="mailto:info@kbstraining.com"&gt;info@kbstraining.com&lt;/a&gt;&lt;br&gt;
Mobile No : +91 9848677004&lt;br&gt;
Visit Course : &lt;a href="https://www.kbstraining.com/power-bi-training.html"&gt;https://www.kbstraining.com/power-bi-training.html&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
