<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>"Hello, world!"</title>
      <author>Siddharth Chaudhary</author>
      <pubDate>Fri, 17 Dec 2021 14:24:57 +0000</pubDate>
      <link>https://dev.to/sidcraftscode/hello-world-2cd4</link>
      <guid>https://dev.to/sidcraftscode/hello-world-2cd4</guid>
      <description>&lt;p&gt;We've all been here before. When we start learning a language, the first thing we probably get taught to do is to output "Hello, world!" to the console. For some, "Hello, world!" can turn into a new opportunity, a new career, a new life..&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#but-where-did-it-originate"&gt;
  &lt;/a&gt;
  But where did it originate?
&lt;/h2&gt;

&lt;p&gt;The origins of hello world are unclear, but the phrase was first seen in Brian Kernigham’s book in 1972, A Tutorial Introduction to the Language B. After that, it was used in &lt;em&gt;The C Programming Language&lt;/em&gt; in 1978, which is what really made the phrase popular.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-it-looks-like-in-different-languages-today"&gt;
  &lt;/a&gt;
  What it looks like in different languages today
&lt;/h2&gt;

&lt;p&gt;Here is what "Hello, world!" looks like in some of the most popular programming languages today:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  Javascript
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello, world!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#python"&gt;
  &lt;/a&gt;
  Python
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, world!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#swift"&gt;
  &lt;/a&gt;
  Swift
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, world!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#ruby"&gt;
  &lt;/a&gt;
  Ruby
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Hello, world!"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#shell"&gt;
  &lt;/a&gt;
  Shell
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Hello, world!'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#java"&gt;
  &lt;/a&gt;
  Java
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HelloWorld&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, world!"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#php"&gt;
  &lt;/a&gt;
  PHP
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Hello World!"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#go"&gt;
  &lt;/a&gt;
  Go
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"fmt"&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, world!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#c"&gt;
  &lt;/a&gt;
  C
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;
&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, World!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#c"&gt;
  &lt;/a&gt;
  C++
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Hello World!"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;C#&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;HelloWorld&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Hello&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;         
        &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello World!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#rust"&gt;
  &lt;/a&gt;
  Rust
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello World!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thanks for reading, and I hoped you enjoyed my post on "Hello, world!"&lt;/p&gt;

&lt;p&gt;Check out my &lt;a href="https://sidcrafts.com"&gt;Website&lt;/a&gt; | &lt;a href="https://twitter.com/sidcraftscode"&gt;Twitter&lt;/a&gt; | &lt;a href="https://github.com/sidcraftscode"&gt;Github&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>javascript</category>
      <category>python</category>
      <category>swift</category>
    </item>
    <item>
      <title>TestOps: The Future of Software Testing</title>
      <author>Cody Simons</author>
      <pubDate>Fri, 17 Dec 2021 13:20:01 +0000</pubDate>
      <link>https://dev.to/codysimons20/testops-the-future-of-software-testing-3idi</link>
      <guid>https://dev.to/codysimons20/testops-the-future-of-software-testing-3idi</guid>
      <description>&lt;p&gt;Although terms like “quality testing” may seem modern, software testing has been around since the advent of computing roughly 70 years ago. Harvard University scientist Grace Murray coined the terms “bugging” and “debugging” in 1947 when a literal “bug” — in this case, a moth — got stuck in the computer circuitry and interrupted a connection. Since then, software testing has evolved rapidly with the increasing complexity of computer applications, and it continues to evolve. Nowadays there are many different software testing approaches, depending on the functionality of the software and what you want to test it for, but the overall goal of any software test is to provide an objective assessment of the quality of the software and the risk of its failure. As the capabilities and intricacies of computer software have grown, testing has, by necessity, become its own field, to the point where it can and should be operationalized to be done correctly. &lt;/p&gt;

&lt;p&gt;This article discusses modern testing operations, or TestOps, and provides a definition of TestOps, reviews the difference between TestOps and DevOps, and explains what to look for in a TestOps solution.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.katalon.com/resources-center/blog/what-is-testops/"&gt;Continue reading&lt;/a&gt;&lt;/p&gt;

</description>
      <category>testops</category>
      <category>devops</category>
      <category>softwaretesting</category>
    </item>
    <item>
      <title>How to create a Node and React Monorepo with Git Submodules</title>
      <author>Alex Eagleson</author>
      <pubDate>Fri, 17 Dec 2021 13:12:16 +0000</pubDate>
      <link>https://dev.to/alexeagleson/how-to-create-a-node-and-react-monorepo-with-git-submodules-2g83</link>
      <guid>https://dev.to/alexeagleson/how-to-create-a-node-and-react-monorepo-with-git-submodules-2g83</guid>
      <description>&lt;p&gt;All code from this tutorial as a complete package is available in &lt;a href="https://github.com/alexeagleson/monorepo-example"&gt;this repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Do you work with large or semi-large codebases that are starting to get out of control?  Do you have to deal with multiple different projects that interact with each other and have difficulty keeping versions aligned?  &lt;/p&gt;

&lt;p&gt;If you said yes to either of those things (or even if you're just anticipating encountering them in the future) then this tutorial is for you.  &lt;/p&gt;

&lt;p&gt;The purpose of this tutorial is to learn about some of the different ways that you can structure a large project which is composed primarily of smaller projects and modules.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#monorepos"&gt;
  &lt;/a&gt;
  Monorepos
&lt;/h3&gt;

&lt;p&gt;One method of grouping code from multiple projects into one is called a &lt;a href="https://en.wikipedia.org/wiki/Monorepo"&gt;monorepo&lt;/a&gt;.  A &lt;em&gt;monorepo&lt;/em&gt; is simply the practice of placing multiple different projects that are related in some way into the same repository.&lt;/p&gt;

&lt;p&gt;The biggest benefit is that you do not need to worry about version mismatch issues between the different pieces of your project.  If you update an API route in the server of your monorepo, that commit will be associated with the version of the front end that consumes it.  With two different repositories you could find yourself in a situation where your v1.2 front-end is asking for data from your v1.1 backend that somebody forgot to push the latest update for.&lt;/p&gt;

&lt;p&gt;Another big benefit is the ability to import and share code and modules between projects.  Sharing types between the back-end and front-end is a common use case.  Your can define the shape of the data on your server and have the front-end consume it in a typesafe way.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#git-submodules"&gt;
  &lt;/a&gt;
  Git Submodules
&lt;/h3&gt;

&lt;p&gt;In addition to monorepos, we also have the concept of &lt;a href="https://git-scm.com/book/en/v2/Git-Tools-Submodules"&gt;submodules&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let's say that we want to add a feature to our app that we have in another separate project.  We don't want to move the entire project into our monorepo because it remains useful as its own independent project.  Other developers will continue  to work on it outside of our monorepo project.&lt;/p&gt;

&lt;p&gt;We would like a way to include that project inside our monorepo, but not create a separate copy.  Simply have the ability to pull the most recent changes from the original repository, or even make our own contributions to it from inside our monorepo.  Git submodules allows you to do exactly that.&lt;/p&gt;

&lt;p&gt;This tutorial will teach you how to create your own project that implements both of these features.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#prerequisites-and-setup"&gt;Prerequisites and Setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#initializing-the-project"&gt;Initializing the Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#create-the-react-app"&gt;Create the React App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#create-the-monorepo"&gt;Create the Monorepo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#create-y0our-repository"&gt;Create Your Repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sharing-code-and-adding-dependencies"&gt;Sharing Code and Adding Dependencies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#add-a-git-submodule"&gt;Add a Git Submodule&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#wrapping-up"&gt;Wrapping Up&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites-and-setup"&gt;
  &lt;/a&gt;
  Prerequisites and Setup
&lt;/h2&gt;

&lt;p&gt;This tutorial assumes you have a basic familiarity with the following.  Beginner level experience is fine for most as the code can be simply copy/pasted.  For git you should know how to clone, pull, commit and push.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Git&lt;/li&gt;
&lt;li&gt;React&lt;/li&gt;
&lt;li&gt;Node.js&lt;/li&gt;
&lt;li&gt;Typescript&lt;/li&gt;
&lt;li&gt;NPM&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This tutorial requires yarn v1 installed (we use v1.22).  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#initializing-the-project"&gt;
  &lt;/a&gt;
  Initializing the Project
&lt;/h2&gt;

&lt;p&gt;To start, we need a &lt;code&gt;packages&lt;/code&gt; directory to hold the different projects in our monorepo.  Your structure should begin looking like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.
└── packages
    └── simple-express-app
          └── server.ts

From within the `packages/simple-express-app` directory, run:
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn init

yarn add express

yarn add &lt;span class="nt"&gt;-D&lt;/span&gt; typescript @types/express

npx tsc &lt;span class="nt"&gt;--init&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The final command will create a &lt;code&gt;tsconfig.json&lt;/code&gt; file.  Add the following to it:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;packages/simple-express-server/tsconfig.json&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"outDir"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"./dist"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now create your server file if you haven't yet:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;packages/simple-express-server/server.ts&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3001&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Example app listening at http://localhost:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point your directory structure should look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.
└── packages
    └── simple-express-app
          ├── server.ts
          ├── yarn.lock
          ├── package.json
          └── tsconfig.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll create a simple script in &lt;code&gt;package.json&lt;/code&gt; called &lt;code&gt;start&lt;/code&gt; that we can run with &lt;code&gt;yarn&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;packages/simple-express-server/package.json&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"simple-express-server"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"main"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"dist/server.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"license"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"MIT"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"tsc &amp;amp;&amp;amp; node dist/server.js"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"devDependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@types/express"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^4.17.13"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"typescript"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^4.5.4"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"dependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"express"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^4.17.1"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open your browser to &lt;a href="http://localhost:3001/"&gt;&lt;/a&gt; and you will see your data successfully queried:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7FdkrT2s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dqse2txyi/image/upload/v1639709686/blogs/git-submodules/express-data_i45ghb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7FdkrT2s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dqse2txyi/image/upload/v1639709686/blogs/git-submodules/express-data_i45ghb.png" alt="Express Data" width="409" height="123"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-the-react-app"&gt;
  &lt;/a&gt;
  Create the React App
&lt;/h2&gt;

&lt;p&gt;Next we move onto our React app.  Navigate to the &lt;code&gt;packages&lt;/code&gt; directory and run this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn create react-app simple-react-app &lt;span class="nt"&gt;--template&lt;/span&gt; typescript
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Before we do anything else we want to confirm that we can communicate with our server and get the JSON data that we are serving up.&lt;/p&gt;

&lt;p&gt;Open up the &lt;code&gt;App.tsx&lt;/code&gt; file in the &lt;code&gt;src&lt;/code&gt; directory of the project generated by &lt;code&gt;create-react-app&lt;/code&gt;.  We are going to add a simple button that uses the browser &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"&gt;fetch API&lt;/a&gt; to grab the data from our server and log it to the console.  &lt;/p&gt;

&lt;p&gt;&lt;code&gt;packages/simple-react-app/src/App.tsx&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;logo&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./logo.svg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App-header"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;logo&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App-logo"&lt;/span&gt; &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"logo"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          Edit &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;code&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;src/App.tsx&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;code&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; and save to reload.
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;
          &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App-link"&lt;/span&gt;
          &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"https://reactjs.org"&lt;/span&gt;
          &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt;
          &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"noopener noreferrer"&lt;/span&gt;
        &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          Learn React
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

        &lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="cm"&gt;/* NEW */&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;
          &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://localhost:3001/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;
              &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
              &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          GET SOME DATA
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we open the browser's development console (F12) and then click our button, we will see our server data fetched and logged in the browser:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mqdewDk0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dqse2txyi/image/upload/v1639711081/blogs/git-submodules/react-fetch_x3iqd8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mqdewDk0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dqse2txyi/image/upload/v1639711081/blogs/git-submodules/react-fetch_x3iqd8.png" alt="React Fetch Example" width="864" height="848"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is great!  We've accidentally created a template for a full stack React and Typescript app!  But that's not the reason we're here, so let's start pushing further into scenarios we might encounter in real projects that would lead us to consider options like a monorepo and git submodules.&lt;/p&gt;

&lt;p&gt;Before you continue take a moment to verify your project structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.
└── packages
    ├── simple-express-server
    │   ├── server.ts
    │   ├── yarn.lock
    │   ├── package.json
    │   └── tsconfig.json
    └── simple-react-app
        └── [default setup]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#create-the-monorepo"&gt;
  &lt;/a&gt;
  Create the Monorepo
&lt;/h2&gt;

&lt;p&gt;To manage our monorepo we are going to use two tools:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://lerna.js.org/"&gt;Lerna&lt;/a&gt;: For running scripts across multiple projects and adding new dependencies.  Lerna is also built to manage publishing your packages (though we will not be doing that as part of this tutorial)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://yarnpkg.com/features/workspaces"&gt;Yarn workspaces&lt;/a&gt;: For hoisting all shared dependencies into a single &lt;code&gt;node_modules&lt;/code&gt; folder in the root directory.  Each project can still define its own dependencies, so that you don't confuse which dependencies are required for which (client vs. server) for example, but it will pool the installed packages in the root.  &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For yarn we are using the still most commonly used yarn v1 &lt;em&gt;(current version as of this writing is v1.22).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Navigate to the root directory and run the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn init

yarn add &lt;span class="nt"&gt;-D&lt;/span&gt; lerna typescript

npx lerna init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Edit your Lerna configuration file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"packages"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"packages/*"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"npmClient"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"yarn"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"useWorkspaces"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We need to specify that &lt;code&gt;yarn&lt;/code&gt; is our NPM client and that we are using workspaces.&lt;/p&gt;

&lt;p&gt;Next we need to define the location of those workspaces in the root &lt;code&gt;package.json&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;package.json&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"monorepo-example"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"main"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"index.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"license"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"MIT"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"private"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"workspaces"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"packages/*"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"lerna run --parallel start"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"devDependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"lerna"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^4.0.0"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have made three changes above:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Set &lt;code&gt;private&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; which is necessary for workspaces to functions&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Defined the location of the workspaces as &lt;code&gt;packages/*&lt;/code&gt; which matches any directory we place in &lt;code&gt;packages&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added a script that uses Lerna to run.  This will allow us to use a single command to run the equivalent of &lt;code&gt;yarn start&lt;/code&gt; in both our Express server and React app simultaneously.  This way they are coupled together so that we don't accidentally forget to run one, knowing that currently they both rely on each other.  The &lt;code&gt;--parallel&lt;/code&gt; flag allows them to run at the same time.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now we are ready to install the dependencies in root:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Note: At this point before you run the install command, I would recommend you synchronize your Typescript version between your &lt;code&gt;simple-express-server&lt;/code&gt; and the one that comes bundled with your &lt;code&gt;simple-react-app&lt;/code&gt;.  Make sure both versions are the same in each project's &lt;code&gt;package.json&lt;/code&gt; and both are listed in &lt;code&gt;devDependencies&lt;/code&gt;.  Most likely the React app version will be older, so that is the one that should be changed.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Next run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx lerna clean &lt;span class="nt"&gt;-y&lt;/span&gt;

yarn &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first command will clean up the old &lt;code&gt;node_modules&lt;/code&gt; folders in each of your two packages.  This is the equivalent of simply deleting them yourself.  &lt;/p&gt;

&lt;p&gt;The second command will install all dependencies for both projects in a &lt;code&gt;node_modules&lt;/code&gt; folder in the root directory.&lt;/p&gt;

&lt;p&gt;Go ahead and check it out!  You'll see that &lt;code&gt;node_modules&lt;/code&gt; in the root is full of packages, while the &lt;code&gt;node_modules&lt;/code&gt; folders in &lt;code&gt;simple-express-server&lt;/code&gt; and &lt;code&gt;simple-react-app&lt;/code&gt; only have a couple (these are mostly symlinks to binaries that are necessary due to the way yarn/npm function).&lt;/p&gt;

&lt;p&gt;Before we go on we should create a &lt;code&gt;.gitignore&lt;/code&gt; file in the root to make sure we don't commit our auto-generated files:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.gitignore&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node_modules/
dist/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;(If you're using VS Code you'll see the folder names in the side bar go grey as soon as you sae the file, so you know it worked)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Verify your monorepo and workspaces are setup properly by running (from the root folder):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will see that both your Express app and React app start up at the same time!  Click the button to verify that your server data is available and logs to the console.  &lt;/p&gt;

&lt;p&gt;Lastly we need to initialize Typescript in the root of the project so that our different packages can import and export between one another.  Run the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx tsc &lt;span class="nt"&gt;--init&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the root directory and it will create your &lt;code&gt;.tsconfig.json&lt;/code&gt;.  You can delete all the defaults values from this file (your individual projects will se their own configuration values.)  The only field you need to include is:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;tsconfig.json&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"compilerOptions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"baseUrl"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"./packages"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our project now looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.
├── packages
|   ├── simple-express-server
|   │   ├── server.ts
|   │   ├── yarn.lock
|   │   ├── package.json
|   │   └── tsconfig.json
|   └── simple-react-app
|       └── [default setup]
├── lerna.json
├── tsconfig.json
├── package.json
└── yarn.lock
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#create-your-repository"&gt;
  &lt;/a&gt;
  Create Your Repository
&lt;/h2&gt;

&lt;p&gt;This is also a good time to commit your new project to your repository.  I'll be doing that now as well, you can see the &lt;a href="https://github.com/alexeagleson/monorepo-example"&gt;final version here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Note that in order to learn submodules effectively, we are going to be adding a submodule from a repository that &lt;em&gt;already exists&lt;/em&gt;, we don't want to use the one that &lt;code&gt;create-react-app&lt;/code&gt; generated automatically.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So for that reason I am going to delete the that repository by deleting the &lt;code&gt;.git&lt;/code&gt; directory inside &lt;code&gt;packages/simple-react-app&lt;/code&gt;.  This step is VERY IMPORTANT.  Make sure there is no &lt;code&gt;.git&lt;/code&gt; directory inside &lt;code&gt;simple-react-app&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now from the root directory you can run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git add &lt;span class="nb"&gt;.&lt;/span&gt;
git commit &lt;span class="nt"&gt;-am&lt;/span&gt; &lt;span class="s1"&gt;'first commit'&lt;/span&gt;
git remote add origin YOUR_GIT_REPO_ADDRESS
git push &lt;span class="nt"&gt;-u&lt;/span&gt; origin YOUR_BRANCH_NAME
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#sharing-code-and-adding-dependencies"&gt;
  &lt;/a&gt;
  Sharing Code and Adding Dependencies
&lt;/h2&gt;

&lt;p&gt;So let's quickly take a look at some of the benefits we get from our monorepo.  &lt;/p&gt;

&lt;p&gt;Let's say that there's a utility library that we want to use in both our React app and on our Express server.  For simplicity let's choose &lt;a href="https://lodash.com/"&gt;lodash&lt;/a&gt; which many people are familiar with.&lt;/p&gt;

&lt;p&gt;Rather than adding it to each project individually, we can use &lt;code&gt;lerna&lt;/code&gt; to install it to both.  This will help us make sure that we keep the same version in sync and require us to only have one copy of it in the root directory.  &lt;/p&gt;

&lt;p&gt;From the root run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx lerna add lodash packages/simple-&lt;span class="k"&gt;*&lt;/span&gt;

npx lerna add @types/lodash packages/simple-&lt;span class="k"&gt;*&lt;/span&gt; &lt;span class="nt"&gt;--dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will install &lt;code&gt;lodash&lt;/code&gt; in any of the projects in the &lt;code&gt;packages&lt;/code&gt; directory that match the &lt;code&gt;simple-*&lt;/code&gt; pattern (which includes both of ours).  When using this command you can install the package to dev and peer dependencies by adding &lt;code&gt;--dev&lt;/code&gt; or &lt;code&gt;--peer&lt;/code&gt; at the end.  More info on this command &lt;a href="https://github.com/lerna/lerna/tree/main/commands/add#lernaadd"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you check the &lt;code&gt;package.json&lt;/code&gt; file in both your packages you'll see that &lt;code&gt;lodash&lt;/code&gt; has been added with the same version to both files, but the actual package itself has a single copy in the &lt;code&gt;node_modules&lt;/code&gt; folder of your root directory.  &lt;/p&gt;

&lt;p&gt;So we'll update our &lt;code&gt;server.ts&lt;/code&gt; file in our Express project to do a couple of new things.  We'll import the shared &lt;code&gt;lodash&lt;/code&gt; library and use one of its functions (&lt;code&gt;_.snakeCase()&lt;/code&gt;) and we'll define a type interface that defines the shape of the data we are sending and export it so that we can &lt;em&gt;also&lt;/em&gt; use that interface in our React app to typesafe server queries.  &lt;/p&gt;

&lt;p&gt;Update your &lt;code&gt;server.ts&lt;/code&gt; file to look like the following:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;packages/simple-express-server.ts&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lodash&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3001&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;QueryPayload&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;_req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Allow any website to connect&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Access-Control-Allow-Origin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Continue to next middleware&lt;/span&gt;
  &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;responseData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;QueryPayload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;snakeCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Server data returned successfully&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;responseData&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Example app listening at http://localhost:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;(Note I have changed the key on the object from &lt;code&gt;data&lt;/code&gt; to &lt;code&gt;payload&lt;/code&gt; for clarity)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Next we will update our &lt;code&gt;App.tsx&lt;/code&gt; component in &lt;code&gt;simple-react-app&lt;/code&gt;.  We'll import &lt;code&gt;lodash&lt;/code&gt; just for no other reason to show that we can import the same package in both client and server.  We'll use it to apply &lt;code&gt;_.toUpper()&lt;/code&gt; to the "Learn React" text.  &lt;/p&gt;

&lt;p&gt;We will also import our &lt;code&gt;QueryPayload&lt;/code&gt; interface from our &lt;code&gt;simple-express-server&lt;/code&gt; project.  This is all possible through the magic of workspaces and Typescript.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;packages/simple-react-app/src/App.tsx&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;logo&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./logo.svg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lodash&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;QueryPayload&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;simple-express-server/server&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App-header"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;logo&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App-logo"&lt;/span&gt; &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"logo"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          Edit &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;code&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;src/App.tsx&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;code&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; and save to reload.
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;
          &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App-link"&lt;/span&gt;
          &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"https://reactjs.org"&lt;/span&gt;
          &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt;
          &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"noopener noreferrer"&lt;/span&gt;
        &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Learn React&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;
          &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://localhost:3001/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;
              &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
              &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;QueryPayload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          GET SOME DATA
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I find this is one of the trickiest parts to get right (the importing between packages).  The key to this is the installation of Typescript in the root of the project, and &lt;code&gt;"baseUrl": "./packages"&lt;/code&gt; value in the the &lt;code&gt;tsconfig.json&lt;/code&gt; in the root directory.  &lt;/p&gt;

&lt;p&gt;If you continue to have difficulty &lt;a href="https://stackoverflow.com/a/61467483"&gt;this&lt;/a&gt; is one of the best explanations I have ever come across for sharing Typescript data between projects in a monorepo.&lt;/p&gt;

&lt;p&gt;Once everything is setup, press the button on your React application and you'll be greeted with:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XTLMsxhI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dqse2txyi/image/upload/v1639718441/blogs/git-submodules/react-monorepo-fetch_p5hoys.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XTLMsxhI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dqse2txyi/image/upload/v1639718441/blogs/git-submodules/react-monorepo-fetch_p5hoys.png" alt="React Monorepo Fetch Example" width="868" height="817"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notice the snake_case response that matches the correct shape we defined.  Fantastic. &lt;/p&gt;

&lt;p&gt;Let's look at git submodules.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-a-git-submodule"&gt;
  &lt;/a&gt;
  Add a Git Submodule
&lt;/h2&gt;

&lt;p&gt;Recently I wrote a &lt;a href="https://dev.to/alexeagleson/how-to-create-a-dark-mode-component-in-react-3ibg"&gt;blog post&lt;/a&gt; on a very simple component for a React app that adds a dark mode, a &lt;code&gt;&amp;lt;DarkMode /&amp;gt;&lt;/code&gt; component.  The component is not part of a separate library we can install with an NPM command, it exists as part of a React application that has its own repository.&lt;/p&gt;

&lt;p&gt;Let's add it to our project, while still keeping it as its own separated repo that can be updated and managed independent of our monorepo.  &lt;/p&gt;

&lt;p&gt;From the &lt;code&gt;packages/simple-react-app/src&lt;/code&gt; directory we'll run this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git submodule add git@github.com:alexeagleson/react-dark-mode.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That will create the &lt;code&gt;react-dark-mode&lt;/code&gt; directory (the name of the git repository, you can add another argument after the above command to name the directory yourself).&lt;/p&gt;

&lt;p&gt;To import from the submodule it's as simple as... importing from the directory.  If we're going to add the &lt;code&gt;&amp;lt;DarkMode /&amp;gt;&lt;/code&gt; component it's as simple as adding:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;packages/simple-react-app/src/App.tsx&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;DarkMode&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./react-dark-mode/src/DarkMode&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      ...
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;DarkMode&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I've omitted some of the repetitive stuff above.  Unfortunately the default &lt;code&gt;background-color&lt;/code&gt; styles in &lt;code&gt;App.css&lt;/code&gt; are going to override the &lt;code&gt;body&lt;/code&gt; styles, so we need to update &lt;code&gt;App.css&lt;/code&gt; for it to work:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;packages/simple-react-app/src/App.css&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="nc"&gt;.App-header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* background-color: #282c34; */&lt;/span&gt;
  &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="m"&gt;2vmin&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c"&gt;/* color: white; */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.App-link&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* color: #61dafb; */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Comment out those color values and you're good to go!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8cpwf4rJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dqse2txyi/image/upload/v1639720663/blogs/git-submodules/react-submodule-import_cmdsk3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8cpwf4rJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dqse2txyi/image/upload/v1639720663/blogs/git-submodules/react-submodule-import_cmdsk3.png" alt="React Submodule Import Example" width="863" height="815"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you might be thinking -- couldn't I just have cloned that repo into that folder and done this?  What's the difference with submodules?&lt;/p&gt;

&lt;p&gt;Well now that we have this in place, let's look for the answer to exactly that.  Run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git status
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the output you'll see &lt;code&gt;new file:   ../../../.gitmodules&lt;/code&gt;.  That's something new if you've never used submodules before.  It's a hidden file that has been added to the project root.  Let's take a look inside it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[submodule "packages/simple-react-app/src/react-dark-mode"]
    path = packages/simple-react-app/src/react-dark-mode
    url = git@github.com:alexeagleson/react-dark-mode.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It stores a mapping to the directories in our project that map to other repositories.  &lt;/p&gt;

&lt;p&gt;Now if you commit your changes in the root of the monorepo and push, you'll see on Github that rather than being a regular directory inside this project -- it's actually a link to the real repository:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YY1Kgy-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dqse2txyi/image/upload/v1639722122/blogs/git-submodules/github-submodule_tel7cc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YY1Kgy-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dqse2txyi/image/upload/v1639722122/blogs/git-submodules/github-submodule_tel7cc.png" alt="Github Submodules" width="597" height="309"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So you can continue to update and make changes to this monorepo without impacting that other repository.  Great!  &lt;/p&gt;

&lt;p&gt;But can you update the dark mode repository from inside this one?  Sure you can!  (As long as you have write permission).&lt;/p&gt;

&lt;p&gt;Let's make a trivial change to the dark mode repository from inside this one and see what happens.  Navigate to:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;packages/simple-react-app/src/react-dark-mode/src/DarkMode.css&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;data-theme&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"dark"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--font-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#eee&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#333&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--link-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;peachpuff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I'm going to update the colour of the link when the app is in dark mode, from &lt;code&gt;lightblue&lt;/code&gt; to &lt;code&gt;peachpuff&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now obviously you won't be able to update my repository, but if you're following you can continue reading to see where this is going (or you can use your own repository of course).&lt;/p&gt;

&lt;p&gt;From this directory I make a commit and push.  When I check the repository there are no new commits to the &lt;code&gt;monorepo-example&lt;/code&gt; repository, but there IS a new commit to &lt;code&gt;react-dark-mode&lt;/code&gt;.  Even though we are still inside our monorepo project!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z7-DNTZ8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dqse2txyi/image/upload/v1639722643/blogs/git-submodules/github-submodule-2_jyb55y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z7-DNTZ8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dqse2txyi/image/upload/v1639722643/blogs/git-submodules/github-submodule-2_jyb55y.png" alt="Github Submodule Commit Example" width="657" height="516"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When working with submodules it's important to keep them up to date.  Remember that other contributors could be making new commits to the submodules.  The regular &lt;code&gt;git pull&lt;/code&gt; and &lt;code&gt;git fetch&lt;/code&gt; to your main root monorepo aren't going to automatically pull new changes to submodules.  To do that you need to run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git submodule update
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To get the latest updates.  &lt;/p&gt;

&lt;p&gt;You also have new command you'll need to run when cloning a project or pulling when new submodules have been added.  When you use &lt;code&gt;git pull&lt;/code&gt; it will pull the information &lt;em&gt;about&lt;/em&gt; relevant submodules, but it won't actually pull the code from them into your repository.  You need to run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git submodule init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To pull the code for submodules.&lt;/p&gt;

&lt;p&gt;Lastly, in case you prefer not to run separate commands, there is a way to pull submodule updates with your regular commands you're already using like clone and pull.  Simply add the &lt;code&gt;--recurse-submodules&lt;/code&gt; flag like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git pull --recurse-submodules

or

git clone --recurse-submodules
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;I hope you learned something useful about monorepos and submodules.  There are tons of different ways to setup a new project, and there's no one-size-fits-all answer for every team.&lt;/p&gt;

&lt;p&gt;I'd encourage you to play around with small monorepos (even clone this example) and get get comfortable with the different commands.  &lt;/p&gt;

&lt;p&gt;Please check some of my other learning tutorials.  Feel free to leave a comment or question and share with others if you find any of them helpful:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/alexeagleson/learnings-from-react-conf-2021-17lg"&gt;Learnings from React Conf 2021&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/alexeagleson/how-to-create-a-dark-mode-component-in-react-3ibg"&gt;How to Create a Dark Mode Component in React&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/alexeagleson/how-to-analyze-and-improve-your-create-react-app-production-build-4f34"&gt;How to Analyze and Improve your 'Create React App' Production Build &lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/alexeagleson/how-to-create-and-publish-a-react-component-library-2oe"&gt;How to Create and Publish a React Component Library&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/alexeagleson/how-to-use-indexeddb-to-store-data-for-your-web-application-in-the-browser-1o90"&gt;How to use IndexedDB to Store Local Data for your Web App &lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/alexeagleson/understanding-the-modern-web-stack-running-a-local-web-server-4d8g"&gt;Running a Local Web Server&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/alexeagleson/understanding-the-modern-web-stack-linters-eslint-59pm"&gt;ESLint&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/alexeagleson/understanding-the-modern-web-stack-prettier-214j"&gt;Prettier&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/alexeagleson/building-a-modern-web-stack-babel-3hfp"&gt;Babel&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/alexeagleson/understanding-the-modern-web-stack-react-with-and-without-jsx-31c7"&gt;React &amp;amp; JSX&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/alexeagleson/understanding-the-modern-web-stack-webpack-part-1-2mn1"&gt;Webpack: The Basics&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/alexeagleson/understanding-the-modern-web-stack-webpack-part-2-49bj"&gt;Webpack: Loaders, Optimizations &amp;amp; Bundle Analysis&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;For more tutorials like this, follow me &lt;a href="https://twitter.com/eagleson_alex?ref_src=twsrc%5Etfw"&gt;@eagleson_alex&lt;/a&gt; on Twitter&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>react</category>
      <category>javascript</category>
      <category>git</category>
    </item>
    <item>
      <title>Symfony Station Communique - 17 December 2021. A Look at Symfony and PHP news.</title>
      <author>Reuben Walker, Jr.</author>
      <pubDate>Fri, 17 Dec 2021 12:59:59 +0000</pubDate>
      <link>https://dev.to/reubenwalker64/symfony-station-communique-17-december-2021-a-look-at-symfony-and-php-news-51hh</link>
      <guid>https://dev.to/reubenwalker64/symfony-station-communique-17-december-2021-a-look-at-symfony-and-php-news-51hh</guid>
      <description>&lt;p&gt;This post originally appeared on &lt;a href="https://symfonystation.com/Symfony-Station-Communique-17-December-2021"&gt;Symfony Station&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Welcome to this week's Symfony Station Communique. It's your weekly review of the most valuable and essential news in the Symfony and PHP development communities.&lt;/p&gt;

&lt;p&gt;Thanks to Javier Eguiluz and Symfony for sharing &lt;a href="https://symfonystation.com/Symfony-Station-Communique-10-December-2021"&gt;our last communique&lt;/a&gt; in their &lt;a href="https://symfony.com/blog/a-week-of-symfony-780-6-12-december-2021"&gt;Week of Symfony&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;*Please note that links will open in a new browser window. My opinions, if I present any, will be in bold.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fdp3jq_t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w21x7x468dcmeyvlkwwn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fdp3jq_t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w21x7x468dcmeyvlkwwn.png" alt="Symfony logo" width="300" height="300"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#symfony"&gt;
  &lt;/a&gt;
  SYMFONY
&lt;/h2&gt;

&lt;p&gt;As always, we will start with the official news from Symfony.&lt;/p&gt;

&lt;p&gt;Highlight -&amp;gt; "This week, Symfony 5.4.1 and 6.0.1 maintenance versions were released. In addition, the SymfonyWorld 2021 Winter edition conference too place with great success. During the conference, Symfony UX 2.0 was released to add Stimulus 3 support and we introduced an automated way to create and manage Docker containers in Symfony applications. Lastly, the Symfony Demo application released its new version compatible with Symfony 6.0."&lt;/p&gt;

&lt;p&gt;A Week of Symfony #780 (6-12 December 2021)&lt;br&gt;
&lt;a href="https://symfony.com/blog/a-week-of-symfony-780-6-12-december-2021"&gt;https://symfony.com/blog/a-week-of-symfony-780-6-12-december-2021&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;SymfonyWorld Winter 2021 featured some great presentations including an overview of Symfony 6.&lt;/p&gt;

&lt;p&gt;The new version is the culmination of 2 years of hard work by the community. It embeds all the new features added during the development of Symfony 5, but also removes all the features deprecated during the same period.&lt;/p&gt;

&lt;p&gt;With PHP 8.0 as the minimum supported version, Symfony 6 is also an opportunity to embrace new language features.&lt;/p&gt;

&lt;p&gt;If you attended SymfonyWorld Winter 2021 you can watch the presentation replay by logging into Symfony Connect and using the link below.&lt;/p&gt;

&lt;p&gt;Everything about Symfony 6 Presentation from SymfonyWorld.&lt;br&gt;
&lt;a href="https://live.symfony.com/connect/start"&gt;https://live.symfony.com/connect/start&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Launched in 2018, SymfonyCorp is a company aiming at promoting the Symfony Open-Source framework by creating commercial products around it to ensure its sustainability. The SymfonyCorp team manages symfony.com, the Symfony conferences, the Symfony certification, SymfonyCloud, SymfonyInsight, SymfonyConnect, ...&lt;/p&gt;

&lt;p&gt;Symfony announced that SymfonyCorp is hiring remote Symfony developers to work on its internal products and projects.&lt;/p&gt;

&lt;p&gt;SymfonyCorp is hiring!&lt;br&gt;
&lt;a href="https://symfony.com/blog/symfonycorp-is-hiring"&gt;https://symfony.com/blog/symfonycorp-is-hiring&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In news I’m excited about Symfony had this announcement.&lt;/p&gt;

&lt;p&gt;“Over the years, Docker has become the de facto standard for building, shipping and running server applications. Docker allows you to store all the instructions needed to build the environment that will host your software next to the code, in the repository of the project.&lt;/p&gt;

&lt;p&gt;After 6 years of teamwork, Symfony and API Platform now include an industry-first set of tools designed to automatically create, manage and run the Docker containers needed for your applications.&lt;/p&gt;

&lt;p&gt;Introducing Docker support&lt;br&gt;
&lt;a href="https://symfony.com/blog/introducing-docker-support"&gt;https://symfony.com/blog/introducing-docker-support&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Symfony Demo application was introduced in 2015 as a reference application to show how to develop Symfony applications following the recommended best practices. This demo application is useful to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Learn Symfony&lt;/li&gt;
&lt;li&gt;Teach Symfony&lt;/li&gt;
&lt;li&gt;Test new features&lt;/li&gt;
&lt;li&gt;Benchmark Symfony and PHP&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s been updated for Symfony 6.&lt;/p&gt;

&lt;p&gt;Symfony Demo 2.0 Introduces Support for Symfony 6.0&lt;br&gt;
&lt;a href="https://symfony.com/blog/symfony-demo-2-0-introduces-support-for-symfony-6-0"&gt;https://symfony.com/blog/symfony-demo-2-0-introduces-support-for-symfony-6-0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Symfony Live is back for you French speakers.&lt;/p&gt;

&lt;p&gt;The SymfonyLive is back in Paris on April 7 and 8, 2022! We have the great pleasure to meet you physically at SymfonyLive Paris 2022! After a year of online conferences, we are delighted to be able to once again find the French-speaking community of Symfony at the Cité Internationale Universitaire in Paris.&lt;/p&gt;

&lt;p&gt;SymfonyLive Paris 2022: le retour!&lt;br&gt;
&lt;a href="https://symfony.com/blog/symfonylive-paris-2022-le-retour"&gt;https://symfony.com/blog/symfonylive-paris-2022-le-retour&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And they also announced the SymfonyWorld 2022 Summer Edition.&lt;/p&gt;

&lt;p&gt;SymfonyWorld Online 2022 Summer Edition conference is announced!&lt;br&gt;
&lt;a href="https://symfony.com/blog/symfonyworld-online-2022-summer-edition-conference-is-announced"&gt;https://symfony.com/blog/symfonyworld-online-2022-summer-edition-conference-is-announced&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Symfony also reviewed all the SymfonyWorld and Symfony Live conferences.&lt;/p&gt;

&lt;p&gt;Online SymfonyTour 2021 was a blast!&lt;br&gt;
&lt;a href="https://symfony.com/blog/online-symfonytour-2021-was-a-blast"&gt;https://symfony.com/blog/online-symfonytour-2021-was-a-blast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VVc-tVye--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ui7rxpbtow0xgf1c2sbz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VVc-tVye--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ui7rxpbtow0xgf1c2sbz.png" alt="Featured Item Image" width="660" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#featured-item"&gt;
  &lt;/a&gt;
  FEATURED ITEM
&lt;/h2&gt;

&lt;p&gt;PHP.Watch wrote this heartfelt post and I’m sure most of us share its sentiments.&lt;/p&gt;

&lt;p&gt;PHP powers over 75% of the web, and its success is attributed to thousands of PHP contributors, framework authors, PHP tooling developers, IDE and other tooling developers, and the rest of the PHP community. &lt;/p&gt;

&lt;p&gt;One of the most impactful contributors to PHP is Nikita Popov. Over the 25 years of PHP's history, there has never been more acceleration in new features, language clean-up, and up-keep than the past few years, and Nikita was behind most of the important changes in PHP before he recently stepped back from the project.&lt;/p&gt;

&lt;p&gt;Thank you, Nikita!&lt;br&gt;
&lt;a href="https://php.watch/news/2021/11/nikic"&gt;https://php.watch/news/2021/11/nikic&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#this-week"&gt;
  &lt;/a&gt;
  This Week
&lt;/h3&gt;

&lt;p&gt;Alex Daubois continues his impressive output. This week he looks at HTTP in Symfony.&lt;/p&gt;

&lt;p&gt;The love story between Symfony and HTTP&lt;br&gt;
&lt;a href="https://alex-daubois.medium.com/the-love-story-between-symfony-and-http-587416e54646"&gt;https://alex-daubois.medium.com/the-love-story-between-symfony-and-http-587416e54646&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Via SymfonyCasts: “Today marks 10 years of SymfonyCasts (formerly KnpUniversity)! How that is possible, I have no idea! But, I am quite certain it has something to do with all of you awesome devs - thank you for making this such a fun project to work on!” They continue to explore Symfony security.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://5hy9x.r.ag.d.sendibm3.com/mk/mr/HJYWwMabIC7tko_eEkueLFJ6yJqy7SMzuhGHd-RD-P3higiQGmYm5VrE2xR4KYLByIRPLJRsWx1GQdJ4pEO8rPP-77EJh-EttVn_VrbnIKZEjyx1yvR8NWgzESJjvIxJJqs21Nc92Q"&gt;This week on SymfonyCasts&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hanane Kacemi looks at Symfony, Docker, and Doctrine ORM.&lt;/p&gt;

&lt;p&gt;Symfony and Database&lt;br&gt;
&lt;a href="https://dev.to/hananekacemi/symfony-and-database-11j5"&gt;https://dev.to/hananekacemi/symfony-and-database-11j5&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Symfony &amp;amp; Database-Part 2&lt;br&gt;
&lt;a href="https://dev.to/hananekacemi/symfony-database-part-2-9b6"&gt;https://dev.to/hananekacemi/symfony-database-part-2-9b6&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Anthony Gilbert also had two posts on Symfony and Docker.&lt;/p&gt;

&lt;p&gt;Setting up a Symfony application using Docker.&lt;br&gt;
&lt;a href="https://dev.to/anthonygilbertt/setting-up-a-symfony-application-using-docker-4jl3"&gt;https://dev.to/anthonygilbertt/setting-up-a-symfony-application-using-docker-4jl3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How to set up Symfony &amp;amp; then Dockerize it.&lt;br&gt;
&lt;a href="https://dev.to/anthonygilbertt/how-to-set-up-symfony-then-dockerize-it-59k1"&gt;https://dev.to/anthonygilbertt/how-to-set-up-symfony-then-dockerize-it-59k1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Drupal announced that:&lt;/p&gt;

&lt;p&gt;Various type hints have been added for Symfony subclasses&lt;br&gt;
&lt;a href="https://www.drupal.org/node/3254142"&gt;https://www.drupal.org/node/3254142&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Speaking of Drupal, specbee notes that “Twig tweak module is a huge time saver for Drupal developers working with advanced twig templates. It offers several useful functions and filters that can ease the developer’s job. Developers can also write well formatted code which is more comprehensible.”&lt;/p&gt;

&lt;p&gt;Functions and filters to get you started with Twig Tweak in Drupal 9 (with examples)&lt;br&gt;
&lt;a href="https://www.specbee.com/blogs/twig-tweak-in-drupal-9-functions-and-filters"&gt;https://www.specbee.com/blogs/twig-tweak-in-drupal-9-functions-and-filters&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#last-week"&gt;
  &lt;/a&gt;
  Last Week
&lt;/h3&gt;

&lt;p&gt;Christian Kolb wrote “Login throttling is possible with Symfony out of the box since 5.2. But the default configuration doesn't work as soon as you have multiple server instances.&lt;/p&gt;

&lt;p&gt;Why? Because it stores the relevant data on the local filesystem.&lt;br&gt;
So all we need to do is to exchange the storage layer with a shared one. How to do this?”&lt;/p&gt;

&lt;p&gt;Login throttling with Symfony and multiple server instances&lt;br&gt;
&lt;a href="https://blog.digital-craftsman.de/login-throttling-with-symfony-and-multiple-server-instances/"&gt;https://blog.digital-craftsman.de/login-throttling-with-symfony-and-multiple-server-instances/&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#timeless"&gt;
  &lt;/a&gt;
  TIMELESS
&lt;/h3&gt;

&lt;p&gt;As you by now, I discover Akashic Seer's blog last month, which has Symfony-related posts. Here are a few more.&lt;/p&gt;

&lt;p&gt;Symfony 5+ Twig templates don’t forget to call the parent&lt;br&gt;
&lt;a href="https://akashicseer.com/web-development/symfony-5-twig-templates-dont-forget-to-call-the-parent/"&gt;https://akashicseer.com/web-development/symfony-5-twig-templates-dont-forget-to-call-the-parent/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How to secure individual Symfony AJAX API routes without using API Platform&lt;br&gt;
&lt;a href="https://akashicseer.com/web-security/how-to-secure-individual-symfony-ajax-api-routes-without-using-api-platform/"&gt;https://akashicseer.com/web-security/how-to-secure-individual-symfony-ajax-api-routes-without-using-api-platform/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We also continue to share the treasure trove of Symfony posts on Twilio’s blog.&lt;/p&gt;

&lt;p&gt;Create One-Time Passwords in PHP with Symfony and Twilio's Verify API&lt;br&gt;
&lt;a href="https://www.twilio.com/blog/create-one-time-password-in-php-with-symfony-twilio-verification-api"&gt;https://www.twilio.com/blog/create-one-time-password-in-php-with-symfony-twilio-verification-api&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Envoyer des rappels SMS en PHP depuis votre app Symfony&lt;br&gt;
&lt;a href="https://www.twilio.com/blog/envoyer-rappel-sms-php-symfony"&gt;https://www.twilio.com/blog/envoyer-rappel-sms-php-symfony&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lx-arzij--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ayaix62fl7yc6s0euogi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lx-arzij--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ayaix62fl7yc6s0euogi.png" alt="PHP logo" width="880" height="645"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#php"&gt;
  &lt;/a&gt;
  PHP
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#this-week"&gt;
  &lt;/a&gt;
  This Week
&lt;/h3&gt;

&lt;p&gt;Open Swoole IDE Helper for v4.8.1 are released with enhanced type hinting. Developers can do code autocompletion within the IDE like VScode or PHPStorm.&lt;/p&gt;

&lt;p&gt;Open Swoole IDE Helper released with enhanced type hinting for IDE&lt;br&gt;
&lt;a href="https://www.swoole.co.uk/article/openswoole-ide-helper-4.8.1-released"&gt;https://www.swoole.co.uk/article/openswoole-ide-helper-4.8.1-released&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Duckly blog recommends its best plugins for JetBrains’ PhpStorm IDE.&lt;/p&gt;

&lt;p&gt;23 Best PhpStorm plugins for 2022&lt;br&gt;
&lt;a href="https://duckly.com/blog/best-plugins-for-phpstorm-2022/"&gt;https://duckly.com/blog/best-plugins-for-phpstorm-2022/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sequally shows us how to create an PHP 8.1, NGINX and MySQL development environment with Docker.&lt;/p&gt;

&lt;p&gt;Docker with PHP 8.1, NGINX, and MySQL&lt;br&gt;
&lt;a href="https://medium.com/@Sequally/docker-with-php-8-1-nginx-and-mysql-ca7fdd39bb28"&gt;https://medium.com/@Sequally/docker-with-php-8-1-nginx-and-mysql-ca7fdd39bb28&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Speaking of NGINX, we recently ran across the following via DeliciousBrain’s newsletter.&lt;/p&gt;

&lt;p&gt;“DigitalOcean has a great online tool called NGINXConfig. It comes with a bunch of presets, from standard PHP applications to content management systems like WordPress and Joomla, as well as other popular web frameworks, including Django and Node.js. You can also configure practically everything you might need.”&lt;/p&gt;

&lt;p&gt;Quick &amp;amp; Easy Nginx Configuration&lt;br&gt;
&lt;a href="https://www.digitalocean.com/community/tools/nginx"&gt;https://www.digitalocean.com/community/tools/nginx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cees-Jan Kiewiet writes “PHP 8.1 is out and the hip new feature for non-blocking and asynchronous programming in PHP are fibers. In this post we're going to explore them and see how we at ReactPHP will start with them at the edge.”&lt;/p&gt;

&lt;p&gt;async &amp;amp; await at the edge with ReactPHP&lt;br&gt;
&lt;a href="https://blog.wyrihaximus.net/2021/12/async-and-await-at-the-edge-with-reactphp/"&gt;https://blog.wyrihaximus.net/2021/12/async-and-await-at-the-edge-with-reactphp/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The latest edition of PHP Architect magazine is out. Get yours today.&lt;/p&gt;

&lt;p&gt;The Zen of Mindful Programming&lt;br&gt;
&lt;a href="https://www.phparch.com/magazine/2021/12/the-zen-of-mindful-programming/"&gt;https://www.phparch.com/magazine/2021/12/the-zen-of-mindful-programming/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One Java developer came back to PHP after seven years. He was quite surprised.&lt;/p&gt;

&lt;p&gt;Trying out PHP after 7 years&lt;br&gt;
&lt;a href="https://www.kode-krunch.com/2021/12/trying-out-php-after-7-years.html"&gt;https://www.kode-krunch.com/2021/12/trying-out-php-after-7-years.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3zb7KjHL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e3n9uiym7marutelt13e.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3zb7KjHL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e3n9uiym7marutelt13e.jpeg" alt="Code logo" width="626" height="626"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other"&gt;
  &lt;/a&gt;
  OTHER
&lt;/h2&gt;

&lt;p&gt;The Guardian reports “The flaw, dubbed “Log4Shell”, may be the worst computer vulnerability discovered in years. It was uncovered in an open-source logging tool, Log4j, that is ubiquitous in cloud servers and enterprise software used across the industry and the government. Unless it is fixed, it grants criminals, spies and programming novices alike, easy access to internal networks where they can loot valuable data, plant malware, erase crucial information and much more.”&lt;/p&gt;

&lt;p&gt;Recently uncovered software flaw ‘most critical vulnerability of the last decade’&lt;br&gt;
&lt;a href="https://www.theguardian.com/technology/2021/dec/10/software-flaw-most-critical-vulnerability-log-4-shell"&gt;https://www.theguardian.com/technology/2021/dec/10/software-flaw-most-critical-vulnerability-log-4-shell&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;NPR reports “When programmers write code, they often rely on some extremely common and freely available bits of software — like using building blocks — to do common tasks. In this case, the vulnerable piece of software was something called Log4j, which is used in the programming language Java and essentially creates a log of activity on a device, copying down everything that happens as programs run.”&lt;/p&gt;

&lt;p&gt;Companies scramble to defend against newly discovered 'Log4j' digital flaw&lt;br&gt;
&lt;a href="https://www.npr.org/2021/12/14/1064123144/companies-scramble-to-defend-against-newly-discovered-log4j-digital-flaw"&gt;https://www.npr.org/2021/12/14/1064123144/companies-scramble-to-defend-against-newly-discovered-log4j-digital-flaw&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;David Crawshaw writes “there is more than enough written on the mechanics of and mitigations for the recent severe RCE in log4j. On prevention, this is the most interesting widely-reshared insight I have seen:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Log4j maintainers have been working sleeplessly on mitigation measures; fixes, docs, CVE, replies to inquiries, etc.&lt;/li&gt;
&lt;li&gt;Yet nothing is stopping people to bash us, for work we aren't paid for, for a feature we all dislike yet needed to keep due to backward compatibility concerns.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is making the rounds because highly-profitable companies are using infrastructure they do not pay for.&lt;/p&gt;

&lt;p&gt;It is the second statement in this tweet that is worthy of attention: the maintainers of log4j would have loved to remove this bad feature long ago, but could not because of the backwards compatibility promises they are held to.”&lt;/p&gt;

&lt;p&gt;log4j: between a rock and a hard place&lt;br&gt;
&lt;a href="https://crawshaw.io/blog/log4j"&gt;https://crawshaw.io/blog/log4j&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Have you published or seen something related to Symfony or PHP that we missed? If so, &lt;a href="https://symfonystation.com/Contact"&gt;please contact us&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That's it for this week. Thanks for making it to the end of another extended edition. I look forward to sharing next week's Symfony and PHP news with you on Friday.&lt;/p&gt;

&lt;p&gt;Please share this post. :) &lt;a href="https://symfonystation.com/Contact"&gt;Be sure to join our newsletter list&lt;/a&gt;, so you get each week's communique directly in your inbox (a day early). And follow us on Twitter at &lt;a href="https://twitter.com/symfonystation"&gt;@symfonfystation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Happy coding Symfonistas!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pzni7fFk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oed55u9l8rpq1ci425ph.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pzni7fFk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oed55u9l8rpq1ci425ph.png" alt="Photo of Reuben Walker" width="880" height="587"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Reuben Walker&lt;/p&gt;

&lt;p&gt;Founder &lt;a href="https://symfonystation.com/"&gt;Symfony Station&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ringmaster &lt;a href="https://media.mobileatom.net/"&gt;Mobile Atom Media&lt;/a&gt; and &lt;a href="https://www.mobileatom.net/"&gt;Mobile Atom Code&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>symfony</category>
      <category>php</category>
      <category>docker</category>
      <category>drupal</category>
    </item>
    <item>
      <title>Hey everyone, This is Yashi here. </title>
      <author>Yashi👩‍💻</author>
      <pubDate>Fri, 17 Dec 2021 12:58:54 +0000</pubDate>
      <link>https://dev.to/yashi_here/hey-everyone-this-is-yashi-here-10n</link>
      <guid>https://dev.to/yashi_here/hey-everyone-this-is-yashi-here-10n</guid>
      <description>&lt;p&gt;I will be starting a journey in python to machine learning and furthur enhances. As being new to this platform i would love to connect you all and if anyone is interested i would love to collaborate and give it afresh start. It will be a journey from zero , so if you are at any part of your technical life or you wish to start...Don't be afraid(I'm on the same page), we'll help each other out and we can learn altogether 😇😇😇 You just need a laptop and your brain!&lt;/p&gt;

</description>
      <category>python</category>
      <category>machinelearning</category>
      <category>git</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Visualize GitHub Pages Build Logs</title>
      <author>Rizèl Scarlett</author>
      <pubDate>Fri, 17 Dec 2021 12:50:50 +0000</pubDate>
      <link>https://dev.to/github/visualize-github-pages-build-logs-1mc1</link>
      <guid>https://dev.to/github/visualize-github-pages-build-logs-1mc1</guid>
      <description>&lt;p&gt;GitHub Pages has always felt magical because we never had a way to see the build logs for Jekyll sites. Admittedly, that can be a bit frustrating because it's harder to identify and solve problems without context. If GitHub Pages failed to build a site, the reason wasn't always clear.&lt;/p&gt;

&lt;p&gt;Fortunately, GitHub recently enabled GitHub Pages builds with GitHub Actions, a feature that allows developers to view the logs for their Jekyll and HTML page builds and deployments in the same place they see action logs. &lt;/p&gt;

&lt;p&gt;Before I explain how this works, I'll briefly describe GitHub Pages and GitHub Actions for those unfamiliar with these products.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-github-pages"&gt;
  &lt;/a&gt;
  About GitHub Pages
&lt;/h2&gt;

&lt;p&gt;GitHub Pages is a static hosting service. It generates and publishes a website based on the HTML, CSS, and JavaScript stored in your repository. The website will have a github.io domain by default, but you can also use a custom domain if preferred. For more information on GitHub Pages, read the &lt;a href="https://docs.github.com/en/pages/getting-started-with-github-pages/about-github-pages"&gt;official documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-github-actions"&gt;
  &lt;/a&gt;
  About GitHub Actions
&lt;/h2&gt;

&lt;p&gt;GitHub Actions is a tool that conveniently enables you to automate custom workflows inside of your GitHub repository. The workflows fire on specific events, such as a pull request or push. For example, one can trigger a workflow by creating a pull request.  While you can write your own action, you can use an existing action. There are over 10,000 actions in the GitHub Marketplace created by developers worldwide. Developers commonly use GitHub Actions for repetitive tasks such as checking for passing tests and release management. Visit GitHub’s &lt;a href="https://docs.github.com/en/actions"&gt;documentation&lt;/a&gt; about GitHub Actions for more information. You can better understand the difference between an action, an event, a workflow, and other GitHub Action related terminology with this &lt;a href="https://dev.to/github/whats-the-difference-between-a-github-action-and-a-workflow-2gba"&gt;post&lt;/a&gt; by Michelle Mannering. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#view-build-logs-for-jekyll-and-html-pages"&gt;
  &lt;/a&gt;
  View Build Logs for Jekyll and HTML Pages
&lt;/h2&gt;

&lt;p&gt;By default, when you enable GitHub Pages for your static site's repo, it will create and trigger a workflow called &lt;code&gt;pages build and deployment&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Let’s try it!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;: In an empty repo, create an index.html file with any contents you prefer. For now, you can add&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;What’s up world?&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;: In your repo, click Settings. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sKmL0UCM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c37pjzjihy4gfwyb4zgo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sKmL0UCM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c37pjzjihy4gfwyb4zgo.png" alt="Image description" width="880" height="156"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt;: On the left sidebar, choose Pages.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JfTIlrQ2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8wvng567fgi7i0xmy4wa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JfTIlrQ2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8wvng567fgi7i0xmy4wa.png" alt="Image description" width="622" height="506"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4&lt;/strong&gt;:  Enable GitHub Pages by choose the branch with the code you want reflected on your site, and don't forget to press save!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MF7soa_q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hnzxy8h2btonoa961am5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MF7soa_q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hnzxy8h2btonoa961am5.png" alt="Image description" width="880" height="172"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 5&lt;/strong&gt;: Head over to the Actions tab within your repo.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FdVegksO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/de3g3uobiw3hontg2vvc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FdVegksO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/de3g3uobiw3hontg2vvc.png" alt="Image description" width="880" height="55"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 6&lt;/strong&gt;: Now, you should see the newly created workflow called &lt;code&gt;pages build and deployment&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NGfvrAAt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vfhawd9yijuwagq65qc7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NGfvrAAt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vfhawd9yijuwagq65qc7.png" alt="Image description" width="880" height="208"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 7&lt;/strong&gt;: View the log details by clicking the workflow. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TjCtyGcd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tyq5fc4b24lps3zw9avj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TjCtyGcd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tyq5fc4b24lps3zw9avj.png" alt="Image of build logs" width="369" height="456"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 8&lt;/strong&gt;: If successful, you can view your live site at: &lt;code&gt;https://{your github name}.github.io/{your repo name}/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 9&lt;/strong&gt;: A new pages build and deployment workflow will run with every new push to the branch hosted on GitHub Pages. Try this out by adding this new line to your index.html:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;What’s up world?&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;I’m using GitHub Pages builds with GitHub Actions&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your workflow should successfully run a second time and update your GitHub Pages site. If the update fails, you can check the logs to analyze and diagnose the problem!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-nonjekyll-workaround"&gt;
  &lt;/a&gt;
  The Non-Jekyll Workaround
&lt;/h2&gt;

&lt;p&gt;If you want to see the logs for a site that's not built in Jekyll or HTML, you can do that with community-built workarounds. &lt;/p&gt;

&lt;p&gt;Below is an example workflow (created by the community) that builds and deploys a static React application to GitHub Pages:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;React build &amp;amp; deploy&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;main&lt;/span&gt;
  &lt;span class="na"&gt;pull_request&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;main&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;

    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Checkout code&lt;/span&gt;
      &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install Node.js&lt;/span&gt;
      &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-node@v1&lt;/span&gt;
      &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;node-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;14.x&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install NPM packages&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm ci&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build project&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm run build&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Run tests&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm run test&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Upload production-ready build files&lt;/span&gt;
      &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/upload-artifact@v2&lt;/span&gt;
      &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;production-files&lt;/span&gt;
        &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;./build&lt;/span&gt;

  &lt;span class="na"&gt;deploy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deploy&lt;/span&gt;
    &lt;span class="na"&gt;needs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;build&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;github.ref == 'refs/heads/main'&lt;/span&gt;

    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Download artifact&lt;/span&gt;
      &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/download-artifact@v2&lt;/span&gt;
      &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;production-files&lt;/span&gt;
        &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;./build&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deploy to gh-pages&lt;/span&gt;
      &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;peaceiris/actions-gh-pages@v3&lt;/span&gt;
      &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;github_token&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
        &lt;span class="na"&gt;publish_dir&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;./build&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I learned this genius method from Clyde D'Souza's blog post on &lt;a href="https://codeburst.io/deploying-a-react-app-using-github-pages-and-github-actions-7fc14d380796"&gt;Deploying a React App Using GitHub Pages and GitHub Actions&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reminders"&gt;
  &lt;/a&gt;
  Reminders
&lt;/h3&gt;

&lt;p&gt;Remember that GitHub Pages is looking for an index.html, index.md, or readme.md in the root of your project to render as a landing page. If you are using a framework like React, those files don't reside in the root of your project, so you need to run &lt;code&gt;npm run build&lt;/code&gt; to generate static assets, including an index.html file, for your app. Read this Pluralsight &lt;a href="https://www.pluralsight.com/guides/fix-create-react-app-showing-readme.md"&gt;blog post&lt;/a&gt; by Desmond Nyamador for detailed guidance on how to generate the needed assets. Desmond walks readers through generating an index.html and pointing GitHub pages to the correct file.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Learn more about GitHub Pages using GitHub Actions for builds with this &lt;a href="https://github.blog/changelog/2021-12-16-github-pages-using-github-actions-for-builds-and-deployments-for-public-repositories/"&gt;announcement post&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you liked this post, follow &lt;a href="https://dev.to/blackgirlbytes"&gt;me&lt;/a&gt; and &lt;a href="https://dev.to/github"&gt;GitHub&lt;/a&gt; on Dev.to for more content!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>devops</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>7 Checklist For A Successful Video Streaming Business</title>
      <author>Arya00123</author>
      <pubDate>Fri, 17 Dec 2021 12:21:41 +0000</pubDate>
      <link>https://dev.to/arya00123/7-checklist-for-a-successful-video-streaming-business-33ai</link>
      <guid>https://dev.to/arya00123/7-checklist-for-a-successful-video-streaming-business-33ai</guid>
      <description>&lt;p&gt;People like to watch videos when they have free time and if you are the one who is addicted towards watching videos please go through this article. If you would like to watch a video and want to explore more news about a &lt;strong&gt;&lt;a href="https://www.webnexs.com/vod-platform.php"&gt;successful video streaming business&lt;/a&gt;&lt;/strong&gt; then just read this blog.&lt;/p&gt;

&lt;p&gt;Go in front because you are not alone, you may have more companions around you. More than 80% of people globally say that they would like to watch a video rather than text reading, too. And actually, that number makes worth since we are in a society full of video streamers. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tips-for-a-successful-video-streaming-business"&gt;
  &lt;/a&gt;
  Tips for a successful video streaming business
&lt;/h1&gt;

&lt;p&gt;If you are not sure how to start or run a live streaming business event on Social Medias, don’t fear. We are here at Webnexs to assist you. You must make sure you don’t want to press the “Live” option on Facebook and look at the camera similar to a deer in headlights. As an alternative, we have come up with a complete checklist to assist you plan your first or next business for video live streaming. &lt;/p&gt;

&lt;p&gt;We will provide you the importance of live streaming and give a thorough knowledge about the topic for your video live streaming business in advance.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;An easy step-by-step procedure to live streaming&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When you’re fully prepared to begin a business or planning to learn how to live video streaming successfully, just follow these simple steps:&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#have-a-proper-plan-before-video-live-streaming"&gt;
  &lt;/a&gt;
  Have a proper plan before video live streaming
&lt;/h1&gt;

&lt;p&gt;Initially make sure to put a plan that your live streaming business is like a grand event. Think about some important or most trendy talk shows. Can you envision the guest setups, lighting effects, and plans for something like the night show which is not planned in advance? To say the better, it might be confusing to everyone.&lt;/p&gt;

&lt;p&gt;You will need to put the similar thought and suitable thoroughness into your live streaming business that you would put into a personal occasion of its kind. And you will want to set up your goals in mind as you start to make such plans; those will say a lot about the business logistics. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#try-to-target-your-audience"&gt;
  &lt;/a&gt;
  Try to target your audience
&lt;/h1&gt;

&lt;p&gt;Before starting a video live streaming business you must know your target audience and that planning will give you few advantages of the planning process. If it comprises a global population, that factor must include the date and time of your video stream also please make sure to think about the proper time zones or vacations that may not be top of mind in your home location. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#think-about-the-video-category"&gt;
  &lt;/a&gt;
  Think about the video category
&lt;/h2&gt;

&lt;p&gt;Then after targeting your audience just think of which category your live video streaming business falls inside, and plan a title format for your occasion. If you can’t or don’t find any above examples matching to your business needs then we will give you some ideas for the easy business ways that you can use to live video streaming business.&lt;/p&gt;

&lt;p&gt;Decide what important points you need to consider in live streaming or try to catch the point in advance. And if you are going to provide quality videos to your guests then choose a moderator or video hosting platform to make sure these points will help you and definitely it will work well for you to run a successful business.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#choose-the-right-platform"&gt;
  &lt;/a&gt;
  Choose the right platform
&lt;/h2&gt;

&lt;p&gt;Where and which platform you need to host a video is important. The platform you like to use will also depend on who you need to view the live stream. Different audiences will use different platforms or channels, so you will need to pick the best one that’s most possible to attract the crowd as per your want.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#choose-the-right-location"&gt;
  &lt;/a&gt;
  Choose the right location
&lt;/h2&gt;

&lt;p&gt;Last but not least, select the best location from which you are going to broadcast your live stream. Audiences have a very low attraction towards bad streaming; watching a slow video for at most 80 seconds will get weary or if the connection is mottled or videos carry a poor-quality, so make definite your setting is favourable to an optimistic viewing experience. &lt;/p&gt;

&lt;p&gt;Check whether your videos have a good lighting effect and check for the level of noise. Is there a possibility that your dog hiker will bark while shouting. Audience will never love to hear such a loud noise in between videos so be sure to concentrate on everything before live streaming any kind of videos. Think of these incidents and then finally pick a live streaming venue that will defend you from such situations. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pick-your-preferred-platform"&gt;
  &lt;/a&gt;
  Pick your preferred platform
&lt;/h2&gt;

&lt;p&gt;Here is where you will really want to set your goals in mind because diverse platforms can attain different things. Please concentrate on every corner before launching a live video streaming business because you can gain success only after a great hard work. YouTube platforms are a good option for you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#youtube-live"&gt;
  &lt;/a&gt;
  YouTube Live
&lt;/h2&gt;

&lt;p&gt;Events shared through YouTube Live are likely to have three goals totally. The goals are Content Marketing Strategist, registrants and the audiences.&lt;/p&gt;

&lt;p&gt;As a result, if you are searching to increase your revenue from live streaming please note that more than 75% of marketing professionals are utilizing videos to share on YouTube Live. It is a good platform and it is one of the most excellent platforms to attain success.&lt;/p&gt;

&lt;p&gt;Go through Google and see how that works. First of all, if you don’t have an account on Google already, you will need to sign up for an account on Google. Then create a channel on YouTube which is easy and not time consuming.&lt;/p&gt;

&lt;p&gt;Start as a beginner and grow as a leader in business. However, there's always a story behind every successful business person who finally leads to victory. Before beginning a video streaming business you must deeply learn about the basic concepts and also explore how to be a leader on some kind of live streaming business in order to inspire others to join you in your project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#acquire-worthy-concepts-lead-a-successful-video-streaming-business"&gt;
  &lt;/a&gt;
  Acquire worthy concepts lead a successful video streaming business
&lt;/h2&gt;

&lt;p&gt;Remember that a good friend will guide you to find a perfect live streaming business. Asking help from a good friend is one of the most important parts to attain success in the game of video streaming business. In order to attain greatness and various video streaming business ideas, as a business leader you must have a team of worthy individuals who believe in the work in order to move forward. You can foresee in understanding the meaning of success only from your business experience.&lt;/p&gt;

&lt;p&gt;Also, you need to possess leadership skills and inspire your effort to take their own unique skillets and apply them as a team for the wellness of your business. It’s equally important once you reach a good level of success in the live streaming business; also it will be a great feeling when you get the most likes, videos shared from your audiences.&lt;/p&gt;

&lt;p&gt;For more information, &lt;strong&gt;&lt;a href="https://www.webnexs.com/vod-platform.php"&gt;contact us&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

</description>
      <category>videostreamingbusiness</category>
      <category>videostreaming</category>
      <category>videostreamingchecklist</category>
    </item>
    <item>
      <title>Day 93/100 Web Design </title>
      <author>Rio Cantre</author>
      <pubDate>Fri, 17 Dec 2021 12:07:46 +0000</pubDate>
      <link>https://dev.to/riocantre/day-93100-web-design-bgd</link>
      <guid>https://dev.to/riocantre/day-93100-web-design-bgd</guid>
      <description>&lt;p&gt;Making time to think about the basics of web design would evaluate the significance of the structures and compositions, which are elements for the entire concept.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LxXwZwTd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xt7ux2l8cmsmj6qj96ly.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LxXwZwTd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xt7ux2l8cmsmj6qj96ly.png" alt="banner" width="726" height="249"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#clickability"&gt;
  &lt;/a&gt;
  Clickability
&lt;/h2&gt;

&lt;p&gt;For users on the web, the mouse click is perhaps the most fundamental human-computer interaction. The web became the web partially through the power of hypertext, or text in one document that links to other documents or resources. To this day, users navigate the web largely through mouse clicks (and finger taps on mobile and tablet devices).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#affordances"&gt;
  &lt;/a&gt;
  Affordances
&lt;/h2&gt;

&lt;p&gt;Objects afford the ability of users to interact with them in various ways. For instance, a bench affords a person the ability to sit on it, but if it is not affixed to the ground, it also affords the user the ability to turn it over, throw (if the user is physically able), or perform any number of other actions. Even though the designer was probably not designing the bench with throwing in mind as the primary user behavior, the object still affords this action. Potentials for interaction are collectively called the affordances of an object.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#signifiers"&gt;
  &lt;/a&gt;
  Signifiers
&lt;/h2&gt;

&lt;p&gt;Signifiers are aspects of an object that a designer uses to indicate potential and intended affordances of an object. For example, a teacup with no handle affords the ability to lift it and drink out of it. But designers and potters often add handles to signify that users can and should lift up the object and take a sip. The handle is an example of a common user experience pattern. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-snippets"&gt;
  &lt;/a&gt;
  Code Snippets
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function makeLine(length) {
    var line = "";
    for (var j = 1; j &amp;lt;= length; j++) {
        line += "* ";
    }
        return line + "\n";
    }

function buildTriangle(length){
    var triangle = "";
    var lineRow = 1;
    for (lineRow = 1 ; lineRow &amp;lt;= length ; lineRow++){
         triangle = triangle + makeLine(lineRow);
    }
         return triangle;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;One more week and I'll be over. The request for comments seems daunting, I approach on several people but only a few responded, it seems everybody are always busy. It's good to be busy.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.nytimes.com/2009/04/07/opinion/07crocker.html"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rn2CgsOd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/neqv695fszce65rdux58.png" alt="resource" width="726" height="78"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>programming</category>
      <category>design</category>
      <category>motivation</category>
    </item>
    <item>
      <title>Bulk SMTP Hosting - Dedicated SMTP Server | Bulk Email Service | Buy SMTP</title>
      <author>massmailservers</author>
      <pubDate>Fri, 17 Dec 2021 11:58:02 +0000</pubDate>
      <link>https://dev.to/masmailservers/bulk-smtp-hosting-dedicated-smtp-server-bulk-email-service-buy-smtp-31ag</link>
      <guid>https://dev.to/masmailservers/bulk-smtp-hosting-dedicated-smtp-server-bulk-email-service-buy-smtp-31ag</guid>
      <description>&lt;p&gt;Cheap smtp server for email marketing&lt;br&gt;&lt;br&gt;
Massmailservers a cheapest SMTP Service Provider. We offer the best SMTP Server for Mass Mailing, Send limitless Bulk promoting and transnational messages. Selecting an smtp server to simplify e mail sending shouldn't be the most difficult venture. MMS is a Cheapest smtp server that allows you to ship advertising and transaction emails in bulk. Mass Mail Servers presents you with flexible and cheap email marketing plans. Send unlimited cold emails with a reliable, affordable and best email blast service.&lt;/p&gt;

&lt;p&gt;CHOOSE YOUR PLAN,&lt;br&gt;
Send unlimited mass emails at affordable price.&lt;/p&gt;

&lt;p&gt;BSH - 01&lt;br&gt;
Best for Small businesses and Ecommerce websites to send transactional emails.&lt;br&gt;
 $175/mo&lt;br&gt;
 5000 Emails/hour&lt;br&gt;
 Unlimited Email Addresses&lt;br&gt;
 1 Dedicated IP&lt;br&gt;
 50 GB Disk Space&lt;br&gt;
 500 GB Bandwidth&lt;br&gt;
 Free IP Replacement*&lt;br&gt;
 Fast SSD Storage&lt;br&gt;
 FREE Bulk Email Software&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.massmailservers.net/bulk-smtp"&gt;https://www.massmailservers.net/bulk-smtp&lt;/a&gt;&lt;/p&gt;

</description>
      <category>writing</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>7 Tips to Crush Your Next System Design Interview</title>
      <author>Daniel Emod Kovacs</author>
      <pubDate>Fri, 17 Dec 2021 11:46:41 +0000</pubDate>
      <link>https://dev.to/superbet/7-tips-to-crush-your-next-system-design-interview-4cfe</link>
      <guid>https://dev.to/superbet/7-tips-to-crush-your-next-system-design-interview-4cfe</guid>
      <description>&lt;p&gt;It is no secret that the tech industry is blooming right now. Many big tech companies are expanding at a mind-boggling pace, which of course means a rapid influx of applicants. This leads to a need for optimising and streamlining the interview experience.&lt;/p&gt;

&lt;p&gt;We at &lt;a href="https://superbet.engineering"&gt;Superbet&lt;/a&gt; invest a lot into making our interviews concise, comprehensive and reproducible, to ensure all applicants get a fair and equal chance.&lt;/p&gt;

&lt;p&gt;One of the essential parts of our interview process is the &lt;strong&gt;System Design Interview&lt;/strong&gt;. It is not something we invented, but I think we're pretty good at giving candidates fair, yet challenging problems to think about for this ~1 hour section of our hiring flow. In my first 6 months of working at Superbet as a tech lead, I've conducted more than 20 interviews - the majority of which had been focusing on system design. With that experience in my bag, I'll spoil you with the best 7 pieces of advice I could come up with to help you ace your next system design interview.&lt;/p&gt;

&lt;p&gt;During a system design interview you're presented with a technical problem, e.g.: "how would you design an application, like DEV.to?" and your task is to talk the interviewers through your solution while covering a couple of different topic, e.g.: data modelling, services, scaling, frontend, logging and error handling, just to name a few.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-understand-the-problem"&gt;
  &lt;/a&gt;
  1. Understand the Problem
&lt;/h2&gt;

&lt;p&gt;This may sound cliché, but understanding the problem you're presented is going to give you a great advantage. So many candidates rush into trying to pump out a solution as quickly as they humanly can, without taking the time to really try to understand the question or problem in the first place.&lt;/p&gt;

&lt;p&gt;Let's examine why system design interviews exist and what we're trying to measure. Contrary to popular belief, after the interview concludes, we don't actually take the plan you've given us and turn it into the next unicorn startup. We're actually okay with you not giving us a full solution. What we're looking for is the way you approach a technical problem and how well you can reason about your decision making.&lt;/p&gt;

&lt;p&gt;The skills you will showcase during the system design interview will be able to tell us how well you'll manage problems in all sort of areas of engineering and not just in the specific environment that's presented during the interview.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-collect-all-of-the-requirements"&gt;
  &lt;/a&gt;
  2. Collect all of the Requirements
&lt;/h2&gt;

&lt;p&gt;A big mistake a lot of good engineers make, when tackling a system design interview is the lack of questions about the problem. We can't really score you on the assumptions you've made during the interview, although they do give us good insight into how your mind works. It's always safer to just take your time and ask all of the questions that come to your mind.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I like to say this phrase when introducing the system design interview to candidates who hadn't had a chance to take part in one yet: "your questions are just as valuable as your answers".&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A good rule of thumb is, if you're about to answer a question starting with "it depends", instead, explain that you need further clarification of specific parameters of the problem that will help you inform your decision. For example, don't just assume you can use AWS for everything. Certain countries may have regulations that prohibit businesses in a couple of different sectors from relying on cloud infrastructure and therefore you'd need to take into consideration the use of on-premise solutions if this is the case.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-focus-on-note-taking"&gt;
  &lt;/a&gt;
  3. Focus on Note Taking
&lt;/h2&gt;

&lt;p&gt;I know I have a horrible short term memory. To help with remembering details I take notes throughout the day and review them regularly. You don't have to have a bad memory to take advantage of note taking. It will not only benefit you in an extremely stressful situation, by taking reliance on your memory out of the equation, but it also helps interviewers by showcasing what information you're focusing on.&lt;/p&gt;

&lt;p&gt;Sometimes a system design interview will present you with a complex problem, especially as you climb higher on the engineering ladder. It's okay to lose track during the interview, however, the way you handle the situation or prevent it from happening in the first place is what's really important to us.&lt;/p&gt;

&lt;p&gt;If you're sharing your screen during the interview or are doing the interview in person, you will have a way of showing your notes to your interviewers. I recommend making sure they're aware that you're taking notes and ask if they're interested in your notes. Chances are they will be.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-use-a-visualisation-tool"&gt;
  &lt;/a&gt;
  4. Use a Visualisation Tool
&lt;/h2&gt;

&lt;p&gt;The result of the system design interview is a snapshot of a working system with explanation of the choices you've made while coming up with the design. One of the biggest challenges for both the interviewers and the candidates is to keep track of the final solution. We always recommend our candidates to use a visualisation tool that can not only help them with an overview of what they have so far, but also to help us see the solution at a bird's eye view.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The tool I recommend using is &lt;a href="https://app.diagrams.net/"&gt;Draw.io&lt;/a&gt;. The disadvantage of it is that there's no live sharing feature, so the only way for us to see your solution is for you to share your screen. &lt;a href="https://docs.google.com"&gt;Google Docs&lt;/a&gt; is also a viable alternative, albeit with limited options when it comes to drawing shapes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#5-do-not-get-lost-in-the-details"&gt;
  &lt;/a&gt;
  5. Do Not Get Lost in the Details
&lt;/h2&gt;

&lt;p&gt;Your solution should be comprehensive and should cover a wide array of topics of software design. It's also important to discuss edge cases and non-critical system components, e.g.: logging. The number one reason candidates fail to deliver a full solution to the system design interview on time is lack of focus on higher level issues, a.k.a.: getting lost in details.&lt;/p&gt;

&lt;p&gt;To make sure you don't lose yourself in the little details of your solution, I recommend the following approach. Instead of picking the area you're most familiar with, and expanding on it horizontally - you should start at the highest possible level. Explain what you expect your application to be able to do and then work your way down into the specifics of each component of the system.&lt;/p&gt;

&lt;p&gt;As an interviewer, I want to intervene as little as possible during the interview. I want to keep the candidate talking, without having to guide them. When you get lost in the details, your interviewer has to make a decision to intervene and interrupt the flow or let you talk, but risk you wasting precious time in details that are not required in your solution. The best way to make sure you provide enough detail is to ask before you give your solution.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-talk-through-your-process"&gt;
  &lt;/a&gt;
  6. Talk Through Your Process
&lt;/h2&gt;

&lt;p&gt;From my experience, the most successful candidates all have one quality in common. They are vocal. You might be someone who finds it easy to talk through your thinking process, however that isn't true for everybody and I appreciate that. It's something not everyone's good at naturally, however I recommend practicing thinking out loud, while you're preparing for an interview and you'll find it easier to do during your system design interview as well.&lt;/p&gt;

&lt;p&gt;Why is this important at all? To be an effective engineer, your communication skills are extremely important. For more junior engineers we want to make sure that you'll be able to ask your more senior teammates for advice when working on your tasks, while as a senior, we're looking for you to be able to jump in and mentor your teammates, as well as take part in discussions about tech.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-do-not-be-afraid-to-ask-for-help"&gt;
  &lt;/a&gt;
  7. Do Not Be Afraid to Ask for Help
&lt;/h2&gt;

&lt;p&gt;When you're doing your system design interview at Superbet, we'll try to create the atmosphere of a nice open-ended discussion between tech enthusiasts. As such, we'll be open to answering any and all of the questions you may come up with during the interview.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Have you ever wanted to say during an interview: "I'd just Google x and y"?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;On a system design interview it's okay not to know the exact technology or library that you'd use for a solution. In the real world you will be able to get help with all of that, whether it be reading documentation or looking the problem up on StackOverflow.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;"I'd use Redis, because I don't have to worry about persistence or memory use, but I need very quick reads and a way to publish changes as they happen"&lt;/em&gt; scores just as well as &lt;em&gt;"I'd use an in-memory database, because I don't have to worry about memory and they have quicker access speeds. If it's got built in pub/sub, it's even better. Can you suggest such a database?"&lt;/em&gt;. Remember, we're interested in your reasoning above all and if the actual answer is just a Google search away, we'll be happy to help you out with it.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;If you haven't been in a system design interview or are looking to improve the outcome of your next one, hopefully my tips will get you there. Remember, your mileage may vary. Not everybody does interviews the same way, so if you want to be safe, you can use all of the above in your interview at Superbet. You can find a link to our open positions page on &lt;a href="https://superbet.engineering"&gt;our engineering website&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>systems</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>career</category>
    </item>
    <item>
      <title>5 Reasons Why tyny.dev Is A Market Leader In API Technologies</title>
      <author>Jack Boreham</author>
      <pubDate>Fri, 17 Dec 2021 11:46:41 +0000</pubDate>
      <link>https://dev.to/jack_boreham_3121358aa147/5-reasons-why-tynydev-is-a-market-leader-in-api-technologies-4hdk</link>
      <guid>https://dev.to/jack_boreham_3121358aa147/5-reasons-why-tynydev-is-a-market-leader-in-api-technologies-4hdk</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-tynydev"&gt;
  &lt;/a&gt;
  What is tyny.dev?
&lt;/h2&gt;

&lt;p&gt;To understand &lt;a href="https://tyny.dev/"&gt;tyny.dev&lt;/a&gt;, it is best first to understand what an API is. An API or an Application Programming Interface is a software interface that offers a service to another piece of software. Companies commonly use API's due to their ease of use; they allow developers to save time due to the API itself implementing a specific feature, rather than the developer having to create new pieces of code. An API lists certain actions a user can implement on their software, carrying out all the hard work after selecting what you want the API to do. You can think of API like a dinner menu. You can choose what items you want on a list, and you can order them. An API is similar, with a user selecting certain actions, and the API does the rest.&lt;/p&gt;

&lt;p&gt;tyny.dev is an API service that allows you to build a custom JSON API in minutes without coding skills. tyny.dev is a software development tool to control code in a simple, quick and effective way without expertise. Thus, tyny.dev is one of the best API technologies on the market, offering scalable API for any product allowing you to control the code of your product quickly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-you-need-to-use-tynydev-api-technologies"&gt;
  &lt;/a&gt;
  Why You Need To Use tyny.dev API Technologies
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;tyny.dev Is Simple To Use&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;tyny.dev is easy to use and requires no expertise. Thus, tyny.dev is completely user friendly, offering unrivalled API technology in a practical and accessible way. Simply sign up and sign in to tyny.dev, and you can use the service instantly to integrate it into your products. tyny.dev is a market leader in this regard, with fantastic ease of use, making anyone feel like a developer.. Sign up to tyny.dev and get started.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;tyny.dev For Rapid Prototyping&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can use tyny.dev for rapid prototyping. Rapid prototyping is the process of developers/designers creating prototypes of software to stimulate the future of a piece of web application or app. Developing a prototype allows users to verify their ideas with other stakeholders, such as business leaders, other developers. Thus, it will enable you to communicate and work with other individuals easier. You can use tyny.dev for rapid prototyping to remove the need to wait for developers and backend teams to deliver endpoints. Thus, you can start mocking up your web application or app from the beginning allowing you to create a prototype fast and effectively, saving you both time and money. You can use tyny.dev for rapid prototyping to enable you to make the best product in the shortest amount of time.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;tyny.dev Centres on Static Unstructured Data&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can use tyny.dev for static unstructured data. Unstructured data is qualitative data or text. tyny.dev allows you to create your unstructured static data, which cannot fit in typical schemas. Thus, tyny.dev will enable you to implement long qualitative data sets into your projects, such as Terms and Conditions or other text-based features like about us pages. As a result, tyny.dev is multipurpose and can with ease be used for any static unstructured data. tyny.dev is efficient at doing so, making it one of the best API technologies in this regard on the market.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;tyny.dev Utilises Dynamic User Interfaces&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can use tyny.dev for server-driven user interfaces, allowing you to control the UI of your web application or app with ease. It features a dynamic user interface configuration, enabling you to change your UI on the fly without the need for product updates. As a result, tyny.dev offers unequalled server-driven UI that allows you to change up your user interface whenever and wherever you want to, without the need of a developer or expert. Thus, tyny.dev’s optimised server-driven interface is unparalleled due to its ease of use, simplicity and full functionality, saving time and putting you in the driving seat without the need for complex solutions.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;tyny.dev For Domain-Specific Languages&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;One of the main benefits of tyny.dev is that you can create domain-specific languages. Domain-specific Languages are languages that meet a specific use or demand. The beauty of tyny.dev is that it makes full use of the JSON schema, allowing you to control your code. tyny.dev will enable you to be creative with your code, allowing you to implement what you like. Thus, tyny.dev offers great flexibility in how you deal with your code, ensuring that all of your needs are met with just a few clicks. Therefore, tyny.dev through custom JSON can give you the edge you need to implement more complex code, making tyny.dev shine when dealing with specific use cases.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts-on-api-technologies"&gt;
  &lt;/a&gt;
  Final Thoughts On API Technologies
&lt;/h2&gt;

&lt;p&gt;Overall, tyny.dev is a market leader in API and gives a new spin to how we see and use APIs. It allows you to build a custom JSON API in minutes without the need for coding skills. It simplistically does this while having market-leading use cases such as rapid prototyping, dynamic user interfaces and domain-specific languages in the form of JSON schema. Likewise, tyny.dev focuses on static unstructured data, allowing you to implement text using tyny.dev. Thus, tyny.dev is not trying to compete with structured data API or a fully-fledged REST API but is perfect for specific use cases.&lt;/p&gt;

&lt;p&gt;Sign up for &lt;a href="https://tyny.dev/"&gt;tyny.dev&lt;/a&gt; today for free, and let our API software do the talking.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>webdev</category>
      <category>devops</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Best Voice APIs for Web &amp; Mobile Apps [2022 Market Research]</title>
      <author>krishi sangaran</author>
      <pubDate>Fri, 17 Dec 2021 11:42:33 +0000</pubDate>
      <link>https://dev.to/krishisangaran/top-voice-api-sdk-providers-a-market-research-2022-1fbc</link>
      <guid>https://dev.to/krishisangaran/top-voice-api-sdk-providers-a-market-research-2022-1fbc</guid>
      <description>&lt;p&gt;Where the world is transforming into digitalization, everything around us is upgrading to its potential in all possible ways. With the enhancement in technology, the WebRTC based Voice call app has obtained a lot of popularity over the past few years.&lt;/p&gt;

&lt;p&gt;These are the voice chat APIs that are making sense throughout when it’s about voice chat apps, with which one can often make and receive calls over the apps making the most stable accomplishment in business growth and success.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#top-voice-apis-for-ios-android-amp-web-app-a-complete-study"&gt;
  &lt;/a&gt;
  Top Voice APIs For iOS, Android &amp;amp; Web App – A Complete Study
&lt;/h2&gt;

&lt;p&gt;Let’s have a look at the top voice APIs concerning features, pros, cons and pricing and have better understanding,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://blog.contus.com/top-voice-api-sdk-providers/"&gt;CONTUS MirrorFly Voice APIs&lt;/a&gt;&lt;br&gt;
CONTUS MirrorFly voice APIs are the real time communication solution that is mostly considered by developers and enterprises for it’s unique trait of being end-to-end customizable with one time license cost.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.twilio.com/"&gt;Twilio Voice APIs&lt;/a&gt;&lt;br&gt;
Twilio is the popular programmable voice calling API that brings a power to the phone services by enabling users to make and receive phone calls, send and receive text messages. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.plivo.com/"&gt;Plivo Voice APIs&lt;/a&gt;&lt;br&gt;
Plivo is a cloud communication platform that enables the developers to embed voice calling and text messaging into any mobile and web app with no restrictions over carriers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://developer.apple.com/siri/"&gt;Siri Voice APIs&lt;/a&gt;&lt;br&gt;
Siri voice API, also known as Sirikit voice API, is the intended UI framework which allows the developers to implement app extensions that integrate the chat system. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.vonage.com.au/communications-apis/voice/"&gt;Vonage Voice APIs&lt;/a&gt;&lt;br&gt;
Vonage provides a cloud communication building block APIs that are used in several communication modes as audio calling, group calling, SMS, messaging apps, SIP trunking and much more. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://sendbird.com/features/voice-and-video"&gt;SendBird Voice APIs&lt;/a&gt;&lt;br&gt;
Sendbird voice communication APIs provide high-quality communication audio calls. It’s proven managed infrastructure is always available for massive scale of conversations. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.enablex.io/cpaas/voice-api"&gt;EnableX Voice APIs&lt;/a&gt;&lt;br&gt;
EnableX is a communication platform that provides you the capability to build your smart and scalable audio calling app across a variety of devices. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.sinch.com/products/apis/calling/voice/"&gt;Sinch Voice APIs&lt;/a&gt;&lt;br&gt;
Sinch is a real-time VoIP and SIP API provider that allows the businesses to create the best voice call apps on any device such as iOS, Android, and web app.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.messagebird.com/voice/"&gt;MessageBird Voice APIs&lt;/a&gt;&lt;br&gt;
MessageBird is a cloud communication platform that connects the businesses with their customers across multiple channels.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://quickblox.com/products/voice-and-video-calling/"&gt;QuickBlox Voice APIs&lt;/a&gt;&lt;br&gt;
QuickBlox is a feature-rich communication app provider that offers a powerful tool-kit with easy-to-use APIs and native, hybrid SDKs for real time communication.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;However, the above given list of these voice chat API providers are some as there are many around the global market.  Now, it’s your time to do some research from your end to have a better clarity with the market’s current situation if you were planning to build your best voice call app.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>showdev</category>
      <category>webrtc</category>
    </item>
  </channel>
</rss>
