<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>CXXGraph Library Release v0.2.0</title>
      <author>ZigRazor</author>
      <pubDate>Fri, 15 Oct 2021 09:56:11 +0000</pubDate>
      <link>https://dev.to/zigrazor/cxxgraph-library-release-v020-5f0a</link>
      <guid>https://dev.to/zigrazor/cxxgraph-library-release-v020-5f0a</guid>
      <description>&lt;p&gt;Announcement of Release of version 0.2.0 of CXXGraph Library, a valid alternative to &lt;a href="https://www.boost.org/doc/libs/1_77_0/libs/graph/doc/index.html"&gt;Boost Graph Library (BGL)&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ZigRazor"&gt;
        ZigRazor
      &lt;/a&gt; / &lt;a href="https://github.com/ZigRazor/CXXGraph"&gt;
        CXXGraph
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Header-Only C++ Library for Graph Representation and Algorithms
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/ZigRazor/CXXGraph/blob/master/Icon.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--om3usTQu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ZigRazor/CXXGraph/raw/master/Icon.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
CXXGraph&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/0d3ae99a9dcced770f5a2e6d2395999c121d9975f3f1816ee3b3902a3c8e6a92/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f632b2b2532302d2532333030353939432e7376673f267374796c653d666f722d7468652d6261646765266c6f676f3d63253242253242266f676f436f6c6f723d7768697465"&gt;&lt;img src="https://camo.githubusercontent.com/0d3ae99a9dcced770f5a2e6d2395999c121d9975f3f1816ee3b3902a3c8e6a92/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f632b2b2532302d2532333030353939432e7376673f267374796c653d666f722d7468652d6261646765266c6f676f3d63253242253242266f676f436f6c6f723d7768697465"&gt;&lt;/a&gt; &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/6aea43d076c7bf00489f1b347caa33fe5c4d84a8af2983804f8702632f2669ec/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6769746875622532302d2532333132313031312e7376673f267374796c653d666f722d7468652d6261646765266c6f676f3d676974687562266c6f676f436f6c6f723d7768697465"&gt;&lt;img src="https://camo.githubusercontent.com/6aea43d076c7bf00489f1b347caa33fe5c4d84a8af2983804f8702632f2669ec/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6769746875622532302d2532333132313031312e7376673f267374796c653d666f722d7468652d6261646765266c6f676f3d676974687562266c6f676f436f6c6f723d7768697465"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://codecov.io/gh/ZigRazor/CXXGraph" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e0b9841f69ef29cc485b3d302097010f2d296ed1dde60f3adac4ba71370dcd04/68747470733a2f2f636f6465636f762e696f2f67682f5a696752617a6f722f43585847726170682f6272616e63682f6d61737465722f67726170682f62616467652e7376673f746f6b656e3d37373341513248395251" alt="codecov"&gt;&lt;/a&gt;
&lt;a href="https://www.codefactor.io/repository/github/zigrazor/cxxgraph" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/0c66e00601b49f804758f834a946e1329891101b719d307d83d5566b5701a982/68747470733a2f2f7777772e636f6465666163746f722e696f2f7265706f7369746f72792f6769746875622f7a696772617a6f722f63787867726170682f6261646765" alt="CodeFactor"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph/blob/master/LICENSE"&gt;&lt;img src="https://camo.githubusercontent.com/a5f922a2d34eec75f084349c6c747c69d94eccd0935dc93e295a4a686d1c4564/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f5a696752617a6f722f43585847726170682e737667" alt="GitHub license"&gt;&lt;/a&gt; &lt;a href="https://GitHub.com/ZigRazor/CXXGraph/releases/"&gt;&lt;img src="https://camo.githubusercontent.com/e3a3bede7aca95abde3fcdbf4645750e7da6aa728bdbd9cd655771c9a244d670/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652f5a696752617a6f722f43585847726170682e737667" alt="GitHub release"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/885c6402353e401234ea76f317d84186d70716c9db53a43b8a6d9daf037c712c/68747470733a2f2f696d672e736869656c64732e696f2f6c67746d2f616c657274732f6769746875622f5a696752617a6f722f43585847726170683f7374796c653d706c6173746963"&gt;&lt;img src="https://camo.githubusercontent.com/885c6402353e401234ea76f317d84186d70716c9db53a43b8a6d9daf037c712c/68747470733a2f2f696d672e736869656c64732e696f2f6c67746d2f616c657274732f6769746875622f5a696752617a6f722f43585847726170683f7374796c653d706c6173746963" alt="LGTM Alerts"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/6c41a6d75b013b0b28757348218ecf27f68e512a987e82bc9882fd3ab5021943/68747470733a2f2f696d672e736869656c64732e696f2f6c67746d2f67726164652f6370702f6769746875622f5a696752617a6f722f43585847726170683f7374796c653d706c6173746963"&gt;&lt;img src="https://camo.githubusercontent.com/6c41a6d75b013b0b28757348218ecf27f68e512a987e82bc9882fd3ab5021943/68747470733a2f2f696d672e736869656c64732e696f2f6c67746d2f67726164652f6370702f6769746875622f5a696752617a6f722f43585847726170683f7374796c653d706c6173746963" alt="LGTM Grade"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://shields.io/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/57a85d2ce2ebfa08308aa0e27c14e3e668b0075ece44e2d030a4298c089c85e0/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f52657175697265642d472b2b372e332e302d477265656e2e737667" alt="Generic badge"&gt;&lt;/a&gt; &lt;a href="https://shields.io/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/d28ad01b651a380285f9c75dea25963780875fcea989db81cf85ef6a29adc048/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f72657175697265642d432b2b31372d477265656e2e737667" alt="Generic badge"&gt;&lt;/a&gt; &lt;a href="https://shields.io/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e17b5a84de0de988ba21d8a70cd9bec1e3ef9c33bc75be3ec44c1cbff4b73604/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f52657175697265642d434d616b65332e392d477265656e2e737667" alt="Generic badge"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://shields.io/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ae88698a90d8466f4372f695b517d9a65fc5b3f70cb781531c2074876047c846/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4275696c642d5061737365642d477265656e2e737667" alt="Generic badge"&gt;&lt;/a&gt; &lt;a href="https://shields.io/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/35a3866fb1a06659337b8fe3e8bfb6ff6705c702e1fae78d400d47217b00b766/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f556e6974546573742d5061737365642d477265656e2e737667" alt="Generic badge"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Share on &lt;a href="https://twitter.com/intent/tweet?text=Header-Only%20C++%20Library%20for%20Graph%20Representation%20and%20Algorithms%204&amp;amp;url=https://github.com/ZigRazor/CXXGraph&amp;amp;hashtags=cpp,headeronly,library,opensource,developers" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/90bc908826728c0e4261acfff5619fd732c7be2b2a00624fce6363c9a3623c90/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f75726c2f687474702f736869656c64732e696f2e7376673f7374796c653d736f6369616c" alt="Tweet"&gt;&lt;/a&gt;
&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
Introduction&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;CXXGraph&lt;/strong&gt; is a small library, header only, that manages the Graph and it's algorithms in &lt;strong&gt;C++&lt;/strong&gt;. In other words a "Comprehensive C++ Graph Library"
An alternative to &lt;a href="https://www.boost.org/doc/libs/1_77_0/libs/graph/doc/index.html" rel="nofollow"&gt;Boost Graph Library (BGL)&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/ZigRazor/CXXGraph#cxxgraph"&gt;CXXGraph&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#table-of-contents"&gt;Table of Contents&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ZigRazor/CXXGraph#install-and-uninstall"&gt;Install and Uninstall&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#install-linux-tarballs"&gt;Install Linux Tarballs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#install-rpm"&gt;Install RPM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#install-deb"&gt;Install DEB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#install-from-source"&gt;Install From Source&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#classes-explanation"&gt;Classes Explanation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#requirements"&gt;Requirements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#how-to-use"&gt;How to use&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#example"&gt;Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ZigRazor/CXXGraph#unit-test-execution"&gt;Unit-Test Execution&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#google-test-installation"&gt;Google Test Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#how-to-compile-test"&gt;How to Compile Test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#how-to-run-test"&gt;How to Run Test&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ZigRazor/CXXGraph#benchmark-execution"&gt;Benchmark Execution&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#google-benchmark-installation"&gt;Google Benchmark Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#how-to-compile-benchmark"&gt;How to Compile Benchmark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#how-to-run-benchmark"&gt;How to Run Benchmark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#benchmark-results"&gt;Benchmark Results&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ZigRazor/CXXGraph#packaging"&gt;Packaging&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#tarballs"&gt;Tarballs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ZigRazor/CXXGraph#rpm"&gt;RPM&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#-fedora-centos-redhat-"&gt;(Fedora/CentOS/RedHat)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ZigRazor/CXXGraph#deb"&gt;DEB&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#-debian-ubuntu-"&gt;(Debian/Ubuntu)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ZigRazor/CXXGraph#algorithm-explanation"&gt;Algorithm Explanation&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#dijkstra"&gt;Dijkstra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#dial"&gt;Dial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#bfs"&gt;BFS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#dfs"&gt;DFS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#cycle-detection"&gt;Cycle Detection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#bellman-ford"&gt;Bellman-Ford&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#floyd-warshall"&gt;Floyd Warshall&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ZigRazor/CXXGraph#partition-algorithm-explanation"&gt;Partition Algorithm Explanation&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#vertex-cut"&gt;Vertex-Cut&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#greedy-vertex-cut"&gt;Greedy Vertex-Cut&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#graph-slicing-based-on-connectivity"&gt;Graph Slicing based on connectivity&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#how-to-contribute"&gt;How to contribute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#site"&gt;Site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#contact"&gt;Contact&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#support"&gt;Support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#references"&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#credits"&gt;Credits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#hacktoberfest-2k21"&gt;Hacktoberfest 2k21&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#we-are-looking-for"&gt;We are Looking for...&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#other-details"&gt;Other Details&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Install and Uninstall&lt;/h2&gt;
&lt;h3&gt;
Install Linux Tarballs&lt;/h3&gt;
&lt;p&gt;On Unix/Linux system you need to execute…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/ZigRazor/CXXGraph"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;for more info visit the &lt;a href="https://zigrazor.github.io/CXXGraph/"&gt;site&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;or contact me at &lt;a href="mailto:zigrazor@gmail.com"&gt;zigrazor@gmail.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>cpp</category>
      <category>algorithms</category>
      <category>githunt</category>
      <category>github</category>
    </item>
    <item>
      <title>The term "clean code" is misleading - this is my take</title>
      <author>Keff</author>
      <pubDate>Fri, 15 Oct 2021 09:46:59 +0000</pubDate>
      <link>https://dev.to/nombrekeff/the-term-clean-code-is-misleading-this-is-my-take-4cni</link>
      <guid>https://dev.to/nombrekeff/the-term-clean-code-is-misleading-this-is-my-take-4cni</guid>
      <description>&lt;p&gt;Hey there 👋 I'm back with another short little post.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#there-are-many-articles-about-this-thing-we-call-clean-code-but-i-feel-they-lack-some-important-concepts"&gt;
  &lt;/a&gt;
  There are many articles about this thing we call &lt;strong&gt;"clean code"&lt;/strong&gt;. But I feel they lack some important concepts.
&lt;/h4&gt;

&lt;p&gt;Some people seem to think that &lt;em&gt;"clean code"&lt;/em&gt; will just appear by following some guidelines or using design patterns, etc... This is not true per se, if you use guidelines, patterns, and so on without knowing why or when to use them they can lead to dirtier code (for lack of a better word). Though they can help if applied correctly.&lt;/p&gt;

&lt;p&gt;Note that &lt;strong&gt;&lt;em&gt;"clean code"&lt;/em&gt; is not a science and is highly opinionated&lt;/strong&gt;. One person might say that doing X thing is better than doing Y, while the other might say the contrary. And both would be right, what is &lt;em&gt;"clean code"&lt;/em&gt; for me does not necessarily mean it's &lt;em&gt;clean&lt;/em&gt; for you.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9HzJ0ftb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/48eex0akyt21u81quv8m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9HzJ0ftb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/48eex0akyt21u81quv8m.png" alt="Meme"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#my-take"&gt;
  &lt;/a&gt;
  My take
&lt;/h3&gt;

&lt;p&gt;For me, &lt;em&gt;"clean code"&lt;/em&gt; is a process that is the result of your effort, discipline, and experience over time. Code is never "clean" or in its best form the first time it's written, not even the second iteration. It becomes &lt;em&gt;"cleaner"&lt;/em&gt; over time, step by step. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;clean_code = (effort + discipline + experience) / time&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I also think the term &lt;em&gt;"clean code"&lt;/em&gt; is misleading and makes it feel like there is only one way of doing it, and once it's clean it cannot be improved more. &lt;/p&gt;

&lt;p&gt;I'd prefer to talk about "clean(&lt;strong&gt;er&lt;/strong&gt;) code" instead of &lt;em&gt;"clean code"&lt;/em&gt;. Or maybe even dispose of the term completely, because what the fuck does &lt;em&gt;"clean"&lt;/em&gt; mean? My house can be clean for me, but be hella dirty to you.&lt;/p&gt;

&lt;p&gt;There are also many examples that just show how a simple function or small piece of code can be &lt;em&gt;"cleaned"&lt;/em&gt;. And yes, these examples are valid for small code snippets, but not so much for bigger-scale apps. As you have to deal with pressure, timeframes, and code-style rules that might prevent you from doing some of the &lt;em&gt;"clean code"&lt;/em&gt; practices. (&lt;em&gt;Hopefully the team enforces good practices and makes code more consistent, though it's not always the case&lt;/em&gt;)&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#%C2%A0this-is-what-cleaner-code-is-for-me"&gt;
  &lt;/a&gt;
   This is what cleaner code is for me
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Knowledge of the language&lt;/li&gt;
&lt;li&gt;Understanding the guidelines&lt;/li&gt;
&lt;li&gt;Discipline and effort&lt;/li&gt;
&lt;li&gt;Time&lt;/li&gt;
&lt;li&gt;Experience&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note the last point "experience". This is a point that is mostly ignored when talking about this topic, but it's an important one. &lt;/p&gt;

&lt;p&gt;I think experience plays a big role in making &lt;em&gt;"cleaner"&lt;/em&gt; or more readable code. If you just started coding I would not expect your code to be pretty or readable. Once you have coded for years, day after day, you start to value the importance of writing good quality code that is readable and maintainable. &lt;/p&gt;




&lt;p&gt;I wrote a post about refactoring, which kinda goes hand to hand with this one, here it is in case you want to check it out:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/nombrekeff" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WSaJs7tF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--hX7RfmcL--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/187971/a5359a24-b652-46be-8898-2c5df32aa6e0.png" alt="nombrekeff"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/nombrekeff/i-work-hard-in-order-to-avoid-work-my-view-on-refactoring-1kd6" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;I work hard in order to avoid work - My view on refactoring&lt;/h2&gt;
      &lt;h3&gt;Keff ・ Aug 30 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#watercooler&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#healthydebate&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;Hope you enjoyed this short little post. Let me know what your thoughts are on my view, do you agree? Or do you have some other view?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;That's it for this one, now let's go write some ugly code shall we?&lt;/strong&gt; 🥴&lt;/p&gt;

</description>
      <category>programming</category>
      <category>webdev</category>
      <category>discuss</category>
      <category>codequality</category>
    </item>
    <item>
      <title>Introduction to Machine Learning</title>
      <author>Snehal Adbol</author>
      <pubDate>Fri, 15 Oct 2021 09:32:33 +0000</pubDate>
      <link>https://dev.to/snehal_02/introduction-to-machine-learning-24pd</link>
      <guid>https://dev.to/snehal_02/introduction-to-machine-learning-24pd</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction-to-machine-learning"&gt;
  &lt;/a&gt;
  Introduction to machine learning
&lt;/h2&gt;

&lt;p&gt;Machine Learning has been a buzzword in recent years, owing to the massive quantity of data generated by applications and recent increases in computer power, and the development of better algorithms.&lt;/p&gt;

&lt;p&gt;Machine Learning is utilized in various applications, ranging from automating monotonous operations to offering innovative insights; organizations and companies are attempting to profit. You may already be using a gadget that uses it, such as a wearable fitness tracker like Fitbit or an intelligent home assistant like Google Home. However, there are numerous additional examples of ML in action.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-machine-learning"&gt;
  &lt;/a&gt;
  What is Machine Learning?
&lt;/h2&gt;

&lt;p&gt;According to Arthur Samuel, machine learning techniques allow computers to learn from data and even improve themselves without being explicitly programmed.&lt;/p&gt;

&lt;p&gt;Machine learning (ML) is a method that allows software programs to become more accurate at predicting occurrences without being explicitly programmed. The fundamental concept underlying machine learning is to develop algorithms that can take in input data and use statistical analysis to predict an output while updating results as new data becomes available.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#types-of-machine-learning"&gt;
  &lt;/a&gt;
  Types of Machine Learning?
&lt;/h2&gt;

&lt;p&gt;Machine learning can be classified into three types of algorithms.&lt;br&gt;
Supervised Learning &lt;br&gt;
Unsupervised Learning &lt;br&gt;
Reinforcement Learning &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#overview-of-supervised-learning-algorithm"&gt;
  &lt;/a&gt;
  Overview of Supervised Learning Algorithm
&lt;/h3&gt;

&lt;p&gt;In Supervised learning, an AI system is provided with labeled data, which implies that each data point has been tagged with the correct label.&lt;br&gt;
The aim is to estimate the mapping function so effectively that when you receive new input data (x), you can anticipate the output variables (Y) for that data.&lt;br&gt;
For instance, we have a dataset with pictures of dogs and cats. We display the model labeled photos of dogs and cats while training it, and it learns to classify images into dogs and cats.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#types-of-supervised-learning"&gt;
  &lt;/a&gt;
  Types of Supervised learning
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Classification&lt;/strong&gt;: Classification is a strategy for identifying which class the dependent belongs to based on one or more independent variables. Classification is used to anticipate discrete responses.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Regression&lt;/strong&gt;: Regression is the process of determining a model or function for separating data into continuous real values rather than classes or discrete values.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#overview-of-unsupervised-learning-algorithm"&gt;
  &lt;/a&gt;
  Overview of Unsupervised Learning Algorithm
&lt;/h3&gt;

&lt;p&gt;Unsupervised learning uses machine learning algorithms to evaluate and cluster unlabeled information. These algorithms find hidden patterns or data groupings without the need for human involvement.&lt;/p&gt;

&lt;p&gt;Unlike supervised learning, the data is not tagged with the correct label. &lt;/p&gt;

&lt;p&gt;For example, Unsupervised learning can help uncover data trends to build more successful cross-selling tactics using prior purchase behavior data. Online sellers utilize this to provide appropriate add-on recommendations to customers throughout the checkout process.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#types-of-unsupervised-learning"&gt;
  &lt;/a&gt;
  Types of Unsupervised learning
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Clustering&lt;/strong&gt;: Clustering is the most significant unsupervised learning issue; like with all other problems of this type, it involves discovering a structure in a set of unlabeled data. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Association&lt;/strong&gt;: Association rules mining is used to discover new and exciting relationships between items in a collection, a typical pattern in transactional data, or any relational database.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#overview-of-reinforcement-learning"&gt;
  &lt;/a&gt;
  Overview of Reinforcement Learning
&lt;/h3&gt;

&lt;p&gt;Reinforcement Learning is a feedback-based Machine Learning approach in which an agent learns how to behave in a given environment by executing actions and seeing the outcomes of those actions. The agent receives positive feedback, and for each poor action, the agent receives negative feedback or a penalty.&lt;br&gt;
It is a form of dynamic programming that uses a reward and penalty system to train algorithms.&lt;/p&gt;

&lt;p&gt;For example, RL in In healthcare is used to propose various treatment choices. While supervised learning models may be used to predict whether or not a person has an illness, RL can predict treatment choices after a person has a disease.&lt;/p&gt;

&lt;p&gt;Essentially, by leveraging the incentives received, the agent increases its environment knowledge to choose the following action.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Machine learning (ML) is a method that allows software programs to become more accurate at predicting occurrences without being explicitly programmed. &lt;br&gt;
What is Machine Learning? &lt;br&gt;
According to Arthur Samuel, machine learning techniques allow computers to learn from data and even improve themselves without being explicitly programmed. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Types of Machine Learning?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Supervised learning &lt;/li&gt;
&lt;li&gt;Unsupervised learning &lt;/li&gt;
&lt;li&gt;Reinforcement learning&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>python</category>
    </item>
    <item>
      <title>How to choose your career in Web Applications Development.</title>
      <author>Nwachukwu Wisdom Ndubuisi</author>
      <pubDate>Fri, 15 Oct 2021 09:03:30 +0000</pubDate>
      <link>https://dev.to/crypticwisdom/how-to-choose-your-career-in-web-applications-development-3fip</link>
      <guid>https://dev.to/crypticwisdom/how-to-choose-your-career-in-web-applications-development-3fip</guid>
      <description>&lt;h1&gt;
  &lt;a href="#summary-of-the-previous-post"&gt;
  &lt;/a&gt;
  Summary of the previous post.
&lt;/h1&gt;




&lt;p&gt;From this 👉 &lt;a href="https://dev.to/crypticwisdom/frontend-backend-and-fullstack-in-software-development-explained-4igg"&gt;"Software Development Explained"&lt;/a&gt;post, we focused on Web Application Development as a type of Software Development, after that we talked about the 2 different aspects or aspect of Web App. Development &lt;strong&gt;(Frontend and Backend)&lt;/strong&gt;. &lt;br&gt;
We also talked about the term or generic name given to the Programmers  involved in these different aspect.&lt;br&gt;
&lt;strong&gt;Frontend Developer&lt;/strong&gt; is a person/programmer that may not necessarily design the look of a website but, he/she converts the design formed or given to him/her into computer code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Backend Developer&lt;/strong&gt; is a person/programmer that communicates with a webserver with a programming language, he/she is very much responsible for the logics, security, payment processing, user's data handling and validation, A.P.I creation, third party A.P.I integration, just to mention a few. The main domain of a Backend Developer is programming the Web Server to respond with the right response.&lt;/p&gt;

&lt;p&gt;These days most people decides to know both the Frontend and Backend together which makes them a &lt;strong&gt;Full Stack Developer&lt;/strong&gt;, which means they Handle both the Frontend and the Backend of an Web Application.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#choosing-between-frontend-backend-or-full-stack-development"&gt;
  &lt;/a&gt;
  Choosing Between Frontend, Backend or Full Stack Development.
&lt;/h1&gt;




&lt;p&gt;Choosing a career is something more internal than external but, let's help ourselves in asking and answering some questions.&lt;/p&gt;

&lt;p&gt;Do you have a flare of becoming a developer but, you are by nature &lt;strong&gt;aesthetic&lt;/strong&gt; or concerned with looks and designs and a little bit logical ?&lt;/p&gt;

&lt;p&gt;If you answered &lt;strong&gt;&lt;em&gt;Yes&lt;/em&gt;&lt;/strong&gt; to this question then, Frontend Development is best for you.&lt;/p&gt;

&lt;p&gt;If your answer was &lt;strong&gt;&lt;em&gt;No&lt;/em&gt;&lt;/strong&gt; and you prefer logics than look, or you are more &lt;strong&gt;logical&lt;/strong&gt; in nature than &lt;strong&gt;aesthetic&lt;/strong&gt;. Backend Development is the best fit for you.&lt;/p&gt;

&lt;p&gt;But, if you are blended, that is, if you are aesthetic and logical, congratulations 🥳 🎉, you are a Full Stack beginner.&lt;/p&gt;

&lt;p&gt;But, if you are not really sure where you fit in, I would advice to start with the simpler part of Web development which is Frontend Development, then, as you put more efforts in becoming advanced in it you can switch to become a Backend developer which now makes you a FullStack Developer, it's not really a must.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt; &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You can solely become a Frontend or Backend developer.&lt;/li&gt;
&lt;li&gt;It's not a must you become a Full Stack Developer but, it adds more value and opportunity of being hired.&lt;/li&gt;
&lt;li&gt;These whole post is also applicable to &lt;strong&gt;Mobile Application Development&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;It takes time to master a specific field in programming.&lt;/li&gt;
&lt;li&gt;It takes &lt;strong&gt;Passion&lt;/strong&gt; to help you discover, uncover and learn alot in programming, don't just come in for the money. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you find this post helpful 😏, please follow for more.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;2114616054&lt;br&gt;
United Bank of Africa&lt;br&gt;
Nwachukwu Wisdom&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;That's my money address 😋, love y'all.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>Added Tags edit modal component in @dsabyte.com</title>
      <author>Rahul kumar</author>
      <pubDate>Fri, 15 Oct 2021 08:42:59 +0000</pubDate>
      <link>https://dev.to/ats1999/added-tags-edit-modal-component-in-dsabytecom-3d5c</link>
      <guid>https://dev.to/ats1999/added-tags-edit-modal-component-in-dsabytecom-3d5c</guid>
      <description>&lt;p&gt;I am building a community which  will be dedicated  for data structure  and algorithms. &lt;/p&gt;

&lt;p&gt;I am the one and only developer of this website, so development is very  slow but i am working on improving  it day by day.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#previous-ui"&gt;
  &lt;/a&gt;
  Previous UI
&lt;/h3&gt;

&lt;p&gt;Previously i was taking tags below the editor. Below the editor there was tags input, where user can just enter tag and type enter. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--75Cw2pty--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k6203dqmris5w4ecwrmu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--75Cw2pty--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k6203dqmris5w4ecwrmu.png" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see from the above image, i am taking tags from the below of the editor. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#updated-ui"&gt;
  &lt;/a&gt;
  Updated UI
&lt;/h3&gt;

&lt;p&gt;Now, in the updated UI, i am taking tags input from the modal&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L4-9ROI4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uuculebmf5sb1gnszcm8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L4-9ROI4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uuculebmf5sb1gnszcm8.png" alt="modal-tag-input"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Checkout the page -&amp;gt; &lt;a href="https://www.dsabyte.com/blogs/write/sa"&gt;https://www.dsabyte.com/blogs/write/sa&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#which-one-is-better"&gt;
  &lt;/a&gt;
  Which one is better?
&lt;/h2&gt;

</description>
      <category>react</category>
      <category>node</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to cleanly import your files. </title>
      <author>Rahul Soni</author>
      <pubDate>Fri, 15 Oct 2021 08:27:26 +0000</pubDate>
      <link>https://dev.to/inosrahul/how-to-cleanly-import-your-files-no3</link>
      <guid>https://dev.to/inosrahul/how-to-cleanly-import-your-files-no3</guid>
      <description>&lt;p&gt;We all have sometime imported files or components like this in multiple lines, this would be okay if there is only one component or file to be imported, but as the codebase grows, writing import statements for every single file would get tedious as we're just repeating ourselves.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8U2vYneA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qp9obeqpzgg12bw2kmin.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8U2vYneA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qp9obeqpzgg12bw2kmin.png" alt="components in multiple lines"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We're importing the components using the relative paths by leaving the &lt;code&gt;src&lt;/code&gt; folder and going into the &lt;code&gt;components&lt;/code&gt; folder and then going into the specific component folder. &lt;/p&gt;

&lt;p&gt;We could easily replace that by importing all the files from their respective folder in a single line like this using non-relative import.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mKetNkxG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1rk7wehp1zrkhgb6nt3u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mKetNkxG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1rk7wehp1zrkhgb6nt3u.png" alt="single line import"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.typescriptlang.org/docs/handbook/module-resolution.html#relative-vs-non-relative-module-imports"&gt;relative and non-relative imports&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: In the first image components are exported using default export and in the latter image non default export is used.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;First we need to define &lt;code&gt;jsconfig.json&lt;/code&gt; file in the root of our project.&lt;br&gt;
&lt;code&gt;jsconfig.json&lt;/code&gt; has &lt;code&gt;compilerOptions&lt;/code&gt; object which sets the &lt;code&gt;baseUrl&lt;/code&gt; to be the &lt;code&gt;src&lt;/code&gt; folder for resolution of non-relative imports.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fOZVtsni--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q5ldt3uode59ccoklbtg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fOZVtsni--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q5ldt3uode59ccoklbtg.png" alt="jsconfig.json file"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Each component gets it's own folder because components have several files involved like &lt;code&gt;css&lt;/code&gt; or sometimes even more so it makes sense to do have a separate folder for each one.&lt;br&gt;
It would look something like this with the &lt;code&gt;component&lt;/code&gt; file, a &lt;code&gt;css&lt;/code&gt; file and &lt;code&gt;index.js&lt;/code&gt; file for exporting the component &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D6ecoP8O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mpj4rko3nos6f6jo1e19.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D6ecoP8O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mpj4rko3nos6f6jo1e19.png" alt="component example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dk04Wj1G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a1m0xpiafu57s62didl2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dk04Wj1G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a1m0xpiafu57s62didl2.png" alt="component 1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p7ctiou4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/udjzd2d40xe0y5bvw1na.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p7ctiou4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/udjzd2d40xe0y5bvw1na.png" alt="css styles"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VI5hqvTz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1lor4axmc7z1ggfhzayi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VI5hqvTz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1lor4axmc7z1ggfhzayi.png" alt="index.js component 1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the root of  &lt;code&gt;components&lt;/code&gt; folder we need to define an &lt;code&gt;index.js&lt;/code&gt; file which will export all the &lt;code&gt;components&lt;/code&gt; defined in it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ISCLn85_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9j3se0zkrjj9wkhmltr6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ISCLn85_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9j3se0zkrjj9wkhmltr6.png" alt="index.js components level"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;App&lt;/code&gt; component is imported in the main &lt;code&gt;index.js&lt;/code&gt; file and the final result is this.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XvNo_oJP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p002sayx8evw8fomzmxm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XvNo_oJP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p002sayx8evw8fomzmxm.png" alt="final render"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can also use our import our components inside other component files using the same non-relative paths like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rmi0h2r---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jcsqtfd47kngpxeamkgh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rmi0h2r---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jcsqtfd47kngpxeamkgh.png" alt="component imported inside other component"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By using this way we can reduce our cleanly import our files.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>decoding html. (the pony he comes)</title>
      <author>domonic</author>
      <pubDate>Fri, 15 Oct 2021 08:03:01 +0000</pubDate>
      <link>https://dev.to/domonic/decoding-html-the-pony-he-comes-bll</link>
      <guid>https://dev.to/domonic/decoding-html-the-pony-he-comes-bll</guid>
      <description>&lt;p&gt;One cool way to decode html is with a parser. i.e.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://html5-parser.readthedocs.io/en/latest/"&gt;https://html5-parser.readthedocs.io/en/latest/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have a ticket for one here...&lt;br&gt;
&lt;a href="https://github.com/byteface/domonic/issues/28"&gt;https://github.com/byteface/domonic/issues/28&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;at the heart of domonic is a regex html parser&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/byteface/domonic"&gt;https://github.com/byteface/domonic&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's in development but it currently HTML tags lea͠ki̧n͘g fr̶ǫm ̡yo​͟ur eye͢s̸ ̛l̕ik͏e liq​uid pain, the song of re̸gular exp​ression parsing will exti​nguish the voices of mor​tal man from the sp​here I can see it can you see ̲͚̖͔̙î̩́t̲͎̩̱͔́̋̀ it is beautiful t​he final snuffing of the lie​s of Man ALL IS LOŚ͖̩͇̗̪̏̈́T ALL I​S LOST the pon̷y he comes he c̶̮omes he comes the ich​or permeates all MY FACE MY FACE ᵒh god no NO NOO̼O​O NΘ stop the an​*̶͑̾̾​̅ͫ͏̙̤g͇̫͛͆̾ͫ̑͆l͖͉̗̩̳̟̍ͫͥͨe̠̅s ͎a̧͈͖r̽̾̈́͒͑e n​ot rè̑ͧ̌aͨl̘̝̙̃ͤ͂̾̆ ZA̡͊͠͝LGΌ ISͮ̂҉̯͈͕̹̘̱ TO͇̹̺ͅƝ̴ȳ̳ TH̘Ë͖́̉ ͠P̯͍̭O̚​N̐Y̡ H̸̡̪̯ͨ͊̽̅̾̎Ȩ̬̩̾͛ͪ̈́̀́͘ ̶̧̨̱̹̭̯ͧ̾ͬC̷̙̲̝͖ͭ̏ͥͮ͟Oͮ͏̮̪̝͍M̲̖͊̒ͪͩͬ̚̚͜Ȇ̴̟̟͙̞ͩ͌͝S̨̥̫͎̭ͯ̿̔̀ͅ&lt;/p&gt;

</description>
      <category>html</category>
      <category>python</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>5 low-code platform myths debunked
</title>
      <author>Technocrat</author>
      <pubDate>Fri, 15 Oct 2021 07:44:17 +0000</pubDate>
      <link>https://dev.to/technocrat/5-low-code-platform-myths-debunked-373m</link>
      <guid>https://dev.to/technocrat/5-low-code-platform-myths-debunked-373m</guid>
      <description>&lt;p&gt;Did you know that the worldwide low-code development technologies market is expected to reach $13.8 billion in 2021? &lt;/p&gt;

&lt;p&gt;While the consumption of low-code platforms is steadily increasing among tech-savvy organizations, a large number of businesses still consider this technology as niche. That's why we decided to debunk 5 of the most common low-code myths.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#myth-1-lowcode-platforms-cant-be-used-to-build-complex-apps"&gt;
  &lt;/a&gt;
  Myth 1: Low-code platforms can't be used to build complex apps
&lt;/h2&gt;

&lt;p&gt;Most low-code platforms have a two-pronged approach to reduce the complexities involved in software development. The drag-and-drop UI components help tackle front-end complexities, while the back end is supported by English-like scripting languages for complex workflow automation. This means that the software-building activity is only limited by the user's imagination and not the tool itself. Don't let a myth like this stop you from exploring these platforms and experiencing their true capabilities. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#myth-2-lowcode-is-a-misnomer-it-requires-expert-coding-abilities"&gt;
  &lt;/a&gt;
  Myth 2: Low-code is a misnomer — it requires expert coding abilities
&lt;/h2&gt;

&lt;p&gt;The technical expertise needed to build applications with low-code platforms is based on business needs and application complexity. While traditional coding platforms require complex lines of code, low-code platforms possess ready-made code snippets, requiring fewer lines of code. Most low-code platforms borrow elements from open-source/open-standard languages, such as C, Java, JavaScript, Python, and more. The critical factor, however, is the logical reasoning required to utilize the code for specific uses case within the application. There are multiple open-source resources one can use to tweak code for their needs, and most low-code development platforms have debugging tools that provide suggestions and throw errors.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#myth-3-lowcode-and-legacy-systems-are-mutually-exclusive"&gt;
  &lt;/a&gt;
  Myth 3: Low-code and legacy systems are mutually exclusive
&lt;/h2&gt;

&lt;p&gt;Many firms refrain from rocking the boat and choose to hold on to their legacy systems. However, with improvements in digital transformation, relying only on legacy systems will inevitably hinder scalability. Low-code platforms provide cross-platform accessibility and can integrate with multiple third-party tools with the help of built-in connectors or code-like API calls. This means that low-code software can enhance existing legacy systems, rather than replace them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#myth-4-niche-technology-like-lowcode-has-a-steep-learning-curve"&gt;
  &lt;/a&gt;
  Myth 4: Niche technology, like low-code, has a steep learning curve
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.zoho.com/creator/?utm_source=evang&amp;amp;utm_medium=blog&amp;amp;utm_campaign=evang"&gt;Low-code platforms&lt;/a&gt; thrive on ease of use, quicker app builds, and economical benefits. With drag-and-drop functionalities, visual builders for automation, and other user-friendly features, deploying a simple app takes a few days, or sometimes just hours. One of the successes of low-code is that people with varied technical expertise—from novice business users to hardcore technical developers—have been able to build apps with astonishing ease. This indicates that the learning curve is a function of complex business requirements and not technical expertise. Even with complex business requirements, low-code platforms still have an edge over traditional coding platforms.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#myth-5-data-privacy-and-storage-is-a-concern-with-lowcode"&gt;
  &lt;/a&gt;
  Myth 5: Data privacy and storage is a concern with low-code
&lt;/h2&gt;

&lt;p&gt;A majority of low-code platforms, such as Appian, Caspio, Outsystems, and Zoho Creator, store data securely on the cloud. Caspio, Outsystems, and Zoho Creator provide on-premise data storage, as well. With digital advancements and many organizations adopting cloud-based solutions, regulations, such as GDPR compliance, ensure that low-code platforms providers take data security and privacy seriously. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-conclusion"&gt;
  &lt;/a&gt;
  In conclusion
&lt;/h2&gt;

&lt;p&gt;Low-code platforms help build powerful, business-critical applications. Rather than rely on off-the-shelf products, business users, as well as expert developers, can tweak their applications to suit their exact needs. With visual builders and out-of-the box coding components, automating processes on low-code platforms is easier, and saves you both time and money.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>lowcode</category>
      <category>cloud</category>
      <category>serverless</category>
    </item>
    <item>
      <title>Advantages of Python</title>
      <author>Khushal Jethava</author>
      <pubDate>Fri, 15 Oct 2021 07:38:43 +0000</pubDate>
      <link>https://dev.to/khushaljethava/advantages-of-python-116c</link>
      <guid>https://dev.to/khushaljethava/advantages-of-python-116c</guid>
      <description>&lt;p&gt;In this tutorial, we will learn about the advantages of python, which is a programming language. Python is one of the most popular programming languages in the world, used in industry and academia for solving complex problems. It has simple syntax, semantics, and human-readable code that helps you write clean but powerful programs faster.&lt;/p&gt;

&lt;p&gt;There are many advantages to using python; it's easy to learn, able to process data efficiently, extensible (you can add extensions on top of the core), embeds quickly through interpreters like Jython or IronPython, and in general very flexible in what you can do with it. There is also an active community for help that is available otherwise in case they don't know how to solve something specific either.Learn more about python from [&lt;a href="https://pythonscholar.com/python-programming"&gt;https://pythonscholar.com/python-programming&lt;/a&gt;]&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>datascience</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Styling - Console.log</title>
      <author>CoderZ90</author>
      <pubDate>Fri, 15 Oct 2021 07:21:05 +0000</pubDate>
      <link>https://dev.to/official_fire/styling-consolelog-35k5</link>
      <guid>https://dev.to/official_fire/styling-consolelog-35k5</guid>
      <description>&lt;p&gt;Hello 👋 Guys Hope you are &lt;strong&gt;safe and happy&lt;/strong&gt;. so in this blog i will tell you that how you can style console.log using javascript and CSS 😊&lt;/p&gt;

&lt;p&gt;Q. Why We Need To Style Console.log And When ?&lt;/p&gt;

&lt;p&gt;Ans - You have seen many social media websites such as Facebook or Google Plus, where they have big red text appearing in the console saying "WARNING!" or similar to prevent you from entering malicious code. There are many reasons for styling console.log but the main purpose is to prevent users from entering malicious code in the website 😊&lt;/p&gt;

&lt;p&gt;To style console.log follow my steps 😊&lt;/p&gt;

&lt;p&gt;When you console something it looks normal and not very cool looking but to style it we need to put "%c" attached to the text &lt;/p&gt;

&lt;p&gt;Check this code and if you want to test it just open the dev tools and go to console and then paste the code so that you can see the output...&lt;/p&gt;

&lt;p&gt;Code.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;console.log("Here comes the text you want to display to the users", "and then put your css styles here to decorate the text");&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;%cStyled Text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;color: #fff; background: #000; padding: 12px; font-family: Poppins; font-size: 20px; font-weight: bold;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thankyou Guys for giving your time and reading this hope you are safe and Happy...&lt;br&gt;
Also don't forget to subscribe 🌟⚡ to my youtube channel&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://youtube.com/c/codingfire?sub_confirmation=1"&gt;https://youtube.com/c/codingfire?sub_confirmation=1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    <item>
      <title>Make a scatter plot with Svelte and D3</title>
      <author>AnupJoseph</author>
      <pubDate>Fri, 15 Oct 2021 07:02:53 +0000</pubDate>
      <link>https://dev.to/anupjoseph/make-a-scatter-plot-with-svelte-and-d3-56md</link>
      <guid>https://dev.to/anupjoseph/make-a-scatter-plot-with-svelte-and-d3-56md</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This blog is second in a series of (unofficial) course notes for the Data Visualization with React and D3 series by Curran Kelleher. Read the introductory blog post &lt;a href="https://dev.to/learners/series-intro-data-visualization-with-svelte-and-d3-4c07"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The next chart in the series is a scatter plot based on the &lt;a href="https://archive.ics.uci.edu/ml/datasets/iris"&gt;Iris Flowers Dataset&lt;/a&gt;. I figured we could reuse a lot of the code from earlier examples than rewiriting everything from scratch. A properly cleaned version of the dataset by Curran is available &lt;a href="https://gist.githubusercontent.com/curran/9e04ccfebeb84bcdc76c/raw/3d0667367fce04e8ca204117c290c42cece7fde0/iris.csv"&gt;here&lt;/a&gt;.The dataset has four numerical columns namely &lt;code&gt;sepal_length,sepal_width,petal_length,petal_width&lt;/code&gt; which we need to convert to numbers.  Let's change the &lt;code&gt;row&lt;/code&gt; and &lt;code&gt;onMount&lt;/code&gt; functions to reflect this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt;  &lt;span class="nx"&gt;row&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="kd"&gt;function&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sepal_length&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sepal_length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sepal_width&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sepal_width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;petal_length&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;petal_length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;petal_width&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;petal_width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;onMount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt;  &lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="nx"&gt;dataset&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="k"&gt;await&lt;/span&gt;  &lt;span class="nx"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://gist.githubusercontent.com/curran/9e04ccfebeb84bcdc76c/raw/3d0667367fce04e8ca204117c290c42cece7fde0/iris.csv&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;row&lt;/span&gt;
    &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;  &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;in case you are wondering where this code came from, look up this &lt;a href="https://gist.github.com/AnupJoseph/efda2eed51802c5cd9ef21f3a9a0cee8"&gt;gist&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;code&gt;scaleBand&lt;/code&gt; logic we used before doesn't make much sense in a scatter plot so we need to change that to &lt;code&gt;scaleLinear&lt;/code&gt;. I am going to plot &lt;code&gt;petal_width&lt;/code&gt; on X-axis and &lt;code&gt;petal_length&lt;/code&gt; on Y-axis and so let's change the domain of  &lt;code&gt;xScale&lt;/code&gt; and &lt;code&gt;yScale&lt;/code&gt; respectively. Again doesn't matter too much, so feel free to change the X and Y axes to your liking&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;xScale&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nx"&gt;scaleLinear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;domain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;extent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;  &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;petal_width&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; 

&lt;span class="nl"&gt;$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;yScale&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nx"&gt;scaleLinear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;domain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;extent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;  &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;petal_length&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;To make the dots for the scatter plot we can make use of the &lt;code&gt;&amp;lt;circle&amp;gt;&lt;/code&gt; SVG tag. in the plotting logic let's replace the &lt;code&gt;&amp;lt;rect&amp;gt;&lt;/code&gt; tag by &lt;code&gt;circle&lt;/code&gt; and specify its attributes appropriately.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;circle&lt;/span&gt;
    &lt;span class="na"&gt;cx=&lt;/span&gt;&lt;span class="s"&gt;{xScale(data.petal_width)}&lt;/span&gt;
    &lt;span class="na"&gt;cy=&lt;/span&gt;&lt;span class="s"&gt;{yScale(data.petal_length)}&lt;/span&gt;
    &lt;span class="na"&gt;r=&lt;/span&gt;&lt;span class="s"&gt;"5"&lt;/span&gt;
&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oEqRneUH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9mlldez3uzpzxiqksljo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oEqRneUH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9mlldez3uzpzxiqksljo.png" alt="scatter-basic"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Something you probably noticed here is that some dots appear to be cutoff from the SVG. The solution I can think of is to shift all the circles to the left. So I am going to wrap all the circles in a &lt;code&gt;&amp;lt;g&amp;gt;&lt;/code&gt; apply the &lt;code&gt;transform&lt;/code&gt; directive on it. Lets use the margins that we initialized way back before to translate it across:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;g&lt;/span&gt;  &lt;span class="na"&gt;transform=&lt;/span&gt;&lt;span class="s"&gt;{`translate(${margin.left},${margin.right})`}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    {#each  dataset  as data, i}
        &lt;span class="nt"&gt;&amp;lt;circle&lt;/span&gt;
        &lt;span class="na"&gt;cx=&lt;/span&gt;&lt;span class="s"&gt;{xScale(data.petal_width)}&lt;/span&gt;
        &lt;span class="na"&gt;cy=&lt;/span&gt;&lt;span class="s"&gt;{yScale(data.petal_length)}&lt;/span&gt;
        &lt;span class="na"&gt;r=&lt;/span&gt;&lt;span class="s"&gt;"5"&lt;/span&gt;
        &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    {/each}
&lt;span class="nt"&gt;&amp;lt;/g&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KMYNwSce--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mn4nfxghcljxk19rl5ul.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KMYNwSce--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mn4nfxghcljxk19rl5ul.png" alt="scatter-cropped"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am also going to reconfigure the scales so that we have more space to work with at the bottom of the page and left.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt;  &lt;span class="nx"&gt;innerHeight&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nx"&gt;height&lt;/span&gt;  &lt;span class="o"&gt;-&lt;/span&gt;  &lt;span class="nx"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;top&lt;/span&gt;  &lt;span class="o"&gt;-&lt;/span&gt;  &lt;span class="nx"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="nx"&gt;innerWidth&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nx"&gt;width&lt;/span&gt;  &lt;span class="o"&gt;-&lt;/span&gt;  &lt;span class="nx"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;  &lt;span class="o"&gt;-&lt;/span&gt;  &lt;span class="nx"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nl"&gt;$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;xScale&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nx"&gt;scaleLinear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;domain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;extent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;  &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;petal_width&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;innerWidth&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="nl"&gt;$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;yScale&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nx"&gt;scaleLinear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;domain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;extent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;  &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;petal_length&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;innerHeight&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The Iris flowers in this dataset are of three different species. I think it makes sense to represent them with  different colors. I am going to map an array of colors to the species using the &lt;code&gt;scaleOrdinal&lt;/code&gt; function in D3.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;classSet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nl"&gt;$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;colorScale&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;scaleOrdinal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;domain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;classSet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#003049&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#d62828&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#f77f00&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And then change the &lt;code&gt;&amp;lt;circle&amp;gt;&lt;/code&gt; element as follows:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;circle&lt;/span&gt;
    &lt;span class="na"&gt;cx=&lt;/span&gt;&lt;span class="s"&gt;{xScale(data.petal_width)}&lt;/span&gt;
    &lt;span class="na"&gt;cy=&lt;/span&gt;&lt;span class="s"&gt;{yScale(data.petal_length)}&lt;/span&gt;  
    &lt;span class="na"&gt;r=&lt;/span&gt;&lt;span class="s"&gt;"5"&lt;/span&gt;
    &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;{`fill:${colorScale(data.class)}`}&lt;/span&gt;
&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1uY8NmLG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fq4ej7ctgp9rc3dmsyrc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1uY8NmLG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fq4ej7ctgp9rc3dmsyrc.png" alt="scatter-colored"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I think I'll make this a (slightly) more fully fleshed out chart and add labels and axes. First lets add x and y-axis labels. Labels are ofcourse just &lt;code&gt;&amp;lt;text&amp;gt;&lt;/code&gt; elements.&lt;br&gt;
We add the Y-axis label as follows:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;text&lt;/span&gt;  &lt;span class="na"&gt;transform=&lt;/span&gt;&lt;span class="s"&gt;{`translate(${-25},${innerHeight&lt;/span&gt;  &lt;span class="err"&gt;/&lt;/span&gt;  &lt;span class="err"&gt;2})&lt;/span&gt; &lt;span class="na"&gt;rotate&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;-90&lt;/span&gt;&lt;span class="err"&gt;)`}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Petal Length&lt;span class="nt"&gt;&amp;lt;/text&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;That cryptic transform essentially just shifts to the left of all the circles and then rotate it. The Y-axis label is added as follows:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;text&lt;/span&gt;  &lt;span class="na"&gt;x=&lt;/span&gt;&lt;span class="s"&gt;{innerWidth&lt;/span&gt;  &lt;span class="err"&gt;/&lt;/span&gt;  &lt;span class="err"&gt;2&lt;/span&gt;  &lt;span class="err"&gt;}&lt;/span&gt;  &lt;span class="na"&gt;y=&lt;/span&gt;&lt;span class="s"&gt;{innerHeight&lt;/span&gt;  &lt;span class="err"&gt;+&lt;/span&gt;  &lt;span class="err"&gt;30}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Petal Width&lt;span class="nt"&gt;&amp;lt;/text&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nJAZFyOM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kfamnx4ps3kcc5d7ez2w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nJAZFyOM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kfamnx4ps3kcc5d7ez2w.png" alt="scatter-colored-axes"&gt;&lt;/a&gt;&lt;br&gt;
Let's add an X-axis and Y-axis. We could write our own Axis component but I saw a nice reusable axis component that I quite liked &lt;a href="https://github.com/TomFevrier/svelte-d3-demo/blob/master/src/Axis.svelte"&gt;here&lt;/a&gt;. I am going to make a few changes there and use it.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;

    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;selectAll&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt;  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;d3-selection&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;axisBottom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;axisLeft&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt;  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;d3-axis&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt;  &lt;span class="nx"&gt;innerHeight&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt;  &lt;span class="nx"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt;  &lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt;  &lt;span class="nx"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;



    &lt;span class="kd"&gt;let&lt;/span&gt;  &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt;  &lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nl"&gt;$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;selectAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="kd"&gt;let&lt;/span&gt;  &lt;span class="nx"&gt;axis&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt;  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bottom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="nx"&gt;axis&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nx"&gt;axisBottom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;tickSizeOuter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="nx"&gt;transform&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="s2"&gt;`translate(0, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;)`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="k"&gt;case&lt;/span&gt;  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;left&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

                &lt;span class="nx"&gt;axis&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nx"&gt;axisLeft&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;tickSizeOuter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="nx"&gt;transform&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="s2"&gt;`translate(&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, 0)`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;axis&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;g&lt;/span&gt;  &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"axis"&lt;/span&gt;  &lt;span class="na"&gt;bind:this=&lt;/span&gt;&lt;span class="s"&gt;{g}&lt;/span&gt;  &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="na"&gt;transform&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Finally lets import the axis component and add it in the &lt;code&gt;&amp;lt;g&amp;gt;&lt;/code&gt; element like so:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;Axis&lt;/span&gt;  &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="na"&gt;innerHeight&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;  &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="na"&gt;margin&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;  &lt;span class="na"&gt;scale=&lt;/span&gt;&lt;span class="s"&gt;{xScale}&lt;/span&gt;  &lt;span class="na"&gt;position=&lt;/span&gt;&lt;span class="s"&gt;"bottom"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;Axis&lt;/span&gt;  &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="na"&gt;innerHeight&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;  &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="na"&gt;margin&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;  &lt;span class="na"&gt;scale=&lt;/span&gt;&lt;span class="s"&gt;{yScale}&lt;/span&gt;  &lt;span class="na"&gt;position=&lt;/span&gt;&lt;span class="s"&gt;"left"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4h-90nFS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uq38prlrdadzvuu1huki.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4h-90nFS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uq38prlrdadzvuu1huki.png" alt="Scatter plot with axes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yeah the Y-axis is inverted 😬. Turns out I have doing this a bit wrong. For the record, I did wonder how such thin petals were so long. But then again what do I know about Iris flowers. Fixing this is easy enough. Let's change &lt;code&gt;yScale&lt;/code&gt; as follows:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;yScale&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nx"&gt;scaleLinear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;domain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;extent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;  &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;petal_length&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QYVBs6Uo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e32ylc7fi6fblv0tzynv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QYVBs6Uo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e32ylc7fi6fblv0tzynv.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
If you want a simple scatter plot then this is probably all you need. I actually went on to add some more (completely unecessary) styling to it. I wanted to see if for each species of the flower we could have different shaped-petals. Not Iris petals shapes of course but petals nonetheless.&lt;/p&gt;

&lt;p&gt;So I gathered some petal shapes from a &lt;a href="https://frontendmasters.com/courses/d3-js-react/"&gt;FrontendMasters&lt;/a&gt; workshop by Shirley Wu &lt;a href="https://observablehq.com/@sxywu/workshop-utility-functions#petalPaths"&gt;here&lt;/a&gt;, modified them ever so slightly and saved as &lt;code&gt;paths.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt;  &lt;span class="nx"&gt;petalPaths&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;M0 0 C5 5 5 10 0 10 C-5 10 -5 5 0 0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;M-3.5 0 C-2.5 2.5 2.5 2.5 3.5 0 C5 2.5 2.5 7.5 0 10 C-2.5 7.5 -5.0 2.5 -3.5 0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;M0 0 C5 2.5 5 7.5 0 10 C-5 7.5 -5 2.5 0 0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Let's import the &lt;code&gt;petalpaths&lt;/code&gt; and map them to species using D3 &lt;code&gt;scaleOrdinal&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;petalPaths&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt;  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./paths&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;shapeScale&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nx"&gt;scaleOrdinal&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;domain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;classSet&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;petalPaths&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Finally instead of plotting circles, we plot a &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; element and set the d attribute to &lt;code&gt;shapeScale&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt;
    &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;{shapeScale(data.class)}&lt;/span&gt;
    &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;{`${colorScale(data.class)}`}&lt;/span&gt;
&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We wrap it in a &lt;code&gt;&amp;lt;g&amp;gt;&lt;/code&gt; element and translate it to their respective position so that they dont overlap each other.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;g&lt;/span&gt;

    &lt;span class="na"&gt;transform=&lt;/span&gt;&lt;span class="s"&gt;{`translate(${xScale(data.petal_width)},${&lt;/span&gt;
    &lt;span class="na"&gt;yScale&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;data.petal_length&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;  &lt;span class="na"&gt;-&lt;/span&gt;  &lt;span class="err"&gt;5&lt;/span&gt;
    &lt;span class="err"&gt;})`}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt;
    &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;{shapeScale(data.class)}&lt;/span&gt;
    &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;{`${colorScale(data.class)}`}&lt;/span&gt;
    &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/g&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s8qTLT0R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4y8jnqfmd1nrd2itn353.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s8qTLT0R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4y8jnqfmd1nrd2itn353.png" alt="Scatter plot with Shapes"&gt;&lt;/a&gt;&lt;br&gt;
I love this plot! &lt;br&gt;
One thing to notice here however is that the plot does loose some accuracy on adding the shapes. So if that's an important concern then best stay away from it. Anyway, I think I'll end here.&lt;br&gt;
Here's the full code - &lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;So that's it for today. Have a nice day!&lt;/p&gt;

</description>
      <category>svelte</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Inheritance Vs Delegation</title>
      <author>Kinanee Samson</author>
      <pubDate>Fri, 15 Oct 2021 07:00:31 +0000</pubDate>
      <link>https://dev.to/kalashin1/inheritance-vs-delegation-1mjo</link>
      <guid>https://dev.to/kalashin1/inheritance-vs-delegation-1mjo</guid>
      <description>&lt;p&gt;If you are an OOP extremist then you would religiously stick to the tenets that define what OOP is, When we want to model relationship in data, we often pick a hierarchical structure, sticking to classical Inheritance, but recently my use of TypeScript and other Object Oriented Programming Language has taught me other ways to get around having to inherit from other classes. It makes more sense in some situation to handle functionality of a class to another, take for instance we want to implement an alarm system? Or we want to use an even higher level of abstraction.&lt;/p&gt;

&lt;p&gt;In this article we are going to be exploring what each is in detail then we will also look at situations where it makes more sense to use one approach over the other. You should know that there is no ultimate solution to things, it all comes down what we are willing to settle for and how well it fits the situation at hand.&lt;/p&gt;

&lt;p&gt;These principles follow through irrespective of the language you use, it could be python, dart or Typescript and you could still achieve the same result, it all lies in how we visualize the relationships that exists between our classes.  So in no particular order let's dive in.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#inheritance"&gt;
  &lt;/a&gt;
  Inheritance
&lt;/h3&gt;

&lt;p&gt;Inheritance in classical OOP is a term used to describe a situation where &lt;code&gt;class B&lt;/code&gt; which is called the &lt;code&gt;child class&lt;/code&gt; will inherit the methods and propertied declared on &lt;code&gt;class A&lt;/code&gt; which is called the &lt;code&gt;parent class&lt;/code&gt;. The idea behind Inheritance is to avoid code duplication, there's no point to create a new class again with the same properties and methods as one you already have? it could lead to all sorts of problems when you have to modify the code. A good aspect of inheritance is that it leans towards &lt;strong&gt;POLYMORPHISM&lt;/strong&gt;, a child class is not tied to the parent class is a rigid manner.&lt;/p&gt;

&lt;p&gt;The child class can have it's own implementation of methods declared on the parent class, however for maintenance sake it is advised that there should be some form of consistency between both implementation. The child class could also be doing something entirely different from what's it's parent is doing, mimicking what we see in reality. The child class could also maintain it's own custom attributes and methods, they could also be private to that class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;Person&lt;/span&gt; &lt;span class="n"&gt;sam&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'sam'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;Admin&lt;/span&gt; &lt;span class="n"&gt;superAmdin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Admin&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'supes'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;900000&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'2'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;sam&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Kalashin'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sam&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getProfile&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;  &lt;span class="c1"&gt;// {name: Kalashin, age: 23}&lt;/span&gt;
  &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;superAmdin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getProfile&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// {name: supes, age: 900000}&lt;/span&gt;
  &lt;span class="n"&gt;superAmdin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;haveBreak&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// supes is having some good break&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;getProfile&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'age'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;$age&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="o"&gt;};&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Admin&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;Admin&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
      &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="n"&gt;haveBreak&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;$name&lt;/span&gt;&lt;span class="s"&gt; is having some good break'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the code block above we created a simple &lt;code&gt;Person&lt;/code&gt; that class served as the &lt;code&gt;parent class&lt;/code&gt; because later we created another class &lt;code&gt;Admin&lt;/code&gt; that inherited from Person, you can also see how we customise the constructor of the Admin, and we can give an admin level, if we wanted to we could override the implementation of that method. There are several types of inheritance which we will discuss briefly. Let's look at the use case for this first, if you were implementing a custom authentication this would be a good situation, the Admin could share the same logic for authentication with the admin. If need be, the authentication of the admin could change to match it's need without breaking the code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#single-inheritance"&gt;
  &lt;/a&gt;
  Single Inheritance
&lt;/h3&gt;

&lt;p&gt;This type of inheritance occurs when a child class inherits from only one parent class, the example we treated above is a fine example for single inheritance.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#multiple-inheritance"&gt;
  &lt;/a&gt;
  Multiple Inheritance
&lt;/h4&gt;

&lt;p&gt;Multiple Inheritance occurs where a child class is inheriting from more than one parent class, this is practise occurs if you apply the Interface segregation Principle, and as such, you might need to inherit multiple small behavioural classes to tie certain features to a particular class. It is quite unfortunate that dart doesn't support multiple inheritance however we can create a super class that can inherit from another class, creating a hierarchical structure.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;Car&lt;/span&gt; &lt;span class="n"&gt;Toyota&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Car&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'16 HP Engine'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;Boat&lt;/span&gt; &lt;span class="n"&gt;dummyBoat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Boat&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Fish Engine'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="n"&gt;Toyota&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="n"&gt;dummyBoat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;dropAnchor&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Accelerate&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Break&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;accelerate&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'im accelerating'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Break&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;canBreak&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'im can break.'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AutoMobile&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Accelerate&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;AutoMobile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Boat&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;AutoMobile&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;Boat&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="n"&gt;dropAnchor&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'im dropping my anchor'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Car&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;AutoMobile&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;Car&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'i can reverse'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Multiple inheritance in dart leads to hierarchical inheritance. in hierarchical inheritance &lt;code&gt;class b&lt;/code&gt; will inherit from &lt;code&gt;class a&lt;/code&gt; and in turn &lt;code&gt;class c&lt;/code&gt; inherits from &lt;code&gt;class b&lt;/code&gt;. this ensures a strict relationship tree can be modelled. You often hear the term "this is a type of". This is because &lt;code&gt;class c&lt;/code&gt; can call methods that &lt;code&gt;class a&lt;/code&gt; has defined in it because &lt;code&gt;class c&lt;/code&gt; parent class, &lt;code&gt;class b&lt;/code&gt; is a child of &lt;code&gt;class a&lt;/code&gt;.  That is not demonstrated above but is totally okay. We have briefly considered inheritance, let's see how delegation works.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#delegation"&gt;
  &lt;/a&gt;
  Delegation
&lt;/h2&gt;

&lt;p&gt;Delegation is a term used to describe a situation where a class &lt;code&gt;receiver&lt;/code&gt; will delate another class &lt;code&gt;sender&lt;/code&gt; to evaluate some of it's method or properties, if looked at blindly you will tend to think that there exists some kind of hierarchical relationship between the receiver and the sender, this is not the case and if your code is modelled in this format you should be refactoring to an Inheritance approach. Delegation is designed to lean your code towards a behavioural approach and as such, the relationship between both parties should be arbitrary to enable your code maintain flexibility.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;Ringer&lt;/span&gt; &lt;span class="n"&gt;ElecticBell&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Ringer&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

  &lt;span class="n"&gt;Alarm&lt;/span&gt; &lt;span class="n"&gt;fireAlarm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Alarm&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ElecticBell&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'fire alarm'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="n"&gt;fireAlarm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Notify&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// fire alarm is ringing&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Ringer&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;ring&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Alarm&lt;/span&gt; &lt;span class="n"&gt;alarm&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;${alarm.type}&lt;/span&gt;&lt;span class="s"&gt; is ringing'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Alarm&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;Ringer&lt;/span&gt; &lt;span class="n"&gt;ringer&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;Alarm&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ringer&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;

  &lt;span class="n"&gt;Notify&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;ringer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ring&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see in the example above when we call &lt;code&gt;ringer.ring()&lt;/code&gt; we pass in &lt;code&gt;this&lt;/code&gt; which represent an instance of that class, the &lt;code&gt;ring()&lt;/code&gt; function is expecting an alarm as an argument because it needs to log out the type type of the alarm system. The &lt;code&gt;Alarm&lt;/code&gt; delegates the computation of the type property to the &lt;code&gt;ringer&lt;/code&gt; and as such the ringer has access to it. If it were to be a function we could also compute result of that function inside the &lt;code&gt;sender&lt;/code&gt; which in this instance is the &lt;code&gt;Ringer&lt;/code&gt; class, while the receiver is the &lt;code&gt;Alarm&lt;/code&gt; class. We can create another type of alarm system, say an intruder alert alarm, although it would still very much make use of a &lt;code&gt;Ringer&lt;/code&gt; but this time it's own type is logged out. If they were function calls we could get very different results.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;Ringer&lt;/span&gt; &lt;span class="n"&gt;ElecticBell&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Ringer&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

  &lt;span class="n"&gt;SuperAlarm&lt;/span&gt; &lt;span class="n"&gt;intruderAlarm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SuperAlarm&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ElecticBell&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'intruder alarm'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="n"&gt;intruderAlarm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Notify&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;     &lt;span class="c1"&gt;// Threat level - 7&lt;/span&gt;
                            &lt;span class="c1"&gt;// intruder alarm is ringing&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SuperAlarm&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Alarm&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;threatLevel&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;SuperAlarm&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Ringer&lt;/span&gt; &lt;span class="n"&gt;ringer&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;threatLevel&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
      &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;threatLevel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;threatLevel&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ringer&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;Notify&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Threat level - &lt;/span&gt;&lt;span class="si"&gt;$threatLevel&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Notify&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You see how we can customize the ring function to get different results, as we extend our classes. Note that the &lt;code&gt;Ringer&lt;/code&gt; is not tightly coupled to the &lt;code&gt;Alarm&lt;/code&gt; class, rather what it is interested in is an instance of an alarm, this allows us to call the &lt;code&gt;ring&lt;/code&gt; method on the &lt;code&gt;Ringer&lt;/code&gt; from anywhere as long as we have an instance of an alarm. But the &lt;code&gt;Alarm&lt;/code&gt; needs a &lt;code&gt;Ringer&lt;/code&gt; before it is created. This leads us from the "is a type of " relationship to the "has a" type of relationship. Here we can see that every alarm has a ringer right? &lt;/p&gt;

&lt;p&gt;Which one of them makes more sense to you? Does it seem more proper for an alarm to inherit the properties of the ringer and say "an alarm is a rigner"? or an alarm should delegate information about itself to it's ringer and say that "an alarm has a ringer?" I would love to hear your thoughts below, thank you.&lt;/p&gt;

</description>
      <category>oop</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
