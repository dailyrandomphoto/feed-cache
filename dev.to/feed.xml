<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Understanding CSS Media Queries</title>
      <author>Aris Zagakos</author>
      <pubDate>Sun, 18 Jul 2021 13:46:41 +0000</pubDate>
      <link>https://dev.to/zagaris/understanding-css-media-queries-1md9</link>
      <guid>https://dev.to/zagaris/understanding-css-media-queries-1md9</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-are-css-media-queries-and-why-are-useful"&gt;
  &lt;/a&gt;
  What are CSS media queries and why are useful?
&lt;/h2&gt;

&lt;p&gt;CSS media queries give us the ability to control, modify and make the layout of a website responsive based on some rules we apply on them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-css-media-queries-work"&gt;
  &lt;/a&gt;
  How CSS media queries work?
&lt;/h2&gt;

&lt;p&gt;Media queries work with &lt;code&gt;@media&lt;/code&gt; declaration that gives to the applied block a condition. If the given condition is true then the corresponding rule is applied.&lt;/p&gt;

&lt;p&gt;The CSS media queries have four possible &lt;code&gt;types&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;all /* apply to all media type devices */
print /* apply on printers */
screen /* apply on screens */
speech /* apply on speech synthesizers */
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;@media type&lt;/code&gt; is optional and if we skip it, the &lt;code&gt;all&lt;/code&gt; type will be implied by default.&lt;/p&gt;

&lt;p&gt;Now, let's see some examples on how to apply &lt;code&gt;@media&lt;/code&gt; declaration based on different screen resolutions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@media screen and (min-width: 600px) {
 /* Apply when the browser is at least 600px or above */
 /* Equivalently we can write for any device */
 /* @media (min-width: 600px) */
}

@media screen and (max-width: 800px) {
 /* Apply when the browser is at maximum 800px or less */
 /* Equivalently we can write for any device */
 /* @media (max-width: 800px) */
}

@media screen and (min-width: 600px) and (max-width: 800px)
 /* Apply when the browser is from 600px to 800px */
 /* Equivalently we can write for any device */
 /* @media (min-width: 600px) and (max-width: 800px) */
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the examples bellow, we will discuss two cases where we use media queries. In these examples, the idea is how the navbar items change and reorganize as the screen resolution changes.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Moreover, on these examples i don't emphasize so much in the style of the elements, but in the way the media queries are applied on them. You can see the code in detail on the pinned codepens.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example-1"&gt;
  &lt;/a&gt;
  Example 1
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/zagaris/embed/rNmWqbX?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;When the screen width size is &lt;code&gt;800px or less&lt;/code&gt;, the &lt;code&gt;navbar  items&lt;/code&gt; will be centered in a column and when the screen width size is &lt;code&gt;600px or less&lt;/code&gt;, the &lt;code&gt;navbar  items&lt;/code&gt; will be blue.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@media (max-width: 800px) {
    nav ul {
        flex-direction: column;
        text-align: center;
    }
}

@media (max-width: 600px) {
    nav ul {
        flex-direction: column;
        text-align: center;
    }
    nav {
        background-color: rgb(62, 109, 149);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#example-2"&gt;
  &lt;/a&gt;
  Example 2
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/zagaris/embed/qBmqQEN?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;When the screen width size is &lt;code&gt;800px or less&lt;/code&gt;, a button appears and the navbar becomes hidden. &lt;br&gt;
When we click the button the &lt;code&gt;navbar items&lt;/code&gt; will appear in a column and when the screen width size is &lt;code&gt;600px or less&lt;/code&gt;, the &lt;code&gt;navbar items&lt;/code&gt; will be blue.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@media (max-width: 800px) {
  nav ul {
    display: none;
    flex-direction: column;
    width: 100%;
  }
  nav ul.show {
    display: flex;
  }
  .my-button {
    display: block;
  }
}

@media (max-width: 600px) {
    nav ul {
    display: none;
    flex-direction: column;
    width: 100%;
  }
  nav ul.show {
    display: flex;
  }
  .my-button {
    display: block;
  }
  nav {
    background-color: rgb(62, 109, 149);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Media_queries"&gt;MDN: Beginner's guide to media queries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.w3schools.com/css/css3_mediaqueries_ex.asp"&gt;W3Schools: CSS Media Queries&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>JavaScript question #Day 8</title>
      <author>Sooraj S</author>
      <pubDate>Sun, 18 Jul 2021 12:52:36 +0000</pubDate>
      <link>https://dev.to/soorajs98/javascript-question-day-8-3d2i</link>
      <guid>https://dev.to/soorajs98/javascript-question-day-8-3d2i</guid>
      <description>&lt;p&gt;&lt;strong&gt;What's the output ?&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;checkAge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;You are an adult!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;You are still an adult.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Hmm.. You don't have an age I guess`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;checkAge&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;A: &lt;code&gt;You are an adult!&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;B: &lt;code&gt;You are still an adult.&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;C: &lt;code&gt;Hmm.. You don't have an age I guess&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Answer: C&lt;/p&gt;

&lt;p&gt;When testing equality, primitives are compared by their &lt;em&gt;value&lt;/em&gt;, while objects are compared by their &lt;em&gt;reference&lt;/em&gt;. JavaScript checks if the objects have a reference to the same location in memory.&lt;/p&gt;

&lt;p&gt;The two objects that we are comparing don't have that: the object we passed as a parameter refers to a different location in memory than the object we used in order to check equality.&lt;/p&gt;

&lt;p&gt;This is why both &lt;code&gt;{ age: 18 } === { age: 18 }&lt;/code&gt; and &lt;code&gt;{ age: 18 } == { age: 18 }&lt;/code&gt; return &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>react</category>
      <category>angular</category>
    </item>
    <item>
      <title>The difference between Encoding, Encryption, Hashing and Obfuscation</title>
      <author>Amran Hussein</author>
      <pubDate>Sun, 18 Jul 2021 12:14:58 +0000</pubDate>
      <link>https://dev.to/amran92/the-difference-between-encoding-encryption-hashing-and-obfuscation-3men</link>
      <guid>https://dev.to/amran92/the-difference-between-encoding-encryption-hashing-and-obfuscation-3men</guid>
      <description>&lt;p&gt;Many programmers confuse the related terms Encryption, Encoding, Hashing, and Obfuscation. This article will look at what each of these terms is.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Encoding&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8YJaraXe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r4iovyhdnp34t9ps0hl9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YJaraXe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r4iovyhdnp34t9ps0hl9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Encoding aims to transform data so that different systems can handle it in a correct and secure manner. For example: sending executables in an email or displaying special characters on a web page. The purpose here is not to keep the information confidential, but rather to ensure that it will be dealt with in an optimal manner.&lt;/p&gt;

&lt;p&gt;The encoding converts data from one format to another in a publicly accessible mechanism and the conversion can therefore be easily reversed. After encoding the data does not need a secret key to be able to deal with it, as the only requirement to be able to decode is the algorithm used in it.&lt;br&gt;
&lt;em&gt;Examples:&lt;/em&gt; ASCII, Unicode, URL encoding and Base64.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Encryption&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XUBNdKIg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wyxk9t5p7y9w0kg9gohw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XUBNdKIg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wyxk9t5p7y9w0kg9gohw.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Encryption is used to transform the form of data for the purpose of keeping it anonymous to others; For example, when you send a message to someone that you do not want others to be able to read or to deliver a secret password on the Internet. Encryption, rather than focusing on the usability of the information, aims to ensure that unauthorized persons cannot make use of the data.&lt;/p&gt;

&lt;p&gt;Encryption turns data into another form that only certain people can understand. To perform the cryptography, an encryption key, an algorithm, and the text to be converted are used. Decryption requires obtaining the encrypted text, the encryption algorithm, and the secret key (the same encryption key or another secret key).&lt;br&gt;
&lt;em&gt;Examples:&lt;/em&gt; AES, Blowfish, and RSA.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hashing&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MPIcXM9S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tzj1m7qqykou0cmi54av.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MPIcXM9S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tzj1m7qqykou0cmi54av.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hashing ensures the integrity of the data, integrity, meaning that if it has been modified, you will be able to find out. The hash operation takes a random input and produces a fixed-length character string that has the following properties.&lt;/p&gt;

&lt;p&gt;Hashing is used with authentication to obtain strong evidence that a message has not been modified. The process is done by taking a specific input, encrypting it with a specific key, hashing it with the same key, then encrypting the key with the public key of the sender, then signing the hash with the secret key of the sender.&lt;/p&gt;

&lt;p&gt;The addressee opens the message and then decrypts the key used to encrypt the message using his secret key, which enables him to obtain the original text of the message. It can then hash the message and compare the hash result with the hash signed by the sender. If a match occurs, it means that the message has not been modified and that it was sent by the waiting person.&lt;br&gt;
&lt;em&gt;Examples:&lt;/em&gt; SHA-3 and MD5 (obsolete)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Obfuscation&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YonNVUlF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dxvhflhvuy50pq1s81db.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YonNVUlF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dxvhflhvuy50pq1s81db.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Obfuscation aims to make information more difficult to understand, difficult to attack, or copy. A common use is to obfuscate the source code to make it more difficult to replicate a product when reverse engineering is applied to it.&lt;/p&gt;

&lt;p&gt;Note that there is a limit to obfuscation depending on the content. When obfuscation software code, for example, the limit is that the result of obfuscation must remain within what the computer can handle, otherwise the program will stop working.&lt;br&gt;
&lt;em&gt;Examples:&lt;/em&gt; JavaScript obfuscation and ProGuard.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Internet Explorer finally dies</title>
      <author>Oliver Williams</author>
      <pubDate>Sun, 18 Jul 2021 12:14:20 +0000</pubDate>
      <link>https://dev.to/otw/internet-explorer-finally-dies-26cn</link>
      <guid>https://dev.to/otw/internet-explorer-finally-dies-26cn</guid>
      <description>&lt;p&gt;I’ve written about the death of Internet Explorer before over on &lt;a href="https://css-tricks.com/a-business-case-for-dropping-internet-explorer/"&gt;CSS Tricks&lt;/a&gt; and &lt;a href="https://alistapart.com/article/the-slow-death-of-internet-explorer-and-future-of-progressive-enhancement/"&gt;A List Apart&lt;/a&gt;, perhaps prematurely, but we’ve finally reached a tipping point. &lt;/p&gt;

&lt;p&gt;Popular JavaScript frameworks have dropped support, including &lt;a href="https://github.com/vuejs/rfcs/discussions/296"&gt;Vue 3&lt;/a&gt; and &lt;a href="https://twitter.com/_developit/status/1387804823492440069"&gt;Preact 11&lt;/a&gt;. Angular has deprecated support for IE and will fully &lt;a href="https://blog.angular.io/angular-v12-is-now-available-32ed51fbfd49"&gt;remove support in version 13&lt;/a&gt;. &lt;a href="https://emberjs.com/browser-support/"&gt;Ember&lt;/a&gt; is removing support in version 4, to be released in September. &lt;a href="https://ionicframework.com/docs/reference/browser-support#desktop-browsers"&gt;Ionic&lt;/a&gt;, a library of UI components, also ditched IE. &lt;/p&gt;

&lt;p&gt;Bootstrap, still the most popular CSS framework, &lt;a href="https://getbootstrap.com/docs/5.0/getting-started/browsers-devices/#internet-explorer"&gt;officially dropped support for IE&lt;/a&gt; with the release of Bootstrap 5. Tailwind, another popular CSS library, also &lt;a href="https://tailwindcss.com/docs/browser-support"&gt;dropped support for IE11&lt;/a&gt; with the release of version 2. &lt;/p&gt;

&lt;p&gt;WordPress dropped support with the release of &lt;a href="https://wordpress.org/news/2021/05/dropping-support-for-internet-explorer-11/"&gt;version 5.8&lt;/a&gt;. Drupal will drop support with the forthcoming release of &lt;a href="https://www.drupal.org/node/3199540"&gt;Drupal 10&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The list of companies that have dropped support is growing by the day, and includes: &lt;a href="https://twitter.com/devongovett/status/1317225855249125377"&gt;Adobe&lt;/a&gt;, &lt;a href="https://developer.dailymotion.com/changelog/dailymotion-no-longer-supports-internet-explorer/"&gt;Dailymotion&lt;/a&gt;, &lt;a href="https://www.skillshare.com/unsupported-browser"&gt;Skillshare&lt;/a&gt;, LinkedIn, Twitter, &lt;a href="https://blogs.sap.com/2021/02/02/internet-explorer-11-will-no-longer-be-supported-by-various-sap-ui-technologies-in-newer-releases/"&gt;SAP&lt;/a&gt;, among many others. &lt;/p&gt;

&lt;p&gt;Many of &lt;a href="https://techcommunity.microsoft.com/t5/microsoft-365-blog/microsoft-365-apps-say-farewell-to-internet-explorer-11-and/ba-p/1591666"&gt;Microsoft's own products&lt;/a&gt; have already dropped support: Microsoft Teams web app ended support in November 2020. From August 17th, 2021, Microsoft 365 apps and services will also drop support.&lt;/p&gt;

&lt;p&gt;Senior Director of Engineering at GoDaddy &lt;a href="https://twitter.com/indexzero/status/1261033701548404749"&gt;tweeted&lt;/a&gt; back in 2020: “We dropped support &lt;a href="https://twitter.com/GoDaddy"&gt;@GoDaddy&lt;/a&gt; for IE11 in April. We've seen 25% bundle size reductions since targeting modern JavaScript for transpilation”&lt;/p&gt;

&lt;p&gt;It is now Safari that is the major outlier. Few users are stuck on old versions of Chrome or Firefox, but plenty of users get stuck on old versions of iOS. &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>a good example why tech companies test leetcode style questions.</title>
      <author>kevin074</author>
      <pubDate>Sun, 18 Jul 2021 12:12:32 +0000</pubDate>
      <link>https://dev.to/kevin074/a-good-example-why-tech-companies-test-leetcode-style-questions-44n0</link>
      <guid>https://dev.to/kevin074/a-good-example-why-tech-companies-test-leetcode-style-questions-44n0</guid>
      <description>&lt;p&gt;Today I came across a question that is simple enough for most developers to solve fast, but just slightly complex enough to worth a little bit of discussion. I believe this questions, and my answer to it, is a pretty good demonstration why leetcode style interview exists. Let's look at the problem first: &lt;br&gt;
&lt;a href="https://leetcode.com/problems/isomorphic-strings/"&gt;https://leetcode.com/problems/isomorphic-strings/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The real problem at hand is how do you confirm whether two strings are representationally the same. Representationally, sorry for the unclear diction, because you can transform the strings into a representations of the order of appearance and how many of different kinds in each word. &lt;/p&gt;

&lt;p&gt;so essentially, a good way to show an isomorphic representation of a string would be like:&lt;br&gt;
egg = 122&lt;br&gt;
add = 122&lt;br&gt;
therefore egg and add are isomorphic &lt;/p&gt;

&lt;p&gt;isomorphic = 1234356718;&lt;/p&gt;

&lt;p&gt;Please see code below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var isIsomorphic = function(s, t) {
    if (!s || !t) return false;
    if(s.length !== t.length) return false;

    let sMap = {};
    let tMap = {};
    let sNumString = '';
    let tNumString = '';
    let currentS = '';
    let currentT = ''
    for (let i=0; i&amp;lt;s.length; i++) {
        currentS = s[i];
        currentT = t[i];

        if(!sMap[currentS]) {
            sMap[currentS] = Object.keys(sMap).length + 1
        } 
        else {    
            sNumString += sMap[currentS]
        }


        if(!tMap[currentT]) {
            tMap[currentT] = Object.keys(tMap).length + 1
        }
        else {    
            tNumString += tMap[currentT]
        }
    }

    return sNumString === tNumString
};

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I think questions like one this really digs deep into whether a developer really knows and is skillful at general problem solving and would be an indicator whether the employee will be good for the company. &lt;/p&gt;

&lt;p&gt;(Although I don't know if my solution to this would be well-received at interviews when it is usually not possible to test the validity of code.)&lt;/p&gt;

&lt;p&gt;I really dislike problems that are very esoteric and dependent on contextual knowledge. For example, you'd need to know a specific formula for solving how many prime numbers are in [0 ... n]. This type of problem is just terrible and not worthwhile to learn. &lt;/p&gt;

&lt;p&gt;Another reason why I like the isomorphic string problem so much, because not only it is knowledge independent, but also does not require a huge mental aerobatic like &lt;a href="https://leetcode.com/problems/maximum-subarray/"&gt;https://leetcode.com/problems/maximum-subarray/&lt;/a&gt;&lt;br&gt;
I would say, however, questions like maximum-subarray do show whether a candidate has reach a higher level of computational, emphasis here, solving skill. Except that in interviews, it's hugely frustrating if you haven't seen a problem remotely similar beforehand.&lt;/p&gt;

&lt;p&gt;Do you have a similar question in mind that is like this one ? Please comment and let me know!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>career</category>
      <category>programming</category>
    </item>
    <item>
      <title>Accessible Code Reviews</title>
      <author>Mark Steadman</author>
      <pubDate>Sun, 18 Jul 2021 12:09:14 +0000</pubDate>
      <link>https://dev.to/steady5063/accessible-code-reviews-11j6</link>
      <guid>https://dev.to/steady5063/accessible-code-reviews-11j6</guid>
      <description>&lt;p&gt;In the agile world that we live in, especially in web development, the race to get the latest design and new functionality out the door has historically left accessibility  in the rearview mirror. &lt;/p&gt;

&lt;p&gt;However, over the last few years there has been a major shift of getting accessibility as part of the day to day development process. Even though this trend is fantastic, it is still a rather new concept and one that can always be improved. &lt;/p&gt;

&lt;p&gt;One way in which accessibility in the development process can be improved is through code reviews. A lot of development teams currently have an "honor system" for automated tests or manual accessibility testing, in which the developer claims they did those steps. Which is why they tend to continue to have issues and not see a downward trend. &lt;/p&gt;

&lt;p&gt;Adding accessibility to a code review of any pull request that your development team creates has great benefits. But what makes an accessible code review? Let's go through some tips and tricks to add accessibility into your code reviews.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-solely-rely-on-automation"&gt;
  &lt;/a&gt;
  Don't solely rely on automation
&lt;/h2&gt;

&lt;p&gt;Automated testing has become one of the staples of shifting accessibility left in development process. Automated testing is most popular with &lt;a href="https://github.com/dequelabs/axe-core"&gt;axe-core&lt;/a&gt; in developers unit or integration test cases. &lt;/p&gt;

&lt;p&gt;When a developer creates a new component, they then add a test case that checks if the component is accessible. If it comes back with any issues, they go back and fix them and look for green light on the test case. &lt;/p&gt;

&lt;p&gt;This is great, however automated accessibility testing with axe-core can only catch around 40% of accessibility violations. This leaves a lot of room for the possibility of "tricking" automation into thinking the content is accessible. It also is only checking the HTML as is, and won't suggest changes to semantic HTML or enforce accessible coding patterns. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enforce-semantic-html"&gt;
  &lt;/a&gt;
  Enforce semantic HTML
&lt;/h2&gt;

&lt;p&gt;Speaking of semantic HTML, accessible code reviews can enforce the use of it! &lt;/p&gt;

&lt;p&gt;Lets say a developer checks in code like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;onClick=&lt;/span&gt;&lt;span class="s"&gt;{this.handleClick}&lt;/span&gt; 
&lt;span class="na"&gt;onKeyPress=&lt;/span&gt;&lt;span class="s"&gt;{this.handleClick}&lt;/span&gt; &lt;span class="na"&gt;tabindex=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Click me!&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Is there anything wrong with this? Technically it is accessible. However, the use of non semantic HTML here makes it so the developer has written extra code to include both click AND keyboard event. Also, anytime role and tabindex are used, there comes the risk that a future developer may not be accessibility aware and remove them, and then keyboard functionality is totally lost. &lt;/p&gt;

&lt;p&gt;This is where the enforcement of semantic HTML could explain the above, and suggest using a button like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;onClick=&lt;/span&gt;&lt;span class="s"&gt;{this.handleClick}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Click me!&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Any time you get the chance to use semantic HTML and enforce it the better. It reduces the risk of misused ARIA and cuts down on the creation of extra code. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ensure-proper-aria-patterns"&gt;
  &lt;/a&gt;
  Ensure proper ARIA Patterns
&lt;/h2&gt;

&lt;p&gt;Sometimes semantic HTML is not possible, and ARIA is required to make HTML widgets fully accessible. ARIA is widely used, but often time implemented incorrectly. The best time to ensure that ARIA is properly used is in a code review. &lt;/p&gt;

&lt;p&gt;One ARIA issue that could easily be caught in a code review would be an incorrect or unnecessary value. Let's say code is checked in that has an aria-live value that is variable. The default of this variable is "off" when there is no text and then "assertive" when text appears. A code review could catch this and tell the developer it does this by default already, so they could have just used assertive.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;aria-live=&lt;/span&gt;&lt;span class="s"&gt;"{{currentState}}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;{{announcemetText}}&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another example would be using the same aria-labelledby id for a component that is used multiple times on a page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Fragment&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"dataInputLabel"&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inputLabel&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; 
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;aria&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;labelledby&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"dataInputLabel"&lt;/span&gt; 
&lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"form-control"&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"dataInput"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Fragment&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These are just a couple of examples, in the literally hundreds of different ARIA misuses that could be caught in a code review. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enforce-accessible-coding-patterns"&gt;
  &lt;/a&gt;
  Enforce accessible coding patterns
&lt;/h2&gt;

&lt;p&gt;Last but not least, code reviews can be used to enforce accessible coding patterns. &lt;/p&gt;

&lt;p&gt;This sounds pretty self explanatory, however when I say to enforce accessible coding patterns I mean your development teams or companies coding patterns. &lt;/p&gt;

&lt;p&gt;Let's take a modals focus management as an example. When a modal opens up where does focus go? The body of the modal, the heading text, the button? Seems like every site you go to now a days has multiple different ways to do this. &lt;/p&gt;

&lt;p&gt;If you have an accessible coding pattern that is consistent, this can help make your site easier to navigate and understand for those with disabilities. This pattern can be easily enforced when looking at another developers pull request.&lt;/p&gt;

&lt;p&gt;Now instead of having 3 different ways that modals could potentially deal with focus. You simply have one consistently across your entire site. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-summary"&gt;
  &lt;/a&gt;
  In Summary
&lt;/h2&gt;

&lt;p&gt;Accessible code reviews can greatly improve the accessibility of your web content. By following the simple steps laid out in this article, you can help make developers that are not only accessibility aware, but that actually care about the content they are creating. At the end of the day, that is the goal. &lt;/p&gt;

&lt;p&gt;To create developers that give a damn about accessibility, and to do that it requires enforcement and proper accessible coding reviews! &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>codereview</category>
      <category>codequality</category>
      <category>a11y</category>
    </item>
    <item>
      <title>A look into Dynamic Programming - Matrix Chain Multiplication</title>
      <author>Andrei Visoiu</author>
      <pubDate>Sun, 18 Jul 2021 12:00:01 +0000</pubDate>
      <link>https://dev.to/kruzzy/a-look-into-dynamic-programming-matrix-chain-multiplication-34gb</link>
      <guid>https://dev.to/kruzzy/a-look-into-dynamic-programming-matrix-chain-multiplication-34gb</guid>
      <description>&lt;p&gt;In the beginning of the &lt;a href="https://dev.to/kruzzy/using-divide-and-conquer-closest-pair-of-points-5e2g"&gt;last article I wrote&lt;/a&gt;, I described two ways of solving a problem by splitting it into subproblems: on one hand, those problems can be solved independently from one another (a method called divide &amp;amp; conquer, which I described in the article); on the other hand, they can interact with each other, building up on the results. Problems on the latter category can be solved using a method called &lt;strong&gt;dynamic programming&lt;/strong&gt;, which will be the topic for today.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#formal-definition-of-dynamic-programming"&gt;
  &lt;/a&gt;
  Formal Definition of Dynamic Programming
&lt;/h2&gt;

&lt;p&gt;In the field of Computer Science, Dynamic Programming is derived from a mathematical optimisation method. It refers to simplifying a problem by breaking it down into smaller subproblems. If the results of those smaller subproblems overlap so they can be fit inside the larger problems, then there is a relation between them and the results of the larger problem.&lt;/p&gt;

&lt;p&gt;For example, by modifying the &lt;a href="https://dev.to/kruzzy/why-is-graph-theory-so-amazing-part-3-bfs-bipartite-graphs-2860"&gt;BFS algorithm I presented in this article&lt;/a&gt; to find the shortest path in an unweighted graph we can obtain a dynamic programming solution to the problem. &lt;/p&gt;

&lt;p&gt;This is possible by making a simple statement: if &lt;strong&gt;i&lt;/strong&gt; and &lt;strong&gt;j&lt;/strong&gt; are two nodes in an unweighted graph, then the shortest path from &lt;strong&gt;i&lt;/strong&gt; to &lt;strong&gt;j&lt;/strong&gt; would be obtained by first obtaining the shortest path from &lt;strong&gt;i&lt;/strong&gt; to a neighbour of &lt;strong&gt;j&lt;/strong&gt;. Described in pseudocode:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;min_dist[i][j] = infinity
for every neighbour k of j:
   min_dist[i][j] = min(min_dist[i][k]+1, min_dist[i][j])
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The last line of the snippet is called a &lt;strong&gt;reccurence relation&lt;/strong&gt;. (such relations are widely used in mathematics; another example is the way the &lt;a href="https://dev.to/kruzzy/the-magic-of-the-fibonacci-numbers-why-we-love-computing-them-part-1-18gp"&gt;Fibonacci sequence&lt;/a&gt; is calculated.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#subproblems-and-memoization"&gt;
  &lt;/a&gt;
  Subproblems and Memoization
&lt;/h2&gt;

&lt;p&gt;Subproblems are basically smaller instances (or versions) of the original problem. By saying that a problem has "overlapping subproblems", we mean that finding its solution involves solving the same subproblem multiple times.&lt;/p&gt;

&lt;p&gt;An accessible example is calculating the n-th Fibonacci number, which I presented in &lt;a href="https://dev.to/kruzzy/the-magic-of-the-fibonacci-numbers-why-we-love-computing-them-part-1-18gp"&gt;an earlier article&lt;/a&gt;. Let's look again at the recursion tree of the problem:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lk7pc8lQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ryh3287x4xy4ox7piye.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lk7pc8lQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ryh3287x4xy4ox7piye.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is clear that, if we do not store the results in some way, some numbers will be calculated multiple times, resulting in a staggering time complexity of O(1.62^n) (see the &lt;a href="https://dev.to/kruzzy/the-magic-of-the-fibonacci-numbers-why-we-love-computing-them-part-1-18gp"&gt;article&lt;/a&gt; for information about how this was calculated). &lt;br&gt;
This technique is called "memoization" - we can store the value of a Fibonacci number in an array after we calculate it for later use. This would decrease the time complexity, in this case, to an ~O(n).&lt;/p&gt;

&lt;p&gt;Memoization is widely used in dynamic programming (which is, in essence, an optimisation technique). Let us see how we can create such a solution.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#matrix-chain-multiplication"&gt;
  &lt;/a&gt;
  Matrix Chain Multiplication
&lt;/h2&gt;

&lt;p&gt;We know that matrix multiplication is &lt;strong&gt;not&lt;/strong&gt; a commutative operation, but it is associative. It also turns out that the order in which the multiplication is done affects the overall number of operations you do.&lt;/p&gt;

&lt;p&gt;Let's suppose we have three matrixes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;A&lt;/strong&gt;, of size 3 x 1 - a column matrix&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;B&lt;/strong&gt;, of size 1 x 3 - a line matrix&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;C&lt;/strong&gt;, of size 3 x 1 - a column matrix again&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can multiply them in two ways: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(AB)C - multiplying A and B would yield a 3 x 3 matrix, and would take 9 operations. Multiplying (AB) with C would take another 9 operations, for a total of 18 operations.&lt;/li&gt;
&lt;li&gt;A(BC) - multiply B and C only takes 3 operations and yield a 1 x 1 matrix. Multiplying A with (BC) would take another 3 operations, for a total of 6 operations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Keeping that in mind, we ask the question: what is the best order to do the multiplication? &lt;/p&gt;

&lt;p&gt;Let's suppose we have N matrixes (M_1 through M_N) whose sizes we store in an array S, such that S[i-1] and S[i] are the sizes for matrix &lt;strong&gt;i&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;We can solve the problem using dynamic programming by making the following observation: the first thing we need to determine is what multiplication should be done last. In other word, we search for a matrix &lt;strong&gt;i&lt;/strong&gt; such that our expression would look like (M_1 * M_2 * ... M_i ) * ( M_(i+1) * ... M_N), and both the products in parenthesis are also calculated optimally. &lt;/p&gt;

&lt;p&gt;We can construct an N x N 2D array, let's call it A, such that A[i][j] will hold the minimum cost (number of operations) to compute the product of matrixes from M_i through M_j. We will use this array to memoise the results.&lt;/p&gt;

&lt;p&gt;Let's see how we can calculate the cost for a "cut" in the product of matrixes from M_i through M_j. If we were to put the parenthesis such like (M_i * M_(i+1) * .... M_k) * (M_(k+1) * ... M_j), the cost would be the sum of the cost of the two parenthesis + the cost to multiply the matrix yield by those two, which will be S[i-1] * S[k] * S[j], as the first result would be of size S[i-1] x S[k], and the second would be of size S[k] * S[j].&lt;/p&gt;

&lt;p&gt;We now just have to find the best &lt;strong&gt;k&lt;/strong&gt; for our cut. We can make this in a recursive manner. Let us look at an implementation of the idea:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;The sizes for the matrixes is the one in the example above, rows and column matrixes. The code outputs the result as 6, as we have concluded earlier.&lt;/p&gt;

&lt;p&gt;This was achieved recursively, by first calling matrix_chain_cost for positions 1 through N. We used &lt;strong&gt;memoisation&lt;/strong&gt; to avoid redundant calculations, and then applied the formula we found above.&lt;/p&gt;

&lt;p&gt;The time complexity of the code above is O(n^3), as we are basically generating the cost for all the "cuts" we can do in the expression.&lt;/p&gt;

&lt;p&gt;That was all for today. &lt;strong&gt;The Magic of Computing&lt;/strong&gt; will be back with yet another interesting algorithmic topic. But, until then, maybe you fancy some &lt;a href="https://dev.to/kruzzy/why-is-graph-theory-so-amazing-part-1-5ii"&gt;Graph Theory&lt;/a&gt;? Or are you more of a &lt;a href="https://dev.to/kruzzy/exploring-backtracking-25dp"&gt;Backtracking&lt;/a&gt; person?&lt;/p&gt;

</description>
      <category>programming</category>
      <category>python</category>
      <category>algorithms</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>Deploy Kafka + Filebeat + ELK - Docker Edition - Part 2 </title>
      <author>Kshitij (kd)</author>
      <pubDate>Sun, 18 Jul 2021 11:49:32 +0000</pubDate>
      <link>https://dev.to/dhingrachief/deploy-kafka-filebeat-elk-docker-edition-part-2-hpj</link>
      <guid>https://dev.to/dhingrachief/deploy-kafka-filebeat-elk-docker-edition-part-2-hpj</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;This article is the last part of a two part series where we will deploy ELK stack using docker/docker-compose.&lt;br&gt;
In this article, we will be configuring Logstash, Elasticsearch and Kibana. If you haven't gone through the previous article, check out this &lt;a href="https://dev.to/dhingrachief/deploy-kafka-filebeat-elk-docker-edition-part-1-3m77"&gt;link&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#logstash"&gt;
  &lt;/a&gt;
  Logstash
&lt;/h2&gt;

&lt;p&gt;Logstash is a server-side data processing pipeline that consumes data from different sources and send it to elasticsearch. We touched on its importance when comparing with filebeat in the previous article.&lt;br&gt;
Now to install logstash, we will be adding three components &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a pipeline config - logstash.conf&lt;/li&gt;
&lt;li&gt;a setting config - logstash.yml&lt;/li&gt;
&lt;li&gt;docker-compose file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pipeline configuration will include the information about your input (kafka in our case), any filteration that needs to be done, and output (aka elasticsearch).&lt;br&gt;
Create a folder named pipeline and add this configuration file to it.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#logstash-pipeline-logstashconf"&gt;
  &lt;/a&gt;
  Logstash pipeline - logstash.conf
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;input {
    kafka{
        bootstrap_servers =&amp;gt; "KAFKA_SERVERS_IP:KAFKA_SERVERS_PORT"
        topics =&amp;gt; ["applogs"]
    }
}
filter {
    json {
        source =&amp;gt; "message"
      }
}
## Add your filters / logstash plugins configuration here
output {
        elasticsearch {
    hosts =&amp;gt; ["ELASTICSEARCH_IP:9200"]
    user =&amp;gt; 'elastic'
    password =&amp;gt; 'somesecretpassword'
    }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;As you can see, In the input section, we are listening to kafka on topic &lt;strong&gt;applogs&lt;/strong&gt;.&lt;br&gt;
In my case, I have added a filter which will jsonify the data that comes under the key named "message". There are several plugin &lt;a href="https://www.elastic.co/guide/en/logstash/6.8/filter-plugins.html"&gt;filters&lt;/a&gt; to choose from.&lt;br&gt;
The output is redirected towards elastic search, with username password configured for authentication.&lt;br&gt;
Create a folder named settings and add this configuration file to it&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#logstash-settings-logstashyml"&gt;
  &lt;/a&gt;
  logstash settings - logstash.yml
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;http.host: "0.0.0.0"
path.config: /usr/share/logstash/pipeline
path.logs: /var/log/logstash
config.reload.automatic: true
log.level: debug
xpack.monitoring.enabled: false

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The docker-compose file looks like this: &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#logstash-dockercompose"&gt;
  &lt;/a&gt;
  logstash docker-compose
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;version: '2'

services:
  logstash:
    image: docker.elastic.co/logstash/logstash:5.6.3
    ports:
      - "10000:10000"
    volumes:
      - ./settings/:/usr/share/logstash/config/
      - ./pipeline/:/usr/share/logstash/pipeline/
    container_name: logstash                          
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Here the configuration files mentioned above have been mounted.&lt;/p&gt;

&lt;p&gt;To run the above file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, You will get an error as we have not setup elastic search yet. Now lets go ahead and install Elasticsearch and Kibana&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#elasticsearch-and-kibana"&gt;
  &lt;/a&gt;
  Elasticsearch and Kibana
&lt;/h2&gt;

&lt;p&gt;Kibana is an open source user interface that helps you monitor and visualise data, which in our case, is being provided by elasticsearch.&lt;br&gt;
Elasticsearch, as the name suggests, is a search and analytics engine for different types of data.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#elasticsearch-and-kibana-dockercompose"&gt;
  &lt;/a&gt;
  Elasticsearch and Kibana  docker-compose
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;version: "2"
services:
 elasticsearch:
  image: "docker.elastic.co/elasticsearch/elasticsearch:7.13.2"
  container_name: elasticsearch
  environment:
   - discovery.type=single-node
   - cluster.routing.allocation.disk.threshold_enabled=true
   - cluster.routing.allocation.disk.watermark.low=65%
   - cluster.routing.allocation.disk.watermark.high=70%
   - xpack.security.enabled=true
   - xpack.security.audit.enabled=true
   - ELASTIC_PASSWORD=somethingsecret
   - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
   - bootstrap.memory_lock=true

  ulimits:
    memlock:
      soft: -1
      hard: -1
  volumes:
    - ./data:/usr/share/elasticsearch/data
  ports:
   - "9200:9200"
  networks:
   - eknetwork

 kibana:
  depends_on:
   - elasticsearch
  image: "docker.elastic.co/kibana/kibana:7.13.2"
  container_name: kibana
  ports:
   - "5601:5601"
  environment:
   - ELASTICSEARCH_URL=http://localhost:9200
   - ELASTICSEARCH_USERNAME=elastic
   - ELASTICSEARCH_PASSWORD=somethingsecretpassword
  networks:
   - eknetwork

networks:
 eknetwork:
  driver: bridge
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Make sure to add same elasticsearch password as the one you have provided in your logstash pipeline configuration file.&lt;/p&gt;

&lt;p&gt;To run the above file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that all our processes are running, You would need to configure Kibana's source from the UI so that you are able to see data on the UI. If you have done this setup on the server and want to configure UI immediately, I would suggest you to create a firewall rule for your public IP on port 5601&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ufw allow from YOUR_PUBLIC_IP to any port 5601
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now go to your favorite browser, type server's ip and port and you will see something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GmDvyEMN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zmqoyrr5dscizw9tlyn3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GmDvyEMN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zmqoyrr5dscizw9tlyn3.png" alt="Home page of Kibana"&gt;&lt;/a&gt;&lt;br&gt;
Enter the credentials as specified in the docker-compose above and you should be able to enter the application.&lt;/p&gt;

&lt;p&gt;And Voila! Your setup is complete. Just don't forget to add log-rotation to your docker instances.&lt;br&gt;
I have added all the configuration and docker file &lt;a href="https://github.com/kdsama/ELK"&gt;here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>docker</category>
      <category>kafka</category>
      <category>elk</category>
      <category>devops</category>
    </item>
    <item>
      <title>Imagine using Spotify - Nerding Out Episode 1</title>
      <author>AkIonSight</author>
      <pubDate>Sun, 18 Jul 2021 11:48:20 +0000</pubDate>
      <link>https://dev.to/akionsight/imagine-using-spotify-nerding-out-episode-1-32f4</link>
      <guid>https://dev.to/akionsight/imagine-using-spotify-nerding-out-episode-1-32f4</guid>
      <description>&lt;p&gt;Well yeah why pay for spotify if can use VLC media player, a text file, a few youtube links and a small python script to listen to your playlist. Why? cuz you know thats the stuff I love to do and if this doesnt interest you, hey youre getting a Ad-Free Music Player without anyone collecting your data. And yeah all of this stuff is open-source, even the libraries i am using too&lt;/p&gt;

&lt;p&gt;Skip to the end if you just want the code&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-everything"&gt;
  &lt;/a&gt;
  Getting everything
&lt;/h2&gt;

&lt;p&gt;You will need some stuff to get this project done, but I guess you probably have some of it or all of it already on your machine. Ok so this is the stuff you will need&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;VLC Media Player (aka VideoLAN)&lt;/li&gt;
&lt;li&gt;Python (I made this on python 3.9 but this is pretty small and should work in anything above python2)&lt;/li&gt;
&lt;li&gt;The Youtube links of all your playlist songs (but you can use any link that works with VLC)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#wait-a-sec-why-vlc-i-mean-there-are-a-lot-of-options"&gt;
  &lt;/a&gt;
  Wait a sec, why VLC? I mean there are a lot of options?
&lt;/h2&gt;

&lt;p&gt;Yeah lemme tell you. Imagine you know you use a custom music player that you are using to play songs at a party and then your non-existent friend asks, "hey wheres the equiliser" or "hey i wanna see the music video" or even "hey can you add subtitles" and then you don't have any answer because you didn't code that part out. VLC will help you in those situations, its pretty lightweight but it will help you get low-level customization done&lt;/p&gt;

&lt;p&gt;Also im lazy, let VLC do the hard part&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-go"&gt;
  &lt;/a&gt;
  Lets go
&lt;/h2&gt;

&lt;p&gt;First I assume you already have VLC on your computer. Also I assume you are on Windows. Now the thing is that VLC ships with command line tools too. To enable these you need to add the path to these command line tools in the PATH environment variable.&lt;/p&gt;

&lt;p&gt;To do so:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open Program files or Program Files(x86) and find the vlc folder or just use these locations&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;C:\Program Files\VideoLAN\VLC\&lt;/code&gt;&lt;br&gt;
or &lt;br&gt;
&lt;code&gt;C:\Program Files (x86)\VideoLAN\VLC\&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;if these folders exist, you can move ahead&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open windows search and type "edit environment variables". Something like this should pop up, click on it&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bWHO4bkl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pqab2jxyhnq3stfomi55.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bWHO4bkl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pqab2jxyhnq3stfomi55.png" alt="Environment Variables"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Or alternatively, you can open it from the command line&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Now select PATH and click edit. Something like this &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZXrTNkPn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5veybbkw9oxtwpfkq8gj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZXrTNkPn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5veybbkw9oxtwpfkq8gj.png" alt="Edit it lol"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Now click on new and then add the Program Files or Program Files(x86) for VLC. something like this. then press "OK"&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bSw8mIcK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0fwmen3t4kurf9wwprrj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bSw8mIcK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0fwmen3t4kurf9wwprrj.png" alt="🚀🚀"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then close the window&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Test it out. to test this, open a new command prompt window and type &lt;code&gt;vlc&lt;/code&gt; and check if any error is raised. If successful it should open vlc media player&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#part-2-script-time"&gt;
  &lt;/a&gt;
  Part 2: Script Time
&lt;/h2&gt;

&lt;p&gt;Create a python file, anywhere really and open it in your favorite code editor&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Import some modules 
we dont really need a lot, and none from outside the stdlib, we need &lt;code&gt;os&lt;/code&gt; and &lt;code&gt;random&lt;/code&gt; but random is optional (we will use it for shuffling songs but some people dont like it)
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Create the &lt;code&gt;playlist.txt&lt;/code&gt; file&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is where all hyperlinks will be stored. you can execute &lt;code&gt;copy NUL playlist.txt&lt;/code&gt; to create this file too&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add some test links to the file &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Add a few songs from your playlist, here are some to help you out&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://www.youtube.com/watch?v=dQw4w9WgXcQ
https://www.youtube.com/watch?v=QH2-TGUlwu4
https://www.youtube.com/watch?v=w0AOGeqOnFY
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Read the file&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;to do so write a simple read mode &lt;code&gt;open&lt;/code&gt; statement, something like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'playlist.txt'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we also split the file on each newline hence creating a list, so each link must be on a separate line&lt;/p&gt;

&lt;p&gt;printing the output of file we should get something like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'https://www.youtube.com/watch?v=dQw4w9WgXcQ'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'https://www.youtube.com/watch?v=QH2-TGUlwu4'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'https://www.youtube.com/watch?v=w0AOGeqOnFY'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Now we shuffle the songs
This wont be hard we just use
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shuffle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Omit this line if you don't like your playlist shuffled&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Appending all values to a single string&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now we append all values of that list from above. We will see the importance of it below. We do it using this for loop&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;videos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;videos&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; "&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;printing the output of videos we get something like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://www.youtube.com/watch?v=w0AOGeqOnFY https://www.youtube.com/watch?v=QH2-TGUlwu4 https://www.youtube.com/watch?v=dQw4w9WgXcQ
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, all of them are in a single list&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Running VLC
Now we execute the command that loads vlc with your playlist
This statement does the job
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'vlc --no-video &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;videos&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;we use the &lt;code&gt;--no-video flag&lt;/code&gt; because we are listening to songs, not seeing their YouTube videos. This should also cut down on bandwidth usage&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Running it&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Execute the file and enjoy your playlist&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#full-code"&gt;
  &lt;/a&gt;
  Full code
&lt;/h2&gt;

&lt;p&gt;this is all the code we discussed here&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;

&lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'playlist.txt'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shuffle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Shuffle the Playlist
&lt;/span&gt;
&lt;span class="c1"&gt;## Add all hyperlinks to a single string
&lt;/span&gt;&lt;span class="n"&gt;videos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;videos&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; "&lt;/span&gt;

&lt;span class="c1"&gt;## Run it all
&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'vlc --no-video &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;videos&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Find the full code here &lt;a href="https://github.com/akionsight/Imagine-Using-Spotify"&gt;https://github.com/akionsight/Imagine-Using-Spotify&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits
&lt;/h2&gt;

&lt;p&gt;Credits to &lt;a href="https://www.vlchelp.com/add-vlc-command-prompt-windows/"&gt;this blog from vlchelp&lt;/a&gt; telling me about how to add VLC to path&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#end-notes"&gt;
  &lt;/a&gt;
  End Notes
&lt;/h2&gt;

&lt;p&gt;This is the first episode of this series, hope you like it and please tell me in the comments if you liked this blog or not. &lt;/p&gt;

&lt;p&gt;Thanks, cya&lt;/p&gt;

</description>
      <category>python</category>
      <category>nerds</category>
      <category>vlc</category>
    </item>
    <item>
      <title>AWS EKS With EFS CSI Driver And IRSA Using CDK</title>
      <author>Vu Dao</author>
      <pubDate>Sun, 18 Jul 2021 11:22:21 +0000</pubDate>
      <link>https://dev.to/awscommunity-asean/aws-eks-with-efs-csi-driver-and-irsa-using-cdk-dgc</link>
      <guid>https://dev.to/awscommunity-asean/aws-eks-with-efs-csi-driver-and-irsa-using-cdk-dgc</guid>
      <description>&lt;h2&gt;
  &lt;a href="#abstract"&gt;
  &lt;/a&gt;
  Abstract
&lt;/h2&gt;

&lt;p&gt;For multiple pods which need to read/write same data, Amazon Elastic File System (EFS) is the best choice. This post guides you the new way to create and setup EFS on EKS with IAM role for service account using IaC AWS CDK v2&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#What-is-Amazon-Elastic-File-System?"&gt;What is Amazon Elastic File System?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#EFS-provisioner-Architecture"&gt;EFS provisioner Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#What-is-Amazon-EFS-CSI-driver?"&gt;What is Amazon EFS CSI driver?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Amazon-EFS-Access-Points"&gt;Amazon EFS Access Points&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Create-EFS-Using-CDK"&gt;Create EFS Using CDK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-Create-IAM-role-for-service-account-for-CSI"&gt;Create IAM role for service account for CSI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-Install-EFS-CSI-using-helm"&gt;Install EFS CSI using helm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-Create-storageclass,-pv-and-pvc---Dynamic-Provisioning"&gt;Create storageclass, pv and pvc - Dynamic Provisioning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-Create-storageclass,-pv-and-pvc---EFS-Access-Points"&gt;Create storageclass, pv and pvc - EFS Access Points&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-How-to-troubleshoot"&gt;How to troubleshoot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#what-is-amazon-elastic-file-system"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;What is Amazon Elastic File System?&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=AvgAozsfCrY"&gt;Amazon Elastic File System (Amazon EFS)&lt;/a&gt; provides a simple, scalable, fully managed elastic NFS file system for use with AWS Cloud services and on-premises resources.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#efs-provisioner-architecture"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;EFS provisioner Architecture&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;
  &lt;a href="https://dev.to/vumdao"&gt;
    
    &lt;img alt="EFS provisioner Architecture" src="https://res.cloudinary.com/practicaldev/image/fetch/s--X0JpEvKy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/aws-eks-the-hard-way/blob/master/efs-csi/img/efs-provisioner-arch.png%3Fraw%3Dtrue"&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The EFS volume at the top of the figure is an AWS-provisioned EFS volume, therefore managed by AWS, separately from Kubernetes. As most of AWS resources are, It will be attached to a VPC, Availability zones and subnets. And it will be protected by security groups.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This volume can basically be mounted anywhere you can mount volumes using the NFS protocol. So you can mount it on your laptop (considering you configured AWS security groups accordingly), which can be very useful for test or debug purposes. Or you can mount it in Kubernetes. And that’s what will do both the EFS-provisioner (in order to configure sub-volumes inside the EFS volume) and your pods (in order to access the sub-volumes).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When the EFS provisioner is deployed in Kubernetes, a new StorageClass “efs” is available and managed by this provisioner. You can then create a PVC that references this StorageClass. By doing so, the EFS provisioner will see your PVC and begin to take care of it, by doing the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a subdir in the EFS volume, dedicated to this PVC&lt;/li&gt;
&lt;li&gt;Create a PV with the URI of this subdir (Address of the EFS volume + subdir path) and related info that will enable pods to use this subdir as a storage location using NFS protocol&lt;/li&gt;
&lt;li&gt;Bind this PV to the PVC&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now when a pod is designed to use PVC, it will use the PV’s info in order to connect directly to the EFS volume and use the subdir.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ref: &lt;a href="https://www.padok.fr/en/blog/efs-provisioner-kubernetes"&gt;&lt;/a&gt;&lt;a href="https://www.padok.fr/en/blog/efs-provisioner-kubernetes"&gt;https://www.padok.fr/en/blog/efs-provisioner-kubernetes&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Previously, I wrote a post introduce EFS provisoner using &lt;code&gt;quay.io/external_storage/efs-provisioner:latest&lt;/code&gt; (an OpenShift Container Platform pod that mounts the EFS volume as an NFS share), &lt;a href="https://dev.to/vumdao/eks-persistent-storage-with-efs-amazon-service-14ei"&gt;read more&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In this post, I introduce CSI Driver provisioner&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-csi-driver"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;What is CSI driver?&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A &lt;a href="https://kubernetes-csi.github.io/docs/deploying.html"&gt;CSI driver&lt;/a&gt; is typically deployed in Kubernetes as two components: a controller component and a per-node component.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Controller Plugin&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6Hqa0x9l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://kubernetes-csi.github.io/docs/images/sidecar-container.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6Hqa0x9l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://kubernetes-csi.github.io/docs/images/sidecar-container.png" alt="controller"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Node plugin&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qFHshIm0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://kubernetes-csi.github.io/docs/images/kubelet.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qFHshIm0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://kubernetes-csi.github.io/docs/images/kubelet.png" alt="node"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How the two components works?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mtbuFtP7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/aws-eks-the-hard-way/blob/master/efs-csi/img/csi-flow.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mtbuFtP7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/aws-eks-the-hard-way/blob/master/efs-csi/img/csi-flow.png%3Fraw%3Dtrue" alt="flow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-amazon-efs-csi-driver"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;What is Amazon EFS CSI driver?&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The &lt;a href="https://github.com/kubernetes-sigs/aws-efs-csi-driver"&gt;Amazon EFS Container Storage Interface (CSI) driver&lt;/a&gt; provides a CSI interface that allows Kubernetes clusters running on AWS to manage the lifecycle of Amazon EFS file systems.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;EFS CSI driver supports dynamic provisioning and static provisioning. Currently Dynamic Provisioning creates an access point for each PV. This mean an AWS EFS file system has to be created manually on AWS first and should be provided as an input to the storage class parameter. For static provisioning, AWS EFS file system needs to be created manually on AWS first. After that it can be mounted inside a container as a volume using the driver.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What is the benefit of using EFS CSI Driver? - &lt;a href="https://aws.amazon.com/blogs/containers/introducing-efs-csi-dynamic-provisioning/"&gt;Introducing Amazon EFS CSI dynamic provisioning&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#amazon-efs-access-points"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;Amazon EFS Access Points&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/efs/latest/ug/efs-access-points.html"&gt;Amazon EFS access points&lt;/a&gt; are application-specific entry points into an EFS file system that make it easier to manage application access to shared datasets. Access points can enforce a user identity, including the user's POSIX groups, for all file system requests that are made through the access point. Access points can also enforce a different root directory for the file system so that clients can only access data in the specified directory or its subdirectories.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can use AWS Identity and Access Management (IAM) policies to enforce that specific applications use a specific access point. By combining IAM policies with access points, you can easily provide secure access to specific datasets for your applications.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#we-go-through-the-introductions-from-above-now-going-to-setup"&gt;
  &lt;/a&gt;
  We go through the introductions from above, now going to setup.
&lt;/h2&gt;



&lt;h2&gt;
  &lt;a href="#create-efs-using-cdk"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;Create EFS Using CDK&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Note: We need tag &lt;code&gt;{key='efs.csi.aws.com/cluster', value='true'}&lt;/code&gt; so that later we restrict the IAM permission within this EFS only
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from constructs import Construct
from eks_statements import EksWorkerRoleStatements
from aws_cdk import (
    Stack, Tags, RemovalPolicy,
    aws_eks as eks,
    aws_ec2 as ec2,
    aws_iam as iam,
    aws_efs as efs
)


class EksEfsStack(Stack):
    def __init__(self, scope: Construct, construct_id: str, env, vpc, **kwargs) -&amp;gt; None:
        super().__init__(scope, construct_id, env=env, **kwargs)

        efs_sg = ec2.SecurityGroup(
            self, 'EfsSG',
            vpc=vpc,
            description='EKS EFS SG',
            security_group_name='eks-efs'
        )
        efs_sg.add_ingress_rule(ec2.Peer.ipv4('10.3.0.0/16'), ec2.Port.all_traffic(), "EFS VPC access")
        Tags.of(efs_sg).add(key='cfn.eks-dev.stack', value='sg-stack')
        Tags.of(efs_sg).add(key='Name', value='eks-efs')
        Tags.of(efs_sg).add(key='env', value='dev')

        file_system = efs.FileSystem(
            self, construct_id,
            vpc=vpc,
            file_system_name='eks-efs',
            lifecycle_policy=efs.LifecyclePolicy.AFTER_14_DAYS,
            removal_policy=RemovalPolicy.DESTROY,
            security_group=efs_sg
        )

        Tags.of(file_system).add(key='cfn.eks-dev.stack', value='efs-stack')
        Tags.of(file_system).add(key='efs.csi.aws.com/cluster', value='true')
        Tags.of(file_system).add(key='Name', value='eks-efs')
        Tags.of(file_system).add(key='env', value='dev')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#create-iam-role-for-service-account-for-csi"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;Create IAM role for service account for CSI&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
    @staticmethod
    def efs_csi_statement():
        policy_statement_1 = iam.PolicyStatement(
            effect=iam.Effect.ALLOW,
            actions=[
                "elasticfilesystem:DescribeAccessPoints",
                "elasticfilesystem:DescribeFileSystems"
            ],
            resources=['*'],
            conditions={'StringEquals': {"aws:RequestedRegion": "ap-northeast-2"}}
        )

        policy_statement_2 = iam.PolicyStatement(
            effect=iam.Effect.ALLOW,
            actions=[
                "elasticfilesystem:CreateAccessPoint",
                "elasticfilesystem:DeleteAccessPoint"
            ],
            resources=['*'],
            conditions={'StringEquals': {"aws:ResourceTag/efs.csi.aws.com/cluster": "true"}}
        )

        return [policy_statement_1, policy_statement_2]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
        # EFS CSI SA
        efs_csi_role = iam.Role(
            self, 'EfsCSIRole',
            role_name='eks-efs-csi-sa',
            assumed_by=iam.FederatedPrincipal(
                federated=oidc_arn,
                assume_role_action='sts:AssumeRoleWithWebIdentity',
                conditions={'StringEquals': string_like('kube-system', 'efs-csi-controller-sa')},
            )
        )
        for stm in statement.efs_csi_statement():
            efs_csi_role.add_to_policy(stm)
        Tags.of(efs_csi_role).add(key='cfn.eks-dev.stack', value='role-stack')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#install-efs-csi-using-helm"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;Install EFS CSI using helm&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Use the above service account as external parameter
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;helm repo add aws-efs-csi-driver https://kubernetes-sigs.github.io/aws-efs-csi-driver/
helm repo update
helm upgrade -i aws-efs-csi-driver aws-efs-csi-driver/aws-efs-csi-driver \
  --namespace kube-system \
  --set serviceAccount.controller.create=false \
  --set serviceAccount.controller.name=efs-csi-controller-sa
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Annotate IRSA and then rollout restart controllers
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ kubectl annotate serviceaccount -n kube-system efs-csi-controller-sa eks.amazonaws.com/role-arn=arn:aws:iam::123456789012:role/eks-efs-csi-sa                                        
serviceaccount/efs-csi-controller-sa annotated

$ kubectl rollout restart deployment -n kube-system efs-csi-controller                                                                                                                     
deployment.apps/efs-csi-controller restarted

# Check IRSA work
$ kubectl exec -n kube-system efs-csi-controller-6b44dc5977-2w2d6 -- env |grep AWS
AWS_ROLE_ARN=arn:aws:iam::123456789012:role/eks-efs-csi-sa
AWS_WEB_IDENTITY_TOKEN_FILE=/var/run/secrets/eks.amazonaws.com/serviceaccount/token
AWS_DEFAULT_REGION=ap-northeast-2
AWS_REGION=ap-northeast-2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Check CSI
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[ec2-user@eks-ctl ~]$ kubectl get pod -n kube-system |grep csi
efs-csi-controller-6b44dc5977-2w2d6             3/3     Running   0          18h
efs-csi-controller-6b44dc5977-qtcc6             3/3     Running   0          159m
efs-csi-node-4rn69                              3/3     Running   0          17h
efs-csi-node-6zdwg                              3/3     Running   0          161m
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;For understanding IAM Role for service account, &lt;a href="https://dev.to/vumdao/using-iam-service-account-instead-of-instance-profile-for-eks-pods-262p"&gt;Go to&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#create-storageclass-pv-and-pvc-dynamic-provisioning"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;Create storageclass, pv and pvc - Dynamic Provisioning&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;
  - storageclass.yaml
  &lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: efs-sc
provisioner: efs.csi.aws.com
parameters:
  provisioningMode: efs-ap
  fileSystemId: fs-92107410
  directoryPerms: "700"
  gidRangeStart: "1000"
  gidRangeEnd: "2000"
  basePath: "/data"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;provisioningMode - The type of volume to be provisioned by efs. Currently, only access point based provisioning is supported efs-ap.&lt;/li&gt;
&lt;li&gt;fileSystemId - The file system under which Access Point is created.&lt;/li&gt;
&lt;li&gt;directoryPerms - Directory Permissions of the root directory created by Access Point.&lt;/li&gt;
&lt;li&gt;gidRangeStart (Optional) - Starting range of Posix Group ID to be applied onto the root directory of the access point. Default value is 50000.&lt;/li&gt;
&lt;li&gt;gidRangeEnd (Optional) - Ending range of Posix Group ID. Default value is 7000000.&lt;/li&gt;
&lt;li&gt;basePath (Optional) - Path on the file system under which access point root directory is created. If path is not provided, access points root directory are created under the root of the file system.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apiVersion: v1
kind: Namespace
metadata:
  name: storage
--------
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: efs-claim
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: efs-sc
  resources:
    requests:
      storage: 1Gi
--------
apiVersion: v1
kind: Pod
metadata:
  name: efs-writer
  namespace: storage
spec:
  containers:
    - name: efs-writer
      image: centos
      command: ["/bin/sh"]
      args: ["-c", "while true; do echo $(date -u) &amp;gt;&amp;gt; /data/out; sleep 5; done"]
      volumeMounts:
        - name: persistent-storage
          mountPath: /data
  volumes:
    - name: persistent-storage
      persistentVolumeClaim:
        claimName: efs-claim
--------
apiVersion: v1
kind: Pod
metadata:
  name: efs-reader
  namespace: storage
spec:
  containers:
  - name: efs-reader
    image: busybox
    command: ["/bin/sh"]
    args: ["-c", "while true; do sleep 5; done"]
    volumeMounts:
    - name: efs-pvc
      mountPath: /data
  volumes:
  - name: efs-pvc
    persistentVolumeClaim:
      claimName: efs-claim
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Apply and check
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ kubectl get sc efs-sc
NAME     PROVISIONER       RECLAIMPOLICY   VOLUMEBINDINGMODE   ALLOWVOLUMEEXPANSION   AGE
efs-sc   efs.csi.aws.com   Delete          Immediate           false                  2m54s

$ kubectl get pvc
NAME        STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGE
efs-claim   Bound    pvc-2a7e818f-c513-4b79-a47e-5b9c1a7d26a9   1Gi        RWX            efs-sc         2m32s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Dynamic Access point is created&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KdBIf-v7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/aws-eks-the-hard-way/blob/master/efs-csi/img/dynamic.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KdBIf-v7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/aws-eks-the-hard-way/blob/master/efs-csi/img/dynamic.png%3Fraw%3Dtrue" alt="Dynamic"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Check read/write pod and ensure pods are located to different nodes to demonstrate EFS strongly&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ kubectl get pod -n storage -owide
NAME         READY   STATUS    RESTARTS   AGE    IP            NODE                                              NOMINATED NODE   READINESS GATES
efs-reader   1/1     Running   0          14s    10.3.147.2    ip-10-3-141-203.ap-northeast-2.compute.internal   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
efs-writer   1/1     Running   0          116s   10.3.235.47   ip-10-3-254-49.ap-northeast-2.compute.internal    &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;

$ kubectl exec efs-reader -n storage -- cat /data/out | head -n 2
Fri Jul 16 03:54:49 UTC 2021
Fri Jul 16 03:54:54 UTC 2021

$ kubectl exec efs-writer -n storage -- cat /data/out | head -n 2
Fri Jul 16 03:54:49 UTC 2021
Fri Jul 16 03:54:54 UTC 2021
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Ref: &lt;a href="https://github.com/kubernetes-sigs/aws-efs-csi-driver/blob/master/examples/kubernetes/dynamic_provisioning/README.md"&gt;https://github.com/kubernetes-sigs/aws-efs-csi-driver/blob/master/examples/kubernetes/dynamic_provisioning/README.md&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#create-storageclass-pv-and-pvc-efs-access-points"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;Create storageclass, pv and pvc - EFS Access Points&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;First create access point using AWS CLI or AWS console, and then get the Access point ID and EFS ID to pass to &lt;code&gt;volumeHandle: fs-a13cb9c1::fsap-0f9e7568af65cc5bd&lt;/code&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nl7MYuTM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/aws-eks-the-hard-way/blob/master/efs-csi/img/access-point.png%3Fraw%3Dtrue" alt="Access point"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
  efs-ap.yaml
  &lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: efs-sc
provisioner: efs.csi.aws.com
--------
apiVersion: v1
kind: Namespace
metadata:
  name: storage
--------
apiVersion: v1
kind: PersistentVolume
metadata:
  name: efs-pv
spec:
  capacity:
    storage: 1Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: efs-sc
  csi:
    driver: efs.csi.aws.com
    volumeHandle: fs-a13cb9c1::fsap-0f9e7568af65cc5bd
--------
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: efs-claim
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: efs-sc
  resources:
    requests:
      storage: 1Gi
--------
apiVersion: v1
kind: Pod
metadata:
  name: efs-writer
  namespace: storage
spec:
  containers:
    - name: efs-writer
      image: centos
      command: ["/bin/sh"]
      args: ["-c", "while true; do echo $(date -u) &amp;gt;&amp;gt; /data/out; sleep 5; done"]
      volumeMounts:
        - name: persistent-storage
          mountPath: /data
  volumes:
    - name: persistent-storage
      persistentVolumeClaim:
        claimName: efs-claim
--------
apiVersion: v1
kind: Pod
metadata:
  name: efs-reader
  namespace: storage
spec:
  containers:
  - name: efs-reader
    image: busybox
    command: ["/bin/sh"]
    args: ["-c", "while true; do sleep 5; done"]
    volumeMounts:
    - name: efs-pvc
      mountPath: /data
  volumes:
  - name: efs-pvc
    persistentVolumeClaim:
      claimName: efs-claim
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Apply the yaml file
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ kubectl get pvc
NAME        STATUS   VOLUME   CAPACITY   ACCESS MODES   STORAGECLASS   AGE
efs-claim   Bound    efs-pv   1Gi        RWX            efs-sc         12h

$ kubectl get pv
NAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                                   STORAGECLASS   REASON   AGE
efs-pv                                     1Gi        RWX            Retain           Bound    storage/efs-claim                       efs-sc                  12h

$ kubectl get pod
NAME         READY   STATUS    RESTARTS   AGE
efs-reader   1/1     Running   0          104s
efs-writer   1/1     Running   0          104s

$ kubectl exec efs-reader -- cat /data/out
Tue Jul 13 05:33:43 UTC 2021
Tue Jul 13 05:33:48 UTC 2021
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#how-to-troubleshoot"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;How to troubleshoot&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Failed case if we input wrong EFS ID
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ kubectl logs -n kube-system -f --tail=100 efs-csi-controller-6b44dc5977-2w2d6 csi-provisioner
E0713 05:50:20.080089       1 event.go:264] Server rejected event '&amp;amp;v1.Event{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"efs-claim.1691439f81a95683", GenerateName:"", Namespace:"storage", SelfLink:"", UID:"", ResourceVersion:"19553746", Generation:0, CreationTimestamp:v1.Time{Time:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}, DeletionTimestamp:(*v1.Time)(nil), DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string(nil), Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ClusterName:"", ManagedFields:[]v1.ManagedFieldsEntry(nil)}, InvolvedObject:v1.ObjectReference{Kind:"PersistentVolumeClaim", Namespace:"storage", Name:"efs-claim", UID:"4c51f212-c828-4a66-a297-31f8d9ebe255", APIVersion:"v1", ResourceVersion:"19553744", FieldPath:""}, Reason:"Provisioning", Message:"External provisioner is provisioning volume for claim \"storage/efs-claim\"", Source:v1.EventSource{Component:"efs.csi.aws.com_ip-10-3-179-184.ap-northeast-2.compute.internal_f7376ef0-1668-4be9-90b5-d18298dc677e", Host:""}, FirstTimestamp:v1.Time{Time:time.Time{wall:0x0, ext:63761752092, loc:(*time.Location)(0x26270e0)}}, LastTimestamp:v1.Time{Time:time.Time{wall:0xc033684704a729f2, ext:68986915168904, loc:(*time.Location)(0x26270e0)}}, Count:8, Type:"Normal", EventTime:v1.MicroTime{Time:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}, Series:(*v1.EventSeries)(nil), Action:"", Related:(*v1.ObjectReference)(nil), ReportingController:"", ReportingInstance:""}': 'events "efs-claim.1691439f81a95683" is forbidden: User "system:serviceaccount:kube-system:efs-csi-controller-sa" cannot patch resource "events" in API group "" in the namespace "storage"' (will not retry!)
I0713 05:50:20.111457       1 controller.go:1099] Final error received, removing PVC 4c51f212-c828-4a66-a297-31f8d9ebe255 from claims in progress
W0713 05:50:20.111494       1 controller.go:958] Retrying syncing claim "4c51f212-c828-4a66-a297-31f8d9ebe255", failure 7
E0713 05:50:20.111512       1 controller.go:981] error syncing claim "4c51f212-c828-4a66-a297-31f8d9ebe255": failed to provision volume with StorageClass "efs-sc": rpc error: code = InvalidArgument desc = File System does not exist: Resource was not found
I0713 05:50:20.111582       1 event.go:282] Event(v1.ObjectReference{Kind:"PersistentVolumeClaim", Namespace:"storage", Name:"efs-claim", UID:"4c51f212-c828-4a66-a297-31f8d9ebe255", APIVersion:"v1", ResourceVersion:"19553744", FieldPath:""}): type: 'Warning' reason: 'ProvisioningFailed' failed to provision volume with StorageClass "efs-sc": rpc error: code = InvalidArgument desc = File System does not exist: Resource was not found
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Success
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ kubectl logs -n kube-system -f --tail=100 efs-csi-controller-6b44dc5977-2w2d6 csi-provisioner
I0713 05:53:59.261135       1 controller.go:1332] provision "storage/efs-claim" class "efs-sc": started
I0713 05:53:59.261719       1 event.go:282] Event(v1.ObjectReference{Kind:"PersistentVolumeClaim", Namespace:"storage", Name:"efs-claim", UID:"2a7e818f-c513-4b79-a47e-5b9c1a7d26a9", APIVersion:"v1", ResourceVersion:"19555274", FieldPath:""}): type: 'Normal' reason: 'Provisioning' External provisioner is provisioning volume for claim "storage/efs-claim"
I0713 05:53:59.385168       1 controller.go:838] successfully created PV pvc-2a7e818f-c513-4b79-a47e-5b9c1a7d26a9 for PVC efs-claim and csi volume name fs-a13cb9c1::fsap-0b047e3528a6856ca
I0713 05:53:59.385219       1 controller.go:1439] provision "storage/efs-claim" class "efs-sc": volume "pvc-2a7e818f-c513-4b79-a47e-5b9c1a7d26a9" provisioned
I0713 05:53:59.385244       1 controller.go:1456] provision "storage/efs-claim" class "efs-sc": succeeded
I0713 05:53:59.393941       1 event.go:282] Event(v1.ObjectReference{Kind:"PersistentVolumeClaim", Namespace:"storage", Name:"efs-claim", UID:"2a7e818f-c513-4b79-a47e-5b9c1a7d26a9", APIVersion:"v1", ResourceVersion:"19555274", FieldPath:""}): type: 'Normal' reason: 'ProvisioningSucceeded' Successfully provisioned volume pvc-2a7e818f-c513-4b79-a47e-5b9c1a7d26a9
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="ltag__user ltag__user__id__512906"&gt;
  
    .ltag__user__id__512906 .follow-action-button {
      background-color: #000000 !important;
      color: #62df88 !important;
      border-color: #000000 !important;
    }
  
    &lt;a href="/vumdao" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bGwkUMWT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ugeYdWM---/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/512906/2472752c-cfd5-4e02-b3d8-55b790178884.png" alt="vumdao image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/vumdao"&gt;Vu Dao&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/vumdao"&gt;Awesome Devops || AWS SA || CloudOpz&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;




&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/vumdao"&gt;
        vumdao
      &lt;/a&gt; / &lt;a href="https://github.com/vumdao/vumdao"&gt;
        vumdao
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


</description>
      <category>aws</category>
      <category>csi</category>
      <category>cloudopz</category>
      <category>efs</category>
    </item>
    <item>
      <title>Update Multiple Records at Once in Rails</title>
      <author>Prabin Poudel</author>
      <pubDate>Sun, 18 Jul 2021 11:22:03 +0000</pubDate>
      <link>https://dev.to/truemark/update-multiple-records-at-once-in-rails-12m8</link>
      <guid>https://dev.to/truemark/update-multiple-records-at-once-in-rails-12m8</guid>
      <description>&lt;p&gt;Rails provides a built-in &lt;strong&gt;create&lt;/strong&gt; method for adding multiple records in single line of code or in more technical term "batch create". For update, if we want to update attributes with same value for all available records then we can do so with the method &lt;code&gt;update_all&lt;/code&gt;. But what if we want to update multiple attributes at once and for multiple records? How do we "batch update" in Rails?&lt;/p&gt;

&lt;p&gt;We will be looking at the answer to that question today in this blog.&lt;/p&gt;

&lt;p&gt;For updating multiple records at once, there may be two cases; when we want to update&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Same attribute/s in all rows&lt;/li&gt;
&lt;li&gt;Different attributes in each row&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#update-same-attributes-in-all-rows"&gt;
  &lt;/a&gt;
  Update same attribute/s in all rows
&lt;/h2&gt;

&lt;p&gt;To update same attributes with same values in all rows of the table, we can use the Rails method &lt;strong&gt;update_all&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For e.g. If we want to update all users with &lt;code&gt;first_name&lt;/code&gt; "John" to "Jessica", we can do so with following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;User.where(first_name: 'John').update_all(first_name: 'Jessica')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#update-different-attributes-in-each-row"&gt;
  &lt;/a&gt;
  Update different attributes in each row
&lt;/h2&gt;

&lt;p&gt;Let's suppose we have a model User and we want to update existing records inside with different &lt;strong&gt;name&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;For e.g. we want to update records with the following JSON:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;formatted_users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;id: &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s1"&gt;'John Doe'&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;id: &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s1"&gt;'Jessica Jones'&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;id: &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s1"&gt;'Robert Junior'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Did you notice? Each user has different name that needs to be updated.&lt;/p&gt;

&lt;p&gt;Let's see how we can update multiple records like these at once in Rails.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Index records by their id&lt;/p&gt;

&lt;p&gt;First of all, we should index all records by their id, &lt;strong&gt;index_by&lt;/strong&gt; will return records grouped by the id and all records will be inside the hash.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="n"&gt;grouped_users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;formatted_users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;index_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;]})&lt;/span&gt;

  &lt;span class="c1"&gt;# index_by will return the following hash&lt;/span&gt;
  &lt;span class="c1"&gt;# =&amp;gt; {1=&amp;gt;{:id=&amp;gt;1, :name=&amp;gt;"John Doe"}, 2=&amp;gt;{:id=&amp;gt;2, :name=&amp;gt;"Jessica Jones"}, 3=&amp;gt;{:id=&amp;gt;3, :name=&amp;gt;"Robert Junior"}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Update grouped records&lt;/p&gt;

&lt;p&gt;After grouping all records by their id, we will pass all ids as a first argument and their attributes as the second attribute to the method &lt;strong&gt;update&lt;/strong&gt;. This way all our records will be updated at once without us having to loop through each record and calling &lt;code&gt;update&lt;/code&gt; each time.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;grouped_users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;grouped_users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This way we can update multiple records with different attributes from a hash or JSON.&lt;/p&gt;

&lt;p&gt;One thing to note is, this solution is not optimized or efficient for large set of records because for each record, we will be hitting database with the update query. That can take significant memory and also more time to execute large set of records.&lt;/p&gt;

&lt;p&gt;Do you have more optimized solutions? Let us know in the comment.&lt;/p&gt;

&lt;p&gt;Thank you for reading. Happy Coding!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/28694498/is-there-anything-like-batch-update-in-rails/28695476#28695476" rel="noopener"&gt;Is there anything like batch update in rails? [Stack Overflow]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cbabhusal.wordpress.com/2015/01/03/updating-multiple-records-at-the-same-time-rails-activerecord/" rel="noopener"&gt;Updating multiple records at the same time rails active record [Cba Bhusal Blog]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#image-credits"&gt;
  &lt;/a&gt;
  Image Credits
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Cover Image by &lt;a href="https://unsplash.com/@salvoventura?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText" rel="noopener"&gt;salvatore ventura&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/pencils?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText" rel="noopener"&gt;Unsplash&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>rails</category>
    </item>
    <item>
      <title>How to create a fleet of AWS EC2s with Terraform?</title>
      <author>Augusto Valdivia</author>
      <pubDate>Sun, 18 Jul 2021 11:02:37 +0000</pubDate>
      <link>https://dev.to/aws-builders/how-to-create-a-fleet-of-aws-ec2s-with-terraform-595l</link>
      <guid>https://dev.to/aws-builders/how-to-create-a-fleet-of-aws-ec2s-with-terraform-595l</guid>
      <description>&lt;p&gt;There were times when companies of any size were limited by the capabilities of their compu power but thanks to cloud computing not anymore. In this article we will learn about some of the advantages of using Amazon Web Services (AWS) and how to dynamically create virtual machines (EC2) that can help with these limitations in minutes. In this article I will also introduce Terraform and how it can be used to create EC2s-AMIs in a dynamic and productive way.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;What are virtual machines-EC2?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Virtual machines or AWS EC2, also called instances, are different operating systems (OS), which can be rented from AWS. Some examples of Os that AWS offers are: Amazon Linux, Red Hat Enterprise, MacOs, Suse Linux, Ubuntu, Microsoft Windows.&lt;/p&gt;

&lt;p&gt;As you can see, the selection of OS is extensive which gives a great advantage to being able to choose EC2 based on OS, RAM, and CPU requirements. EC2 also offers Infrastructure as a Service (IaaS) which provides complete control of computing resources, which can be increased and decreased based on demand. One of the great benefits of using EC2 is the savings in administrative cost, planning and investment in extra-hardware that is not necessary, which turns companies large costs into much smaller one. I'll explain more details in a moment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cost = Demand * Hour&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Cost = 💰 💰 💰 💰 💰 💰 💰 💰&lt;br&gt;
Demand = 🖥 🖥 🖥 🖥 🖥 🖥 🖥 🖥&lt;br&gt;
x Time = ⏱ &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EC2 are classified into five types:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;General purpose&lt;/li&gt;
&lt;li&gt;Optimized computing&lt;/li&gt;
&lt;li&gt;Optimized memory&lt;/li&gt;
&lt;li&gt;Accelerated computing&lt;/li&gt;
&lt;li&gt;Optimized storages&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Diagram 1: AWS EC2&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aBvOieGO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iio0lp8kqnupbhwozr2o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aBvOieGO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iio0lp8kqnupbhwozr2o.png" alt="ec2s"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Considering that we can create or configure any number of AWS-EC2 through the console over and over again this takes time which is a problem. Building infrastructure using code (IaC) alleviates this problem. I present to you one of my favorite tools - Terraform.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;What is Terraform?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Terraform is a powerful declarative tool that helps us manage the vast majority of cloud services, as well as providing consistency and visibility into infrastructure changes that occur across different workspaces and environments. This functionality is an important piece of project lifecycle quality improvement, and it also keeps software engineers and others on the same team informed.&lt;/p&gt;

&lt;p&gt;When using Terraform, we do not need to log in to the AWS management console. This reduces service creation time. It also allows you to detect potential security risks and errors early in the project.&lt;/p&gt;

&lt;p&gt;With Terraform we can work directly from the terminal of our computer using a couple of command lines.&lt;/p&gt;

&lt;p&gt;In this project you will find a repo that stores a list of Terraform files which you can use to configure and create one or more EC2s-AMIs in a matter of minutes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Terraform: Files-preview&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mrfQwSo6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3h23qq453ujivhdh0b7g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mrfQwSo6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3h23qq453ujivhdh0b7g.png" alt="code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now is the time to get down to work on the construction of this infrastructure.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/ValAug/aws-compu-terraform"&gt;Find the repo for this project and instructions here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Terraform functions, arguments, and expressions used in this project:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.terraform.io/docs/language/providers/index.html"&gt;providers&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.terraform.io/docs/language/values/index.html"&gt;variables&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.terraform.io/docs/language/modules/index.html"&gt;modules&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.terraform.io/docs/language/resources/index.html"&gt;resources&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.terraform.io/docs/language/expressions/types.html"&gt;types and values&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.terraform.io/docs/language/meta-arguments/for_each.html"&gt;for_each&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Enjoy 👩‍💻 and Keep building👷‍♀️!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>project</category>
      <category>terraform</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
