<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>JavaScript Projects for Beginners – Easy Ideas to Get Started Coding JS [Beginners - Advance]</title>
      <author>Jarvis</author>
      <pubDate>Mon, 15 Nov 2021 08:16:12 +0000</pubDate>
      <link>https://dev.to/jvscode/javascript-projects-for-beginners-easy-ideas-to-get-started-coding-js-beginners-advance-26cb</link>
      <guid>https://dev.to/jvscode/javascript-projects-for-beginners-easy-ideas-to-get-started-coding-js-beginners-advance-26cb</guid>
      <description>&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;b&gt;The best way to learn a new programming language is to build projects.

I have created a list of 40 beginner friendly project tutorials in Vanilla JavaScript, React, and TypeScript.

My advice for tutorials would be to watch the video, build the project, break it apart and rebuild it your own way. Experiment with adding new features or using different methods.

That will test if you have really learned the concepts or not.

You can click on any of the projects listed below to jump to that section of the article.

&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/40-javascript-projects-for-beginners/&amp;amp;ved=2ahUKEwiB9tj0rPjyAhUMX30KHZQ5CG0QFnoECAgQAQ&amp;amp;usg=AOvVaw26RDQjHugdhbATVS83LI83"&gt;40+ JavaScript Projects for Beginners – Easy Ideas to Get Started Coding JS

&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Video Analytics - Future of Analytics?</title>
      <author>Sarvesh Dubey</author>
      <pubDate>Mon, 15 Nov 2021 08:13:15 +0000</pubDate>
      <link>https://dev.to/dubesar/video-analytics-future-of-analytics-210l</link>
      <guid>https://dev.to/dubesar/video-analytics-future-of-analytics-210l</guid>
      <description>&lt;p&gt;Hello from Sarvesh - one of the co-founders at &lt;a href="https://fusionhq.co"&gt;https://fusionhq.co&lt;/a&gt;, excited to share some deep insights into the world of video analytics! &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is Video Analytics?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Video Analytics can be understood something related to monitoring the user's behaviour for your product! Often it happens you have event analytics turned on giving you the product usage in an abstracted manner but doesn't provides the exact sense of product usage leading to less behavioural insights of product usage. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Let's take a scenario?&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;You have a product XYZ and you are tracking a certain KPI of login dropoff on the platform! And you have certain A tool tracking events for that purpose. Now let's assume two scenarios.&lt;/p&gt;

&lt;p&gt;a. A person clicks on the Login button&lt;br&gt;
b. A person doesn't clicks on the Login button&lt;/p&gt;

&lt;p&gt;But you get to know that you have a high dropoff on that step. Now you are bound to see what was the behaviour of users dropping off at the location/instance!! But you can't simply do it with a regular event analytics tool!&lt;/p&gt;

&lt;p&gt;Let's assume now you want to run an A/B testing for that section. But you don't have any POC of what you should do to incur a lower dropoff than before! You can do it in random but not in targetted manner leading to more time wastage.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How does Fusion helps in Video Analytics?&lt;/strong&gt;&lt;br&gt;
At Fusion we care for both company's time and also development effort and minimize the efforts with larger output and assured success!&lt;/p&gt;

&lt;p&gt;We provide with the visual analysis of your product through small video recordings and help to see the visual journey of a particular user and then convert him by either engaging him or running an A/B testing for a certain set of users. (A/B testing in pipeline yet to be developed). &lt;/p&gt;

&lt;p&gt;You can view product usage videos and take actions according to that with backing of event analytics to confirm you POC and run engagement in a certain targetted manner!&lt;/p&gt;

&lt;p&gt;Hope you like the article and definitely visit &lt;a href="https://fusionhq.co"&gt;https://fusionhq.co&lt;/a&gt; for more insights. &lt;/p&gt;

</description>
    </item>
    <item>
      <title>Understanding callback functions and closures in JavaScript.</title>
      <author>Swastik Yadav</author>
      <pubDate>Mon, 15 Nov 2021 08:09:07 +0000</pubDate>
      <link>https://dev.to/swastikyadav/understanding-callback-functions-and-closures-in-javascript-154l</link>
      <guid>https://dev.to/swastikyadav/understanding-callback-functions-and-closures-in-javascript-154l</guid>
      <description>&lt;p&gt;Hello Everyone,&lt;/p&gt;

&lt;p&gt;In this post we will explore the HOF (Higher order function), Callbacks, and the crazy JavaScript Closures which made us all pull our hairs at some point in our learning journey.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#higher-order-function"&gt;
  &lt;/a&gt;
  Higher Order Function
&lt;/h2&gt;

&lt;p&gt;A function which &lt;strong&gt;accepts a function definition&lt;/strong&gt; as a parameter and/or &lt;strong&gt;returns a function&lt;/strong&gt; is HOF (Higher Order Function).&lt;/p&gt;

&lt;p&gt;For instance:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isEven&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;printMsg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;evenFunc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isEven&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;evenFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`The number &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is even: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;isEven&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;printMsg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isEven&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above snippet &lt;strong&gt;printMsg&lt;/strong&gt; is the &lt;strong&gt;Higher Order Function&lt;/strong&gt;, because it accepts the isEven function as parameter.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#callbacks"&gt;
  &lt;/a&gt;
  Callbacks
&lt;/h2&gt;

&lt;p&gt;A callback is a function passed into another function as an argument to be executed later. In the last code snippet &lt;strong&gt;isEven&lt;/strong&gt; is the callback function.&lt;/p&gt;

&lt;p&gt;It is called &lt;strong&gt;callback&lt;/strong&gt; because it calls back to the place where it was created.&lt;/p&gt;

&lt;p&gt;Let's see one more example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isOddNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;oddNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isOddNumber&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;oddNumbers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [1, 7, 3, 5]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code snippet &lt;strong&gt;isOddNumber&lt;/strong&gt; is the callback function. Because &lt;strong&gt;isOddNumber&lt;/strong&gt; is passed as argument to the &lt;strong&gt;filter&lt;/strong&gt; function.&lt;/p&gt;

&lt;p&gt;Callback functions can be used to handle Async JavaScript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closures"&gt;
  &lt;/a&gt;
  Closures
&lt;/h2&gt;

&lt;p&gt;From &lt;a href="https://swastikyadav.com/how-javascript-works-behind-the-scene-execution-context-and-call-stack"&gt;execution context&lt;/a&gt;, we know that after a function is returned, it is removed from the call stack and deleted from execution context. So, keeping that in mind, here is the definition of a closure.&lt;/p&gt;

&lt;p&gt;A closure is a function which has access to the outer variables even after the outer function is returned.&lt;/p&gt;

&lt;p&gt;Once, the outer function is returned, it is removed from the callstack and deleted from execution context. But the inner function can still access the outer function variables. And &lt;strong&gt;this concept is known as closures&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// 45&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code, &lt;strong&gt;bar&lt;/strong&gt; is the closure function, which has access to outer variables (x and y) even after outer function is returned.&lt;/p&gt;

&lt;p&gt;Simplified Closure Definitions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A closure is function which remembers the environment in which it was created.&lt;/li&gt;
&lt;li&gt;When a function is returned from an outer function, it carries the environment with itself.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Closures are possible in JS because of &lt;strong&gt;Lexical Scoping&lt;/strong&gt;. Lexical scoping means, &lt;em&gt;If a variable is not found in the local scope, it looks in the outer scope, and so on till the global scope.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vywFeJu8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6qb16au0n94gdzsi72uf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vywFeJu8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6qb16au0n94gdzsi72uf.png" alt="lexical-scoping" width="700" height="463"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#exeption-in-closures"&gt;
  &lt;/a&gt;
  Exeption in closures
&lt;/h3&gt;

&lt;p&gt;There is just one exeption in closures. In JavaScript every function is a closure except for functions created via "new Function" syntax.&lt;/p&gt;

&lt;p&gt;Usually a function have access to the lexical environment where it was created. But when a function is created via the &lt;strong&gt;"new Function"&lt;/strong&gt; syntax, it doesn't have access to the lexical environment but the global one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getFunc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;alert(value)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;getFunc&lt;/span&gt;&lt;span class="p"&gt;()();&lt;/span&gt; &lt;span class="c1"&gt;// error: value is not defined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, functions such as func (in above code) doesn’t have access to outer variables, only to the global ones.&lt;/p&gt;




&lt;p&gt;So, that's it for this post. I hope you learned something new, if so, please do share and join my &lt;a href="https://www.getrevue.co/profile/8020lessons"&gt;8020 Newsletter&lt;/a&gt; to receive epic weekly content on building your skillset.&lt;/p&gt;

&lt;p&gt;Thank You!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Nicholas Salzano Explaining The use of Artificial Intelligence (AI) in Video Marketing</title>
      <author>Nicholas Salzano</author>
      <pubDate>Mon, 15 Nov 2021 07:53:52 +0000</pubDate>
      <link>https://dev.to/nicholassalzano_/nicholas-salzano-explaining-the-use-of-artificial-intelligence-ai-in-video-marketing-5dcn</link>
      <guid>https://dev.to/nicholassalzano_/nicholas-salzano-explaining-the-use-of-artificial-intelligence-ai-in-video-marketing-5dcn</guid>
      <description>&lt;p&gt;Nicholas Salzano, a marketer from New York, has very deliberately explained the use of Artificial Intelligence (AI) in video marketing.&lt;/p&gt;

&lt;p&gt;The significant effect of artificial intelligence (AI) on advanced marketing endeavours to date is something no advertiser will debate. &lt;/p&gt;

&lt;p&gt;Artificial Intelligence has changed brands' ability to focus on their clients online by offering organizations a plenitude of significant client experiences, detailed mission results, and vital information. &lt;/p&gt;

&lt;p&gt;Artificial Intelligence has made it feasible for the web-based client experience to be customized dependent on individual inclinations and interests. &lt;/p&gt;

&lt;p&gt;Artificial intelligence investigations have empowered productive digital marketing strategies, such as advertisement focusing on inquiry marketing and made it feasible for brands to settle on information-driven choices more than ever. &lt;/p&gt;

&lt;p&gt;Inside the advanced promoting circle, a channel that can be extraordinarily formed by AI investigation is video marketing. &lt;/p&gt;

&lt;p&gt;By and large, the fate of video advertising looks energizing as brands understand its significance. &lt;/p&gt;

&lt;p&gt;With all proof highlighting the proceeded development of video utilization and commitment, it shouldn't take much for any advertiser to persuade your business to put resources into video promoting. &lt;/p&gt;

&lt;p&gt;Video marketing content will turn out to be considerably more pertinent to buyers, as brands currently can settle on genuinely information-driven choices to illuminate their substance. &lt;/p&gt;

&lt;p&gt;Because of artificial investigation, marks presently find out about their clients than at any other time. &lt;/p&gt;

&lt;p&gt;Artificial Intelligence devices and calculations have furnished them with expanded admittance to information and perusing propensities. &lt;/p&gt;

&lt;p&gt;All in all, how could this be significant for your future video advertising procedure? &lt;/p&gt;

&lt;p&gt;To lay it out, utilizing the data that brands can accumulate about their clients through these instruments, they can make a video promoting technique and content formed by unmistakable client bits of knowledge. &lt;/p&gt;

&lt;p&gt;By acquiring a detailed image of their primary interest group needs and needs, video promoting can be essential and created to consider a particular client profile interests. Also, it's implied that clients are bound to tap on video content that mirrors their inclinations. &lt;/p&gt;

&lt;p&gt;&lt;b&gt;It Further develops Personalization- Nicholas Salzano.&lt;br&gt;&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;There are various justifications for why customized advertising is significant today. In addition to the fact that it increases client commitment, yet additionally gives fitted messages which clients have come to adore. &lt;/p&gt;

&lt;p&gt;Albeit customized video advertising is yet to get on, we have no question it will find its spot in the sun as more brands see that custom-made video content outcomes in expanded commitment. &lt;/p&gt;

&lt;p&gt;Clients react much better to video advertisements which depend on their pursuit history and social interests. &lt;/p&gt;

&lt;p&gt;Artificial Intelligence investigation expands on this data to make designated promotions and content that resound with the crowd. &lt;/p&gt;

&lt;p&gt;Throughout the following few years, hyper-personalization is probably going to become well known in video content promoting. &lt;/p&gt;

&lt;p&gt;While Personalization may publicize practice attire to purchasers who purchased comparative things on the web, hyper-personalization may promote that equivalent exercise gear dependent on utilized limits, instalment techniques, and so on. &lt;/p&gt;

&lt;p&gt;&lt;b&gt;Also explore this blog:&lt;br&gt;&lt;br&gt;
&lt;a href="https://nicholas-salzano.com/nicholas-salzano-shares-how-much-time-does-ppc-take-to-deliver-results/"&gt;Nicholas Salzano Shares How much time does PPC take to deliver results?&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Expands Conversion - Nicholas Salzano.&lt;br&gt;&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;With clients dedicating 33% of their experience on the Internet to watching recordings, many of them can see video advertisements as an annoyance if they don't mirror their inclinations. &lt;/p&gt;

&lt;p&gt;One way not to upset clients internet seeing experience is to show promotions just to those who have looked for a specific item or administration. What's more, research recommends that buyers are bound to purchase an item after watching a video rather than simply learning about it. &lt;/p&gt;

&lt;p&gt;The video urges 64% of watchers to make a buy. Also, it's not hard to comprehend why video rejuvenates items such that composing words can't. Utilizing AI, you'll be protected in the information that each tweaked video is displayed to its interest group, which will get more chances. &lt;/p&gt;

&lt;p&gt;&lt;b&gt;Artificial Intelligence focuses on the ideal individuals to show your recordings- Nicholas Salzano.&lt;br&gt;&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Purchasers invest 33% of their energy watching recordings as promotions, instructional exercises, educational pieces, and so forth. The individuals who consider recordings to be an aggravation are not many. &lt;/p&gt;

&lt;p&gt;This makes it more significant than any other time to add video content to your technique. &lt;/p&gt;

&lt;p&gt;The video rejuvenates your offers and gives them substantial confirmation of the quality you are offering or the arrangement they are searching for. &lt;/p&gt;

&lt;p&gt;In any case, if the individual watching your video isn't keen on what it offers, this is a disturbance to them. As an advertiser, you will probably present promotions and recordings to the individuals who will perceive what you have to offer, for example, individuals searching for your image, item, or administration. &lt;/p&gt;

&lt;p&gt;&lt;b&gt;How could AI assist you with this- Nicholas Salzano?&lt;br&gt;&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Video marketing is vital in focusing on your crowd. Fortunately, these days many instruments guarantee that your substance contacts its target group. From web-based media promotions that are artificial reasoning headed to cross-channel publicizing stages, there are tons you can use to track down your purchaser persona. &lt;/p&gt;

&lt;p&gt;&lt;b&gt;How does this function- Nicholas Salzano?&lt;br&gt;&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;At the point when you watch a video on YouTube, it proposes comparative recordings dependent on your looks for when you're finished with the one you're watching. This is crafted by artificial intelligence- finding things that you want or may intrigue you. &lt;/p&gt;

&lt;p&gt;Not put yourself on the opposite side of this, the brands. Artificial intelligence helps brands by finding individuals who are keen on their contributions. These are individuals you endeavour to see as a brand. &lt;/p&gt;

&lt;p&gt;Artificial intelligence empowers testing of your present video advertising systems. &lt;/p&gt;

&lt;p&gt;Let's say that you have a few recordings prepared, and you have a sure outlook on your methodology. Wouldn't it helps on the off chance that you could do a trial and perceive how it will function before putting vast loads of cash in it? &lt;/p&gt;

&lt;p&gt;Artificial Intelligence tools can precisely show which substance has the most guarantee and support commitment in your ideal interest group. &lt;/p&gt;

&lt;p&gt;Consider this your opportunity to test and learn. You can run numerous firms before putting resources into a central dispatch, which is an incredible way to set aside some cash and work on your outcomes. This is particularly important for brands that have a more modest financial plan. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://nicholas-salzano.com/"&gt;Nicholas Salzano&lt;/a&gt; further discusses, with regards to video marketing, numerous more modest brands and organizations are reluctant to put a tremendous measure of spending plan in a generally new channel except if they are sure about its profit from speculation. &lt;/p&gt;

&lt;p&gt;Artificial intelligence investigation makes it feasible for advertisers to test their video content and have a superior thought of results before putting resources into a more broad carry out. &lt;/p&gt;

&lt;p&gt;This chance to try and learn wasn't conceivable before artificial intelligence. With a reasonable perspective on what their video content can accomplish, more organizations will want to contribute a more significant amount of their advanced marketing financial plan into it.&lt;/p&gt;

</description>
      <category>nicholassalzano</category>
      <category>nicksalzano</category>
      <category>nicholassalzanousa</category>
      <category>nicholasakanicksalzano</category>
    </item>
    <item>
      <title>Building The Poll App From the Django Tutorial With FastAPI and React</title>
      <author>jbrocher</author>
      <pubDate>Mon, 15 Nov 2021 07:52:47 +0000</pubDate>
      <link>https://dev.to/jbrocher/building-the-poll-app-from-the-django-tutorial-with-fastapi-and-react-1og3</link>
      <guid>https://dev.to/jbrocher/building-the-poll-app-from-the-django-tutorial-with-fastapi-and-react-1og3</guid>
      <description>&lt;p&gt;Welcome to part 2 of this series where we're building the Poll App from the &lt;a href="https://docs.djangoproject.com/en/3.2/intro/tutorial01/"&gt;Django Tutorial&lt;/a&gt;, using FastAPI and React ! In &lt;a href="https://dev.indooroutdoor.io/the-poll-app-from-django-tutorial-with-fastapi-and-react-1"&gt;part 1&lt;/a&gt;, we saw how to set up a FastAPI project using Docker, and wrote our first path operation. Today in Part 2, we'll go one step further and start working with a relational database. &lt;/p&gt;

&lt;p&gt;As usual the source for this part is available on &lt;a href="https://github.com/jbrocher/fastapi-poll-2"&gt;Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here's what's on the menu : &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#%F0%9F%92%BD-spinning-up-the-database"&gt;Spinning up a Postgres Database using docker-compose&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#%E2%9A%99%EF%B8%8F-configuring-our-orm%3A-sqlalchemy-and-alembic"&gt;Installing our ORM of choice: SQLAlchemy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to%F0%9F%93%9D-writing-the-models"&gt;Writing the Question and Choice model for the poll app&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Note: In the original Django tutorial, this is also where django-admin is introduced. For our own admin dashboard we'll be using react-admin which will be presented in a later part of this series !&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h2&gt;

&lt;p&gt;We'll be using docker-compose to run our databse as a service. If you haven't installed it yet, the instructions are available &lt;a href="https://docs.docker.com/compose/install/"&gt;here&lt;/a&gt; !&lt;/p&gt;

&lt;p&gt;You don't &lt;strong&gt;have&lt;/strong&gt; to use docker-compose to follow along though. If you prefer to set up your PostgresSQL server yourself, just skip directly to &lt;a href="#%E2%9A%99%EF%B8%8F-configuring-our-orm%3A-sqlalchemy-and-alembic"&gt;Instaling the ORM&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#spinning-up-the-database"&gt;
  &lt;/a&gt;
  💽 Spinning up the database
&lt;/h2&gt;

&lt;p&gt;First of all, we need a database to work with. I chose docker-compose to run a Postgres image along with our app. Our API is already dockerized so this will make it easy to managage everything. &lt;/p&gt;

&lt;p&gt;I will not dive into the specifics of docker-compose as it's beyond the scope of this article. However if you've never used it before, I encourage you to go read th &lt;a href="https://docs.docker.com/compose/"&gt;documentation&lt;/a&gt;. It's quite extensive ! &lt;/p&gt;

&lt;p&gt;Add a &lt;code&gt;docker-compose.yml&lt;/code&gt; at the root of you project,  with the following instructions :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;version:"3.9"services:web:build:.depends_on:-dbports:-"80:80"env_file:-postgres.env-.envvolumes:-./app:/appdb:image:postgresrestart:alwaysvolumes:-data-volume:/var/lib/postgresql/dataenv_file:-postgres.envpg_admin:image:dpage/pgadmin4environment:-PGADMIN_DEFAULT_EMAIL=user@domain.com-PGADMIN_DEFAULT_PASSWORD=passwordports:-"81:80"volumes:data-volume:
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This configuration will launch the following: &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The &lt;code&gt;web&lt;/code&gt; service&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is our api running on the port 80. We mount the /app folder containg the app code into the container so we don't have to rebuild it everytime we make a change.&lt;/p&gt;

&lt;p&gt;We also include two environment files: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;postgres.env: This will hold the database credentials&lt;/li&gt;
&lt;li&gt;.env: For environments variables specific to the web servcie
&lt;strong&gt;The &lt;code&gt;db&lt;/code&gt; service&lt;/strong&gt;
This service runs a postgres image using the same &lt;code&gt;postgres.env&lt;/code&gt; than the API to configure the database. That way we can keep our environment variables DRY.
It also uses the &lt;code&gt;data-volume&lt;/code&gt; declared at the end of the file to persist the data.
&lt;strong&gt;The &lt;code&gt;pg_admin&lt;/code&gt; service&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This runs a &lt;a href="https://www.pgadmin.org/"&gt;pgAdmin&lt;/a&gt; admin image. pgAdmin is an adminisitration tool for PostgreSQL database. Declaring it as a service will make configuring&lt;br&gt;
the server connection eaiser as we'll benefit from docker-compose custom network. We expose it on port 81 to avoid conflicting with the API running on the port 80. &lt;/p&gt;

&lt;p&gt;To configure the postgres image, create the postgres.env file at the root of the project, with the following variables :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#postgres.env POSTGRES_PASSWORD=passwordPOSTGRES_USER=pollPOSTGRES_DATABASE=pollPOSTGRES_HOST=db
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'ready to launch everything! Just run &lt;code&gt;docker-compose up&lt;/code&gt; and you should see the output for each service. Now you can access pgAdmin at &lt;code&gt;localhost:81&lt;/code&gt;. To connect to the postgres database, simply add a new server and enter information from &lt;code&gt;postgres.env&lt;/code&gt; like so : &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IkYgFRg2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636630576084/fdyP6gEP5.gif%3Fauto%3Dformat%2Ccompress%26gif-q%3D60%26format%3Dwebm" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IkYgFRg2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636630576084/fdyP6gEP5.gif%3Fauto%3Dformat%2Ccompress%26gif-q%3D60%26format%3Dwebm" alt="demo pg admin" width="" height=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's it ! &lt;/p&gt;

&lt;p&gt;Now that our environment is up and running in let's dive in ! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/L48RzCCKfpwHK/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/L48RzCCKfpwHK/giphy.gif" alt="dive in" width="400" height="225"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#configuring-our-orm-sqlalchemy-and-alembic"&gt;
  &lt;/a&gt;
  ⚙️  Configuring our ORM: SQLAlchemy and Alembic
&lt;/h2&gt;

&lt;p&gt;Contrary to Django, FastAPI doesn't ship with a built-in ORM solution  like &lt;a href="https://docs.djangoproject.com/en/3.2/topics/db/queries/"&gt;django-orm&lt;/a&gt;. FastAPI focuses on enabling you to build perfomant and robust APIs super efficiently, and let you make your own choices for everything else. You could avoid relational databases altogether and use &lt;a href="https://www.mongodb.com/compatibility/mongodb-and-django"&gt;MongoDB&lt;/a&gt; for instance. This lets you build an architecture tailored to your needs. &lt;/p&gt;

&lt;p&gt;It does mean that we have to configure our ORM ourserlves though.  For this tutorial we'll use &lt;a href="https://www.sqlalchemy.org/"&gt;SQLAlchemy&lt;/a&gt;, a reliable solution under active developement. &lt;/p&gt;

&lt;p&gt;First let's install a few dependencies. From you &lt;code&gt;app&lt;/code&gt; folder run &lt;code&gt;poetry add sqlalchemy psycopg2-binary alembic pydantic&lt;/code&gt;. &lt;br&gt;
Besides SQLAlchemy this will install the followingd packages: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;psycopg2: A python adaptater for PostgresSQL. Required by &lt;code&gt;SQLAlchemy&lt;/code&gt; (And also by Django when working with Postgres)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://alembic.sqlalchemy.org/en/latest/"&gt;alembic&lt;/a&gt;: This will be our migrations management tools&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://pydantic-docs.helpmanual.io/"&gt;pydantic&lt;/a&gt;: Data validation and settings management using python type annotations. If you've worked with &lt;a href="https://www.django-rest-framework.org/"&gt;DRF&lt;/a&gt; before,  you can think of pydantic models as the equivalent of serializers.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#using-environment-variables-"&gt;
  &lt;/a&gt;
  Using environment variables :
&lt;/h3&gt;

&lt;p&gt;We will need to access the environement variables in order to set up the connection with the database. We'll use a special &lt;code&gt;pydantic&lt;/code&gt; class called &lt;code&gt;BaseSettings&lt;/code&gt;. Add a &lt;code&gt;config.py&lt;/code&gt; file to &lt;code&gt;app/app&lt;/code&gt; with the following code :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#app/app/config.pyfrom pydantic import BaseSettingsclassSettings(BaseSettings): POSTGRES_USER: str
    POSTGRES_PASSWORD: str
    POSTGRES_DATABASE: str
    POSTGRES_HOST: str
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When instantiating the class with &lt;code&gt;settings = Settings()&lt;/code&gt;, pydantic will read the variables from the environment and validate them against the types we defined,  raising an error if anything is missing. This class is actually a great selling point of pydantic, offering tons of other functionalities like automatic parsing of list and dict type. More information is available &lt;a href="https://pydantic-docs.helpmanual.io/usage/settings/#parsing-environment-variable-values"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sqlalchemy"&gt;
  &lt;/a&gt;
  SQLAlchemy
&lt;/h3&gt;

&lt;p&gt;Let's configure SQLAlchemy to connect to our Database. Create &lt;code&gt;app/app/database.py&lt;/code&gt; and put the following code in it :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# app/app/database.pyfrom sqlalchemy import create_enginefrom sqlalchemy.ext.declarative import declarative_basefrom sqlalchemy.orm import sessionmakerfrom . import config# The declarative base we'll use to create our model Base = declarative_base()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For now all we're concerned with is writing the models, so we only need to configure the declarative base from which they will inherit. In part 3 we'll come back to this file to create a session maker to use in our path operations. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#alembic"&gt;
  &lt;/a&gt;
  Alembic ⚗️
&lt;/h3&gt;

&lt;p&gt;Last bit of configuration before writing the models: &lt;a href="https://alembic.sqlalchemy.org/en/latest/"&gt;Alembic&lt;/a&gt;. This is SQLAlchemy own migration manager. It will allows us to do the same thing than django's &lt;code&gt;makemigrations&lt;/code&gt; and &lt;code&gt;migate&lt;/code&gt; commands, but we need to initialize it first ! &lt;/p&gt;

&lt;p&gt;Let's first generate the configuration files for alembic. From the root of the project &lt;code&gt;cd&lt;/code&gt; into the &lt;code&gt;app&lt;/code&gt; directory and run &lt;code&gt;alembic init&lt;/code&gt;. This will create the configuration scripts for alembic. Your project strucutre should now look like this : &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wQ08DEfm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636740239216/C50VE0G_b.png%3Fauto%3Dcompress%26auto%3Dcompress%2Cformat%26format%3Dwebp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wQ08DEfm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636740239216/C50VE0G_b.png%3Fauto%3Dcompress%26auto%3Dcompress%2Cformat%26format%3Dwebp" alt="directory structure" width="319" height="407"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We also need to let Alembic know where to find this scripts, so we can run the commands from the root of the project. We can do so by setting the &lt;code&gt;ALEMBIC_CONFIG&lt;/code&gt; environment variable :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//.envALEMBIC_CONFIG=/app/app/alembic.ini
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's edit the &lt;code&gt;env.py&lt;/code&gt; file to configure the connection to the database. If you open this file, you'll see that it's mostly composed of two functions, corresponding to the two available modes of alembic: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;run_migrations_online&lt;/code&gt;: Configure the online mode. This is the one that we will be using.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;run_migrations_offline&lt;/code&gt;: Configure the offline mode. This mode allows the user to generate SQL instructions instead of running the migrations directly against the database&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In both case, we need to edit the way the connection URL is set up. Instead of reading it from &lt;code&gt;alembic.ini&lt;/code&gt; we'll use the Setting class we created earlier to generate it from our environement variables. Like so :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from app.config import Settings

  settings = Settings()

  ...defrun_migrations_offline(): ...

    url = f"postgresql://{settings.POSTGRES_USER}:{settings.POSTGRES_PASSWORD}@{settings.POSTGRES_HOST}/{settings.POSTGRES_DATABASE}" context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
        compare_server_default=True,
    )

  ...defrun_migrations_online(): ...

    url = f"postgresql://{settings.POSTGRES_USER}:{settings.POSTGRES_PASSWORD}@{settings.POSTGRES_HOST}/{settings.POSTGRES_DATABASE}" connectable = engine_from_config(
        {"sqlalchemy.url": url},
        prefix="sqlalchemy.",
        poolclass=pool.NullPool,
    )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To try it out, drop into the web container, and run &lt;code&gt;alembic revision -m "test revision"&lt;/code&gt;. This will create an empty revision in the file &lt;code&gt;alembic/version&lt;/code&gt; folder :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"""test revision


Revision ID: 2af1b91bea53
Revises: 27259876f63d
Create Date: 2021-11-12 18:21:26.442182

"""from alembic import opimport sqlalchemy as sa# revision identifiers, used by Alembic.revision = '2af1b91bea53'down_revision = '27259876f63d'branch_labels = Nonedepends_on = Nonedefupgrade():passdefdowngrade():pass
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the file is generated wihtout errors, then Alembic is correctly configured ! You can delete this revision safely, we'll generate a new one from the models in a moment. &lt;/p&gt;

&lt;p&gt;Now we're finally ready to write our models and generate the associated migrations ! &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#writing-the-models"&gt;
  &lt;/a&gt;
  📝 Writing the models
&lt;/h2&gt;

&lt;p&gt;We'll need two model for our Poll app : &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;code&gt;Question&lt;/code&gt; model : This will hold the question text&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;Choice&lt;/code&gt; model: A possible answer for a question.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is a one-to-many relation between a &lt;code&gt;Question&lt;/code&gt; and a &lt;code&gt;Choice&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To create them, add a &lt;code&gt;models.py&lt;/code&gt; file to the poll folder, with the following code in it :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#/app/polls/models.pyfrom datetime import datetimefrom sqlalchemy import Columnfrom sqlalchemy import DateTimefrom sqlalchemy import ForeignKeyfrom sqlalchemy import Integerfrom sqlalchemy import Stringfrom sqlalchemy.orm import relationshipfrom app.database import BaseclassQuestion(Base): __tablename__ = "poll_question" id = Column(Integer, index=True, primary_key=True)
    question_text = Column(String(200), nullable=False)
    pub_date = Column(DateTime, nullable=False, default=datetime.utcnow)

    choices = relationship("Choice", backref="question")classChoice(Base): __tablename__ = "poll_choice" id = Column(Integer, index=True, primary_key=True)
    choice_text = Column(String(200), nullable=False)
    votes = Column(Integer, default=0, nullable=False)
    question_id = Column(Integer, ForeignKey("poll_question.id"))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you're coming from Django, it's important to note a few key differences with &lt;code&gt;django-orm&lt;/code&gt;: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You have to set the tablename yourself with the &lt;code&gt;__tablename__&lt;/code&gt; class attribute. Here I followed the Django convention &lt;code&gt;&amp;amp;lt;app_name&amp;amp;gt;_&amp;amp;lt;model_name&amp;amp;gt;&lt;/code&gt; but you're free to do as you please !&lt;/li&gt;
&lt;li&gt;We also need to designate a column to serve as the primary key.&lt;/li&gt;
&lt;li&gt;The column are nullable by default, we have to explicetly set &lt;code&gt;nullable=False&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Relationships need to be explicitely declared with the &lt;a href="https://docs.sqlalchemy.org/en/14/orm/relationships.html"&gt;relationship&lt;/a&gt; functions. This enables ORM features like loading a question's choices using &lt;code&gt;question.choices&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you can see, SQLAlechmy is a bit more "low level" than Django-ORM which means it needs more configuration. However, it also means that you have a more fine-grained control&lt;br&gt;
over its behavior, and as we'll see later in this tutorial it makes querying more explicit! &lt;/p&gt;

&lt;p&gt;Now that our models are declared let's see how we can automatically generate the corresponding migrations with Alembic.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/XI7rk6UYBM4LWp2rw0/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/XI7rk6UYBM4LWp2rw0/giphy.gif" alt="The great migration" width="480" height="480"&gt;&lt;/a&gt;&lt;em&gt;the great migration&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To automatically generate our migrations, we need to let Alembic know about our models. To do that, we'll simply import them into our &lt;code&gt;env.py&lt;/code&gt; file. This is a bit like registering a new app into a django app &lt;code&gt;settings.py&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;We also need to import &lt;code&gt;Base&lt;/code&gt;, as it is our declartive base that contains all the information for building the tables corresponding to our model. Each time a class inherits from &lt;code&gt;Base&lt;/code&gt;, it adds its own instructions to &lt;code&gt;Base.metadata&lt;/code&gt;.  These instructions are passed to Alembic through the &lt;code&gt;target_metadata&lt;/code&gt; variable, so we need to assign it to &lt;code&gt;Base.metadata&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#app/app/alembic/env.py# We import the models and our declartive baseimport polls.modelsfrom app.database import Base... # Find this line near the top of the file # And replace None with Base.metadatatarget_metadata = Base.metadata
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All done ! Run &lt;code&gt;alembic version --autogenerate -m "create question and choice models"&lt;/code&gt; to automatically creathe the migration file. &lt;br&gt;
It should generate the following instructions :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"""create_question_and_choice

Revision ID: 27259876f63d
Revises: 
Create Date: 2021-11-11 10:52:50.386678

"""from alembic import opimport sqlalchemy as sa# revision identifiers, used by Alembic.revision = '27259876f63d'down_revision = Nonebranch_labels = Nonedepends_on = Nonedefupgrade():# ### commands auto generated by Alembic - please adjust! ### op.create_table('poll_question',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('question_text', sa.String(length=200), nullable=False),
    sa.Column('pub_date', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_poll_question_id'), 'poll_question', ['id'], unique=False)
    op.create_table('poll_choice',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('choice_text', sa.String(length=200), nullable=False),
    sa.Column('votes', sa.Integer(), nullable=False),
    sa.Column('question_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['question_id'], ['poll_question.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_poll_choice_id'), 'poll_choice', ['id'], unique=False)# ### end Alembic commands ###defdowngrade():# ### commands auto generated by Alembic - please adjust! ### op.drop_index(op.f('ix_poll_choice_id'), table_name='poll_choice')
    op.drop_table('poll_choice')
    op.drop_index(op.f('ix_poll_question_id'), table_name='poll_question')
    op.drop_table('poll_question')# ### end Alembic commands ###
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Always check the migrations generated by Alembic to verify that everything is correct. You can find more information about what alembic can auto-generate &lt;a href="https://alembic.sqlalchemy.org/en/latest/autogenerate.html"&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Everything checks out, now run &lt;code&gt;alembic upgrade head&lt;/code&gt; to apply the migration, then head over to pgAdmin, and you should see the new tables ! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k6fbk5Iw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636750848803/G0q1QnxsB.png%3Fauto%3Dcompress%26auto%3Dcompress%2Cformat%26format%3Dwebp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6fbk5Iw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636750848803/G0q1QnxsB.png%3Fauto%3Dcompress%26auto%3Dcompress%2Cformat%26format%3Dwebp" alt="tables" width="203" height="105"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Congrats ! You're models are ready ! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Thats all for today, hope you enjoyed it! Now that we've set up our relational database, in part 3 we'll see how to communicate with in it our path operations using SQLAlchemy session. &lt;/p&gt;

&lt;p&gt;In the meantime you reach out to me on &lt;a href="https://twitter.com/JiBRocher"&gt;Twitter&lt;/a&gt;. Questions and feedback are most welcomed ! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://fastapi.tiangolo.com/tutorial/sql-databases/"&gt;FastAPI database docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.sqlalchemy.org/en/13/orm/extensions/declarative/api.html"&gt;SQLAlchemy docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://alembic.sqlalchemy.org/en/latest/"&gt;Alembic docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/compose/"&gt;docker-compose&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>backend</category>
      <category>python</category>
    </item>
    <item>
      <title>No-code tools, freelancing 101, CSS roadmap, and more

My 10 favorite Tech Twitter tweets from this week:</title>
      <author>Pasca Vlad</author>
      <pubDate>Mon, 15 Nov 2021 07:31:23 +0000</pubDate>
      <link>https://dev.to/pascavld/no-code-tools-freelancing-101-css-roadmap-and-moremy-10-favorite-tech-twitter-tweets-from-this-week-57j8</link>
      <guid>https://dev.to/pascavld/no-code-tools-freelancing-101-css-roadmap-and-moremy-10-favorite-tech-twitter-tweets-from-this-week-57j8</guid>
      <description>&lt;p&gt;&lt;em&gt;If you found value in this thread you will most likely enjoy my tweets too so make sure you follow me on &lt;a href="https://twitter.com/VladPasca5"&gt;Twitter&lt;/a&gt;  for more information about web development and how to improve as a developer. This article was first published on my &lt;a href="https://vladpasca.hashnode.dev/"&gt;Blog&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;No-code tools, freelancing 101, CSS roadmap, and more&lt;/p&gt;

&lt;p&gt;My 10 favorite Tech Twitter tweets from this week:&lt;/p&gt;

&lt;p&gt;Using no-code tools can save you a lot of time&lt;/p&gt;

&lt;p&gt;By JustinSaaS&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--RiDahi5O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1365425625616556045/NDhia9nF_normal.jpg" alt="Justin Welsh profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Justin Welsh
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @justinsaas
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      11/ Notion&lt;br&gt;&lt;br&gt;&lt;a href="https://twitter.com/NotionHQ"&gt;@NotionHQ&lt;/a&gt; is basically the master hub for my whole life. In Notion I:&lt;br&gt;&lt;br&gt;- Host my roadmap&lt;br&gt;- Manage my to-do list&lt;br&gt;- Write all of my content&lt;br&gt;- Store my process docs&lt;br&gt;- And much more...&lt;br&gt;&lt;br&gt;And I'm still learning how to use it most effectively.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      16:55 PM - 09 Nov 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1458116063074340867" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1458116063074340867" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1458116063074340867" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;The only web dev roadmap you'll ever need&lt;/p&gt;

&lt;p&gt;By heyOnuoha&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--_uDaitCt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1456940513446309892/T2wx5H40_normal.jpg" alt="⚡️ Favor ⚡️ profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        ⚡️ Favor ⚡️
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/heyonuoha"&gt;@heyonuoha&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      To successfully learn web development, you must divide and conquer web dev topics&lt;br&gt;&lt;br&gt;Frontend→ &lt;br&gt;→ Part 1: HTML &amp;amp; CSS&lt;br&gt;→ Part 2: JavaScript&lt;br&gt;→ Part 3: Tailwind&lt;br&gt;→ Part 4: React&lt;br&gt;→ Part 5: GitHub&lt;br&gt;&lt;br&gt;Backend→&lt;br&gt;→ Part 6: Node JS&lt;br&gt;→ Part 7: Express&lt;br&gt;→ Part 8: MongoDB&lt;br&gt;→ Part 9: Heroku
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      11:13 AM - 09 Nov 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1458029887453863941" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1458029887453863941" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1458029887453863941" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Freelancing 101&lt;/p&gt;

&lt;p&gt;By study_web_dev&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--RHr1l2Tu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1387758016716578821/Srn36e3M_normal.png" alt="Kyle Prinsloo profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Kyle Prinsloo
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/study_web_dev"&gt;@study_web_dev&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Get 5 clients paying you $1,000 /month.&lt;br&gt;&lt;br&gt;Or 2 clients paying you $2,500 /month.&lt;br&gt;&lt;br&gt;Offer website design + marketing services.&lt;br&gt;&lt;br&gt;Just 5 monthly clients.&lt;br&gt;&lt;br&gt;Then grow from there.&lt;br&gt;&lt;br&gt;It's not easy, but it's definitely possible and achievable within 12 months 👍
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      11:38 AM - 10 Nov 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1458398531203514371" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1458398531203514371" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1458398531203514371" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;The daily inspiration dose&lt;/p&gt;

&lt;p&gt;By csaba_kissi&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--6BzhhzNN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1454861068233228289/6sn9BYOf_normal.jpg" alt="Csaba Kissi ⚡ profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Csaba Kissi ⚡
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @csaba_kissi
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      I was 33 years old. Left my job.&lt;br&gt;&lt;br&gt;Since then I did 200+ side projects and earned multi 7 figures 💰EUR on the internet.&lt;br&gt;&lt;br&gt;All of this with: &lt;br&gt;❌ CS degree&lt;br&gt;❌ Bootcamp&lt;br&gt;❌ Internship&lt;br&gt;❌ Certificates&lt;br&gt;✅ Self-taught in Programming&lt;br&gt;✅ Self-taught in English&lt;br&gt;&lt;br&gt;Nothing is impossible! 👍🤝
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      07:15 AM - 10 Nov 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1458332527056261125" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1458332527056261125" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1458332527056261125" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;The VScode extension that can save you a ton of time&lt;/p&gt;

&lt;p&gt;By Prathkum&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8sjUm3P1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FDvJQhUXEAAyVJc.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--xSEDLE0---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1418652395119153153/dvMUbHmM_normal.jpg" alt="Pratham profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Pratham
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/prathkum"&gt;@prathkum&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Tabnine is one of my favorite VS Code extensions 🚀&lt;br&gt;&lt;br&gt;AI algorithm analyzes your code patterns and gives you personalized suggestions based on your code.&lt;br&gt;Tabnine always writes 80% code for me.&lt;br&gt;&lt;br&gt;Definitely check it out if you want to be more productive.&lt;br&gt;&lt;br&gt;🔗 &lt;a href="https://t.co/fc5TTfKuRO"&gt;Tabnine.com&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      07:55 AM - 09 Nov 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1457980198574600195" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1457980198574600195" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1457980198574600195" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Learn CSS from here&lt;/p&gt;

&lt;p&gt;By __georgemoller&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9QvwIGPC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FDrl96YWYBEFJMs.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--K0o6ch8F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1409915212157833223/OX8dfCpn_normal.jpg" alt="George Moller profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        George Moller
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @_georgemoller
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      🗺 CSS Developer Roadmap with +60 [FREE] resources to learn from.&lt;br&gt;&lt;br&gt;🧵 Thread 👇 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:22 PM - 08 Nov 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1457730300860108812" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1457730300860108812" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1457730300860108812" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Everyone is figuring it out on the go&lt;/p&gt;

&lt;p&gt;By SimonHoiberg&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s---3fyTHjb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1452287711226867719/0wszrty-_normal.jpg" alt="Simon Høiberg profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Simon Høiberg
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @simonhoiberg
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Don't worry!&lt;br&gt;&lt;br&gt;I'm a senior developer and have been a well-paid consultant for years.&lt;br&gt;&lt;br&gt;A lot of the time, I don't know what the hell I'm doing either 😅&lt;br&gt;&lt;br&gt;Don't be shy, go ahead and apply 🔥
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      12:24 PM - 10 Nov 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1458410262009159685" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1458410262009159685" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1458410262009159685" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Never stop practicing&lt;/p&gt;

&lt;p&gt;By razacodes&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--l_V2Ka6W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1455616996327010306/Wo4ba0rx_normal.jpg" alt="Raza Rython profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Raza Rython
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @razacodes
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Good programming skills come from deliberate practise.&lt;br&gt;&lt;br&gt;Whether that is at work or from side projects.&lt;br&gt;&lt;br&gt;Practise is important.&lt;br&gt;&lt;br&gt;Now go and code some Python&lt;br&gt;&lt;br&gt;&lt;a href="https://twitter.com/hashtag/Rython"&gt;#Rython&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      07:55 AM - 09 Nov 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1457980189787492356" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1457980189787492356" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1457980189787492356" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;It's always a love and hate relationship&lt;/p&gt;

&lt;p&gt;By VittoStack&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--4QS2CbIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1413887811737038851/_HImxcYU_normal.png" alt="Vitto Rivabella 🥑 profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Vitto Rivabella 🥑
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/vittostack"&gt;@vittostack&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      The language I love the most:&lt;br&gt;JavaScript&lt;br&gt;&lt;br&gt;The language I hate the most:&lt;br&gt;JavaScript
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      07:16 AM - 10 Nov 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1458332778500698114" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1458332778500698114" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1458332778500698114" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;&lt;em&gt;I hope found this useful and if you did please let me know. If you have any questions feel free to DM me on  &lt;a href="https://twitter.com/VladPasca5"&gt;Twitter&lt;/a&gt;._let me know. If you have any questions feel free to DM me on  &lt;a href="https://twitter.com/VladPasca5"&gt;Twitter&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Maps with D3 and Svelte</title>
      <author>AnupJoseph</author>
      <pubDate>Mon, 15 Nov 2021 07:30:35 +0000</pubDate>
      <link>https://dev.to/learners/maps-with-d3-and-svelte-8p3</link>
      <guid>https://dev.to/learners/maps-with-d3-and-svelte-8p3</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This blog is fourth in a series of (unofficial) course notes for the Data Visualization with React and D3 series by Curran Kelleher. Read the introductory blog post &lt;a href="https://dev.to/learners/series-intro-data-visualization-with-svelte-and-d3-4c07"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The next chart in the series is a simple map of the world. In this chart Curran actually uses a Topojson file, then converts it into Geojson and then plots it. I am not planning to do that as it seems complicated and also for some reason the &lt;a href="https://github.com/topojson/topojson"&gt;topojson&lt;/a&gt; library does not play nice with Node on my computer and I was too lazy to actually debug it 😬. So instead I are going to use a simple geojson I found on &lt;a href="https://www.d3-graph-gallery.com/graph/backgroundmap_basic.html"&gt;D3 Graph Gallery&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I am going to start from a fresh Svelte project instead of carrying on from the last. To do and install &lt;a href="https://d3js.org/"&gt;d3&lt;/a&gt; along with its:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx degit sveltejs/template world-map
&lt;span class="nb"&gt;cd &lt;/span&gt;word-map
npm &lt;span class="nb"&gt;install
&lt;/span&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;d3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And to run the app itself:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Let clean everthing in the App.svelte. The dataset for the map is available &lt;a href="https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/world.geojson"&gt;here&lt;/a&gt;. Let's use the &lt;a href="https://github.com/d3/d3-fetch/blob/v3.0.1/README.md#json"&gt;d3 json&lt;/a&gt; method to load in the data and use it.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt;  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;d3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt;  &lt;span class="nx"&gt;dataset&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/world.geojson&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;dataset&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;features&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;I am only using the features array in the geojson and this contains everything we need to draw the map. Let's start by making an SVG in the markup and adding a width and height property to it.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt;  &lt;span class="nx"&gt;width&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="mi"&gt;1200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;height&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="mi"&gt;600&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;main&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt;  &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;  &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;If you &lt;code&gt;console.log&lt;/code&gt; the dataset at this point (and well go deeper and deeper into the json tree) you'll notice that the geojson contains the boundary information using a construct called &lt;code&gt;geometry&lt;/code&gt;. The only problem with this is that, this construct is not a svg path and is instead of course a co-ordinate you can plot. To solve this problem D3 provides a powerful geographic path generator, &lt;a href="https://github.com/d3/d3-geo#geoPath"&gt;d3.geoPath&lt;/a&gt; which can take in a given GeoJSON feature or geometry to generate an SVG path. &lt;/p&gt;

&lt;p&gt;D3 also provides a lot of geographical projections as well to transform how the map looks like. I am going to split out this logic to drawing the paths themeselves into a different component called &lt;code&gt;Marks&lt;/code&gt;. So let import the new component into &lt;code&gt;App.svelte&lt;/code&gt; like so:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Marks&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Marks.svelte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And pass the dataset to the component like so:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;Marks&lt;/span&gt;  &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="na"&gt;dataset&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now of course this component does not exist, so lets go about making it real. We'll also import the projections and path generator,&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;geoPath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;geoNaturalEarth1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt;  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;d3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt;  &lt;span class="nx"&gt;dataset&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="p"&gt;[];&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt;  &lt;span class="nx"&gt;projection&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nx"&gt;geoNaturalEarth1&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt;  &lt;span class="nx"&gt;path&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nx"&gt;geoPath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;projection&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Afterwards its really easy. We just need to iterate over the dataset and pass the data to the &lt;code&gt;path&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;{#each  dataset  as data}
    &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt;  &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;{path(data)}&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
{/each}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And now we have it, a perfectly horrible world map,&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u3yxU3Io--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mi826iwp5rt0v75zkc31.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u3yxU3Io--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mi826iwp5rt0v75zkc31.png" alt="World map basic" width="880" height="501"&gt;&lt;/a&gt;&lt;br&gt;
I actually kind of like the stark, edgy nature of the map. I was going to style this, but this is actually rather nice.&lt;/p&gt;

&lt;p&gt;So of course the next part will be dedicated to showing off a cool svelte feature I just found. Let first remove all the &lt;code&gt;fill&lt;/code&gt; colour from the map and add a &lt;code&gt;stroke&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;path&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="py"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="py"&gt;stroke&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="no"&gt;darkgreen&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YPqoHYX6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/twelxc4qd1j83obllota.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YPqoHYX6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/twelxc4qd1j83obllota.png" alt="Simple styled world map" width="880" height="472"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Svelte has great support for styling. One thing I like in particular are the &lt;a href="https://svelte.dev/tutorial/transition"&gt;transition directives&lt;/a&gt;. These are tools for using motion more effectively and gracefully in your app and generally making it look smoother.&lt;br&gt;
Lets import the draw function from &lt;code&gt;svelte/transitons&lt;/code&gt; and add it to the &lt;code&gt;path&lt;/code&gt; tag.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;draw&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt;  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;svelte/transition&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt;  &lt;span class="na"&gt;transition:draw=&lt;/span&gt;&lt;span class="s"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;duration:&lt;/span&gt; &lt;span class="err"&gt;5000,&lt;/span&gt; &lt;span class="na"&gt;delay:&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt; &lt;span class="err"&gt;}}&lt;/span&gt;  &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;{path(data)}&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ikSHHd1f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z74vkgtgrjllioun844n.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ikSHHd1f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z74vkgtgrjllioun844n.gif" alt="Map draw gif " width="880" height="435"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These transition directives actually pack in a lot of flexibility. We can pass in custom easing function to control the speed of the transition and we can even pass in custom CSS and JS to control the transtitions.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;quadInOut&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt;  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;svelte/easing&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt;
    &lt;span class="na"&gt;transition:draw=&lt;/span&gt;&lt;span class="s"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;duration:&lt;/span&gt; &lt;span class="err"&gt;5000,&lt;/span&gt; &lt;span class="na"&gt;delay:&lt;/span&gt; &lt;span class="err"&gt;0,&lt;/span&gt; &lt;span class="na"&gt;easing:&lt;/span&gt; &lt;span class="na"&gt;quadInOut&lt;/span&gt; &lt;span class="err"&gt;}}&lt;/span&gt;
    &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;{path(data)}&lt;/span&gt;
&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XnCz_obj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fi3oskspth8ittcaixmn.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XnCz_obj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fi3oskspth8ittcaixmn.gif" alt="Image description" width="880" height="435"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Personally I think that's just awesome 🚀. Here's the final code.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;Well that's it for today. Hope you have a nice day!&lt;/p&gt;

</description>
      <category>svelte</category>
      <category>javascript</category>
    </item>
    <item>
      <title>HTML tags | script</title>
      <author>Carlos Espada</author>
      <pubDate>Mon, 15 Nov 2021 07:13:09 +0000</pubDate>
      <link>https://dev.to/carlosespada/html-tags-script-1cg1</link>
      <guid>https://dev.to/carlosespada/html-tags-script-1cg1</guid>
      <description>&lt;p&gt;It is used to &lt;strong&gt;embed executable code or data&lt;/strong&gt;; this is typically used to &lt;strong&gt;embed or refer to JavaScript code&lt;/strong&gt;. The &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; element can also be used with other languages, such as WebGL's GLSL shader programming language and JSON.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; element either contains scripting statements, or it points to an external script file through the &lt;code&gt;src&lt;/code&gt; attribute.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#async"&gt;
  &lt;/a&gt;
  async
&lt;/h3&gt;

&lt;p&gt;For classic scripts, if the &lt;code&gt;async&lt;/code&gt; attribute is present, then the classic script will be fetched in parallel to parsing and evaluated as soon as it is available.&lt;/p&gt;

&lt;p&gt;For module scripts, if the &lt;code&gt;async&lt;/code&gt; attribute is present then the scripts and all their dependencies will be executed in the defer queue, therefore they will get fetched in parallel to parsing and evaluated as soon as they are available.&lt;/p&gt;

&lt;p&gt;This attribute &lt;strong&gt;allows the elimination of parser-blocking JavaScript&lt;/strong&gt; where the browser would have to load and evaluate scripts before continuing to parse. &lt;code&gt;defer&lt;/code&gt; has a similar effect in this case.&lt;/p&gt;

&lt;p&gt;This is a boolean attribute: the presence of a boolean attribute on an element represents the true value, and the absence of the attribute represents the false value.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#crossorigin"&gt;
  &lt;/a&gt;
  crossorigin
&lt;/h3&gt;

&lt;p&gt;Normal &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; elements pass minimal information to the &lt;code&gt;window.onerror&lt;/code&gt; for scripts which do not pass the standard CORS checks. Use this attribute to allow error logging for sites which use a separate domain for static media.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#defer"&gt;
  &lt;/a&gt;
  defer
&lt;/h3&gt;

&lt;p&gt;This Boolean attribute is set to indicate to a browser that the script is meant to be executed after the document has been parsed, but before firing &lt;code&gt;DOMContentLoaded&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Scripts with the &lt;code&gt;defer&lt;/code&gt; attribute will prevent the &lt;code&gt;DOMContentLoaded&lt;/code&gt; event from firing until the script has loaded and finished evaluating.&lt;/p&gt;

&lt;p&gt;This attribute must not be used if the &lt;code&gt;src&lt;/code&gt; attribute is absent (i.e. for inline scripts), in this case it would have no effect.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;defer&lt;/code&gt; attribute has no effect on module scripts — they defer by default.&lt;/p&gt;

&lt;p&gt;Scripts with the &lt;code&gt;defer&lt;/code&gt; attribute will execute in the order in which they appear in the document.&lt;/p&gt;

&lt;p&gt;This attribute &lt;strong&gt;allows the elimination of parser-blocking JavaScript&lt;/strong&gt; where the browser would have to load and evaluate scripts before continuing to parse. &lt;code&gt;async&lt;/code&gt; has a similar effect in this case.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#integrity"&gt;
  &lt;/a&gt;
  integrity
&lt;/h3&gt;

&lt;p&gt;This attribute contains inline metadata that a user agent can use to verify that a fetched resource has been delivered free of unexpected manipulation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nomodule"&gt;
  &lt;/a&gt;
  nomodule
&lt;/h3&gt;

&lt;p&gt;This Boolean attribute is set to indicate that the script should not be executed in browsers that support ES2015 modules — in effect, this can be used to serve fallback scripts to older browsers that do not support modular JavaScript code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nonce"&gt;
  &lt;/a&gt;
  nonce
&lt;/h3&gt;

&lt;p&gt;A cryptographic nonce (number used once) to allow scripts in a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/script-src"&gt;script-src Content-Security-Policy&lt;/a&gt;. The server must generate a unique nonce value each time it transmits a policy. It is critical to provide a nonce that cannot be guessed as bypassing a resource's policy is otherwise trivial.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#referrerpolicy"&gt;
  &lt;/a&gt;
  referrerpolicy
&lt;/h3&gt;

&lt;p&gt;Indicates which referrer to send when fetching the script, or resources fetched by the script:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;no-referrer&lt;/code&gt;: the &lt;code&gt;Referer&lt;/code&gt; header will not be sent.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;no-referrer-when-downgrade&lt;/code&gt;: the &lt;code&gt;Referer&lt;/code&gt; header will not be sent to origins without TLS (HTTPS).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;origin&lt;/code&gt;: the sent referrer will be limited to the origin of the referring page: its scheme, host and port.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;origin-when-cross-origin&lt;/code&gt;: the referrer sent to other origins will be limited to the scheme, the host and the port. Navigations on the same origin will still include the path.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;same-origin&lt;/code&gt;: a referrer will be sent for same origin, but cross-origin requests will contain no referrer information.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;strict-origin&lt;/code&gt;: only send the origin of the document as the referrer when the protocol security level stays the same (HTTPS→HTTPS), but don't send it to a less secure destination (HTTPS→HTTP).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;strict-origin-when-cross-origin&lt;/code&gt; (default): send a full URL when performing a same-origin request, only send the origin when the protocol security level stays the same (HTTPS→HTTPS), and send no header to a less secure destination (HTTPS→HTTP).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;unsafe-url&lt;/code&gt;: the referrer will include the origin and the path (but not the fragment, password or username). &lt;strong&gt;This value is unsafe&lt;/strong&gt;, because it leaks origins and paths from TLS-protected resources to insecure origins.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An empty string value ("") is both the default value, and a fallback value if &lt;code&gt;referrerpolicy&lt;/code&gt; is not supported. If &lt;code&gt;referrerpolicy&lt;/code&gt; is not explicitly specified on the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; element, it will adopt a higher-level referrer policy, i.e. one set on the whole document or domain. If a higher-level policy is not available, the empty string is treated as being equivalent to &lt;code&gt;strict-origin-when-cross-origin&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#src"&gt;
  &lt;/a&gt;
  src
&lt;/h3&gt;

&lt;p&gt;This attribute specifies the URI of an external script; this can be used as an alternative to embedding a script directly within a document.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#type"&gt;
  &lt;/a&gt;
  type
&lt;/h3&gt;

&lt;p&gt;This attribute indicates the type of script represented. The value of this attribute will be in one of the following categories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Omitted or a JavaScript MIME type&lt;/strong&gt;: this indicates the script is JavaScript. The HTML5 specification urges authors to omit the attribute rather than provide a redundant MIME type. In earlier browsers, this identified the scripting language of the embedded or imported (via the &lt;code&gt;src&lt;/code&gt; attribute) code. JavaScript MIME types are &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types#javascript_types"&gt;listed in the specification&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;module&lt;/strong&gt;: causes the code to be treated as a JavaScript module. The processing of the script contents is not affected by the &lt;code&gt;charset&lt;/code&gt; and &lt;code&gt;defer&lt;/code&gt; attributes. Unlike classic scripts, module scripts require the use of the CORS protocol for cross-origin fetching.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Any other value&lt;/strong&gt;: the embedded content is treated as a data block which won't be processed by the browser. Developers must use a valid MIME type that is not a JavaScript MIME type to denote data blocks. The &lt;code&gt;src&lt;/code&gt; attribute will be ignored.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#notes"&gt;
  &lt;/a&gt;
  Notes
&lt;/h2&gt;

&lt;p&gt;Scripts without &lt;code&gt;async&lt;/code&gt;, &lt;code&gt;defer&lt;/code&gt; or &lt;code&gt;type="module"&lt;/code&gt; attributes, as well as inline scripts, are fetched and executed immediately, before the browser continues to parse the page.&lt;/p&gt;

&lt;p&gt;The script should be served with the &lt;code&gt;text/javascript&lt;/code&gt; MIME type, but browsers are lenient and only block them if the script is served with an image type (&lt;code&gt;image/*&lt;/code&gt;), a video type (&lt;code&gt;video/*&lt;/code&gt;), an audio (&lt;code&gt;audio/*&lt;/code&gt;) type or &lt;code&gt;text/csv&lt;/code&gt;. If the script is blocked, an &lt;code&gt;error&lt;/code&gt; is sent to the element, if not a &lt;code&gt;load&lt;/code&gt; event is sent.&lt;/p&gt;

&lt;p&gt;Browsers that support the &lt;code&gt;module&lt;/code&gt; value for the &lt;code&gt;type&lt;/code&gt; attribute ignore any script with a &lt;code&gt;nomodule&lt;/code&gt; attribute. That enables you to use module scripts while also providing nomodule-marked fallback scripts for non-supporting browsers.&lt;/p&gt;

&lt;p&gt;You can also use the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; element to embed data in HTML with server-side rendering by specifying a valid non-JavaScript MIME type in the &lt;code&gt;type&lt;/code&gt; attribute.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!-- Generated by the server --&amp;gt;
&amp;lt;script id="data" type="application/json"&amp;gt;{"userId":1234,"userName":"John Doe","memberSince":"2000-01-01T00:00:00.000Z"}&amp;lt;/script&amp;gt;

&amp;lt;!-- Static --&amp;gt;
&amp;lt;script&amp;gt;
  const userInfo = JSON.parse(document.getElementById("data").text);
  console.log("User information: %o", userInfo);
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Type: &lt;em&gt;-&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Self-closing: &lt;em&gt;No&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Semantic value: &lt;em&gt;No&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://www.w3schools.com/tags/tag_script.asp"&gt;Definition&lt;/a&gt; | &lt;a href="https://www.w3schools.com/tags/tryit.asp?filename=tryhtml_script"&gt;Example&lt;/a&gt; | &lt;a href="https://caniuse.com/mdn-html_elements_script"&gt;Support&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>tags</category>
      <category>script</category>
    </item>
    <item>
      <title>Frontend Developer Learning Path 2021 [With 50+ Free Resources] </title>
      <author>Jarvis</author>
      <pubDate>Mon, 15 Nov 2021 07:09:05 +0000</pubDate>
      <link>https://dev.to/jvscode/frontend-developer-learning-path-2021-with-50-free-resources-3ceg</link>
      <guid>https://dev.to/jvscode/frontend-developer-learning-path-2021-with-50-free-resources-3ceg</guid>
      <description>&lt;p&gt;A front-end developer is a person who develops the user interface of the website and applications. They are responsible for determining the structure and design of the web application, build features to improve user experience, make a balance between design and functionality, optimize web app for different devices, optimize pages for speed and scalability, use different markup languages for coding web pages, maintain brand consistency and write reusable codes. In simple terms, front-end development refers to the lines of code that determine the operation and structure of the user interface.&lt;/p&gt;
&lt;p&gt;However, the front-end web development is not just limited to using HTML, CSS or JS instead there are a bunch of other technologies that you need to learn if you wanna become a prominent developer this year. &lt;/p&gt;

&lt;p&gt;&lt;span&gt;Read More : &lt;/span&gt;&lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/frontend-developer-roadmap-2022/&amp;amp;ved=2ahUKEwjHuLas1vvzAhVVKysKHf11DL0QFnoECAcQAQ&amp;amp;usg=AOvVaw2vT9KZNTF37GNs6w16X2lN"&gt;&lt;span&gt;Frontend Developer Learning Path 2021 [With 50+ Free Resources]  &lt;/span&gt;&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;





</description>
    </item>
    <item>
      <title>A Short Introduction to Pipeline Operator, and Piping, in JavaScript</title>
      <author>Alex Devero</author>
      <pubDate>Mon, 15 Nov 2021 07:06:23 +0000</pubDate>
      <link>https://dev.to/alexdevero/a-short-introduction-to-pipeline-operator-and-piping-in-javascript-4n7b</link>
      <guid>https://dev.to/alexdevero/a-short-introduction-to-pipeline-operator-and-piping-in-javascript-4n7b</guid>
      <description>&lt;p&gt;Functional programming provides many useful concepts. One of these concepts is pipeline operator and piping. This tutorial will help you understand what pipeline operator and piping are, how they work and how to use them. You will also learn how to create your own pipe function in JavaScript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-brief-introduction"&gt;
  &lt;/a&gt;
  A brief introduction
&lt;/h2&gt;

&lt;p&gt;The pipeline operator is one of those features that has been discussed for a long time but never became a feature of JavaScript language. This changed and pipeline operator entered as a draft the stage 1 of &lt;a href="https://tc39.es/process-document/"&gt;TC39 process&lt;/a&gt;. In &lt;a href="https://github.com/tc39/proposal-pipeline-operator/blob/main/HISTORY.md#2021-08"&gt;2021&lt;/a&gt;, it moved from stage 1 to stage 2.&lt;/p&gt;

&lt;p&gt;This means that pipeline operator is still not a stable feature of JavaScript language and its specification can change. However, there is already a &lt;a href="https://babeljs.io/docs/en/babel-plugin-proposal-pipeline-operator"&gt;Babel plugin&lt;/a&gt; that allows us to work with this feature. That said, we don't even need the plugin or the feature to emulate what pipeline operator does.&lt;/p&gt;

&lt;p&gt;We can take existing JavaScript syntax and create our own function that will lead to similar results as the pipeline operator. But before we do that, let's take a look at the pipeline operator and piping.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#piping-made-simple"&gt;
  &lt;/a&gt;
  Piping made simple
&lt;/h2&gt;

&lt;p&gt;The idea of piping functions may sound difficult to understand, but it is not. Put simply, piping about taking some input and passing it into a function and then sending it into another function. This way, you can take some value as an input and send it through a sequence of functions to get one value as an output.&lt;/p&gt;

&lt;p&gt;One way to get this done is by using &lt;a href="https://blog.alexdevero.com/method-chaining-in-javascript/"&gt;method chaining&lt;/a&gt;. With this approach, you take a value and call some method on it. Then, instead of calling another method on the result of previous call separately, you "chain" the next method the first.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Chaining example with string:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sentence&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;  There - is some -  mess around.  &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="c1"&gt;// Modifying the string with method chaining:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cleanedSentence&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sentence&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/-/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\s&lt;/span&gt;&lt;span class="sr"&gt;+/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cleanedSentence&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'There is some mess around.'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another option is using piping, but without the pipeline operator. This solution works well with custom functions. Instead of chaining functions, you pass one function call as argument to another function call. This way, you can pass a value returned by one function to another to get the result you need.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Piping example:&lt;/span&gt;
&lt;span class="c1"&gt;// Define some functions:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;subtract&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;multiply&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;

&lt;span class="c1"&gt;// Use piping to pass value through cascade of functions:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subtract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 180&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There is one problem with this. Your code can quickly become pile of unreadable mess as you add more and more function calls. Now, let's take a look at how we can handle this with the help of pipeline operator.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-pipeline-operator"&gt;
  &lt;/a&gt;
  The pipeline operator
&lt;/h2&gt;

&lt;p&gt;In JavaScript, the pipeline operator uses a very specific syntax. It uses this "pipe" &lt;code&gt;|&amp;gt;&lt;/code&gt; symbol. When you want to use this operator you have to put it on a specific place. This place is between the value you want to pass to a function call and the function you want to call.&lt;/p&gt;

&lt;p&gt;If you want to pipe multiple functions, you put the &lt;code&gt;|&amp;gt;&lt;/code&gt; symbol between each of them. Remember that you don't put the &lt;code&gt;|&amp;gt;&lt;/code&gt; symbol after the last function. The last function is the last thing in the chain. Let's demonstrate pipeline operator by rewriting the example with piping to this new syntax.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Without pipeline operator:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;subtract&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;multiply&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subtract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="c1"&gt;// Log the value of "num":&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 180&lt;/span&gt;


&lt;span class="c1"&gt;// With pipeline operator:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;numPiped&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;subtract&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;multiply&lt;/span&gt;

&lt;span class="c1"&gt;// Log the value of "num":&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numPiped&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 180&lt;/span&gt;

&lt;span class="c1"&gt;// Notes:&lt;/span&gt;
&lt;span class="c1"&gt;// 1. Value 15 gets passed to add() fn&lt;/span&gt;
&lt;span class="c1"&gt;// 2. The value returned by add() fn is passed to subtract()&lt;/span&gt;
&lt;span class="c1"&gt;// 3. The value returned by subtract() fn is passed to multiply()&lt;/span&gt;
&lt;span class="c1"&gt;// 4. The value returned by multiply() fn is assigned to numPiped variable&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, our code is much more readable when we use the pipeline operator. It may take a moment to get used to the new syntax and some differences, such as missing parentheses in function calls.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#custom-piping-function"&gt;
  &lt;/a&gt;
  Custom piping function
&lt;/h2&gt;

&lt;p&gt;The pipeline operator looks useful. The problem that may prevent us from starting using it is that it is only in stage 2. This means it is not guaranteed it will make it to the JavaScript specification. Even if it will eventually make it, we don't know when. It already took a lot of time for the operator to make it to stage 2.&lt;/p&gt;

&lt;p&gt;Fortunately, there are two options. The first one is the &lt;a href="https://babeljs.io/docs/en/babel-plugin-proposal-pipeline-operator"&gt;Babel plugin&lt;/a&gt;. This plugin will allow as to use pipeline operator right now, before it reaches stage 3 or 4. Another option is creating our own custom piping function using current JavaScript. Let's focus on the second option, and create the custom function.&lt;/p&gt;

&lt;p&gt;This piping function will be simple. What we need is a function that accepts unknown number of arguments. This function will iterate over all arguments, which will be functions, and call each. Each function call will return a value. Our piping function will take each value and add it to the previous.&lt;/p&gt;

&lt;p&gt;For each call, our piping function will use the previously returned value as an argument for the current call. After the last function is called, our piping function will add the last value to the accumulator of previous values and return the final value. This may sound complicated, but we can get this done easily with &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce"&gt;reduce()&lt;/a&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Functions to pipe:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;subtract&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;multiply&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;

&lt;span class="c1"&gt;// Custom piping function&lt;/span&gt;
&lt;span class="cm"&gt;/**
 * Pipes functions and returns a single value
 * @param {Array} args - array composed of initial value and functions
 * @return {any}
 */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pipeFn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="c1"&gt;// Testing custom piping function:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;numPiped&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pipeFn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;subtract&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numPiped&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 180&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, the custom piping function is very simple. It is composed of two things, array of arguments and one reduce method. One thing some developers may not like is the initial value passed as the first argument. One way to fix this is by using &lt;a href="https://blog.alexdevero.com/currying-in-javascript/"&gt;currying&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We can remove the initial value from the arguments array with functions in the first call and move it to a separate function call.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Functions for piping:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;subtract&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;multiply&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;

&lt;span class="c1"&gt;// Updated piping function:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pipeFn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Test:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;numPiped&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pipeFn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;subtract&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numPiped&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 180&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#final-note"&gt;
  &lt;/a&gt;
  Final note
&lt;/h2&gt;

&lt;p&gt;It is worth repeating that at the moment of writing this article, pipeline operator is at stage 2. Although there is a Babel plugin that can transpile pipeline operator syntax into JavaScript modern browsers can understand I would use this feature in production code. A lot can change and a lot can break.&lt;/p&gt;

&lt;p&gt;For anyone who wants to use this feature I would suggest using some custom implementation, either one we used or some alternative. This will ensure your code works no matter the changes in the operator proposal. And when the operator is out, you can easily migrate your custom implementation if you want.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion-a-short-introduction-to-pipeline-operator-and-piping-in-javascript"&gt;
  &lt;/a&gt;
  Conclusion: A short introduction to pipeline operator, and piping, in JavaScript
&lt;/h2&gt;

&lt;p&gt;Pipeline operator makes it easy to use the concept of piping functions while keeping your code readable and short. This operator is not an official part of JavaScript yet. However, this doesn't mean we can use it today, either directly with the help of Babel or indirectly through custom implementation.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Microsoft BI as a Career- Full Guide For You!
</title>
      <author>Harmanjot Singh</author>
      <pubDate>Mon, 15 Nov 2021 07:03:32 +0000</pubDate>
      <link>https://dev.to/harmanj62642137/microsoft-bi-as-a-career-full-guide-for-you-11jd</link>
      <guid>https://dev.to/harmanj62642137/microsoft-bi-as-a-career-full-guide-for-you-11jd</guid>
      <description>&lt;p&gt;In today's data-driven environment, Business Intelligence (BI) appears to be the one sector that appears to offer a more appealing professional potential. If you want to work in Power BI, you'll need to know what job opportunities exist for "Power BI" developers.&lt;/p&gt;

&lt;p&gt;Power BI will be the most crucial tool for ambitious candidates because data visualization is the company's future, and tools used to visualize data will be in demand.&lt;/p&gt;

&lt;p&gt;One of the most likely reasons you want to study Power BI is to work in the field. You might be asking yourself many questions to make sure you're thinking on the right path. So, don't worry; we'll provide you with all the details on Power BI Career Opportunities, including salary and a thorough explanation of the Power BI scope and about &lt;a href="https://www.janbasktraining.com/msbi-training-certification"&gt;microsoft bi training.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's take a quick look at Microsoft Power BI before we get into the employment opportunities.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-bi"&gt;
  &lt;/a&gt;
  What is BI?
&lt;/h1&gt;

&lt;p&gt;Power BI is a set of procedures, systems, and technologies that turn raw data into valuable and instructive content that aids in the execution of profitable business strategies. By studying historical data rather than assumptions, it fosters fact-based and logical decision-making. As a result, most businesses use business intelligence (BI) tools to visualize data. As more companies adopt these tools, the demand for Power BI experts will rise.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-do-so-many-businesses-utilize-power-bi"&gt;
  &lt;/a&gt;
  Why do so many businesses utilize Power BI?
&lt;/h1&gt;

&lt;p&gt;Data is the most precious asset that enables businesses to make the best judgments possible about future business plans and expansion. In today's data-driven corporate world, analyzing trends, statistical numbers, and facts is critical before taking action. Every firm has to deal with a large amount of data regularly, making manual data analysis impractical. As a result, business owners prefer to employ the best data monitoring solutions to acquire a 360-degree perspective and plan for future growth.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#best-platform-for-bi-certification"&gt;
  &lt;/a&gt;
  Best Platform for BI Certification
&lt;/h1&gt;

&lt;p&gt;JanBask MSBI Training teaches you how to use SQL Server to learn popular MSBI tools, including SSIS, SSRS, and SSAS. As part of the course, you will acquire hands-on expertise in report generation, data integration, dashboards, cubes, data analysis, and other topics. The system will help you pass the MCSE: Business Intelligence certification exam. So, certify your talents with JanBask and take your profession to the next level!&lt;/p&gt;

&lt;p&gt;JanBask BI is currently one of the most promising fields in the IT industry. You'll need structured training with an updated curriculum designed according to industry standards to take advantage of the opportunities accessible in the BI field.&lt;/p&gt;

&lt;p&gt;In addition, rather than collecting theoretical knowledge, you should work on real-world projects to gain practical experience with the platform. Working on the MSBI platform right now, you'll require expert counsel. For more information, click on-  &lt;a href="https://www.janbasktraining.com/msbi-training-certification"&gt;https://www.janbasktraining.com/msbi-training-certification&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#salary-ranges-for-various-job-positions"&gt;
  &lt;/a&gt;
  Salary Ranges for Various Job Positions
&lt;/h1&gt;

&lt;p&gt;We've listed the average salary (per annum) for several Power BI job titles below. A Power BI professional's average compensation is Rs. 5,82,000 per year.&lt;/p&gt;

&lt;p&gt;Data Analyst – Power BI – Rs. 4,42,864&lt;br&gt;
Developer, Power BI – Rs. 4,78,587&lt;br&gt;
Software Engineer for Power BI - Rs. 4,42,373&lt;br&gt;
Analyst, Power BI – Rs. 4,94,000&lt;br&gt;
Rs. 7,85,636 for a Senior Software Engineer&lt;br&gt;
Rs. 9,28,556 for a Senior Business Intelligence (BI) Analyst&lt;br&gt;
Business Analyst (IT) – Power BI – Rs. 3,93,054&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#power-bis-roles-and-responsibilities"&gt;
  &lt;/a&gt;
  Power BI's Roles and Responsibilities
&lt;/h1&gt;

&lt;p&gt;We can see Power BI's responsibilities and responsibilities here-&lt;/p&gt;

&lt;p&gt;A Power BI developer's significant roles and responsibilities include creating a detailed summary of vast volumes of data for decision-makers to review and make quick decisions based on the information presented. Because data may not be in a usable format, it is the responsibility of the Power BI Developer to arrange and transform the data needed for reporting.&lt;/p&gt;

&lt;p&gt;Create Power BI graphics that are unique to you.&lt;br&gt;
Embedded analytics, similarly Power BI service or API automation, can integrate Power BI reports with other applications.&lt;br&gt;
Prototyping, designing, and requirement analysis are all skills that are required.&lt;br&gt;
Create data models that meet the needs of the company.&lt;br&gt;
Methodologies should be developed, and project documentation should be prepared.&lt;br&gt;
Create conventional tabular and multidimensional warehouse models.&lt;br&gt;
Create reporting models for analytical services.&lt;br&gt;
Transform raw data into visually appealing graphs and reports.&lt;br&gt;
Know what the application security layer is and how to use it.&lt;br&gt;
On the Power BI desktop, create DAX queries.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#skills-required-for-bi"&gt;
  &lt;/a&gt;
  Skills Required for BI
&lt;/h1&gt;

&lt;p&gt;Because Power BI appears and functions like an advanced version of Excel, pursuing a career in Power BI necessitates advanced MS Excel skills.&lt;br&gt;
The most significant part of Power BI visualization is data modeling; thus, you should be familiar with data modeling methodologies.&lt;br&gt;
Because DAX formulae are comparable to MS Excel formulas, you should be familiar with them.&lt;br&gt;
Power Query is used to convert data and organize it to meet the demands of users. Thus it's essential to know how to use it.&lt;br&gt;
The most crucial ability for retrieving data from SQL servers is Structured Query Language (SQL).&lt;br&gt;
Building interactive dashboards are an essential skill to acquire if you want to work for Power BI.&lt;br&gt;
A bachelor's degree in computer science or IT, or an equivalent certification.&lt;br&gt;
Be familiar with JavaScript, CSS, and SQL.&lt;br&gt;
At the minimum 3 years of experience working with any self-service technology&lt;br&gt;
Practical knowledge of data warehousing initiatives&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#power-bis-future-scope-and-demand"&gt;
  &lt;/a&gt;
  Power BI's Future Scope and Demand
&lt;/h1&gt;

&lt;p&gt;Power BI has become a favorite tool of the business world due to its excellent cloud-based data visualization capabilities. Its popularity is unlikely to wane shortly. Furthermore, it is a Microsoft product, which has already released several market-leading goods. Because Power BI is a cloud-based product, it has a lot of potential in the future as businesses migrate to cloud platforms and away from on-premise work environments.&lt;/p&gt;

&lt;p&gt;As a result, we can conclude that Power BI has a bright future, and anyone interested in pursuing a career in this industry can do so with confidence.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;As a result, the Power BI Profession encompasses all of the above. If you're interested in this subject, receive good &lt;a href="https://www.janbasktraining.com/msbi-training-certification"&gt;microsoft bi training&lt;/a&gt; so that when you join the corporate world, you'll have an easier time. There are many Power BI jobs available in the market, whether you're a newbie or a seasoned pro. Go out and seize the chances that your aptitude and skills provide.&lt;/p&gt;

</description>
      <category>microsoftbi</category>
    </item>
    <item>
      <title>Custom Initial exchange Offering Service</title>
      <author>Jessy_margarate</author>
      <pubDate>Mon, 15 Nov 2021 07:01:03 +0000</pubDate>
      <link>https://dev.to/jessymargarate/custom-initial-exchange-offering-service-3i4n</link>
      <guid>https://dev.to/jessymargarate/custom-initial-exchange-offering-service-3i4n</guid>
      <description>&lt;p&gt;Get completely customizable Initial exchange Offering Service from the top developers in the market. Initial Exchange Offering (IEO) is the newest fundraising strategy for the blockchain startups where authentic cryptocurrency exchanges govern the processes on behalf of the token issuers. In an IEO, the issuer concerned mints the tokens and sends them to the exchange and the investors can buy tokens from the exchange using Ether in order to take part in IEO.&lt;/p&gt;

</description>
      <category>blockchain</category>
    </item>
  </channel>
</rss>
