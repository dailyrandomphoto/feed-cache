<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Loopple v0.1.0 Beta - Multiple Pages Drag and Drop Dashboard Builder</title>
      <author>rarestoma</author>
      <pubDate>Mon, 26 Jul 2021 16:59:07 +0000</pubDate>
      <link>https://dev.to/rarestoma/loopple-v0-1-0-beta-multiple-pages-drag-and-drop-dashboard-builder-f68</link>
      <guid>https://dev.to/rarestoma/loopple-v0-1-0-beta-multiple-pages-drag-and-drop-dashboard-builder-f68</guid>
      <description>&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;It's been 3 months since I am working on Loopple, a Drag and Drop Dashboard Builder. Today I made a new update and the biggest feature is the option to add multiple pages to your dashboard. 🚀&lt;/p&gt;

&lt;p&gt;Now I am looking for feedback to see what do you think about the structure of the pages and if you find it easy to use. You can try this here: &lt;a href="https://www.loopple.com/"&gt;loopple&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This update also comes with the following changes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add option to remove elements using Delete/Backspace button&lt;/li&gt;
&lt;li&gt;Change sidebar grid sections design&lt;/li&gt;
&lt;li&gt;Add actions for tables: "add new row" &amp;amp; "add new column"&lt;/li&gt;
&lt;li&gt;Add Loopple logo&lt;/li&gt;
&lt;li&gt;General style changes&lt;/li&gt;
&lt;li&gt;General design &amp;amp; bugs issues fixes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Any feedback is very helpful and highly appreciated.&lt;/p&gt;

&lt;p&gt;Thank you!&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Projects for beginners || ReactJS, nodejs, Javascript,c++ project are included</title>
      <author>coders</author>
      <pubDate>Mon, 26 Jul 2021 16:54:27 +0000</pubDate>
      <link>https://dev.to/coderzway/projects-for-beginners-reactjs-nodejs-javascript-c-project-are-included-448e</link>
      <guid>https://dev.to/coderzway/projects-for-beginners-reactjs-nodejs-javascript-c-project-are-included-448e</guid>
      <description>&lt;h3&gt;1.  Nodejs Project&lt;br&gt;&lt;br&gt;
&lt;/h3&gt;
&lt;br&gt;&lt;p&gt;If you have decided to build your career in &lt;span&gt;NodeJS &lt;/span&gt;development, we have gathered a list of &lt;span&gt;nodeJS projects for beginners&lt;/span&gt; for all node enthusiasts to build highly scalable &lt;a rel="noreferrer"&gt;web applications&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;These best &lt;span&gt;nodeJS projects for beginners&lt;/span&gt; will help you gain knowledge about core node concepts, train your skill level, build a superb work portfolio, and get hired for your dream job.&lt;/p&gt;
&lt;p&gt;When you start building your first projects, it’s highly recommended for beginners in coding to create a repository for each of your projects so you will be able to learn &lt;em&gt;git&lt;/em&gt; and show your coding expertise to future employers.&lt;/p&gt;
&lt;p&gt;Further Reading: &lt;b&gt;&lt;a href="https://bit.ly/36YTCSA"&gt;Nodejs Project For Beginners&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;
&lt;h3&gt;&lt;b&gt;2. ReactJS project&lt;/b&gt;&lt;/h3&gt;
&lt;p&gt;Aiming to master front-end frameworks? Start learning &lt;span&gt;ReactJS &lt;/span&gt;diligently and look forward to a great career in programming. The best way to move forward is to start building ReactJS projects for beginners and get hands-on with ReactJS.&lt;/p&gt;
&lt;p&gt;By working on smaller real-life projects, you can master theoretical concepts and get ready for the professional development challenges. Once you have successfully deployed your &lt;em&gt;ReactJS&lt;/em&gt; apps you can present those achievements to your future employers and get your dream job.&lt;/p&gt;
&lt;p&gt;Building &lt;span&gt;ReactJS projects for beginners&lt;/span&gt; will not only allow you to strengthen up React skills but also will help you explore your creative sides as a developer. Also, it will make you familiar with &lt;a href="https://codersera.com/blog/top-productivity-react-developer-tools/"&gt;&lt;span&gt;React developer tools&lt;/span&gt; &lt;/a&gt;and react ecosystem for each project as per the need for that project.&lt;/p&gt;
&lt;p&gt;React project development is a self-directed process. You’ll have to learn on a trial and error basis. Unlike the basics of React via online learning materials, there’ll not be much to guide you on building React projects.&lt;/p&gt;
&lt;p&gt;Further Reading: &lt;b&gt;&lt;a href="https://bit.ly/2TCFknJ"&gt;ReactJS project for beginners&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;
&lt;h3&gt;3.AngularJS Project&lt;/h3&gt;
&lt;p&gt;Presenting the best angular projects for beginners list that will prepare you well with the basics and practical needs in angular development. Mentioning your experience in Angular projects can make your resume stand apart from other candidates.&lt;/p&gt;
&lt;p&gt;Further Reading: &lt;b&gt;&lt;a href="https://bit.ly/3i3AVDr"&gt;AngularJS Project For Beginners&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;
&lt;h3&gt;4. C++ Project For Beginners&lt;/h3&gt;
&lt;p&gt;C++ was built as an extension to C and gave programmers a high control over memory and system resources. If you know any other programming language, C++ will be easy to learn. Even otherwise, C++ is a friendly language, and you can learn it through some hands-on projects and practice.&lt;/p&gt;
&lt;p&gt;This article lists 10 C++ projects of different levels, which will help you appreciate the language more. You can also try many other similar projects. For example, one of our projects is Bookshop inventory management. You can try a library management system as well on the same lines. Again, similar to the railway ticket reservation system, you can try out the Bus ticket reservation system.&lt;/p&gt;
&lt;p&gt;Further Reading: &lt;b&gt;&lt;a href="https://www.codelivly.com/top-c-project-for-beginners/"&gt;C++ Project For Beginners&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;5. JavaScript&lt;/p&gt;
&lt;p&gt;Today, the key to learning JavaScript or any other programming language for that matter requires you to invest a lot of time and effort into developing a lot of projects.&lt;/p&gt;
&lt;p&gt;Let us assume that you have a limited amount of time and you want to create JavaScript projects that you haven’t worked on before. And working on new ideas and projects is necessary because if you keep doing stuff that you already understand, you won’t be making much progress against your long-term programming ambitions.&lt;/p&gt;
&lt;p&gt;At the very same time, you want to select tasks that are not too complicated. The key is to find a proposed project that’s just a little above your current ability level.&lt;/p&gt;
&lt;p&gt;Your goal, then, should be to start small and set reasonable milestones for your learning journey. The last thing you want is to launch an ambitious project and end up feeling discouraged when you’re stuck with it. And believe us when we say this, it happens a lot.&lt;/p&gt;
&lt;p&gt;It is a web developer’s job to stay in touch with all the latest trends, as well as all the essential frameworks and libraries. It is also possible that you just got done with your JavaScript course and want to put your learning into practice. Either, we understand your needs and thus have created a compelling list of some of the best &lt;span&gt;JavaScript projects for beginners&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Further Reading: &lt;b&gt;&lt;a href="https://bit.ly/3eZUpHf"&gt;Javascript Project For Beginners&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;



</description>
      <category>javascript</category>
      <category>python</category>
    </item>
    <item>
      <title>Code-fi to Chill your Mood</title>
      <author>Rahul Khinchi</author>
      <pubDate>Mon, 26 Jul 2021 16:47:15 +0000</pubDate>
      <link>https://dev.to/rk7/coding-lofi-to-chill-your-frustration-1o2j</link>
      <guid>https://dev.to/rk7/coding-lofi-to-chill-your-frustration-1o2j</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-is-lofi-music"&gt;
  &lt;/a&gt;
  What is Lo-fi Music?
&lt;/h1&gt;

&lt;p&gt;Lo-fi (aka low-fi; short for low fidelity) is a music or production quality in which elements usually regarded as imperfections of a performance are audible, sometimes as a deliberate aesthetic choice.&lt;br&gt;
 The standards of sound quality (fidelity) and music production have evolved throughout the decades, meaning that some older examples of lo-fi may not have been originally recognized as such. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lofi-and-coding"&gt;
  &lt;/a&gt;
  Lo-fi and Coding
&lt;/h2&gt;

&lt;p&gt;Lo-Fi mixes are often used as relaxing ambient music that can be left open on the side while you work on a project, or played in the background at the end of a long day to unwind. However you use it, we hope you are staying as productive and relaxed as the AMP Code-Fi girl featured in the video!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nuMk7hzp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ps9mfc7ch7woufk58yuv.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nuMk7hzp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ps9mfc7ch7woufk58yuv.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#reason-for-listening-lofi"&gt;
  &lt;/a&gt;
  Reason for listening Lo-fi?
&lt;/h1&gt;

&lt;p&gt;Coding can become your best friend but sometimes while solving questions, you get frustrated when you don't get the optimized algorithm to solve the question.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lofi-isnt-only-for-coding-but-for-every-mood"&gt;
  &lt;/a&gt;
  Lo-fi isn't only for Coding but for every mood.
&lt;/h3&gt;

&lt;p&gt;Some are:&lt;br&gt;
Hustle Lo-fi&lt;br&gt;
Coding Lo-fi&lt;br&gt;
Study or Focus Lo-fi&lt;br&gt;
Sad Mood Lo-fi&lt;br&gt;
3 am Lo-fi&lt;br&gt;
Happy Lo-fi&lt;br&gt;
Chill beat Lo-fi&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#some-best-lofi-music-for-coding"&gt;
  &lt;/a&gt;
  Some best Lo-fi Music for Coding:
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Spotify Playlist: Click &lt;a href="https://open.spotify.com/playlist/6Q3Qo3XxSj5Cu9pQJlBfzG"&gt;HERE&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;YouTube:&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=f02mOEt11OQ"&gt;Code-fi&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=bmVKaAV_7-A"&gt;3am&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=_ITiwPMUzho"&gt;Chill-Beats&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For more Genre: Try searching on YouTube for eg:&lt;br&gt;
Sad mood lo-fi, coding lo-fi, sleep lo-fi, frustrated lo-fi.&lt;/p&gt;

</description>
      <category>news</category>
      <category>codenewbie</category>
      <category>computerscience</category>
      <category>programming</category>
    </item>
    <item>
      <title>Partition and Clustering Key on Scylla DB</title>
      <author>João Victor Martins</author>
      <pubDate>Mon, 26 Jul 2021 16:33:57 +0000</pubDate>
      <link>https://dev.to/j_a_o_v_c_t_r/partition-and-clustering-key-on-scylla-db-1l1e</link>
      <guid>https://dev.to/j_a_o_v_c_t_r/partition-and-clustering-key-on-scylla-db-1l1e</guid>
      <description>&lt;p&gt;In the last 2 previous posts, we talked about &lt;em&gt;Scylla DB&lt;/em&gt;. Today I will keep talking about the database, more specifically how works &lt;em&gt;Primary Key&lt;/em&gt; on &lt;em&gt;Scylla&lt;/em&gt;. We will see that the &lt;em&gt;PK&lt;/em&gt; can be divided into two: &lt;em&gt;Partition Key&lt;/em&gt; and &lt;em&gt;Clustering Key&lt;/em&gt;. Let's get the difference between both and some differences in relation to a relational database.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#partition-key"&gt;
  &lt;/a&gt;
  Partition Key
&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Partition Key&lt;/em&gt; is responsible for data distribution across the nodes. It determines which node will store a given row. It can be one or more columns.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uc5Jp6jX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v48jx4qqwsxk6908dlge.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uc5Jp6jX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v48jx4qqwsxk6908dlge.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#clustering-key"&gt;
  &lt;/a&gt;
  Clustering Key
&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Clustering Key&lt;/em&gt; is responsible for sorting the rows within the partition. It can be zero or more columns.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-problem-of-car-table"&gt;
  &lt;/a&gt;
  The problem of Car Table
&lt;/h1&gt;

&lt;p&gt;Now that we know the difference about the &lt;em&gt;Composites Keys&lt;/em&gt;, let's remember how we modeling our &lt;em&gt;PK&lt;/em&gt; in Car table. In the &lt;em&gt;cqlsh&lt;/em&gt; after selecting the &lt;em&gt;Keyspace&lt;/em&gt;, use the command below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;DESCRIBE car
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The result will be.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE TABLE automobilies.car (
    id uuid PRIMARY KEY,
    brand text,
    color text,
    model text
) WITH bloom_filter_fp_chance = 0.01
    AND caching = {'keys': 'ALL', 'rows_per_partition': 'ALL'}
    AND comment = ''
    AND compaction = {'class': 'SizeTieredCompactionStrategy'}
    AND compression = {'sstable_compression': 'org.apache.cassandra.io.compress.LZ4Compressor'}
    AND crc_check_chance = 1.0
    AND dclocal_read_repair_chance = 0.1
    AND default_time_to_live = 0
    AND gc_grace_seconds = 864000
    AND max_index_interval = 2048
    AND memtable_flush_period_in_ms = 0
    AND min_index_interval = 128
    AND read_repair_chance = 0.0
    AND speculative_retry = '99.0PERCENTILE';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;How we can see, the unique &lt;em&gt;PK&lt;/em&gt; that we have is &lt;em&gt;id&lt;/em&gt; and could be calling of &lt;em&gt;Simple Primary Key&lt;/em&gt;. If we do a &lt;em&gt;select&lt;/em&gt; in the database, will retrieve only one car&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cqlsh:automobilies&amp;gt; select * from car;

 id                                   | brand | color | model
--------------------------------------+-------+-------+-------
 f714e8e5-b160-4341-807d-f4cd92b973a4 |    VW |   Red |  Golf
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To improve our test, let's include more cars in the table. The same &lt;em&gt;model&lt;/em&gt; of car will have the same &lt;em&gt;id&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cqlsh:automobilies&amp;gt; insert into car (id, brand, color, model) values (e0625c94-e9c2-11eb-9a03-0242ac130003, 'Ford', 'Red', 'Focus');
cqlsh:automobilies&amp;gt; insert into car (id, brand, color, model) values (fbd04f2c-511a-43c5-b588-9e29ebcb5d7a, 'VW', 'Nardo Grey', 'Passat');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now the &lt;em&gt;select&lt;/em&gt; clause result in&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; id                                   | brand | color      | model
--------------------------------------+-------+------------+--------
 fbd04f2c-511a-43c5-b588-9e29ebcb5d7a |    VW | Nardo Grey | Passat
 e0625c94-e9c2-11eb-9a03-0242ac130003 |  Ford |        Red |  Focus
 f714e8e5-b160-4341-807d-f4cd92b973a4 |    VW |        Red |   Golf
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we want to find just a Golf car, we can query by &lt;em&gt;id&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cqlsh:automobilies&amp;gt; select * from car where id = f714e8e5-b160-4341-807d-f4cd92b973a4;

 id                                   | brand | color | model
-------------------------------------------+-------+-------+-------
 f714e8e5-b160-4341-807d-f4cd92b973a4 |    VW |   Red |  Golf

(1 rows)

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But what happening if we want to query by &lt;em&gt;id&lt;/em&gt; and &lt;em&gt;color&lt;/em&gt;? Well, maybe just need to add the &lt;em&gt;and&lt;/em&gt; in the query and choose &lt;em&gt;color&lt;/em&gt;, right?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cqlsh:automobilies&amp;gt; select * from car where id = f714e8e5-b160-4341-807d-f4cd92b973a4 and color = 'Red';

InvalidRequest: Error from server: code=2200 [Invalid query] message="Cannot execute this query as it might involve data filtering and thus may have unpredictable performance. If you want to execute this query despite the performance unpredictability, use ALLOW FILTERING"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Like we can see, when add &lt;em&gt;color&lt;/em&gt;, we get an error, but why? &lt;br&gt;
To answer this question, we need to understand how &lt;em&gt;Scylla&lt;/em&gt; saves data &lt;em&gt;(I will use an example with another domain)&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g423RzAf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/as7d3eshh5i5qtg4q8ho.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g423RzAf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/as7d3eshh5i5qtg4q8ho.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the image above, we see that &lt;em&gt;Scylla&lt;/em&gt; uses a &lt;em&gt;PK&lt;/em&gt; to divide the partitions. When we use just &lt;em&gt;id&lt;/em&gt; for query, &lt;em&gt;Scylla&lt;/em&gt; knows exactly which node contains the data by hashing the ID (which is the partition key) and that is why we got results in the first query. In the second query, when we tried to filter for &lt;em&gt;color&lt;/em&gt;, wasn't possible, because we not defined &lt;em&gt;color&lt;/em&gt; as &lt;em&gt;Clustering Key&lt;/em&gt; or as &lt;em&gt;Partition Key&lt;/em&gt;. We would still know on which partition the data exists because we have the partition key, but we would have to do a linear scan of the entire data on that partition to find the specific row we are looking for &lt;em&gt;(using ALLOW FILTERING)&lt;/em&gt;, but performing this query would be inefficient and possibly very slow. To use &lt;em&gt;ALLOW FILTERING&lt;/em&gt; is like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cqlsh:automobilies&amp;gt; select * from car where id = f714e8e5-b160-4341-807d-f4cd92b973a4 and color = 'Red' ALLOW FILTERING;

 id                                   | brand | color | model
-------------------------------------------+-------+-------+-------
 f714e8e5-b160-4341-807d-f4cd92b973a4 |    VW |   Red |  Golf

(1 rows)


cqlsh:automobilies&amp;gt; select * from car where id = f714e8e5-b160-4341-807d-f4cd92b973a4 and color = 'Green' ALLOW FILTERING;

--------MORE---
(0 rows)

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;How we saw, this it's not good, so let's improve our data modeling. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#remodeling-car-table"&gt;
  &lt;/a&gt;
  Remodeling Car Table
&lt;/h1&gt;

&lt;p&gt;We should know for which attributes we will want to query to define our keys. How we want a query for &lt;em&gt;color&lt;/em&gt; and &lt;em&gt;id&lt;/em&gt;, both will be our &lt;em&gt;Pk&lt;/em&gt;, being &lt;em&gt;id&lt;/em&gt; a &lt;em&gt;Partition Key&lt;/em&gt; and &lt;em&gt;color&lt;/em&gt; a &lt;em&gt;Clustering Key&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cqlsh:automobilies&amp;gt; CREATE TABLE car (id uuid, brand text, color text, model text, PRIMARY KEY (id, color));

cqlsh:automobilies&amp;gt; DESCRIBE car;

CREATE TABLE automobilies.car (
    id uuid,
    color text,
    brand text,
    model text,
    PRIMARY KEY (id, color)
) WITH CLUSTERING ORDER BY (color ASC)
    AND bloom_filter_fp_chance = 0.01
    AND caching = {'keys': 'ALL', 'rows_per_partition': 'ALL'}
    AND comment = ''
    AND compaction = {'class': 'SizeTieredCompactionStrategy'}
    AND compression = {'sstable_compression': 'org.apache.cassandra.io.compress.LZ4Compressor'}
    AND crc_check_chance = 1.0
    AND dclocal_read_repair_chance = 0.1
    AND default_time_to_live = 0
    AND gc_grace_seconds = 864000
    AND max_index_interval = 2048
    AND memtable_flush_period_in_ms = 0
    AND min_index_interval = 128
    AND read_repair_chance = 0.0
    AND speculative_retry = '99.0PERCENTILE';

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have a &lt;em&gt;Clustering Key&lt;/em&gt; we can &lt;em&gt;insert&lt;/em&gt; some cars with the same &lt;em&gt;id&lt;/em&gt;, but different colors and &lt;em&gt;Scylla&lt;/em&gt; will sort for us.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cqlsh:automobilies&amp;gt; insert into car (id, brand, color, model) values (f714e8e5-b160-4341-807d-f4cd92b973a4, 'VW', 'Red', 'Golf');
cqlsh:automobilies&amp;gt; insert into car (id, brand, color, model) values (e0625c94-e9c2-11eb-9a03-0242ac130003, 'Ford', 'Red', 'Focus');
cqlsh:automobilies&amp;gt; insert into car (id, brand, color, model) values (fbd04f2c-511a-43c5-b588-9e29ebcb5d7a, 'VW', 'Red', 'Passat');
cqlsh:automobilies&amp;gt; insert into car (id, brand, color, model) values (fbd04f2c-511a-43c5-b588-9e29ebcb5d7a, 'VW', 'Green', 'Passat');
cqlsh:automobilies&amp;gt; insert into car (id, brand, color, model) values (f714e8e5-b160-4341-807d-f4cd92b973a4, 'VW', 'Green', 'Golf');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our partition will stay like this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8jafHfsR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/03hs5yfh3jox5mjic2fg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8jafHfsR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/03hs5yfh3jox5mjic2fg.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thus we have the partitions divided for &lt;em&gt;id&lt;/em&gt; and rows of cars sorted by color&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cqlsh:automobilies&amp;gt; select * from car;

 id                                   | color | brand | model
-------------------------------------------+-------+-------+--------
 fbd04f2c-511a-43c5-b588-9e29ebcb5d7a | Green |    VW | Passat
 fbd04f2c-511a-43c5-b588-9e29ebcb5d7a |   Red |    VW | Passat
 e0625c94-e9c2-11eb-9a03-0242ac130003 |   Red |  Ford |  Focus
 f714e8e5-b160-4341-807d-f4cd92b973a4 | Green |    VW |   Golf
 f714e8e5-b160-4341-807d-f4cd92b973a4 |   Red |    VW |   Golf
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now we can query by &lt;em&gt;id&lt;/em&gt; and &lt;em&gt;color&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cqlsh:automobilies&amp;gt; select * from car where id = fbd04f2c-511a-43c5-b588-9e29ebcb5d7a and color = 'Red';

 id                                   | color | brand | model
-------------------------------------------+-------+-------+--------
 fbd04f2c-511a-43c5-b588-9e29ebcb5d7a |   Red |    VW | Passat

(1 rows)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;In general, we saw how we define our &lt;em&gt;PK&lt;/em&gt; in &lt;em&gt;Scylla&lt;/em&gt;, can being &lt;em&gt;Partition Key&lt;/em&gt; and &lt;em&gt;Clustering Key&lt;/em&gt;. We need first think about our queries and after to model our tables. There are many others rules for work with these &lt;em&gt;PK's&lt;/em&gt;, but in a unique post is not possible to cover all subject matter. I recommend that you do the courses of &lt;a href="https://university.scylladb.com/"&gt;https://university.scylladb.com/&lt;/a&gt;. Well, this is what I wanted to introduce in this post, I really hope that you like it. Doubts, critics, and suggestions, I will be a disposition.  &lt;/p&gt;

</description>
      <category>database</category>
      <category>scylladb</category>
    </item>
    <item>
      <title>Migrating from promise chains to async-await and escaping the try catch hell</title>
      <author>AvishkarDalvi</author>
      <pubDate>Mon, 26 Jul 2021 16:22:55 +0000</pubDate>
      <link>https://dev.to/avishkardalvi/migrating-from-promise-chains-to-async-await-and-escaping-the-try-catch-hell-191l</link>
      <guid>https://dev.to/avishkardalvi/migrating-from-promise-chains-to-async-await-and-escaping-the-try-catch-hell-191l</guid>
      <description>&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;async-await is a life saver when it comes to avoiding callback hell or the pyramid of doom.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;hell&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
&lt;span class="nx"&gt;step1&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;step2&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;step3&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="c1"&gt;// some code ...&lt;/span&gt;
         &lt;span class="p"&gt;})&lt;/span&gt;
       &lt;span class="p"&gt;})&lt;/span&gt;
     &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code can be written in a clean line-by-line format using async-await.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;heaven&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;step1&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;step2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;step3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is great but when it comes to error handling this simplicity again goes for a toss because you end up with a try-catch tower of terror.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;towerOfTerror&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;step1&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
 &lt;span class="nx"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;step2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
 &lt;span class="nx"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;step3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
 &lt;span class="nx"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All your one-liners have now expanded to at least 5 lines of code.&lt;br&gt;
One easy way out would be to append the catch method to the end of each promise.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;step1&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But that can still get repetitive.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getBetter&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;step1&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;step2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;step3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another option is to create a function that implements one try-catch to replace all the others. It will first resolve the promise and then return an array that has the first element as the data and the second element as an error. But if there is an error then the data is null and the error is defined.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;awesome&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
 &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can call this function in your code you can de-structure it to get a clean one-liner error handling.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;awesome&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;error2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;awesome&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;//or use the if statement if you want to handle the error differently&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
   &lt;span class="c1"&gt;//do something&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>How to Hosting Project Into Firebase</title>
      <author>Mochamad Rizky</author>
      <pubDate>Mon, 26 Jul 2021 16:11:25 +0000</pubDate>
      <link>https://dev.to/mochamadrizky/how-to-hosting-project-into-firebase-2cd1</link>
      <guid>https://dev.to/mochamadrizky/how-to-hosting-project-into-firebase-2cd1</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-is-firebase-"&gt;
  &lt;/a&gt;
  What is Firebase ?
&lt;/h1&gt;

&lt;p&gt;Firebase is a service from Google that provides some convenience for developers in developing something in their application. By using firebase, we or developers can focus more on application development.&lt;/p&gt;

&lt;p&gt;In terms of service. in the past, Firebase provided its services on a trial, but at this time Firebase provides its services for free. But for free, it has its limitations in terms of features.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#hosting-steps-on-firebase"&gt;
  &lt;/a&gt;
  Hosting Steps on Firebase
&lt;/h1&gt;

&lt;p&gt;For example, I am here create a folder called 'hostingFirebase' and in it, there is &lt;strong&gt;index.html&lt;/strong&gt; to display a message that hosting has been successful&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cw4SAlq3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/Srs5Xp8/Screen-Shot-2021-07-26-at-21-12-37.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cw4SAlq3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/Srs5Xp8/Screen-Shot-2021-07-26-at-21-12-37.png" alt="hai"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-install-npm"&gt;
  &lt;/a&gt;
  1. Install NPM
&lt;/h2&gt;

&lt;p&gt;Install npm on your computer to make it easier to install the firebase-tools package. Firebase-tools, also known as Firebase CLI. is a tool to test, manage, and deploy our projects in the command line. to install npm you can visit the page &lt;a href="https://nodejs.org/en/download/"&gt;https://nodejs.org/en/download/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After you have installed npm you can use &lt;code&gt;npm --version&lt;/code&gt; to check the version of npm and whether it was successfully installed&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2nZU_QB9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/T8GBzwc/Screen-Shot-2021-07-26-at-21-26-45.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2nZU_QB9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/T8GBzwc/Screen-Shot-2021-07-26-at-21-26-45.png" alt="check version npm"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-install-firebasetools"&gt;
  &lt;/a&gt;
  2. Install Firebase-tools
&lt;/h2&gt;

&lt;p&gt;Now we install firebase-tools using npm. Here we install globally so that later it can be used without us installing every project that will be hosted.&lt;/p&gt;

&lt;p&gt;-g is the command to install globally&lt;br&gt;
type this command in terminal&lt;br&gt;
&lt;code&gt;npm install -g firebase-tools&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After you install firebase tools you can see the version of the global package you installed. You can use this command&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iTXVmWS3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/8KNrm7m/Screen-Shot-2021-07-26-at-21-36-40.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iTXVmWS3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/8KNrm7m/Screen-Shot-2021-07-26-at-21-36-40.png" alt="check global packages"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-login-to-the-firebase-web-and-create-a-hosting-project"&gt;
  &lt;/a&gt;
  3. Login to the Firebase Web and Create a Hosting Project
&lt;/h2&gt;

&lt;p&gt;You can visit the firebase website at the following this link &lt;a href="https://firebase.google.com/"&gt;firebase&lt;/a&gt;. after you login, then you can see the button in the right corner next to your account profile, you can click the 'console' button&lt;/p&gt;

&lt;p&gt;After that, you will be presented with a screen like the following:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XkCk2Agd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/k8kz1SM/Screen-Shot-2021-07-26-at-21-49-56.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XkCk2Agd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/k8kz1SM/Screen-Shot-2021-07-26-at-21-49-56.png" alt="homepage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To start creating a project you can click the &lt;strong&gt;create project&lt;/strong&gt; button, and later it will be redirected to a page like this and you can fill in the project name as you like. But what you need to pay attention to is that the project name will usually be your domain name in Firebase. Click i accept the aggrement and continue.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NgKCM1zh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/6chTJm7/Screen-Shot-2021-07-26-at-21-50-53.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NgKCM1zh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/6chTJm7/Screen-Shot-2021-07-26-at-21-50-53.png" alt="projectname"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then the second stage you can turn on Google analytics for needs such as cloud messaging, remote config and others.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u1tXZ0Z8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/3WpS1dH/Screen-Shot-2021-07-26-at-21-51-09.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u1tXZ0Z8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/3WpS1dH/Screen-Shot-2021-07-26-at-21-51-09.png" alt="enable analytic"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At the final stage you specify the location of the analytics then tick the checkbox in both and create project. and later you will be redirected to the dashboard of your project.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O2QBmpQm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/FhH91wb/Screen-Shot-2021-07-26-at-21-51-25.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O2QBmpQm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/FhH91wb/Screen-Shot-2021-07-26-at-21-51-25.png" alt="location analityc"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Project Dashboard&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1x0q_Bbl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/7zZR4sL/Screen-Shot-2021-07-26-at-21-52-18.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1x0q_Bbl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/7zZR4sL/Screen-Shot-2021-07-26-at-21-52-18.png" alt="project Dashboard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-login-firebase-account-in-terminal"&gt;
  &lt;/a&gt;
  4. Login Firebase Account in Terminal
&lt;/h2&gt;

&lt;p&gt;After you have successfully created the project, you must log in to the Firebase CLI to authenticate your account so that it is connected. use this command inside terminal to login &lt;code&gt;firebase login&lt;/code&gt;. After typing this, you will be run into the browser to login to the firebase account that will be used. Make sure you select the same firebase account as the firebase account in the previous project creation&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pDD3atLc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/f1TkLXZ/Screen-Shot-2021-07-26-at-21-53-49.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pDD3atLc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/f1TkLXZ/Screen-Shot-2021-07-26-at-21-53-49.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;allow this section&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1CqZcBSv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/TTwWwd3/Screen-Shot-2021-07-26-at-21-54-31.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1CqZcBSv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/TTwWwd3/Screen-Shot-2021-07-26-at-21-54-31.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;after you follow the next step, and then you will get a page that you have successfully logged in to the Firebase CLI.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8vT_PEhq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/ZdbL5KJ/Screen-Shot-2021-07-26-at-21-54-43.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8vT_PEhq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/ZdbL5KJ/Screen-Shot-2021-07-26-at-21-54-43.png" alt=""&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GllFpQTz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/YfJy0T6/Screen-Shot-2021-07-26-at-21-54-59.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GllFpQTz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/YfJy0T6/Screen-Shot-2021-07-26-at-21-54-59.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-firebase-project-initialization"&gt;
  &lt;/a&gt;
  5. Firebase Project Initialization
&lt;/h2&gt;

&lt;p&gt;After you login to the firebase CLI. Now we will initialize our project with the command in terminal &lt;code&gt;firebase init hosting&lt;/code&gt;. After pressing the enter key, several questions will appear, you can answer like this.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W0ez3Kj1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/F8kfChd/Screen-Shot-2021-07-26-at-21-59-02.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W0ez3Kj1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/F8kfChd/Screen-Shot-2021-07-26-at-21-59-02.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Please select an option :&lt;/code&gt; &lt;br&gt;
This option is used to select the option whether you will use a previously createrd porject or create a new project. Here we have previously created the project, so we select 'use an existing project'&lt;/p&gt;

&lt;p&gt;&lt;code&gt;select a default Firebase project for this directory :&lt;/code&gt; &lt;br&gt;
This option is used to select the default firebase directory&lt;/p&gt;

&lt;p&gt;&lt;code&gt;what do you want to use as your public directory :&lt;/code&gt;&lt;br&gt;
This option is used to determine the folder at the time of hosting later, by default is a folder named public&lt;/p&gt;

&lt;p&gt;&lt;code&gt;quoted configure as a single-page app (...) ?&lt;/code&gt;&lt;br&gt;
This option is used to ask if you want to configure a single app, if you don't use it, you can type no.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;quoted set up automatic builds and deploys with Github ?&lt;/code&gt;&lt;br&gt;
This option is use to ask if you want to automate and deploy it to github, if you don't want it, you can type no&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-move-files-into-public-folder"&gt;
  &lt;/a&gt;
  6. Move Files Into Public Folder
&lt;/h2&gt;

&lt;p&gt;Move the file to be hosted into the public folder, by default you will find 404.html and index.html, you can rewrite the file in the public folder.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zokAym2_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/Z2B4zn5/Screen-Shot-2021-07-26-at-21-59-33.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zokAym2_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/Z2B4zn5/Screen-Shot-2021-07-26-at-21-59-33.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-deploy-project"&gt;
  &lt;/a&gt;
  7. Deploy Project
&lt;/h2&gt;

&lt;p&gt;The final stage we will send our files to the firebase hosting, we can use this command in the terminal to send our files to the firebase hosting &lt;code&gt;firebase deploy&lt;/code&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--anpY4Kys--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/4mK04Cp/Screen-Shot-2021-07-26-at-21-59-55.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--anpY4Kys--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/4mK04Cp/Screen-Shot-2021-07-26-at-21-59-55.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And it can be seen after the deploy process is successful, then you can see the hosting url. The hosting url is a url for our website, so we can visit the link by typing it in the search bar or clicking on the link.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--93LdbIX4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/ccKXCyG/Screen-Shot-2021-07-26-at-22-00-14.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--93LdbIX4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/ccKXCyG/Screen-Shot-2021-07-26-at-22-00-14.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclution"&gt;
  &lt;/a&gt;
  Conclution
&lt;/h1&gt;

&lt;p&gt;Firebase is a service from Google which one of them can use as file hosting. Using firebase is free, so we can try it with some of the features offered by firebase itself. Hosting on Firebase is easy.&lt;/p&gt;

</description>
      <category>firebase</category>
      <category>hosting</category>
      <category>html</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Yarn 3.0 🚀🤖 Performances, ESBuild, Better Patches, ...</title>
      <author>Maël Nison</author>
      <pubDate>Mon, 26 Jul 2021 16:06:24 +0000</pubDate>
      <link>https://dev.to/arcanis/yarn-3-0-performances-esbuild-better-patches-e07</link>
      <guid>https://dev.to/arcanis/yarn-3-0-performances-esbuild-better-patches-e07</guid>
      <description>&lt;p&gt;Hello! Long time no see! Back in December, we decided to start working on our next major release, the &lt;strong&gt;3.0&lt;/strong&gt;. It took a bit of time to do everything we intended to do, but here we are! So let's talk a bit about what it changes, and what it brings. Note that these are only the highlights, the &lt;a href="https://github.com/yarnpkg/berry/blob/master/CHANGELOG.md"&gt;full changelog&lt;/a&gt; is much more comprehensive.&lt;/p&gt;

&lt;p&gt;And if you just love to read our log posts, here are the past entries 👇&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/arcanis/yarn-2-4-log-filters-audits-better-warnings-49io"&gt;Yarn 2.4 🎄🎁 Log Filters, Audits, Better Warnings, ...&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/arcanis/yarn-2-3-info-command-detailed-options-nohoist-409h"&gt;Yarn 2.3 🍦✨ Info Command, Detailed Options, Nohoist, ...&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/arcanis/yarn-2-2-dedupe-faster-lighter-ha5"&gt;Yarn 2.2 🚅🌟 Dedupe, Faster, Lighter, ...&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/arcanis/yarn-2-1-git-workspaces-focused-installs-loose-mode-live-playground-4kfc"&gt;Yarn 2.1 🐱‍🏍 Git Workspaces, Focused Installs, Loose Mode, ...&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#governance"&gt;
  &lt;/a&gt;
  Governance
&lt;/h2&gt;

&lt;p&gt;Back when the project was started in 2017, we didn't took the time to establish a formal governance document. This is now addressed, and our team composition can be found &lt;a href="https://github.com/yarnpkg/berry/blob/master/GOVERNANCE.md"&gt;here&lt;/a&gt;. It doesn't change anything in practice (this is how we worked for more than two years now), but we hope it may give you a better understanding as to how we work and reach consensus.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#opencollective"&gt;
  &lt;/a&gt;
  OpenCollective
&lt;/h2&gt;

&lt;p&gt;From 2017 to 2019 Yarn was mostly maintained by Facebook engineers. While it worked relatively well, the Yarn 1 -&amp;gt; 2 release also proved to be the right time to expand our active team to other horizons, and nowadays no two of our active contributors work at the same company - and none at Facebook.&lt;/p&gt;

&lt;p&gt;Consequently, we've decided to setup an &lt;a href="https://opencollective.com/yarnpkg"&gt;OpenCollective&lt;/a&gt; (or &lt;a href="https://github.com/sponsors/yarnpkg"&gt;GitHub Sponsors&lt;/a&gt;) to give our supporters a way to both express their thanks to our team, and give us resources we can then inject back into the project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#breaking-changes"&gt;
  &lt;/a&gt;
  Breaking Changes
&lt;/h2&gt;

&lt;p&gt;While the migration from Yarn 1 to Yarn 2 brought some discomfort, the migration to Yarn 3 should prove easier - regardless of the version you come from. The user-facing breaking changes we made this season are mostly little details that may only affect you in very specific cases:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Node 10 isn't supported anymore&lt;/li&gt;
&lt;li&gt;Plug'n'Play hooks are now called &lt;code&gt;.pnp.cjs&lt;/code&gt; (vs &lt;code&gt;.pnp.js&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Virtual folders are now called &lt;code&gt;__virtual__&lt;/code&gt; (vs &lt;code&gt;$$virtual&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;The &lt;a href="https://yarnpkg.com/getting-started/editor-sdks"&gt;editor SDKs&lt;/a&gt; have been moved to &lt;code&gt;@yarnpkg/sdks&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Etc; full list &lt;a href="https://github.com/yarnpkg/berry/blob/master/CHANGELOG.md"&gt;here&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Even for Yarn 1 users, migrating from 1 to 3 should be easier: we made it so that Yarn will detect when this situation arises to then automatically enable the &lt;code&gt;node-modules&lt;/code&gt; linker. That alone should address most of the problems you may have been hitting when attempting the upgrade - and for everything else, make sure to take a look at our &lt;a href="https://yarnpkg.com/getting-started/migration#step-by-step"&gt;Migration Guide&lt;/a&gt; which got significantly improved over the past year.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#support-for-the-raw-exports-endraw-field"&gt;
  &lt;/a&gt;
  Support for the &lt;code&gt;exports&lt;/code&gt; field
&lt;/h3&gt;

&lt;p&gt;When using Yarn 3 w/ PnP, the &lt;a href="https://nodejs.org/api/packages.html#packages_exports"&gt;&lt;code&gt;exports&lt;/code&gt;&lt;/a&gt; field will be properly resolved &lt;em&gt;regardless of your Node version&lt;/em&gt;. If you're not familiar with this field, you can see it as a way to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Replace the &lt;code&gt;main&lt;/code&gt; field&lt;/li&gt;
&lt;li&gt;Soft-prevent accessing arbitrary files in the package&lt;/li&gt;
&lt;li&gt;Conditionally remap files depending on the context (bundlers, ...)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#performances"&gt;
  &lt;/a&gt;
  Performances
&lt;/h2&gt;

&lt;p&gt;Various tweaks have been made to address some of the largest resource consumptions in Yarn. Installs have been improved (turning us faster than pnpm in some scenarios, which is quite a feat!), but not only: script execution tends to have a natural overhead, but bugs in 2.4 and prior caused this overhead to grow relative to the size of the project itself.  This is no longer the case, and the overhead should now be constant.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#new-raw-nodemodules-endraw-linkers"&gt;
  &lt;/a&gt;
  New &lt;code&gt;node_modules&lt;/code&gt; linkers
&lt;/h2&gt;

&lt;p&gt;As you may know, Yarn is built around a few interfaces. One of them is called a "linker", and tells Yarn how to install packages on disk. It's how we can support both PnP and node_modules installs without changing much code.&lt;/p&gt;

&lt;p&gt;One advantage of this architecture is how it allows us to efficiently iterate on alternative install strategies. For this release, &lt;a href="https://github.com/larixer"&gt;larixer&lt;/a&gt; implemented a new experimental &lt;code&gt;nmMode&lt;/code&gt; setting that can be used to instruct the linker to use a specific copy scheme:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;hardlinks-local&lt;/code&gt; will use hardlinks when the same package is found multiple times within the same project (but only if they have exactly the same version at the moment).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;hardlinks-global&lt;/code&gt; will use hardlinks on identical files (even across different versions!), but will also make them point to a global content-addressable directory. This is similar to what pnpm does. Note that if the cache is corrupted (for example because you manually edited it), Yarn will automatically repair it on subsequent installs.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I myself have been playing with a pnpm-style linker. It hasn't shipped yet since I'm cautious about adding complexity that could end up unmaintained, but given how small it is there's a decent chance we could add it in a later release as an experimental install mode.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#improved-shell"&gt;
  &lt;/a&gt;
  Improved Shell
&lt;/h2&gt;

&lt;p&gt;As you may know, given that system shells are rarely portable across Windows and Posix, Yarn no longer uses them to run your &lt;code&gt;scripts&lt;/code&gt; entries. Instead, we use our very own shell interpreter.&lt;/p&gt;

&lt;p&gt;We're happy to report that this shell just got smarter, and now provides two additional syntaxes that you can reliably use on both Windows and Posix:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;build-js &amp;amp; build-css &amp;amp;    # Background jobs
ls 2&amp;gt;/dev/null            # File descriptor redirections
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Additionally, background jobs have their output color-coded, so you can clearly identify their output, even interlaced.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#esbuild-support"&gt;
  &lt;/a&gt;
  ESBuild support
&lt;/h2&gt;

&lt;p&gt;We now use ESBuild to generate the Yarn bundles and as such worked to ensure good compatibility with Plug'n'Play installs. The result is the new &lt;a href="https://github.com/yarnpkg/berry/tree/master/packages/esbuild-plugin-pnp"&gt;&lt;code&gt;@yarnpkg/esbuild-plugin-pnp&lt;/code&gt;&lt;/a&gt; package which lets you transparently build your code using the default Yarn installation mode. It's still relatively young, so feel free to drop us an issue if you notice something strange!&lt;/p&gt;

&lt;p&gt;While it won't change much for most end-users, the move to ESBuild also provided decent build speed improvements (around 6x faster), making it less frustrating to &lt;a href="https://yarnpkg.com/cli/set/version/from/sources"&gt;build Yarn from sources&lt;/a&gt; ✨&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#new-plugin-apis"&gt;
  &lt;/a&gt;
  New plugin APIs
&lt;/h2&gt;

&lt;p&gt;Yarn supports writing plugins that can inject themselves into various places and leverage some of the builtin modules provided by the core. While we didn't get the chance to make all the improvements we hoped, we've still been able to upgrade the command line framework to &lt;a href="https://mael.dev/clipanion/"&gt;Clipanion 3&lt;/a&gt;, which lets you write intuitive type-checked commands with a minimal syntactic overhead.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;According to DEV.to, those change notes take about 5 minutes to read - by contrast, the &lt;a href="https://dev.to/arcanis/introducing-yarn-2-4eh1"&gt;2.0 release post&lt;/a&gt; was a whopping 15 minutes! Of course, this time around we didn't need to fully rewrite Yarn, hence a lower amount of "critical information" we need you to be aware of 😉 We expect that to be the norm from now on: majors won't have a lot of super impactful changes, mostly just some architecture cleaning and modernization, as new features will tend to land in minors.&lt;/p&gt;

&lt;p&gt;As for our team, we're very happy of the work we've been doing! Working on the codebase still feels like a treat, and features are often constrained to a few identifiable files - proving that our initial redesign bet was right. Our stats suggest that the result are visible to our users as well, and while I remain cautious about popularity metrics it's certainly nice to see.&lt;/p&gt;

&lt;p&gt;Finally, remember that Yarn now has an &lt;a href="https://opencollective.com/yarnpkg"&gt;OpenCollective&lt;/a&gt; / &lt;a href="https://github.com/sponsors/yarnpkg"&gt;GitHub Sponsors&lt;/a&gt;! If your company benefits from our work, or would like to see particular fixes land, sponsoring the project is a good way to engage with us 🙂&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-to-come"&gt;
  &lt;/a&gt;
  What's to come?
&lt;/h3&gt;

&lt;p&gt;A few features initially slated for 3.0 have been pushed back to the next minor so that we have more time to properly incubate them. Some of the things we have in motion:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/nodejs/corepack"&gt;Corepack&lt;/a&gt; integration&lt;/li&gt;
&lt;li&gt;ESM support under PnP mode&lt;/li&gt;
&lt;li&gt;Builtin CLI completion&lt;/li&gt;
&lt;li&gt;Changelog generation&lt;/li&gt;
&lt;li&gt;Improved performances&lt;/li&gt;
&lt;li&gt;pnpm-style linker&lt;/li&gt;
&lt;li&gt;And more...!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course that's only on the top of my head, so it's possible our objectives shift during the next weeks depending on our own priorities - and of course depending on whether you help us or not 😛&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>npm</category>
      <category>node</category>
      <category>showdev</category>
    </item>
    <item>
      <title>The Hitchhiker's Guide to Laravel Vapor</title>
      <author>Vedran Cindrić</author>
      <pubDate>Mon, 26 Jul 2021 15:34:21 +0000</pubDate>
      <link>https://dev.to/cindreta/the-hitchhiker-s-guide-to-laravel-vapor-elh</link>
      <guid>https://dev.to/cindreta/the-hitchhiker-s-guide-to-laravel-vapor-elh</guid>
      <description>&lt;p&gt;Before we dive deeper into Laravel Vapor allow me to set the stage for you. I've been working in the PHP ecosystem since I was 15 years old. Given that I'm 33 now it means &lt;strong&gt;I have a solid 18 years of PHP/MYSQL development behind me&lt;/strong&gt;. I love PHP. From the moment I created my own makeshift CMS I fell in love with it. It felt like magic to me.&lt;/p&gt;

&lt;p&gt;As time moved on I learned HTML/CSS/JS, Linux server management, AWS, fancy new tools, overly complicated and "modern" ways of developing things... I've also lived through many many frameworks and boilerplates that make your job as a developer easier. The only ones that caught my eye were Bootstrap and Laravel. I discovered Bootstrap on the brink of the responsive design revolution and loved it ever since because it wasn't trying to do much. You get the basics but you can still do whatever you want without much hassle. Laravel felt the same to me. I watched people use Laravel for at least a year before developing with it in version 5. What attracted me the most were migrations. It felt revolutionary that I could write the entire SQL schema in PHP and be able to track table changes in GIT. The second thing that I was obsessed with were Queues. All in all probably the best career choice I could have made was learning Laravel. It's just a joy to work with. Understandable syntax. Great features. Customizable. Hats off to &lt;a href="https://twitter.com/taylorotwell"&gt;Taylor&lt;/a&gt; 🙌!&lt;/p&gt;

&lt;p&gt;As my love for Laravel grew I got the chance to battle test Laravel on many real life projects. Platforms that handle 10 TB of image data, a couple of million API requests per day, a database of a few GB in size with millions of records...In light of that I've decided to build our entire platform, Treblle, on top of Laravel. Everything from the website, API to complex processing flows that actually handle all incoming logged requests. I started with a split between Lumen and Laravel but quickly decided to make it all run off one single code base. A beautiful layered monolith.&lt;/p&gt;

&lt;p&gt;The only thing that always worried me about PHP was scaling it. Not because it was impossible but rather complicated and time consuming. Everything from deploying code, configuring load balances, connecting to database servers, VPCs, scaling rules...I always found that part boring and overwhelming. As the rest of the world moved into severless with AWS Lambda we (PHP developers) were stuck with defining thresholds to launch EC2 instances using load balancers. Not a pretty process if you ever tried it. So naturally when Laravel Vapor came out I was stoked. Just like with everything else I watched it from a distance, read articles about it, watched videos and then I decided to move Treblle to Vapor.&lt;/p&gt;

&lt;p&gt;Here are a couple of things that I wish I knew before starting my Laravel Vapor journey.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prepare-to-lose-some-control"&gt;
  &lt;/a&gt;
  Prepare to lose some control
&lt;/h3&gt;

&lt;p&gt;As an "old school guy" being able to FTP or SSH into a server and quickly debug or fix a problem was the part that bothered me most. This has nothing to do with Vapor of course but rather the notion of running on Serverless. When an error happens it's not as easy to debug it and it's not as easy to fix it. Be prepared for that. Yes there are Cloudwatch logs, Vapor deployment logs but anyone who ever opened the Cloudwatch dashboard knows how scary that is. So just like me you have to get used to it. If you are however developing APIs or are working with webhooks you are in for a treat - &lt;strong&gt;Treblle will make debugging and logging those a breeze.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dont-get-scared-by-the-amount-of-resources-needed"&gt;
  &lt;/a&gt;
  Don't get scared by the amount of resources needed
&lt;/h3&gt;

&lt;p&gt;Initially when you create a project on the Vapor dashboard you need to spin up quite a few resources: a VPC network, a NAT gateway, an RDS database, a cache instance and a jumpbox. You could remove the NAT gateway and the jumpbox but that would mean your database would be public. I wouldn't recommend that though. Especially considering that a "jumpbox" is actually a "t3.nano" EC2 instance which costs next to nothing and that a NAT gateway costs about 30 USD per month. In my opinion the only two tough decisions you have to make are about the RDS database and the cache instance.&lt;/p&gt;

&lt;p&gt;With RDS you can choose a "serverless database" or a fixed size database. The serverless database runs only MYSQL 5.7, is slower and costs more but it scales automatically. Fixed size databases that can run on MYSQL 8.0 are somewhat faster but they don't scale automatically. So with them you have to choose a size and then change it later on if it becomes a problem. Luckily you can do that via the Vapor dashboard. I would strongly recommend using a smaller fixed sized database, something like t3.small, and then scaling up. As far as cache instances go I would recommend using a Redis cluster and also smaller in size - something like t3.small.&lt;/p&gt;

&lt;p&gt;The reason why I recommend smaller instances is that people often over provision and then complain how Vapor or AWS is expensive. It's not. You don't need crazy big sizes of resources to launch and get started. The good thing about Vapor is that it gives you insights about the MYSQL and Cache performance. It can also email you or slack you if it gets over a certain threshold so you can simply pause the instance and resize it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#migrate-your-domain-to-route-53"&gt;
  &lt;/a&gt;
  Migrate your domain to Route 53
&lt;/h3&gt;

&lt;p&gt;In case your domain isn't registered on AWS Route 53 i would recommend you transfer the domain there. I did it, it's not complicated, it takes like a day and there is like a small cost to it. If you do that you will be able to control DNS records directly from the Vapor dashboard and your life will be easier in the AWS ecosystem. When you attach a domain to your API gateway or wish to activate SES Amazon will simply create the records it needs directly in Route 53 so you don't have to do a thing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#understand-vaporyml"&gt;
  &lt;/a&gt;
  Understand vapor.yml
&lt;/h3&gt;

&lt;p&gt;This part was super confusing to me. I had to reach out to Vapor support many many times. &lt;a href="https://twitter.com/themsaid"&gt;Mohamed&lt;/a&gt; was great at providing answers - fast. With his help and bits of code online I was able to do what I needed. The initial problem I had was where to place commands like: &lt;code&gt;php artisan route:cache&lt;/code&gt;, &lt;code&gt;php artisan queue:restart&lt;/code&gt; and similar. In case you didn't know, you configure your environments in a file called "vapor.yml" which you will see after you install vapor.&lt;/p&gt;

&lt;p&gt;Here is how my configuration looks like at the end:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;id: 00000
name: treblle
environments:
    production:
        memory: 1024
        cli-memory: 512
        warm: 5
        gateway-version: 2
        runtime: 'php-8.0:al2'
        domain: treblle.com
        database: prod-db
        cache: prod-cache
        queues:
            - 'ProdLogs.fifo'
        build:
            - 'COMPOSER_MIRROR_PATH_REPOS=1 composer install --no-dev'
            - 'npm ci &amp;amp;&amp;amp; npm run production &amp;amp;&amp;amp; rm -rf node_modules'
            - 'php artisan route:cache'
            - 'php artisan view:cache'
        deploy:
            - 'php artisan migrate --force'
            - 'php artisan queue:restart'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;I used default values for things like "memory" and "cli-memory". The interesting thing about those two is that I am not using most of the memory defined here but apparently, and this is coming from AWS support, if you use higher memory settings for AWS Lambda you get better processors. So I could lower that settings to something like 256MB but it could mean it would take longer to execute because I will get slower processors. So this is a delicate dance between saving money and making sure you execute your code as fast as possible. I would suggest you experiment with this, simply change the settings, visit your website or API and go see in CloudWatch logs how long does it take to execute that.&lt;/p&gt;

&lt;p&gt;Values for domain, database, and cache are literary resource names I've created in the Vapor dashboard. So simply copy/paste the names and you are good to go. The "queues" value is actually an AWS SQS queue I manually created. This is something you can always do. If you don't wanna go through the Vapor interface you can always create or change things in AWS.&lt;/p&gt;

&lt;p&gt;Next, you see I also have "gateway-version" set to 2. This means I am telling Vapor to create an API Gateway using Version 2. We will talk about this in depth a tad bit later.&lt;/p&gt;

&lt;p&gt;Now onto the fun part. When you type in &lt;code&gt;vapor deploy production&lt;/code&gt; what happens in the background is magic. Vapor first compiles the entire code on your computer, everything from node and composer packages to building CSS and JS assets. After that it will create (or update) all the resources you defined under database, cache, domain using a bunch of AWS APIs. Finally it will upload a ZIP file with all of the code to AWS S3 which will then get deployed to AWS Lambda. Sounds complicated. And it is. But imagine having to do this without Vapor! Now there are two ways you can affect this process and that is by using "build" or "deploy" hooks which are defined in the YAML file. Laravel will call those at given stages of the deployment. It's also very important to place them at the correct stage otherwise they won't work.&lt;/p&gt;

&lt;p&gt;Under the "&lt;strong&gt;build&lt;/strong&gt;" hook you need to install composer dependencies, NPM dependencies. Optionally you can cache your routes and events.&lt;/p&gt;

&lt;p&gt;Under the "&lt;strong&gt;deploy&lt;/strong&gt;" hook you can execute migrations and restart the queue. Unlike the build commands these will actually execute on the "server".&lt;/p&gt;

&lt;p&gt;One thing that you might notice is that &lt;code&gt;php artisan config:cache&lt;/code&gt; isn't included in any of the stages. That is because it's done for you automatically by Vapor. So your config is cached so you don't have to worry about it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#choose-the-right-gateway-version"&gt;
  &lt;/a&gt;
  Choose the right gateway version
&lt;/h3&gt;

&lt;p&gt;In case you didn't know Vapor uses AWS API Gateway to essentially route traffic to your application running in a Lambda function. AWS has two Gateway versions: 1 and 2. By default Vapor will deploy using version 1 which allows you to have a Vapor managed firewall and is deployed using, what Amazon calls, "Edge optimized" deployments. This just means that your application will be closer to your user and their region. In case you are deploying to "us-east-1" and you have a visitor from Europe he isn't going to connect to "us-east-1" but rather Amazon will bring the connection point closer to him, something like "eu-central-1", which will in return reduce latency.&lt;/p&gt;

&lt;p&gt;Gateway version 2 is literally 70% cheaper than version 1 and there is a significant performance increase. The one important thing with version 2 is that you lose the ability to deploy your application as "Edge optimized" and you can only do "Regional" deployments. Meaning if you deploy to "us-east-1" all your users have to connect to that region no matter their location. This might cause latency issues with users outside your region.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I first deployed and tested with version 1 and to be honest I was not happy with the performance.&lt;/strong&gt; I first thought that I messed something up during deployment and configuration but &lt;a href="https://twitter.com/themsaid"&gt;Mohamed&lt;/a&gt; said I should get in touch with AWS about performance issues. I spent a lot of time optimizing both the back-end code and front-end to be blazing fast. I had scores of 100% on Google Lighthouse when running on a regular EC2 instance yet on Vapor I was seeing server response times of like 1.2 seconds. After a few calls with AWS they actually said that the results are worrying and that something might be wrong on their end. To this day they are still "investigating" that.&lt;/p&gt;

&lt;p&gt;I didn't wanna sit idle until AWS fixes whatever their problems were so I decided to give Gateway Version 2. &lt;strong&gt;After redeploying with Version 2 I did see a significant performance improvement.&lt;/strong&gt; The response time was down to 200ms which is much better. In my mind that still isn't great but given the fact that i am connecting to us-east-1 it was okish.&lt;/p&gt;

&lt;p&gt;There is one interesting fact I learned about Gateway deployments. In case you are deploying to API Gateway Version 1 and you plan to have a custom domain or subdomain attached to it then you should deploy it with the Endpoint type of "Regional". Sounds crazy but AWS support told me that when you attach a domain to your API gateway you essentially create a managed CloudFront domain which is in fact "Edge optimized". This means that the API will actually be "Edge optimized". In case you deployed the API as "Edge optimized" and attached a custom domain to it it would do a" double hoop" because the added domain is also "Edge optimized". Remember this one as I've spent quite some time "doing it wrong".&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cleanup-your-env"&gt;
  &lt;/a&gt;
  Cleanup your ENV
&lt;/h3&gt;

&lt;p&gt;Laravel Vapor injects a lot of variables for you. They can do that because you store the AWS credentials in the Vapor dashboard and Vapor can create all the resources for you. Hence they know the connection details for the database, cache instances and similar. From your .ENV you should remove the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Database related variables: DB_CONNECTION,DB_HOST,DB_PORT,DB_DATABASE,DB_USERNAME,DB_PASSWORD&lt;/li&gt;
&lt;li&gt;  AWS related variables: AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY and AWS_REGION&lt;/li&gt;
&lt;li&gt;  Redis related variables: REDIS_HOST, REDIS_PASSWORD, REDIS_PORT&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of those and more are simply added for you. One of the first questions I had was about the AWS S3 Bucket. Given that Vapor creates multiple of it's own buckets I was afraid to define my own. But it's totally fine even if you define your own custom created bucket Vapor will still run and be able to upload assets and code to the correct buckets.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adjust-some-of-your-code"&gt;
  &lt;/a&gt;
  Adjust some of your code
&lt;/h3&gt;

&lt;p&gt;On Treblle we use the AWS SDK to, among other things, create API keys for users on our API Gateway. This requires us to create our own AWS client connections like so:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$gateway = new ApiGatewayClient([
    'version' =&amp;gt; 'latest',
    'region' =&amp;gt; config('services.aws.region),
    'credentials' =&amp;gt; new Credentials(
        config('services.aws.key'),
        config('services.aws.secret')
    )
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Out of the box this did not work because the underlying configuration references ENV values AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY and AWS_REGION. Those are not present, as explained in the section above, and get appended by Vapor directly to the Lambda function. Hence the code didn't work. We had to update our connections to this:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$gateway = new ApiGatewayClient([
    'version' =&amp;gt; 'latest',
    'region' =&amp;gt; config('services.aws.region'),
    'credentials' =&amp;gt; CredentialProvider::env()
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This will instruct AWS to load the credentials from the ENV variables, but not "our ENV", rather the one that Vapor creates on the Lambda function.&lt;/p&gt;

&lt;p&gt;We had to do updates for Firebase as well. Because the Firebase PHP package loads the configuration from a JSON file we had to upload that to S3 (since you don't have a local file system) and update that as well.&lt;/p&gt;

&lt;p&gt;If you have file uploading on your platform you will have to make sure that the files get uploaded directly to S3 from the front-end. They can't touch the Laravel app because there is no local filesystem to handle file uploads.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#give-up-on-a-subdomain-for-assets"&gt;
  &lt;/a&gt;
  Give up on a subdomain for assets
&lt;/h3&gt;

&lt;p&gt;In case you didn't know Laravel Vapor will upload all your assets (images, css, js) to AWS S3 and will then create a CloudFront distribution for those assets. That makes the loading time very fast and ensures that users are always downloading assets from locations closer to them. This is great. But by default URLs to your assets look like this: &lt;code&gt;d2yzzcow4k19m2.cloudfront.net/c3fb4469-ddda-416d-ad41-5bc4116f5462/css/app.min.css?id=5733d15ea60112431152&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I wanted to have something cool like &lt;code&gt;assets.treblle.com/css/app.min.css&lt;/code&gt; but it turns out &lt;strong&gt;it's a big no no&lt;/strong&gt;. The reason for that, as &lt;a href="https://twitter.com/themsaid"&gt;Mohamed&lt;/a&gt; said, is the dynamic UUID part in that URL that gets appended during the deployment process. Only Vapor knows what that UUID is and there is no option to define a custom subdomain. This is something I would like to see added at one point in time.&lt;/p&gt;




&lt;p&gt;These are some of the things I wish I knew before starting the move process. My life would be easier and I would have done some of the things much faster. I hope some of these notes help you when starting your Laravel Vapor path.&lt;/p&gt;

&lt;p&gt;To conclude, even though I am still chasing the performance I want, Vapor has made the process of going serverless as easy as it can get. I would recommend it to anyone looking to scale their Laravel app without having to hire a DevOps person and glue together multiple various systems. If you have any questions feel free to shoot them to me on my &lt;a href="https://twitter.com/cindreta"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>php</category>
      <category>serverless</category>
      <category>aws</category>
    </item>
    <item>
      <title>Create a Netflix clone from Scratch: JavaScript PHP + MySQL Day 1:Download &amp; Installation</title>
      <author>Christopher Glikpo</author>
      <pubDate>Mon, 26 Jul 2021 15:32:36 +0000</pubDate>
      <link>https://dev.to/cglikpo/create-a-netflix-clone-from-scratch-javascript-php-mysql-day-1-download-installation-4njd</link>
      <guid>https://dev.to/cglikpo/create-a-netflix-clone-from-scratch-javascript-php-mysql-day-1-download-installation-4njd</guid>
      <description>&lt;p&gt;In this video we'll cover the download of vscode and xamp.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/fTPvHLlGdsk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you like my work, please consider&lt;br&gt;
&lt;a href="https://www.buymeacoffee.com/cglikpo"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c23TxQOF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jm11knj7d8zwcvo150q2.png" alt="Buy me a coffee"&gt;&lt;/a&gt;&lt;br&gt;
so that I can bring more projects, more articles for you&lt;/p&gt;

&lt;p&gt;If you want to learn more about Web Development, feel free to &lt;a href="https://www.youtube.com/c/ChristopherGlikpo"&gt;follow me on Youtube!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>mysql</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to Build REST API Using Node Js Feathers Framework</title>
      <author>DevPool</author>
      <pubDate>Mon, 26 Jul 2021 15:31:15 +0000</pubDate>
      <link>https://dev.to/devpool3000/how-to-build-rest-api-using-node-js-feathers-framework-4pli</link>
      <guid>https://dev.to/devpool3000/how-to-build-rest-api-using-node-js-feathers-framework-4pli</guid>
      <description>&lt;p&gt;This article will create a simple REST API vehicle system with full authentication and CRUD (create, read, update, delete) capabilities.&lt;/p&gt;

&lt;p&gt;We will be creating a simple vehicle API support.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Our Use Cases:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;As a user, I should be able to register.&lt;/li&gt;
&lt;li&gt;As a user, I should be able to login.&lt;/li&gt;
&lt;li&gt;As a user, I should be able to perform any CRUD operations on the vehicle data.

&lt;ul&gt;
&lt;li&gt;create&lt;/li&gt;
&lt;li&gt;read&lt;/li&gt;
&lt;li&gt;update&lt;/li&gt;
&lt;li&gt;delete&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Project Setup&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight livescript"&gt;&lt;code&gt;&lt;span class="nv"&gt;mkdir&lt;/span&gt; &lt;span class="nv"&gt;vehicle-api&lt;/span&gt;
&lt;span class="nv"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;vehicle-api&lt;/span&gt;
&lt;span class="nv"&gt;feathers&lt;/span&gt; &lt;span class="nv"&gt;g&lt;/span&gt; &lt;span class="nv"&gt;app&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RUHROX0x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pqc5o04kyyhchei30oy1.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RUHROX0x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pqc5o04kyyhchei30oy1.PNG" alt="running command"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you're answering the above questions, you'll notice that you can create your application using TypeScript and not JavaScript, or we can select any other database type.&lt;/p&gt;

&lt;p&gt;For simplicity, I went with yarn, JavaScript, and NeDB, but if you're planning to use npm, TypeScript, or Postgres/MongoDB, you can do so. &lt;/p&gt;

&lt;p&gt;Next, open your project with an editor of your choosing (I'm personally going with VS Code)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VUquqibM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w0c9t6mllwzx30ipmx2d.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VUquqibM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w0c9t6mllwzx30ipmx2d.PNG" alt="openProject"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To run the application, run the appropriate package manager command that you've selected. In this case:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight livescript"&gt;&lt;code&gt;&lt;span class="nv"&gt;yarn&lt;/span&gt; &lt;span class="nv"&gt;dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and you should be able to see this page in your browser:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kxCoEcki--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eca8h3l4c4s5hzr9dteg.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kxCoEcki--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eca8h3l4c4s5hzr9dteg.PNG" alt="running"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Congratulations!&lt;/strong&gt; &lt;br&gt;
You've set up your first Feathers application, and here is the tree structure of our project:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QWi3bjOK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fvpabq9uqf8qt45qzvhi.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QWi3bjOK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fvpabq9uqf8qt45qzvhi.PNG" alt="tree"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can find more information how what do this files do in here: &lt;a href="https://docs.feathersjs.com/guides/basics/generator.html#the-generated-files"&gt;https://docs.feathersjs.com/guides/basics/generator.html#the-generated-files&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notice how under 1 minute, we've generated an application with a full authentication implementation and our first user service has full CRUD capabilities.&lt;/p&gt;

&lt;p&gt;So how do we communicate with our backend if we don't have a frontend?&lt;/p&gt;

&lt;p&gt;Whenever we work on the API, engineers would use a tool called Insomnia or Postgres (in this example, I'll be using insomnia). Overall it will enable us to send and get a response from our API without running the frontend.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P-6pZkD5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/54s1xag9itjo6086fwki.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P-6pZkD5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/54s1xag9itjo6086fwki.PNG" alt="insomnia-0"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What we want to do next is to create "register" and "login" requests in our insomnia workspace.&lt;/p&gt;

&lt;p&gt;In my workspace, I'll be creating a new folder, "Authentication," that will contain "register" and "login" requests.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Register&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5ytAJz2Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/phkyv7w8m1os13r5o6c3.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5ytAJz2Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/phkyv7w8m1os13r5o6c3.PNG" alt="register"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After sending the request, we should see the following:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jGHs1dm8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6yng5om0vzpnb75x429m.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jGHs1dm8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6yng5om0vzpnb75x429m.PNG" alt="register-complite"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Login&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MntYVf7S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sbwzd2m99gp8tp7hn87w.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MntYVf7S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sbwzd2m99gp8tp7hn87w.PNG" alt="login"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After sending the request, we should see the following:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AxZvt8Ee--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m7wbs4dw23ovhj51ntnd.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AxZvt8Ee--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m7wbs4dw23ovhj51ntnd.PNG" alt="login-final"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you see the same thing, then your authentication is set up correctly!&lt;/p&gt;

&lt;p&gt;Since the basics of our applications are set up and running, it's time to create our vehicle service.&lt;/p&gt;

&lt;p&gt;To do that, run the following command and answer all of the questions in the same way as we did it right from the beginning:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight livescript"&gt;&lt;code&gt;&lt;span class="nv"&gt;feathers&lt;/span&gt; &lt;span class="nv"&gt;g&lt;/span&gt; &lt;span class="nv"&gt;service&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--symhawDZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4e3fg81njh8ui2rocsq2.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--symhawDZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4e3fg81njh8ui2rocsq2.PNG" alt="vehicles-setup"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;And if you look under the services/model folder, we now have a vehicle implementation that we can perform entire CRUD operations on.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CYzgnTlS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jt81hehqecb2121plj2g.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CYzgnTlS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jt81hehqecb2121plj2g.PNG" alt="vehivle-service"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;At this point, our REST API is fully ready to take in some data and perform the entire CRUD operation on our new vehicle service!&lt;/p&gt;

&lt;p&gt;Let's create a few records to demonstrate that.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VHlIWIZa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hbv6gwch73dmc9n884kd.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VHlIWIZa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hbv6gwch73dmc9n884kd.PNG" alt="create"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Oh no, what happened here!? We're getting an error message "Not authenticated."&lt;/p&gt;

&lt;p&gt;That's the expected behavior because our system is saying that "you're trying to access an endpoint when you are not authenticated." Translation, not logged in.&lt;/p&gt;

&lt;p&gt;So let's send the request with the generated token from before and try to resent the request &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--08rvcyUc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ksre4sv9ki6rln2zkjqn.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--08rvcyUc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ksre4sv9ki6rln2zkjqn.PNG" alt="token"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qkNTkH8M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b3c4sm8kadbv85k70bs2.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qkNTkH8M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b3c4sm8kadbv85k70bs2.PNG" alt="create-success"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;At this point, we can now save a record into our DB. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vt3gNY6T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oe9qnp6s9sn02x6eo74c.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vt3gNY6T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oe9qnp6s9sn02x6eo74c.PNG" alt="data"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Let's create few more records and get all vehicles:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zACcSYa9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8wlz338c1eg90f4etqly.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zACcSYa9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8wlz338c1eg90f4etqly.PNG" alt="all"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;At this point, our Update and Delete will look very similar.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Additional Recourses:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If this was your first RESTful API build, unfortunately, I didn't explain models, why we named our folders "Authentication" or "vehicles" in our insomnia, and what some of the things are. Thankfully, I do have a video where I give more information for beginners as I'm building out the API:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/H0KhcB3D8aQ"&gt;https://youtu.be/H0KhcB3D8aQ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feathers Documentation:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.feathersjs.com/guides/basics/generator.html"&gt;https://docs.feathersjs.com/guides/basics/generator.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;We just created our first RESTfull API using FeatherJs framework WooHoo! I hope this tutorial was helpful for some of you. We did many things, and it could be a lot at first and could be confusing at the beginning. But to be honest, once you master this, you will realize that we have created an amazing backend with many complex pieces, and we can create all of it unless 2 minutes. So big congrats to you on getting to the end of this tutorial!  &lt;/p&gt;

&lt;p&gt;If you have any questions, feel free to leave a comment or you can find me on my YouTube channel DevPool&lt;/p&gt;

&lt;p&gt;&lt;a href="//youtube.com/channel/UC03vw5F2isFkbJhyEZU5bvg?sub_confirmation=1"&gt;YouTube - DevPool&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>node</category>
    </item>
    <item>
      <title>How to design a RESTful API on AWS</title>
      <author>Ivonne Roberts</author>
      <pubDate>Mon, 26 Jul 2021 15:07:08 +0000</pubDate>
      <link>https://dev.to/aws-builders/how-to-design-a-restful-api-on-aws-2nd9</link>
      <guid>https://dev.to/aws-builders/how-to-design-a-restful-api-on-aws-2nd9</guid>
      <description>&lt;p&gt;Have you ever asked yourself what is a REST API? How do I design a RESTful API on AWS Cloud? How do I write a RESTful java microservice? As a software engineer building on AWS, I’ll walk you through designing a REST API.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/6upZCfWuB1Q"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-rest-api"&gt;
  &lt;/a&gt;
  What is a REST API?
&lt;/h2&gt;

&lt;p&gt;A REST API is a way for clients to get/store information with an application through HTTP. This is typically what websites and mobile apps use to communicate with backends services. For example: What’s today’s weather in Paris? A website makes a HTTP call to a weather service with Paris as an input. In response, the weather service returns a message with the details that that website would need to show that information.&lt;/p&gt;

&lt;p&gt;The text format that the client and the backend service exchange is usually in JSON structure. However, you could choose to use others like HTML, XML, plain text and so on. The RESTful specification does not define what format you must use unlike something like SOAP which uses XML.&lt;/p&gt;

&lt;p&gt;REST APIs should also be stateless. When calling the same API multiple times, nothing is stored in the backend causing it to change its response. For example, with pagination, calling an API will return a “page” (or subset) of items. Every time i call it, it will return the same subset, regardless of if I had already called that API. However, if I call that API give me the next 20 items starting an index 40, it will then return something different.&lt;/p&gt;

&lt;p&gt;Another characteristic of REST APIs is that they can be cached. When requesting the item, with an id of 123, multiple times, the first request would go to the microservice. The second time I request that item, with a short window, it is unlikely that it has changed. At that point I should instead just receive a cached response.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#business-use-case-to-design-a-rest-api-for"&gt;
  &lt;/a&gt;
  Business Use Case to Design a REST API for
&lt;/h2&gt;

&lt;p&gt;So let’s put some of what we have learned to practice. We will be designing the APIs for the following business use case. An application needs a way to get the list of upcoming events. The consumers for this API could be a mobile application that displays the events that you are registered for. This API could also be used an a website that advertises upcoming events.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#designing-the-restful-api"&gt;
  &lt;/a&gt;
  Designing the RESTful API
&lt;/h2&gt;

&lt;p&gt;When you name an api you want to use something short and simple. It should accurately convey the service or data it is providing and indication of what you will receive. You don’t want to use long string like &lt;code&gt;events-i-signed-up-for&lt;/code&gt;. Instead you want things like that to show up in an hierarchy of paths like &lt;code&gt;events/search?registered=true&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The next thing you want is versioning. When creating an API, you define a contract with you consumers. When you need to make a breaking change, they may not be able to update their code base at the precise minute that you deploy. Instead, you would deploy a new version in addition to your existing version. This gives clients time to migration from the previous version to the new one. The key here is to not make breaking changes, but when you have to, use versioning.&lt;/p&gt;

&lt;p&gt;A simple path could be as follows. The name of your microservice, the version number and then the resource that you are requesting. In the below example, the microservice is called events, the version is v1 and the resources are events and locations respectively.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://api.mydomain.com/events/v1/events/
https://api.mydomain.com/events/v1/locations/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These APIs would return a list indicated by the plural resource in the path and brackets in the response&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;234&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A path to return a specific event would be structured as follows. The name of your microservice, the version number, the resource that you are requesting and the id of the specific item you want.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://api.mydomain.com/events/v1/events/{eventId}/
https://api.mydomain.com/events/v1/events/{eventId}/locations
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also do complicated searching on resources with something like the below pattern. The path is the name of your microservice, the version number, the resources that you are searching, and that fields that should match the returned resources. For example in the below paths, it searches for events where the date is greater than 2021-07-01 and the status is CANCELLED. The second path searches for events that have a duration of longer than 1 hour&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://api.mydomain.com/events/v1/events/search?date[gt]=2021-07-01&amp;amp;status=CANCELLED
https://api.mydomain.com/events/v1/events/search?dateAndTime.duration.length[gt]=1&amp;amp;dateAndTime.duration.unit=HOUR
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#json-structure-of-our-restful-api"&gt;
  &lt;/a&gt;
  JSON Structure of our RESTful API
&lt;/h2&gt;

&lt;p&gt;Now that we have an idea of what our paths should look like let us look at the JSON structure that our responses will look like. JSON objects are surrounded by curly braces {}. Then the contents are key value pairs where the keys are surrounded in quotes. The values can be the following data types: a number, a string, a boolean, an object, a list or simply null.&lt;/p&gt;

&lt;p&gt;When choosing which data types to use you want to keep flexibility in mind. Considering that this is a contract with your clients, you want to choose data types that will allow you to extend. For example status is a property that would not need multiple fields. However, the location could be multiple places, so a list would allow us to represent that instead of having a flat structure like location1, location2, etc. Another example is date and time. It could have multiple attribute like time, date, and duration. This might be better represented with another JSON object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;status&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ACTIVE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;public&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1234556&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Weird Animal Facts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Tune in to learn about how horses make the neighing sound&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dateAndTime&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;date&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2021-06-30&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;time&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;08:00:00&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;timeZone&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;GMT&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;duration&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;length&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;unit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;HOUR&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;locations&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
     &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ONLINE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;url&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://ivonneroberts.com/meetingURL&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
     &lt;span class="p"&gt;},&lt;/span&gt;
     &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;VENUE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;address&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;streetAddress1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1 5th Avenue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;streetAddress2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;city&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;New York&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;state&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;NY&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;zip&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10001&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;],&lt;/span&gt;
   &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cost&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;currency&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;USD&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;price&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;unit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;PER_PERSON&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We now have walked through how I design a RESTful API, the path and JSON structure, on AWS Cloud. I continue to build on this design in &lt;a href="https://blog.ivonneroberts.com/2021/06/16/how-to-design-a-restful-api-on-aws/"&gt;How to Choose a Database on AWS&lt;/a&gt;. Check back weekly for new content. Feel free to comment below any questions you may have or reach out to me on twitter at &lt;a href="https://twitter.com/ivlo11"&gt;@ivlo11&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy Coding!&lt;/p&gt;

</description>
      <category>aws</category>
      <category>serverless</category>
      <category>microservices</category>
      <category>rest</category>
    </item>
    <item>
      <title>Deploying podman images using  running container in centos -8</title>
      <author>anirudha ingole</author>
      <pubDate>Mon, 26 Jul 2021 14:55:20 +0000</pubDate>
      <link>https://dev.to/ingoleanirudha/deploying-podman-images-using-running-container-in-centos-8-1i60</link>
      <guid>https://dev.to/ingoleanirudha/deploying-podman-images-using-running-container-in-centos-8-1i60</guid>
      <description>&lt;p&gt;What is podman .&lt;br&gt;
What is Podman? Podman is a daemonless container engine for developing, managing, and running OCI Containers on your Linux System. Containers can either be run as root or in rootless mode.&lt;/p&gt;

&lt;p&gt;People associate running pods with Kubernetes. And when they run containers in their development runtimes, they do not even think about the role pods could play—even in a localized runtime.  Most people coming from the Docker world of running single containers do not envision the concept of running pods. There are several good reasons to consider using pods locally, other than using pods to naturally group your containers.&lt;/p&gt;

&lt;p&gt;Podman installation process in centos 8..&lt;br&gt;
sudo dnf -y module disable container-tools&lt;br&gt;
sudo dnf -y install 'dnf-command(copr)'&lt;br&gt;
sudo dnf -y copr enable rhcontainerbot/container-selinux&lt;br&gt;
sudo curl -L -o /etc/yum.repos.d/devel:kubic:libcontainers:testing.repo &lt;a href="https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/testing/CentOS_8/devel:kubic:libcontainers:testing.repo"&gt;https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/testing/CentOS_8/devel:kubic:libcontainers:testing.repo&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#optional-for-runc-users-crun-will-be-installed-by-default-install-runc-first-if-you-prefer-runc"&gt;
  &lt;/a&gt;
  OPTIONAL FOR RUNC USERS: crun will be installed by default. Install runc first if you prefer runc
&lt;/h1&gt;

&lt;p&gt;sudo dnf -y --refresh install runc&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#install-podman"&gt;
  &lt;/a&gt;
  Install Podman
&lt;/h1&gt;

&lt;p&gt;sudo dnf -y --refresh install podman&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
