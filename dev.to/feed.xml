<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>PHP interview questions and answers for web developers</title>
      <author>Devinterview-io</author>
      <pubDate>Sun, 24 Jan 2021 09:14:15 +0000</pubDate>
      <link>https://dev.to/devinterview/php-interview-questions-and-answers-for-web-developers-4j11</link>
      <guid>https://dev.to/devinterview/php-interview-questions-and-answers-for-web-developers-4j11</guid>
      <description>&lt;p&gt;PHP is a general-purpose scripting language especially suited to web development. Here is a list of coding interview questions on PHP to help you get ready for your next technical interview in 2021.&lt;/p&gt;

&lt;p&gt;👉 You can check all 82 &lt;a href="https://devinterview.io/dev/php-interview-questions"&gt;PHP tech interview questions here&lt;/a&gt;  &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#1-what-is-the-use-of-iniset" class="anchor"&gt;
  &lt;/a&gt;
  🔹 1. What is the use of ini_set()?
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#answer" class="anchor"&gt;
  &lt;/a&gt;
  Answer:
&lt;/h3&gt;

&lt;p&gt;PHP allows the user to modify some of its settings mentioned in php.ini using ini_set(). This function requires two string arguments. First one is the name of the setting to be modified and the second one is the new value to be assigned to it.&lt;/p&gt;

&lt;p&gt;Given line of code will enable the display_error setting for the script if it’s disabled.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ini_set('display_errors', '1');&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We need to put the above statement, at the top of the script so that, the setting remains enabled till the end. Also, the values set via ini_set() are applicable, only to the current script. Thereafter, PHP will start using the original values from php.ini.&lt;/p&gt;



&lt;p&gt;&lt;span&gt;&lt;em&gt;Source:&lt;/em&gt; &lt;span&gt;&lt;a href="https://github.com/Bootsity/cracking-php-interviews-book"&gt;github.com/Bootsity&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;   &lt;/p&gt;








&lt;h2&gt;
  &lt;a href="#2-what-is-the-difference-between-and-" class="anchor"&gt;
  &lt;/a&gt;
  🔹 2. What is the difference between == and ===?
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#answer" class="anchor"&gt;
  &lt;/a&gt;
  Answer:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  The operator &lt;code&gt;==&lt;/code&gt; casts between two different types if they are different&lt;/li&gt;
&lt;li&gt;  The &lt;code&gt;===&lt;/code&gt; operator performs a '&lt;em&gt;typesafe comparison&lt;/em&gt;'&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That means that it will only return true if both operands have the same type and the same value.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;    &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s2"&gt;"1"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="c1"&gt;// 1 is an integer, "1" is a string&lt;/span&gt;
    &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"1"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="c1"&gt;// "1" gets casted to an integer, which is 1&lt;/span&gt;
    &lt;span class="s2"&gt;"foo"&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s2"&gt;"foo"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="c1"&gt;// both operands are strings and have the same value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;span&gt;&lt;em&gt;Source:&lt;/em&gt; &lt;span&gt;&lt;a href="https://stackoverflow.com/questions/80646/how-do-the-php-equality-double-equals-and-identity-triple-equals-comp"&gt;stackoverflow.com&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;   &lt;/p&gt;








&lt;h2&gt;
  &lt;a href="#3-what-is-the-return-type-of-a-function-that-doesnt-return-anything" class="anchor"&gt;
  &lt;/a&gt;
  🔹 3. What is the return type of a function that doesn't return anything?
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#answer" class="anchor"&gt;
  &lt;/a&gt;
  Answer:
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;void&lt;/code&gt; which mean nothing.&lt;/p&gt;



&lt;p&gt;&lt;span&gt;&lt;em&gt;Source:&lt;/em&gt; &lt;span&gt;&lt;a href="https://github.com/Bootsity/cracking-php-interviews-book"&gt;github.com/Bootsity&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;   &lt;/p&gt;








&lt;h2&gt;
  &lt;a href="#4-what-does-globals-mean" class="anchor"&gt;
  &lt;/a&gt;
  🔹 4. What does $GLOBALS mean?
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#answer" class="anchor"&gt;
  &lt;/a&gt;
  Answer:
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;$GLOBALS&lt;/code&gt; is associative array including references to all variables which are currently defined in the global scope of the script.&lt;/p&gt;



&lt;p&gt;&lt;span&gt;&lt;em&gt;Source:&lt;/em&gt; &lt;span&gt;&lt;a href="https://www.guru99.com/php-interview-questions-answers.html"&gt;guru99.com&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;   &lt;/p&gt;








&lt;h2&gt;
  &lt;a href="#5-what-are-the-keys-amp-values-in-an-indexed-array" class="anchor"&gt;
  &lt;/a&gt;
  🔹 5. What are the keys &amp;amp; values in an indexed array?
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#answer" class="anchor"&gt;
  &lt;/a&gt;
  Answer:
&lt;/h3&gt;

&lt;p&gt;Consider:&lt;br&gt;
    Array ( [0] =&amp;gt; Hello [1] =&amp;gt; world [2] =&amp;gt; It's [3] =&amp;gt; a [4] =&amp;gt; beautiful [5] =&amp;gt; day)&lt;/p&gt;

&lt;p&gt;The keys of an indexed array are 0, 1, 2 etc. (the index values) and values are "Hello", "world", "It's", "beautiful", "day".&lt;/p&gt;



&lt;p&gt;&lt;span&gt;&lt;em&gt;Source:&lt;/em&gt; &lt;span&gt;&lt;a href="https://github.com/Bootsity/cracking-php-interviews-book"&gt;github.com/Bootsity&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;   &lt;/p&gt;








&lt;h2&gt;
  &lt;a href="#6-what-is-the-purpose-of-phpini-file" class="anchor"&gt;
  &lt;/a&gt;
  🔹 6. What is the purpose of php.ini file?
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#answer" class="anchor"&gt;
  &lt;/a&gt;
  Answer:
&lt;/h3&gt;

&lt;p&gt;The PHP configuration file, &lt;em&gt;php.ini&lt;/em&gt;, is the final and most immediate way to affect PHP's functionality. The php.ini file is read each time PHP is initialized.in other words, whenever httpd is restarted for the module version or with each script execution for the CGI version.&lt;/p&gt;



&lt;p&gt;&lt;span&gt;&lt;em&gt;Source:&lt;/em&gt; &lt;span&gt;&lt;a href="https://github.com/Bootsity/cracking-php-interviews-book"&gt;github.com/Bootsity&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;   &lt;/p&gt;








&lt;h2&gt;
  &lt;a href="#7-how-can-you-pass-a-variable-by-reference" class="anchor"&gt;
  &lt;/a&gt;
  🔹 7. How can you pass a variable by reference?
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#answer" class="anchor"&gt;
  &lt;/a&gt;
  Answer:
&lt;/h3&gt;

&lt;p&gt;To be able to pass a variable by &lt;strong&gt;reference&lt;/strong&gt;, we use an &lt;em&gt;ampersand&lt;/em&gt; in front of it, as follows:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$var1 = &amp;amp;amp;$var2&lt;/code&gt;&lt;/p&gt;



&lt;p&gt;&lt;span&gt;&lt;em&gt;Source:&lt;/em&gt; &lt;span&gt;&lt;a href="https://www.guru99.com/php-interview-questions-answers.html"&gt;guru99.com&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;   &lt;/p&gt;








&lt;h2&gt;
  &lt;a href="#8-is-multiple-inheritance-supported-in-php" class="anchor"&gt;
  &lt;/a&gt;
  🔹 8. Is multiple inheritance supported in PHP?
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#answer" class="anchor"&gt;
  &lt;/a&gt;
  Answer:
&lt;/h3&gt;

&lt;p&gt;PHP supports only single inheritance; it means that a class can be extended from only one single class using the keyword 'extended'.&lt;/p&gt;



&lt;p&gt;&lt;span&gt;&lt;em&gt;Source:&lt;/em&gt; &lt;span&gt;&lt;a href="https://www.guru99.com/php-interview-questions-answers.html"&gt;guru99.com&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;   &lt;/p&gt;








&lt;h2&gt;
  &lt;a href="#9-what-is-stdclass-in-php" class="anchor"&gt;
  &lt;/a&gt;
  🔹 9. What is stdClass in PHP?
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#answer" class="anchor"&gt;
  &lt;/a&gt;
  Answer:
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;stdClass&lt;/code&gt; is just a generic 'empty' class that's used when casting other types to objects. &lt;code&gt;stdClass&lt;/code&gt; is &lt;strong&gt;not&lt;/strong&gt; the base class for objects in PHP. This can be demonstrated fairly easily:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;    &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="nv"&gt;$foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$foo&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="n"&gt;stdClass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="s1"&gt;'Y'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'N'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// outputs 'N'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;It is useful for anonymous objects, dynamic properties, etc.&lt;/p&gt;

&lt;p&gt;An easy way to consider the &lt;code&gt;StdClass&lt;/code&gt; is as an alternative to associative array. See this example below that shows how &lt;code&gt;json_decode()&lt;/code&gt; allows to get an StdClass instance or an associative array. Also but not shown in this example, &lt;code&gt;SoapClient::__soapCall&lt;/code&gt; returns an &lt;code&gt;StdClass&lt;/code&gt; instance.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;    &lt;span class="c1"&gt;//Example with StdClass&lt;/span&gt;
    &lt;span class="nv"&gt;$json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'{ "foo": "bar", "number": 42 }'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$stdInstance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;json_decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$json&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$stdInstance&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="kc"&gt;PHP_EOL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//"bar"&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$stdInstance&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;amp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="kc"&gt;PHP_EOL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//42&lt;/span&gt;

    &lt;span class="c1"&gt;//Example with associative array&lt;/span&gt;
    &lt;span class="nv"&gt;$array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;json_decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$json&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'foo'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="kc"&gt;PHP_EOL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//"bar"&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'number'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="kc"&gt;PHP_EOL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//42&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;span&gt;&lt;em&gt;Source:&lt;/em&gt; &lt;span&gt;&lt;a href="https://stackoverflow.com/questions/931407/what-is-stdclass-in-php"&gt;stackoverflow.com&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;   &lt;/p&gt;








&lt;h2&gt;
  &lt;a href="#10-in-php-objects-are-they-passed-by-value-or-by-reference" class="anchor"&gt;
  &lt;/a&gt;
  🔹 10. In PHP, objects are they passed by value or by reference?
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#answer" class="anchor"&gt;
  &lt;/a&gt;
  Answer:
&lt;/h3&gt;

&lt;p&gt;In PHP, objects passed by &lt;strong&gt;value&lt;/strong&gt;.&lt;/p&gt;



&lt;p&gt;&lt;span&gt;&lt;em&gt;Source:&lt;/em&gt; &lt;span&gt;&lt;a href="https://www.guru99.com/php-interview-questions-answers.html"&gt;guru99.com&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;   &lt;/p&gt;








&lt;h2&gt;
  &lt;a href="#11-what-is-pdo-in-php" class="anchor"&gt;
  &lt;/a&gt;
  🔹 11. What is PDO in PHP?
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#answer" class="anchor"&gt;
  &lt;/a&gt;
  Answer:
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;PDO&lt;/strong&gt; stands for PHP Data Object.&lt;/p&gt;

&lt;p&gt;It is a set of PHP extensions that provide a core PDO class and database, specific drivers. It provides a vendor-neutral, lightweight, data-access abstraction layer. Thus, no matter what database we use, the function to issue queries and fetch data will be same. It focuses on data access abstraction rather than database abstraction.&lt;/p&gt;



&lt;p&gt;&lt;span&gt;&lt;em&gt;Source:&lt;/em&gt; &lt;span&gt;&lt;a href="https://github.com/Bootsity/cracking-php-interviews-book"&gt;github.com/Bootsity&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;   &lt;/p&gt;








&lt;h2&gt;
  &lt;a href="#12-is-there-a-difference-between-isset-and-empty" class="anchor"&gt;
  &lt;/a&gt;
  🔹 12. Is there a difference between isset and !empty?
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#answer" class="anchor"&gt;
  &lt;/a&gt;
  Answer:
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;empty&lt;/code&gt; is more or less shorthand for&lt;code&gt;!isset($foo) || !$foo&lt;/code&gt;, and &lt;code&gt;!empty&lt;/code&gt; is analogous to &lt;code&gt;isset($foo) &amp;amp;amp;&amp;amp;amp; $foo&lt;/code&gt;. &lt;code&gt;empty&lt;/code&gt; is the same as &lt;code&gt;!$foo&lt;/code&gt;, but doesn't throw warnings if the variable doesn't exist. That's the main point of this function: do a boolean comparison without worrying about the variable being set.&lt;/p&gt;



&lt;p&gt;&lt;span&gt;&lt;em&gt;Source:&lt;/em&gt; &lt;span&gt;&lt;a href="https://stackoverflow.com/questions/4559925/why-check-both-isset-and-empty"&gt;stackoverflow.com&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;   &lt;/p&gt;








&lt;h2&gt;
  &lt;a href="#13-differentiate-between-echo-and-print" class="anchor"&gt;
  &lt;/a&gt;
  🔹 13. Differentiate between echo and print()
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#answer" class="anchor"&gt;
  &lt;/a&gt;
  Answer:
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;echo&lt;/code&gt; and &lt;code&gt;print&lt;/code&gt; are more or less the same. They are both used to output data to the screen.&lt;/p&gt;

&lt;p&gt;The differences are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  echo has no return value while print has a return value of 1 so it can be used in expressions.&lt;/li&gt;
&lt;li&gt;  echo can take multiple parameters (although such usage is rare) while print can take one argument.&lt;/li&gt;
&lt;li&gt;  echo is faster than print.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;&lt;span&gt;&lt;em&gt;Source:&lt;/em&gt; &lt;span&gt;&lt;a href="https://github.com/Bootsity/cracking-php-interviews-book"&gt;github.com/Bootsity&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;   &lt;/p&gt;








&lt;h2&gt;
  &lt;a href="#14-what-is-the-differences-between-a-b-and-a-b" class="anchor"&gt;
  &lt;/a&gt;
  🔹 14. What is the differences between $a != $b and $a !== $b?
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#answer" class="anchor"&gt;
  &lt;/a&gt;
  Answer:
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;!=&lt;/code&gt; means &lt;em&gt;inequality&lt;/em&gt; (TRUE if $a is not equal to $b) and &lt;code&gt;!==&lt;/code&gt; means &lt;em&gt;non-identity&lt;/em&gt; (TRUE if $a is not identical to $b).&lt;/p&gt;



&lt;p&gt;&lt;span&gt;&lt;em&gt;Source:&lt;/em&gt; &lt;span&gt;&lt;a href="https://www.guru99.com/php-interview-questions-answers.html"&gt;guru99.com&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;   &lt;/p&gt;








&lt;h2&gt;
  &lt;a href="#15-what-does-the-var-keyword-mean-in-php" class="anchor"&gt;
  &lt;/a&gt;
  🔹 15. What does the 'var' keyword mean in PHP?
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#answer" class="anchor"&gt;
  &lt;/a&gt;
  Answer:
&lt;/h3&gt;

&lt;p&gt;It's for declaring class member variables in PHP4, and is no longer needed. It will work in PHP5, but will raise an &lt;strong&gt;E_STRICT&lt;/strong&gt; warning in PHP from version 5.0.0 up to version 5.1.2, as of when it was deprecated. Since PHP 5.3, var has been un-deprecated and is a synonym for 'public'.&lt;/p&gt;

&lt;p&gt;Consider:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;    &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;$x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'y'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// or you can use public like...&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nv"&gt;$x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'y'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//this is also a class member variables.&lt;/span&gt;
        &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;span&gt;&lt;em&gt;Source:&lt;/em&gt; &lt;span&gt;&lt;a href="https://stackoverflow.com/questions/1206105/what-does-php-keyword-var-do"&gt;stackoverflow.com&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;   &lt;/p&gt;









&lt;p&gt;Thanks 🙌 for reading and good luck on your next tech interview!&lt;br&gt;&lt;br&gt;
Explore 3800+ dev interview question here 👉 &lt;a href="https://devinterview.io/"&gt;Devinterview.io&lt;/a&gt;&lt;/p&gt;

</description>
      <category>php</category>
      <category>webdev</category>
      <category>career</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to implement an API using Vuejs &amp; Axios</title>
      <author>Emmanuel Etukudo</author>
      <pubDate>Sun, 24 Jan 2021 09:04:11 +0000</pubDate>
      <link>https://dev.to/eaetukudo/how-to-implement-an-api-using-vuejs-axios-3m95</link>
      <guid>https://dev.to/eaetukudo/how-to-implement-an-api-using-vuejs-axios-3m95</guid>
      <description>&lt;p&gt;Case study: Hacker News API&lt;/p&gt;

&lt;p&gt;Prerequisite&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Laptop with an Internet connection&lt;/li&gt;
&lt;li&gt;An API client (e. g: Postman or Insomnia)&lt;/li&gt;
&lt;li&gt;A code editor&lt;/li&gt;
&lt;li&gt;Basic knowledge of Javascript, Vue.js, Axios, CSS, HTML&lt;/li&gt;
&lt;li&gt;Concentration&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This tutorial will get you started with Hackernews API, get you aquatinted with the 5 major endpoints shipped with this API, explain how you can make different requests, as well as teach you how to build a simple restful API based news aggregator on top of the API. The Hacker News API is developed by Hackernews in partnership with Google’s Firebase with the aim to make the public Hacker News data available in near real-time. This tutorial will not cover API development in-depth but will work you through how to test and consume API endpoints effectively.&lt;/p&gt;

&lt;p&gt;How to follow this tutorial&lt;/p&gt;

&lt;p&gt;This tutorial is divided into 3 deferent sections as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Getting Started&lt;/li&gt;
&lt;li&gt;Making API requests to the available endpoints&lt;/li&gt;
&lt;li&gt;The Hacker News Reader App&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To get the best out of this tutorial, I will advise you to follow this tutorial one section after the other as each section seamlessly introduces the other. If you are ready to learn new techniques, join me let’s set the ball rolling.&lt;/p&gt;

&lt;p&gt;Getting Started&lt;/p&gt;

&lt;p&gt;Before we begin, a tour around the endpoints shipped with this API will give you glims of how the API is designed, structured, and served. The Hackernews API has 5 major endpoints that are used to aggregate news stories, jobs, poles, and comments on the Hackernews website. For basic information and to explain how simple the API is, I will explain the 5 endpoints by making the requests to endpoints listed below using Postman:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Items&lt;/li&gt;
&lt;li&gt;Users&lt;/li&gt;
&lt;li&gt;Top Stories&lt;/li&gt;
&lt;li&gt;Max Item ID&lt;/li&gt;
&lt;li&gt;Changed Items and Profiles&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The base URL for the endpoints is &lt;a href="http://hacker-news.firebaseio.com/Items/v0/item/"&gt;http://hacker-news.firebaseio.com/Items/v0/item/&lt;/a&gt;.json&lt;/p&gt;

&lt;p&gt;The Item endpoint returns all link posts, comments, jobs, Ask HN posts, and polls all categorized as “items”. They can be accessed by their unique id at this endpoint. Let’s test the ‘items’ endpoint together, open  Postman set your Request URL like so: &lt;a href="https://hacker-news.firebaseio.com/v0/item/8861.json"&gt;https://hacker-news.firebaseio.com/v0/item/8861.json&lt;/a&gt;, select ‘GET’ as your request type and press send. You should get the same result as the screenshot below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OYe5cq6C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AWmizhFhcwfEkfiS2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OYe5cq6C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AWmizhFhcwfEkfiS2.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You noticed I replaced the ‘integrid’ with ‘/v0/item/8861.json/’ as the unique identifier for this particular item. Note: an item can either be a story, comment, job, ask, etc., you can as well traverse the tree and get even deeper. We will practice more on traversing in the Hackernews Reader App section.&lt;/p&gt;

&lt;p&gt;Users &lt;code&gt;/v0/user/&amp;lt;userid&amp;gt;.json&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Each user is uniquely identified by case-sensitive ‘ids’, and live under ‘/v0/user/’. This endpoint only reveals users that have public activity (e.g: comments or story submissions) on the website. The screenshot below is a result of a ‘GET’ request to the URL &lt;a href="https://hacker-news.firebaseio.com/v0/user/john.json"&gt;https://hacker-news.firebaseio.com/v0/user/john.json&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QAtomx8Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AwFbEQsumh_wKEZZ8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QAtomx8Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AwFbEQsumh_wKEZZ8.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You noticed the unique identifier this time is ‘john’. What if you are looking to get all the comments the user has made so far? The ideal solution would be using the ‘submitted’ array to access items the user has published. Remember, the endpoint only return a user with activity. We will dive deeper into this in the next section.&lt;/p&gt;

&lt;p&gt;Top Stories &lt;code&gt;/v0/topstories.json&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This endpoint returns the item ids for the top 500 stories on Hackernews. You can use this endpoint to access the ids of the top items on the site. The latest stories can be accessed at ‘/v0/topstories’ (also contains jobs) and ‘/v0/newstories’. Best stories can be accessed as well at ‘/v0/beststories’. The screenshot below is the result of a ‘GET’ request to &lt;a href="https://hacker-news.firebaseio.com/v0/topstories.json"&gt;https://hacker-news.firebaseio.com/v0/topstories.json&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uNaW7hPg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AfSqUCHxaYiqNMnSR.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uNaW7hPg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AfSqUCHxaYiqNMnSR.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is more you can achieve with this endpoint, we will be making use of this API endpoint in the Hackernews Reader App section.&lt;/p&gt;

&lt;p&gt;Max Item ID&lt;/p&gt;

&lt;p&gt;This endpoint returns the current largest item id &lt;code&gt;/v0/maxitem&lt;/code&gt;. This might be the right approach to guessing backward to discover all items available on the API.&lt;/p&gt;

&lt;p&gt;Changed Items and Profiles&lt;/p&gt;

&lt;p&gt;This API returns a list of items and profiles that have changed in realtime. Thanks to Firebase for this awesome feature, the item, and profile changes are at ‘/v0/updates’. This endpoint can be very helpful if you are looking to track real-time changes within your application.&lt;/p&gt;

&lt;p&gt;The Hacker News Reader App&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5FOMaP0X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2A8o-jXClVQg9TThZs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5FOMaP0X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2A8o-jXClVQg9TThZs.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have been following this tutorial up to this point, congratulations you are fully equipped with the knowledge and understanding needed to build the Hackernews Reader App. Let’s start off by making a request to fetch 50 top stories and order them in descending order, and get them sorted by votes. This will be the building block for our Reader App. We will use Javascript to handle the logic for this application, Vue.js, to build the front-end and Axios for sending requests to the endpoints respectively.&lt;/p&gt;

&lt;p&gt;What is Vue.js?&lt;/p&gt;

&lt;p&gt;Vue is a progressive framework for building user interfaces. Vue is designed from the ground up to be incrementally adoptable. The core library is focused on the view layer only and is easy to pick up and integrate with other libraries or existing projects. On the other hand, Vue is also perfectly capable of powering sophisticated Single-Page Applications when used in combination with modern tooling and supporting libraries. I didn’t choose vue.js for this tutorial for any other reason other than its simplicity, and how it is easy to get along with. This reason isn’t limited to what you can achieve with vue.js, you can also build this application with other front-end frameworks like react.js or angular. You can read the documentation and get started with vue.js here.&lt;/p&gt;

&lt;p&gt;What is Axios?&lt;/p&gt;

&lt;p&gt;Axios is a promise-based HTTP client for the browser and node.js. Axios is a Javascript library pretty easy to integrate with any front-end framework or existing application written in Javascript. We will not be using axios within vue.js because I don’t want us to make multiple requests within our components. We will create a “story-service” that will handle all requests to our endpoints, pass the output via props within components. Click here to read instructions on how to install axios via the node.js package manager (npm).&lt;/p&gt;

&lt;p&gt;Setup and Installation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a new application&lt;/li&gt;
&lt;li&gt;Install Axios&lt;/li&gt;
&lt;li&gt;Create a service folder&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s get started, navigate to your working directory, and copy-paste the code below on your terminal to create a vue.js application. Make sure you have &lt;code&gt;vue-cli&lt;/code&gt; installed on your machine. You can follow instructions on how to install and get started with &lt;code&gt;vue-cli&lt;/code&gt; here.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ vue create vue-hackernews
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Select your preferred add-ons and type the code below:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cd vue-hackernews
$ npm run serve
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;If you got everything set up correctly, you should have the result below:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;App running at:
- Local: http://localhost:8081/
- Network: http://172.20.10.3:8081/
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Hold-down command key and click on the local link to view the Web App in your browser (cmd + click). Bravo!! You should get the result below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hXA76H7e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AFUUqgSzMO8Jw1-T1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hXA76H7e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AFUUqgSzMO8Jw1-T1.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Install Axios:&lt;/p&gt;

&lt;p&gt;Copy-paste the code below on your terminal to install Axios:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; $ npm i axios
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Now that you have generated the barebones of the Reader App, create a new folder inside the ‘src’ folder name its services. Next, let’s rouse through our folder structure and remove some content we don’t need. Below is a traversing tree of what our folder structure looks like.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;├── vue-hackernews
├── public
   ├── style.css
├── src
   ├── assets
      ├── css
         ├── main.css
      ├── bk-sale.png
├── componets
    ├── singleStory.vue
    ├── storyItem.vue
├── router
    ├── index.js
├── services
    ├── storyService.js
├── views
    ├── home.vue
    ├── singleStory.vue
├── App.vue
├── main.js
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Folder Structure Explained:&lt;/p&gt;

&lt;p&gt;The Hackernews Reader App is a single page application built with the aim to illustrate how you can build an application on top of the Hackernews API. If you used veu-cli to generate the application, you should have a similar folder structure as the folder structure above. The ‘/src’ folder is the entry-point for our application, it contains all folders and relevant files for our web app. The ‘/asset’ folder contains the stylesheet and images for the application, the ‘/components’ folder holds all the components for the application, the ‘/router’ folder contains ‘index.js’ a script responsible for routing in the application, the ‘/services’ folder is a custom folder I created, it contains all services for the application, the ‘/view’ folder contains all the views for the application (e.g: home.vue and singleStory.vue), the ‘App.vue’ renders all the views/routes in the application, lastly, the ‘main.js’ file is a script that renders ‘App.vue’ component the parent component for the entire application by passing it to vue.js engine which will in-turn convert it to ‘HTML’ that is readable on web browsers.&lt;/p&gt;

&lt;p&gt;Building the “story-service”&lt;/p&gt;

&lt;p&gt;Navigate into the services folder, create a new file called ‘storyService.js’, copy-paste the code below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import axios from 'axios';
    const baseUrl = 'https://hacker-news.firebaseio.com/v0';
    /* 
     *  Fetch list of the top 50 stories
     *  returns stories[].
    */
    export async function getTopStories() {
        let stories = [];
        const response = await axios.get(`${baseUrl}/topstories.json`, {
            params: {
                limitToFirst: '50',
            }
        });
        stories = response.data;
        return stories;
    }
    /* 
     *  Fetch items based on 'ids' from getTopStories()
     *  returns items[].
    */
     export async function storiesWithItems(){
         let items = [];
         getTopStories().then(stories =&amp;gt; {
              stories.forEach(id =&amp;gt; {
               axios.get(`${baseUrl}/item/${id}.json`).then( res =&amp;gt; {
                items.push(res.data);
               });
              });   
         });
         return items;
     }
    /* 
     *  Makes request based on the 'id' param
     *  returns response[].
    */
     export async function getSingleItem(id){
        let response;
        response = await axios.get(`${baseUrl}/item/${id}.json`);
        return response.data;
    };

    /* 
     *  Makes request based on the 'id' passed to the
     *  getSingleItem(&amp;lt;id&amp;gt;), loops through kids[];
     *  returns comments[].
    */
    export async function getSingleStoryComments(id) {
        let comments = [];
        getSingleItem(id).then(res =&amp;gt; {
            res.kids.forEach(comment =&amp;gt; {
                 axios.get(`${baseUrl}/item/${comment}.json`).then(res =&amp;gt; {
                     comments.push(res.data);
                 });
            })
        });
        return comments;
    }
    /* 
     *  Sorts the result based on the property score;
     *  returns a sorted array.
    */
    export function sortByScore(a, b){
        if (a.score &amp;lt; b.score) {
            // a comes before b in the sorted order 
            return -1;
        }else if(a.score &amp;gt; b.score){
            // a comes before b in the sorted order
            return 1;
        }else{
            // a and b are the same
            return 0
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The concept of these services can be likened to a troop of soldiers fighting together for a single cause. We could have as well built the entire App with one or two functions, but we have to make our App reusable, maintainable, also easy to read and understand.&lt;/p&gt;

&lt;p&gt;getTopStories():&lt;/p&gt;

&lt;p&gt;I started off by importing &lt;code&gt;axios&lt;/code&gt;, then I declared a constant to hold the &lt;code&gt;baseurl&lt;/code&gt; for our API, the &lt;code&gt;getTopStories()&lt;/code&gt; function makes an asynchronous request to the ‘topstories.json’ endpoint and returns 50 stories ordered by votes in descending order. You noticed within the params ‘Object’ I include the ‘orderBy: votes’ and ‘limitToFirst: 50’, these parameters are passed as headers through the URL when the request is sent and will be received by the endpoint to retrieving the data. You can read more on retrieving data in Firebase here.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;getTopStroies()&lt;/code&gt; function only returns &lt;code&gt;ids&lt;/code&gt; for the first 50 top stories. To access details of the stories we need to make another iterative request based on the result we get to the &lt;code&gt;/item/${id}.json&lt;/code&gt; endpoint. We could have as well handled this within this function, but we need to keep maintainability in mind, so we will let another function handle that.&lt;/p&gt;

&lt;p&gt;storiesWithItems():&lt;/p&gt;

&lt;p&gt;This function relies on the &lt;code&gt;getTopStories()&lt;/code&gt; function to fetch stories associated with the ‘ids’ it returns. They are a lot of ways you can get this task done, I chose to make a new request to &lt;code&gt;/item/${id}.json&lt;/code&gt; endpoint by iterating each ‘ids’ returned from the ‘getTopStroies()’ function. Each item found within the loop is pushed to the ‘item’ array which is returned when the loop ends.&lt;/p&gt;

&lt;p&gt;getSingleItem(id):&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;getSingleItem()&lt;/code&gt; sends a request to the &lt;code&gt;/item/${id}.json&lt;/code&gt; endpoint and returns a single item based on the &lt;code&gt;itemid&lt;/code&gt; passed to it. This function is also used by the &lt;code&gt;getSingleStoryComments(id)&lt;/code&gt; to fetch comments associated with the current &lt;code&gt;item&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;getSingleStoryComments(id):&lt;/p&gt;

&lt;p&gt;This function is similar to the storiesWithItem() function, its primary purpose is to return all the comments associated with a single &lt;code&gt;item&lt;/code&gt; by iterating its &lt;code&gt;kids&lt;/code&gt; array and making a request to the &lt;code&gt;/item/${id}.json&lt;/code&gt; endpoint with each of the &lt;code&gt;kid&lt;/code&gt;. It’s amazing how the Hackernews API is structured, comments are items with the “type: comment” and are direct children of the story ‘object‘ accessible via the &lt;code&gt;kids&lt;/code&gt; array.&lt;/p&gt;

&lt;p&gt;Sorting the items based on the highest vote:&lt;/p&gt;

&lt;p&gt;sortByScore(a, b):&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;sortByScore()&lt;/code&gt; is a callback function that defines the sort order for our &lt;code&gt;items&lt;/code&gt;, the function is often passed as a parameter to the javascript function sort. In our case, the sorting is done based on the &lt;code&gt;item&lt;/code&gt; with the highest vote. It compares the first element (a) with the next (b) in the object of an array based on the highest score, reduces its index number, and push it forward one step each time a match is not found vis-visa. Read more on the sort function here.&lt;/p&gt;

&lt;p&gt;Building the components&lt;/p&gt;

&lt;p&gt;Now that you are done with building the story service, let’s create the components needed for our application. Navigate to the component folder and create &lt;code&gt;singleitem.vue&lt;/code&gt; and &lt;code&gt;singleStoryItem.vue&lt;/code&gt; components.&lt;/p&gt;

&lt;p&gt;copy and paste the code below to create the signgleItem.vue:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;template&amp;gt;
    &amp;lt;div class="story"&amp;gt;
    &amp;lt;span class="score"&amp;gt;{{ item.title | url }}&amp;lt;/span&amp;gt;
    &amp;lt;router-link  :to="{ path: '/story/' + item.id }"
    &amp;gt;{{ item.title }}
    &amp;lt;/router-link&amp;gt;&amp;lt;br /&amp;gt;
    &amp;lt;span class="own-url"&amp;gt;{{ item.url | host }}&amp;lt;/span&amp;gt;&amp;lt;br /&amp;gt;
    &amp;lt;span class="meta"&amp;gt;
    by: &amp;lt;span class="author"&amp;gt;@{{ item.by }} &amp;lt;/span&amp;gt; | Time: {{ item.time }} Ago | {{
    item.descendants }} comments
    &amp;lt;/span&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;/template&amp;gt;
    &amp;lt;script&amp;gt;
    export default {
    name: 'storItem',
    props:{
    item: {
    type: Object,
    required: true,
    },
    index:{
    type: Number,
    required: true,
    }
    },
    filters:{
    url: function(str){
    return str.substring(0, 2).toUpperCase();
    }
    }
    }
    &amp;lt;/script&amp;gt;
    &amp;lt;style scoped&amp;gt;
    .item {
    border-radius: 5px;
    padding: 20px;
    background: white;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    position: relative;
    }
    .salepill {
    background: rgb(232, 35, 25);
    color: white;
    font-family: 'Barlow', sans-serif;
    position: absolute;
    right: 30px;
    top: 60px;
    padding: 2px 10px 4px;
    text-transform: uppercase;
    font-size: 13px;
    font-weight: 700;
    border-radius: 1000px;
    }
    .author{
    color: #FFF;
    border-radius: 10px;
    background: teal;
    }
    .own-url{
    font-size: .8rem;
    color: black;
    }
    .story {
    background-color: #fff;
    padding: 20px 30px 20px 80px;
    border-bottom: 1px solid #eee;
    position: relative;
    line-height: 20px;
    }
    .score {
    color: #f60;
    font-size: 1.1em;
    font-weight: 700;
    position: absolute;
    top: 50%;
    left: 0;
    width: 80px;
    text-align: center;
    margin-top: -10px;
    }
    .story a {
    color: #34495e;
    font-weight: 600;
    text-decoration: none;
    }
    .story a span {
    font-size: 0.85em;
    margin-left: 10px;
    color: #828282;
    }
    .story .meta {
    font-size: 0.85em;
    color: #828282;
    }
    &amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This component is created with flexibility in mind, it accepts the ‘item’ and ‘Index’ as props. Props in vue.js are used to pass data from one component to the other. We won't dive really deep into veu.js as it is beyond the scope of this tutorial.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;singleStoryItem.vue&lt;/code&gt; component:&lt;/p&gt;

&lt;p&gt;copy and paste the code below to create the component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;template&amp;gt;
    &amp;lt;div class="comment-container"&amp;gt;
    &amp;lt;h2 class="story-title"&amp;gt;{{ item.title }}&amp;lt;/h2&amp;gt;
    &amp;lt;p class="score"&amp;gt;Votes: {{ item.score }}&amp;lt;/p&amp;gt;
    &amp;lt;p class="author-url"&amp;gt;{{ item.url }}&amp;lt;/p&amp;gt;
    &amp;lt;div v-for="(comment, index) in comments" :key="index"&amp;gt;
    &amp;lt;div class="comment-wrap"&amp;gt;
    &amp;lt;div class="comment-block"&amp;gt;
    &amp;lt;p class="comment-text"&amp;gt;{{ comment.text }}&amp;lt;/p&amp;gt;
    &amp;lt;div class="bottom-comment"&amp;gt;
    &amp;lt;div class="comment-author"&amp;gt;{{ comment.by }}&amp;lt;/div&amp;gt;
    &amp;lt;div class="comment-date"&amp;gt;{{ comment.time }}&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;/template&amp;gt;
    &amp;lt;script&amp;gt;
    export default {
    name: "single-story",
    props:{
    item: {
    type: Object,
    required: true,
    },
    comments:{
    type: Array,
    required: true,
    }
    }
    }
    &amp;lt;/script&amp;gt;
    &amp;lt;style scoped&amp;gt;
    .comment-container{
    width: 60%;
    margin: 0 auto;
    color: #000;
    }
    .story-title, .score, .author-url{
    padding: 1rem;
    }
    .story-title{
    text-transform: uppercase;
    font-weight: 900;
    }
    .author-url{
    font-size: .8rem;
    font-weight: 900;
    }
    .score{
    font-weight: 900;
    }
    .comment-wrap {
    margin-bottom: 1.25rem;
    display: table;
    width: 100%;
    min-height: 5.3125rem;
    }
    .photo {
    padding-top: 0.625rem;
    display: table-cell;
    width: 3.5rem;
    }
    .photo .avatar {
    height: 2.25rem;
    width: 2.25rem;
    border-radius: 50%;
    background-size: contain;
    }
    .comment-block {
    padding: 1rem;
    background-color: #fff;
    display: table-cell;
    vertical-align: top;
    border-radius: 0.1875rem;
    -webkit-box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.08);
    box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.08);
    }
    .comment-block textarea {
    width: 100%;
    resize: none;
    }
    .comment-text {
    margin-bottom: 1.25rem;
    }
    .bottom-comment {
    color: #acb4c2;
    font-size: 0.875rem;
    }
    .comment-date {
    float: left;
    }
    .comment-actions {
    float: right;
    }
    .comment-actions li {
    display: inline;
    margin: -2px;
    cursor: pointer;
    }
    .comment-actions li.complain {
    padding-right: 0.75rem;
    border-right: 1px solid #e1e5eb;
    }
    .comment-actions li.reply {
    padding-left: 0.75rem;
    padding-right: 0.125rem;
    }
    .comment-actions li:hover {
    color: #0095ff;
    }
    &amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;singleStoryItem.vue&lt;/code&gt; component is similar to &lt;code&gt;singleItem.vue&lt;/code&gt; the difference is that I removed the &lt;code&gt;index&lt;/code&gt; prop and added the &lt;code&gt;comment&lt;/code&gt; prop with the ‘type: Array’. You will understand why I have chosen to build this component this way in the next section.&lt;/p&gt;

&lt;p&gt;Building the Home and SingleStory View:&lt;br&gt;
Home view:&lt;/p&gt;

&lt;p&gt;copy and paste the code below to create the home view:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;template&amp;gt;
    &amp;lt;div class="home"&amp;gt;
    &amp;lt;div class="banner"&amp;gt;
    &amp;lt;h2 class="header"&amp;gt;Hacker News API Implementation&amp;lt;/h2&amp;gt;
    &amp;lt;img class="home-img" src="../assets/bk-sale.png"&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;storyItem v-for="(story, index) in stories" :key="index" :item="story" :index="index"&amp;gt;&amp;lt;/storyItem&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;/template&amp;gt;
    &amp;lt;script&amp;gt;
    // @ is an alias to /src
    import storyItem from '@/components/storyItem.vue';
    import { storiesWithItems, sortByScore } from '../services/storyService';
    export default {
    name: 'Home',
    components: {
    storyItem
    },
    data(){
    return{
    stories: [],
    }
    },
    created(){
    storiesWithItems().then(res =&amp;gt; {
    this.stories = res.sort(sortByScore);
    });
    },
    }
    &amp;lt;/script&amp;gt;
    &amp;lt;style scoped&amp;gt;
    .content {
    /*no grid support*/
    float: left;
    width: 79.7872%;
    /* grid */
    display: grid;
    grid-template-columns: repeat(10, 1fr);
    padding: 0 !important;
    margin: 30px;
    }
    .banner{
    display: flex;
    flex-direction: row;
    align-content:space-between;
    background-color: teal;
    }
    .header{
    font-weight: 900;
    margin: 4rem;
    width: 60%;
    }
    .home-img{
    width: 40%;
    }
    &amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You noticed I imported the &lt;code&gt;singleItem&lt;/code&gt; component as a child component and the &lt;code&gt;storiesWithItem()&lt;/code&gt; function from the &lt;code&gt;storyService&lt;/code&gt; into the home view. The data supplied to the props is the response from &lt;code&gt;storiesWithItems()&lt;/code&gt; function. This is part of the reason why it was wise to make our App rousable, so we ended up making only one request with the ‘created block’ to execute this task.&lt;/p&gt;

&lt;p&gt;SingleStory View:&lt;/p&gt;

&lt;p&gt;copy and paste the code below to create the home view:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;template&amp;gt;
    &amp;lt;div class="home"&amp;gt;
    &amp;lt;div class="banner"&amp;gt;
    &amp;lt;h2 class="header"&amp;gt;Hacker News API Implementation&amp;lt;/h2&amp;gt;
    &amp;lt;img class="home-img" src="../assets/bk-sale.png"&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class="container"&amp;gt;
    &amp;lt;singleStoryItem :item="story" :comments="comments"&amp;gt;&amp;lt;/singleStoryItem&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;/template&amp;gt;
    &amp;lt;script&amp;gt;
    // @ is an alias to /src
    import singleStoryItem from '@/components/singleStoryItem.vue';
    import {getSingleItem, getSingleStoryComments } from '../services/storyService';
    export default {
    name: 'Home',
    components: {
    singleStoryItem
    },
    data(){
    return{
    story: {},
    comments: [],
    }
    },
    created(){
    getSingleItem(this.$route.params.id).then(res =&amp;gt; {
    this.story = res;
    });
    getSingleStoryComments(this.$route.params.id).then(res =&amp;gt; {
    this.comments = res;
    })
    },
    }
    &amp;lt;/script&amp;gt;
    &amp;lt;style scoped&amp;gt;
    .content {
    /*no grid support*/
    float: left;
    width: 79.7872%;
    /* grid */
    display: grid;
    grid-template-columns: repeat(10, 1fr);
    padding: 0 !important;
    margin: 30px;
    }
    .banner{
    display: flex;
    flex-direction: row;
    align-content:space-between;
    background-color: teal;
    }
    .header{
    font-weight: 900;
    margin: 4rem;
    width: 60%;
    }
    .home-img{
    width: 40%;
    }
    &amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The output for the above code will result in the screenshot below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IZ1K5X4t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_66EB3394B342F58C3EB699CF072034224DEB5527C0482260FA3F8B1C21FAA122_1596380773708_Screenshot%2B2020-08-02%2Bat%2B09.38.31.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IZ1K5X4t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_66EB3394B342F58C3EB699CF072034224DEB5527C0482260FA3F8B1C21FAA122_1596380773708_Screenshot%2B2020-08-02%2Bat%2B09.38.31.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, update the ‘App.vue’, ‘router.js’ and ‘main.css’ like so:&lt;/p&gt;

&lt;p&gt;router.js:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import Vue from 'vue'
    import VueRouter from 'vue-router'
    import Home from '../views/Home.vue'
    import Single from '../views/SingleStory.vue';
    Vue.use(VueRouter)
    const routes = [
    {
    path: '/',
    name: 'Home',
    component: Home
    },
    {
    path: '/story/:id',
    name: 'single',
    component: Single,
    }
    ]
    const router = new VueRouter({
    mode: 'history',
    base: process.env.BASE_URL,
    routes
    })
    export default router
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You noticed the story path has a parameter “/story/:id” which will be passed to the getSingleStoryComments(id) to fetch the current “item” associated with the “id”.  This is really helpful thanks to the vue.js “$router.params” object.&lt;/p&gt;

&lt;p&gt;App.vue:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;template&amp;gt;
    &amp;lt;div id="app"&amp;gt;
    &amp;lt;div id="nav"&amp;gt;
    &amp;lt;router-link to="/"&amp;gt; Home
    &amp;lt;/router-link&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;router-view/&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;/template&amp;gt;
    &amp;lt;style&amp;gt;
    @import url('./assets/css/main.css');
    &amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;main.css:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/* ---- global styles ---- */
    body,
    html {
      padding: 0;
      margin: 0;
      background: #f3f3f3;
      font-size: 16px;
      word-spacing: 1px;
      -ms-text-size-adjust: 100%;
      -webkit-text-size-adjust: 100%;
      -moz-osx-font-smoothing: grayscale;
      -webkit-font-smoothing: antialiased;
      box-sizing: border-box;
      font-family: Avenir, Helvetica, Arial, sans-serif;
    }
    #app {
      font-family: Avenir, Helvetica, Arial, sans-serif;
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
      color: white;
    }
    h1,
    h2,
    h3,
    h4 {
      font-family: Avenir, Helvetica, Arial, sans-serif;
      font-weight: 700;
    }
    p,
    li {
      font-family: 'Barlow', sans-serif;
    }
    #nav{
      background-color: teal;
      height: 40px;
    }
    #nav a {
      text-decoration: none;
      color: #ffffff;
      margin: .7rem;
      margin-top: .8rem;
    }


    *,
    *:before,
    *:after {
      box-sizing: border-box;
      margin: 0;
    }

    .container {
      padding-right: 15px;
      padding-left: 15px;
      margin-right: auto;
      margin-left: auto;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The full codebase for this tutorial will be available here.&lt;/p&gt;

&lt;p&gt;Constrain:&lt;/p&gt;

&lt;p&gt;While I appreciate the API’s simplicity, I’ve found out that the API requires making a lot of network requests to achieve a single task which I feel isn’t right considering the runtime. Take for instance, in order to pull all comments associated with a particular ‘item’ requires making iterative requests to the ‘item’ endpoint, imagine an item that has up to 300 comments, it will take a lot of time to load.&lt;/p&gt;

&lt;p&gt;The Hackernews API is read-only, which limits the kind of request you can make to read-only. Despite the simplicity of the API, it is good at some things and not for others.&lt;/p&gt;

&lt;p&gt;Conclusion:&lt;/p&gt;

&lt;p&gt;There is a lot of approaches you can leverage to implement this API especially to improve runtime. You can cache the item objects in the browser and only have to make a network request to get the current top 50 ‘ids’, then only request the ones that aren’t currently cached, and then order the ‘items’ by the order in the top 50 list. Feel free to dig deep into this API and explore other concepts. I’ll like to hear from you please drop a comment below. Thank you for reading.&lt;/p&gt;

</description>
      <category>vue</category>
      <category>axio</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Closure? What is a Closure?</title>
      <author>Mohan Murali</author>
      <pubDate>Sun, 24 Jan 2021 08:17:14 +0000</pubDate>
      <link>https://dev.to/_mohanmurali/closure-what-is-a-closure-1m06</link>
      <guid>https://dev.to/_mohanmurali/closure-what-is-a-closure-1m06</guid>
      <description>&lt;p&gt;Today, let's talk about closures in Javascript. I know there are many blogs and articles talking about closures, but still, people seem to find this topic very difficult to understand. I will try to explain closures in my way, which I find easy to understand. Hope this will help you guys as well. Before diving into closures, lets first try to understand the below topics (understanding this will help us have a better understanding of closures)&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt; Scope of a function&lt;/li&gt;
    &lt;li&gt;First Class functions&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#scope-of-a-function" class="anchor"&gt;
  &lt;/a&gt;
  Scope of a function
&lt;/h2&gt;

&lt;p&gt;In Javascript, whenever we create a function, it creates a scope. Any variables declared within the scope can be accessed throughout the function. So if we have a function, within a function, it will have access to all the variables of its parent function. Let's look into one example here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function main(){
    var a = 10;
    var b = 25;

    function test(){
        console.log(a+b);
    }

    test();
}

main();
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the above example, we have a main function that has 2 variables, a and b. Inside the main function, we have another function test. Test doesn't have any variables of its own. It accesses the variable of its parent, in this case, it is the main function. When we run this code, we see the output to be 35, which is the sum of a and b (10+25).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;35
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Basically, javascript tries to see if the variables a and b are present inside the test function. If it's not present then it will try to check if these values are present in its parents. If that is also not presents it will try to check for the parent of the parent and so on. In our case, the values a and b were present in the parent, i.e the main function, so test did not throw any error.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note: the variables can only the accessed from child to parent and not the other way around. If the variables a and b were present in the test function, the main function would not have access to these variables&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now that we have some idea of how the scope works in javascript, let's move on to first class functions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#first-class-functions" class="anchor"&gt;
  &lt;/a&gt;
  First Class functions
&lt;/h2&gt;

&lt;p&gt;Functions in javascript are treated like any other object. You can pass the function as an argument to another function, you can store it in a variable and also you can return functions from another function. Let's look at an example for each of these,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function assigned(){
    console.log("this function is assigned to a variable");
}

var a = assigned;

a();
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In this example, we are creating a function assigned to a variable and then calling it. This process of creating a named function and assigning it to a variable is called &lt;em&gt;named function expression&lt;/em&gt;.  Now let's see how we can pass a function as an argument to another function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function one(x){
    console.log(x());
}

function two(){
    return "this is function two";
}

one(two);
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the above example, we are passing function two, which is returning a string to function one. If we run this we will see the following log.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;this is function two
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Usually, the function that is passing in as an argument is called as &lt;em&gt;Callback function&lt;/em&gt;.  We can also return a function from another function as shown in the example below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function sample(){
    function test (){
        console.log("this is test function");
    }

    return test;
}

sample()();
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here we are creating a function test inside the function sample. We are not invoking test anywhere inside sample, but instead, we are returning it. We are invoking both the functions sample and function test by the two () brackets after sample as shown in the above code &lt;code&gt;Sample()()&lt;/code&gt;. When a function accepts other function as its argument or returns a function then it is called as &lt;em&gt; higher order function&lt;/em&gt;.  The output for the above code will be like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;this is test function
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let's now use what we have learned till now and try to understand what closure is.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-closures" class="anchor"&gt;
  &lt;/a&gt;
  What are Closures?
&lt;/h2&gt;

&lt;p&gt;We now know that any function inside another function will have access to all the variables of its parent function. We also know that we have the ability to return this function. So what will happen when we return a function that is accessing a variable of its parent function? Voilà, we have just understood what a closure is!&lt;/p&gt;

&lt;p&gt;According to the definition from MDN "A &lt;strong&gt;closure&lt;/strong&gt; is the combination of a function bundled together (enclosed) with references to its surrounding state (the &lt;strong&gt;lexical environment&lt;/strong&gt;)." Basically, any function which has access to the variables of its parent's scope, together with its parent scope forms a closure. Let's take an example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function parent(){
    var a = 10;
    var b = 25;

    function child (){
        console.log(a+b)
    }

    return child;
}

var x = parent();
//300 lines of code;
x();

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If we see the output of the above function, it will be the same as our first example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;35
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In this example, we have returned the output of the parent function and assigned it to variable x. After doing some process in the 300 lines of code we decide to call the function stored in variable x to see if we still have access to the variables of the function parent.  And we do!&lt;br&gt;
But wait a minute, if we call the parent function and get back the child function, then if we try to access the variables of the parent function from the child function, should we not get undefined? Well, the answer is no. You see, this is the beauty of closures. Even when the parent function has finished its execution and is no longer available in the call stack, the variables used by the child functions will still be stored in the memory and will be available for reference for the child function. The javascript garbage collector does not clear the memory for any variables that are being used by a child function even after the execution of the parent function.&lt;/p&gt;

&lt;p&gt;If that is the case, will it not consume more space than a normal function? Yes, it will. That's why we have to be careful not to bloat our code with closures, else it will affect the performance and might even cause memory leaks.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;So closures are nothing but functions combined with variables of its lexical scope (parent scope). In theory, every function in javascript forms a closure as they all have access to variables in the global scope. Hope this explanation made your understanding of closures a little better. Closures are not a unique concept in javascript and are a pretty common concept in functional programming. Understanding closure will definitely help in getting a better understanding of other functional programming concepts.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>functional</category>
      <category>codenewbie</category>
      <category>programming</category>
    </item>
    <item>
      <title>It's alright to take a break</title>
      <author>Chris Bongers</author>
      <pubDate>Sun, 24 Jan 2021 06:12:10 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/it-s-alright-to-take-a-break-440a</link>
      <guid>https://dev.to/dailydevtips1/it-s-alright-to-take-a-break-440a</guid>
      <description>&lt;p&gt;Yes, I'm here to tell you, you should take a break.&lt;br&gt;
Breaks are important they help us see things from a different perspective.&lt;/p&gt;

&lt;p&gt;It doesn't mean one truth, it means take enough time for that moment in time to feel like a break.&lt;/p&gt;

&lt;p&gt;I hope that makes sense, but we will be going through some examples and their importance.&lt;/p&gt;

&lt;p&gt;In this article:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#small-breaks-to-solve-issues"&gt;Small breaks to solve issues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#weekend-breaks-to-recover"&gt;Weekend breaks to recover&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#holidays"&gt;Holidays&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#longer-breaks-to-prevent-burnouts"&gt;Longer breaks to prevent burnouts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#slowed-down-breaks"&gt;Slowed down breaks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/4VUiK7uleZ7BcP21Sx/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/4VUiK7uleZ7BcP21Sx/giphy.gif" alt="Mark Wahlberg breaking a computer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#small-breaks-to-solve-issues" class="anchor"&gt;
  &lt;/a&gt;
  Small breaks to solve issues
&lt;/h2&gt;

&lt;p&gt;I think it's fair to say we have all been here, staring at the screen for 3 hours hoping your brain will solve that one pesky bug.&lt;/p&gt;

&lt;p&gt;It just doesn't want to be solved and it's driving you insane. Your posture sucks, your brain hurts and it almost feels like you can't be taken seriously as a developer anymore.&lt;/p&gt;

&lt;p&gt;However, 🛑 Stop for a second, walk away from the computer, but more importantly from the situation.&lt;/p&gt;

&lt;p&gt;Try not to think about that stupid bug and take a short walk.&lt;/p&gt;

&lt;p&gt;I used to take 5/10 minutes walks when this happened, and at first people in the office would always think that's weird, but it resulted in coming back, viewing the problem from a fresh perspective, and solving it right away.&lt;/p&gt;

&lt;p&gt;At one stage my former boss asked me why I would walk away and I explained the process, more importantly, I told him that walking away for 5/10 minutes surely was more important than me viewing my screen for 3 hours, and he agreed.&lt;/p&gt;

&lt;p&gt;More and more people started to use this method, and it worked. Less stress, more effective bug solving.&lt;/p&gt;

&lt;p&gt;Sidenote: You don't always have to go for a walk, just taking a short break to check Instagram for 10 minutes is also fine.&lt;br&gt;
Yes, people will think it's silly but it's resetting your mind.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Just don't spend more time on these breaks than actually working!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/U3t5kVx4M8DkRa16Sm/giphy-downsized.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/U3t5kVx4M8DkRa16Sm/giphy-downsized.gif" alt="Work to weekend gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#weekend-breaks-to-recover" class="anchor"&gt;
  &lt;/a&gt;
  Weekend breaks to recover
&lt;/h2&gt;

&lt;p&gt;I don't know about you, but I spend most of my weekends still doing some kind of developing, solving problems in my head.&lt;br&gt;
Being reminded of that pesky bug that's waiting for me on Monday.&lt;/p&gt;

&lt;p&gt;And it sucks! We only get 2/7 days off, and even on those 2 days, we struggle with this stuff in our head.&lt;/p&gt;

&lt;p&gt;Even when telling myself I won't do any work you get drawn to it. You're on your phone checking your mail and some silly work emails pops-up you just can't help my note it.&lt;br&gt;
And there your brain goes, down the rabbit hole of problem-solving already.&lt;/p&gt;

&lt;p&gt;That is when weekend breaks are important, the goal to making them work is forcing yourself to have zero tech, what we do is we plan a day trip to a garden, picnic, hike, or whatever you like. Once you made the plan agree with your partner, kids, friends that no technology is allowed.&lt;/p&gt;

&lt;p&gt;You will see within 30 minutes that everyone is more aware of the actual outing and will be grateful for this time off.&lt;/p&gt;

&lt;p&gt;If you want to take this next level, go and try remote camping where you just don't have an option to check your phone or laptop!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/l2SqfuVPmWDuydRHa/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/l2SqfuVPmWDuydRHa/giphy.gif" alt="Holiday gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#holidays" class="anchor"&gt;
  &lt;/a&gt;
  Holidays
&lt;/h2&gt;

&lt;p&gt;Finally, holiday time.&lt;/p&gt;

&lt;p&gt;First of all, I know all to many tech people who don't even take holidays and I was one of them.&lt;/p&gt;

&lt;p&gt;You always think but there is so much work, or, I don't even need a holiday.&lt;/p&gt;

&lt;p&gt;But you do! Holidays are good to recover from stress, and important for personal growth.&lt;/p&gt;

&lt;p&gt;When you are always pushing yourself, making your brain work at 100% capacity you can't really grow as a person.&lt;/p&gt;

&lt;p&gt;It's much like muscles overtraining them won't make them grow, they need rest to actually recover and grow bigger.&lt;/p&gt;

&lt;p&gt;And yes, holidays are quite hard, they often come with much anticipation and handovers. These factors make it hard to get in the relaxed mode. Try and not to look on your devices for the first 1/2 days, by then you should be out of the work mentality.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/wRYbY8OPGkHxS/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/wRYbY8OPGkHxS/giphy.gif" alt="Car doing a burnout"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#longer-breaks-to-prevent-burnouts" class="anchor"&gt;
  &lt;/a&gt;
  Longer breaks to prevent burnouts
&lt;/h2&gt;

&lt;p&gt;Sometimes you might need a longer non-holiday break, often to help prevent burnout.&lt;/p&gt;

&lt;p&gt;And yes, you can feel burnouts coming, are you feeling always grumpy when people even ask you how your day was yesterday. If you want coffee or tea?&lt;/p&gt;

&lt;p&gt;There you go, burnout of some kind upcoming.&lt;/p&gt;

&lt;p&gt;But those are obvious quite extreme, other signs I personally experiences are;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Headaches (very mild, but always there)&lt;/li&gt;
&lt;li&gt;Feeling super slow in your work&lt;/li&gt;
&lt;li&gt;Can't even do simple tasks&lt;/li&gt;
&lt;li&gt;Angry at everything and everyone&lt;/li&gt;
&lt;li&gt;Quickly annoyed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Burnouts in tech are a huge issue, and luckily I see more and more companies fighting against it.&lt;/p&gt;

&lt;p&gt;It's not cool to be pressured into doing "free" overtime every single day!&lt;/p&gt;

&lt;p&gt;Heck, I even stopped doing overtime, tomorrow is another day.&lt;/p&gt;

&lt;p&gt;About 2 months ago, I had three deadlines at the same time, and yes working on multiple projects is a bad idea, but we don't have a choice sometimes.&lt;br&gt;
I felt the burnout coming, couldn't concentrate, was stressed out and angry at my Fiancé.&lt;/p&gt;

&lt;p&gt;I felt like an asshole but decided to call my boss, explain how I was feeling and he didn't hesitate to give me "unlimited" time to recover.&lt;/p&gt;

&lt;p&gt;I know you don't always have this option, so perhaps talk if you can re-arrange your holiday for this period.&lt;/p&gt;

&lt;p&gt;Or, even talk to the team to see if the workload can be re-arranged.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/AposSatwmTvUc/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/AposSatwmTvUc/giphy.gif" alt="Sloth in space"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#slowed-down-breaks" class="anchor"&gt;
  &lt;/a&gt;
  Slowed down breaks
&lt;/h2&gt;

&lt;p&gt;Continuing on the above, you might feel burnout, stress, or peer pressure but not a full one.&lt;/p&gt;

&lt;p&gt;It might be super useful to "slow down" this means working half days for a while.&lt;/p&gt;

&lt;p&gt;Or working 3 days a week, you will be astonished how much even 1 extra weekend day can be.&lt;/p&gt;

&lt;p&gt;It creates space to recover, and reset your brain by breaking it's routine.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#share-your-story" class="anchor"&gt;
  &lt;/a&gt;
  Share your story
&lt;/h2&gt;

&lt;p&gt;I don't think there can ever be enough stories on this topic, please feel free to share your story and ways of coping with breaks.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect" class="anchor"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>watercooler</category>
    </item>
    <item>
      <title>React Test-Driven Development (TDD)</title>
      <author>Marius Espejo</author>
      <pubDate>Sun, 24 Jan 2021 06:11:28 +0000</pubDate>
      <link>https://dev.to/marius/react-test-driven-development-tdd-52f1</link>
      <guid>https://dev.to/marius/react-test-driven-development-tdd-52f1</guid>
      <description>&lt;p&gt;The idea behind Test-Driven Development is quite simple.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Write a test BEFORE you implement your next bit of functionality&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write the minimal implementation needed to make your test pass&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Refactor and re-structure what you've written so far as needed &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Then just keep cycling through those 3 steps as you build out the rest of your project!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-the-following-video-i-talk-about-tdd-in-detail-and-show-you-exactly-how-to-start-doing-it-in-reactjs" class="anchor"&gt;
  &lt;/a&gt;
  In the following video, I talk about TDD in detail and show you exactly how to start doing it in React.js
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/CjoxKgT_Hng"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Let me know in the comments if you have feedback!&lt;/p&gt;

</description>
      <category>react</category>
      <category>showdev</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Authentication in Node.js and JWT Video Tutorial | 1 hour</title>
      <author>Chaoo Charles</author>
      <pubDate>Sun, 24 Jan 2021 06:09:43 +0000</pubDate>
      <link>https://dev.to/chaoocharles/authentication-in-node-js-and-jwt-video-tutorial-1-hour-389</link>
      <guid>https://dev.to/chaoocharles/authentication-in-node-js-and-jwt-video-tutorial-1-hour-389</guid>
      <description>&lt;p&gt;In the following 1 hour tutorial, you will learn how to create API endpoints to handle &lt;code&gt;registration of users&lt;/code&gt;, &lt;code&gt;signIn&lt;/code&gt;, and &lt;code&gt;protection of the API endpoints&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;If you enjoy the content like the video and remember to subscribe to my YouTube channel for more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#auth-in-nodejs" class="anchor"&gt;
  &lt;/a&gt;
  Auth In Node.js 👇
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/wwiwyFXQCHw"&gt;
&lt;/iframe&gt;
 &lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Provide better time estimations with PERTify📈</title>
      <author>Salvador Hernandez</author>
      <pubDate>Sat, 23 Jan 2021 22:09:50 +0000</pubDate>
      <link>https://dev.to/salhernandez/provide-better-time-estimations-with-pertify-3kmk</link>
      <guid>https://dev.to/salhernandez/provide-better-time-estimations-with-pertify-3kmk</guid>
      <description>&lt;p&gt;As I was reading Robert Cecil Martin's &lt;a href="https://www.amazon.com/Clean-Coder-Conduct-Professional-Programmers/dp/0137081073"&gt;&lt;em&gt;The Clean Coder&lt;/em&gt;&lt;/a&gt; I stumbled upon a section in chapter 10 about estimating tasks. Using &lt;a href="https://en.wikipedia.org/wiki/Program_evaluation_and_review_technique"&gt;Project Evaluation and Review Technique (PERT)&lt;/a&gt; you can provide three values for a task: &lt;strong&gt;O&lt;/strong&gt;ptimal, &lt;strong&gt;N&lt;/strong&gt;ominal, and &lt;strong&gt;P&lt;/strong&gt;essimistic, and generate how long it was expected to finish a task. I wanted to try it out, but didn't want to write all the equations when being asked to provide estimates. I could have used any of the PERT calculators out there, but like a typical developer, I set out to create a tool that fitted my needs, hence &lt;a href="https://pertify.salhernandez.io/"&gt;PERTify&lt;/a&gt;. PERTify is hosted on AWS using &lt;a href="https://aws.amazon.com/cloudfront/"&gt;CloudFront&lt;/a&gt; and &lt;a href="https://aws.amazon.com/s3/"&gt;S3&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This application is optimized for desktop screens!&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#pert" class="anchor"&gt;
  &lt;/a&gt;
  PERT
&lt;/h1&gt;

&lt;p&gt;PERT is a statistical tool used in project management, which was designed to analyze and represent the tasks involved in completing a given project. The scheme provides a simple and effective way to convert estimates into probability distributions. For PERTify, we will be using tasks and subtasks, instead projects and tasks.&lt;/p&gt;

&lt;p&gt;For an in depth explanation of the calculations, please visit &lt;a href="https://codingjourneyman.com/2014/10/06/the-clean-coder-estimation/"&gt;The Clean Coder: Estimation&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Program_evaluation_and_review_technique"&gt;Wikipedia&lt;/a&gt;, and &lt;a href="https://www.linkedin.com/pulse/what-pert-how-can-we-use-dave-fourie-pmp-prince2-/"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#pertify" class="anchor"&gt;
  &lt;/a&gt;
  PERTify
&lt;/h1&gt;

&lt;p&gt;For each row (&lt;strong&gt;subtask&lt;/strong&gt;) you will see the calculated probability distribution (&lt;strong&gt;μ&lt;/strong&gt;) and standard deviation of the probability distribution (&lt;strong&gt;σ&lt;/strong&gt;). &lt;strong&gt;σ&lt;/strong&gt; measures how uncertain the task is.&lt;br&gt;
At the top left of the card you will find &lt;strong&gt;μ sequence&lt;/strong&gt; which is the sum of all the subtasks' expected duration, and &lt;strong&gt;σ sequence&lt;/strong&gt; which is the standard deviation for all the subtasks.&lt;/p&gt;

&lt;p&gt;We will using hours as the unit of measurement.&lt;br&gt;
&lt;strong&gt;Alpha&lt;/strong&gt; is estimated to be done in 4.2 (&lt;strong&gt;μ&lt;/strong&gt;) hours. However, the estimated time to finish &lt;strong&gt;Alpha&lt;/strong&gt;, &lt;strong&gt;Beta&lt;/strong&gt;, and &lt;strong&gt;Gamma&lt;/strong&gt; is 14.2 (&lt;strong&gt;μ sequence&lt;/strong&gt;) hours with a standard deviation of 3.1 (&lt;strong&gt;σ sequence&lt;/strong&gt;) hours.&lt;/p&gt;

&lt;p&gt;Using the standard deviation we can calculate different estimates:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;14.2 hours

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;μ sequence&lt;/strong&gt; + ( 0 * &lt;strong&gt;σ sequence&lt;/strong&gt; )&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;17.3 hours

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;μ sequence&lt;/strong&gt; + ( 1 * &lt;strong&gt;σ sequence&lt;/strong&gt; )&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;20.4 hours

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;μ sequence&lt;/strong&gt; + ( 2 * &lt;strong&gt;σ sequence&lt;/strong&gt; )&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The task is set to take 14.2 hours, or 17.3 hours, or 20.4 hours, etc... But will most likely take &lt;strong&gt;14 hours&lt;/strong&gt; after rounding down &lt;strong&gt;14.2&lt;/strong&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#demo" class="anchor"&gt;
  &lt;/a&gt;
  Demo
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aSNmRl69--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xiw86ib6i4ponxunc4t7.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aSNmRl69--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xiw86ib6i4ponxunc4t7.gif" alt="PERTify Demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-i-learned" class="anchor"&gt;
  &lt;/a&gt;
  What I learned
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;How to use 

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://material-ui.com/"&gt;Material-UI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devexpress.github.io/devextreme-reactive/react/grid/docs/guides/data-formatting/"&gt;DevExtreme React Grid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chrome.google.com/webstore/detail/tag-assistant-by-google/kejbdjndbnbjgmefkgdddjlbokphdefk"&gt;Tag Assistant Chrome Extension to Debug Google Analytics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://analytics.google.com/"&gt;Google Analytics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#links" class="anchor"&gt;
  &lt;/a&gt;
  Links
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/salhernandez/pertify"&gt;GitHub Repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pertify.salhernandez.io/"&gt;PERTify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codingjourneyman.com/2014/10/06/the-clean-coder-estimation/"&gt;The Clean Coder: Estimation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Program_evaluation_and_review_technique"&gt;Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/pulse/what-pert-how-can-we-use-dave-fourie-pmp-prince2-/"&gt;LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What is your favorite Task Estimation tool? Let me know in the comments!&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>productivity</category>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>What You Should Do as a Junior Developer</title>
      <author>Hello Dev World Blog</author>
      <pubDate>Sat, 23 Jan 2021 22:03:46 +0000</pubDate>
      <link>https://dev.to/hellodevworldblog/what-you-should-do-as-a-junior-developer-20og</link>
      <guid>https://dev.to/hellodevworldblog/what-you-should-do-as-a-junior-developer-20og</guid>
      <description>&lt;p&gt;Congrats! You have chosen the best and most overwhelming career and you are at the magical point where very little is expected of you. There are so many great things about being a developer or software engineer but be sure to do these things as a junior engineer to get your career on the right track!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-ask-questions" class="anchor"&gt;
  &lt;/a&gt;
  1. Ask Questions
&lt;/h1&gt;

&lt;p&gt;Some people may think this is a given but you may be amazed how many junior engineers feel they should know everything and stay quiet rather than asking questions, or they think their question is stupid so they don’t want to ask it. As a junior developer people do not expect you to know everything and that is okay! However, they don’t know what you don’t unless you ask them! You also may ask questions that make the team think about how they have implemented something in a different way or bring up something they have never thought of. A fresh pair of eyes is always a good thing. &lt;/p&gt;

&lt;p&gt;Also learn the right questions to ask. Asking a question may sound basic like, Rachael I learned how to do that in kindergarten. But, there is asking questions and there is asking the right questions. Watch your seniors and see how they are phrasing their questions and the kind of clarifying questions they are asking. It is important to learn the amount of information to give out, the right questions to ask, and the right way to phrase them to save yourself a lot of headaches. It will ensure you stay in good political (office politics) standing and make sure that you are doing the right work not the work you think is what is right. You will frequently find yourself in situations where you aren’t clear about what the business wants and need to learn how to ask what they need. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-find-the-right-mentor-or-two" class="anchor"&gt;
  &lt;/a&gt;
  2. Find THE RIGHT mentor or two
&lt;/h1&gt;

&lt;p&gt;This may be beating a dead horse but seriously do it. I have learned SO much from all of my mentors. They are frequently my senior that I am under or other seniors in my company. Your mentor does not have to be in your company, on your team, or even a dev. Having a business mentor to help you navigate working in a company and being in an office is so important. They will help you understand how to present yourself and be yourself without upsetting other people around you. I personally have had multiple developers and non-developer mentors all of which have taught me very important lessons.&lt;/p&gt;

&lt;p&gt;The most important part of this is finding the right mentor. Your company may assign someone to be your “mentor” but you don’t really get along with them or maybe they just show no interest in helping you. That’s fine, find someone else. Find someone that goes the extra mile to make sure you understand why decisions are being made, why you are implementing something in a certain way, and shows interest in you as a person and your career. I am personally great friends with all my mentors and they are people I talk to daily. Seriously take time to find them. They will be SO important in your career progression!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-learn-the-principals-of-development" class="anchor"&gt;
  &lt;/a&gt;
  3. Learn the principals of development
&lt;/h1&gt;

&lt;p&gt;Becoming a software engineer or developer can be super exciting but also daunting at the same time. There are SO many languages to learn and all kinds of fun stuff you can do. Learning the foundations of development and of the specific stack you are working in is SO important. You will find yourself getting much further in your career by focusing on principals. Take your time to understand development principals and the stack your job is requiring you to understand before moving on from there. Principals and a lot of the base knowledge will transfer to other languages. You will find picking up languages is much easier when you understand the principles and designs behind software development.&lt;/p&gt;

&lt;p&gt;I see SO many juniors trying to learn a bunch of different frameworks and skip the basics because why would you use the basics of the framework does it for you?! Well, there are a lot of reasons. I touch on those in this article if you want to learn more about that!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-learn-how-to-debug" class="anchor"&gt;
  &lt;/a&gt;
  4. Learn how to debug
&lt;/h1&gt;

&lt;p&gt;This will save you SO MUCH TIME. Debugging is a skill that is so important. Being able to quickly know what is wrong and how to figure out where the error is happening is no a skill every developer has. If you learn how to debug properly you can write and fix code so much faster. It will also save you a lot of frustration. This however leads back to understanding the language as a whole. Being able to understand how things work will help you understand what the errors mean and how to read the stack traces you are getting. Be sure your dev mentor is good at debugging and spends time with you to teach you how to save yourself a lot of time and headache! &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-ask-for-feedback" class="anchor"&gt;
  &lt;/a&gt;
  5. Ask for feedback
&lt;/h1&gt;

&lt;p&gt;Everyone should always be asking for feedback. I ask for feedback on every presentation I do and any architectural decisions I make. As a junior developer, it is so important to get feedback about everything from how you are acting in meetings, to presenting, to your code. You will learn so much from the feedback. You may think you are coming off one way but others are taking it another way and you won’t know unless you ask. Or maybe you think you come off as super nervous while presenting but really no one could tell. You won’t know until you ask. You will find yourself making the right corrections rather than the corrections you think you should be making. Everyone always has something to improve upon. Find out what yours is and start working on it! &lt;/p&gt;

&lt;p&gt;Also, learn how to take feedback. A lot of people take feedback personally or get defensive. If someone is taking the time to give you feedback they are doing it for you, not themselves. They didn’t have to take time out of their day to give you that feedback. Remember they are giving it to you to help you and your career not to make themselves feel better.&lt;/p&gt;

&lt;p&gt;I hoped this helped and I hope you love being a software engineer as much as I do it’s an amazing unique career but also a lot! Take your time! Enjoy your time as a Junior Developer to learn and stoke your passion for it before people actually expect things from you ;p &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>career</category>
    </item>
    <item>
      <title>Simplifying useEffect</title>
      <author>Dominik D</author>
      <pubDate>Sat, 23 Jan 2021 21:41:09 +0000</pubDate>
      <link>https://dev.to/tkdodo/simplifying-useeffect-5fim</link>
      <guid>https://dev.to/tkdodo/simplifying-useeffect-5fim</guid>
      <description>&lt;p&gt;&lt;a href="https://reactjs.org/docs/hooks-reference.html#useeffect"&gt;useEffect&lt;/a&gt;. The hook everybody needs, but nobody wants. According to the official react docs, it's "&lt;em&gt;an escape hatch from React’s purely functional world into the imperative world&lt;/em&gt;". The &lt;a href="https://overreacted.io/a-complete-guide-to-useeffect/"&gt;complete guide to useEffect&lt;/a&gt; by Redux author and React core team member &lt;a href="https://twitter.com/dan_abramov"&gt;Dan Abramov&lt;/a&gt; is a 49 minute read - and it takes at least twice the time to &lt;em&gt;really&lt;/em&gt; comprehend it.&lt;/p&gt;

&lt;p&gt;useEffect is about as complex as it can get in ReactJs, and it is very unlikely that you can write an application without it. So let's try and apply some good principles to make working with useEffect more manageable:&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-write-fewer-effects" class="anchor"&gt;
  &lt;/a&gt;
  1. Write fewer effects
&lt;/h1&gt;

&lt;p&gt;I've already written about a couple of ways to reduce the amount of effects in the &lt;a href="//./tags/use-state-pitfalls"&gt;useState pitfalls series&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  In &lt;a href="https://tkdodo.eu/blog/dont-over-use-state"&gt;part 1&lt;/a&gt;, we've established that some effects can be replaced with &lt;em&gt;useMemo&lt;/em&gt; or even just normal function executions.&lt;/li&gt;
&lt;li&gt;  In &lt;a href="https://tkdodo.eu/blog/putting-props-to-use-state"&gt;part 2&lt;/a&gt;, I've outlined why trying to sync different react states with &lt;em&gt;useEffect&lt;/em&gt; is likely an anti-pattern and what you can do instead.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#data-fetching" class="anchor"&gt;
  &lt;/a&gt;
  Data fetching
&lt;/h2&gt;

&lt;p&gt;Data fetching is a very common side effect that is typically managed with &lt;em&gt;useEffect&lt;/em&gt;. After all, most apps need to fetch data from somewhere. The scenario is so common that there are some very good libraries out there that will not only help you to make the complex logic more declarative, they will also give you a bunch of great additional features.&lt;/p&gt;

&lt;p&gt;I'm obviously going to recommend my favourite open source library, &lt;a href="https://react-query.tanstack.com/"&gt;react-query&lt;/a&gt; (I doubt that I will be able to write another article without mentioning it 😅), but &lt;a href="https://swr.vercel.app/"&gt;SWR&lt;/a&gt;, &lt;a href="https://apollographql.com/client"&gt;Apollo&lt;/a&gt; and also &lt;a href="https://rtk-query-docs.netlify.app/"&gt;RTK-Query&lt;/a&gt; are great as well. The point is: don't try and re-invent the wheel. Some problems have been solved before and are worth abstracting away. The amount of useEffects that I've had to write has been drastically reduced since I'm using react-query.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-follow-the-singe-responsibility-principle" class="anchor"&gt;
  &lt;/a&gt;
  2. Follow the singe responsibility principle
&lt;/h1&gt;

&lt;p&gt;A function or a class should do one thing, and one thing only. Your &lt;code&gt;processPayment&lt;/code&gt; function is hopefully only going to process the payment and not additionally redirecting the user somewhere, because that is not it's responsibility. The same principle applies to the function that you pass to &lt;em&gt;useEffect&lt;/em&gt;. There is no need to tuck everything in one &lt;em&gt;useEffect&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="nx"&gt;trackPageVisit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here, we want to perform some operations, like setting the document title and tracking a page visit with some analytics tool, when the component "mounts". While it may seem minor at first glance, we are doing two very different things in this one effect, and it could easily be split into two effects. The advantage becomes more apparent as dependencies of the effect change over time.&lt;/p&gt;

&lt;p&gt;Suppose we now want to add a feature that syncs some local state with the document title:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTitle&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;
    &lt;span class="nx"&gt;trackPageVisit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Can you spot the bug? Every time the title changes, we are also tracking a page visit, which is probably not what we intended. Spitting it into two effects solves the problem, and I believe we should have done so right from the beginning:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTitle&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;trackPageVisit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Not only is the code now less buggy, it is also easier to reason about. Each effect is now half the size, so you can look at each one in isolation to better grasp what it is doing.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-write-custom-hooks" class="anchor"&gt;
  &lt;/a&gt;
  3. Write custom hooks
&lt;/h1&gt;

&lt;p&gt;I really don't like components where 50% of the code is hook calls. It usually shows that we are mixing our logic with our markup. Tucking them away in a custom hook has multiple advantages, apart from the obvious "you can reuse them":&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-can-name-them" class="anchor"&gt;
  &lt;/a&gt;
  You can name them
&lt;/h2&gt;

&lt;p&gt;Giving variables and functions &lt;a href="//./on-naming-things"&gt;a good name&lt;/a&gt; is like writing documentation, and the same applies to hooks. If you are using TypeScript, you will also benefit from a clearly defined interface:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useTitleSync&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useTrackVisit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;trackPageVisit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;All our effects are now nicely hidden inside custom hooks with descriptive names. Our component will only have two lines of hook calls instead of six, which means it is more focussed on its main responsibility: producing markup.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-can-encapsulate-logic" class="anchor"&gt;
  &lt;/a&gt;
  You can encapsulate logic
&lt;/h2&gt;

&lt;p&gt;This is probably the biggest advantage of custom hooks for me: We can tie things together that belong together, and we don't have to expose everything. The &lt;em&gt;useTitleSync&lt;/em&gt; hook is not ideal: it only covers the effect, and each component still needs to manage that title manually. So why don't we put &lt;em&gt;everything&lt;/em&gt; title related in the custom hook to encapsulate all the logic with it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useTitle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialTitle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTitle&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialTitle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTitle&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We can even take this one step further: If we only intend to show the title in the document title and nowhere else, we can keep the title value in the hook and expose only the setter, producing a minimal interface:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useTitle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialTitle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTitle&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialTitle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;setTitle&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#you-can-test-them-in-isolation" class="anchor"&gt;
  &lt;/a&gt;
  You can test them in isolation
&lt;/h2&gt;

&lt;p&gt;Testing the &lt;em&gt;useTitle&lt;/em&gt; hook without having to test the component that uses it has the advantage that you don't have to think about all the other things that are going on in that component, like page tracking. Testing custom hooks is very similar to testing any other util function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;act&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;renderHook&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@testing-library/react-hooks&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;useTitle&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sets the document title&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;renderHook&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;useTitle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="nx"&gt;act&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#4-give-them-names" class="anchor"&gt;
  &lt;/a&gt;
  4. Give them names
&lt;/h1&gt;

&lt;p&gt;All the above reasons make me want to write custom hooks even if I only use them once. But if you cannot or don't want to extract it to a custom hook for whatever reason, the function passed to &lt;em&gt;useEffect&lt;/em&gt; can still have a name, so consider naming your effects:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTitle&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fuction&lt;/span&gt; &lt;span class="nx"&gt;syncTitle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#5-dont-lie-about-dependencies" class="anchor"&gt;
  &lt;/a&gt;
  5. Don't lie about dependencies
&lt;/h1&gt;

&lt;p&gt;Not even, or actually especially not, for functions. I will just defer to Dan here, because I cannot describe it better than he already does in his &lt;a href="https://overreacted.io/a-complete-guide-to-useeffect/#dont-lie-to-react-about-dependencies"&gt;complete guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One additional thing that I think is worth mentioning is: not every effect needs dependencies. I've seen effects with 8+ dependencies, some of them being objects that are not memoized, so they will trigger the effect in every render anyways. So why bother, the second argument of &lt;em&gt;useEffect&lt;/em&gt; is optional after all. This comes in handy if your effect uses early returns or executes the side effect conditionally:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useInitializePayload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;usePayload&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;performSomeSideEffectThatInitializesPayload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;valueN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The dependency array for this effect would probably be quite large, or we could try to cheat with just &lt;code&gt;[payload]&lt;/code&gt; as dependency. I find both ways to be inferior to just always running the effect and aborting if necessary.&lt;/p&gt;




&lt;p&gt;I hope these tips will reduce complexity for you when working with &lt;em&gt;useEffect&lt;/em&gt;. Let me know in the comments below how you prefer to organize your effects ⬇️&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>typescript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>3 Things I Wish I Knew When I Switched Careers to Coding</title>
      <author>Ben Greenberg</author>
      <pubDate>Sat, 23 Jan 2021 21:25:38 +0000</pubDate>
      <link>https://dev.to/bengreenberg/3-things-i-wish-i-knew-when-i-switched-careers-to-coding-po5</link>
      <guid>https://dev.to/bengreenberg/3-things-i-wish-i-knew-when-i-switched-careers-to-coding-po5</guid>
      <description>&lt;p&gt;It has been nearly four years since I made the career switch from rabbi and educator to software developer. In the time since I've made the switch I have worked as a software engineer at a financial services corporation and as a developer advocate at a communications API company where I focus on platform engineering and the developer experience for Ruby programmers.&lt;/p&gt;

&lt;p&gt;I look back at where I was when I first began this journey in 2017 and there are many things I wish I knew before I began. However, of all the things I wish I had a clear appreciation for, there are three in particular that I think would have been pivotal. &lt;/p&gt;

&lt;p&gt;If you are just starting out in your first job, or you are still contemplating the move to software, I hope these insights I have learned will be helpful for you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-will-never-know-everything" class="anchor"&gt;
  &lt;/a&gt;
  💡 You Will Never Know Everything
&lt;/h2&gt;

&lt;p&gt;I remember when I learned my first bit of code. I don't remember exactly what it was anymore, but I remember how it made me feel: Empowered and terrified, both at the same time!&lt;/p&gt;

&lt;p&gt;On one hand, I had learned how to make the computer do something I did not know how to do before.&lt;/p&gt;

&lt;p&gt;On the other hand, the road from that first basic lesson to "mastery" looked endless. I watched my instructors seemingly conjure up functionality like it was a potions class at Hogwarts. How would I ever get from where I was to there?&lt;/p&gt;

&lt;p&gt;In the years since, I have learned that the learning never ends. There is &lt;strong&gt;always&lt;/strong&gt; more to learn. The very concept of "mastering a language" or "mastering a framework" is a bit of a misconception.&lt;/p&gt;

&lt;p&gt;Yes, you can achieve a lot of familiarity with a language. You can become really comfortable with the syntax, and the underlying approaches. Your code will probably get a lot more sophisticated than when you first began, but even the most veteran developer will tell you that they do not know &lt;em&gt;everything&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Knowing everything is impossible. Perhaps, counter-intuitively, knowing that knowing everything is impossible became even more empowering and reassuring for me.&lt;/p&gt;

&lt;p&gt;An integral part of this career path is to commit to a life of continuous learning. Not every career path is as fully integrated with lifelong learning as software is. &lt;/p&gt;

&lt;p&gt;In some other professions, the completion of the degree or the training signifies the end of the vast majority of your learning. In software, it's the opposite. Whatever training you did -- whether on your own, in a bootcamp or in an academic institution -- that signifies the &lt;strong&gt;beginning&lt;/strong&gt; of your learning, not its completion.&lt;/p&gt;

&lt;p&gt;Now that I have fully come to appreciate that, I am a calmer developer, and I enjoy the learning journey even more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-new-is-not-always-better" class="anchor"&gt;
  &lt;/a&gt;
  💡 What Is New Is Not Always Better
&lt;/h2&gt;

&lt;p&gt;There is always something new in software development. New web frameworks. New languages. New CSS frameworks. New design patterns. New libraries and packages.&lt;/p&gt;

&lt;p&gt;Every developer news website, blog, and conference schedule features these new and shiny things often. When you are just starting out it can feel like you must be ready to switch from one new thing to the next every other day. It can be overwhelming.&lt;/p&gt;

&lt;p&gt;I entered my first software developer job at a financial services corporation expecting that mad rush to new, the never-ending race for the latest shiny toy. I walked into the office the first day ready for the sprint.&lt;/p&gt;

&lt;p&gt;Then, I sat down for my first meeting with the tech lead for the team, and he shared that we were working on a legacy WAMP (Windows, Apache, MySQL, PHP) application and using SVN (Subversion), an older alternative to Git, for version control.&lt;/p&gt;

&lt;p&gt;Where I expected a brand new MacBook Pro, I found an older IBM Thinkpad. Where I expected React and the latest JavaScript, I found PHP version 4 and vanilla and legacy JavaScript.&lt;/p&gt;

&lt;p&gt;It is often cited that the vast majority of the web runs on WordPress, which is powered by PHP. The Ruby language ecosystem does not fall far behind on that dominance of the modern web.&lt;/p&gt;

&lt;p&gt;In many companies, you will find legacy applications that are still powering multi-national operations. Why is that? Well, there's a lot of reasons for that. One of the most common reasons is something that a seasoned engineer I respect a lot once told me:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Old tech is boring. Boring is battle tested. It's community supported. It's stable. Stability is crucial for uptime and overall success.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When I first started out, I thought for sure I would be joining that race of constantly chasing the shiniest new things. Yet, in my four years so far, I have had the privilege to work with mainly PHP and Ruby. By far, these are not the hottest new items in the developer community, but they are far more prevalent in the job market than one is led to believe by only reading blog posts and looking at conference schedules.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#interviewing-goes-both-ways" class="anchor"&gt;
  &lt;/a&gt;
  💡 Interviewing Goes Both Ways
&lt;/h2&gt;

&lt;p&gt;I switched into coding after a relatively successful career in the clergy and in the non-profit sector. I had about a decade of work experience with me when I began my first job search as a newly minted coder. You would think that I had some self-confidence when I entered the interview room. Well, you would be wrong.&lt;/p&gt;

&lt;p&gt;I did not trust my skillset, and as a result I did not trust myself. I forgot that interviewing always goes both ways. As much as the company is interviewing you, you are also interviewing the company.&lt;/p&gt;

&lt;p&gt;Did the company provide you with a take-home project that was wildly complex and gave you an estimate of perhaps over a week to complete it? What does that say about how they value the time of their employees if that's how they treat prospective employees?&lt;/p&gt;

&lt;p&gt;Did the company ask you to answer some questions on a whiteboard in an interview session? Were the questions at all related to the role? How did the interviewer act during that time? Did they encourage you or did they humiliate you if you couldn't implement a binary search algorithm by memory with a marker on a board?&lt;/p&gt;

&lt;p&gt;As much as you want and need a job, the company you're talking to also wants and needs an employee. Each region of the world has different job markets, and some places the scale is tipped much more in favor of the employer than the employee vies-a-vie number of applicants, while in other places it's the opposite.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;However, no matter how the stats look on number of applications in your region for a job, your dignity and your self-worth is not up for negotiation.&lt;/strong&gt; You are a person invested with priceless human dignity, and you ought to be treated that way. It doesn't matter if you are a first-time job seeker as a coder, or a senior software architect. &lt;/p&gt;

&lt;p&gt;If only I had recalled that basic and fundamental truth more often during my first job searches I would have avoided a lot of heartache while being treated poorly by interviewers and companies that showed no respect for the individual in front of them.&lt;/p&gt;

&lt;p&gt;This career path is filled with lots of rewards, and a lot of potential for personal fulfillment. Above all else though, it is crucial to never forget that you are valuable and you are worth respect not because of your job or your proficiency in code, but because you simply exist as a person. As long as you remember that and hold that idea firm, you will go a long way.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>career</category>
      <category>motivation</category>
    </item>
    <item>
      <title>How to write to files with Node.js</title>
      <author>Emma Goto 🍙</author>
      <pubDate>Sat, 23 Jan 2021 20:32:46 +0000</pubDate>
      <link>https://dev.to/emma/how-to-write-to-files-with-node-js-3439</link>
      <guid>https://dev.to/emma/how-to-write-to-files-with-node-js-3439</guid>
      <description>&lt;p&gt;In this post we’ll be covering how you can use the &lt;a href="https://nodejs.dev/learn/the-nodejs-fs-module/"&gt;fs module&lt;/a&gt; in Node.js to write to and modify files with &lt;code&gt;writeFile()&lt;/code&gt; and &lt;code&gt;writeFileSync()&lt;/code&gt;. We’ll also take a look at an alternative library we can use called &lt;a href="https://www.npmjs.com/package/replace-in-file"&gt;replace-in-file&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This post assumes you have a general knowledge of JavaScript syntax, but doesn’t expect any Node.js-specific knowledge.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you want to learn how to write and run a Node.js script, I have covered that in my previous post on &lt;a href="https://www.emgoto.com/nodejs-rename-file"&gt;automating file renaming with Node.js&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#using-fs-writefile-to-write-to-files-asynchronous" class="anchor"&gt;
  &lt;/a&gt;
  Using fs writeFile to write to files (asynchronous)
&lt;/h2&gt;

&lt;p&gt;Let's jump straight into things with an fs &lt;code&gt;writeFile()&lt;/code&gt; example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;writeFile&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/Users/emma/src/emgoto.com/file.txt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// If there's an error, we can do something about it here.&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;writeFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This will change the contents of the file to contain the string “Hello world”.&lt;/p&gt;

&lt;p&gt;The callback function will be executed once the file has been successfully written to, or it errors out.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-fs-writefilesync-to-write-to-files" class="anchor"&gt;
  &lt;/a&gt;
  Using fs writeFileSync to write to files
&lt;/h2&gt;

&lt;p&gt;If you want an synchronous version, you can use &lt;code&gt;writeFileSync&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;writeFileSync&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/Users/emma/src/emgoto.com/file.txt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;writeFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#using-fs-readfilesync-to-read-from-a-file" class="anchor"&gt;
  &lt;/a&gt;
  Using fs readFileSync to read from a file
&lt;/h2&gt;

&lt;p&gt;If you want to modify a file, rather than write over its contents, you'll first need to read it. We can use &lt;code&gt;readFileSync&lt;/code&gt; here:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;readFileSync&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;contents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;readFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;utf8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now you'll have a copy of the file's contents. You can use JavaScript’s replace function to modify it. For example, we could replace “Hello” with “Goodbye”:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Goodbye&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Finally, you would need to call &lt;code&gt;writeFile&lt;/code&gt; (or &lt;code&gt;writeFileSync&lt;/code&gt;) to update the file with the new contents:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;writeFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newContent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#using-fs-readfile-to-read-from-a-file-asynchronous" class="anchor"&gt;
  &lt;/a&gt;
  Using fs readFile to read from a file (asynchronous)
&lt;/h2&gt;

&lt;p&gt;The asynchronous version of &lt;code&gt;readFileSync&lt;/code&gt; is &lt;code&gt;readFile&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;readFile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;writeFile&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Goodbye&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;writeFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newContent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;readFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;utf8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here, when we successfully get the contents of the file (or it errors out), the callback function will be called. Then we can use &lt;code&gt;writeFile&lt;/code&gt; to modify the contents of the file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-effectively-use-javascripts-replace-function" class="anchor"&gt;
  &lt;/a&gt;
  How to effectively use JavaScript’s replace function
&lt;/h2&gt;

&lt;p&gt;In the above example, you’ll notice we were passing strings into JavaScript’s replace function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Goodbye&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This only replaces the first instance of "Hello" with "Goodbye". If you want to replace more than one instance, you’ll can make use of Regex:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/Hello/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Goodbye&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you're rusty on your Regex (or haven’t used it before):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Regex patterns live inside of &lt;code&gt;//&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;g&lt;/code&gt; on the end signifies that it is “global”, which means it will find all occurrences.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/Hello/g&lt;/code&gt; will find all instances of the string “Hello” &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Regex can do many more cool things, but I won’t be diving into that in this post! When writing your Regex patterns, I recommend testing it with a tool like &lt;a href="https://regexr.com/"&gt;RegExr&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As well as strings and Regex, we can also pass in functions!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addSpacesBetweenLetters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; 
    &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/Hello/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;addSpacesBetweenLetters&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This would convert all instances of “Hello” to “H e l l o”.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-replaceinfile-to-write-to-files" class="anchor"&gt;
  &lt;/a&gt;
  Using replace-in-file to write to files
&lt;/h2&gt;

&lt;p&gt;Instead of fs readFile and writeFile, there’s also a handy library we can use called &lt;a href="https://www.npmjs.com/package/replace-in-file"&gt;replace-in-file&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To replace all instances of "Hello" with "Goodbye", you would do the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;replace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;replace-in-file&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/Hello/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Goodbye&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You'll notice that we no longer have to open the file and get its contents - &lt;code&gt;replace-in-file&lt;/code&gt; will handle that for you.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;from&lt;/code&gt; and &lt;code&gt;to&lt;/code&gt; variables accept strings, Regex patterns and functions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fs-writefile-vs-replaceinfile" class="anchor"&gt;
  &lt;/a&gt;
  fs writeFile vs replace-in-file
&lt;/h2&gt;

&lt;p&gt;For simple use cases, fs writeFile will get the job done. There are a couple of extra features that the &lt;code&gt;replace-in-file&lt;/code&gt; library has which make it pretty useful.&lt;/p&gt;

&lt;p&gt;It can replace content in multiple files at once:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;replace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;replace-in-file&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;anotherFileName&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/Hello/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Goodbye&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It can also replace things in bulk:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;anotherFileName&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;/Hello/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sr"&gt;/Foo/g&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Goodbye&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Bar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;When you're using arrays with &lt;code&gt;to&lt;/code&gt; and &lt;code&gt;from&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;from&lt;/code&gt; in the 0th position will convert to the &lt;code&gt;to&lt;/code&gt; in the 0th position&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;from&lt;/code&gt; in the 1st position will convert to the &lt;code&gt;to&lt;/code&gt; in the 1st position&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And so on!&lt;/p&gt;

</description>
      <category>node</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Additional Hooks in React - useRef()</title>
      <author>Olena Drugalya</author>
      <pubDate>Sat, 23 Jan 2021 19:23:37 +0000</pubDate>
      <link>https://dev.to/olenadrugalya/additional-hooks-in-react-useref-82d</link>
      <guid>https://dev.to/olenadrugalya/additional-hooks-in-react-useref-82d</guid>
      <description>&lt;p&gt;This blog post continues the series about &lt;a href="https://reactjs.org/docs/hooks-reference.html"&gt;React Hooks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It covers one of additional hooks in React - &lt;strong&gt;useRef()&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-useref" class="anchor"&gt;
  &lt;/a&gt;
  What is useRef()?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;useRef()&lt;/strong&gt; is JavaScript function, which creates and returns a mutable JavaScript object. &lt;br&gt;
This hook accepts some value and returns an object with the given value. &lt;/p&gt;

&lt;p&gt;Let's look at it more closely below.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-and-when-use-useref" class="anchor"&gt;
  &lt;/a&gt;
  How and when use useRef()
&lt;/h2&gt;

&lt;p&gt;To use this hook, you need to import it first from React library like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can use this hook without import as well like this - &lt;code&gt;React.useRef()&lt;/code&gt;, for me it's just more convenient to import and destructure first this function and then use it when need in the code.&lt;/p&gt;

&lt;p&gt;Afterwards we can set up this hook like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;refBox&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the basic setup above I called a constant &lt;strong&gt;refBox&lt;/strong&gt; not occasionally,  but because we can consider it as a box, which contains an object. The object created by &lt;code&gt;useRef()&lt;/code&gt;has a mutable value in its &lt;code&gt;.current&lt;/code&gt; property. This value is created by &lt;code&gt;initial value&lt;/code&gt; passed to the hook.&lt;br&gt;
NOTE: Mutating the &lt;code&gt;.current&lt;/code&gt; property &lt;strong&gt;doesn’t&lt;/strong&gt; cause a re-render. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#use-cases" class="anchor"&gt;
  &lt;/a&gt;
  Use cases
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Getting access to DOM nodes&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The most popular use case for &lt;code&gt;useRef()&lt;/code&gt; is getting access to DOM nodes. If you pass the value you get from &lt;code&gt;useRef()&lt;/code&gt; as a ref prop on any React element, React will set the &lt;code&gt;.current&lt;/code&gt; property of an element to the corresponding DOM node. This allows you to do things like grab input values or set focus, for example in the Form below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="c1"&gt;//Here we create ref for input field &lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nameRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;//Here variable Name contains the current value of input field &lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nameRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        Name:
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt;
          &lt;span class="na"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;
          &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;
          &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;nameRef&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;  &lt;span class="c1"&gt;//here we add ref property to input &lt;/span&gt;
        &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      //Here we add an event which gets input focus when user clicks the button
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;nameRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;focus&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        Focus Name Input
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;2.Storing Values &lt;/p&gt;

&lt;p&gt;A unique way to implement a &lt;code&gt;useRef()&lt;/code&gt; hook is to use it to store values instead of DOM references. These values can either be a &lt;code&gt;state&lt;/code&gt; that does not need to change too often or a &lt;code&gt;state&lt;/code&gt; that should not trigger full re-rendering of the component.  This can be used when you want to implement toggle function, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;toggled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleToggle&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;toggled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;toggled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;onMouseMove&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleToggle&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;useRef()&lt;/strong&gt; hook is a very handy option for both interacting with DOM elements and storing mutating information in your app without triggering a re-render. However, it is suggested to only use the useRef() when necessary.&lt;/p&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to connect on &lt;a href="https://www.linkedin.com/in/olenadrugalya/"&gt;LinkedIn&lt;/a&gt; or &lt;a href="https://twitter.com/OlenaDrugalya"&gt;Twitter&lt;/a&gt; :)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ko-fi.com/J3J42JOOA"&gt;&lt;img height="12" width="30%" src="https://res.cloudinary.com/practicaldev/image/fetch/s--KS7c42cU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.ko-fi.com/cdn/kofi1.png%3Fv%3D2" alt="Buy Me a Coffee at ko-fi.com"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
