<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What is CSS in JS?</title>
      <author>Anjan Shomooder</author>
      <pubDate>Fri, 17 Sep 2021 15:24:15 +0000</pubDate>
      <link>https://dev.to/thatanjan/what-is-css-in-js-c7d</link>
      <guid>https://dev.to/thatanjan/what-is-css-in-js-c7d</guid>
      <description>&lt;p&gt;CSS in JS is a way of writing css styles in javascript with much more flexibility and features.&lt;/p&gt;

&lt;p&gt;I have already created a video about this on the Cules Coding youtube channel.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Be_C_Op8Tx8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-css-in-js"&gt;
  &lt;/a&gt;
  Why CSS in JS?
&lt;/h2&gt;

&lt;p&gt;Suppose you have a large-scale application with a lot of components.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WV7oUp8S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3hhjzdbu5um2857caf7t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WV7oUp8S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3hhjzdbu5um2857caf7t.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Each component has different styles. So you add class names to them. Those&lt;br&gt;
class names have some styling.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AcrYlC6J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0hkzh47zyoul3gidtuwm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AcrYlC6J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0hkzh47zyoul3gidtuwm.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now it is easy to mess up with component names like the picture below.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xx0bpv6X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5agb2rilnuuzi6xe20gi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xx0bpv6X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5agb2rilnuuzi6xe20gi.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And your whole layout breaks.&lt;/p&gt;

&lt;p&gt;By the way, this blog is originally published on &lt;a href="https://www.culescoding.space/blog/what-is-css-in-js"&gt;cules coding website. &lt;/a&gt; &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y4xNHWOm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/stgvu126ak645n9mxl20.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y4xNHWOm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/stgvu126ak645n9mxl20.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I would be glad if you give it a visit.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-can-this-problem-be-solved"&gt;
  &lt;/a&gt;
  How can this problem be solved?
&lt;/h2&gt;

&lt;p&gt;The solution is &lt;code&gt;Scoping CSS&lt;/code&gt;. Instead of writing css globally in css styles, what if we can write them inside&lt;br&gt;
the component. Then the css styles won't affect other components. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#but-how-do-we-do-something-like-this"&gt;
  &lt;/a&gt;
  But how do we do something like this?
&lt;/h3&gt;

&lt;p&gt;This is where css-in-js comes into play. Css in js is writing css inside&lt;br&gt;
javascript. And we want to write css inside javascript. Now, what css-in-js&lt;br&gt;
the library will do is, it will generate a unique class name for the component. And&lt;br&gt;
that class will have all the styles. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dMbVEByT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z7ugl99slnpqje0d5z8v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dMbVEByT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z7ugl99slnpqje0d5z8v.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It will add a unique hash to the class name. Just because the hash will be&lt;br&gt;
unique, that's why all the components will have a different style. Now we have&lt;br&gt;
Scoping CSS.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-do-we-write-css-in-js"&gt;
  &lt;/a&gt;
  How do we write CSS in JS?
&lt;/h2&gt;

&lt;p&gt;There are bunch of libraries out there. Popular ones are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://styled-components.com/"&gt; Styled Component &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cssinjs.org/"&gt; JSS &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://emotion.sh/docs"&gt; Emotion &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e5j_cBJa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nxfggd0gqpxo6gwgjef9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e5j_cBJa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nxfggd0gqpxo6gwgjef9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I like the Styled Component most. You can use whatever you want.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#dont-think-that-all-you-can-do-with-cssinjs-is-write-scoping-css"&gt;
  &lt;/a&gt;
  Don't think that all you can do with css-in-js is write scoping Css.
&lt;/h2&gt;

&lt;p&gt;There are a lot of features that those libraries provide us. Like theming,&lt;br&gt;
props adaption, extending style, and so on.&lt;/p&gt;

&lt;p&gt;And also remember you are writing in JavaScript. That means you can create your&lt;br&gt;
functionalities and features. So, don't let yourself restrict within the library&lt;br&gt;
features.&lt;/p&gt;

&lt;p&gt;To learn more watch the video. &lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Be_C_Op8Tx8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#shameless-plug"&gt;
  &lt;/a&gt;
  Shameless Plug
&lt;/h2&gt;

&lt;p&gt;I have made a video about how to build a carousel postcard with React, Material-UI, and Swiper.js.&lt;br&gt;
If you are interested you can check the video.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/NDyjI7hd4uE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;You can also demo the application form &lt;a href="https://insta-carousel-demo.vercel.app/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sXlAWXXh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/thatanjan/insta-carousel-yt/development/public/Screenshot%2520of%2520the%2520App.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sXlAWXXh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/thatanjan/insta-carousel-yt/development/public/Screenshot%2520of%2520the%2520App.png" alt="Screenshot of Insta Carousel"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please like and subscribe to &lt;a href="https://www.youtube.com/channel/UCBaGowNYTUsm3IDaHbLRMYw?sub_confirmation=1"&gt;Cules Coding&lt;/a&gt;. It motivates me to create more content like this.&lt;/p&gt;

&lt;p&gt;If you have any questions, please comment down below.&lt;br&gt;
You can reach out to me on social media as &lt;a class="mentioned-user" href="https://dev.to/thatanjan"&gt;@thatanjan&lt;/a&gt;
.&lt;br&gt;
Stay safe. Goodbye.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#about-me"&gt;
  &lt;/a&gt;
  About me
&lt;/h2&gt;
&lt;h4&gt;
  &lt;a href="#why-do-i-do-what-i-do"&gt;
  &lt;/a&gt;
  Why do I do what I do?
&lt;/h4&gt;

&lt;p&gt;The Internet has revolutionized our life. I want to make the internet more beautiful and useful.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#what-do-i-do"&gt;
  &lt;/a&gt;
  What do I do?
&lt;/h4&gt;

&lt;p&gt;I ended up being a full-stack software engineer.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#what-can-i-do"&gt;
  &lt;/a&gt;
  What can I do?
&lt;/h4&gt;

&lt;p&gt;I can develop complex full-stack web applications like social media applications or e-commerce sites.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#what-have-i-done"&gt;
  &lt;/a&gt;
  What have I done?
&lt;/h4&gt;

&lt;p&gt;I have developed a social media application called &lt;a href="https://con-fession.vercel.app/"&gt;Confession&lt;/a&gt;. The goal of this application is to help people overcome their imposter syndrome by sharing our failure stories.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XbQiTDS2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gjay62pz7byne4d8ja8v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XbQiTDS2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gjay62pz7byne4d8ja8v.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also love to share my knowledge. So, I run a youtube channel called &lt;a href="https://www.youtube.com/channel/UCBaGowNYTUsm3IDaHbLRMYw?sub_confirmation=1"&gt;Cules Coding&lt;/a&gt; where I teach people full-stack web development, data structure algorithms, and many more. So, Subscribe to Cules Coding so that you don't miss the cool stuff.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#want-to-work-with-me"&gt;
  &lt;/a&gt;
  Want to work with me?
&lt;/h2&gt;

&lt;p&gt;I am looking for a team where I can show my ambition and passion and produce great value for them.&lt;br&gt;
Contact me through my email or any social media as &lt;a class="mentioned-user" href="https://dev.to/thatanjan"&gt;@thatanjan&lt;/a&gt;
. I would be happy to have a touch with you.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#contacts"&gt;
  &lt;/a&gt;
  Contacts
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Email: &lt;a href="mailto:thatanjan@gmail.com"&gt;thatanjan@gmail.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;linkedin: &lt;a href="https://linkedin.com/in/thatanjan/"&gt;@thatanjan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;portfolio: &lt;a href="https://thatanjan.me/"&gt;anjan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Github: &lt;a href="https://github.com/thatAnjan/"&gt;@thatanjan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Instagram (personal): &lt;a href="https://instagram.com/thatAnjan/"&gt;@thatanjan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Instagram (youtube channel): &lt;a href="https://instagram.com/cules_coding/"&gt;@thatanjan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Twitter: &lt;a href="https://twitter.com/thatAnjan"&gt;@thatanjan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Facebook: &lt;a href="https://www.facebook.com/thatanjan/"&gt;@thatanjan&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Blogs you might want to read:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.culescoding.space/blog/setup-eslint-prettier-with-typescript-and-react"&gt; Eslint, prettier setup with TypeScript and react &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.culescoding.space/blog/what-is-client-side-rendering"&gt;What is Client-Side Rendering?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.culescoding.space/blog/what-is-server-side-rendering"&gt;What is Server Side Rendering?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.culescoding.space/blog/everything-you-need-to-know-about-tree-data-structure"&gt;Everything you need to know about tree data structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.culescoding.space/blog/13-reasons-why-you-should-use-Nextjs"&gt;13 reasons why you should use Nextjs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Videos might you might want to watch:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/rSa8sUC8m_4"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/NDyjI7hd4uE"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/T-n0mrssDiw"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ag3je1g0BN8"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/B3HX2rWyKlU"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/C6VytdSDNSk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>javascript</category>
      <category>react</category>
    </item>
    <item>
      <title>From Zero to Hero: Quick Tips to Navigating Open Source Like a Pro </title>
      <author>Rizel Scarlett</author>
      <pubDate>Fri, 17 Sep 2021 15:19:03 +0000</pubDate>
      <link>https://dev.to/github/from-zero-to-hero-quick-tips-to-navigating-open-source-like-a-pro-4lhl</link>
      <guid>https://dev.to/github/from-zero-to-hero-quick-tips-to-navigating-open-source-like-a-pro-4lhl</guid>
      <description>&lt;p&gt;If you're feeling uncertain about contributing to an open source project for the first time, I understand. Navigating the open source space can feel intimidating. Recently, I overcame my fear of contributing, and I documented the experience &lt;a href="https://blackgirlbytes.dev/conquering-the-fear-of-contributing-to-open-source"&gt;here&lt;/a&gt;. I gained the assurance I needed to make my first contribution by: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;asking for help&lt;/li&gt;
&lt;li&gt;interacting with the community &lt;/li&gt;
&lt;li&gt;thoroughly reading the documentation&lt;/li&gt;
&lt;li&gt;and trusting my skillset &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I found that contributing to open source expanded my network, improved my reputation, boosted my confidence, and increased my technical skills. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#start-small"&gt;
  &lt;/a&gt;
  Start Small
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You don't need to be a technical expert to contribute to open source - the tips below can help you!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tip #1: Read the Contributing.md&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Contributing.md is a markdown document often found at the root of an open source project. The existence of a Contributing.md can indicate that a project is welcoming, inclusive, and organized. For new contributors, this is an optimal way to orient yourself with the project initially. Every open source project may follow slightly different rules, but there's no need to guess what this project's maintainer prefers. If you read the Contributing.md, you'll learn how to: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Set up your developer environment&lt;/li&gt;
&lt;li&gt;Format your code&lt;/li&gt;
&lt;li&gt;Style your components&lt;/li&gt;
&lt;li&gt;Pick up issues&lt;/li&gt;
&lt;li&gt;Create pull requests&lt;/li&gt;
&lt;li&gt;Communicate with other project contributors&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here's an example of what Contributing.md look like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P8oQl_89--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://vinta-cms.s3.amazonaws.com/media/filer_public/4c/9c/4c9c3970-f6cb-4a7f-8bf2-e57a87679580/4_contributing.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P8oQl_89--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://vinta-cms.s3.amazonaws.com/media/filer_public/4c/9c/4c9c3970-f6cb-4a7f-8bf2-e57a87679580/4_contributing.png" alt="Example contributing.md"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Read the Contributing. md, and if you still have questions, reach out to the community!&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tip #2: Join the Triage Team&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Perhaps you're still new to coding or unfamiliar with the programming languages and tooling that the project uses. Fortunately, coding isn't the only way to make an impact. One option is to join the triage team. Taking on a triage role is valuable for both you and the maintainer. Your responsibilities may include: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Identifying needed features &lt;/li&gt;
&lt;li&gt;Recording bugs&lt;/li&gt;
&lt;li&gt;Writing issues&lt;/li&gt;
&lt;li&gt;Organizing, labeling, and prioritizing issues&lt;/li&gt;
&lt;li&gt;Reviewing code&lt;/li&gt;
&lt;li&gt;Testing contributor's pull requests&lt;/li&gt;
&lt;li&gt;Suggesting functionality or coding improvements for pull requests&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Maintainers always need assistance with the above tasks. By performing these tasks, you'll stand out and gain transferable skills for QA or Product roles. Eventually, you may even feel comfortable contributing code to the project. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Not all projects have a triage team. Reach out to the maintainer to ask if they do!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tip #3: Link Your Pull Request to an Issue&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;By linking a pull request to an issue, you can automatically reflect the progress of an issue based on the pull request, which reduces the workload for you &lt;em&gt;and&lt;/em&gt; the maintainer. This allows other collaborators to track the progress of an issue as well. You can do this by adding the keywords closes, resolves, or fixes followed by the issue number inside the pull request's description. &lt;/p&gt;

&lt;p&gt;Example: &lt;code&gt;closes #752&lt;/code&gt;  &lt;/p&gt;

&lt;p&gt;You can also do this manually (shown in the gif below). &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cvBLHVw---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.zenhub.com/content/images/2021/04/GH-keywords.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cvBLHVw---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.zenhub.com/content/images/2021/04/GH-keywords.gif" alt="Example linking pull request to an issue"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Read this &lt;a href="https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue"&gt;guide&lt;/a&gt; for more details on linking your pull request to an issue.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#level-up"&gt;
  &lt;/a&gt;
  Level Up
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Once you are comfortable contributing to open source, you can step up your game with these tips!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tip #4: Leverage Multi-line Comments for Suggestions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;GitHub enables you to highlight multiple lines in a pull request diff and add a comment. You can use this feature while reviewing a collaborator's pull request. If you highlight multiple lines and suggest code changes, the collaborator can directly commit those suggestions to their branch.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nCgmJJHU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.stack.imgur.com/gP2bG.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nCgmJJHU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.stack.imgur.com/gP2bG.gif" alt="Example highlighting multiple lines for comments"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tip #5: Save Your Replies&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As your involvement within the project increases, you may feel like there's not enough time in your day to compose a response to every collaborator. &lt;/p&gt;

&lt;p&gt;Within GitHub, you can create and save reusable responses to specific issues and pull requests. If you ever become the project maintainer or writer, you can also benefit from the saved replies feature. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rg8ZVtQO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.blog/wp-content/uploads/2016/03/5cfe6b80-f293-11e5-8065-e13fe452d394.gif%3Ffit%3D1392%252C708" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rg8ZVtQO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.blog/wp-content/uploads/2016/03/5cfe6b80-f293-11e5-8065-e13fe452d394.gif%3Ffit%3D1392%252C708" alt="Example of saving replies"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tip #6: Automate Your Workflows with GitHub Actions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;GitHub Actions is a tool that conveniently enables you to automate custom workflows inside of your GitHub repository. You can trigger a workflow to run a set of jobs when a specified event, such as a pull request or a push to a particular branch. The next time you find yourself or your collaborators manually repeating tasks, implement GitHub Actions to enhance your CI/CD pipeline. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;For inspiration: Read about how I used &lt;a href="https://blackgirlbytes.dev/how-to-sync-an-s3-bucket-with-github-actions"&gt;GitHub Actions to sync an AWS S3 Bucket&lt;/a&gt; with my GitHub repo.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;For more context: Check out Brian Douglas' &lt;a href="https://youtube.com/playlist?list=PLpURC3VhaQD3fvhLRBc4wb1hzbkoUPasR"&gt;YouTube tutorials&lt;/a&gt; to learn more about GitHub Actions!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Want to get started now? Here’s a &lt;a href="https://vinitshahdeo.dev/beginner-friendly-issues-for-hacktoberfest-2021"&gt;list&lt;/a&gt; of beginner-friendly issues for Hacktoberfest 2021!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>githubactions</category>
      <category>github</category>
    </item>
    <item>
      <title>7 Tips for Successful Pair Programming</title>
      <author>Jenny from the B</author>
      <pubDate>Fri, 17 Sep 2021 14:58:24 +0000</pubDate>
      <link>https://dev.to/jfromtheblock/7-tips-for-successful-pair-programming-776</link>
      <guid>https://dev.to/jfromtheblock/7-tips-for-successful-pair-programming-776</guid>
      <description>&lt;p&gt;Pair programming is a great way to work on a software project and share knowledge. It’s when two or more programmers work together. Usually, one developer is leading while the other is providing feedback and following the development. The benefits of pair programming are many: improved code quality, greater knowledge transfer, and increased motivation and satisfaction among developers. With that said, there are some challenges to overcome when doing pair programming that you need to be aware of.&lt;/p&gt;

&lt;p&gt;Here, are 7 pair programming tips for having a productive coding session:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pair-programming-tip-1-plan-together"&gt;
  &lt;/a&gt;
  Pair programming tip #1: Plan together
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XJuQaH9V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kdjt7t1w029x0fkv9u8k.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XJuQaH9V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kdjt7t1w029x0fkv9u8k.gif" alt="Plan together"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before start programming, plan what you are going to do and what are your goals. Is this about building something new? Debugging? Mentoring a junior developer? Be clear about your goals and communicate them to your partner. It could be that the most experienced developer is responsible for planning, but it doesn't need to be like that. Plan together and have your partner participate too.&lt;br&gt;
Be sure to know a bit about your peer before starting the pair programming session. There are many different ways to do this. Each person should be given the opportunity to chat before the session starts. They can get to know their development’s style, quirks, and preferences. This helps you both understand each other’s mental model and put a plan in practice that makes the session more productive.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Plan your pair programming session:&lt;/li&gt;
&lt;li&gt;What's the task, what we are trying to accomplish&lt;/li&gt;
&lt;li&gt;Length of the session&lt;/li&gt;
&lt;li&gt;How often should change roles&lt;/li&gt;
&lt;li&gt;Any personal preferences&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#pair-programming-tip-2-change-roles-regularly"&gt;
  &lt;/a&gt;
  Pair programming tip #2: Change roles regularly
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MxgTEynx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/4huo31PRqTWve/giphy.gif%3Fcid%3D790b7611faeac6c42bea1a7adda7a2ccde31515d5c02e8c8%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MxgTEynx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/4huo31PRqTWve/giphy.gif%3Fcid%3D790b7611faeac6c42bea1a7adda7a2ccde31515d5c02e8c8%26rid%3Dgiphy.gif%26ct%3Dg" alt="Change roles when pair programming"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the most common mistakes developers make when doing pair programming is switching roles too often or not switching at all. How often you need to change roles depends on the experience level and how long is the session. If the session is less than 60 minutes long, you can switch just one time. If the session is shorter, it might be more productive to have just one person leading, but you still can switch in the half.&lt;br&gt;
If you are working in a longer session, you need to be more conscious about the roles and when to change. It can happen that you are so focused on the task that you forget about changing roles. That's a mistake. Be sure to change regularly and you can use the Pomodoro technique to help with this.&lt;br&gt;
In summary: to make things simple, start by changing roles every 30 minutes using the Pomodoro timer. Don't let your excitement of coding prevent you from giving the opportunity to the other developer to be leading the session.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pair-programming-tip-3-good-audio-and-video-setup"&gt;
  &lt;/a&gt;
  Pair programming tip #3: Good audio and video setup
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_aDjoiqT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/hwdbyECRhzjXMzrDze/giphy.gif%3Fcid%3D790b7611483c84377ea719735a76d179dd779815ecd97e5d%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_aDjoiqT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/hwdbyECRhzjXMzrDze/giphy.gif%3Fcid%3D790b7611483c84377ea719735a76d179dd779815ecd97e5d%26rid%3Dgiphy.gif%26ct%3Dg" alt="Good audio and video"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Naturally, the pair programming tips from this guide are considering that you are working remotely. In this scenario is crucial to have a good audio and video setup that allows you to communicate clearly.&lt;br&gt;
First a basic pair programming tip: Be sure to have a good internet connection and to be in a place without much noise.&lt;br&gt;
Although is not required, it's good practice to turn ON your video camera when pair programming. Communication is not only about what you say, but your body expression, how your face is reacting, etc. By having a video camera active your colleague can be more engaged and the session can be more entertaining for both sides.&lt;br&gt;
For audio communication, be sure to use headsets. You don't need to go crazy with professional fancy audio equipment. Anything that makes you comfortable works. A headset that you can properly hear the other person and that they can understand you is already good enough.&lt;br&gt;
Some tools like Duckly (shameless plug, I know) can help you a lot here as it has all the features for real-time code sharing and audio and video communication.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pair-programming-tip-4-avoid-micromanagement"&gt;
  &lt;/a&gt;
  Pair programming tip #4: Avoid micro-management
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G33vkqPm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/eJdm1B40mtj4nmUgyS/giphy-downsized.gif%3Fcid%3D790b76110490a9ff4ebd3126f64b8904c7cdfcc58ff496dc%26rid%3Dgiphy-downsized.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G33vkqPm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/eJdm1B40mtj4nmUgyS/giphy-downsized.gif%3Fcid%3D790b76110490a9ff4ebd3126f64b8904c7cdfcc58ff496dc%26rid%3Dgiphy-downsized.gif%26ct%3Dg" alt="Avoid micro-management"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the most annoying and counter-productive behaviors that can happen in a pair programming session is when a developer starts to micro-manage. This is more common than you know, but really kills the purpose of the pair programming. To have a safe environment for collaboration that increases knowledge sharing between developers.&lt;br&gt;
Micro-management usually happens when one developer is more experienced (or just more opinionated) and try to force their point-of-view, dictate code, and is rigid about how exactly things should be done. This creates a negative feedback loop where confidence is low, more mistakes are done, more line-per-line comments...making the session slower and less collaborative.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pair-programming-tip-5-be-nice-and-patient"&gt;
  &lt;/a&gt;
  Pair programming tip #5: Be nice and patient
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tc4uae6E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/aAqGpWoSgGjnO/giphy.gif%3Fcid%3D790b7611ab16fd80145eaf7daa40131f6d01b1b95569fc2b%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tc4uae6E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/aAqGpWoSgGjnO/giphy.gif%3Fcid%3D790b7611ab16fd80145eaf7daa40131f6d01b1b95569fc2b%26rid%3Dgiphy.gif%26ct%3Dg" alt="Be nice and patient"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Similar to micro-management, lack of patient makes the pairing experience much worst. This could happen when working with people with different skill levels and when a more experienced dev doesn't give their partner time to process their code. It can be tempting to be interrupting their flow to quickly correct errors, but this only breaks their flow and confidence. You can always write things down and comment later.  This will give you time to understand if that's really a problem that should be fixed or maybe it was already fixed somewhere else (or you didn't notice that there was a different way to solve it).&lt;br&gt;
However, independently if there is a mistake or not, just be nice to people. We are all learning and trying to have a good time. Rule of thumb: Just be a nice person to work and collaborate with.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pair-programming-tip-6-avoid-external-distractions"&gt;
  &lt;/a&gt;
  Pair programming tip #6: Avoid external distractions
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pL9_E57y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/QvAx77lUmfSwVhVxuv/giphy.gif%3Fcid%3D790b761140c4187a94e1980c73c258958e35fc3ab302b835%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pL9_E57y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/QvAx77lUmfSwVhVxuv/giphy.gif%3Fcid%3D790b761140c4187a94e1980c73c258958e35fc3ab302b835%26rid%3Dgiphy.gif%26ct%3Dg" alt="Avoid external distractions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Specially when working remotely, there are several challenges and distractions that you need to overcome. Phone notifications, emails, delivery on the door, etc. These interruptions are easier to battle if you are leading the pair programming, but if you are following you can find yourself drifting away on some occasions.&lt;br&gt;
Ignore emails or any media while pairing. Don't schedule meetings that can interrupt your session. On top of that, don't do super long sessions that can last for hours. Take breaks and schedule time for other activities that are not programming.&lt;br&gt;
Be present and respectful with your partner, but also wise about how you allocate your time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pair-programming-tip-7-constant-communication"&gt;
  &lt;/a&gt;
  Pair programming tip #7: Constant communication
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--djCoDeoO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/8HZyasm0zfsuk/giphy-downsized.gif%3Fcid%3D790b761117293c6bf9b4158105a47bcf39983cd8d7b35023%26rid%3Dgiphy-downsized.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--djCoDeoO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/8HZyasm0zfsuk/giphy-downsized.gif%3Fcid%3D790b761117293c6bf9b4158105a47bcf39983cd8d7b35023%26rid%3Dgiphy-downsized.gif%26ct%3Dg" alt="Constant communication"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pair programming can be challenging, but it can be harder when one person has trouble keeping up or someone feels that they are coding alone. To avoid this, you should be actively communicating with your partner all the time. This will also make the session more engaging and fun. You don't need to be interrupting all the time or commenting on every single line (as we talked before), but let know that you are there for them and that you are working together.&lt;br&gt;
The point of doing a pair programming session is to not be coding alone, so be present and participate with your partner.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing thoughts
&lt;/h3&gt;

&lt;p&gt;Pair programming has a lot of advantages in comparison with solo coding: knowledge sharing, better code quality, improved communication. However, it also contains its own set of challenges. These pair programming tips can help you have a great collaborative and knowledge sharing session:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;plan your session properly,&lt;/li&gt;
&lt;li&gt;change roles regularly&lt;/li&gt;
&lt;li&gt;have a good audio-video setup,&lt;/li&gt;
&lt;li&gt;be mindful about micro-management,&lt;/li&gt;
&lt;li&gt;be patient and nice with your people and&lt;/li&gt;
&lt;li&gt;communicate with your partner.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>programming</category>
      <category>pair</category>
      <category>pairprogramming</category>
    </item>
    <item>
      <title>Showdev: Coloors, the Coolors Color Palette Clone</title>
      <author>Nathan Pham</author>
      <pubDate>Fri, 17 Sep 2021 14:42:46 +0000</pubDate>
      <link>https://dev.to/phamn23/showdev-coloors-the-coolors-color-palette-clone-2npj</link>
      <guid>https://dev.to/phamn23/showdev-coloors-the-coolors-color-palette-clone-2npj</guid>
      <description>&lt;p&gt;I tried building a color palette generator to learn the basics of GraphQL. It's not a "high fidelity" clone of &lt;a href="https://coolors.co/"&gt;Coolors&lt;/a&gt;, but it borrows some key concepts like the explore page, generator, animations, and general styles. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stack"&gt;
  &lt;/a&gt;
  Stack
&lt;/h2&gt;

&lt;p&gt;Express, Apollo GraphQL, Deta, Ion Icons, standard HTML/CSS/JS&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://colors-app.phamn23.repl.co/"&gt;https://colors-app.phamn23.repl.co/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check out my profile! &lt;br&gt;
&lt;a href="https://colors-app.phamn23.repl.co/u/wbo9uxsyjlyb"&gt;https://colors-app.phamn23.repl.co/u/wbo9uxsyjlyb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Github&lt;br&gt;
&lt;a href="https://github.com/nathan-pham/colors-app"&gt;https://github.com/nathan-pham/colors-app&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's next?
&lt;/h2&gt;

&lt;p&gt;I'm pretty much done with this project for now, but refactoring code is a huge priority. I used ES6 modules to help separate code, but I dumped most of the stuff into random utility files. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>showdev</category>
      <category>graphql</category>
      <category>webdev</category>
    </item>
    <item>
      <title>What I learned from selling a side project online</title>
      <author>JS Bits with Bill</author>
      <pubDate>Fri, 17 Sep 2021 14:42:08 +0000</pubDate>
      <link>https://dev.to/js_bits_bill/what-i-learned-from-selling-a-side-project-online-370f</link>
      <guid>https://dev.to/js_bits_bill/what-i-learned-from-selling-a-side-project-online-370f</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-happened"&gt;
  &lt;/a&gt;
  What happened?
&lt;/h1&gt;

&lt;p&gt;In 2014, I made a simple website and Chrome extension that let users save recipes online. It was extremely basic and initially started out as a project where I could learn basic authentication with services like PassportJS. Over time, I continuously improved it and added more features and better UX. I didn't market at all, but after several months, a few hundred people were using the service. Eventually I wanted to move on to other projects so I listed and sold my site online last year.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B3eBlALH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dzynqn10l/image/upload/v1630962134/JS%2520Bits/recipe-saver-dashboard_y0fzf1.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B3eBlALH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dzynqn10l/image/upload/v1630962134/JS%2520Bits/recipe-saver-dashboard_y0fzf1.webp"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Recipe Saver - My side project baby&lt;/em&gt; 👶&lt;/p&gt;



&lt;h1&gt;
  &lt;a href="#insights"&gt;
  &lt;/a&gt;
  Insights
&lt;/h1&gt;



&lt;h3&gt;
  &lt;a href="#1-your-site-is-worth-whatever-someone-is-offering"&gt;
  &lt;/a&gt;
  1) Your site is worth whatever someone is offering
&lt;/h3&gt;

&lt;p&gt;Start with a number in your head. Now, throw it out! Sure, you can list a minimum bid amount, but you'll quickly see your true market value once you start fielding inquiries. Unless you're selling a well-known, highly established website, you'll need to negotiate off whatever buyers are offering. Mine had 2-3 serious inquiries and ultimately sold for a few thousand dollars. Not enough to buy that yacht, but I'm proud of it!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-selling-can-relieve-the-burden-of-perpetual-maintenance"&gt;
  &lt;/a&gt;
  2) Selling can relieve the burden of perpetual maintenance
&lt;/h3&gt;

&lt;p&gt;Very few web apps require little maintenance. Customers will forget their credentials, server stacks and databases will require upgrades, and so on. In my case, I felt that I had experimented enough in monetizing my app without success. There's an opportunity cost to everything and selling can award you peace of mind of successfully ending to your side project baby.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-you-dont-need-a-ton-of-customers"&gt;
  &lt;/a&gt;
  3) You don't need a ton of customers
&lt;/h3&gt;

&lt;p&gt;You may think your product needs hundreds of thousands of customers for buyers to be interested. Not necessarily. I had a userbase of 7,500 accounts - many of which were very active. Based on user feedback, my customers liked the site overwhelmingly because it was extremely easy to use. &lt;b&gt;Potential buyers may see value in less-obvious ways.&lt;/b&gt; Perhaps your site uses some technology or algorithm that can be repurposed for a different application. Or maybe user-generated content is valuable for marketers to understand trendlines in an industry. There are dozens of ways your application can hold value for others.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-theres-no-guarantee-your-project-will-live-on"&gt;
  &lt;/a&gt;
  4) There's no guarantee your project will live on
&lt;/h3&gt;

&lt;p&gt;This was the most painful lesson learned. Despite the buyer agreeing to continue supporting the site, after a year it was sold again and the new &lt;b&gt;new&lt;/b&gt; owner was apparently only interested in the data. Not only were old customers unable to use the service anymore, but I had to retrieve backups of their data so they wouldn't lose their recipes. I felt terribly about it and did my best to &lt;b&gt;make things right&lt;/b&gt; for those who loyally used my service.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-be-prepared-to-support-things-for-a-while"&gt;
  &lt;/a&gt;
  5) Be prepared to support things for a while
&lt;/h3&gt;

&lt;p&gt;Set expectations for both the buyer and your customers that services WILL be disrupted for a time. In my case, these were just some of the supporting services that had to be individually transferred to the new owner: Heroku, GitHub, Cloudinary, Gmail, Mailgun, Google, Facebook, Stripe, Google Analytics, MongoDB, the domain, etc.&lt;/p&gt;

&lt;p&gt;A few of these did not allow "adding an admin" to the account so transferring can take lot of time. Further, it's essential that you &lt;b&gt;create stellar documentation&lt;/b&gt; so that your buyer can be self-serviceable (otherwise, be prepared to be pinged a lot!).&lt;/p&gt;



&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;So that's it! Despite the eventual discontinuation after the second sale, it was still the right decision as my desire to support and evolve the site had waned long before I listed it. Another driving factor was that similar sites starting cropping up and this kind of service became available for a dime-a-dozen. With competing priorities and interests, I knew it was time. Hopefully this gives you an idea of what to expect if you go this route, but if you have any more questions about the process or how it went down, let me know in the comments!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#where-can-you-sell-side-projects"&gt;
  &lt;/a&gt;
  Where can you sell side projects?
&lt;/h3&gt;

&lt;p&gt;There are actually a look of places! Here's a few popular ones:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.sideprojectors.com/"&gt;SideProjectors&lt;/a&gt; (where I sold mine)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.indiehackers.com/contribute"&gt;IndieHackers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://flippa.com/"&gt;Flippa&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Places where you can showcase your site and garner feedback before taking to market:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/SideProject/"&gt;Reddit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.producthunt.com/"&gt;ProductHunt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://owwly.com/products/all"&gt;Owwly&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;b&gt;Yo!&lt;/b&gt; I post byte-sized tips like these often. Follow me if you crave more! 🍿&lt;/p&gt;

&lt;p&gt;I'm on &lt;a href="https://www.tiktok.com/@js_bits"&gt;TikTok&lt;/a&gt;, &lt;a href="https://twitter.com/JS_Bits_Bill"&gt;Twitter&lt;/a&gt; and I have a new &lt;a href="https://jsbits-yo.com/bug-bash/"&gt;debugging course&lt;/a&gt; dropping soon!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>business</category>
    </item>
    <item>
      <title>Credit Card Payment UI With ReactJS </title>
      <author>Chris Hansen </author>
      <pubDate>Fri, 17 Sep 2021 14:36:22 +0000</pubDate>
      <link>https://dev.to/hyggedev/credit-card-payment-ui-with-reactjs-1a5a</link>
      <guid>https://dev.to/hyggedev/credit-card-payment-ui-with-reactjs-1a5a</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This is not a tutorial, or anything even informational. Just a place to share my project, hoping to inspire some creativity. Hopefully you learn about a new resource or try a new project. Repo is available! &lt;/p&gt;
&lt;/blockquote&gt;




&lt;h3&gt;
  &lt;a href="#hey-devs-were-pretty-fortunate"&gt;
  &lt;/a&gt;
  Hey devs, we're pretty fortunate 😉
&lt;/h3&gt;

&lt;p&gt;This badass platform gives us the ability to show off a project with the "#showdev" community tag and I am taking that opportunity!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://credit-payment-ui.netlify.app/"&gt;Demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/chansen17/creditCardPaymentUI"&gt;Repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nosir.github.io/cleave.js/"&gt;Cleave.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://reactjs.org/"&gt;React.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#try-different-credit-card-issuers"&gt;
  &lt;/a&gt;
  Try different credit card issuers:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Visa cards start with 4&lt;/li&gt;
&lt;li&gt;Mastercards 51 &lt;/li&gt;
&lt;li&gt;Discover 6011&lt;/li&gt;
&lt;li&gt;Amex 34&lt;/li&gt;
&lt;li&gt;Diners Club 300 &lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;ReactJS&lt;/li&gt;
&lt;li&gt;JSX&lt;/li&gt;
&lt;li&gt;Basic Javascript&lt;/li&gt;
&lt;li&gt;Custom SCSS&lt;/li&gt;
&lt;li&gt;Cleave.JS &lt;/li&gt;
&lt;li&gt;Dynamic rendering&lt;/li&gt;
&lt;/ol&gt;




&lt;h3&gt;
  &lt;a href="#something-to-point-out"&gt;
  &lt;/a&gt;
  Something to point out
&lt;/h3&gt;

&lt;p&gt;The FUNNIEST thing about the entire project, what I am also the most proud of, is the holographic sticker on the top left! It's a picture of raindrops on a window! 🤣 &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Let me know what you think about it. So much more could be added to this. For example, I would like to add a rotateX animation that allows the user to instead enter their security code on the back, once they click on the form field! That would be cool. &lt;/p&gt;

&lt;p&gt;If you are practicing frontend development and using React, give it a go! It's really based on all the fundamentals of React and the basics of Javascript. &lt;/p&gt;

&lt;p&gt;Show off your project below if you end up giving a shot! I'm sure you can do something even better! 😎&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#follow-me-on-twitter"&gt;
  &lt;/a&gt;
  Follow me on &lt;a href="https://www.twitter.com/hyggedev"&gt;Twitter&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;for byte-sized web dev content! &lt;/p&gt;




&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/hyggedev"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zQj764Ae--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/default-orange.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#check-out-these-other-beginner-friendly-articles-also-written-by-me"&gt;
  &lt;/a&gt;
  Check out these other beginner friendly articles also written by me! ⤵️
&lt;/h3&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/hyggedev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SF2YY4hD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--EoeHCiMq--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/273899/c143e65c-a98f-4545-968d-814c095950a0.jpg" alt="hyggedev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/hyggedev/how-to-build-a-responsive-react-navigation-menu-with-styled-components-3682" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to build a Responsive 📱 React Navigation Menu with Styled-Components 💻&lt;/h2&gt;
      &lt;h3&gt;Chris Hansen  ・ Aug 3 ・ 10 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/hyggedev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SF2YY4hD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--EoeHCiMq--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/273899/c143e65c-a98f-4545-968d-814c095950a0.jpg" alt="hyggedev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/hyggedev/filter-your-react-data-with-basic-javascript-4i9" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Filter Your React Data With Basic Javascript 🤘&lt;/h2&gt;
      &lt;h3&gt;Chris Hansen  ・ Aug 27 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/hyggedev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SF2YY4hD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--EoeHCiMq--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/273899/c143e65c-a98f-4545-968d-814c095950a0.jpg" alt="hyggedev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/hyggedev/great-beginner-friendly-api-s-to-start-practicing-frontend-development-52kl" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Great Beginner Friendly API's To Start Practicing Frontend Development 🧑‍💻&lt;/h2&gt;
      &lt;h3&gt;Chris Hansen  ・ Aug 30 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/hyggedev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SF2YY4hD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--EoeHCiMq--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/273899/c143e65c-a98f-4545-968d-814c095950a0.jpg" alt="hyggedev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/hyggedev/how-to-stay-focused-as-a-self-taught-frontend-web-developer-7gp" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to stay focused 🔍 as a self taught Frontend Web Developer 💻&lt;/h2&gt;
      &lt;h3&gt;Chris Hansen  ・ Jul 29 ・ 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#devjournal&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>webdev</category>
      <category>react</category>
      <category>beginners</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Set Sail with Tailwind CSS</title>
      <author>Eric SK.C</author>
      <pubDate>Fri, 17 Sep 2021 14:25:15 +0000</pubDate>
      <link>https://dev.to/giantmachines/set-sail-with-tailwind-css-4o06</link>
      <guid>https://dev.to/giantmachines/set-sail-with-tailwind-css-4o06</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p8Yl-SQi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/migb48qts4tef03yy6sd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p8Yl-SQi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/migb48qts4tef03yy6sd.png" alt="TailwindCSS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CSS frameworks have become incredibly prevalent in web design over the years, with Google’s &lt;a href="https://material.io/"&gt;Material Design&lt;/a&gt; aesthetic gradually appearing throughout the web and &lt;a href="https://getbootstrap.com/"&gt;Bootstrap’s&lt;/a&gt; library of plugins and themes becoming a popular default.&lt;/p&gt;

&lt;p&gt;Good news is, the days of pages looking like this... &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IuhGP7HU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/scc4y41tv9lp4p82mfk9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IuhGP7HU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/scc4y41tv9lp4p82mfk9.png" alt="Old Amazon" title="Amazon before it was cool"&gt;&lt;/a&gt;&lt;br&gt;
are long behind us, thanks in part to CSS frameworks.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;But like many rebellious people, you may be asking, what can I use that’s not mainstream yet? Is there a better, more modern solution? Isn’t there something out there that doesn’t involve Google’s or Twitter's participation at all?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://tailwindcss.com/"&gt;Tailwind CSS&lt;/a&gt;, a new up-and-comer, is a framework that’s been making a name for itself since 2017. Tailwind was rated highest in satisfaction and interest by users from over 100 countries in both 2019 and 2020, as recorded by the &lt;a href="https://stateofcss.com/"&gt;State of CSS survey&lt;/a&gt;.&lt;/p&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uXxXft_9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7w5sp9og2iszccusdwzh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uXxXft_9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7w5sp9og2iszccusdwzh.png" alt="State of CSS Survey" title="State of CSS Survey"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tailwind provides a collection of pre-built utility classes, allowing developers to directly style HTML elements without needing to create CSS classes or write any CSS at all.  &lt;/p&gt;

&lt;p&gt;This lets Tailwind shine in its simplicity, flexibility, and available customization options. Unlike Material and Bootstrap, which provide opinionated pre-built elements (and which require a substantial setup and demanding syntax), Tailwind provides hassle-free access to styling CSS simply and quickly via utility classes.&lt;/p&gt;

&lt;p&gt;If you’ve ever had a great idea for a frontend project, jumped straight into coding, and wanted to immediately flesh out that brilliant UI in your mind, Tailwind would allow you to style quickly before the inspiration left you, simply by slapping some of their utility classes on your markup.&lt;/p&gt;

&lt;p&gt;In this article, we’ll be discussing how Tailwind works and the benefits and drawbacks of using it. We'll examine the basic setup and workflow of Tailwind. Then we'll look at implementing Tailwind with SASS or Styled Components, as well as building for responsiveness.&lt;/p&gt;

&lt;p&gt;Let’s get on with it, shall we?&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#how-does-tailwind-work"&gt;
  &lt;/a&gt;
  How does Tailwind work?
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#utility-classes"&gt;
  &lt;/a&gt;
  Utility Classes
&lt;/h3&gt;

&lt;p&gt;Tailwind is a utility-first CSS framework. A utility class is a reusable CSS class that styles an element for a specific purpose.&lt;/p&gt;

&lt;p&gt;Let’s say we’re expecting multiple elements to need a background color of blue. To create a utility class for this, we’d create a CSS class named &lt;code&gt;bg-blue&lt;/code&gt; and give it the style &lt;code&gt;background-color: blue&lt;/code&gt;. Now we can place our utility class &lt;code&gt;bg-blue&lt;/code&gt; onto the numerous HTML elements where the background needs to be blue.&lt;/p&gt;

&lt;p&gt;With that concept understood, Tailwind essentially provides a huge collection of pre-built utility classes so you don’t have to create them yourself. It relies on stacking these classes onto HTML elements to fully style the element.&lt;/p&gt;

&lt;p&gt;Using Tailwind, you may never need to write CSS. Instead, you'd just insert utility classes. For example, to easily create a button with rounded corners, a mild box shadow, and centered white text, you’d simply add the following utility classes to your element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bg-blue-300 rounded-md shadow-md text-center 
p-8 text-white&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;Button&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;NOTE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nx"&gt;examples&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;blog&lt;/span&gt; &lt;span class="nx"&gt;will&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="nx"&gt;referencing&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;
 &lt;span class="nx"&gt;components&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;hence&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;usage&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;className&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's all you'd need to do to get a styled button that looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QtIFegL8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j3goed8aq7n24eumhsvo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QtIFegL8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j3goed8aq7n24eumhsvo.png" alt="Blue Button using Tailwind styles" title="Blue Button using Tailwind styles"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tailwind provides hundreds if not thousands of utility classes, each with specific styling purposes. There is a class named &lt;code&gt;.text-center&lt;/code&gt; with a single CSS property of &lt;code&gt;text-align: center&lt;/code&gt;, another named &lt;code&gt;.p-8&lt;/code&gt; that has &lt;code&gt;padding: 2rem&lt;/code&gt;, and so on. This is how Tailwind works.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benefits-amp-drawbacks"&gt;
  &lt;/a&gt;
  Benefits &amp;amp; Drawbacks
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The most apparent benefit to using Tailwind’s utility classes is it allows the developer to create their markup and style it at the same time without the need of creating CSS classes (or writing any CSS!). A developer using Tailwind would never need to leave their HTML or JSX code when building out views and components.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This can be especially beneficial if you’ve ever needed to put together a quick demo or MVP, or simply scaffold a UI to better visualize your project.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;An enormous perk provided by default is that Tailwind will automatically remove all unused CSS from the bundle sent to the browser. At build time, Tailwind will purge all unused CSS classes, creating the smallest CSS bundle your code can possibly provide, &lt;a href="https://tailwindcss.com/#performance"&gt;averaging at less than 10kb&lt;/a&gt;. This can dramatically improve page load times.&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;As a styling framework, Tailwind is arguably less opinionated than other frameworks like Bootstrap and Material. Very often when using other frameworks, developers will find themselves rewriting the CSS provided by the framework to fully suit their needs.&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;For more, see &lt;a href="https://themesberg.com/blog/design/tailwind-css-vs-bootstrap"&gt;the differences between Tailwind CSS &amp;amp; Bootstrap&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The initial learning curve of Tailwind can be unappealing, as you will inevitably find yourself returning to its docs to learn the correct utility class name. Something as traditional as setting &lt;code&gt;padding-top: 1rem&lt;/code&gt; is now&lt;code&gt;pt-4&lt;/code&gt; with Tailwind. In the beginning, this could potentially outweigh all the benefits Tailwind provides in regards to speed.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Once you’ve familiarized yourself with Tailwind, however, I guarantee you’ll find the utility class names to be as simple as remembering CSS attributes themselves.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SY1mkb8d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wmcoplkfug2cndyr91oy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SY1mkb8d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wmcoplkfug2cndyr91oy.png" alt="Tailwind padding class names" title="Tailwind padding class names"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Though Tailwind is relatively unopinionated, the pre-built utility classes still have set values. For example, &lt;code&gt;text-red-300&lt;/code&gt; is a utility class for text color with preset values for red, specifically &lt;code&gt;rgba(252, 165, 165, 1)&lt;/code&gt;. Thankfully, these defaults can all be adjusted in a &lt;code&gt;tailwind.config.js&lt;/code&gt; file to suit your needs.&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;By default, Tailwind doesn’t provide any styled components out of the box. All the components provided in a library like Bootstrap (for example, general navigation, buttons, headers) need to be implemented from scratch.&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#tailwind-implementation-amp-workflow"&gt;
  &lt;/a&gt;
  Tailwind Implementation &amp;amp; Workflow
&lt;/h2&gt;

&lt;p&gt;To start off, you’ll want to install Tailwind with npm. To get the latest version and its peer dependencies, run &lt;code&gt;npm install -D tailwindcss@latest postcss@latest autoprefixer@latest&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you’re going to customize some things, run &lt;code&gt;npx tailwindcss init&lt;/code&gt; to create the &lt;code&gt;tailwind.config.js&lt;/code&gt; file. This file allows custom implementation of styling, which we’ll discuss in the next section.&lt;/p&gt;

&lt;p&gt;To inject Tailwind’s functionality, you will need a CSS file that includes these lines:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* ./your-css-folder/styles.css */&lt;/span&gt;

&lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;components&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;utilities&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From here, you’re free to jump straight into coding.&lt;/p&gt;

&lt;p&gt;Some things to keep in mind are the purpose and roadmap of your project. If you simply need something up and running with a deadline coming up, the basic implementation of Tailwind is fine.&lt;/p&gt;

&lt;p&gt;If you know you’re going to be refactoring and potentially even removing Tailwind further down the road, be sure to pair your Tailwind code with SASS or Styled Component files.&lt;/p&gt;

&lt;p&gt;Keeping these details in mind will foster a cleaner codebase, or a better transition into one.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#tailwind-config"&gt;
  &lt;/a&gt;
  Tailwind Config
&lt;/h2&gt;

&lt;p&gt;Chances are you’re going to be customizing your Tailwind utility classes, because let’s be honest, their utility library doesn’t include everything. As an example, any kind of custom animation that isn’t a pulse or bounce will require a configuration.&lt;/p&gt;

&lt;p&gt;To set this up, make sure to run &lt;code&gt;npx tailwindcss init&lt;/code&gt;. This will create a minimal &lt;code&gt;tailwind.config.js&lt;/code&gt; file in the root of the project.&lt;/p&gt;

&lt;p&gt;Here, you can set whatever you might need that isn’t included by default in Tailwind, which may be custom fonts, animations, specific breakpoints, new utility classes, or adjusting Tailwind’s pre-built utility classes. Any custom styles here will take precedence over Tailwind’s existing classes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;purge&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src/**/*.{js,jsx,ts,tsx}&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./public/index.html&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;darkMode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// or 'media' or 'class'&lt;/span&gt;
  &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;fontFamily&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;sans&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;AvenirLTPro-Heavy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;AvenirLTPro-Light&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;AvenirLTPro-Black&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;AvenirLTPro-Medium&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="na"&gt;light&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;AvenirLTPro-Light&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;screens&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;320px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;sx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;420px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;lighter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#3064b1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;light&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#CAE0FE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;DEFAULT&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#0E71FB&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;dark&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#082959&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="na"&gt;gray&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;lightest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#F7FAFC&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;lighter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#EBEFF5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;light&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#E6EAF0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;DEFAULT&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#D7DBE0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;dark&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#6E6E6E&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;darkest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#333333&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;slideIn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;slideIn 200ms ease-in-out 1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;keyframes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;slideIn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0%&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;translateX(-100vw)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;100%&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;translateX(0)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#tailwind-with-other-styling-packages"&gt;
  &lt;/a&gt;
  Tailwind with Other Styling Packages
&lt;/h2&gt;

&lt;p&gt;An obvious issue with Tailwind is the verbose class names that will eventually clutter your HTML or JSX. If we look at the previous example for the button, the full list of classes applied is &lt;code&gt;bg-blue-300 rounded-md shadow-md text-center&lt;/code&gt;. If we wanted to add more styling, we would need even more utility classes, making this line even longer. &lt;/p&gt;

&lt;p&gt;And if every element were to look like this, the markup would become harder and harder to read.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;flex flex-col md:flex-row overflow-ellipsis
overflow-hidden&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;p-1 w-11r md:w-20r md:p-2 lg:w-29r 
inline-block text-gray-darkest font-sans flex items-center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-xs overflow-ellipsis overflow-hidden
xs:truncate md:text-base md:overflow-clip
md:whitespace-normal md:overflow-visible max-h-10&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h3&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;p-1 w-5r md:w-8r inline-block flex 
items-center justify-center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-xs md:text-base&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;formatDate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Unspecified&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Possible solutions to this problem involve pairing Tailwind with either SASS or Styled Components.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#with-sass-using-apply"&gt;
  &lt;/a&gt;
  With SASS Using @apply
&lt;/h2&gt;

&lt;p&gt;A common practice with Tailwind is to combine its usage with SASS/SCSS. A convention I've found useful is to limit the utility classes on any HTML element to 5 or 6. If an element requires further styling, you can use &lt;code&gt;@apply&lt;/code&gt; to style a SASS class using Tailwind utility classes, like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.card-body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;p&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;@apply&lt;/span&gt; &lt;span class="err"&gt;px-4&lt;/span&gt; &lt;span class="err"&gt;pb-4&lt;/span&gt; &lt;span class="err"&gt;text-lg&lt;/span&gt; &lt;span class="err"&gt;pt-0&lt;/span&gt; &lt;span class="err"&gt;font-helvetica-neue&lt;/span&gt; &lt;span class="err"&gt;text-center&lt;/span&gt;
&lt;span class="err"&gt;text-white&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, you’re free to set this class wherever you need.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#with-styled-components-using-twmacro"&gt;
  &lt;/a&gt;
  With Styled Components Using tw.macro
&lt;/h2&gt;

&lt;p&gt;To use Tailwind alongside Styled Components, we’re going to need some extra dependencies, these being &lt;code&gt;tailwind.macro&lt;/code&gt; and &lt;code&gt;babel-plugin-macros&lt;/code&gt;. The combination of these two will allow Babel to read Tailwind utilities.&lt;/p&gt;

&lt;p&gt;Once that’s done, you can start setting Tailwind utilities under &lt;code&gt;className&lt;/code&gt; in your styled components.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;tw&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tailwind.macro&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AppStyles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;w-full h-screen flex flex-col 
items-center justify-center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="s2"&gt;`
  h1 {
    &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;tw&lt;/span&gt;&lt;span class="s2"&gt;`font-sans text-6xl text-teal-500`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
  }
  p {
    &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;tw&lt;/span&gt;&lt;span class="s2"&gt;`text-lg text-gray-700`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
  }
  ul {
    &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;tw&lt;/span&gt;&lt;span class="s2"&gt;`inline-flex mx-5`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
  }
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For a more detailed implementation, check out these blogs by &lt;a href="https://www.freecodecamp.org/news/how-to-style-your-react-apps-with-less-code-using-tailwind-css-and-styled-components/"&gt;Ibrahima Ndaw&lt;/a&gt; and &lt;a href="https://dev.to/dbshanks/an-efficient-react-tailwindcss-styled-components-workflow-458m"&gt;Derek Shanks&lt;/a&gt;.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#building-for-responsiveness"&gt;
  &lt;/a&gt;
  Building for Responsiveness
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#media-queries"&gt;
  &lt;/a&gt;
  Media Queries
&lt;/h3&gt;

&lt;p&gt;One of the nice perks of using Tailwind is the simplicity of responsive styling. By default, Tailwind is mobile-first in regards to responsiveness. In other words, the breakpoints under the hood are specified using &lt;code&gt;min-width&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bg-blue-300 rounded-md shadow-md text-center
p-8 text-white text-sm md:text-md md:p-10 lg:text-lg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;Button&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example, the &lt;code&gt;font-size&lt;/code&gt; and &lt;code&gt;padding&lt;/code&gt; will change when the breakpoint for &lt;code&gt;md&lt;/code&gt; is reached, and the &lt;code&gt;font-size&lt;/code&gt; is enlarged even further when &lt;code&gt;lg&lt;/code&gt; the breakpoint is reached. To know the exact measurements for sizes like &lt;code&gt;md&lt;/code&gt; or &lt;code&gt;lg&lt;/code&gt;, you’ll have to refer to the &lt;a href="https://tailwindcss.com/docs"&gt;Tailwind docs&lt;/a&gt; for the specific attributes. In regards to breakpoints, &lt;code&gt;sm&lt;/code&gt; is &lt;code&gt;640px&lt;/code&gt;, &lt;code&gt;md&lt;/code&gt; is &lt;code&gt;768px&lt;/code&gt;, and &lt;code&gt;lg&lt;/code&gt; is &lt;code&gt;1024px&lt;/code&gt;. These can all be adjusted, and more sizes can be added, in the &lt;code&gt;tailwind.config.js&lt;/code&gt; file. For example, if you wanted &lt;code&gt;md&lt;/code&gt; to represent &lt;code&gt;800px&lt;/code&gt;, you can change that in &lt;code&gt;tailwind.config.js&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// tailwind.config.js&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;screens&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sm&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;640px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="c1"&gt;// =&amp;gt; @media (min-width: 640px) {...}&lt;/span&gt;

      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;md&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;800px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="c1"&gt;// =&amp;gt; @media (min-width: 800px) {...}&lt;/span&gt;

      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1024px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="c1"&gt;// =&amp;gt; @media (min-width: 1024px) {...}&lt;/span&gt;

      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;xl&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1280px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="c1"&gt;// =&amp;gt; @media (min-width: 1280px) {...}&lt;/span&gt;

      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2xl&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1536px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="c1"&gt;// =&amp;gt; @media (min-width: 1536px) {...}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;What Tailwind provides is a streamlined experience to web styling. It doesn’t require a massive amount of boilerplate to get started and certainly doesn’t push pre-styled button components or form elements which you might end up needing to restyle yourself. &lt;/p&gt;

&lt;p&gt;Tailwind simply provides developers an efficient and fast method of styling so they can get straight to work. It can especially come in handy when you want to quickly add some pizzazz to early stage and personal projects, and it can even scale to larger projects as well.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s386E5nu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/89iysu7bri09s6bd9pom.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s386E5nu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/89iysu7bri09s6bd9pom.jpeg" alt="Cheers"&gt;&lt;/a&gt;&lt;br&gt;
You made it to the end! Thanks for reading!&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>react</category>
      <category>webdev</category>
      <category>frontend</category>
    </item>
    <item>
      <title>How to deploy your NodeJS / Flask application to Qovery in less than five minutes</title>
      <author>𝐋𝐄𝑽𝐈𝑨𝐓𝐇𝐀𝐍 Programming</author>
      <pubDate>Fri, 17 Sep 2021 14:25:12 +0000</pubDate>
      <link>https://dev.to/leviathanprogramming/how-to-deploy-your-nodejs-flask-application-to-qovery-ld3</link>
      <guid>https://dev.to/leviathanprogramming/how-to-deploy-your-nodejs-flask-application-to-qovery-ld3</guid>
      <description>&lt;p&gt;All my prayers have been answered once I found &lt;a href="https://qovery.com"&gt;Qovery&lt;/a&gt;.  It's a super affordable hosting service that is amazingly powerful and gives you maximized ease.&lt;/p&gt;

&lt;p&gt;If you are still clinging to Heroku, Netlify, Terraform, etc; consider reading these articles.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hub.qovery.com/docs/getting-started/qovery-vs-other/heroku/"&gt;Qovery vs Heroku&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hub.qovery.com/docs/getting-started/qovery-vs-other/netlify/"&gt;Qovery vs Netlify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hub.qovery.com/docs/getting-started/qovery-vs-other/terraform/"&gt;Qovery vs Terraform&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Okay, so that being said, I will show you how to deploy a nodeJS and python application to Qovery in less than five minutes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploying-a-nodejs-application"&gt;
  &lt;/a&gt;
  Deploying a NodeJS Application
&lt;/h2&gt;

&lt;p&gt;I'm assuming you've already signed up for Qovery, developed your app, and put all the code into a github repository.  Those are the main steps you need to do and the rest is a breeze.&lt;/p&gt;

&lt;p&gt;The next step is to create a file called &lt;code&gt;Dockerfile&lt;/code&gt; in your application.  Assuming you are deploying an expressJS app, your dockerfile should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; node:14&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; /usr/src/app
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /usr/src/app&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 3000&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; ["node", "index.js"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, you don't even need to have docker installed.  Qovery takes care of all that for you.&lt;/p&gt;

&lt;p&gt;After that, push to the git repo and update it.  Next, you're going to want to create a new project on your &lt;a href="https://console.qovery.com"&gt;qovery console&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Next, create an environment in that project.  &lt;/p&gt;

&lt;p&gt;Add your first app, connect to the correct git repo, and finally, a very important step, set the build mode to Docker, and set the port to 3000.&lt;br&gt;
You can technically use a different port to add your app on, but in this tutorial, let's use 3000.  Make sure your app is listening on that port!!&lt;/p&gt;

&lt;p&gt;If you want to change that port, make sure you change the code in your dockerfile, the &lt;code&gt;EXPOSE 3000&lt;/code&gt; to &lt;code&gt;EXPOSE &amp;lt;your-port&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--talNbANi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ujoak9vx34cnmsyxst9q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--talNbANi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ujoak9vx34cnmsyxst9q.png" alt="Screen Shot 2021-09-17 at 9.11.45 AM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Update your settings if you want, then click the Actions button and then deploy your app.  Once it's in a RUNNING state, your app is ready!!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gXS92yrW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ib3jus7ylphfui67wz9i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gXS92yrW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ib3jus7ylphfui67wz9i.png" alt="Screen Shot 2021-09-17 at 9.16.46 AM"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#deploying-your-python-flask-app"&gt;
  &lt;/a&gt;
  Deploying your Python Flask app
&lt;/h2&gt;

&lt;p&gt;Sign up for qovery, create your project, and then link it to a github repo.  Add your dockerfile into your app.  It should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; python:3.8-slim-buster&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /usr/src/app&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . ./&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;pip &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; requirements.txt
&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 3000&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; ["python","app.py"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure your app is listening on port 3000.  You don't need to install docker.&lt;/p&gt;

&lt;p&gt;Push your code to the git repo, create a new project, a new environment, and then an app.  Make sure the build mode is Docker and not Buildpacks.&lt;/p&gt;

&lt;p&gt;Click the Actions button, deploy your project, and you should be ready to go.&lt;/p&gt;




&lt;p&gt;I hope qovery is something you'll be enjoying from now on.  It is something that is super amazing, secure, and reliable.&lt;/p&gt;

&lt;p&gt;Don't forget to follow the &lt;a href="https://dev.to/rophilogene"&gt;Founder of Qovery&lt;/a&gt; on DEV!&lt;/p&gt;

&lt;p&gt;Happy Coding (and deploying)!&lt;/p&gt;

</description>
      <category>deployment</category>
      <category>tutorial</category>
      <category>javascript</category>
      <category>python</category>
    </item>
    <item>
      <title>Tutorial Purgatory 😢😢</title>
      <author>Clever coder</author>
      <pubDate>Fri, 17 Sep 2021 14:08:16 +0000</pubDate>
      <link>https://dev.to/yusuf_software/tutorial-purgatory-1901</link>
      <guid>https://dev.to/yusuf_software/tutorial-purgatory-1901</guid>
      <description>&lt;p&gt;Tutorial purgatory&lt;/p&gt;

&lt;p&gt;Do you know that feeling?&lt;/p&gt;

&lt;p&gt;Like you’re stuck in this infinite loop of just watching tutorial after tutorial every single day, but you’re still not making any real progress towards becoming a developer🤔?&lt;/p&gt;

&lt;p&gt;It's really common among developers🤪.&lt;/p&gt;

&lt;p&gt;We've ALL been there🙂.&lt;/p&gt;

&lt;p&gt;But the question is... how do you pull yourself out🤔🤔?&lt;/p&gt;

&lt;p&gt;Thankfully, I got lucky and figured it out pretty soon when I was learning to code (but I still stumble on it sometimes when am learning something new)&lt;br&gt;
So here’s the secret..&lt;br&gt;
Projects.&lt;/p&gt;

&lt;p&gt;BUILD PROJECTS.&lt;/p&gt;

&lt;p&gt;Build a TON of them.&lt;/p&gt;

&lt;p&gt;That’s it.&lt;/p&gt;

&lt;p&gt;There’s no other way around it.&lt;/p&gt;

&lt;p&gt;The more you build...&lt;/p&gt;

&lt;p&gt;The more you break...&lt;/p&gt;

&lt;p&gt;The more you learn…&lt;br&gt;
Most times we watch alot or even download lots of tutorial videos on a language or framework or even a library &lt;br&gt;
but most of those who watch it STILL don't know how to build an application like that from scratch, why?&lt;/p&gt;

&lt;p&gt;It’s because most people just watch a tutorial and code along.&lt;/p&gt;

&lt;p&gt;You don’t think beyond the code, you just code it up.&lt;/p&gt;

&lt;p&gt;Don’t just code.&lt;/p&gt;

&lt;p&gt;Think.&lt;/p&gt;

&lt;p&gt;Think about what you’re coding in your IDE or text editor.&lt;/p&gt;

&lt;p&gt;What does this for loop do?&lt;/p&gt;

&lt;p&gt;Why do we have this piece of code here?&lt;br&gt;
Ask questions to yourself and do some research why is this like this and so forth...&lt;/p&gt;

&lt;p&gt;When you do that, you understand how the code works and why we do it the way we do.&lt;/p&gt;

&lt;p&gt;This is what YOU have to do.&lt;/p&gt;

&lt;p&gt;Take the code into your own hands and mess around with it.&lt;/p&gt;

&lt;p&gt;BREAK IT.&lt;/p&gt;

&lt;p&gt;Debug it on your own…&lt;/p&gt;

&lt;p&gt;Google it.&lt;/p&gt;

&lt;p&gt;Ask Questions and ask more &lt;/p&gt;

&lt;p&gt;Figure out why it broke in the first place…&lt;/p&gt;

&lt;p&gt;Now before you know it you’re building projects on your own.&lt;/p&gt;

&lt;p&gt;Maybe you come up with a passion project that you’ve always wanted to build, and start working on that!&lt;/p&gt;

&lt;p&gt;Keep taking on those clone applications to flex and build your skills, but start to customize them.&lt;/p&gt;

&lt;p&gt;Make them your own.&lt;/p&gt;

&lt;p&gt;Look for cool new features you could implement, find specific tutorials and figure out how to add them.&lt;/p&gt;

&lt;p&gt;You’re thinking like a developer. That's great already.&lt;/p&gt;

&lt;p&gt;And that’s really it.&lt;/p&gt;

&lt;p&gt;Learn through projects and your growth will be MASSIVE.&lt;/p&gt;

&lt;p&gt;Projects are what kept me out of tutorial hell as a new Software Engineer.&lt;/p&gt;

&lt;p&gt;Real. World. Projects.&lt;/p&gt;

&lt;p&gt;‘Cos not only do they unlock your learning... they also land you JOBS (On the long run we need funds actually).&lt;/p&gt;

&lt;p&gt;That’s the real power of projects when you start taking this stuff seriously.&lt;/p&gt;

&lt;p&gt;In conclusion&lt;br&gt;
The fastest way to get out of tutorial hell is by building projects upon projects (try to finish one completely before going to another) add some extra features to the clone you are doing Change the colours use different style of icons or Change some design patterns.&lt;br&gt;
And that's all.&lt;br&gt;
If you got questions or confusion or anything you are free to hit  me up  would really love to help out as fast as I can.&lt;br&gt;
Yusuf &lt;br&gt;
Tech enthusiast &lt;br&gt;
Twitter: Yusuf_software.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>software</category>
      <category>learning</category>
    </item>
    <item>
      <title>JavaScript vs JavaScript: Round 2. Fight!</title>
      <author>Ryan Carniato</author>
      <pubDate>Fri, 17 Sep 2021 14:01:56 +0000</pubDate>
      <link>https://dev.to/this-is-learning/javascript-vs-javascript-round-2-fight-2m44</link>
      <guid>https://dev.to/this-is-learning/javascript-vs-javascript-round-2-fight-2m44</guid>
      <description>&lt;p&gt;After I finished the first article I wasn't sure how long it would be before we'd have enough topics for the next round. But given the continuing atmosphere around the JavaScript ecosystem, many of these topics just fell on my lap.&lt;/p&gt;

&lt;p&gt;So let's get this started. Fight!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#1-build-vs-no-build"&gt;
  &lt;/a&gt;
  1. Build vs No Build
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y_hmcjMo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j2zshyzz8l65wojq16jp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y_hmcjMo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j2zshyzz8l65wojq16jp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Several years ago I read a great article(which I can't seem to find anymore) that saw JavaScript being at a crossroads. That "the language" of JavaScript was at odds with what the author considered "the machine". I barely appreciated the nuance in the take but standing here now it all makes sense.&lt;/p&gt;

&lt;p&gt;For some of us old-timers, our first introduction to JavaScript was through viewing the page source on public websites. We saw something we liked we'd just copy it. And the web being the open platform it is we embraced this freedom.&lt;/p&gt;

&lt;p&gt;Fast forward 15 years later and we're trying to support some ancient browser while lamenting all the new features we know are coming out. So what do we do? Compile. CoffeeScript, and later Babel. And our desire to build native experiences has meant more and more JavaScript so we minimize and we optimize our bundles.&lt;/p&gt;

&lt;p&gt;And now over 25 years after the launch of the web, we've been doing this for over 10 years. Almost half the time JavaScript has been around. So which is the truer JavaScript?&lt;/p&gt;

&lt;p&gt;I've been calling JavaScript a meta-language for several years. We use JavaScript to rewrite how other JavaScript executes to the point now, that looking at some source code you see in a random Github repo, you don't really know what you are going to get by the time it gets to the browser.&lt;/p&gt;

&lt;p&gt;Is that good or bad? Not sure. But it's definitely a thing. The ecosystem has become ingrown feeding off itself. Machine writing the machine. Our compilers are more advanced. Our tooling is more sophisticated. Do we even know how to write without these? Do we even need to?&lt;/p&gt;

&lt;p&gt;Well according to some it's time for the great collapse. The native platform has improved greatly over the same period of time and is more capable than ever. But can it dead code eliminate all the concurrent mode code out of the core routines of a reactive library based on what the end application imports? Can it analyze cross templates how all state is used in declarative views to determine exactly what JavaScript needs to be sent to the browser?&lt;/p&gt;

&lt;p&gt;No. Not even close.&lt;/p&gt;

&lt;p&gt;Ever wonder why Bundle-less tools like &lt;a href="https://vitejs.dev/"&gt;Vite&lt;/a&gt; still pre-bundle &lt;code&gt;node_modules&lt;/code&gt;? How &lt;a href="https://svelte.dev"&gt;Svelte&lt;/a&gt; can resemble plain HTML, CSS, and JavaScript but do so much more? Tooling is becoming so ingrained we don't even think about it. It keeps "shifting left" moving right into our IDEs.&lt;/p&gt;

&lt;p&gt;But that might be alright if you don't need any of that.&lt;/p&gt;

&lt;p&gt;As the author of the original article concluded it's too late to stop the machine. What tools offer us paint a world of developer experience we can only imagine in our dreams. We don't need to give up UX for this DX either. More tools don't mean more JavaScript in the browser. In the next several years I expect it to mean less. Much less.&lt;/p&gt;

&lt;p&gt;But what is great about the web is we can always just turn it off. &lt;code&gt;index.html&lt;/code&gt; anyone? You won't find me in that lineup. But who knows with import maps and native ESM you might even feel like exposing your unminified source to inspire the next generation of JavaScript developers anew.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#2-framework-specific-vs-framework-agnostic"&gt;
  &lt;/a&gt;
  2. Framework Specific vs Framework Agnostic
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Sqmtkd19--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ig2oj45hdjs4gfkfkobe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sqmtkd19--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ig2oj45hdjs4gfkfkobe.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Framework Agnostic. I mean that's the dream, right? We've been trying to achieve this for decades. So why aren't we here yet?&lt;/p&gt;

&lt;p&gt;As much as people we like to generalize, if frameworks were all the same there wouldn't be so many. At best being framework-agnostic is catering to the lowest common denominator. It isn't just about syntax. &lt;a href="https://reactjs.org"&gt;React&lt;/a&gt;'s concurrent mode, &lt;a href="https://svelte.dev"&gt;Svelte&lt;/a&gt;'s animations, &lt;a href="https://www.markojs.com"&gt;Marko&lt;/a&gt;'s automatic partial hydration, and progressive rendering... the list goes on. The wider the net the harder it is to generalize and to optimize.&lt;/p&gt;

&lt;p&gt;And these differences are usually rooted in fundamental philosophies and architectures. Every decision has tradeoffs and we can't expect everything to align. Even when you have things that look as similar as &lt;a href="https://reactjs.org"&gt;React&lt;/a&gt;'s Hooks, and &lt;a href="https://solidjs.com"&gt;Solid&lt;/a&gt;'s Reactivity. Every decade or so the trends and the patterns change and adapt. Would you be happy to use jQuery plugins in your declarative modern SPA framework?&lt;/p&gt;

&lt;p&gt;So what does framework-agnostic actually mean? Well, it just means we have a new framework. This is a great approach to gaining adoption and it can consolidate on like things. If all things are equal wouldn't you take the most efficient option? If you were going to use Web Components to create your cross framework micro-frontend design system would you author them in &lt;a href="https://reactjs.org"&gt;React&lt;/a&gt;? Would you use &lt;a href="https://preactjs.com"&gt;Preact&lt;/a&gt; perhaps?&lt;/p&gt;

&lt;p&gt;Over time the agnostic thing will naturally consolidate on the most optimal underlying means that most align with its philosophy and goals. And at that point, you have to evaluate whether the wrapper actually adds sufficient value.&lt;/p&gt;

&lt;p&gt;The thing is it is always possible to write a better version of a framework-agnostic thing when you make it specific. Interop definitely has value and a sense of future-proofing, but done wrong it's akin to over-engineering. The avarice that we can predict the future.&lt;/p&gt;

&lt;p&gt;Even true when sufficiently complicated things are presented as standards or part of an official platform. As long as there are options some people number of people will gravitate to the most efficient way to accomplish something or what fits the guiding principles they are working under.&lt;/p&gt;

&lt;p&gt;There is nothing wrong with that and like any pendulum, we really need both parts, experimentation/growth, and consolidation/standardization. Just, I wouldn't be so sure that either side presents more stability over the long term. Ultimately all things need to be adopted to ensure survival.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#3-language-primitive-vs-composition"&gt;
  &lt;/a&gt;
  3. Language Primitive vs Composition
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MywceBEs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rujaztklglx5aibup82o.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MywceBEs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rujaztklglx5aibup82o.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Composition is King. Or was it "Never bet against &lt;del&gt;JavaScript&lt;/del&gt; composition"? As a framework author this is something I hold near and dear. Composition lets you build simple and extendable things without adding complexity. Being adaptable is much better than being flexible.&lt;/p&gt;

&lt;p&gt;So what does this have to do with JavaScript. Well, frameworks have been working hard at reducing the experience of describing UIs to first principles. Regardless of approach frameworks have landed on the language of reactivity as those building blocks. Call it reactivity, hooks, composition api, they all have 3 concepts:&lt;/p&gt;

&lt;p&gt;State - observables, refs, signals, atoms&lt;br&gt;
Derivations - computeds, memos, selectors&lt;br&gt;
Reactions - effects, autorun&lt;/p&gt;

&lt;p&gt;Even if we don't name it like &lt;a href="https://svelte.dev"&gt;Svelte&lt;/a&gt;, we have the same 3:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// state&lt;/span&gt;
&lt;span class="nl"&gt;$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// derivation&lt;/span&gt;
&lt;span class="nl"&gt;$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is double &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// reaction&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So are all of these the same? Well not quite. &lt;a href="https://svelte.dev"&gt;Svelte&lt;/a&gt; went the way of language keyword versus &lt;a href="https://reactjs.org"&gt;React&lt;/a&gt;'s use of functions. It isn't unlike the difference between:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;doSomething&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// and&lt;/span&gt;
&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;doSomething&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What's the difference? Well once you want to abstract our list iterator here you can no longer call it with the same &lt;code&gt;for&lt;/code&gt; syntax. Instead we need to use functions like &lt;code&gt;forEach&lt;/code&gt;. In fact you can make &lt;code&gt;myForEach&lt;/code&gt; with the exact same signature. And do so ad nauseum. &lt;/p&gt;

&lt;p&gt;Know what else is composable? Components. They weren't always part of the frontend framework landscape, but since their introduction have been ubiquitous. You might use &lt;code&gt;list.map&lt;/code&gt; somewhere but &lt;code&gt;&amp;lt;VirtualList&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;PaginatedList&amp;gt;&lt;/code&gt; also extend the pattern forward in a composable way.&lt;/p&gt;

&lt;p&gt;Like &lt;code&gt;for&lt;/code&gt; loop, template helpers like &lt;a href="https://svelte.dev"&gt;Svelte&lt;/a&gt;'s &lt;code&gt;#each&lt;/code&gt; are language level instead of composable. This allows for a dedicated and clean syntax. But when you move to &lt;code&gt;&amp;lt;PaginatedList&amp;gt;&lt;/code&gt; it requires a completely different syntax(&lt;a href="https://svelte.dev/tutorial/slot-props"&gt;Slot Props&lt;/a&gt;). And &lt;a href="https://svelte.dev"&gt;Svelte&lt;/a&gt; isn't alone. Most template DSLs have gone this way with their control flow. &lt;/p&gt;

&lt;p&gt;So who cares? Well there is something incredibly powerful about the framework provided primitives and the end user creations being the same. It provides a simplicity in its consistency and makes extensions feel native. If you've used &lt;code&gt;useState&lt;/code&gt; you know how to use &lt;code&gt;useLocalState&lt;/code&gt;. If you've used &lt;code&gt;&amp;lt;For&amp;gt;&lt;/code&gt; you know how to use &lt;code&gt;&amp;lt;PaginatedList&amp;gt;&lt;/code&gt;. It isn't special.&lt;/p&gt;

&lt;p&gt;The best part is if you don't like what is provided with composable APIs you can create your own and have it feel first party. It lets developers own their experience and drive the ecosystem entirely on what fits their usage. &lt;a href="https://reactjs.org"&gt;React&lt;/a&gt;'s Components and Hooks have been incredibly successful for this reason. And though I've been using Svelte as the counterpoint, Svelte Stores are good at this as well.&lt;/p&gt;

&lt;p&gt;Language level primitives do have benefits. They are often easier to analyze which lends to compilers being able to optimize. So I look forward to seeing how developers look to incorporating the best of both worlds without too much compromise. So far that's things like &lt;a href="https://vuejs.org"&gt;Vue&lt;/a&gt;'s &lt;a href="https://github.com/vuejs/rfcs/discussions/369"&gt;ref sugar&lt;/a&gt; and &lt;a href="https://www.markojs.com"&gt;Marko&lt;/a&gt;'s &lt;a href="https://dev.to/ryansolid/introducing-the-marko-tags-api-preview-37o4"&gt;Tags API&lt;/a&gt;. It's definitely something to keep an eye out for.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#4-runtime-vs-runtimeless-frameworks"&gt;
  &lt;/a&gt;
  4. Runtime vs Runtime-less Frameworks
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1yPHn_4_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ra4xs5iu2c5eg4wkr3ed.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1yPHn_4_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ra4xs5iu2c5eg4wkr3ed.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ok, I admit it. This one is complete bait. It would be interesting to see a truly runtime-less JavaScript framework with a significant feature set. But these don't really exist and for good reason.&lt;/p&gt;

&lt;p&gt;To clarify, I'm not talking about frameworks that enable not sending JavaScript to the browser. I am talking about ones that make heavy use of compilation to do work ahead of time. The term "disappearing" or "runtime-less" has floated around but it is hyperbole.&lt;/p&gt;

&lt;p&gt;Re-using code is good. You don't want to compile away the framework completely as that can lead to a lot of duplication that doesn't scale.&lt;/p&gt;

&lt;p&gt;More often than not compiling away the library just moves the size from one place to another. Often some of the savings you make in the runtime translate into larger components. For that reason, Svelte who is the poster child for small runtime is also the poster child for comparisons on how Components scale.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/halfnelson/svelte-it-will-scale/blob/master/README.md"&gt;React/Svelte Size Analysis&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/yyx990803/vue-svelte-size-analysis"&gt;Vue/Svelte Size Analysis&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;30 TodoMVCs or 19 TodoMVCs is still a steep curve to reach size equivalency so obviously, this is net positive on size for the most part.&lt;/p&gt;

&lt;p&gt;And making this trade can have other benefits. More specific code can be more performant than generalized code and at each touchpoint be less code than the equivalent generic method. Obviously, these can add up, but these sorts of tradeoffs are often worth it. &lt;/p&gt;

&lt;p&gt;Alternatively, there are frameworks that are completely runtime that have even smaller base runtimes. &lt;a href="https://github.com/jorgebucaran/hyperapp"&gt;HyperApp&lt;/a&gt; advertises a size of about ~1kb, which is even smaller than Svelte's ~1.6kb. So there is no hard and fast rule.&lt;/p&gt;

&lt;p&gt;In fact, it's become a mostly pointless exercise even looking at &lt;a href="https://bundlephobia.com/"&gt;bundlephobia.com&lt;/a&gt; sizes. Modern tree-shaking and dead code elimination can produce sizes noticeably smaller than advertised. But probably more important is that a pattern you find in many frameworks of using submodules like &lt;code&gt;preact/hooks&lt;/code&gt;, &lt;code&gt;svelte/motion&lt;/code&gt;, or &lt;code&gt;solid-js/store&lt;/code&gt; don't count towards the advertised bundle size.&lt;/p&gt;

&lt;p&gt;So the takeaway is the only way to really know framework size is in examples of where it is being used. Marketing buzz like runtime-less is mostly irrelevant to the conversation on size. There are small libraries and there are smaller libraries.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#5-progressive-enhancement-vs-hydration"&gt;
  &lt;/a&gt;
  5. Progressive Enhancement vs Hydration
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rE1DTyft--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ejmxea3pznxc03q5swnp.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rE1DTyft--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ejmxea3pznxc03q5swnp.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hear the term progressive enhancement thrown around a lot. Although the first place I really acknowledged it was the promise of Web Components. The idea is that you could define extra behavior and fallback to native behavior if say the browser didn't support certain features or JavaScript was enabled. Sadly, due to Apple blocking progress on native built-ins it's pretty hard to consider Web Components successful here.&lt;/p&gt;

&lt;p&gt;Nowadays, I hear this term to mean adding small amounts of JavaScript to enhance a server-rendered page. Things like &lt;a href="https://stimulus.hotwired.dev/"&gt;Stimulus&lt;/a&gt;, &lt;a href="https://alpinejs.dev/"&gt;Alpine.js&lt;/a&gt;, or &lt;a href="https://github.com/vuejs/petite-vue"&gt;Petite Vue&lt;/a&gt;. And admittedly these can be progressive enhancement but they can also not be. Simply adding JavaScript to add functionality to a page doesn't mean it works fine without it. There is no guarantee a button works as intended without the JavaScript.&lt;/p&gt;

&lt;p&gt;Conversely, anyone who watched &lt;a href="https://www.youtube.com/watch?v=fnr9XWvjJHw&amp;amp;t=19103s"&gt;Svelte Summit&lt;/a&gt; this year or saw the &lt;a href="https://www.youtube.com/watch?v=4dOAFJUOi-s"&gt;Remix Run beta preview video&lt;/a&gt;, knows these frameworks were showing off fully functioning sites with all JavaScript turned off even though they are full-blown Single Page Apps. Sure it's Svelte or React but that's progressive enhancement in my book.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://alpinejs.dev/"&gt;Alpine.js&lt;/a&gt;, &lt;a href="https://stimulus.hotwired.dev/"&gt;Stimulus&lt;/a&gt;, and company are ultra-small frameworks that are built for adding JavaScript functionality on top of server-rendered DOM nodes instead of more substantial client-side rendering. But all JavaScript frameworks that server render do this as well. They just call it "Hydration".&lt;/p&gt;

&lt;p&gt;A framework might run top-down instead of doing the independently targeted hydration these smaller libraries do but that is more of an implementation detail. Same steps of initializing client state and attaching event listeners.&lt;/p&gt;

&lt;p&gt;And that's it. Progressive enhancement is a consideration like Accessibility. A choice we make as developers to implement rather than a specific technology. Hydration is an inevitability that comes with adding JavaScript functionality to server-rendered nodes. The only thing that matters is how much or little of it we do.&lt;/p&gt;

&lt;p&gt;This brings us to...&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#6-partial-vs-progressive-vs-resumable-hydration"&gt;
  &lt;/a&gt;
  6. Partial vs Progressive vs Resumable Hydration
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FV6ebIWo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k22661vsj12s9ka82rwq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FV6ebIWo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k22661vsj12s9ka82rwq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So there are 3 things here. Or is this one thing. That's the whole problem. I'm sure some of you are just thinking this all makes you thirsty. Just how hydrated should our JavaScript be?&lt;/p&gt;

&lt;p&gt;All joking aside, this is an area with a huge amount of confusion and the reason is instead of naming a specific technique these are loosely-held descriptors. They describe a characteristic of the approach but not how it works. Regardless of the solution, we all need to do it to have interactive JavaScript on our server-rendered pages.&lt;/p&gt;

&lt;p&gt;Partial Hydration as the name implies is that not all of the page needs hydration. In practice, this means we don't need to send all of our component code to the browser. The term "Islands" gets used a lot and it makes sense as the most common approach involves breaking the app into a static page with only these "Islands" of components we need to send to the Browser. &lt;/p&gt;

&lt;p&gt;Progressive Hydration is the ability to hydrate the page as needed. Maybe when it comes into view or maybe on interaction. Even if you end up hydrating the whole page, by breaking up Hydration we can reduce the time spent during the initial load.&lt;/p&gt;

&lt;p&gt;Resumable Hydration is a technique to reduce the execution time during Hydration by serializing the data needed at a local component level to skip the need to do any calculations at hydration time. In so Hydration's only job at that point is to add event handlers. &lt;/p&gt;

&lt;p&gt;These techniques are all not mutually exclusive. &lt;a href="https://astro.build"&gt;Astro&lt;/a&gt; leverages Partial and Progressive Hydration through its manual Islands approach to extend this capability on top of familiar frameworks. &lt;a href="https://github.com/builderio/qwik"&gt;Qwik&lt;/a&gt; has been pioneering Resumable Hydration alongside its use of Component level Progressive Hydration to do a pretty good impression of Partial Hydration without explicit Islands. &lt;a href="https://www.markojs.com"&gt;Marko&lt;/a&gt; has long used its compiler to automatically detect Islands but has been incorporating Resumable Hydration as a means to ship the least possible code to the browser.&lt;/p&gt;

&lt;p&gt;But what this all means in a mechanical sense is a lot less clear. It comes down to what gets hydrated and when. There is a very fine line between deferring work until later and never doing it all. Is your hydration truly resumable if you need to redo work that was done on the server the second your component updates? Is backloading JavaScript to when you interact with it a different sort of cost metrics today aren't capturing?&lt;/p&gt;

&lt;p&gt;You might have noticed the lack of mention of the common solutions in this section like &lt;a href="https://reactjs.org"&gt;React&lt;/a&gt;, &lt;a href="https://vuejs.org"&gt;Vue&lt;/a&gt;, or &lt;a href="https://svelte.dev"&gt;Svelte&lt;/a&gt;. And part of that is Multi-Page App Frameworks are dominating innovation in this space given Single Page Apps are less optimizable in this way. But &lt;a href="https://vuepress.vuejs.org/"&gt;VuePress&lt;/a&gt;' split bundles, and &lt;a href="https://reactjs.org/blog/2020/12/21/data-fetching-with-react-server-components.html"&gt;React Server Components&lt;/a&gt; are looking at ways to apply some of the savings there too.&lt;/p&gt;




&lt;p&gt;And that does it for another installment of JavaScript vs JavaScript. I'm sure it won't be long before new topics present themselves in this ever-evolving ecosystem.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>frameworks</category>
      <category>react</category>
    </item>
    <item>
      <title>Critical Rendering Path (Web Performance)</title>
      <author>Sumit Kumar</author>
      <pubDate>Fri, 17 Sep 2021 13:58:50 +0000</pubDate>
      <link>https://dev.to/coderedjack/critical-rendering-path-web-performance-23ij</link>
      <guid>https://dev.to/coderedjack/critical-rendering-path-web-performance-23ij</guid>
      <description>&lt;p&gt;When it comes to user experience, speed matters.&lt;br&gt;
Poorly performing sites and applications can pose real costs for the people who use them.&lt;/p&gt;

&lt;p&gt;Performance optimization has always been very important for web apps and through this developers makes web applications efficient.&lt;/p&gt;

&lt;p&gt;Before we understand all the performance optimizations tricks like minification, gzip(compression), caching, service workers, css split(media), image optimizations, preload, prefetch, requestAnimationFrame, web worker, code splitting , tree shaking, OCSP stapling(speeds up TLS handshake), scope hoisting, defer rendering, partial hydration, lazy loading, reducing selector complexity, Layout Thrashing(FSL), compositing layer, Domain Sharding(split resources,diff hosts), async JavaScript, etc , we must understand the Critical Rendering Path because once we understand this, most of the performance optimizations will feel obvious.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#critical-rendering-path"&gt;
  &lt;/a&gt;
  Critical Rendering Path
&lt;/h2&gt;

&lt;p&gt;The critical rendering path is the sequence of steps a browser goes through to convert HTML,CSS and JavaScript to actual pixels on the screen. If we can optimize that we can make our page render fast.&lt;/p&gt;

&lt;p&gt;In order to render content the browser has to go through a series of steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Document Object Model(DOM)&lt;/li&gt;
&lt;li&gt;CSS Object Model(CSSOM)&lt;/li&gt;
&lt;li&gt;Render Tree&lt;/li&gt;
&lt;li&gt;Layout&lt;/li&gt;
&lt;li&gt;Paint&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VUimcnNd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-media-1.freecodecamp.org/images/ecrsi9JGRA-uLZxs1ojHe4eJmyig79eJr3Dj" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VUimcnNd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-media-1.freecodecamp.org/images/ecrsi9JGRA-uLZxs1ojHe4eJmyig79eJr3Dj" alt="Critical Rendering Path"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#document-object-model-dom"&gt;
  &lt;/a&gt;
  Document Object Model (DOM)
&lt;/h3&gt;

&lt;p&gt;When we request data from server using URL ,we receive the response in the form of HTTP messages which consists of three parts Start line,Header files and Body.&lt;br&gt;
The start line and headers are textual and the body can contain arbitrary binary data(images,videos,audio) as well as text.&lt;/p&gt;

&lt;p&gt;Once the browser receives the response (HTML markup text) , browser must convert all the markup into something which we usually see on or screens.&lt;/p&gt;

&lt;p&gt;The browser follows well defined set of steps and it starts with processing the HTML and building the DOM.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Convert bytes to characters&lt;/li&gt;
&lt;li&gt;Identify tokens&lt;/li&gt;
&lt;li&gt;Convert tokens to nodes&lt;/li&gt;
&lt;li&gt;Build DOM Tree&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s6osMQVt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://developers.google.com/web/fundamentals/performance/critical-rendering-path/images/full-process.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s6osMQVt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://developers.google.com/web/fundamentals/performance/critical-rendering-path/images/full-process.png" alt="DOM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Initially the characters(&lt;code&gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;meta name="viewport" content="width=device-width"&amp;gt;&amp;lt;link href="styles.css"......&lt;/code&gt;)&lt;br&gt;
are converted to Tokens(&lt;code&gt;StartTag:head Tag:meta Tag:link EndTag:head Hello...&lt;/code&gt;) which is done by tokenizer.&lt;/p&gt;

&lt;p&gt;While the tokenizer is doing this work ,another process consumes these tokens and convert them to Node objects and once we consume all the tokens&lt;br&gt;
we arrive at Document Object Model or DOM which is a tree structure that captures the content and property of HTML and all the relationships between the nodes.&lt;/p&gt;

&lt;p&gt;Browser constructs the DOM incrementally i.e the browser does not have to wait for all the HTML to arrive from server before starting to process, hence we can take advantage of this process to increase speed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css-object-model-cssom"&gt;
  &lt;/a&gt;
  CSS Object Model (CSSOM)
&lt;/h3&gt;

&lt;p&gt;So the DOM captures the content of the page but not the CSS associated. To include CSS , we have to build the CSS Object Model.&lt;br&gt;
CSSOM is also constructed pretty much similar to DOM.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ba030Oco--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://developers.google.com/web/fundamentals/performance/critical-rendering-path/images/cssom-tree.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ba030Oco--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://developers.google.com/web/fundamentals/performance/critical-rendering-path/images/cssom-tree.png" alt="CSSOM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But we cannot apply the same incremental trick(partially constructed CSS tree) that we used in DOM construction, here.&lt;br&gt;
Let us assume that we constructed our page with partial css eg:&lt;br&gt;
&lt;code&gt;p {background:'red'}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And in the later parts of stylesheet(which is not yet received by our browser) we have &lt;code&gt;p {background:'blue'}&lt;/code&gt; which overrides the previous &lt;code&gt;p {background:'red'}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If we use partial CSSOM tree to render our page then we will end up displaying paragraphs with red background instead of blue which is incorrect.&lt;br&gt;
Thus browser blocks page rendering untill it receives and processes all of the CSS.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;CSS IS RENDER BLOCKING&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It is important to note that,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;JAVASCRIPT IS PARSER BLOCKING&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;because it blocks the DOM construction when we encounter the script tag in our HTML markup.&lt;br&gt;
JS can only be run after CSSOM construction as the JavaScript may try to change style of the page.&lt;br&gt;
CSS blocks rendering as well as the JavaScript execution.&lt;/p&gt;

&lt;p&gt;Some scripts dont modify the DOM or the CSSOM and they should not block rendering.&lt;br&gt;
For those scripts we use async ,so that it neither block DOM construction nor gets blocked by CSSOM.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#render-tree"&gt;
  &lt;/a&gt;
  Render Tree
&lt;/h3&gt;

&lt;p&gt;After DOM and CSSOM gets constructed they are combined together and this step can be seen in dev tools as &lt;em&gt;Recalculate Styles&lt;/em&gt; .&lt;br&gt;
DOM and CSSOM forms a render tree that contains the contents and the styles associated with the content.&lt;br&gt;
Render Tree only captures visible content (i.e it ignores elements with properties like display:none)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9qbQR9ez--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://developers.google.com/web/fundamentals/performance/critical-rendering-path/images/render-tree-construction.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9qbQR9ez--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://developers.google.com/web/fundamentals/performance/critical-rendering-path/images/render-tree-construction.png" alt="Render Tree"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#layout"&gt;
  &lt;/a&gt;
  Layout
&lt;/h3&gt;

&lt;p&gt;Now that our render tree is formed we need to figure out where and how all the elements are positioned on page.&lt;br&gt;
This is our layout step.&lt;/p&gt;

&lt;p&gt;Every time we make changes to the geometry(width,height,position) of elements the browser will run layout step.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qy_4TPJH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.stack.imgur.com/eSgwA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qy_4TPJH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.stack.imgur.com/eSgwA.png" alt="layout"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#paint"&gt;
  &lt;/a&gt;
  Paint
&lt;/h3&gt;

&lt;p&gt;Finally in the paint step,the visible content of the page can be converted to pixels to be displayed on the screen.&lt;br&gt;
This process include conversion of vector(boxes or shapes made in the layout step) to raster(combination of individual pixels to be displayed on screen)&lt;br&gt;
which is done by rasterizer. The rasterizer uses draw calls like save , translate, drawRectangle, drawText, clipPath, etc to fill pixels.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vlNEpllm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631882907110/wij37JbU7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vlNEpllm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631882907110/wij37JbU7.png" alt="VectorRaster.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Paint is generally done into a single surface.However sometimes browser makes different surfaces called layers and it can paint into those individually.&lt;br&gt;
Once it is completed, the browser combines all the layers into one layer in a correct order and displays them on screen.This process is referred to as &lt;em&gt;Composite Layers&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QKe-oE4M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://developers.google.com/web/fundamentals/performance/rendering/images/simplify-paint-complexity-and-reduce-paint-areas/layers.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QKe-oE4M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://developers.google.com/web/fundamentals/performance/rendering/images/simplify-paint-complexity-and-reduce-paint-areas/layers.jpg" alt="Composite"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All of this happens on the CPU , the layers are then uploaded to the GPU and then GPU puts pictures up on the screen.&lt;/p&gt;

&lt;p&gt;If there is any kind of visual change in screen from scrolling to animation , the device is gonna put up a new picture or frame onto the screen for&lt;br&gt;
user to see. Most devices refreshes the screen 60 times a second(60fps) which we measure in Hz.&lt;/p&gt;

&lt;p&gt;So if we have 1000ms for 60 frames ,for a single frame we have only ~16ms to render it.&lt;br&gt;
Usually we have around 10ms only as browser does other works in the rest of the time frame.&lt;/p&gt;

&lt;p&gt;If the browser is taking too long to make a frame it will get missed out,the frame rate will drop and content judders on screen. This is often referred to as jank or lag.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ypokh47o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://developers.google.com/web/fundamentals/performance/rendering/images/intro/frame-full.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ypokh47o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://developers.google.com/web/fundamentals/performance/rendering/images/intro/frame-full.jpg" alt="pixel-to-screen pipeline"&gt;&lt;/a&gt;&lt;code&gt;Areas we have most control over in pixel-to-screen pipeline&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Each of these parts of the pipeline represents an opportunity to introduce jank, so it's important to understand exactly what parts of the pipeline our code triggers.&lt;/p&gt;

&lt;p&gt;Hope I was able to properly describe the &lt;strong&gt;Critical Rendering Path&lt;/strong&gt; . In the coming post we will discuss about all the common performance optimizations techniques in great details.&lt;/p&gt;

&lt;p&gt;Resources : &lt;a href="https://developers.google.com/web/"&gt;https://developers.google.com/web/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>performance</category>
      <category>javascript</category>
      <category>css</category>
      <category>html</category>
    </item>
    <item>
      <title>MERN Fullstack Development Example with Simple Bookstore Web Application</title>
      <author>Linh Truong Cong Hong</author>
      <pubDate>Fri, 17 Sep 2021 13:54:47 +0000</pubDate>
      <link>https://dev.to/linhtch90/mern-fullstack-development-example-with-simple-bookstore-web-application-41j7</link>
      <guid>https://dev.to/linhtch90/mern-fullstack-development-example-with-simple-bookstore-web-application-41j7</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KRaALjCi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fs2crxnmycd0w3yna90r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KRaALjCi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fs2crxnmycd0w3yna90r.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hi everyone,&lt;/p&gt;

&lt;p&gt;I want to share with the community the source code of a fullstack web application that I have just developed using MERN stack demonstrating basic features of a bookstore.&lt;/p&gt;

&lt;p&gt;I hope this would be a good resource for anyone who enjoys learning Javascript in general and MERN stack in particular.&lt;/p&gt;

&lt;p&gt;The live demo is accessible at:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bn-bookstore.herokuapp.com/#/"&gt;https://bn-bookstore.herokuapp.com/#/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Source code is available at:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/linhtch90/bn_bookstore_public_source"&gt;https://github.com/linhtch90/bn_bookstore_public_source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy coding and if this is useful for you, please give me a Github star for encouragement!&lt;/p&gt;

&lt;p&gt;Thank you!&lt;/p&gt;

</description>
      <category>react</category>
      <category>mongodb</category>
      <category>node</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
