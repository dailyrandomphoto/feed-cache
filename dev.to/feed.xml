<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Setting The Default Terminal In VS Code</title>
      <author>Amanda Giannelli</author>
      <pubDate>Tue, 09 Mar 2021 14:09:53 +0000</pubDate>
      <link>https://dev.to/giannellitech/setting-the-default-terminal-in-vs-code-95c</link>
      <guid>https://dev.to/giannellitech/setting-the-default-terminal-in-vs-code-95c</guid>
      <description>&lt;p&gt;Sometimes you want a tutorial that is straight and to the point. You want the &lt;em&gt;how&lt;/em&gt;, not the who, what, where, when, why. &lt;/p&gt;

&lt;p&gt;Today's quick lesson: setting the default terminal in VS Code. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#steps" class="anchor"&gt;
  &lt;/a&gt;
  Steps
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Open VS Code&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;CTRL+Shift+P&lt;/code&gt; / &lt;code&gt;⇧⌘P&lt;/code&gt;  and search for &lt;code&gt;terminal select default shell&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Make your selection and press enter (In my case I chose &lt;code&gt;Git Bash&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All of your new terminals will now default to your choice 🎉 &lt;/p&gt;

&lt;p&gt;I hoped this helped you. If there are other quick tips you'd like, or more in depth topics you'd like me to cover, leave a comment or reach out to me, &lt;a href="https://twitter.com/GiannelliTech"&gt;@giannelli.tech&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading! 👩‍💻&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Photo by &lt;a href="https://www.pexels.com/@pixabay?utm_content=attributionCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=pexels"&gt;Pixabay&lt;/a&gt; from &lt;a href="https://www.pexels.com/photo/blur-bright-business-codes-207580/?utm_content=attributionCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=pexels"&gt;Pexels&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>tutorial</category>
      <category>beginners</category>
      <category>devjournal</category>
      <category>todayilearned</category>
    </item>
    <item>
      <title>Quickly and easily mock a REST API with Restapify</title>
      <author>johannchopin</author>
      <pubDate>Tue, 09 Mar 2021 11:01:59 +0000</pubDate>
      <link>https://dev.to/johannchopin/quickly-and-easily-mock-a-rest-api-with-restapify-16om</link>
      <guid>https://dev.to/johannchopin/quickly-and-easily-mock-a-rest-api-with-restapify-16om</guid>
      <description>&lt;p&gt;Hey devs 👋&lt;/p&gt;

&lt;p&gt;Often when you start developing a new frontend project that consume a REST API, the backend is not yet ready. However, very often this one is at first basic and you only want to receive faked data to see how the application behaves. That's when you decide to use a tool to mock your API like &lt;a href="https://www.postman.com/"&gt;postman&lt;/a&gt; or library like &lt;a href="https://github.com/typicode/json-server"&gt;json-server&lt;/a&gt;, &lt;a href="https://github.com/jaywcjlove/mocker-api"&gt;mocker-api&lt;/a&gt; or &lt;a href="https://github.com/micromata/http-fake-backend"&gt;http-fake-backend&lt;/a&gt;. These tools are really good but there still have some negative points. Postman for example is not entirely free to use and needs to login, mocker-api define all routes in a single javascript file and json-server is at some point very restrictive for edge-cases. &lt;/p&gt;

&lt;p&gt;So I decided to work on a new API mocker tool that should be able to handle all cases and that within a nice developer experience flow: &lt;a href="https://restapify.vercel.app/"&gt;Restapify&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Restapify is a nodejs based CLI that allows you to quickly and easily deploy a local REST API by using an intuitive and developer friendly JSON file structure like you will see in NextJS or Sapper. Lets describe how it works by creating a simple mocked API that should serve the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;GET  /me
GET  /posts
GET  /users
GET  /users/:userid
POST /users/:userid
DEL  /users/:userid
GET  /users/:userid/comments
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#create-the-endpoints" class="anchor"&gt;
  &lt;/a&gt;
  Create the endpoints
&lt;/h2&gt;

&lt;p&gt;The starting point is the creation of the folder that will contain your route json file, I will call it &lt;code&gt;/api&lt;/code&gt;. Then we can add some routes to be serve. Creating a route means to add a &lt;code&gt;.json&lt;/code&gt; file where its filename describe the endpoint, the method and the status code and its content the response body. So to create the &lt;code&gt;GET /me&lt;/code&gt; endpoint with the status code &lt;code&gt;200&lt;/code&gt; just create the following file:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;📂 api
┣ 📜 me.GET.200.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Since &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;200&lt;/code&gt; are the default value for the method and the status code, you can simplify the filename to:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;📂 api
┣ 📜 me.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The response should contain a &lt;code&gt;firstname&lt;/code&gt;, a &lt;code&gt;lastname&lt;/code&gt; and an &lt;code&gt;email&lt;/code&gt;, so the file content of &lt;code&gt;/api/me.json&lt;/code&gt; would be something like:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"firstname"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Janie"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"lastname"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Hermann"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Jo.Kessler@yahoo.com"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then lets add the endpoints for &lt;code&gt;/users&lt;/code&gt;. Since there are a few of them we can group them in the same folder &lt;code&gt;users&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;📂 api
┣ 📂 users
┃ ┗ 📜 *.json
┃ ┣ 📂 [userid]
┃ ┃ ┗ 📜 *.json
┃ ┃ ┗ 📜 *.POST.201.json
┃ ┃ ┗ 📜 *.DELETE.201.json
┣ 📜 me.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The folder &lt;code&gt;[userid]&lt;/code&gt; indicate that this route is dynamic. You can then in the JSON file content consume this variable by using the syntax &lt;code&gt;[userid]&lt;/code&gt;. Example in the file &lt;code&gt;/api/users/[userid]/*.json&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"[userid]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Jo.Kessler@yahoo.com"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;If you call then &lt;code&gt;GET /users/42&lt;/code&gt; you will get the response:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"42"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Jo.Kessler@yahoo.com"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Here to get the &lt;code&gt;id&lt;/code&gt; as a number, just cast the variable by using the syntax &lt;code&gt;n:[var]&lt;/code&gt; like &lt;code&gt;"id": "n:[userid]"&lt;/code&gt;. &lt;a href="https://restapify.vercel.app/docs#routes-variable-casting"&gt;Variable casting docs&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Restapify provide a syntax to use the famous &lt;a href="https://github.com/marak/Faker.js/"&gt;fakerjs&lt;/a&gt; library to easily populate your response's body (checkout the &lt;a href="https://restapify.vercel.app/docs#fakerjs-integration"&gt;docs&lt;/a&gt;):&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"firstname"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"[#faker:name:firstName]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"lastname"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"[#faker:name:lastName]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"[#faker:internet:email]"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You can also easily create a waste amount of data by using the &lt;a href="https://restapify.vercel.app/docs#for-loops"&gt;for-loop syntax&lt;/a&gt;. So if you want to get 10 comments with the request &lt;code&gt;GET /users/:userid/comments&lt;/code&gt; just write this in the JSON file &lt;code&gt;/api/users/[userid]/comments.json&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="s2"&gt;"#for i in range(10)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"n:[i]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"creatorId"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"n:[userid]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"content"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"[#faker:lorem:sentences]"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="s2"&gt;"#endfor"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;So now we have created all the endpoints of the API that send a succeeded response. But what if we want to test the behaviour of the application when the user doesn't exist in &lt;code&gt;GET /users/:userid&lt;/code&gt; for example. A real API would probably return a &lt;code&gt;404&lt;/code&gt; without any content. To mock this behaviour, Restapify implement the concept of &lt;a href="https://restapify.vercel.app/docs#routes-state"&gt;endpoint states&lt;/a&gt;. To do this you just have to create a new file for each different state by adding at the end of the file the syntax &lt;code&gt;{STATE_NAME}&lt;/code&gt; separated by a dot. So lets create a new state for &lt;code&gt;GET /users/:userid&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;📂 api
┣ 📂 users
┃ ┣ 📂 [userid]
┃ ┃ ┗ 📜 *.json
┃ ┃ ┗ 📜 *.404.{NOT_FOUND}.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;To return no-content in Restapify you have to use this syntax as file content:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;An empty file would be more convenient but it's not valid for a JSON file according to the &lt;a href="https://www.ecma-international.org/publications-and-standards/standards/ecma-404/"&gt;ECMA-404&lt;/a&gt; standard.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now that you have created your endpoints, it's time to serve the mocked API. For that install the Restapi CLI...&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn global add restapify 
&lt;span class="c"&gt;# or npm install -g restapify&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;...and then serve the &lt;code&gt;api/&lt;/code&gt; folder:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;restapify serve api/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;It will then open a dashboard in your browser that give you an overview of the mocked API.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ezsBi-87--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0i3enl3r1k7s2638ajoh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ezsBi-87--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0i3enl3r1k7s2638ajoh.png" alt="dashboard screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can in this dashboard consult the endpoints and their content, fetch them and more important select which state of the endpoints you want to serve.&lt;/p&gt;

&lt;p&gt;So if you click on the state button &lt;code&gt;NOT_FOUND&lt;/code&gt;, it will update the API to serve this state of the endpoint, so if you directly after request &lt;code&gt;GET /users/42&lt;/code&gt; you will receive a &lt;code&gt;404&lt;/code&gt;. This is really helpful to test your frontend (for example a login forms) and you can create so much several state as you want to fit all you need and edge cases.&lt;/p&gt;

&lt;p&gt;So I presented the most important features of Restapify but I really encourage you to check the &lt;a href="https://restapify.vercel.app/docs"&gt;official documentation&lt;/a&gt; of it to see other use cases like &lt;a href="https://restapify.vercel.app/docs#consume-routes-query-string-variables"&gt;query string&lt;/a&gt;, &lt;a href="https://restapify.vercel.app/docs#use-routes-variables-in-sequence"&gt;route variable in for-loops&lt;/a&gt; or the &lt;a href="https://restapify.vercel.app/docs#fakerjs-integration"&gt;fakerjs integration&lt;/a&gt; in more details.&lt;/p&gt;

&lt;p&gt;You can find some prepared examples of mocked API in &lt;a href="https://restapify.vercel.app/examples"&gt;https://restapify.vercel.app/examples&lt;/a&gt; so that you can directly play and see how it feel. If you have any question or feedback feel free to post it in the discussion and if you want to checkout the source code, here is the GitHub repository: &lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/johannchopin"&gt;
        johannchopin
      &lt;/a&gt; / &lt;a href="https://github.com/johannchopin/restapify"&gt;
        restapify
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Quickly and easily deploy a mocked REST API
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Have a good day ⭐&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>api</category>
      <category>rest</category>
    </item>
    <item>
      <title>Women Empowerment, Mentorship &amp; Growth</title>
      <author>Masa Abushamleh</author>
      <pubDate>Tue, 09 Mar 2021 08:38:17 +0000</pubDate>
      <link>https://dev.to/nerdingitout/women-empowerment-mentorship-growth-1jh0</link>
      <guid>https://dev.to/nerdingitout/women-empowerment-mentorship-growth-1jh0</guid>
      <description>&lt;p&gt;Women empowerment has always been something that I’m passionate about. Being surrounded by a community that helped me grow to become the reliable and strong developer I am today is something that I am truly grateful for and I wish the same for every woman out there! To find the support system to help her grow and become someone extraordinary and remarkable in what she does.&lt;br&gt;
In the light of International Women’s Day, I decided to highlight some of the key factors in empowering women (and everyone) everywhere from my own perspective and experience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mentorship" class="anchor"&gt;
  &lt;/a&gt;
  Mentorship
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A8xH3wou--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zfr6gi5wsqqbdltouwwg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A8xH3wou--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zfr6gi5wsqqbdltouwwg.jpg" alt="bonneval-sebastien-lG-6_ox_UXE-unsplash"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the most important parts of my life is getting my first mentor when I was a sophomore, it helped shape the path I took in my career afterward and I’m really grateful for my first mentorship experience and for our conversations on leadership and how to improve my social skills. It really opened my eyes to focus on my goals in life and how to achieve them.&lt;br&gt;
As a result, I did not only focus on my technical skills but I also worked on my soft skills, so I took speech classes to boost my confidence and writing classes to improve my communication skills in addition to participating in extracurricular activities. All of these, and more, helped me shape who I am as a person today. After all, leadership and soft skills are essential in a developer’s career, and as a woman, they helped me pave the path of my career journey.&lt;br&gt;
So I would like to highlight the importance of mentorship, whether you were a student, newly grad, or a professional, mentorship is essential to your career! Grow your connections, find the right mentor for you, and get started with your mentorship journey! You will be surprised with how much you can gain through mentorship.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tackling-imposter-syndrome" class="anchor"&gt;
  &lt;/a&gt;
  Tackling Imposter Syndrome
&lt;/h2&gt;

&lt;p&gt;Imposter Syndrome has always been a challenge that both women and men deal with. Feeling like a fraud and dealing with those negative thoughts on a daily basis while doing any task can be really challenging. Imposter syndrome will always be an issue that we will deal with as it’s something that’s coming from within and we have to fight these doubts! And that’s why it is important to spread awareness of Imposter Syndrome and always remind ourselves that “I’m strong, I’m enough”.&lt;br&gt;
Imposter syndrome can be born from several factors related to personality traits like anxiety or perfectionism or could be related to behavioral courses affected by the surrounding environment.&lt;br&gt;
There are several ways you could tackle imposter syndrome, and I’m not an expert, but there were some practices that helped me stand strong against it, like talking to a mentor or someone I know about it, organizing my thoughts, and reminding myself that I’m doing fine and that no one’s perfect, having a reasonable list of tasks to achieve on daily/weekly basis, and finally taking a moment to reflect on myself, my achievements and giving myself pep talks so often to encourage myself.&lt;br&gt;
Now.. take a moment to reflect on your own achievements and how far you have gone from a personal or professional point of view.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#growth" class="anchor"&gt;
  &lt;/a&gt;
  Growth
&lt;/h2&gt;

&lt;p&gt;Now that I have mentioned imposter syndrome, it is essential to bring up growth. Each person grows at their own pace and this year I learned how to grow.. patiently. Patience is essential to growth and it is okay if we take our time growing. One time I was listening to an episode of the TED Radio Hour podcast titled “It Takes Time” and I loved it! and I have been thinking of it almost every day! It reminded me that some things do not need to be rushed to reach their full potential.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8cHvKIH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6i484cisu3z6d0jgnw6z.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8cHvKIH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6i484cisu3z6d0jgnw6z.jpg" alt="hello-i-m-nik-AsRAyHIkOHk-unsplashff"&gt;&lt;/a&gt; &lt;br&gt;
One of my favorite parts was when they talked about sloths! (my favorite animal) and it changed my perspective a whole lot! We always perceived sloths as lazy, but in fact, they are not.. They are just taking their time doing things their own way and I think that’s amazing!&lt;br&gt;
Sloths might be slow, but they are built differently (in fact, they are strong), which allows them to stay hanging on trees the entire day or pull heavy items (an adult sloth can be 3x stronger than a human).&lt;br&gt;
Sloths are built differently, so we cannot really say that they are slow because they don’t meet our usual pace (or expectations) as humans. I could write many facts about sloths but then it would be a long list of facts. So I hope that my thoughts on growth gave you a new perspective on the topic (and sloths).&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3YzvGwvm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/we3a6ifbe6zxzse573la.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3YzvGwvm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/we3a6ifbe6zxzse573la.jpg" alt="william-phipps-l4QSO66AwmE-unsplash (1)"&gt;&lt;/a&gt;&lt;br&gt;
Essentially, community, mentorship, and allyship are all part of growing as a person. And so I would like to encourage you to take on the opportunity to be part of a community whether as a mentee or a mentor.&lt;br&gt;
Allow yourself to challenge and be challenged, but always remember to pace yourself and grow patiently. And with that being said, I would like to give some room for the question “How can I grow? How will I grow patiently”&lt;br&gt;
Happy International Women’s Day!&lt;/p&gt;

</description>
      <category>shecoded</category>
      <category>womenintech</category>
    </item>
    <item>
      <title>Protecting Website Copyrighted Content</title>
      <author>Nabil Tharwat</author>
      <pubDate>Tue, 09 Mar 2021 03:30:22 +0000</pubDate>
      <link>https://dev.to/kl13nt/how-to-protect-website-copyrighted-content-pck</link>
      <guid>https://dev.to/kl13nt/how-to-protect-website-copyrighted-content-pck</guid>
      <description>&lt;p&gt;Protecting your website's copyrighted content is tricky. Let's see how it's done! 👀&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Cover by &lt;a href="https://unsplash.com/@jeremythomasphoto?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Jeremy Thomas&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/space?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;. This article is available in Arabic on my &lt;a href="https://iamnabil.netlify.app/tutorials/2021-03-08-drm-website-content-protection"&gt;blog&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Bottom line is no matter how many scripts you load, events you prevent, authentication layers you add, users will always be able to redistribute your content online. Our goal is to reduce the number of users who can achieve this to a percentage we can handle manually. &lt;/p&gt;

&lt;p&gt;In this article, I'll be talking about &lt;em&gt;DRM&lt;/em&gt; and &lt;em&gt;Forensic Watermarking&lt;/em&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#digital-rights-management-drm" class="anchor"&gt;
  &lt;/a&gt;
  Digital Rights Management (DRM)
&lt;/h1&gt;

&lt;p&gt;DRM tools are a set of access control technologies for restricting the use of proprietary hardware and copyrighted work. The set of tools we'll look at today relate only to the web development side of it. &lt;/p&gt;

&lt;p&gt;DRM encryption is the encryption of content such as videos and images to prevent others from using it. This is two-way encryption. Given a key, you can decrypt the contents of said content. &lt;/p&gt;

&lt;p&gt;The usual flow is you begin by registering a user, verifying their identity using some payment method, and then granting them access to the encrypted content and the key for that content, thus granting them a license to access that content. The browser then proceeds to decrypt the content on the user's machine to output a valid representation that can be displayed on a webpage. &lt;/p&gt;

&lt;p&gt;Currently, the &lt;em&gt;Encrypted Media Extensions API&lt;/em&gt; handles that. For it to work you need to have a browser that supports the EME API, a packaging service to encrypt your content, a DRM key generation service, and a &lt;em&gt;Content Decryption Module&lt;/em&gt; (CDM) for client-side decryption. The EME API allows you to interact and define CDMs for your application.&lt;/p&gt;

&lt;p&gt;This procedure is used by Netflix, Spotify, and others. But there's a twist. Each browser supports a specific DRM service. So you need to make a copy of the original content for each service the browsers that you support can work with. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In general, Widevine is supported by Firefox, Chrome, and Opera, PlayReady is supported by IE/Edge, and FairPlay is supported by Safari.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There's another twist! Once a user has access to your DRM content, they'll be able to redistribute it! Recall that DRM decryption takes place on the user' machine, and so with the proper software they'll be able to output a simple decrypted file to redistribute. This is where Forensic Watermarking comes into the picture! &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#forensic-watermarking" class="anchor"&gt;
  &lt;/a&gt;
  Forensic Watermarking
&lt;/h1&gt;

&lt;p&gt;Watermarking is the process of adding some information to media. Things like logos, source distributor, etc. But how can something like this benefit us in preventing the redistribution of our content? &lt;/p&gt;

&lt;p&gt;Forensic Watermarking is the process of embedding special hidden information about a user in the media itself. Most forensic  techniques use footprints left on media to predict the history of the media. &lt;/p&gt;

&lt;p&gt;This can be used to detect the user who redistributed a video on the web. Think of it like inspecting a website. You can inspect the media to check the username of the user who redistributed that media, and then decide what to do. This includes legal action.&lt;/p&gt;

&lt;p&gt;But there's another twist. Media degrades after operating on it a few times. This can damage the embedded information over time. Users can just record their screen in the case of video, their system's audio output in the case of audio, etc. You won't be able to detect that. &lt;/p&gt;

&lt;p&gt;The point of all of this is to reduce the ability of a user to redistribute the content, and this &lt;em&gt;will&lt;/em&gt; successfully reduce the percentage of users who have the hardware and software to accomplish this, limiting the number of users to a handful you can manually deal with. &lt;/p&gt;

&lt;p&gt;This is more of a forensics thing, and I'm a frontend developer. Hopefully I made it clear enough! If you spot any errors please point it out! 👀&lt;/p&gt;

&lt;p&gt;Thanks for reading! You can follow me on &lt;a href="https://twitter.com/kl13nt"&gt;Twitter&lt;/a&gt;, or read more of my content here or on my &lt;a href="https://iamnabil.netlify.app/blog"&gt;blog&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Sources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://w3c.github.io/encrypted-media"&gt;W3C Encrypted Media Extensions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/pallycon/how-netflix-protects-contents-part-1-a40508ed0001"&gt;How Netflix Protect Their Content&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Encrypted_Media_Extensions_API"&gt;Encrypted Media Extensions API MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Plugins/Flash_to_HTML5/Video/DRM_and_authentication"&gt;DRM and Authentication MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Digital_rights_management"&gt;DRM (Wikipedia)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>drm</category>
    </item>
    <item>
      <title>Nevertheless, Diana Coded in 2021!</title>
      <author>Super Diana</author>
      <pubDate>Tue, 09 Mar 2021 01:52:39 +0000</pubDate>
      <link>https://dev.to/superdiana/nevertheless-diana-coded-in-2021-1cnf</link>
      <guid>https://dev.to/superdiana/nevertheless-diana-coded-in-2021-1cnf</guid>
      <description>&lt;h3&gt;
  &lt;a href="#new-beginings" class="anchor"&gt;
  &lt;/a&gt;
  New beginings
&lt;/h3&gt;

&lt;p&gt;2020 was quite an intense year. I have no words to express what it meant to me, in terms of challenges and successes, of learning, of many losses including the passing of my grandmother, the woman who raised me. &lt;/p&gt;

&lt;p&gt;Yet, 2021 brings hope, regardless of the pandemic... my eyes have opened, my horizons have broadened and I have gained SO much from last year's experience. I learned to connect with people and communities in a way I never thought I would.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#my-most-recent-achievement-was" class="anchor"&gt;
  &lt;/a&gt;
  My most recent achievement was…
&lt;/h3&gt;

&lt;p&gt;Completing &lt;a href="https://github.com/alphacentauri82/scoutx"&gt;ScoutX&lt;/a&gt;. A Diabetes monitoring tool to notify emergency contacts in case of irregular situations. This saved my life, many times. I'm finishing work to build a GPS LoRaWan tracker powered by &lt;a href="https://www.rakwireless.com/en-us/company/wisblock-series"&gt;WisBlock&lt;/a&gt; and &lt;a href="https://helium.com"&gt;Helium&lt;/a&gt;. These companies have been super supportive as well as &lt;a href="https://www.nightscoutfoundation.org/"&gt;The Nightscout Foundation&lt;/a&gt;. I feel like this year I found a purpose, I can help others, I can use technology for good. I can help fellow diabetics like me improve their lives with the use of technology.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#advocating-for-myself-looks-like" class="anchor"&gt;
  &lt;/a&gt;
  Advocating for myself looks like…
&lt;/h3&gt;

&lt;p&gt;Standing up for my principles even if it means standing alone.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#my-biggest-goal-is" class="anchor"&gt;
  &lt;/a&gt;
  My biggest goal is…
&lt;/h3&gt;

&lt;p&gt;Leave a legacy, it suffices me to know that in the last 20 years I may have done something that has paved the way for this and future generations in technology.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#my-advice-for-allies-to-support-underrepresented-folks-who-code-is" class="anchor"&gt;
  &lt;/a&gt;
  My advice for allies to support underrepresented folks who code is...
&lt;/h3&gt;

&lt;p&gt;DO THE WORK!, actions rather than words!, educate yourself!.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#special-thanks-to" class="anchor"&gt;
  &lt;/a&gt;
  Special thanks to...
&lt;/h3&gt;

&lt;p&gt;Lauren Lee, Avital Tzubeli, Heather Baden, Natalia Venditto, Nina Zakharenko, Jen Looper, Erica Stanley, Angel Banks, Beth Laing, Ana Chin A Loy, Chloe Condon, Gaby Trueba ... you have had such a deep impact in my life, I have no words to express my gratitude for everything you've done for me. From the bottom of my heart, thank you!&lt;/p&gt;

</description>
      <category>shecoded</category>
      <category>career</category>
      <category>gratitude</category>
    </item>
    <item>
      <title>SheCoded: A year of silence and reflection</title>
      <author>Sylwia Vargas</author>
      <pubDate>Tue, 09 Mar 2021 00:20:32 +0000</pubDate>
      <link>https://dev.to/sylwiavargas/shecoded-a-year-of-silence-and-reflection-2c15</link>
      <guid>https://dev.to/sylwiavargas/shecoded-a-year-of-silence-and-reflection-2c15</guid>
      <description>&lt;p&gt;When &lt;a href="https://dev.to/sylwiavargas/nevertheless-sylwia-vargas-coded-4fn"&gt;I participated in the #shecoded campaign&lt;/a&gt; last year, I did not want to recount my story in a fashion of a heroic journey. I took that space to reflect on what my personal perseverance toolkit included. I liked that format because it allowed me to create new rules of the game. They were straightforward: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;actively oppose injustice,&lt;/li&gt;
&lt;li&gt;stand up for yourself and for others,&lt;/li&gt;
&lt;li&gt;learn to brag about your achievements,&lt;/li&gt;
&lt;li&gt;don't overapologize,&lt;/li&gt;
&lt;li&gt;maintain work-life balance.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At the time I thought about these points as simply a process for "debugging" impostor syndrome out of my head and sexism out of my direct environment. I did not know how much impact these intentions would have on me in the next 12 months. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;tl;dr this post got lengthy so long story short, I found three sources of energy&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#building-assertiveness"&gt;boundary work&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;
&lt;a href="#nurturing-fluffiness"&gt;kind and fluffy folks and communities&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;
&lt;a href="#being-silent"&gt;silence&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#building-assertiveness" class="anchor"&gt;
  &lt;/a&gt;
  Building assertiveness
&lt;/h2&gt;

&lt;p&gt;Last year, I had a pleasure to participate in a workshop by &lt;a href="https://twitter.com/mckensiemack"&gt;McKensie Mack&lt;/a&gt; on boundaries where they laid out how we should be investing emotionally in people and not companies:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Be transformational with people and transactional with institutions"&lt;/p&gt;

&lt;p&gt;-- &lt;cite&gt;&lt;a href="https://twitter.com/desireeadaway"&gt;Desiree Adaway&lt;/a&gt; on boundary work&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Stating my boundaries, giving feedback, talking about my achievements, communicating obstacles, negotiating terms and even being unapologetic about my eight hours of sleep every night has become much easier. I have always come across as direct and assertive but inside, any of these situations would take a heavy toll on me and result in a burning feeling of guilt afterwards. Now I feel okay before, during and after majority of difficult conversations and tough moments. I wouldn't say I no longer have any feelings about them but &lt;strong&gt;I am much more confident because I know what I expect from a workplace, a community, a job, a colleague and from myself.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Thanks to that, I was able to just recently tell my most wonderful manager that I wanted to change jobs, not be sneaky about it and not surprise her with a sudden resignation notice. I don't think I would have been so comfortable with such a conversation a year ago, and of course the fact that this conversation happened was also in part of what an amazing manager she is. But, I was really proud of how that went and how I carried myself through the subsequent job search. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nurturing-fluffiness" class="anchor"&gt;
  &lt;/a&gt;
  Nurturing fluffiness
&lt;/h2&gt;

&lt;p&gt;I realized that just as much as sexism and tech-bro energy drain me, fluffiness, kindness and honesty make me feel grounded, safe and courageous. A year ago, the stressful stuff would consume a lot of my energy during and after work and I felt like I was shrinking inside myself just to get by. This is a very sad and pitiful way to be. I realized that by letting this stuff get to me, I was giving it much more power that it deserved and instead, I decided to nurture little pockets of fluffiness and kindness. &lt;/p&gt;

&lt;p&gt;So, for instance, I doubled down on supporting kind practices in the cohorts I lead and on creating more moments when folks could genuinely connect with each other. I started &lt;a href="https://buttondown.email/sylwia"&gt;a newsletter for kind folks in tech&lt;/a&gt; to build a community nurturing kindness in tech. I co-created a feminist tech collective that offers free dev support to NGOs and has been run in a non-hierarchical collaborative manner. And finally, I realized that I am the happiest when I write Ruby, Ruby on Rails (or React for the same reasons), which I elaborated on in &lt;a href="https://dev.to/sylwiavargas/why-do-you-love-ruby-actually-an-ode-5e7n"&gt;this blog post&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;When I joined tech, I was mostly exposed to competitive, patriarchal and toxic cultures and I tried to get by. That doesn't mean that I'd shy away from giving feedback or trying to debug/fight/feedback what was broken but just that the energy it took from me would leave me emotionally deflated. I would find myself in a constant defensive state and that's not a feeling you want to sustain. &lt;strong&gt;I remembered my friend once telling me that choosing to not response is also a way to resist toxicity because of the emotional labor otherwise required.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As soon I rejected that fight mode, I would react from the place of empathy and kindness and see that these issues no longer felt personal and I had more energy to engage folks in conversations on problematic behaviors. &lt;strong&gt;I also noticed that if there are a few fluffy folks in a cohort or a team, the bullies just don't have space to be obnoxious.&lt;/strong&gt; These two findings are something I will think more about in the next 12 months.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#being-silent" class="anchor"&gt;
  &lt;/a&gt;
  Being silent
&lt;/h2&gt;

&lt;p&gt;I noticed that I was brought up in a way that I always feel pressure to lead the conversation, to entertain and to just fill up the space with words. If there was silence after a question during the meeting, I had to answer just to not make it awkward for the person who runs the meeting. Or, that if something is wrong, I should speak up. This past year, I have been rethinking my relationship to words. &lt;/p&gt;

&lt;p&gt;While I can be very talkative and I genuinely love getting to know people on a deeper level, talking for the sake of filling the silence drains me and stresses me out. I can't do small talk. Culturally I have not been equipped to deal with shallow exchanges. Ask me how I am and I will tell you about the disturbing thing I read, about the pain in my back because I slept in a funny way or about how the anxiety creeps up on me when I think about the pandemic and my grandma. For the longest time I felt inadequate to function in an American corporate setting. That is until I realized that I can just be my straightforward self and not do the small talk. It actually has been much simpler than I anticipated. I just don't. And people mostly don't see to make much of it. &lt;/p&gt;

&lt;p&gt;Similarly, I don't have to (and shouldn't) be always the one person who answers a question. &lt;strong&gt;Silence is great for the team — we need time to process the question or to "rehearse" the answer before we speak&lt;/strong&gt; (if you've ever dealt with impostor syndrome, you know what I mean). &lt;strong&gt;Silence gives us time to get ready to participate. It gives space for the marginalized folks to join in.&lt;/strong&gt; So, while I still think that women should be heard in meetings, I don't assume that I need to always be the first one to voice my opinion because I am comfortable with being the extrovert in meetings and I am a white woman. This new approach helped me run my lessons better and introduced more calm in how I lead and take part in meetings. &lt;/p&gt;

&lt;p&gt;Lastly, there are many ways to speak out and act against injustice. I learned that I work better with allies in helping them find ways to be active than confronting toxic folks myself about sexism. I would give feedback but I no longer try to call out every sexist joke in real-time. That being said, I now allocate this energy mostly to being an ally and speaking out against other forms of toxicity and injustice. Most importantly, I'm calm about it and no longer lose sleep.&lt;/p&gt;




&lt;p&gt;As horrible as these past 12 months have been health-wise and family-wise for me, they have been tremendous for building up silent strength for when the world gets better. Meanwhile, I'm grateful to everyone who has been on this journey with me, even if they were an internet kind stranger. &lt;/p&gt;

</description>
      <category>shecoded</category>
    </item>
    <item>
      <title>Learn about difference between Type &amp; Interface in Typescript</title>
      <author>CodeOzz</author>
      <pubDate>Mon, 08 Mar 2021 23:15:06 +0000</pubDate>
      <link>https://dev.to/codeozz/learn-about-difference-between-type-interface-in-typescript-1nif</link>
      <guid>https://dev.to/codeozz/learn-about-difference-between-type-interface-in-typescript-1nif</guid>
      <description>&lt;p&gt;If you are using typescript, you might use interface &amp;amp; type but if I ask you the difference between them, are you able to answer it ?&lt;/p&gt;

&lt;p&gt;At the end of this article, you will be able to answer it during any discussion or interview !&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#type" class="anchor"&gt;
  &lt;/a&gt;
  Type
&lt;/h2&gt;

&lt;p&gt;The basic, it allow us to create a new type !&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#interface" class="anchor"&gt;
  &lt;/a&gt;
  Interface
&lt;/h2&gt;

&lt;p&gt;In contrary to &lt;code&gt;type&lt;/code&gt;, &lt;code&gt;interface&lt;/code&gt; is restricted to an object type.&lt;/p&gt;

&lt;p&gt;With the news release, &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;interface&lt;/code&gt; are similar but there some differences between them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#similitude" class="anchor"&gt;
  &lt;/a&gt;
  Similitude
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#object-typing" class="anchor"&gt;
  &lt;/a&gt;
  Object typing
&lt;/h3&gt;

&lt;p&gt;You can define the shape of an object with both, but the syntax is not the same&lt;/p&gt;

&lt;p&gt;&lt;code&gt;with interface:&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;code&gt;with type:&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#extend" class="anchor"&gt;
  &lt;/a&gt;
  Extend
&lt;/h3&gt;

&lt;p&gt;Both can be extended, and the difference is ... yes the syntax again !&lt;/p&gt;

&lt;p&gt;&lt;code&gt;with interface:&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;AB&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ab&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;code&gt;with type:&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;AB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#the-difference" class="anchor"&gt;
  &lt;/a&gt;
  The difference
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#what-type-can-do-and-what-interface-cant-do" class="anchor"&gt;
  &lt;/a&gt;
  What type can do, and what interface cant do
&lt;/h3&gt;

&lt;p&gt;Unlike &lt;code&gt;interface&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt; can be used for creating new type with union, tuples or can be used to defined primitive type !&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="c1"&gt;// union&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Primitive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;symbol&lt;/span&gt; &lt;span class="c1"&gt;// Create a new type from primitives type&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;DataTuple&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// tuple typing&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#what-interface-can-do-and-what-type-cant-do" class="anchor"&gt;
  &lt;/a&gt;
  What interface can do, and what type cant do
&lt;/h3&gt;

&lt;p&gt;A &lt;code&gt;class&lt;/code&gt; can &lt;code&gt;implement&lt;/code&gt; an &lt;code&gt;interface&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Toto&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Interface can be merged in a single &lt;code&gt;interface&lt;/code&gt; if there are defined multiple times&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Toto&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Toto&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;66&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;As you can see &lt;code&gt;type&lt;/code&gt; &amp;amp; &lt;code&gt;interface&lt;/code&gt; are very similar but each other have his own dedicated feature !&lt;/p&gt;

&lt;p&gt;I personally use interface when I need to type object structure, and I use type when I need to create type from primitive type or when I want to combine other types in one type !&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



</description>
      <category>typescript</category>
      <category>node</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>3 attributes your images must have!</title>
      <author>Jordan Finneran</author>
      <pubDate>Mon, 08 Mar 2021 21:49:13 +0000</pubDate>
      <link>https://dev.to/jordanfinners/3-attributes-your-images-must-have-3fhj</link>
      <guid>https://dev.to/jordanfinners/3-attributes-your-images-must-have-3fhj</guid>
      <description>&lt;h2&gt;
  &lt;a href="#contents" class="anchor"&gt;
  &lt;/a&gt;
  Contents
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt; &lt;a href="#intro"&gt;Intro&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="#img"&gt;Images&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="#background"&gt;Background Images&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="#summary"&gt;Summary&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#intro" class="anchor"&gt;
  &lt;/a&gt;
  Intro &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;They say a picture tells a thousand words. It certainly costs a thousand words when it comes to performance!&lt;br&gt;
Images tend to be quite large files, so take a while to load. They also block rendering so they have to complete before content further down the page can load.&lt;/p&gt;

&lt;p&gt;But there is hope! We can make images lazy and get out the way of the rest of the page with some simple attributes!&lt;/p&gt;

&lt;p&gt;First thing first, make sure your images are as small as possible in the first case. I'd highly recommend &lt;a href="https://squoosh.app/"&gt;Squoosh&lt;/a&gt; by the Chrome team which you can use to optimise the size of your images.&lt;/p&gt;

&lt;p&gt;Convert them to more modern formats like &lt;a href="https://developers.google.com/speed/webp/"&gt;webp&lt;/a&gt; which can save up to 26% of file size just by changing the file type!! Webp has &lt;a href="https://caniuse.com/?search=webp"&gt;fairly good browsers support now too&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#images" class="anchor"&gt;
  &lt;/a&gt;
  Images &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Here's a current image on a website:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"some_image_file.png"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can improve the loading of this image with a few attributes, like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"some_image_file.png"&lt;/span&gt; &lt;span class="na"&gt;loading=&lt;/span&gt;&lt;span class="s"&gt;"lazy"&lt;/span&gt; &lt;span class="na"&gt;decoding=&lt;/span&gt;&lt;span class="s"&gt;"async"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"A Description of the image"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Easy!!&lt;/p&gt;

&lt;p&gt;Lets dig into those attributes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#loading" class="anchor"&gt;
  &lt;/a&gt;
  Loading
&lt;/h3&gt;

&lt;p&gt;It has &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Img#browser_compatibility"&gt;wide browser support now&lt;/a&gt;, and if the browser doesn't support it, it will just be ignored, so no excuse not to add it!&lt;/p&gt;

&lt;p&gt;It can have the values of &lt;code&gt;eager&lt;/code&gt; or &lt;code&gt;lazy&lt;/code&gt;.&lt;br&gt;
Eager is the default value, meaning it will load the image immediately regardless of if the user can currently see the image.&lt;br&gt;
Lazy allows the browser to decide when to load the image, which is will do when the user is nearer the content. Meaning we don't have to load a full page of images straight away, only the ones we can see immediately.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#decoding" class="anchor"&gt;
  &lt;/a&gt;
  Decoding
&lt;/h3&gt;

&lt;p&gt;This is &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Img#browser_compatibility"&gt;supported across all browsers&lt;/a&gt;.&lt;br&gt;
This gives the browser a hint on how you want your image to be decoded, either synchronously or asynchronously. Either getting in the way of the rest of your content or not.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#alt" class="anchor"&gt;
  &lt;/a&gt;
  Alt
&lt;/h3&gt;

&lt;p&gt;This doesn't impact loading performance. But please use it! 🙏&lt;br&gt;
It takes very little effort to add and helps make your site more accessible!&lt;br&gt;
The best way to come up with the value is to imagine you are describing the image to your friend over the phone, how would you do it.&lt;br&gt;
This is exactly how the alt attribute functions to screen readers so please use it!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#background-images" class="anchor"&gt;
  &lt;/a&gt;
  Background Images &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Background images are a bit more tricky to be lazy loading.&lt;/p&gt;

&lt;p&gt;Firstly I would really try not to use background images as they &lt;a href="https://www.levelaccess.com/css-background-images-and-accessibility/"&gt;aren't great for accessibility&lt;/a&gt;, so if at all possible use a normal image element.&lt;/p&gt;

&lt;p&gt;If you absolutely can't use a normal image. Then you'll have to resort to using JavaScript to only display the image when its near to viewport.&lt;/p&gt;

&lt;p&gt;This can be achieved with the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API"&gt;Intersection Observer&lt;/a&gt;, there is a great example of that on the &lt;a href="https://web.dev/lazy-loading-images/#images-css"&gt;web.dev site&lt;/a&gt; which I would recommend if you absolutely can't use the image element.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#summary" class="anchor"&gt;
  &lt;/a&gt;
  Summary &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;In summary, these 3 attributes improve the performance of your website with minimal effort!&lt;br&gt;
There is no browser support issues or any reason not to use them, so add them to your images now!&lt;/p&gt;

&lt;p&gt;These attributes also work is you are using a picture element, just set them on the image element as normal.&lt;br&gt;
Here's an example of using a picture element for switching images based on dark mode or not.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;picture&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"/images/linkedin-white.webp"&lt;/span&gt; &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"(prefers-color-scheme: dark)"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"linkedin"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/images/linkedin.webp"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"LinkedIn Profile"&lt;/span&gt; &lt;span class="na"&gt;loading=&lt;/span&gt;&lt;span class="s"&gt;"lazy"&lt;/span&gt; &lt;span class="na"&gt;decoding=&lt;/span&gt;&lt;span class="s"&gt;"async"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/picture&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;They also work is you are using a image element, with multiple sized images via &lt;code&gt;srcset&lt;/code&gt; attribute.&lt;/p&gt;

&lt;p&gt;Add these 3 simple attributes to your images right now!&lt;/p&gt;

&lt;p&gt;Happy Building!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>html</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Nevertheless, Jesse Coded </title>
      <author>Jesse Smith Byers</author>
      <pubDate>Mon, 08 Mar 2021 21:44:03 +0000</pubDate>
      <link>https://dev.to/jessesbyers/nevertheless-jesse-coded-3hh7</link>
      <guid>https://dev.to/jessesbyers/nevertheless-jesse-coded-3hh7</guid>
      <description>&lt;p&gt;My story: I'm a 42 year old mother of two boys, and I started my &lt;a href="https://dev.to/jessesbyers/the-beginning-why-code-1n1d"&gt;career change from K-12 public education into software&lt;/a&gt; at age 40.&lt;/p&gt;

&lt;p&gt;In March 2020, when I was one month away from graduating from a full-time immersive bootcamp, my kids' school shut down for the rest of the year. I started squeezing what should have been 8-10 hours of coding into the 5am-9am 4-hour time block each day, so I could start home-schooling at 9am. Nevertheless, I graduated on time.&lt;/p&gt;

&lt;p&gt;The post-bootcamp job search looked a lot different for me than for my non-parent classmates, and I &lt;a href="https://dev.to/jessesbyers/balancing-covid-19-homeschooling-and-post-bootcamp-goals-5ghc"&gt;reflected on the struggles and came up with a system that worked for me&lt;/a&gt; at that time. I kept myself accountable through my (almost) weekly DEV posts. Until my son knocked over a full mug of coffee on my laptop. Nevertheless, I figured out a way to make it all work. &lt;/p&gt;

&lt;p&gt;I learned that "making it work" means constantly revisiting your goals, and constantly re-calibrating what is feasible and desirable in any given time period. I adjusted my post-bootcamp career goals, and ended up combining my past experience in education with code to start working in software education. Because of the pandemic, I started working full-time with two boys at home. Nevertheless, it worked.&lt;/p&gt;

&lt;p&gt;I was conflicted about this decision, and struggled with thoughts that I had somehow failed or given up by not ending this story with a title of "software engineer". Periodic reflection helps me realize that the "recipe" for career changing into tech has to be different for everyone, and DEV has been a great platform to foster my reflection about &lt;a href="https://dev.to/jessesbyers/reflecting-on-a-year-of-code-4bpa"&gt;how I'm progressing in the field&lt;/a&gt;. Nevertheless, I still need reminders to keep reflecting.&lt;/p&gt;

&lt;p&gt;Today, I work full-time in software ed, while freelancing part-time on educational software (in my non-existent free time). This gives me balance and fulfillment. And I realize how lucky I am to be able to juggle these roles, thanks to a supportive husband who has been doing our cooking, and moving to a new town where the kids have been attending in-person school 5 days a week since September. This has not been true for all of us this year.&lt;/p&gt;

&lt;p&gt;Nevertheless. Despite the ups and downs and in and outs of my journey, I am now a software engineer AND I am an advocate for increasing access for more underrepresented folks in tech. This is actually the main part of my job description, and in the end, I am very proud of this outcome.&lt;/p&gt;

&lt;p&gt;Therefore...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-advice-for-allies-to-support-underrepresented-folks-who-code-is" class="anchor"&gt;
  &lt;/a&gt;
  My advice for allies to support underrepresented folks who code is...
&lt;/h2&gt;

&lt;p&gt;I have learned over the past year, as a bootcamp student, and now as a bootcamp employee, that one of the biggest keys to supporting underrepresented folks is flexibility:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;We need flexible schedules so learning can happen at the times that work for us.&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;We need flexible structures that allow us to set our own goals and check them off, and revise them as needed, as we continuously juggle code and life.&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;We need flexible definitions of what success looks like, including the various roles that might be the best fit for us.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Happy International Women's Day, everyone!&lt;/p&gt;

</description>
      <category>shecoded</category>
    </item>
    <item>
      <title>I'm Sam Jarman 👨🏼‍💻, and I support women devs in 2021!</title>
      <author>Sam Jarman 👨🏼‍💻</author>
      <pubDate>Mon, 08 Mar 2021 21:36:58 +0000</pubDate>
      <link>https://dev.to/samjarman/i-m-sam-jarman-and-i-support-women-devs-in-2021-5hf2</link>
      <guid>https://dev.to/samjarman/i-m-sam-jarman-and-i-support-women-devs-in-2021-5hf2</guid>
      <description>&lt;p&gt;My name is Sam Jarman, and I imagine like a lot of men of tech, I'm also on a journey to correct my own biases (subconscious or not) and do my bit to get us towards a gender-equal world.&lt;/p&gt;

&lt;p&gt;For IWD I want to highlight one of the projects I did in the past - Dev Chats. I'm proud that my written interview series is about 50/50 women and features people of colour and people from the LBGQTIA+ community. &lt;/p&gt;

&lt;p&gt;Below I want to highlight some of my favourites for you to read. Starting off with Hannah, who was so kind to write me pretty much a college essay per question, through to Kristina who has had an impressive journey into the security field. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/samjarman" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_3AX77b9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--KlBjSKwR--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/19747/97b2fe78-0de2-4c81-91aa-a41493c58b60.png" alt="samjarman image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/samjarman/dev-chats-hannah-gray-8j1" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Dev Chats: Hannah Gray&lt;/h2&gt;
      &lt;h3&gt;Sam Jarman 👨🏼‍💻 ・ Feb  8 '18 ・ 10 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#publicspeaking&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#mentoring&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#internship&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#introverts&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/samjarman" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_3AX77b9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--KlBjSKwR--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/19747/97b2fe78-0de2-4c81-91aa-a41493c58b60.png" alt="samjarman image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/samjarman/ask-for-and-be-a-mentor-with-lauren-lee-11pl" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Ask for and be a Mentor with Lauren Lee&lt;/h2&gt;
      &lt;h3&gt;Sam Jarman 👨🏼‍💻 ・ Jun 18 '19 ・ 12 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#mentoring&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#bootcamps&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/samjarman" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_3AX77b9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--KlBjSKwR--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/19747/97b2fe78-0de2-4c81-91aa-a41493c58b60.png" alt="samjarman image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/samjarman/mary-thengvall-on-the-value-of-developer-relations-11c6" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Mary Thengvall on the Value of Developer Relations&lt;/h2&gt;
      &lt;h3&gt;Sam Jarman 👨🏼‍💻 ・ Mar 13 '19 ・ 8 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#developerrelations&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#business&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/samjarman" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_3AX77b9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--KlBjSKwR--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/19747/97b2fe78-0de2-4c81-91aa-a41493c58b60.png" alt="samjarman image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/samjarman/mentoring-women-learning-to-code-with-pauline-narvas-384" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Mentoring Women Learning to Code with Pauline Narvas&lt;/h2&gt;
      &lt;h3&gt;Sam Jarman 👨🏼‍💻 ・ Nov 24 '19 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#devchats&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#learning&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#journey&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/samjarman" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_3AX77b9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--KlBjSKwR--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/19747/97b2fe78-0de2-4c81-91aa-a41493c58b60.png" alt="samjarman image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/samjarman/kristina-balaam-on-breaking-in-to-security-4939" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Kristina Balaam on Breaking in to Security&lt;/h2&gt;
      &lt;h3&gt;Sam Jarman 👨🏼‍💻 ・ Apr 18 '18 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#interview&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#security&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Heads up: These posts are a bit old now so their job titles might not be accurate any more.&lt;/p&gt;

</description>
      <category>shecodedally</category>
    </item>
    <item>
      <title>Paint Your Github Profile with Serverless</title>
      <author>Jhey Tompkins</author>
      <pubDate>Mon, 08 Mar 2021 20:30:36 +0000</pubDate>
      <link>https://dev.to/jh3y/paint-your-github-profile-with-serverless-15i7</link>
      <guid>https://dev.to/jh3y/paint-your-github-profile-with-serverless-15i7</guid>
      <description>&lt;p&gt;I'm often asked things like "What should I make?" or "Where do the ideas come from?". I've &lt;a href="https://dev.to/jh3y/playfulness-in-code-supercharge-your-learning-by-having-fun-39hf"&gt;covered how I generate ideas before&lt;/a&gt;. The gist being, write down all your ideas, great or small.&lt;/p&gt;

&lt;p&gt;This works great for demos. But what about when you want to learn something a little more applied? Like putting together a project or trying out more tools.&lt;/p&gt;

&lt;p&gt;One thing I advocate is building tools. Tools that you want to use. Tools that solve a problem for you. That's right, make for yourself.&lt;/p&gt;

&lt;p&gt;This has many benefits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You're invested in the idea.&lt;/li&gt;
&lt;li&gt;You get to learn many things to solve your problem.&lt;/li&gt;
&lt;li&gt;You have something to show potential employers/clients that's different.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That last point could be particularly useful. Interesting side projects make for good talking points. I can't tell you how many times I've had comments because of my &lt;a href="https://github.com/jh3y"&gt;Github profile&lt;/a&gt;. Because the hiring staff check it out and see an image painted in the contributions graph.&lt;/p&gt;

&lt;p&gt;Today, we're going to walk through a project I made last year. "&lt;a href="https://github.com/jh3y/vincent-van-git"&gt;Vincent van Git&lt;/a&gt;" gives you a way to paint your Github contributions graph. I want to cover the "What?", the "Why?", and the "How?".&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OV8jCOt6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/ext_tw_video_thumb/1324811112391606273/pu/img/j-Ih1-GXsegmIrHW.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--fkhTix2N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1355149810148515842/NBuYxo5I_normal.jpg" alt="Jhey 🐻🛠 profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Jhey 🐻🛠
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @jh3yy
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Want to spice up your Github contributions graph? 😅🌶️&lt;br&gt;&lt;br&gt;I made a tool for you! 😎&lt;br&gt;&lt;br&gt;Let me introduce you to "Vincent van Git" 🎨&lt;br&gt;&lt;br&gt;Turn your Github contributions graph into a canvas! 😎&lt;br&gt;&lt;br&gt;⚒️ A &lt;a href="https://twitter.com/reactjs"&gt;@reactjs&lt;/a&gt; app with @netlify functions &amp;amp;&amp;amp; &lt;a href="https://twitter.com/greensock"&gt;@greensock&lt;/a&gt; animations&lt;br&gt;👉 &lt;a href="https://t.co/UYf4rRHxkL"&gt;vincent-van-git.netlify.app&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      20:29 PM - 06 Nov 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1324811198857125890" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1324811198857125890" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1324811198857125890" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;





&lt;h2&gt;
  &lt;a href="#what" class="anchor"&gt;
  &lt;/a&gt;
  What?
&lt;/h2&gt;

&lt;p&gt;As mentioned above, "Vincent van Git" helps you paint your Github contributions graph. It's a web app that generates a shell script for you to run on your machine. The result is that you populate your graph with commits that paint a picture. Over time (around 3 months), that picture will move and you'll need to recreate it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--enN8vvKe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/jh3yy/image/upload/f_auto%2Cq_auto/v1615228999/jhey.dev/jh3y-github-profile_tqakr3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--enN8vvKe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/jh3yy/image/upload/f_auto%2Cq_auto/v1615228999/jhey.dev/jh3y-github-profile_tqakr3.png" alt="Github profile for jh3y with painting"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why" class="anchor"&gt;
  &lt;/a&gt;
  Why?
&lt;/h2&gt;

&lt;p&gt;This part's split into two, "Why make it?" and "Why make it?" ha.&lt;/p&gt;

&lt;p&gt;First. Before making "Vincent", I'd always used the package "&lt;a href="https://github.com/gelstudios/gitfiti"&gt;gitfiti&lt;/a&gt;". It's a command-line tool for applying graffiti to your contributions graph. It uses Python and you draw images with Arrays.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;KITTY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you squint hard enough, you'll see the kitty. But, the fact it's a non-visual tool for a visual result made it tricky for me to use. It's a great tool, don't get me wrong. But, I always wanted a visual way to make my creations.&lt;/p&gt;

&lt;p&gt;Now, I could've created a front end to generate that Array. And then used it with gitfiti. But, why stop there? Why not have a go at creating my own version from scratch?&lt;/p&gt;

&lt;p&gt;This leads us to the second "Why?". Because there's an opportunity to learn a variety of different tools here. There's also the opportunity to try new things out. And this goes back to the point we made in the introduction. With side projects that aren't the norm, you get to solve problems that aren't the norm. And that will help you develop your skills as a problem solver.&lt;/p&gt;

&lt;p&gt;Before diving into the things learned and how. Here are some of the things I got to try out more.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://react-hook-form.com/"&gt;&lt;code&gt;react-hook-form&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://moment.github.io/luxon/"&gt;&lt;code&gt;luxon&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cheerio.js.org/"&gt;&lt;code&gt;cheerio&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sindresorhus/electron-store"&gt;&lt;code&gt;electron-store&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sindresorhus/electron-dl"&gt;&lt;code&gt;electron-dl&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tonejs.github.io/"&gt;&lt;code&gt;tone.js&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They aren't likely to pop up in a tutorial CRUD app. That's not to say we shouldn't follow those tutorials when we're starting out. But, when we start looking for "What's next?", there are advantages to being adventurous.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A4iyscdN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/jh3yy/image/upload/f_auto%2Cq_auto/v1615214203/jhey.dev/todo-app-todo-app_iknloh.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A4iyscdN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/jh3yy/image/upload/f_auto%2Cq_auto/v1615214203/jhey.dev/todo-app-todo-app_iknloh.jpg" alt='Spider Man pointing at Spider Man meme with the words "Todo App by X" and "Todo App by Y"'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how" class="anchor"&gt;
  &lt;/a&gt;
  How?
&lt;/h2&gt;

&lt;p&gt;It's time for "How?". I'm going to break this part down into different sections. I won't dig in too deep but I will go over how certain things are possible. The talking points so to speak.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#electron" class="anchor"&gt;
  &lt;/a&gt;
  Electron
&lt;/h3&gt;

&lt;p&gt;I had it in my head I wanted to create an &lt;code&gt;electron&lt;/code&gt; app for "Vincent". A desktop app I could fire up, draw something, and hit "Submit". It didn't pan out that way but that's how it started.&lt;/p&gt;

&lt;p&gt;And this was a key part of the project. I had chosen to use &lt;code&gt;electron&lt;/code&gt; because I wanted to make a React app that could use Node on the user's machine. That would provide a way to invoke "git" from within &lt;code&gt;electron&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I hadn't played with this idea much before but it was a chance to get familiar with the &lt;a href="https://www.electronjs.org/docs/api/ipc-renderer"&gt;ipcRenderer&lt;/a&gt;. That's a way you can communicate between the &lt;code&gt;renderer&lt;/code&gt; and the &lt;code&gt;main&lt;/code&gt; process. That means you can hit a button in React world and fire a function in Node world.&lt;/p&gt;

&lt;p&gt;I put together &lt;a href="https://github.com/jh3y/electron-parcel-react-starter"&gt;this repo&lt;/a&gt; that shows how this is possible. On OSX, if you press a message button in the front end, it uses &lt;code&gt;say&lt;/code&gt; on the command line to read out the message.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#front-end" class="anchor"&gt;
  &lt;/a&gt;
  Front End
&lt;/h3&gt;

&lt;p&gt;I had a good idea of what I wanted here. We needed a grid that resembled the Github contributions graph. A user can use their pointer to paint the grid. Each cell can either be transparent or one of four shades of green. Here's what the final grid looks like.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/jh3y/embed/ExNdwEy?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The tricky part with these types of interaction and React is that we don't want to update the state on every paint. That would cause lots of rerendering. Instead, we can use refs to keep track of what's going on.&lt;/p&gt;

&lt;p&gt;Making something different challenges us to use the tools we use in a different way. Something like Vincent is great for working with DOM manipulation and React. I've done this for other projects too like &lt;a href="https://pxl.netlify.app"&gt;"PxL"&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This part of the project was all about generating the Array we mentioned earlier. We're giving the user a way to generate the Array of digits from 0 to 4 without having to type it out.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#web-scraping-with-serverless" class="anchor"&gt;
  &lt;/a&gt;
  Web Scraping with Serverless
&lt;/h3&gt;

&lt;p&gt;Now, what makes "Vincent" possible is empty commits. The way it works is that we generate hundreds of empty commits and commit them to a repository of your choice. And those empty commits show up in the contribution graph.&lt;/p&gt;

&lt;p&gt;How do you get the four different greens? Well, this depends on the amounts of commits. For example, if we say your max commits per year is 100. Then to get the 4 levels, we can use 400, 300, 200, and 100 commits per day. That will generate the four shades of green.&lt;/p&gt;

&lt;p&gt;The main thing we need is the max number of commits for the username. To grab that we make some checks and then scrape the activity page on Github. In "Vincent", we ask for a user name, branch name, and repository name. "Vincent" checks that they exist and that they're empty before scraping for commits.&lt;/p&gt;

&lt;p&gt;We're making about 4 or 5 requests here. This is where serverless comes in handy. We can put them requests into a &lt;a href="https://www.netlify.com/products/functions/"&gt;Netlify function&lt;/a&gt; and then the front end only needs to make one request.&lt;/p&gt;

&lt;p&gt;This is the important part of that function. Here we make a request for the "contributions" page. And then we use &lt;code&gt;cheerio&lt;/code&gt; to scrape for the highest amount of commits over the last year.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getCommitMultiplier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Grab the page HTML&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PAGE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`https://github.com/users/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/contributions`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="c1"&gt;// Use Cheerio to parse the highest commit count for a day&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cheerio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PAGE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c1"&gt;// Instantiate an Array&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;COUNTS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="c1"&gt;// Grab all the commit days from the HTML&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;COMMIT_DAYS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[data-count]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c1"&gt;// Loop over the commit days and grab the "data-count" attribute&lt;/span&gt;
  &lt;span class="c1"&gt;// Push it into the Array&lt;/span&gt;
  &lt;span class="nx"&gt;COMMIT_DAYS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;each&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;DAY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;COUNTS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;COMMIT_DAYS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;DAY&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;attribs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data-count&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="c1"&gt;// console.info(`Largest amount of commits for a day is ${Math.max(...COUNTS)}`)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;COUNTS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You could create a local version of this too and parse the response. Try making that request with your own username.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#generating-a-shell-script" class="anchor"&gt;
  &lt;/a&gt;
  Generating a Shell Script
&lt;/h3&gt;

&lt;p&gt;Next up we need a shell script to push all these generated empty commits. This part is about creating a big string in a loop. For every commit, we are assigning a date and many commits based on the draw level.&lt;/p&gt;

&lt;p&gt;The first part requires the use of &lt;code&gt;luxon&lt;/code&gt; (&lt;a href="https://momentjs.com/docs/#/-project-status/"&gt;We don't need &lt;code&gt;moment.js&lt;/code&gt; anymore&lt;/a&gt;) to match dates to commits. There is a little Math around the dates that was a little tricky on the first couple of tries. But once it's sussed, your good!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;processCommits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;commits&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;multiplier&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onCommit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;TODAY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;local&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;START_DAY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;TODAY&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;minus&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;days&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;commits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;genArr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;commits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;LEVEL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;commits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;NUMBER_COMMITS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;LEVEL&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;multiplier&lt;/span&gt;
    &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;NUMBER_COMMITS&lt;/span&gt;
    &lt;span class="nx"&gt;genArr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;NUMBER_COMMITS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;// Dispatch a message.&lt;/span&gt;
  &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ACTIONS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TOASTING&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;toast&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TOASTS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;INFO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;MESSAGES&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TOTAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="na"&gt;life&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="c1"&gt;// Loop through the commits matching up the dates and creating empty commits&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;genArr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Git commit structure&lt;/span&gt;
    &lt;span class="c1"&gt;// git commit --allow-empty --date "Mon Oct 12 23:17:02 2020 +0100" -m "Vincent paints again"&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;COMMITS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;genArr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;COMMITS&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;COMMIT_DAY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;START_DAY&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;plus&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;days&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;COMMITS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;onCommit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;COMMIT_DAY&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toISO&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;includeOffset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}))&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once we have all the commit data ready it's time to generate that script. It's a long string based on the commit dates, the username, branch, etc.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;generateShellScript&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;commits&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;multiplier&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;repoPath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;dispatch&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;SCRIPT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`mkdir &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;repoPath&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
cd &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;repoPath&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
git init
`&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;processCommits&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;commits&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;multiplier&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;SCRIPT&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;`git commit --allow-empty --date "&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;)}" -m "Vincent paints again"\n`&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;dispatch&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;SCRIPT&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;`git remote add origin https://github.com/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.git\n`&lt;/span&gt;
  &lt;span class="nx"&gt;SCRIPT&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;`git push -u origin &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;\n`&lt;/span&gt;
  &lt;span class="nx"&gt;SCRIPT&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;`cd ../\n`&lt;/span&gt;
  &lt;span class="nx"&gt;SCRIPT&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;`rm -rf &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;repoPath&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;\n`&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;SCRIPT&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#ditching-electron" class="anchor"&gt;
  &lt;/a&gt;
  Ditching Electron
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;"Wait. I thought you wanted to use electron?" – Reader&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I did.&lt;/p&gt;

&lt;p&gt;I got quite far with it. But, I hit some blockers, and that's OK. The issues were around pushing the commits via Node. It would take a long time and sometimes run out of buffer. The other issue was that I couldn't communicate this to the front end in a clean way.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sgpP_3HS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ypw5zfpbmkwqjk9o2sec.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sgpP_3HS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ypw5zfpbmkwqjk9o2sec.jpg" alt="Some of my scribble notes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is why I started generating the shell scripts. And I'd started digging in with &lt;code&gt;electron-dl&lt;/code&gt; and &lt;code&gt;electron-store&lt;/code&gt; when it hit me. "This belongs on the web".&lt;/p&gt;

&lt;p&gt;I'd only read up on how to package a desktop app for different platforms and it looked OK. But, from testing and feedback, there were some issues already with Windows.&lt;/p&gt;

&lt;p&gt;There was also the factor of usability. This isn't a tool you use every day. And the web is more accessible than downloading and installing an app, etc.&lt;/p&gt;

&lt;p&gt;I decided to ditch electron at this point. And this is where React is great. Because I'd created various building blocks for the front end, it was painless to port those into a web app.&lt;/p&gt;

&lt;p&gt;Was it a waste of time? No!&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--fkhTix2N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1355149810148515842/NBuYxo5I_normal.jpg" alt="Jhey 🐻🛠 profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Jhey 🐻🛠
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @jh3yy
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/joelnet"&gt;@joelnet&lt;/a&gt; 🤫 I've been exploring &lt;a href="https://twitter.com/electronjs"&gt;@electronjs&lt;/a&gt; apps and I've got to the point where I'm now converting it to a web app instead 😅😂&lt;br&gt;&lt;br&gt;Plus side? I've learned about electron 💯
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      14:33 PM - 30 Oct 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1322184887936450563" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1322184887936450563" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1322184887936450563" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Because I didn't use electron for the final product, doesn't mean it was a waste of time to try. In fact, I learned a lot about &lt;code&gt;electron&lt;/code&gt; in a short space of time which was neat.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ui-fun" class="anchor"&gt;
  &lt;/a&gt;
  UI Fun
&lt;/h3&gt;

&lt;p&gt;At this stage, I had a working proof of concept 🙌&lt;/p&gt;

&lt;p&gt;Now I could have some fun with it and put together all the conveniences for users. A form to configure, the ability to save and load drawings, animations, etc.&lt;/p&gt;

&lt;p&gt;These are the things that stood out for me.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#configuration" class="anchor"&gt;
  &lt;/a&gt;
  Configuration
&lt;/h4&gt;

&lt;p&gt;I needed forms for configuration. Somewhere for a user to put their username, branch, and repository information. But, I also wanted to create a sliding drawer effect.&lt;/p&gt;

&lt;p&gt;For form handling, I could've reached for &lt;code&gt;formik&lt;/code&gt; or created the form handling myself. But instead, I thought I'd give &lt;code&gt;react-hook-form&lt;/code&gt; a try and it was great. It was another opportunity to try something different. Here's how the sliding drawer looks.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/jh3y/embed/VwmEMeP?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The other benefit to building things like this is that you can look for patterns to refactor. This drawer became a reusable component. I reuse it for an "info" drawer on the right side in the app.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#audio" class="anchor"&gt;
  &lt;/a&gt;
  Audio
&lt;/h4&gt;

&lt;p&gt;I like to add a little whimsy to my projects. It's something people associate with me. Sound was a must and I hooked up some button clicks and actions to audio with a quick custom hook.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useSound&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;soundRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Audio&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;play&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;soundRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="nx"&gt;soundRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;play&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pause&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;soundRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pause&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;soundRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pause&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;soundRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;play&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;pause&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;useSound&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But, the real joy would be audio when painting the grid. I wanted to try out Tone.js some more after seeing it on &lt;a href="https://www.learnwithjason.dev/get-weird-with-audio-on-the-web"&gt;"Learn with Jason"&lt;/a&gt;. And this seemed like a great opportunity. Different levels play different notes. Erasing plays a dull note.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/jh3y/embed/BaQqRXE?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#toasts" class="anchor"&gt;
  &lt;/a&gt;
  Toasts
&lt;/h4&gt;

&lt;p&gt;The app needed some little toast components to let the user know what's happening. For example, confirming a save or telling the user that the commits are being generated.&lt;/p&gt;

&lt;p&gt;I could've reached for off-the-shelf ones. But, I couldn't remember making any myself in open source. This felt like a good opportunity to do that. With a little React and GreenSock, I had a nice Toasts component. The neat thing about creating a Toast component is that it makes you think more about components. You need to use the state to trigger creation. But, you don't tie state to the Toasts. It's worth checking the code on that one.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/jh3y/embed/ZEBqXVb?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#animation" class="anchor"&gt;
  &lt;/a&gt;
  Animation
&lt;/h4&gt;

&lt;p&gt;I love to put some animation somewhere. And with this being my own project I can put as much as I like in.&lt;/p&gt;

&lt;p&gt;What better than a loading animation when the shell script gets generated? Playing on the project name and writing code, I settled on this.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/jh3y/embed/eYzvQzq?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Some audio and 8-bit style music tops it off!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#zip-files" class="anchor"&gt;
  &lt;/a&gt;
  Zip Files
&lt;/h4&gt;

&lt;p&gt;If you try and download a shell script for users, you're prompted with a security warning. It's not something I've needed to do before and this was new to me.&lt;/p&gt;

&lt;p&gt;The audience on live stream suggested trying out &lt;code&gt;jszip&lt;/code&gt;. And this solved a problem in a neat way. Using &lt;code&gt;jszip&lt;/code&gt; I could bundle a &lt;code&gt;README&lt;/code&gt; and the shell script for the user and have them download a single zip file. This way the user has instructions to run the file too.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;FILE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;FILE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vincent-van-git.sh&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;SCRIPT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;FILE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;README.md&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;README&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ZIP_FILE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;FILE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;generateAsync&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blob&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nx"&gt;downloadFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ZIP_FILE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vincent-van-git.zip&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This was convenient and another opportunity to try something new that I wouldn't have.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thats-it" class="anchor"&gt;
  &lt;/a&gt;
  That's It!
&lt;/h2&gt;

&lt;p&gt;I deployed it, made a quick video, and shared it! All the code is open source. And you can use &lt;a href="https://vincent-van-git.netlify.app"&gt;the app&lt;/a&gt; to paint commits to your Github profile with serverless. I learned a bunch from creating "&lt;a href="https://vincent-van-git.netlify.app"&gt;Vincent van Git&lt;/a&gt;". And it solves a problem for me. There were techniques for me to try and opportunities to try out different packages.&lt;/p&gt;

&lt;p&gt;What's the actionable advice here?&lt;/p&gt;

&lt;p&gt;Make for yourself. That's the actionable advice here. Make something that you will find useful. Make a tool or something you're interested in. It could solve a particular problem for yourself. It will likely solve a problem for others too. And it gives you an outlet to learn and try new things.&lt;/p&gt;

&lt;p&gt;Make for yourself.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>css</category>
    </item>
    <item>
      <title>Congrats to the "Hack the Planet" Contest Winners!</title>
      <author>Jess Lee (she/her)</author>
      <pubDate>Mon, 08 Mar 2021 19:53:38 +0000</pubDate>
      <link>https://dev.to/devteam/congrats-to-the-hack-the-planet-contest-winners-2a63</link>
      <guid>https://dev.to/devteam/congrats-to-the-hack-the-planet-contest-winners-2a63</guid>
      <description>&lt;p&gt;I'm so excited to introduce you all to the winners and winning projects of the New Relic x DEV &lt;a href="https://dev.to/devteam/announcing-the-new-relic-hack-the-planet-contest-on-dev-5d"&gt;Hack the Planet&lt;/a&gt; contest! &lt;/p&gt;

&lt;p&gt;Participants were asked to submit their projects on The Relicans (a new community created and moderated by New Relic, dedicated to software developers and the topics that interest them). Because of this, New Relic has announced the winners on The Relicans today ⭐️ &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#head-over-to-this-post-on-the-relicans-to-find-out-if-your-project-was-given-a-grand-prize-or-runnerup-award-big-congrats-to-the-winners" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Head over to this post on &lt;a href="https://www.therelicans.com/therelicans/hack-the-planet-contest-winners-announced-22po"&gt;The Relicans&lt;/a&gt; to find out if your project was given a Grand Prize or Runner-Up award. BIG congrats to the winners.&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;To &lt;em&gt;everyone&lt;/em&gt; who submitted a project for this hackathon, please pat yourselves on the back. You've created an app dedicated to saving the planet and we were able to plant a  bunch of trees in the process. It's efforts like these that help us all see the larger value of software development in the world we live in ❤️&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
