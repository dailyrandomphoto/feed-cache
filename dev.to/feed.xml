<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>ngrok: Expose a local web server to the internet</title>
      <author>Abayomi Ogunnusi</author>
      <pubDate>Wed, 29 Sep 2021 00:26:01 +0000</pubDate>
      <link>https://dev.to/drsimplegraffiti/ngrok-expose-a-local-web-server-to-the-internet-4m67</link>
      <guid>https://dev.to/drsimplegraffiti/ngrok-expose-a-local-web-server-to-the-internet-4m67</guid>
      <description>&lt;p&gt;Hello devs, I got introduced to a tool that allows you to expose a web server running on your local machine to the internet. Its ngrok&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0hbD2g-n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/wDGCA2dv9VJxC/giphy.gif%3Fcid%3Decf05e47p6d7ak5bsa9bvswppv0yweaggihnvbvx7dai0yco%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0hbD2g-n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/wDGCA2dv9VJxC/giphy.gif%3Fcid%3Decf05e47p6d7ak5bsa9bvswppv0yweaggihnvbvx7dai0yco%26rid%3Dgiphy.gif%26ct%3Dg" alt="exposed secret"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;p&gt;Go to &lt;a href="https://ngrok.com/download"&gt;Ngrok Link&lt;/a&gt; to signup and download the ngrok for your operating system&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zaNNRLFf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8pmv5rvhlwuqdyasg0dl.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zaNNRLFf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8pmv5rvhlwuqdyasg0dl.PNG" alt="ngrok1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZLZqN1Vg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0pkdlungu324v3vdsv27.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZLZqN1Vg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0pkdlungu324v3vdsv27.PNG" alt="ngrok 5"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's say for example you are working on a node app running on &lt;code&gt;http://localhost:3000&lt;/code&gt; and you want to expose/share your server to a colleague without using ipconfig.&lt;/p&gt;

&lt;p&gt;üéØ Launch the ngrok&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2ijFXQ9Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u6xnpxp18tuooo2f2hyh.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2ijFXQ9Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u6xnpxp18tuooo2f2hyh.PNG" alt="ngrok2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then type the following command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;ngrok&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;your&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In my case &lt;code&gt;ngrok http 3000&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You should get something like this&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sZ7CBaQ7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j7xnh4bas5gfrrmii0qy.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sZ7CBaQ7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j7xnh4bas5gfrrmii0qy.PNG" alt="ngrok4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üéØ Copy the forwarding link highlighted in red and test on any browser. (Okay, the moment of truth, what did you get? üòÅ)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rkc9xYtp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gpkkpsoa3qk1rzqakeer.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rkc9xYtp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gpkkpsoa3qk1rzqakeer.PNG" alt="ngrok 4"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#password-protect-your-tunnel"&gt;
  &lt;/a&gt;
  Password protect your tunnel
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;ngrok&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;username:password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In my case, it will be &lt;br&gt;
&lt;code&gt;ngrok http -auth="drsimple:ngrokpassword" 3000&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O9Rt-yi1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c9bwt30zpfnwcp3azcnm.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O9Rt-yi1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c9bwt30zpfnwcp3azcnm.PNG" alt="ngrok 6"&gt;&lt;/a&gt;&lt;br&gt;
Open the ngrok terminal and paste the above command.&lt;br&gt;
copy the forwarding link and paste it into your browser.&lt;/p&gt;

&lt;p&gt;This time you get:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yy4TlZ8q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fxd4s1widbubad2fn04x.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yy4TlZ8q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fxd4s1widbubad2fn04x.PNG" alt="ngrok 7"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üéØ Lastly, let us look at how we can run ngrok in our command prompt in few steps&lt;br&gt;
Copy the path where you downloaded ngrok&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4aCZtW-S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hklgoe5anc2f9e4gasvh.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4aCZtW-S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hklgoe5anc2f9e4gasvh.PNG" alt="ngrok 8"&gt;&lt;/a&gt;&lt;br&gt;
üéØ Go to the environment variable&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h-HiMULw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n83n2uffnoidkkbfiejc.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h-HiMULw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n83n2uffnoidkkbfiejc.PNG" alt="ngrok 9"&gt;&lt;/a&gt;&lt;br&gt;
 Click on the path, Click Edit, New, and Paste the path copied earlier.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JBwY-MTz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jmas7vnply8v3j1l8vea.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JBwY-MTz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jmas7vnply8v3j1l8vea.PNG" alt="ngrok 11"&gt;&lt;/a&gt;&lt;br&gt;
Repeat the above step for the system variable.&lt;/p&gt;

&lt;p&gt;üéØ Your command prompt should be able to run ngrok successfully. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ny3eHyEH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ijg6qnibbf329zck9qe.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ny3eHyEH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ijg6qnibbf329zck9qe.PNG" alt="ngrok 13"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üë®üèΩ‚Äçüè´ For further customization check the recommended video and the ngrok docs.&lt;/p&gt;

&lt;p&gt;I hope this was helpful. Thanks üôåüèΩ  for reading.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/drsimplegraffiti"&gt;
        drsimplegraffiti
      &lt;/a&gt; / &lt;a href="https://github.com/drsimplegraffiti/drsimplegraffiti"&gt;
        drsimplegraffiti
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Config files for my GitHub profile.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/drsimplegraffiti/drsimplegraffiti/blob/main/my%20banner1.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SEimLKUY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/drsimplegraffiti/drsimplegraffiti/raw/main/my%2520banner1.png" alt="Calm Developer"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
Hi üëã, I'm Abayomi&lt;/h1&gt;
&lt;h3&gt;
A passionate Web developer from Nigeria&lt;/h3&gt;
&lt;p&gt; &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/0221f07f12f1c558b0bb19eb613b97fb328311347f96c85e1e3e0d5abbef3c16/68747470733a2f2f6b6f6d617265762e636f6d2f67687076632f3f757365726e616d653d647273696d706c656772616666697469266c6162656c3d50726f66696c65253230766965777326636f6c6f723d306537356236267374796c653d666c6174"&gt;&lt;img src="https://camo.githubusercontent.com/0221f07f12f1c558b0bb19eb613b97fb328311347f96c85e1e3e0d5abbef3c16/68747470733a2f2f6b6f6d617265762e636f6d2f67687076632f3f757365726e616d653d647273696d706c656772616666697469266c6162656c3d50726f66696c65253230766965777326636f6c6f723d306537356236267374796c653d666c6174" alt="drsimplegraffiti"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt; &lt;a href="https://github.com/ryo-ma/github-profile-trophy"&gt;&lt;img src="https://camo.githubusercontent.com/5b0425119d718a2d7a29a18c91a874bf87d18b05bf7565b62eb133731bffe04d/68747470733a2f2f6769746875622d70726f66696c652d74726f7068792e76657263656c2e6170702f3f757365726e616d653d647273696d706c656772616666697469" alt="drsimplegraffiti"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt; &lt;a href="https://twitter.com/drsimplegraffi1" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/0d465f23af0c86fcbd93694bafaed3eb69691738e2fbdcfaa4aa0dbe1d559962/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f666f6c6c6f772f647273696d706c65677261666669313f6c6f676f3d74776974746572267374796c653d666f722d7468652d6261646765" alt="drsimplegraffi1"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
üå± I‚Äôm currently learning &lt;strong&gt;Backend Node Js&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;üìù I regularly write articles on &lt;a href="https://dev.to/drsimplegraffiti" rel="nofollow"&gt;https://dev.to/drsimplegraffiti&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;üìù My Portfolio &lt;a href="http://abportfolio.vercel.app/" rel="nofollow"&gt;Click Here&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;üì´ How to reach me &lt;strong&gt;&lt;a href="https://github.com/drsimplegraffiti/drsimplegraffitimailto:abayomiogunnusi@gmail.com"&gt;abayomiogunnusi@gmail.com&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;üìÑ Know about my experiences &lt;a href="https://www.linkedin.com/in/abayomi-ogunnusi-974826141/" rel="nofollow"&gt;https://www.linkedin.com/in/abayomi-ogunnusi-974826141/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;‚ö° Fun fact &lt;strong&gt;I'm an alien&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
Connect with me:&lt;/h3&gt;
&lt;p&gt;
&lt;a href="https://codepen.io/drsimplegraffiti" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rzM7H5iw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/rahuldkjain/github-profile-readme-generator/master/src/images/icons/Social/codepen.svg" alt="drsimplegraffiti" height="30" width="40"&gt;&lt;/a&gt;
&lt;a href="https://twitter.com/drsimplegraffi1" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iWv4sl3q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/rahuldkjain/github-profile-readme-generator/master/src/images/icons/Social/twitter.svg" alt="drsimplegraffi1" height="30" width="40"&gt;&lt;/a&gt;
&lt;a href="https://stackoverflow.com/users/15661401" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M0U8MM-r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/rahuldkjain/github-profile-readme-generator/master/src/images/icons/Social/stack-overflow.svg" alt="15661401" height="30" width="40"&gt;&lt;/a&gt;
&lt;a href="https://instagram.com/drsimplegraffiti" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---za7rTXo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/rahuldkjain/github-profile-readme-generator/master/src/images/icons/Social/instagram.svg" alt="drsimplegraffiti" height="30" width="40"&gt;&lt;/a&gt;
&lt;a href="https://medium.com/@drsimplegraffiti" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RxX0CMZ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/rahuldkjain/github-profile-readme-generator/master/src/images/icons/Social/medium.svg" alt="@drsimplegraffiti" height="30" width="40"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;h3&gt;
Languages and Tools:&lt;/h3&gt;
&lt;p&gt; &lt;a href="https://getbootstrap.com" rel="nofollow"&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--38b8DYFn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/devicons/devicon/master/icons/bootstrap/bootstrap-plain-wordmark.svg" alt="bootstrap" width="40" height="40"&gt; &lt;/a&gt; &lt;a href="https://www.w3schools.com/css/" rel="nofollow"&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mHD1LdvX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/devicons/devicon/master/icons/css3/css3-original-wordmark.svg" alt="css3" width="40" height="40"&gt; &lt;/a&gt; &lt;a href="https://expressjs.com" rel="nofollow"&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Np3l8NWm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/devicons/devicon/master/icons/express/express-original-wordmark.svg" alt="express" width="40" height="40"&gt; &lt;/a&gt; &lt;a href="https://git-scm.com/" rel="nofollow"&gt; &lt;img src="https://camo.githubusercontent.com/fbfcb9e3dc648adc93bef37c718db16c52f617ad055a26de6dc3c21865c3321d/68747470733a2f2f7777772e766563746f726c6f676f2e7a6f6e652f6c6f676f732f6769742d73636d2f6769742d73636d2d69636f6e2e737667" alt="git" width="40" height="40"&gt; &lt;/a&gt; &lt;a href="https://heroku.com" rel="nofollow"&gt; &lt;img src="https://camo.githubusercontent.com/df12cb598044a3f38efc1f45e3580558c324cf8789b79487125044eeebcc4dee/68747470733a2f2f7777772e766563746f726c6f676f2e7a6f6e652f6c6f676f732f6865726f6b752f6865726f6b752d69636f6e2e737667" alt="heroku" width="40" height="40"&gt; &lt;/a&gt; &lt;a href="https://www.w3.org/html/" rel="nofollow"&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QXRvq6Ke--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/devicons/devicon/master/icons/html5/html5-original-wordmark.svg" alt="html5" width="40" height="40"&gt; &lt;/a&gt; &lt;a href="https://www.adobe.com/in/products/illustrator.html" rel="nofollow"&gt; &lt;img src="https://camo.githubusercontent.com/9e245893108b5ca27e7ac3d4a802d513f657b32aa7b5765bd92df7fb55d0ed54/68747470733a2f2f7777772e766563746f726c6f676f2e7a6f6e652f6c6f676f732f61646f62655f696c6c7573747261746f722f61646f62655f696c6c7573747261746f722d69636f6e2e737667" alt="illustrator" width="40" height="40"&gt; &lt;/a&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript" rel="nofollow"&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QG_b2spU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/devicons/devicon/master/icons/javascript/javascript-original.svg" alt="javascript" width="40" height="40"&gt; &lt;/a&gt; &lt;a href="https://www.mongodb.com/" rel="nofollow"&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V-ExagyZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/devicons/devicon/master/icons/mongodb/mongodb-original-wordmark.svg" alt="mongodb" width="40" height="40"&gt; &lt;/a&gt; &lt;a href="https://nodejs.org" rel="nofollow"&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zw8Pc0Q8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/devicons/devicon/master/icons/nodejs/nodejs-original-wordmark.svg" alt="nodejs" width="40" height="40"&gt; &lt;/a&gt; &lt;a href="https://www.photoshop.com/en" rel="nofollow"&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sf0HeNaf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/devicons/devicon/master/icons/photoshop/photoshop-line.svg" alt="photoshop" width="40" height="40"&gt; &lt;/a&gt; &lt;a href="https://postman.com" rel="nofollow"&gt; &lt;img src="https://camo.githubusercontent.com/93b32389bf746009ca2370de7fe06c3b5146f4c99d99df65994f9ced0ba41685/68747470733a2f2f7777772e766563746f726c6f676f2e7a6f6e652f6c6f676f732f676574706f73746d616e2f676574706f73746d616e2d69636f6e2e737667" alt="postman" width="40" height="40"&gt; &lt;/a&gt; &lt;a href="https://reactjs.org/" rel="nofollow"&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q7e3Gep6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/devicons/devicon/master/icons/react/react-original-wordmark.svg" alt="react" width="40" height="40"&gt; &lt;/a&gt; &lt;a href="https://sass-lang.com" rel="nofollow"&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gZefvAmh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/devicons/devicon/master/icons/sass/sass-original.svg" alt="sass" width="40" height="40"&gt; &lt;/a&gt; &lt;a href="https://www.adobe.com/products/xd.html" rel="nofollow"&gt; &lt;img src="https://camo.githubusercontent.com/c205ecbe12500177d102169d97bc1c17c545155fdf5ec78c08d54ac53e5b38c1/68747470733a2f2f63646e2e776f726c64766563746f726c6f676f2e636f6d2f6c6f676f732f61646f62652d78642e737667" alt="xd" width="40" height="40"&gt; &lt;/a&gt; &lt;a href="https://materializecss.com/" rel="nofollow"&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FZQdJCco--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/prplx/svg-logos/5585531d45d294869c4eaab4d7cf2e9c167710a9/svg/materialize.svg" alt="materialize" width="40" height="40"&gt; &lt;/a&gt;&lt;a href="https://mochajs.org" rel="nofollow"&gt; &lt;img src="https://camo.githubusercontent.com/4253eb6921d60a216772940978dea3a0cf2113f2f29b5545720d3b5b6960e467/68747470733a2f2f7777772e766563746f726c6f676f2e7a6f6e652f6c6f676f732f6d6f6368616a732f6d6f6368616a732d69636f6e2e737667" alt="mocha" width="40" height="40"&gt; &lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
Support:&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/drsimplegraffiti" rel="nofollow"&gt; &lt;img src="https://camo.githubusercontent.com/28aae05a0fba45679e8e27d90609601e249b64a5fe30dfef05495de4f4e318d4/68747470733a2f2f63646e2e6275796d6561636f666665652e636f6d2f627574746f6e732f76322f64656661756c742d79656c6c6f772e706e67" height="50" width="210" alt="drsimplegraffiti"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;&lt;br&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/600a51e3614bad11537732d6a182b66ea04748f5225d2db4123a154d315c469a/68747470733a2f2f6769746875622d726561646d652d73746174732e76657263656c2e6170702f6170692f746f702d6c616e67733f757365726e616d653d647273696d706c6567726166666974692673686f775f69636f6e733d74727565266c6f63616c653d656e266c61796f75743d636f6d70616374"&gt;&lt;img src="https://camo.githubusercontent.com/600a51e3614bad11537732d6a182b66ea04748f5225d2db4123a154d315c469a/68747470733a2f2f6769746875622d726561646d652d73746174732e76657263656c2e6170702f6170692f746f702d6c616e67733f757365726e616d653d647273696d706c6567726166666974692673686f775f69636f6e733d74727565266c6f63616c653d656e266c61796f75743d636f6d70616374" alt="drsimplegraffiti"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;¬†&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/4b87d0951cc2628ad9b0c95e00dd0c10dcb4d4c85bfd2e662ecef3f64069bab6/68747470733a2f2f6769746875622d726561646d652d73746174732e76657263656c2e6170702f6170693f757365726e616d653d647273696d706c6567726166666974692673686f775f69636f6e733d74727565266c6f63616c653d656e"&gt;&lt;img src="https://camo.githubusercontent.com/4b87d0951cc2628ad9b0c95e00dd0c10dcb4d4c85bfd2e662ecef3f64069bab6/68747470733a2f2f6769746875622d726561646d652d73746174732e76657263656c2e6170702f6170693f757365726e616d653d647273696d706c6567726166666974692673686f775f69636f6e733d74727565266c6f63616c653d656e" alt="drsimplegraffiti"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/452232592ebf9c9a7800f859a1ddbc83e6798e063daa551312e6689ef899e54d/68747470733a2f2f6769746875622d726561646d652d73747265616b2d73746174732e6865726f6b756170702e636f6d2f3f757365723d647273696d706c65677261666669746926"&gt;&lt;img src="https://camo.githubusercontent.com/452232592ebf9c9a7800f859a1ddbc83e6798e063daa551312e6689ef899e54d/68747470733a2f2f6769746875622d726561646d652d73747265616b2d73746174732e6865726f6b756170702e636f6d2f3f757365723d647273696d706c65677261666669746926" alt="drsimplegraffiti"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Dev.to Post&lt;/h2&gt;
&lt;p&gt;üîó &lt;a href="https://dev.to/drsimplegraffiti/improve-your-github-page-5hhc" rel="nofollow"&gt;Improve your Github Profile&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üîó &lt;a href="https://dev.to/drsimplegraffiti/generate-invoice-pdf-dmd" rel="nofollow"&gt;Download Browser Page as PDF&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üîó &lt;a href="https://dev.to/drsimplegraffiti/send-mails-using-nodejs-42ag" rel="nofollow"&gt;Send mails using NodeJS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üîó &lt;a href="https://dev.to/drsimplegraffiti/chat-app-using-socket-io-1hp0" rel="nofollow"&gt;Chat App using Socket.io&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/drsimplegraffiti/drsimplegraffiti"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://ngrok.com/docs"&gt;ngrok docs&lt;/a&gt;&lt;br&gt;
&lt;a href="https://youtu.be/XhRmn9Y8Agk"&gt;Reference Video&lt;/a&gt; by CyberRyker&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>webdev</category>
      <category>codepen</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Organize React Components Better with Barrel Exports</title>
      <author>Joe Ziemba</author>
      <pubDate>Tue, 28 Sep 2021 22:45:13 +0000</pubDate>
      <link>https://dev.to/justmyrealname/organize-react-components-better-with-barrel-exports-4fno</link>
      <guid>https://dev.to/justmyrealname/organize-react-components-better-with-barrel-exports-4fno</guid>
      <description>&lt;p&gt;We all know that React imports can get a little... verbose.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;compose&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;recompose/compose&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Dispatch&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;redux&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;connect&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-redux&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;querystring&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;query-string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;generateMetaInfo&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;shared/generate-meta-info&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Head&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../components/head&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;SegmentedControl&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../components/Layout/segmentedControl&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ChannelProfileCard&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../components/Layout/entities&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;CommunityAvatar&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../components/Layout/avatar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ErrorBoundary&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../components/error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;MembersList&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./components/MembersList&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;PostFeed&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./components/PostsFeed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;SidebarSection&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../components/Layout/SidebarSection&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;CommunitySidebar&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../components/communitySidebar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;FeedsContainer&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./style&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;InfoContainer&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../community/style&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;FullScreenRedirectView&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../views/viewHelpers/fullScreenRedirect&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="c1"&gt;// and this isn't even that long...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The node module imports are unavoidable, but we &lt;em&gt;can&lt;/em&gt; clean up our local imports&lt;br&gt;
with a pattern called &lt;strong&gt;barrel exporting&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-barrel-export"&gt;
  &lt;/a&gt;
  The Barrel Export
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;ChannelProfileCard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;CommunityAvatar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;CommunitySidebar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;ErrorBoundary&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;FeedsContainer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;FullScreenRedirectView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;InfoContainer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;MembersList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;PostFeed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;SegmentedControl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;SidebarSection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;A lot easier on the eyes, eh?&lt;/p&gt;

&lt;p&gt;Barrel is about more than the aesthetic though. We get better Intellisense and auto-importing for components in editors like VSCode thanks to the named exports, along with more flexibility in organizing our filesystem. We can nest folders as deep as it makes sense without worrying about ballooning import statements.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-to-set-up-barrel-exports"&gt;
  &lt;/a&gt;
  How to set up Barrel Exports
&lt;/h2&gt;

&lt;p&gt;A traditional &lt;code&gt;export&lt;/code&gt;/&lt;code&gt;import&lt;/code&gt; setup for React looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/components/SidebarSection/index.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SidebarSection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/* implementation */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;SidebarSection&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/views/Homepage/index.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../components/error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Row&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../components/Layout/blocks/Row&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;SidebarSection&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../components/Layout/SidebarSection&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To enable the Barrel pattern, all we need to do 2 things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Change from a default to named exports.&lt;/li&gt;
&lt;li&gt;Add an &lt;code&gt;index.js&lt;/code&gt; in whatever directory you want to be "the Barrel." From this file, we'll re-export all our components in that branch of the filesystem.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/components/Layout/SidebarSection/index.js&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SidebarSection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/* implementation */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/components/index.js&lt;/span&gt;

&lt;span class="c1"&gt;// This is the Barrel!&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Row&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Layout/blocks/Row&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;SidebarSection&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Layout/SidebarSection&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/views/Homepage/index.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Row&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;SidebarSection&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's it!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's Next
&lt;/h3&gt;

&lt;p&gt;In future posts we'll look at even more improvements we can make to our React code with patterns like dot notation and removing the need to relative imports. Follow me on Twitter &lt;a href="https://twitter.come/justmyrealname"&gt;@justmyrealname&lt;/a&gt; to hear when new articles drop!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>codequality</category>
      <category>webdev</category>
    </item>
    <item>
      <title>My Baseline Mac Setup</title>
      <author>Daniel Starner</author>
      <pubDate>Tue, 28 Sep 2021 22:42:52 +0000</pubDate>
      <link>https://dev.to/dstarner/my-baseline-mac-setup-21fb</link>
      <guid>https://dev.to/dstarner/my-baseline-mac-setup-21fb</guid>
      <description>&lt;p&gt;&lt;a href="https://dev.to"&gt;dev.to&lt;/a&gt; is full of &lt;a href="https://dev.to/search?q=my%20mac%20setup"&gt;"&lt;em&gt;Check Out My Setup&lt;/em&gt;"&lt;/a&gt; and &lt;a href="https://dev.to/search?q=%20my%20terminal%20setup"&gt;"&lt;em&gt;Configure Your Terminal&lt;/em&gt;"&lt;/a&gt; posts, for better or worse...&lt;/p&gt;

&lt;p&gt;Well, it's time to be corny and add my own article to that list! Please don't judge this too harshly. Most of this is a public &amp;amp; refactored version of a GitHub gist that I walk through whenever I get a new Macbook, whether it be for work or for personal use. I will try to dive into the tooling and functionality a bit more so that you understand why I choose it as my baseline.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#first-things-first-iterm"&gt;
  &lt;/a&gt;
  First Things First; iTerm
&lt;/h2&gt;

&lt;p&gt;Gosh, I don't know if I could live without &lt;a href="https://iterm2.com/"&gt;iTerm2&lt;/a&gt;, because it's window and session management is leagues above the normal OSX Terminal. This is always the first thing that I install on any Macbook that I know I'll be using, because I just like the feel, customization, and mobility that iTerm provides over native Terminal. Check out their &lt;a href="https://iterm2.com/features.html"&gt;Features page&lt;/a&gt; to see what the fuss is about, but the nice multi-pane/multi-tab controls are enough to justify it's usage to me.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;JUsT lEArn &lt;code&gt;tmux&lt;/code&gt; InsTEad&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Yes, I understand tmux provides multi-session control and that's 90% of what I use iTerm2 for...but I'm a bad developer who never took the time to learn tmux, and its worked just fine for me so far.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>beginners</category>
    </item>
    <item>
      <title>¬øC√≥mo consigo llamar la atenci√≥n de mis clientes web?</title>
      <author>Horacio Herrera</author>
      <pubDate>Tue, 28 Sep 2021 22:14:03 +0000</pubDate>
      <link>https://dev.to/horacioh/como-consigo-llamar-la-atencion-de-mis-clientes-web-2fd5</link>
      <guid>https://dev.to/horacioh/como-consigo-llamar-la-atencion-de-mis-clientes-web-2fd5</guid>
      <description>&lt;p&gt;(Imagen principal por &lt;a href="https://unsplash.com/@samsonyyc?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Samson&lt;/a&gt; via &lt;a href="https://unsplash.com/s/photos/deal?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Tanto si lo que quieres es preparar una propuesta para un cliente actual, como para llamar la atenci√≥n de posibles futuros clientes, estos peque√±os pasos te pueden ayudar a consolidar y darle el mayor beneficio a tus clientes:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#busca-que-tipo-de-clientes-te-interesa-tener"&gt;
  &lt;/a&gt;
  Busca que tipo de clientes te interesa tener
&lt;/h2&gt;

&lt;p&gt;En esta fase de b√∫squeda de clientes, tienes el privilegio de poder escoger que tipo de empresa o clientes quieres mostrar en tu portfolio. La manera en la que busco estos potenciales clientes es:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Productos o servicios que uso actualmente&lt;/li&gt;
&lt;li&gt;Empresas amigas o medianas&lt;/li&gt;
&lt;li&gt;Marcas reconocidas en mi ciudad.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Te recomiendo que la empresa sea suficientemente grande para asumir un proyecto web nuevo pero lo suficientemente peque√±a como para aceptar una propuesta tuya o de una empresa peque√±a. Algo que te puede dar pistas es buscando los tipo d e proveedores que tienen actualmente, tanto a nivel tecnol√≥gico como en cualquier otro sector.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#an%C3%A1lisis-tecnol%C3%B3gico-de-su-web-actual"&gt;
  &lt;/a&gt;
  An√°lisis tecnol√≥gico de su web actual
&lt;/h2&gt;

&lt;p&gt;Aqu√≠ es donde viene la parte ‚Äúdivertida‚Äù. La suerte que tenemos es la variedad de herramientas que tenemos disponibles para hacer un an√°lisis lo bastante convincente como para tener una idea clara de la experiencia de lo que los clientes de tu futuro cliente. Las herramientas que te recomiendo son:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lighthouse&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.speedcurve.com/"&gt;Speedcurve&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wpostats.com/"&gt;WPO Stats&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Una diferencia entre ambas, es que Lighthouse se va a ejecutar localmente, en cambio Speedcurve puedes no solamente cambiar el pa√≠s o region en la que se va a ejecutar el test, sino que puedes programar la ejecuci√≥n peri√≥dicamente. As√≠ puedes sacar una media de todos los resultados y obtener informaci√≥n m√°s fiable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#b%C3%BAsqueda-de-problemas"&gt;
  &lt;/a&gt;
  B√∫squeda de problemas
&lt;/h2&gt;

&lt;p&gt;Las razones principales por las que nos tomamos el tiempo de rellenar una rese√±a sobre un producto o servicio regularmente son por experiencias en los extremos, o muy buenas o muy malas. Tu objetivo es encontrar las muy malas que est√©n relacionadas con la web de tu posible cliente. Te pueden dar pistas de qu√© cosas deben mejorar para que sus clientes est√©n m√°s felices!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#comparaci%C3%B3n-con-otro-o-otros-competidores"&gt;
  &lt;/a&gt;
  Comparaci√≥n con otro (o otros) competidores
&lt;/h2&gt;

&lt;p&gt;Seguramente tengas buenos datos sobre el an√°lisis t√©cnico, pero seguro pueden tener mucho m√°s impacto si los comparas con alguno de sus competidores. Quiz√°s lo mejor seria compararlos con alg√∫n competidor o empresa del sector que sea de talla mundial, para que la comparaci√≥n no sea tan violenta :)‚Ä®‚Ä®Otra ventaja de que la comparaci√≥n sea con alg√∫n competidor grande, es que ellos seguramente est√©n usando alguna de estas tecnolog√≠as y puedan ver el resultado de su uso. Aqu√≠ es donde WPOStats es √∫til!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#an%C3%A1lisis-de-producto-opcional"&gt;
  &lt;/a&gt;
  An√°lisis de producto (opcional)
&lt;/h2&gt;

&lt;p&gt;No estar√≠a de mas hacer un poquito mas de b√∫squeda y entender bien como la web puede ayudarles a hacer felices a sus clientes y conseguir m√°s. ‚Ä®‚Ä®Generalmente una p√°gina web debe responder claramente a estas tres preguntas:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;¬øQui√©nes son?&lt;/li&gt;
&lt;li&gt;¬øQu√© hacen?&lt;/li&gt;
&lt;li&gt;¬øC√≥mo los puedo contactar?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Si la respuesta a estas preguntas no es clara y directa, quiz√°s est√©n perdiendo clientes por el camino.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#primer-email-de-contacto"&gt;
  &lt;/a&gt;
  Primer email de contacto
&lt;/h2&gt;

&lt;p&gt;Una vez tengas toda esta informaci√≥n, estas listo para buscar como contactar a la persona adecuando dentro de la empresa e informarle. Este es tu primer contacto con ellos, as√≠ que no puede ser tan hostil como mandarle todo tu an√°lisis en PDF adjunto con todas las recomendaciones!, tenemos que hacerlo por partes.&lt;/p&gt;

&lt;p&gt;Te recomiendo que de todos los puntos de mejora que hayas encontrado, encuentres el que requiera en menor esfuerzo de parte de ellos, pero que tenga el mayor beneficio o retorno de inversi√≥n. Llam√©mosle ‚ÄúQuick Win‚Äù. Algunos ejemplos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Optimizar el tama√±o de las im√°genes que usan en la web&lt;/li&gt;
&lt;li&gt;Forzar HTTPS en la navegaci√≥n de su web&lt;/li&gt;
&lt;li&gt;Resaltar el ‚Äúcall to action‚Äù principal&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;en cuanto a la redacci√≥n del email, puedes seguir esta gu√≠a:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Tu presentaci√≥n: muy corta&lt;/li&gt;
&lt;li&gt;Algo que te gusta de la empresa (es f√°cil encontrarlo si es un producto o servicio que usas)&lt;/li&gt;
&lt;li&gt;Comentas el an√°lisis: Mencionas que has hecho un an√°lisis de su presencia online y que has encontrado unos puntos de mejora clave para que sus clientes tengan una mejor experiencia (el enfoque desde el punto de vista de SUS CLIENTES es importante)&lt;/li&gt;
&lt;li&gt;Presentas el ‚ÄúQuick Win‚Äù&lt;/li&gt;
&lt;li&gt;Despedida: ‚ÄúEspero que esto les sea de gran ayuda y si necesitan alguna ayuda mas, no duden en contactarme‚Äù.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Ya est√° üéâ. No tiene que ser demasiado largo, Es importante respetar el tiempo de los dem√°s tambi√©n. Recuerda redactar el email de la manera mas positiva posible, y no recalcando las cosas ‚Äúque est√°n haciendo mal‚Äù. Una forma que uso para plantear algo malo de manera positiva es reformularlo en pregunta.&lt;/p&gt;

&lt;p&gt;Yo ya no me dedico a freelance, por eso me pareci√≥ interesante compartir mi estrategia cuando buscaba clientes web! :)‚Ä®‚Ä®Si tienes alguna pregunta o algo no qued√≥ muy claro, no dudes en contactarme por DMs o email!&lt;/p&gt;

&lt;p&gt;P.D.: Si entiendes ingl√©s, aqu√≠ tienes &lt;a href="https://youtu.be/Kun6S53T0Uw"&gt;una charla&lt;/a&gt; que hice hace unos a√±os para Gatsby Days donde coment√≥ un poco m√°s en detalle estas t√©cnicas!&lt;/p&gt;

</description>
      <category>gatsby</category>
      <category>nextjs</category>
      <category>freelance</category>
      <category>clientes</category>
    </item>
    <item>
      <title>Nuxt 3 is Coming! Here's What You Need to Know</title>
      <author>OpenReplay Tech Blog</author>
      <pubDate>Tue, 28 Sep 2021 21:43:40 +0000</pubDate>
      <link>https://dev.to/asayerio_techblog/nuxt-3-is-coming-here-s-what-you-need-to-know-21bm</link>
      <guid>https://dev.to/asayerio_techblog/nuxt-3-is-coming-here-s-what-you-need-to-know-21bm</guid>
      <description>&lt;p&gt;&lt;em&gt;by author &lt;a href="https://blog.openreplay.com/authors/arek-nawo"&gt;Arek Nawo&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;After &lt;strong&gt;Vue 3&lt;/strong&gt;‚Äôs &lt;a href="https://github.com/vuejs/vue-next/releases/tag/v3.0.0"&gt;stable release late last year&lt;/a&gt; and migration of all first-party tools and libraries, we now see more and more open-source libraries and tools moving from Vue 2 to Vue 3.&lt;/p&gt;

&lt;p&gt;That‚Äôs why it‚Äôs just about time for the most popular Vue framework to make the jump too. Naturally, I‚Äôm talking about &lt;strong&gt;Nuxt.js&lt;/strong&gt;, which will officially enter public beta in a few days from the release of this post.&lt;/p&gt;

&lt;p&gt;So let‚Äôs talk about what you can expect from &lt;strong&gt;Nuxt 3&lt;/strong&gt;, what improvements it will bring, and whether or not you should transition to it!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#nuxt-3-current-status"&gt;
  &lt;/a&gt;
  Nuxt 3 current status
&lt;/h1&gt;

&lt;p&gt;Before we dive into the features, let‚Äôs take a quick look at the Nuxt 3 current status.&lt;/p&gt;

&lt;p&gt;After many delays, it seems like we‚Äôll finally get to see Nuxt 3 in all its glory on &lt;strong&gt;October 12, 2021&lt;/strong&gt;. How certain is this date, considering the previous &lt;a href="https://github.com/nuxt/nuxt.js/discussions/9398"&gt;delays&lt;/a&gt;? Well, with an official announcement at &lt;a href="https://nuxtnation.com/"&gt;Nuxt Nation&lt;/a&gt; and a &lt;a href="https://nuxtjs.org/v3"&gt;dedicated landing page&lt;/a&gt; with a countdown - it‚Äôs undoubtedly more credible than ever.&lt;/p&gt;

&lt;p&gt;Apart from the date, there are other details further confirming the upcoming release date. Nuxt 3 is now in private beta, with access given to the Vue core development team and close partners.&lt;/p&gt;

&lt;p&gt;Also worth mentioning is Nuxt new branding identity and &lt;a href="https://nuxtjs.org/"&gt;website redesign&lt;/a&gt;. While it‚Äôs up right now and includes Nuxt 2 documentation, it‚Äôs surely a sign of the upcoming v3. Also, the website itself is built with &lt;a href="https://docus.com/"&gt;Docus&lt;/a&gt; - &lt;em&gt;‚ÄúDocument-Driven Web Apps Platform‚Äù&lt;/em&gt; - which will be based on and open-sourced alongside Nuxt 3.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#new-features"&gt;
  &lt;/a&gt;
  New features
&lt;/h1&gt;

&lt;p&gt;With the Nuxt 3 release date out of the way - let‚Äôs talk about the good stuff! Of course, I mean all the new features and improvements that are coming in Nuxt 3.&lt;/p&gt;

&lt;p&gt;Now, with a single landing page, a few discussions, and talks - there‚Äôs not much detail available on Nuxt 3. Still, we‚Äôll try to piece together some helpful info so that you‚Äôll have a general picture of what to expect.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#general-optimizations"&gt;
  &lt;/a&gt;
  General optimizations
&lt;/h2&gt;

&lt;p&gt;Nuxt 3 brings many general optimizations and improvements. The result is a smaller bundle size (&lt;strong&gt;20% lighter&lt;/strong&gt; core when compared to Nuxt 2) and improved performance.&lt;/p&gt;

&lt;p&gt;Developers can expect better performance in development thanks to the new &lt;strong&gt;Nitro server engine&lt;/strong&gt; with optimized cold starts and dynamic code-splitting.&lt;/p&gt;

&lt;p&gt;On top of that, other parts of tooling have also been upgraded - there‚Äôs now &lt;strong&gt;Webpack 5&lt;/strong&gt;, &lt;strong&gt;PostCSS 8&lt;/strong&gt;, &lt;strong&gt;ESBuild&lt;/strong&gt;, and &lt;strong&gt;Vite&lt;/strong&gt; support - making both development and production builds extremely fast.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vue-3"&gt;
  &lt;/a&gt;
  Vue 3
&lt;/h2&gt;

&lt;p&gt;To no one‚Äôs surprise, Nuxt 3 will be based on &lt;strong&gt;Vue 3&lt;/strong&gt; and provide an experience tailored to the latest version of the Vue framework. This means:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;New, modular utilities for the &lt;strong&gt;Composition API&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;Improved routing with &lt;strong&gt;Vue Router 4&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;Revised data fetching and &lt;strong&gt;Suspense&lt;/strong&gt; integration.
## TypeScript&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On top of Vue 3 migration, Nuxt 3 adopts &lt;strong&gt;ES Modules&lt;/strong&gt; (ESM) and &lt;strong&gt;TypeScript&lt;/strong&gt; as first-class citizens for improved development experience. This move aligns with what Vue 3 has done and where the whole Vue ecosystem is now going.&lt;/p&gt;

&lt;p&gt;Tight TypeScript integration will provide type-checking for the whole Nuxt 3 codebase, as well as better autocompletion and error detection.&lt;/p&gt;

&lt;p&gt;If you don‚Äôt like TypeScript, you‚Äôll still be able to use Nuxt without any issues.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#better-development-experience"&gt;
  &lt;/a&gt;
  Better development experience
&lt;/h2&gt;

&lt;p&gt;Beyond TypeScript, Vue 3, and performance improvements, Nuxt 3 comes with even more improvements to the development experience, which includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;New &lt;strong&gt;Nuxt CLI&lt;/strong&gt; for easy project scaffolding and module integration;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Nuxt Devtools&lt;/strong&gt; for faster and more comfortable debugging right in the browser;&lt;/li&gt;
&lt;li&gt;Modern utility modules toolkit called &lt;strong&gt;Nuxt Kit&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;Auto-import for global utilities and composable functions.
## Hybrid rendering&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Last but not least, Nuxt 3 introduces hybrid rendering or so-called &lt;em&gt;‚Äúincremental static generation‚Äù&lt;/em&gt;. This feature, in broad terms, will allow you to decide whether and how long you want to have your pages rendered statically or dynamically. More details on this feature will come alongside the beta release.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#nitro-engine"&gt;
  &lt;/a&gt;
  Nitro engine
&lt;/h1&gt;

&lt;p&gt;Now, one of the headline features of Nuxt 3 is its new server engine - &lt;strong&gt;Nitro&lt;/strong&gt;. This engine is what drives many performance improvements and new features of Nuxt 3.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#api-routes"&gt;
  &lt;/a&gt;
  API routes
&lt;/h2&gt;

&lt;p&gt;Thanks to Nitro, you‚Äôll now be able to create and run &lt;strong&gt;server API code&lt;/strong&gt; easily, just like it‚Äôs currently possible in many other full-stack frameworks. The new &lt;code&gt;server/api/&lt;/code&gt; directory will be the place for your server API, while functions will find their home in &lt;code&gt;server/functions/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The new API routes, coupled with a new isomorphic fetching mechanism and improved serverless support, mark a step in the right direction.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#optimized-output"&gt;
  &lt;/a&gt;
  Optimized output
&lt;/h2&gt;

&lt;p&gt;Another advantage of Nitro is its highly optimized, universal output to the new &lt;code&gt;.output&lt;/code&gt; directory. The core server bundle will now be &lt;strong&gt;less than 1 MB&lt;/strong&gt; and will see a notable performance increase. For example, cold starts will be faster by &lt;strong&gt;75-100&lt;/strong&gt; times! This will prove very beneficial for environments like &lt;a href="https://workers.cloudflare.com/"&gt;Cloudflare Workers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;These improvements will be achieved by better dependency tracking using &lt;strong&gt;Node File Trace&lt;/strong&gt; from Vercel (&lt;a href="https://github.com/vercel/nft"&gt;@vercel/nft&lt;/a&gt;). This will ensure that only the necessary dependencies are included in the final bundle.&lt;/p&gt;

&lt;p&gt;Further bundle size reductions will be accomplished with a revised &lt;strong&gt;code-splitting&lt;/strong&gt; mechanism.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#crossplatform-support"&gt;
  &lt;/a&gt;
  Cross-platform support
&lt;/h2&gt;

&lt;p&gt;With the rapid evolution of JavaScript over the last few years, multiple JS-powered platforms have emerged - and Nuxt 3 is ready for all of them.&lt;/p&gt;

&lt;p&gt;Thanks to the previously-mentioned, improved dependency tracking and new lightweight polyfills coupled with platform auto-detection, Nuxt 3 will run seamlessly in pretty much all JS environments. This includes &lt;strong&gt;Node.js&lt;/strong&gt;, &lt;strong&gt;Deno&lt;/strong&gt;, &lt;strong&gt;Cloudflare Workers&lt;/strong&gt;, and even browser &lt;strong&gt;Service Workers&lt;/strong&gt; (though that‚Äôs experimental right now).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#nuxt-bridge"&gt;
  &lt;/a&gt;
  Nuxt Bridge
&lt;/h1&gt;

&lt;p&gt;While Nuxt 3 looks like a great upgrade, there‚Äôs a big problem we haven‚Äôt discussed - &lt;strong&gt;compatibility&lt;/strong&gt;. Vue 3 itself, with its breaking changes, already made many libraries and tools from Vue 2‚Äôs ecosystem &lt;em&gt;‚Äúobsolete‚Äù&lt;/em&gt; and at a need for an upgrade. So, how hard will it be to upgrade to Nuxt 3? Thanks to &lt;strong&gt;Nuxt Bridge&lt;/strong&gt; - not that hard!&lt;/p&gt;

&lt;p&gt;Nuxt Bridge is a project meant to bring Nuxt 3 features to Nuxt 2. This is intended to make future migration smoother while also providing many Nuxt 3 improvements to Nuxt 2 users that don‚Äôt plan to upgrade immediately.&lt;/p&gt;

&lt;p&gt;The planned set of back-ported features includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nitro engine;&lt;/li&gt;
&lt;li&gt;ESM and built-in TypeScript support;&lt;/li&gt;
&lt;li&gt;Composition API with Nuxt 3 composables and auto-imports;&lt;/li&gt;
&lt;li&gt;Nuxt CLI and Devtools;&lt;/li&gt;
&lt;li&gt;Vite integration.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nuxt Bridge also simplifies upgrades for the whole Nuxt ecosystem. Legacy plugins and modules will keep working, the config file from Nuxt 2 will be compatible with Nuxt 3, and several Nuxt 3 APIs will remain unchanged to allow for a progressive upgrade.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#open-source-session-replay"&gt;
  &lt;/a&gt;
  Open Source Session Replay
&lt;/h1&gt;

&lt;p&gt;Debugging a web application in production may be challenging and time-consuming. &lt;a href="https://github.com/openreplay/openreplay"&gt;OpenReplay&lt;/a&gt; is an Open-source alternative to FullStory, LogRocket and Hotjar. It allows you to monitor and replay everything your users do and shows how your app behaves for every issue.&lt;br&gt;
It‚Äôs like having your browser‚Äôs inspector open while looking over your user‚Äôs shoulder.&lt;br&gt;
OpenReplay is the only open-source alternative currently available.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MvoFt7Qf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/openreplay/openreplay/main/static/replayer.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MvoFt7Qf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/openreplay/openreplay/main/static/replayer.png" alt="OpenReplay"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy debugging, for modern frontend teams - &lt;a href="https://github.com/openreplay/openreplay"&gt;Start monitoring your web app for free&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#bottom-line"&gt;
  &lt;/a&gt;
  Bottom line
&lt;/h1&gt;

&lt;p&gt;Overall, I personally can‚Äôt wait for Nuxt 3. Like many other Vue developers, I‚Äôve been on the lookout for it for the past few months, and I‚Äôm thrilled it‚Äôs finally coming out to the public.&lt;/p&gt;

&lt;p&gt;While performance improvements are impressive, as a TypeScript user, I‚Äôm most interested in the TS rewrite, as well as Vue 3 and Vite integration. These recently became my go-to technologies for personal projects, and it‚Äôd be great to see them integrated into a single framework.&lt;/p&gt;

&lt;p&gt;Nuxt 3 will be a stepping stone in migrating the Vue ecosystem to Vue 3, encouraging other developers to upgrade or create new tools to enrich the new ecosystem. The community will undoubtedly benefit from the transition to TypeScript, adoption of Composition API, and performance improvements to both user-facing apps and the development environment itself, thanks to Vite.&lt;/p&gt;

&lt;p&gt;So, there you have it! Those are many but certainly not all of the features you should expect to see in the Nuxt 3. Depending on when you read it, I hope you‚Äôre as eager to experience Nuxt 3 as I am, or maybe you‚Äôre already playing with it. Either way - have fun!&lt;/p&gt;

</description>
      <category>vue</category>
      <category>news</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Serverless file storage with AWS Lambda</title>
      <author>Sergei Sumarokov</author>
      <pubDate>Tue, 28 Sep 2021 21:30:57 +0000</pubDate>
      <link>https://dev.to/kompotkot/serverless-file-storage-with-aws-lambda-1ghi</link>
      <guid>https://dev.to/kompotkot/serverless-file-storage-with-aws-lambda-1ghi</guid>
      <description>&lt;p&gt;Hello! Today we will deploy a serverless infrastructure based on AWS Lambda for uploading images (or any other files) with private storage in an AWS S3 bucket. We will be using terraform scripts that are uploaded and available at my &lt;a href="https://github.com/kompotkot/hatchery/tree/main/files_distributor"&gt;kompotkot/hatchery&lt;/a&gt; GitHub repository.&lt;/p&gt;

&lt;p&gt;This approach has the following advantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;lambda is called on request and therefore allows to save on server maintenance costs if this functionality is not key for your application&lt;/li&gt;
&lt;li&gt;lambda functions have an isolated runtime environment, which is ideal for processing uploaded files. Should malicious code be uploaded, the attacker will not be able to leave the sandbox, and the sandbox session will be forcibly terminated after some time&lt;/li&gt;
&lt;li&gt;storing files in an S3 bucket is very cheap&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#project-structure"&gt;
  &lt;/a&gt;
  Project structure
&lt;/h2&gt;

&lt;p&gt;As an example, we'll be using an abstract app for journal entries with an API.&lt;br&gt;
We can upload an image in each entry, and the structure is similar to a file directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- journal_1
  - entry_1
    - image_1
  - entry_2
    - image_1
    - image_n
  - entry_n
- journal_n
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our hypothetical API has an endpoint for receiving an entry in a journal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl \
  --request GET \
  --url 'https://api.example.com/journals/{journal_id}/entries/{entries_id}'
  --header 'Authorization: {token_id}'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If in response to this endpoint &lt;code&gt;status_code&lt;/code&gt; is equal to 200, it means the user is authorized and has access to the journal. Accordingly, we will let them store images for this entry.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#registering-the-app-on-bugoutdev"&gt;
  &lt;/a&gt;
  Registering the app on Bugout.dev
&lt;/h2&gt;

&lt;p&gt;To avoid adding an extra table to the database, which we would need for storing which image belongs to which entry, we will use &lt;code&gt;resources&lt;/code&gt; from &lt;a href="https://bugout.dev/"&gt;Bugout.dev&lt;/a&gt;. This approach is used to simplify our infrastructure, but, if required, this step can be substituted for creating a new table in your database and writing an API for creating, modifying, and deleting data about the stored images. Bugout.dev is open source and you can review the API documentation at the GitHub &lt;a href="https://github.com/bugout-dev"&gt;repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We will need an account and a team called &lt;code&gt;myapp&lt;/code&gt; (you can use any name in relation to your project) at the &lt;a href="https://bugout.dev/account/teams"&gt;Bugout.dev Teams&lt;/a&gt; page, you should save this team‚Äôs ID for the next step (in our case it‚Äôs &lt;code&gt;e6006d97-0551-4ec9-aabd-da51ee437909&lt;/code&gt;):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PBQN_pLB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2A5Lk9gSuzQguv5XdXjvYOnw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PBQN_pLB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2A5Lk9gSuzQguv5XdXjvYOnw.png" alt="2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, let‚Äôs create a Bugout.dev Application for our team myapp through a curl request (the token can be generated at the &lt;a href="https://bugout.dev/account/tokens"&gt;Bugout.dev Tokens&lt;/a&gt; page) and save it in the &lt;code&gt;BUGOUT_ACCESS_TOKEN&lt;/code&gt; variable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl \
  --request POST \
  --url 'https://auth.bugout.dev/applications' \
  --header "Authorization: Bearer $BUGOUT_ACCESS_TOKEN" \
  --form 'group_id=e6006d97-0551-4ec9-aabd-da51ee437909' \
  --form 'name=myapp-images' \
  --form 'description=Image uploader for myapp notes' \
  | jq .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In response we will get confirmation of a successfully created application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"f0a1672d-4659-49f6-bc51-8a0aad17e979"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"group_id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"e6006d97-0551-4ec9-aabd-da51ee437909"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"myapp-images"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Image uploader for myapp notes"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The ID &lt;code&gt;f0a1672d-4659-49f6-bc51-8a0aad17e979&lt;/code&gt; will be used for storing &lt;code&gt;resources&lt;/code&gt;, where every resource is the uploaded image‚Äôs metadata. The structure is set in any form depending on the required keys, in our case, it will look as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"a6423cd1-317b-4f71-a756-dc92eead185c"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"application_id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"f0a1672d-4659-49f6-bc51-8a0aad17e979"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"resource_data"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"d573fab2-beb1-4915-91ce-c356236768a4"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"random-image-name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"entry_id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"51113e7d-39eb-4f68-bf99-54de5892314b"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"extension"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"created_at"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2021-09-19 15:15:00.437163"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"journal_id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2821951d-70a4-419b-a968-14e056b49b71"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"created_at"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2021-09-19T15:15:00.957809+00:00"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"updated_at"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2021-09-19T15:15:00.957809+00:00"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As a result, we have a remote database, where every time we upload an image to an S3 bucket, we‚Äôll be writing which journal(&lt;code&gt;journal_id&lt;/code&gt;) and which entry(&lt;code&gt;entry_id&lt;/code&gt;) the image was added to under which ID, name, and extension.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#preparing-the-aws-project-environment"&gt;
  &lt;/a&gt;
  Preparing the AWS project environment
&lt;/h2&gt;

&lt;p&gt;AWS will store images in an S3 bucket and function as a server on Lambda for image manipulation. We will need an AWS account and a configured IAM user for terraform. It is an account with &lt;code&gt;Programmatic access&lt;/code&gt; to all resources without having access to the web console:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T-Zu-bhN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AzvEBy6syc1LRM2_jOMk2bw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T-Zu-bhN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AzvEBy6syc1LRM2_jOMk2bw.png" alt="3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Get the access keys and add these variables to your environment:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export AWS_ACCESS_KEY_ID=&amp;lt;your_aws_terraform_account_access_key&amp;gt;
export AWS_SECRET_ACCESS_KEY=&amp;lt;your_aws_terraform_account_secret_key&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let‚Äôs also deploy a VPC with the subnets:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;2 subnets with private access&lt;/li&gt;
&lt;li&gt;2 subnets with public access&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They will be useful for configuring the AWS Load Balancer. The code for this module can be found under &lt;a href="https://github.com/kompotkot/hatchery/tree/main/files_distributor/network"&gt;files_distributor/network&lt;/a&gt;. Let‚Äôs edit the variables in the &lt;code&gt;variables.tf&lt;/code&gt; file and launch the script:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;terraform apply
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From the output, add environment variables with values &lt;code&gt;AWS_HATCHERY_VPC_ID&lt;/code&gt;, &lt;code&gt;AWS_HATCHERY_SUBNET_PUBLIC_A_ID&lt;/code&gt; and &lt;code&gt;AWS_HATCHERY_SUBNET_PUBLIC_B_ID&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#server-code"&gt;
  &lt;/a&gt;
  Server code
&lt;/h2&gt;

&lt;p&gt;In our project, we‚Äôll be using a simple AWS Lambda function. In my experience, I‚Äôve noticed that as the packet with code surpasses 10MB, the upload speed to AWS drops dramatically. Even if we upload it to the S3 bucket in advance and then make a lambda from it, AWS can freeze for a long time. Therefore, if you are using third-party libraries it can make sense to use lambda layers, whereas if you aren‚Äôt planning to use any libraries with lightweight code on CloudFront, consider looking into lambda@edge.&lt;/p&gt;

&lt;p&gt;The full code can be found in the &lt;a href="https://github.com/kompotkot/hatchery/blob/main/files_distributor/bucket/modules/s3_bucket/files/lambda_function.py"&gt;lambda_function.py&lt;/a&gt; file in the repository. In my opinion, it‚Äôs more effective to work with nodejs, but to facilitate in-depth file processing we‚Äôll use python. The code consists of main blocks:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;MY_APP_JOURNALS_URL = "https://api.example.com"     # API endpoint for accessing out journal entries app
BUGOUT_AUTH_URL = "https://auth.bugout.dev"         # Bugout.dev endpoint for writing resources (image metadata)
FILES_S3_BUCKET_NAME = "hatchery-files"      # S3 bucket name, where we‚Äôll store the images
FILES_S3_BUCKET_PREFIX = "dev"               # S3 bucket prefix, where we‚Äôll store the images
BUGOUT_APPLICATION_ID = os.environ.get("BUGOUT_FILES_APPLICATION_ID")   # Bugout.dev application ID that we created prior
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let‚Äôs expand the default exception to proxy the response from Bugout.dev Resources. E.g., if the image does not exist, when we request the resource, we‚Äôll receive error 404, which we‚Äôll in turn return to the client as a reply to the request for the missing image.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BugoutResponseException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;detail&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;status_code&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;detail&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;detail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;detail&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To save an image in an S3 bucket we‚Äôll use the &lt;code&gt;cgi&lt;/code&gt; standard library that‚Äôll let us parse the request‚Äôs body that was sent in &lt;code&gt;multipart/&amp;lt;image_type&amp;gt;&lt;/code&gt; format. We‚Äôll save images under the path &lt;code&gt;{journal_id}/entries/{entry_id}/images/{image_id}&lt;/code&gt; without specifying the file‚Äôs name and extension.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;put_image_to_bucket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;journal_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;entry_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;image_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UUID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;content_type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;content_length&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;decoded_body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse_header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content_type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;c_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"boundary"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"boundary"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;c_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"CONTENT-LENGTH"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;content_length&lt;/span&gt;

    &lt;span class="n"&gt;form_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse_multipart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BytesIO&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;decoded_body&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;c_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;image_str&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;form_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"file"&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="n"&gt;image_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;FILES_S3_BUCKET_PREFIX&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;journal_id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/entries/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;entry_id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/images/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
        &lt;span class="n"&gt;s3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;put_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;image_str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Bucket&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;FILES_S3_BUCKET_NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;image_path&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we extract an image from the S3 bucket we‚Äôll need to encode it into base64 for correct transmission.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_image_from_bucket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;journal_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;entry_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;image_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;image_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;FILES_S3_BUCKET_PREFIX&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;journal_id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/entries/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;entry_id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/images/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;image_id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Bucket&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;FILES_S3_BUCKET_NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;image_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"Body"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;encoded_image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b64encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;encoded_image&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;lambda_handler(event,context)&lt;/code&gt; function‚Äôs implementation is available at this GitHub &lt;a href="https://github.com/kompotkot/hatchery/blob/main/files_distributor/bucket/modules/s3_bucket/files/lambda_function.py"&gt;link&lt;/a&gt;, to sum up:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Firstly, we assert that the request is formatted correctly and contains &lt;code&gt;journal_id&lt;/code&gt; and &lt;code&gt;entry_id&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Then we call our hypothetical app‚Äôs API &lt;code&gt;https://api.example.com/journals/{journal_id}/entries/{entry_id}&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;Depending on the request method: &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt; or &lt;code&gt;DELETE&lt;/code&gt; we read, upload or delete an image from the journal‚Äôs entry&lt;/li&gt;
&lt;li&gt;When we‚Äôre uploading to the S3 bucket, we check the extension and the file‚Äôs size. This can be expanded into hash verification to avoid uploading the same file, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, we‚Äôll need to package &lt;code&gt;requests&lt;/code&gt; into the Lambda library. Luckily, &lt;code&gt;boto3&lt;/code&gt;  for work with AWS functionality is ready out of the box. Let‚Äôs create an empty python environment, install the library and package the contents of &lt;code&gt;site-packages&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;python3 &lt;span class="nt"&gt;-m&lt;/span&gt; venv .venv
&lt;span class="nb"&gt;source&lt;/span&gt; .venv/bin/activate
pip &lt;span class="nb"&gt;install &lt;/span&gt;requests
&lt;span class="nb"&gt;cd&lt;/span&gt; .venv/lib/python3.8/site-packages
zip &lt;span class="nt"&gt;-r9&lt;/span&gt; &lt;span class="s2"&gt;"lambda_function.zip"&lt;/span&gt; &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Place the created archive &lt;code&gt;lambda_function.zip&lt;/code&gt;  into the &lt;code&gt;files_distributor/bucket/modules/s3_bucket/files&lt;/code&gt; directory and add the Lambda function itself:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;zip &lt;span class="nt"&gt;-g&lt;/span&gt; lambda_function.zip &lt;span class="nt"&gt;-r&lt;/span&gt; lambda_function.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our server is ready, now we can upload code to AWS and deploy Lambda server, to do so use the script in &lt;code&gt;files_distributor/bucket&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;terraform apply
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We‚Äôre left with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A private AWS S3 bucket &lt;code&gt;hatchery-sources&lt;/code&gt; that stores the Lambda function code&lt;/li&gt;
&lt;li&gt;A private AWS S3 bucket &lt;code&gt;hatchery-files&lt;/code&gt; that we‚Äôll store our images into with the prefix &lt;code&gt;dev&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;AWS Lambda function with working server code&lt;/li&gt;
&lt;li&gt;An IAM role for the Lambda that allows writing into a specific S3 bucket and logs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The IAM role rules are in &lt;code&gt;files_distributor/bucket/modules/iam/files/iam_role_lambda_inline_policy.json&lt;/code&gt;. The other file &lt;code&gt;iam_role_lambda_policy.json&lt;/code&gt;  is needed for the Lambda to function works correctly.&lt;/p&gt;

&lt;p&gt;To debug Lambda you can just &lt;code&gt;print&lt;/code&gt; the required values or use the standard &lt;code&gt;logging&lt;/code&gt; module for python. The output for every Lambda function call is available at AWS CloudWatch:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kba3EzA8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2ASkrr3o73JHKmTStJ2SFJgA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kba3EzA8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2ASkrr3o73JHKmTStJ2SFJgA.png" alt="4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After creating the function, add a variable &lt;code&gt;BUGOUT_FILES_APPLICATION_ID&lt;/code&gt; from our code to the Lambda environment, which you can do in the tab &lt;code&gt;Configuration/Environment variables&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;As the last step, save the AWS Lambda arn into the environment variable &lt;code&gt;AWS_HATCHERY_LAMBDA_ARN&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configuring-the-aws-load-balancer-and-open-ports"&gt;
  &lt;/a&gt;
  Configuring the AWS Load Balancer and open ports
&lt;/h2&gt;

&lt;p&gt;The only step left now is to create AWS Security Group where we‚Äôll set a port the AWS Load Balancer will listen to for subsequent data transmit into the Lambda function (in our case it‚Äôs 80 and 443).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;terraform apply &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;-var&lt;/span&gt; &lt;span class="nv"&gt;hatchery_vpc_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$AWS_HATCHERY_VPC_ID&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;-var&lt;/span&gt; &lt;span class="nv"&gt;hatchery_sbn_public_a_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$AWS_HATCHERY_SUBNET_PUBLIC_A_ID&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;-var&lt;/span&gt; &lt;span class="nv"&gt;hatchery_sbn_public_b_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$AWS_HATCHERY_SUBNET_PUBLIC_B_ID&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;-var&lt;/span&gt; &lt;span class="nv"&gt;hatchery_lambda_arn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$AWS_HATCHERY_LAMBDA_ARN&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Congratulations, our AWS Lambda function is open to the world and ready to upload and return images for our journal entries app!&lt;/p&gt;

</description>
      <category>serverless</category>
      <category>lambda</category>
      <category>bugout</category>
      <category>devops</category>
    </item>
    <item>
      <title>Open Source: As explained to a five-year-old</title>
      <author>Glowreeyah </author>
      <pubDate>Tue, 28 Sep 2021 21:29:57 +0000</pubDate>
      <link>https://dev.to/glowreeyah/open-source-as-explained-to-a-five-year-old-45ld</link>
      <guid>https://dev.to/glowreeyah/open-source-as-explained-to-a-five-year-old-45ld</guid>
      <description>&lt;p&gt;&lt;em&gt;It is Christmas, and Daddy brings home a Christmas tree, and the tree needs to be decorated. You have lots of decoration ideas, same as your sister, but you cannot decorate the tree till you receive permission from your Dad. Until permission to decorate the tree is granted, you cannot decorate the tree. This is similar to the way open source works.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So what could Open Source mean?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Open source is the source code of computer software that is accessible to the public to change, redo, remake only when permission is granted.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How does that work?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the development process of that software, publicly making it accessible is considered so that when the software is released, anyone can have access to it through a means of permission. Github is where open source projects are mostly uploaded so they can be made available to the public. From Github, there are repositories where you can get the project to use the code or contribute changes to the software.&lt;/p&gt;

&lt;p&gt;The permission given to open source is called License . This License contains conditions where the actual owners of the software state how exactly they want you to use, change or modify their software. Some of these licenses could include MIT license(MIT), Apache License 2.0, GNU General Public License etc.&lt;/p&gt;

&lt;p&gt;Open Source Software are most preferred because they are interested in having more control over these kinds of software. Examples of Open Source Projects include; Linux, Mozilla Firefox, Apache, WordPress, VLC Media Player etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why the need for Open Source?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Contributing to Open Source has lots of benefits, and they are&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open Source Software tends to have fewer bugs than regular software.&lt;/li&gt;
&lt;li&gt;Open source helps owners do a global software product for little to free cost.&lt;/li&gt;
&lt;li&gt;It encourages collaboration amongst the Open Source Communities.&lt;/li&gt;
&lt;li&gt;The source code is made available to the public to understand its purpose or how it works and how it works.&lt;/li&gt;
&lt;li&gt;It promotes the exchange of knowledge, allowing for more people to become skilled software developers.&lt;/li&gt;
&lt;li&gt;Since it is made public for modification, it meets all the criteria of the public.&lt;/li&gt;
&lt;li&gt;It is free.&lt;/li&gt;
&lt;li&gt;Open Source Software is highly secured because developers constantly review the code, thereby ensuring security and accountability.&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>github</category>
      <category>techtalks</category>
      <category>opensource</category>
      <category>dev</category>
    </item>
    <item>
      <title>Toxic optionals - TypeScript</title>
      <author>Andr√°s T√≥th</author>
      <pubDate>Tue, 28 Sep 2021 21:03:44 +0000</pubDate>
      <link>https://dev.to/latobibor/toxic-optionals-typescript-55bj</link>
      <guid>https://dev.to/latobibor/toxic-optionals-typescript-55bj</guid>
      <description>&lt;p&gt;&lt;a href="https://dev.to/latobibor/toxic-flexibility-a-case-for-typescript-6ff"&gt;In my previous blog post&lt;/a&gt; I was talking about the inherent &lt;strong&gt;Toxic flexibility&lt;/strong&gt; of the &lt;code&gt;JavaScript&lt;/code&gt; language itself.&lt;/p&gt;

&lt;p&gt;I made a case for cutting down the number of options a piece of code can have so our tool chain including your IDE of choice can help you serving with just the right thing you need at the right moment, or help you "remember" every place a given object was used without having to guess it by use a "Find in all files" type dialog.&lt;/p&gt;

&lt;p&gt;However &lt;strong&gt;toxic flexibility&lt;/strong&gt; can sprout up in &lt;code&gt;TypeScript&lt;/code&gt; as well.&lt;/p&gt;

&lt;p&gt;Let's start with a real life product example!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-a-survey"&gt;
  &lt;/a&gt;
  Building a survey
&lt;/h2&gt;

&lt;p&gt;In our company we have to deal with surveys aka questionnaires. Overly simplified each &lt;code&gt;survey&lt;/code&gt; will have a number of &lt;code&gt;question&lt;/code&gt;s of different types.&lt;/p&gt;

&lt;p&gt;Let's say our product manager says: &lt;em&gt;"I want people to have the ability to add an &lt;strong&gt;integer&lt;/strong&gt; or a &lt;strong&gt;string&lt;/strong&gt; question."&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For example: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How many batteries were present? =&amp;gt; &lt;code&gt;integer question&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;How would you describe your experience? =&amp;gt; &lt;code&gt;string question&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's write the types down (I omit most of the details like IDs to keep it clean):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Question&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;answerType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;integer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next day the product manager comes in and says: &lt;em&gt;"I want these types to have constraints: a &lt;code&gt;string&lt;/code&gt; question might have &lt;code&gt;minimum&lt;/code&gt; and &lt;code&gt;maximum lengths&lt;/code&gt;, while &lt;code&gt;integer&lt;/code&gt; questions might have &lt;code&gt;minimum&lt;/code&gt; and &lt;code&gt;maximum values&lt;/code&gt;."&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;OK, we scratch our heads and then decide to go "smart" and say: &lt;em&gt;"You know what? I will have just a &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt; property. The property &lt;code&gt;min&lt;/code&gt; will mean if it is &lt;code&gt;string&lt;/code&gt; a &lt;code&gt;minimum length&lt;/code&gt; and if it is &lt;code&gt;integer&lt;/code&gt; a &lt;code&gt;minimum value&lt;/code&gt;."&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Question&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;answerType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;integer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;min&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;max&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(Note: at this point we started to stray away from &lt;code&gt;true domain objects&lt;/code&gt; to make our &lt;em&gt;initial&lt;/em&gt; implementation simpler. I will come back to this later.)&lt;/p&gt;

&lt;p&gt;The next day the product manager comes in again: &lt;em&gt;"All was well and good, but now I want a &lt;code&gt;boolean&lt;/code&gt; question (a yes-no one), which does not have a &lt;code&gt;min-max&lt;/code&gt; type of constraint. Also I want &lt;code&gt;min-max&lt;/code&gt; values to be optional. Also people want to make photos and want to have a constraint over the maximum number of photos they can make but I do not wish to set a minimum."&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So we go and update our type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Question&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;answerType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;integer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;yes-no&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;images&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;min&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;max&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;maxNumberOfPhotos&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally the product manager comes to tell: &lt;em&gt;"Oh no, I completely forgot! We want people to have a question type where they select from a list of options with a radio button. I will call it &lt;code&gt;single choice&lt;/code&gt;."&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now things start to sour:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Question&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;answerType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;integer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;yes-no&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; 
            &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;image&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;single-choice&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;min&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;max&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;maxNumberOfPhotos&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;choices&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Looks like we can handle all these types with one excellent &lt;code&gt;type&lt;/code&gt;! Or is there a drawback...? ü§î&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cartesian-products-and-the-poison-of-optional-properties"&gt;
  &lt;/a&gt;
  Cartesian products and the poison of optional properties
&lt;/h2&gt;

&lt;p&gt;Let's see what kind of objects we can make from this &lt;code&gt;Question&lt;/code&gt; type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// no surprises&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;validImage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Question&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;answerType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;image&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;maxNumberOfPhotos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;validInteger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Question&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;answerType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;integer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;min&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;max&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// but also this will compile...&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;invalidYesNo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Question&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;answerType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;yes-no&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;maxNumberOfPhotos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;choices&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lol&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;wat&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Whenever you use optional you create the Cartesian product of all possible missing and added properties! We have 4 optional properties now we will have 2&lt;sup&gt;4&lt;/sup&gt; options: 16 possible types of which only 4 of them are &lt;code&gt;valid domain objects&lt;/code&gt;!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#look-at-how-it-all-ends-up"&gt;
  &lt;/a&gt;
  Look at how it all ends... up ‚ö†Ô∏è
&lt;/h3&gt;

&lt;p&gt;A several years in my coding career I got really aware that to write good code I should not just see my module (be it a class or a function or a component) on its own, I constantly need to check how it is used: is it easy or is it cumbersome to interact with the object I have just defined.&lt;/p&gt;

&lt;p&gt;The type I created above will be extremely cumbersome to use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// overly simplified logic just to show the problem&lt;/span&gt;
&lt;span class="c1"&gt;// This is a simple React example, don't worry if you &lt;/span&gt;
&lt;span class="c1"&gt;// are not familiar with it&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ShowQuestion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Question&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;yes-no&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;maxNumberOfPhotos&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;choices&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Uh-oh, invalid yes-no question!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;single-choice&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; 
   &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt; 
      &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt; 
      &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;maxNumberOfPhotos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;choices&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Uh-oh, invalid single-choice question!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="c1"&gt;// and so on and so on - finally we can show it&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;integer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; 
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Constraint&lt;/span&gt; &lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Maximum value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;maxNumberOfPhotos&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;image&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Constraint&lt;/span&gt; &lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Maximum no of photos&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; 
 &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;maxNumberOfPhotos&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;    &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Drill this into your forehead:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Every &lt;code&gt;optional property&lt;/code&gt; you set up will warrant at least an &lt;code&gt;if&lt;/code&gt; somewhere else.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#-raw-union-type-endraw-to-the-rescue"&gt;
  &lt;/a&gt;
  &lt;code&gt;Union type&lt;/code&gt; to the rescue!
&lt;/h2&gt;

&lt;p&gt;I promised to come back to the domain objects. In everyone's mind we only have 5 types. Let's make then only five (plus a base)!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;QuestionBase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;answerType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;integer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;yes-no&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; 
            &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;image&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;single-choice&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// I am not going to define all of them, they are simple&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;IntegerQuestion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;QuestionBase&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// pay attention to this: answerType is now narrowed down&lt;/span&gt;
  &lt;span class="c1"&gt;// to only 'integer'!&lt;/span&gt;
  &lt;span class="na"&gt;answerType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;integer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;minValue&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;maxValue&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ImageQuestion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;QuestionBase&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;answerType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;image&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// we can make now things mandatory as well!&lt;/span&gt;
  &lt;span class="c1"&gt;// so if product says we must not handle&lt;/span&gt;
  &lt;span class="c1"&gt;// infinite number of photos&lt;/span&gt;
  &lt;span class="nl"&gt;maxNumberOfPhotos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Question&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;IntegerQuestion&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;ImageQuestion&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="c1"&gt;// | YesNoQuestion | ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;How do we use them? We are going to use &lt;a href="https://www.typescriptlang.org/docs/handbook/2/narrowing.html"&gt;&lt;code&gt;narrowing&lt;/code&gt;&lt;/a&gt; (see link for more details).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-case-for-some-raw-switchcase-endraw-"&gt;
  &lt;/a&gt;
  A case for some &lt;code&gt;switch-case&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;One of my favourite things to do when you have to deal with a stream of polymorphic objects is to use &lt;code&gt;switch-case&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;renderAllQuestions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;questions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Question&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;questions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;question&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;renderOneQuestion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;renderOneQuestion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Question&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// question.type is valid on all question types&lt;/span&gt;
  &lt;span class="c1"&gt;// so this will work&lt;/span&gt;
  &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;integer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nx"&gt;renderIntegerQuestion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nx"&gt;renderStringQuestion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;//...&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Check the type! We are now 100% sure&lt;/span&gt;
&lt;span class="c1"&gt;// it is the right one.&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;renderIntegerQuestion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IntegerQuestion&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// your IDE will bring `maxValue` up after you typed 'ma'&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;maxValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;maxValue&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; 
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Constraint&lt;/span&gt; &lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Maximum value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;maxValue&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Disclaimer&lt;/em&gt;: I know there are nicer React patterns than having a render function for everything. Here I just wanted to make a kind of framework-agnostic example.&lt;/p&gt;

&lt;p&gt;What happened above is that we were able to &lt;em&gt;funnel&lt;/em&gt; a set of types to concrete types without having to use the dangerous &lt;code&gt;as&lt;/code&gt; operator or to feel out the type at hand with duck-typing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;To sum it all up:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;optional properties&lt;/code&gt; result in conditions that check them leading to &lt;strong&gt;Cartesian product explosion&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;we cut down the number of &lt;strong&gt;invalid possibilities&lt;/strong&gt; to only &lt;strong&gt;5 valid &lt;code&gt;domain objects&lt;/code&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;these &lt;code&gt;domain objects&lt;/code&gt; also &lt;strong&gt;match the terminology&lt;/strong&gt; product management and clients have&lt;/li&gt;
&lt;li&gt;since we &lt;strong&gt;encapsulated&lt;/strong&gt; what is common in &lt;code&gt;QuestionBase&lt;/code&gt; now we are free to add question specific extras and quirks&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;instead of having a god-component&lt;/strong&gt; question handler that handles rendering of a question with an insane set of conditions (and growing!) we now boxed away the differences neatly in &lt;strong&gt;separate, aptly-typed components&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;we can also handle an &lt;strong&gt;array of different values&lt;/strong&gt; and without any type casting with (e.g. &lt;code&gt;question as IntegerQuestion&lt;/code&gt;) we created a type-safe system&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Questions? Did I make errors?&lt;br&gt;
Let me know in the comments.&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>cleancode</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Create a backend in Javascript: Introduction to Node.js</title>
      <author>Eric The Coder</author>
      <pubDate>Tue, 28 Sep 2021 20:59:49 +0000</pubDate>
      <link>https://dev.to/ericchapman/create-a-backend-in-javascript-introduction-to-node-js-215a</link>
      <guid>https://dev.to/ericchapman/create-a-backend-in-javascript-introduction-to-node-js-215a</guid>
      <description>&lt;p&gt;Here is a series of articles to help you create backend applications in Javascript.&lt;/p&gt;

&lt;p&gt;Node.js is now a must, so it is essential for a developer to master it.&lt;/p&gt;

&lt;p&gt;I will publish a new article every two days and little by little you will learn everything there is to know about Node.js&lt;/p&gt;

&lt;p&gt;To not miss anything follow me on twitter: &lt;a href="https://twitter.com/EricTheCoder_"&gt;https://twitter.com/EricTheCoder_&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-nodejs"&gt;
  &lt;/a&gt;
  What is Node.js?
&lt;/h2&gt;

&lt;p&gt;NodeJS allows you to run JavaScript code outside of a browser.&lt;/p&gt;

&lt;p&gt;Node.js is a free, open source, server environment that uses JavaScript language to create server-side web applications. (backend)&lt;/p&gt;

&lt;p&gt;Node.js works on different platforms (Windows, Linux, Unix, Mac OS X, etc.) With Node.js we can build a fast and highly scalable web application.&lt;/p&gt;

&lt;p&gt;Using Node.js also means that we can use JavaScript across the stack, i.e. the same language for the frontend and the backend. So more rapid and efficient development.&lt;/p&gt;

&lt;p&gt;Node.js has a huge library of ready-made packages that will save you a lot of time. These libraries are managed by NPM (Node Package Manager)&lt;/p&gt;

&lt;p&gt;A special feature of Node.js is that it uses asynchronous programming (running multiple tasks at the same time) vs synchronous programming (running one task at a time) found on many server-side programming languages like PHP and Ruby.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#installing-nodejs"&gt;
  &lt;/a&gt;
  Installing Node.js
&lt;/h2&gt;

&lt;p&gt;Node.js can be installed directly from its website: [&lt;a href="https://nodejs.org/en/"&gt;https://nodejs.org/en/&lt;/a&gt; marge(&lt;a href="https://nodejs.org/en/"&gt;https://nodejs.org/en/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Detailed documentation is also available on the Node.js website: [&lt;a href="https://nodejs.org/en/docs/"&gt;https://nodejs.org/en/docs/&lt;/a&gt; marge(&lt;a href="https://nodejs.org/en/docs/"&gt;https://nodejs.org/en/docs/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Once the installation is complete, you can check the version installed with this command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;node &lt;span class="nt"&gt;-v&lt;/span&gt;
&lt;span class="c"&gt;# v16.9.1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#hello-world"&gt;
  &lt;/a&gt;
  Hello World
&lt;/h2&gt;

&lt;p&gt;Tradition requires, the first thing we are going to do is the classic 'Hello World'&lt;/p&gt;

&lt;p&gt;The fastest and easiest way to run code with Node is by using REPL. To launch the REPL, just run this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;node
Welcome to Node.js v16.9.1
Type &lt;span class="s2"&gt;".help"&lt;/span&gt; &lt;span class="k"&gt;for &lt;/span&gt;more information
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="nx"&gt;World&lt;/span&gt;
&lt;span class="kc"&gt;undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The REPL allows you to run javascript but you will understand it is very limited. The REPL is used for running small orders or for testing only.&lt;/p&gt;

&lt;p&gt;If you want to write a complete program in NodeJS, you will need to create a file and run it.&lt;/p&gt;

&lt;p&gt;Create and open the app.js file, enter the following line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;console.log &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Hello World'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Each file is considered by NodeJS to be a module and can therefore be executed.&lt;/p&gt;

&lt;p&gt;To do this, from the terminal enter: node &lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;node app.js
Hello World
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There you go, well done you have just created your first NodeJS application!&lt;/p&gt;

&lt;p&gt;Whenever you need to run NodeJS code you will need to do so with this command.&lt;/p&gt;

&lt;p&gt;We will see, later that there is a way to create a NodeJS server that will allow code to be executed automatically.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript-browser-vs-javascript-server"&gt;
  &lt;/a&gt;
  JavaScript browser vs JavaScript server
&lt;/h2&gt;

&lt;p&gt;As you have seen thanks to NodeJS you can run JavaScript code without a browser! This is good but despite this, not everything is exactly the same.&lt;/p&gt;

&lt;p&gt;Here is a list of the main differences between JavaScript browser code and NodeJS&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A browser application run on the client's computer&lt;/li&gt;
&lt;li&gt;A NodeJS application is running on the server&lt;/li&gt;
&lt;li&gt;With NodeJS, there is no browser so no DOM and no Window object&lt;/li&gt;
&lt;li&gt;With NodeJS it is possible to access the file system&lt;/li&gt;
&lt;li&gt;With NodeJS, the module system called 'CommonJS' does not work with the same syntax as ES6 JavaScript modules&lt;/li&gt;
&lt;li&gt;There are objects in NodeJS which are available everywhere in your code. These objects are called the Globals.

&lt;ul&gt;
&lt;li&gt;Here are some of these objects. You will learn how to use it in due course:

&lt;ul&gt;
&lt;li&gt;__dirname (return the path of the current folder)&lt;/li&gt;
&lt;li&gt;__filename (returns the name of the file being executed)&lt;/li&gt;
&lt;li&gt;require (allows you to load modules)&lt;/li&gt;
&lt;li&gt;module (returns info on the current module)&lt;/li&gt;
&lt;li&gt;process (returns info about the current environment)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;That's all for today, follow me on twitter: &lt;a href="https://twitter.com/EricTheCoder_"&gt;https://twitter.com/EricTheCoder_&lt;/a&gt; to be notified of the publication of the next article (within two days).&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>A short guide to help you pick the correct HTML tag</title>
      <author>Jozsef Polgar</author>
      <pubDate>Tue, 28 Sep 2021 20:40:41 +0000</pubDate>
      <link>https://dev.to/polgarj/a-short-guide-to-help-you-pick-the-correct-html-tag-56l9</link>
      <guid>https://dev.to/polgarj/a-short-guide-to-help-you-pick-the-correct-html-tag-56l9</guid>
      <description>&lt;p&gt;A semantically correct HTML tag informs the browser and the developer about its content. It also helps keyboards and assistive technologies to navigate through a website.&lt;/p&gt;

&lt;p&gt;There are &lt;em&gt;more than 100 HTML tags&lt;/em&gt;, but which ones are semantic and which are not?&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Non-semantic elements:&lt;/strong&gt; div and span, etc. Unlike semantic elements, these are not holding any extra information about their content.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Semantic elements:&lt;/strong&gt; header, main, footer, article, img, p, h1, etc.&lt;/p&gt;

&lt;p&gt;When you create a new HTML file, you have something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        ...
    &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        ...
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I will focus on &lt;strong&gt;what's inside the body element&lt;/strong&gt; and name only the most important tags. You can find a link with a full list of HTML elements at the end of this article.&lt;/p&gt;

&lt;p&gt;The HTML tags can be separated into different groups and it helped me to understand the whole concept and I think this is the best way to explain it, so let's start.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#content-sectioning-or-landmarks"&gt;
  &lt;/a&gt;
  Content sectioning or landmarks
&lt;/h2&gt;

&lt;p&gt;The layout of the main page of this blog looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ev2ZJ7Dz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://uselessdivs.com/img/a-short-guide-to-help-you-pick-the-correct-html-tag/layout.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ev2ZJ7Dz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://uselessdivs.com/img/a-short-guide-to-help-you-pick-the-correct-html-tag/layout.svg" alt="A visual representation of the main elements of the website, such as header, nav, main, section, article, aside."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#header-and-nav"&gt;
  &lt;/a&gt;
  header and nav
&lt;/h3&gt;

&lt;p&gt;In my &lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt;, you can find the logo, which is a link and it leads to the main page and &lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt; element which contains the links to my other pages.&lt;br&gt;
You can also put here some &lt;strong&gt;introduction about the page&lt;/strong&gt;, a search bar, or other elements.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#main"&gt;
  &lt;/a&gt;
  main
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt; element holds different content on each page. This &lt;strong&gt;holds the primary information&lt;/strong&gt; of the current page &lt;strong&gt;or the main functionality&lt;/strong&gt; of an application.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#footer"&gt;
  &lt;/a&gt;
  footer
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt;tag creates a footer for a section or for the whole document. You can have multiple &lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt; elements in one page, which typically contains data, like: contact info to the author, copyrigt information, related links etc.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#aside"&gt;
  &lt;/a&gt;
  aside
&lt;/h3&gt;

&lt;p&gt;You can also find the &lt;code&gt;&amp;lt;aside&amp;gt;&lt;/code&gt; on the right side of my page. It &lt;strong&gt;holds complementary content&lt;/strong&gt;. If I remove it, nothing will be missing from the primary content. You can put here for example table of contents, related posts, etc.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#section"&gt;
  &lt;/a&gt;
  section
&lt;/h3&gt;

&lt;p&gt;Inside my &lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt; element, you can find the &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; tag. This is a non-semantic tag, and it should &lt;strong&gt;always&lt;/strong&gt; have a heading.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#h1-h6"&gt;
  &lt;/a&gt;
  h1 - h6
&lt;/h3&gt;

&lt;p&gt;Heading elements: &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;h4&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;h5&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt;, are the titles of the different sections. &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; is the highest level of the headings, and it is necessary to have one on each page but there should be only one per page. &lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt; is the lowest. If you run out of headings, there is another option: &lt;a href="https://uselessdivs.com/blog/the-7th-heading"&gt;the 7th heading&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The reason you should use landmarks is that screen readers and other &lt;em&gt;assistive technologies can jump back and forth between these elements&lt;/em&gt;.&lt;br&gt;
For example, all the pages have the same header with the same logo, the same navigation, but with a keyboard shortcut, you can jump over them and start with the content of the main tag.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#text-content-elements"&gt;
  &lt;/a&gt;
  Text content elements
&lt;/h2&gt;

&lt;p&gt;These can help you &lt;strong&gt;organize the written content&lt;/strong&gt; on your pages and give information about the content to search engines and screen readers.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#p"&gt;
  &lt;/a&gt;
  P
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; stands for paragraph. In other words, a block of text. You will use it a lot for wrapping your text content with it.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#ul-ol-li"&gt;
  &lt;/a&gt;
  ul, ol, li
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; - unordered list, &lt;code&gt;&amp;lt;ol&amp;gt;&lt;/code&gt; - ordered list, &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; - list elements of the two kind of lists. If you need to create a list you have to use them.&lt;/p&gt;

&lt;p&gt;List items are wrapped in &lt;em&gt;&lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;, if the order is not important&lt;/em&gt;. It will put bullet points before each list item.&lt;/p&gt;

&lt;p&gt;Choose &lt;em&gt;&lt;code&gt;&amp;lt;ol&amp;gt;&lt;/code&gt;, if you need a numbered list&lt;/em&gt; and it will put a number before each item in ascending order.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#figure-figcaption-blockquote-cite"&gt;
  &lt;/a&gt;
  Figure, figcaption, blockquote, cite
&lt;/h3&gt;

&lt;p&gt;I will explain all of them with one example. Look at this block of code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;figure&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;blockquote&lt;/span&gt; &lt;span class="na"&gt;cite=&lt;/span&gt;&lt;span class="s"&gt;"https://www.htmhell.dev/24-a-placeholder-is-not-a-label/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Every form input element needs a label.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/blockquote&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;figcaption&amp;gt;&lt;/span&gt;Manuel Matuzoviƒá, &lt;span class="nt"&gt;&amp;lt;cite&amp;gt;&lt;/span&gt;A placeholder is not a label - HTMHell&lt;span class="nt"&gt;&amp;lt;/cite&amp;gt;&amp;lt;/figcaption&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/figure&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;figcaption&amp;gt;&lt;/code&gt; go hand in hand&lt;br&gt;
The &lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt; is a self-contained element optionally, but usually with a caption. This caption is the &lt;code&gt;&amp;lt;figcaption&amp;gt;&lt;/code&gt; element.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;blockquote&amp;gt;&lt;/code&gt; is for quotations, where you want to indicate the author, the source, etc. (You can use the cite attribute on this tag to give the URL of the source of this quotation).&lt;br&gt;
&lt;code&gt;&amp;lt;cite&amp;gt;&lt;/code&gt; element &lt;em&gt;is holding the reference to a quoted content&lt;/em&gt;. Name of the author, title of the cited material, etc. and this is the first element of our next group, the inline text elements.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#inline-text-elements"&gt;
  &lt;/a&gt;
  Inline text elements
&lt;/h2&gt;

&lt;p&gt;You can wrap smaller parts of text like words, sentences, etc into different tags to define its style, meaning, or structure.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#a"&gt;
  &lt;/a&gt;
  a
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; or anchor elements are links, which have a &lt;strong&gt;href&lt;/strong&gt; attribute, which leads to &lt;em&gt;other web pages, files, email addresses, phone numbers, or a location on the same page&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#em"&gt;
  &lt;/a&gt;
  em
&lt;/h3&gt;

&lt;p&gt;Use this element to &lt;strong&gt;emphasize any text content.&lt;/strong&gt; &lt;em&gt;Screen readers read this part of a text in a different way.&lt;/em&gt; Browsers render the content of this text in italic font style but don't use it only for styling.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#strong"&gt;
  &lt;/a&gt;
  strong
&lt;/h3&gt;

&lt;p&gt;Use this element to &lt;strong&gt;mark content, which is more important&lt;/strong&gt; than the rest of the text. &lt;strong&gt;Screen readers read this part of a text in a different way.&lt;/strong&gt; Browsers render the content of this text in bold font style but don't use it only for styling.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#q"&gt;
  &lt;/a&gt;
  q
&lt;/h3&gt;

&lt;p&gt;A short inline quotation, which doesn't need an entire paragraph. (You can use the cite attribute on this tag to give the URL of the source of this quotation)&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#image-and-multimedia"&gt;
  &lt;/a&gt;
  Image and multimedia
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#audio"&gt;
  &lt;/a&gt;
  audio
&lt;/h3&gt;

&lt;p&gt;audio is used to embed sound into your website.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#img"&gt;
  &lt;/a&gt;
  img
&lt;/h3&gt;

&lt;p&gt;img is used to embed an image into your website.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#video"&gt;
  &lt;/a&gt;
  video
&lt;/h3&gt;

&lt;p&gt;video is used to embed a video into your website.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#table-content"&gt;
  &lt;/a&gt;
  Table content
&lt;/h2&gt;

&lt;p&gt;I think an example is the easiest way to explain these elements:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/polgarj/embed/vYZvwrQ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#table"&gt;
  &lt;/a&gt;
  table
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; creates a two-dimensional table with rows and columns&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#thead"&gt;
  &lt;/a&gt;
  thead
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;thead&amp;gt;&lt;/code&gt; is a row or rows that define the column heading&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#th"&gt;
  &lt;/a&gt;
  th
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;th&amp;gt;&lt;/code&gt; is a single cell as a header of a group of cells. This group of cells can be a column or a row, and you have to define it by the scope attribute. The scope attribute can have the value of col or row.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#tbody"&gt;
  &lt;/a&gt;
  tbody
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;tbody&amp;gt;&lt;/code&gt; wraps the main content of our table, which is usually between the thead and the tfoot elements.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#tr"&gt;
  &lt;/a&gt;
  tr
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt; defines a row of cells in a table.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#td"&gt;
  &lt;/a&gt;
  td
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; stands for table data. This is a single cell that holds the information.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#tfoot"&gt;
  &lt;/a&gt;
  tfoot
&lt;/h3&gt;

&lt;p&gt;This is a row at the end of the table, that summarizes its content.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#forms"&gt;
  &lt;/a&gt;
  Forms
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#form"&gt;
  &lt;/a&gt;
  form
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element wraps the entire form that users can use to enter their data and submit it to the server.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#fieldset"&gt;
  &lt;/a&gt;
  fieldset
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;fieldset&amp;gt;&lt;/code&gt; groups related inputs in a form. Fieldsets need a caption and this caption is the legend element. For example, if you have a form with a shipping address and billing address, you can create two groups of inputs with the fieldset element.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#legend"&gt;
  &lt;/a&gt;
  legend
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;legend&amp;gt;&lt;/code&gt; element defines a caption for the fieldset.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#input"&gt;
  &lt;/a&gt;
  input
&lt;/h3&gt;

&lt;p&gt;Users can interact with &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; elements to enter their data. &lt;em&gt;There are many different kinds of input fields for different types of information&lt;/em&gt;, like text, color, file, etc.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#label"&gt;
  &lt;/a&gt;
  label
&lt;/h3&gt;

&lt;p&gt;Every &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; field needs a caption and this caption is the &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; element. &lt;strong&gt;You can't replace the &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; tag with the placeholder attribute.&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#select-and-option"&gt;
  &lt;/a&gt;
  select and option
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; is a special kind of input field, with a dropdown menu. This dropdown menu contains &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#textarea"&gt;
  &lt;/a&gt;
  textarea
&lt;/h3&gt;

&lt;p&gt;Users can enter &lt;em&gt;multiple lines of text&lt;/em&gt; in this field&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#button"&gt;
  &lt;/a&gt;
  button
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; tag creates a clickable element, which looks like a button. It is used to submit forms.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#others"&gt;
  &lt;/a&gt;
  Others
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#iframe"&gt;
  &lt;/a&gt;
  iframe
&lt;/h3&gt;

&lt;p&gt;You can embed other HTML files into your website with the &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; element. For example, you can insert a song from Spotify or a video from YouTube into your website.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#picture"&gt;
  &lt;/a&gt;
  picture
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; has almost the same purpose as the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; element, but you can specify more sources and browsers decide, which is the best for them. If you want to use a new image format, like .avif, (which is not yet widely supported at the time I write this post), you should give the image in another format, like png with the &lt;code&gt;&amp;lt;source&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#source"&gt;
  &lt;/a&gt;
  source
&lt;/h3&gt;

&lt;p&gt;With this element you can specify multiple sources for the &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt;, the &lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; elements, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;picture&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"image.png"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"image.webp"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"image.avif"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/picture&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#svg"&gt;
  &lt;/a&gt;
  svg
&lt;/h3&gt;

&lt;p&gt;I could describe it in a more complicated way, but &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; is &lt;em&gt;mostly used to display a vector graphic image&lt;/em&gt;, that you can enlarge or reduce to any size without becoming pixelated.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learn-by-playing"&gt;
  &lt;/a&gt;
  Learn by playing
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://twitter.com/plfstr" rel="noreferrer"&gt;Paul Foster&lt;/a&gt; built this awesome memory game. Test yourself and beat your score tomorrow. &lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/plfstr/embed/zYqQeRw?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;
    If you pick the correct elements, your code will be easier to read by other developers,&lt;br&gt;
    it will be easier for assistive technology users to use your website,&lt;br&gt;
    the search engines will rank your website higher (SEO).&lt;br&gt;
    Sometimes you should stop and think about whether there is a better HTML element than the one you want to use.
&lt;/p&gt;

&lt;p&gt;If you are missing something or find any inaccuracies, please let me know and I will add or correct it as soon as I can.&lt;/p&gt;

&lt;p&gt;Originally posted on &lt;a href="https://uselessdivs.com/blog/a-short-guide-to-help-you-pick-the-correct-html-tag"&gt;Use Less Divs&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>a11y</category>
    </item>
    <item>
      <title>Why web3 matters</title>
      <author>Cat McGee</author>
      <pubDate>Tue, 28 Sep 2021 20:08:03 +0000</pubDate>
      <link>https://dev.to/catmcgeecode/why-web3-matters-4oe0</link>
      <guid>https://dev.to/catmcgeecode/why-web3-matters-4oe0</guid>
      <description>&lt;p&gt;&lt;a href="https://blog.mcgee.cat/why-web3-matters"&gt;Original post on Hashnode&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Recently, a Twitter thread entitled &lt;em&gt;Why web3 matters&lt;/em&gt; went viral. And as much as I love this sentiment, I couldn't help but roll my eyes when reading through Chris Dixon's buzzword-filled tweets. That kind of blockchain lingo is loved by crypto salespeople and NFT grifters, but is quite far removed from people who, well... actually want to understand why web3 matters. It doesn't help that Twitter is a cesspool for controversies, and Chris's thread seemed to divide people into two groups - you either agree with everything he said 100% making you a delusional zoomer, or you're an old-fashioned granddad who can't keep up with the times. I'm here to help you make up your own mind, and hopefully find yourself somewhere in between these two extremes.&lt;/p&gt;

&lt;p&gt;If you're someone who loves to read irrationally enthusiastic reassurances about the next blockchain get-rich-quick scheme, this post is not for you. But if you're fed up of the constant bombardment of jargon and actually want to understand why on earth Twitter is suddenly talking about a new web, read on. I'm going to tell you why web3 &lt;em&gt;actually&lt;/em&gt; matters and what it means for you - a person, not a venture capitalist. üòâ&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-wrong-with-our-current-web"&gt;
  &lt;/a&gt;
  What's wrong with our current web?
&lt;/h2&gt;

&lt;p&gt;We've had two iterations of the web so far - known as, you guessed it, web1 and web2. Web1 was king from approximately 1990-2005, and most people using the web in those days were consumers rather than creators. Content was consumed by many but created by few, mainly obnoxiously nerdy tech people and forward-thinking news sites. It is now nicknamed the 'read-only web.'&lt;/p&gt;

&lt;p&gt;Web2 changed that, particularly with the introduction of social media. Suddenly, more and more people were posting, creating, and sharing their lives with the world. Those who were originally only reading news stories started publicly arguing with them. And the internet that we know today was born.&lt;/p&gt;

&lt;p&gt;But there's a problem. Everything that we post, share, comment, like, or furiously screenshot is owned by someone else. And it goes deeper - it's owned by 4 big companies: Google, Apple, Facebook, and Amazon. We'll call them GAFA.&lt;/p&gt;

&lt;p&gt;The web has gone from being created by few and consumed by many, to being created by many and consumed by many, to being &lt;strong&gt;created by many and owned by few&lt;/strong&gt;. GAFA have created a &lt;strong&gt;Data Economy&lt;/strong&gt;, feeding off of the content that we create and using it against us. They control the information we create, the information we see, and with that they're able to &lt;em&gt;gently&lt;/em&gt; exploit our human weaknesses by manipulating what we believe, which in turn makes ads more effective - the Data Economy business model.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The company with the most data always wins.&lt;/strong&gt; Facebook buys out any and all threats to their social media monopoly - remember when WhatsApp was privacy-focussed? Or when Instagram was actually a non-toxic platform for friends to share photos? Google has made Bing a meme, Yahoo a boomers-only search engine, and reduced Mozilla to desperately holding onto the ethical part of the browser market. And Amazon has basically disrupted every market in existence and changed the course of the economy. But like, in a bad way.&lt;/p&gt;

&lt;p&gt;The Data Economy isn't just an exploitive and rigged business model, but it also has devastating consequences when things go wrong. When so much data is owned by one entity, it makes them a prime target for hacking. And oh boy, do these guys get hacked. For a glimpse into how insecure the Data Economy is, have a look at Wikipedia's &lt;a href="https://en.wikipedia.org/wiki/List_of_data_breaches"&gt;list of data breaches&lt;/a&gt;. And to find out if your data has been exposed to the public, enter your email into &lt;a href="https://haveibeenpwned.com/"&gt;Have I Been Pwned&lt;/a&gt;. Not only are there accidental data breaches, but there have been cases of &lt;a href="https://en.wikipedia.org/wiki/Facebook%E2%80%93Cambridge_Analytica_data_scandal"&gt;purposeful illegal selling of data&lt;/a&gt; from GAFA. There is no sign of this stopping, and no incentive to stop either. That's where web3 comes in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-web3-ideal"&gt;
  &lt;/a&gt;
  The web3 ideal
&lt;/h2&gt;

&lt;p&gt;Web3 promises two things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;To remove the ability to make money from data&lt;/li&gt;
&lt;li&gt;To create incentives to make money on the internet through other means&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;By achieving both these goals, we will no longer live in a Data Economy. Companies will have to find new ways to make money, and people will be able to take control of their own data. There will be no incentive to hack into data centres. We'll live in a world where &lt;strong&gt;the people consume, create, and own our information&lt;/strong&gt;, not in a world of surveillance capitalism that feeds 4 power-hungry data-hoarding entities.&lt;/p&gt;

&lt;p&gt;Sound unrealistic? Up until now, it has been. We've been relying on governments and companies to do the right thing, and we've seen how that's panned out. But if we can't trust people to enforce these promises, we can trust technology. So let's go through how web3 can technologically fulfill each of its promises.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#remove-the-ability-to-make-money-from-data"&gt;
  &lt;/a&gt;
  Remove the ability to make money from data
&lt;/h2&gt;

&lt;p&gt;Web3 has often been called the &lt;strong&gt;decentralized web&lt;/strong&gt;. While data is currently &lt;em&gt;centralized&lt;/em&gt; and owned by GAFA, web3 applications separate their data and store it on a large number of computers and hard drives. These computers are not owned by one company - the idea is that each person can own a small amount of data. Without one entity having access to data, there is no ability to make money from it. &lt;/p&gt;

&lt;p&gt;There are plenty of ways to accomplish this technologically. The most well-known solution to this currently is (brace yourself) &lt;em&gt;blockchain&lt;/em&gt;. Without going into boring details of how a blockchain works, it allows each computer to hold a small amount of data - a block in a chain. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://bitcoin.org/"&gt;Bitcoin&lt;/a&gt; and &lt;a href="https://ethereum.org/"&gt;Ethereum&lt;/a&gt; are the two biggest blockchains in existence, but others like &lt;a href="https://solana.com/"&gt;Solana&lt;/a&gt; and  &lt;a href="https://cardano.org/"&gt;Cardano&lt;/a&gt; are slowly catching up. There are hundreds of decentralized apps, aka dapps, already deployed on Ethereum, and building on the blockchain is getting easier by the minute. It is by far the most secure decentralized architecture.&lt;/p&gt;

&lt;p&gt;There are other ways to build a decentralized network. The obsession over and reliance on blockchain is, quite frankly, BS. There are decentralized storage companies out there (like &lt;a href="https://www.storj.io/"&gt;Storj&lt;/a&gt;) that pay any person to host some of their storage space to be a 'node' on their network, while allowing developers to store their data on these nodes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Web3 is not blockchain&lt;/strong&gt; - this is an incredibly important point to understand. Blockchain is a web3 architecture, but it is not the only way to accomplish a decentralized web, and in most cases it is unnecessarily expensive. However, with blockchain comes &lt;strong&gt;cryptocurrency&lt;/strong&gt;, which brings us to our next point.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-incentives-to-make-money-on-the-internet-through-other-means"&gt;
  &lt;/a&gt;
  Create incentives to make money on the internet through other means
&lt;/h2&gt;

&lt;p&gt;Without one entity having access to large amounts of data, we can't have a Data Economy. And removing the Data Economy already opens up new incentives to make money through other means. But when people talk about making money using web3, they're talking about crypto.&lt;/p&gt;

&lt;p&gt;Just a warning: some of this next part may sound similar to Chris's thread, but I promise it will actually be coherent. &lt;/p&gt;

&lt;p&gt;Crypto provides a financial incentive, known as &lt;strong&gt;tokens&lt;/strong&gt;, to participate in the building of a decentralized web. There are many ways to earn tokens - some examples are offering storage (like Storj), creating content, or sometimes even &lt;a href="https://www.forbes.com/sites/youngjoseph/2020/09/17/uniswap-ethereum/"&gt;being early adapters of the application.&lt;/a&gt; Companies can set up their own protocol for rewarding their users, and it cuts out the need for other third party services. There is no need to send data through AWS, Stripe, or PayPal, as tokens can be sent directly from the provider to the user.&lt;/p&gt;

&lt;p&gt;Tokens can also be sent directly from one user to another. No more relying on Google to give you your YouTube earnings, or directing your audience to Patreon so they can donate - users can directly 'tip' you a token if they like your content. There are also the famous NFTs, which, sorry Chris, do not let you &lt;em&gt;"own a piece of the internet"&lt;/em&gt;. NFTs are tokens too, but they are not equal in value to each other. While owning an OG token is like owning a dollar, owning an NFT is more like owning a painting. All dollars are equal in value, but not all paintings are equal in value. NFTs are each unique, and they're pretty cool - check out &lt;a href="https://opensea.io/"&gt;OpenSea&lt;/a&gt; if you're interested in getting into it.&lt;/p&gt;

&lt;p&gt;This token economy is exactly what the web was created for in the first place. It's direct. &lt;em&gt;People&lt;/em&gt; reward &lt;em&gt;people&lt;/em&gt; for providing a service or participating in a better world. There is no malicious data tracking or manipulation. No exploitation, no incessant ads, no algorithms designed to be addictive. No reliance on huge profit-driven companies. Just people interacting with people. That's web3.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-where-are-we"&gt;
  &lt;/a&gt;
  So where are we?
&lt;/h2&gt;

&lt;p&gt;Most apps you use are still web2. The majority of dapps out there are purely for finance, like trading crypto or buying and selling NFTs. But we're getting there, and web3 is already beginning to expand into huge industries, like &lt;a href="https://audius.co/"&gt;music&lt;/a&gt;, &lt;a href="https://livepeer.org/"&gt;video streaming&lt;/a&gt;, and even &lt;a href="https://axieinfinity.com/"&gt;gaming&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Web3 may currently seem pretty inaccessible, and when buzzword tweets go viral it continues to push the narrative that the decentralized web is only for people already in the know. But web2 was like that too. There are thousands of people passionately working to make this space more accessible for all, and you'll soon be using web3 apps without even knowing. &lt;/p&gt;

&lt;p&gt;It's super easy to start your own journey into web3, and you can get involved today by installing &lt;a href="https://metamask.io/"&gt;Metamask&lt;/a&gt;, a browser extension to make your browser compatible with blockchain apps. If you're a developer interested in getting into the web3 space, I cannot recommend &lt;a href="https://dev.to/dabit3/the-complete-guide-to-full-stack-solana-development-with-react-anchor-rust-and-phantom-3291"&gt;Nader Dabit&lt;/a&gt;'s content enough.&lt;/p&gt;

&lt;p&gt;Thanks for reading. This is my first ever post about web3, and was &lt;a href="https://blog.mcgee.cat/why-web3-matters"&gt;originally posted here&lt;/a&gt;. I'll be posting more about the decentralized web so if you're interested in reading my (potentially controversial) takes, make sure to follow me &lt;a href="https://blog.mcgee.cat/"&gt;on Hashnode&lt;/a&gt; or &lt;a href="https://twitter.com/messages/compose?recipient_id=2287174586&amp;amp;text=Hey%20Cat!"&gt;slide into my Twitter DMs&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>twitter</category>
      <category>discuss</category>
    </item>
    <item>
      <title>A Strange Request</title>
      <author>Pato Z</author>
      <pubDate>Tue, 28 Sep 2021 19:44:26 +0000</pubDate>
      <link>https://dev.to/pzavolinsky/a-strange-request-48i9</link>
      <guid>https://dev.to/pzavolinsky/a-strange-request-48i9</guid>
      <description>&lt;p&gt;I'm planning a fancy dinner party for our friends, and you being my friend, decide to help me with the arrangements. Everything is going well until I ask you...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-strange-request"&gt;
  &lt;/a&gt;
  A Strange Request
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Hey, I need you to run to the Library, you know that building full of books we used to visit in ancient times, before the Internet?&lt;/li&gt;
&lt;li&gt;Yes, I know what a Library &lt;em&gt;is&lt;/em&gt;, thankyouverymuch.&lt;/li&gt;
&lt;li&gt;I need you to find me the title of the first five books about broccoli ever published, it's a matter of life and death.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Being the brains behind this operation, you first worry about my mental sanity, but then dubbing me a bit eccentric, you decide to humor me. Before heading out to the Library, you take out a piece of paper and jot down my request:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT book titles
FROM books in the Library
WHERE the book topic is about 'broccoli'
ORDER BY publication year
LIMIT 5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(I sneak a peek at your note and think to myself "What a strange fella").&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#road-trip"&gt;
  &lt;/a&gt;
  Road trip
&lt;/h2&gt;

&lt;p&gt;Clearly you don't live in the Library so to get there you'll need to take some means of transportation. And today your transport of choice is a &lt;a href="https://en.wikipedia.org/wiki/Network_socket"&gt;TCP Socket&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Never mind what happens in the Library, a &lt;em&gt;lot&lt;/em&gt; can go wrong on the way there and back: you could get lost, take too long, decide to stop for coffee on your way back, even get to the Library only to find out that it's temporarily closed due to a bug infestation.&lt;/p&gt;

&lt;p&gt;I, being the inquisitive chef, start preparing for the worst, including network errors and socket timeouts.&lt;/p&gt;

&lt;p&gt;Luckily the roads are clear, so a couple of milliseconds later you arrive at the Library.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-only-sensible-way"&gt;
  &lt;/a&gt;
  The only sensible way
&lt;/h2&gt;

&lt;p&gt;Fresh through the door, you see an impressive building stuffed from top to bottom with rows and rows of books.&lt;/p&gt;

&lt;p&gt;Eager to get your broccoli quest out of the way you do what any sensible human being would do in this situation: you pick the first book in the first shelf and read it from cover to cover to see if it's about broccoli or not, you make a note of its &lt;em&gt;broccoliness&lt;/em&gt; and its publication year and continue with the second one, and so on until you've read the whole library. Then you find the five earliest publications and head back home.&lt;/p&gt;

&lt;p&gt;Unfortunately years have passed, the dinner party was a sham and we are no longer on speaking terms. This strategy was too inefficient. It could've worked if there were only a couple of books in the Library but this was not the case.&lt;/p&gt;

&lt;p&gt;What you just did is known as a &lt;a href="https://en.wikipedia.org/wiki/Full_table_scan"&gt;table scan&lt;/a&gt; (also known as a &lt;code&gt;collection scan&lt;/code&gt;) and in most cases you'll lose friends and ruin parties because of it.&lt;/p&gt;

&lt;p&gt;We need a better approach, luckily librarians have solved this problem before.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-bunch-of-cards"&gt;
  &lt;/a&gt;
  A bunch of cards
&lt;/h2&gt;

&lt;p&gt;Libraries since forever had this great tool called The Catalog. Library catalogs, before computers, were big pieces of furniture, chests of drawers filled with small cardboard cards. Each card contained information about where to find books according to some criteria. An alternative name for these "catalog furniture things" is &lt;a href="https://en.wikipedia.org/wiki/Database_index"&gt;indexes&lt;/a&gt; (or "indices" if you're feeling particularly fancy).&lt;/p&gt;

&lt;p&gt;Armed with this knowledge you venture into the mysterious Room of Catalogs. In there you find lots of catalogs with book reference cards for many different types of queries. You have "books by size", "books by weight", "books by nutritional value", ... etc. Browsing through them you find two indexes that catch your attention: "books by topic" and "books by publication year".&lt;/p&gt;

&lt;p&gt;These two should come in handy but which one to choose?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-plan-comes-together"&gt;
  &lt;/a&gt;
  A plan comes together
&lt;/h2&gt;

&lt;p&gt;So you have a choice to make, should you go check the topic index or the publication index? The answer you can already foresee: "it depends".&lt;/p&gt;

&lt;p&gt;If the library had only books on green veggies, then the chances of finding a broccoli book in there would be pretty high. In other words the "broccoli" card of the topic index would be very &lt;em&gt;very&lt;/em&gt; long. If this was the case, maybe going to the publication index and starting from the oldest known year, searching those books for &lt;em&gt;broccoliness&lt;/em&gt; until you find five would make sense.&lt;/p&gt;

&lt;p&gt;In non-veggie only libraries though this strategy would be disastrous, so you decide you'll go for the topic index.&lt;/p&gt;

&lt;p&gt;But before jumping to it, you realize picking the right index is no trivial task, pick the right index and you might be done in an instant, pick the wrong one and you might have to stay at the library overnight.&lt;/p&gt;

&lt;p&gt;Just like you have people that specialize in finding the perfect wine to go with a meal, the task of finding the right index for your query is best left to &lt;a href="https://en.wikipedia.org/wiki/Query_optimization"&gt;query planners&lt;/a&gt; (sometimes called &lt;code&gt;query optimizers&lt;/code&gt;). You can think of these as kind of query &lt;a href="https://en.wikipedia.org/wiki/Sommelier"&gt;sommeliers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the process of choosing an index you just learned an important nugget of wisdom:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;index efficiency depends on many things, including not only the question you are trying to answer, but the data that was indexed and the index stats.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#all-over-the-place"&gt;
  &lt;/a&gt;
  All over the place
&lt;/h2&gt;

&lt;p&gt;So you approach the catalog titled "books by topic", open the drawer for "b" and rummage through the cards until you find a dusty old card labeled "broccoli". The future's looking bright, you'll be outta here in no time you think.&lt;/p&gt;

&lt;p&gt;Unfortunately you look down at the card and to your dismay, there are 100 book locations listed in the card, and even worse, these locations are all over the place, some in the upper floors, others in the basement, etc.&lt;/p&gt;

&lt;p&gt;Apparently books in the library are not physically ordered by the type of veggie they discuss, go figure.&lt;/p&gt;

&lt;p&gt;The physical order of books is often called the &lt;a href="https://en.wikipedia.org/wiki/Database_index#Clustered"&gt;cluster index&lt;/a&gt; and a popular one for books would be "alphabetical by author". An alternative would be "just put it in the next empty shelf", something like ordered by purchase date.&lt;/p&gt;

&lt;p&gt;Anyway back to your current predicament, you can foresee lots of stairs and walking around in the library. You'll need to go check those 100 locations, make a note of the publication year, then find the earliest five.&lt;/p&gt;

&lt;p&gt;You're not looking forward to it, if only there was a way for you to avoid those trips up and down the library...&lt;/p&gt;

&lt;p&gt;Then suddenly two ideas pop into your head.&lt;/p&gt;

&lt;p&gt;The first one: what if you take this list of 100 locations and use the "books by publication year" index to find the first five there, then you'll only need to do five trips around the library.&lt;/p&gt;

&lt;p&gt;Like any query planning activity, the efficiency of this strategy depends on many factors. If the broccoli card had only, say 6 entries, then probably doing six trips around the library would be faster than rummaging through the publication index (that contains many &lt;em&gt;many&lt;/em&gt; books that are &lt;em&gt;not about broccoli&lt;/em&gt; for some reason).&lt;/p&gt;

&lt;p&gt;On the other hand, if the library was so big that you needed to take a train from one room to the other, then whatever you can do to avoid fetching books would be the right call.&lt;/p&gt;

&lt;p&gt;Given the complexity of this type of decision, some query planners might not even bother with trying to consider &lt;a href="https://www.postgresql.org/docs/current/indexes-bitmap-scans.html"&gt;index intersection&lt;/a&gt; strategies like this one and just go fetch the 100 books.&lt;/p&gt;

&lt;p&gt;But even if we were to consider this strategy, the potential inefficiencies are plain to see.&lt;/p&gt;

&lt;p&gt;The second idea seems more promising...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-compound-solution-to-a-compound-problem"&gt;
  &lt;/a&gt;
  A compound solution to a compound problem
&lt;/h2&gt;

&lt;p&gt;Wouldn't it be nice if the people that created these two indexes had created one containing both publication and topic information at the same time? Some sort of &lt;a href="https://docs.mongodb.com/manual/core/index-compound/"&gt;compound index&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;You start pondering about the endless possibilities and quickly realize there are two paths forward: we could either (a) add topic information to the publication index or (b) add publication information to the topic index.&lt;/p&gt;

&lt;p&gt;What a mouthful, let's see that in action!&lt;/p&gt;

&lt;p&gt;A card in the publication index looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1985
====
  - 1
  - 2
  - 5
  - 6
  - 10
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we add topic information to this index (that would be option &lt;code&gt;a&lt;/code&gt; above), we'd get something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1985
====
- broccoli
  - 1
  - 5
  - 10
- cars
  - 2
  - 6
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are sorting all the books in the card by topic and adding topic titles, so the card for publication year "1985" under the title "broccoli" would list locations 1, 5, 10.&lt;/p&gt;

&lt;p&gt;We could do the same for the topic index. Right now cards in that index look like this one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;broccoli
========
- 1
- 5
- 10
- 234
- 567
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To add publication information to this index (that would be option &lt;code&gt;b&lt;/code&gt; above), we'd get something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;broccoli
========
- 1985
  - 1
  - 5
  - 10
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the task at hand (b) looks like the most promising solution, but knowing what you know about strange book requests, surely there are other questions that are best answered by an (a) type of index.&lt;/p&gt;

&lt;p&gt;Thanks to this compound index of "books by topic and publication year (in that order)" you can just pick the five first locations and go fetch those books. A huge improvement!&lt;/p&gt;

&lt;p&gt;You take this time to admire the craft of these ancient index makers. When making compound indexes the order in which indexes are combined is &lt;em&gt;very&lt;/em&gt; significant.&lt;/p&gt;

&lt;p&gt;Just by looking at (a) and (b) you can tell the difference.&lt;/p&gt;

&lt;p&gt;You can almost see the emerging pattern here:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;when building compound indexes, put filter fields first (the ones over which you specify conditions) and sorting fields later (the ones you'll order by).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#not-the-wrong-princess-again"&gt;
  &lt;/a&gt;
  Not the wrong princess, again!
&lt;/h2&gt;

&lt;p&gt;‚ÄúFive books, five trips, things are looking pretty good‚Äù you think, putting on a smug face and nodding to yourself like a psycho.&lt;/p&gt;

&lt;p&gt;This is a huge milestone because, to be honest, all prior approaches had that frustrating feeling of climbing two flights of stairs to find a book only to realize it wasn‚Äôt the book you wanted.&lt;/p&gt;

&lt;p&gt;You felt a bit like an Italian descent plumber constantly trying to save a princess from some kind of dragon thing only to realize you saved the &lt;em&gt;wrong&lt;/em&gt; princess, again.&lt;/p&gt;

&lt;p&gt;So, happy with this huge efficiency improvement, you go fetch the first book, write the title down and just before leaving for the second one you glance at the shelves and your heart sinks.&lt;/p&gt;

&lt;p&gt;Wouldn‚Äôt it be nice if all the books about broccoli were on the same shelf? All that broccoli knowledge neatly &lt;em&gt;clustered&lt;/em&gt; together. One trip surely beats five. How hard would it be to convince the local librarians to change the way they sort books on the shelves? Pretty hard, probably.&lt;/p&gt;

&lt;p&gt;This is exhausting, so you decide to take a break...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-coffee-interlude-at-the-local-bookshop"&gt;
  &lt;/a&gt;
  A coffee interlude at the local bookshop
&lt;/h2&gt;

&lt;p&gt;You sit and nurse a hot coffee while pondering about why every time you propose changing the cluster index to a librarian they go red with anger and blue with sadness. There must be a reason.&lt;/p&gt;

&lt;p&gt;(right about this time, I‚Äôm at home chopping onions and wondering how could you possibly have a decent &lt;a href="https://en.wikipedia.org/wiki/Network_delay"&gt;latency&lt;/a&gt; with all this philosophical pondering and meandering)&lt;/p&gt;

&lt;p&gt;Before coming up with an explanation you think of an alternative approach: let‚Äôs talk about bookshops.&lt;/p&gt;

&lt;p&gt;Bookshops are ancient brick and mortar places where you can go to buy books. Most bookshops organize books by topic, and within each topic, alphabetically by author. Pretty close to what we need.&lt;/p&gt;

&lt;p&gt;So you wonder why do bookshop people subject themselves to this book sorting torture that brings librarians to tears?&lt;/p&gt;

&lt;p&gt;Of the top of your mind, one explanation is that bookshops aim to answer a very limited number of questions, namely ‚Äúwhere‚Äôs this book?‚Äù, ‚Äúwhere are all the books by this author?‚Äù, etc. And bookshops want to make it easier for people to find those books by walking around the store without any help. Also, bookstores usually have much fewer books than libraries.&lt;/p&gt;

&lt;p&gt;Explanation aside, what would it take to sort books that way? Well, you should probably ask a bookstore clerk next time you visit one. In the meantime, clearly we need to deal with overflow. When an author publishes a new book and we don‚Äôt have enough space to place it on the shelf, we need to shift everything to the right.&lt;/p&gt;

&lt;p&gt;If we were to do this in the library, we‚Äôd also need to update every card in every index because the location for this book changed to the next shelf. This feels pretty annoying and requires us to be able to answer a meta question: where are all the index references to this book?&lt;/p&gt;

&lt;p&gt;Your brain starts to hurt, so you decide to park that thought for later.&lt;/p&gt;

&lt;p&gt;Deep down you keep wondering about how convenient it would be to cluster books by topic.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-asymptote-of-awesome"&gt;
  &lt;/a&gt;
  The Asymptote of Awesome
&lt;/h2&gt;

&lt;p&gt;Back at the library you decide to recap. So far you did a single index lookup in the "books by topic and publication year (in that order)". You got 5 locations, but because of your convincing powers, the library now clusters by this index, so those 5 locations are actually consecutive, so you really need a single trip through the library.&lt;/p&gt;

&lt;p&gt;You started this journey by looking at every single book in the library, then you narrowed the search down to all 100 books about broccoli. From there to just the first five broccoli books. And, in the ultimate optimization, a single lookup for five consecutive books!&lt;/p&gt;

&lt;p&gt;You feel accomplished, you ascended the Peak of Efficiency, you must have reached the Asymptote of Awesome.&lt;/p&gt;

&lt;p&gt;(you quickly take out a piece of paper and scribble down ‚ÄúAsymptote of Awesome‚Äù in case you decide to start a rock band in the future)&lt;/p&gt;

&lt;p&gt;...unless‚Ä¶&lt;/p&gt;

&lt;p&gt;One trip around the library is much better than a hundred, but you know what‚Äôs better than one trip around the library? &lt;/p&gt;

&lt;p&gt;You‚Äôre right: &lt;em&gt;no&lt;/em&gt; trips around the library!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#is-there-such-a-thing-as-being-too-lazy"&gt;
  &lt;/a&gt;
  Is there such a thing as being &lt;em&gt;too&lt;/em&gt; lazy?
&lt;/h2&gt;

&lt;p&gt;What if we could &lt;em&gt;&lt;a href="https://www.postgresql.org/docs/current/sql-createindex.html"&gt;include&lt;/a&gt;&lt;/em&gt; the book titles in the topic index. Maybe scribble the title right next to the location? Something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;broccoli
========
- 1985
  - [location 1]: Broccoli in the flux capacitor
  - [location 5]: Green veggies of the future, a look at 2015 agriculture
  - [location 10]: Little edible trees
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this new expanded index, you can now answer the question directly from the index. No trips, no walking around the library at all.&lt;/p&gt;

&lt;p&gt;You realize there is something deeply meaningful in this: some queries can be answered directly from an index. These queries are known as &lt;a href="https://docs.mongodb.com/manual/core/query-optimization/#covered-query"&gt;covered queries&lt;/a&gt; (because an index fully covers the query without having to go fetch the book).&lt;/p&gt;

&lt;p&gt;Covered queries are the ultimate query, the holy grail of laziness, and therefore of performance.&lt;/p&gt;

&lt;p&gt;You can hear a manic evil laughter suddenly bursting from your own mouth. ‚ÄúEvery query should be a covered query, every query should have its own index, in fact let's index every property, what we need is more indexes, more catalogs, more cardboard‚Ä¶‚Äù&lt;/p&gt;

&lt;p&gt;You pick up a piece of paper and start trying to solve the &lt;a href="https://en.wikipedia.org/wiki/Travelling_salesman_problem"&gt;traveling salesman problem&lt;/a&gt; to optimize hitting every stationary in town so that you can score precious cardboard to start indexing ASAP, and then it dawns on you: somebody must have thought about this before, how come librarians are not doing this already?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-publishers-worst-nightmare"&gt;
  &lt;/a&gt;
  A publisher's worst nightmare
&lt;/h2&gt;

&lt;p&gt;Books are mostly immutable. Once published they stay published as is, they don‚Äôt really change much. But what if they did? What would happen if books kept changing? What would that mean to the humble librarian?&lt;/p&gt;

&lt;p&gt;Clearly there are all sorts of wrong things that can happen. The easiest is when the thing that changes is not a part of any index, then you just take a permanent marker, find the book and change it.&lt;/p&gt;

&lt;p&gt;But what if the property that changed was indexed? There was a typ0 in the book and the publication year was wrong. We‚Äôd need to find the card for the publication index and fix it. If we had a compound index like "books by topic and publication year (in that order)" we‚Äôd need to find the card for the book topic, then move the book under the right publication year. The more indexes we have the more changes we‚Äôd need to make.&lt;/p&gt;

&lt;p&gt;Probably the worst type of change is the cluster index change. You suddenly recall your coffee break and how painful it was to shift every book to the right. Not to mention answering the question of: where are all the index references to this book?&lt;/p&gt;

&lt;p&gt;And, if we happen to be inserting a book at the beginning of the cluster index we might need to shift every single book in the library and update every single card of every single index.&lt;/p&gt;

&lt;p&gt;There‚Äôs also the problem of space. If we take this to the extreme, every index is a cluster index, every index includes every property in the book, so for every index you‚Äôd need a whole new library building.&lt;/p&gt;

&lt;p&gt;All of this is kind of depressing and, to be honest, you already have what you came for, it‚Äôs getting late so you better head back.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-return"&gt;
  &lt;/a&gt;
  The return
&lt;/h2&gt;

&lt;p&gt;So you are finally back, you hand me over the list with the five titles, expecting a hero‚Äôs welcome.&lt;/p&gt;

&lt;p&gt;Instead, I look at the list, shrug and say ‚Äújust as I suspected, there are at least 5 books about broccoli‚Äù, and keep cooking.&lt;/p&gt;

&lt;p&gt;You start wondering why you subject yourself to friends like me.&lt;/p&gt;

&lt;p&gt;Upon careful examination you start thinking about what could I have done to avoid so much waste. So far we‚Äôve been so focused on finding the right books that we never stopped to think about what we were using the books for.&lt;/p&gt;

&lt;p&gt;I asked for the title of the first five books about broccoli. What if I had asked ‚Äúhow many of the first five books about broccoli have a green cover?‚Äù or maybe ‚Äúhow many times is the word ‚Äòbroccoli‚Äô mentioned in the first five books about broccoli?‚Äù&lt;/p&gt;

&lt;p&gt;All of these questions have something in common (a couple of things actually). First and foremost they are pretty weird. But much more interesting is the fact that all of them could be answered using the same five books!&lt;/p&gt;

&lt;p&gt;In truth there were two parts of my strange request. Find me a couple of books, and from those books I only want the titles.&lt;/p&gt;

&lt;p&gt;All queries have the same two parts: a criteria for selecting books (often called a &lt;code&gt;filter&lt;/code&gt;) and some instructions of what to do with those books once you find them (usually called a &lt;code&gt;projection&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;My original query had ‚Äúget the first five books about broccoli‚Äù as the filter and ‚Äúfrom those I want the title‚Äù as the projection.&lt;/p&gt;

&lt;p&gt;We‚Äôve been focusing mostly on the filter so far, trying our best to avoid any kind of physical activity, but let‚Äôs talk about the projection for a moment.&lt;/p&gt;

&lt;p&gt;We‚Äôll start by altering the filter to make matters much &lt;em&gt;much&lt;/em&gt; worse‚Ä¶&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#frenemies"&gt;
  &lt;/a&gt;
  Frenemies
&lt;/h2&gt;

&lt;p&gt;Let‚Äôs say that instead of the first five books about broccoli, I asked for the first thousand.&lt;/p&gt;

&lt;p&gt;If you had the right index that covers this query, you could get an answer very quickly and efficiently, without a single trip around the library.&lt;/p&gt;

&lt;p&gt;If, on the other hand, you needed to use a compound index, you‚Äôd still need to go fetch 1000 books. This is usually the most typical scenario given that a cluster index at this point is probably out of the question.&lt;/p&gt;

&lt;p&gt;That being said, you could easily fit 1000 book titles in a small pocket-sized notebook. What if I had asked for 1000 full books instead?&lt;/p&gt;

&lt;p&gt;So you diligently fetch and carry 1000 books to your car only to realize you cannot fit 1000 books in the trunk of a compact.&lt;/p&gt;

&lt;p&gt;You hire a truck, load it and drive it back to my house.&lt;/p&gt;

&lt;p&gt;Once there, you see me give the books a cursory glance, check the titles and throw the rest in the trash.&lt;/p&gt;

&lt;p&gt;At this point you scream bloody murder.&lt;/p&gt;

&lt;p&gt;And now we learned a new lesson, if you want to keep your friends, ask only for what you truly need. Don‚Äôt be lazy and ask for &lt;em&gt;everything&lt;/em&gt; just because it‚Äôs easier than to explain what you want.&lt;/p&gt;

&lt;p&gt;So with this final frustration out of the way, it‚Äôs time to wrap up with this party.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cue-nostalgic-music"&gt;
  &lt;/a&gt;
  Cue nostalgic music
&lt;/h2&gt;

&lt;p&gt;In the end the party was a big success. Whether so much broccoli wisdom had anything to do with it or not, only time will tell.&lt;/p&gt;

&lt;p&gt;Before everyone heads home, let‚Äôs recap what we‚Äôve learned:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Table scans ruin parties and friendships.&lt;/li&gt;
&lt;li&gt;Always use an index for your queries.&lt;/li&gt;
&lt;li&gt;You can check how good a particular index is for your query by comparing the number of books fetched with the number of books actually included in the result. You want these numbers to be as close as possible.&lt;/li&gt;
&lt;li&gt;Fancy people call indexes ‚Äúindices‚Äù.&lt;/li&gt;
&lt;li&gt;When creating compound indexes, the order of the properties being indexed matters &lt;em&gt;a lot&lt;/em&gt;. You want ‚Äúfilter‚Äù properties first, ‚Äúsorting‚Äù properties later.&lt;/li&gt;
&lt;li&gt;Sometimes you can answer queries directly from the index, these are covered queries. Having indexes that cover your quieres has a cost so try to balance coverage obsession with pragmatic index building. Only cover the most critical queries.&lt;/li&gt;
&lt;li&gt;If you want to check which indexes apply to a particular query, query planners are always very eager to &lt;a href="https://www.postgresql.org/docs/current/sql-explain.html"&gt;explain&lt;/a&gt; their train of thought.&lt;/li&gt;
&lt;li&gt;The physical ordering of books is the cluster index. Cluster indexes can be very efficient, but changes to the cluster index can be painful.&lt;/li&gt;
&lt;li&gt;Projections are very important, always ask exactly what you need.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And in the end you might be left wondering what was I cooking, well‚Ä¶&lt;/p&gt;

&lt;p&gt;...that‚Äôs a wrap.&lt;/p&gt;

</description>
      <category>database</category>
      <category>performance</category>
      <category>optimization</category>
      <category>broccoli</category>
    </item>
  </channel>
</rss>
