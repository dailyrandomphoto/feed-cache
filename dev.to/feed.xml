<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to Build a Skeleton Layout in React</title>
      <author>Kyle Luke</author>
      <pubDate>Wed, 27 Jan 2021 03:16:18 +0000</pubDate>
      <link>https://dev.to/lukekyl/how-to-build-a-skeleton-layout-in-react-21hb</link>
      <guid>https://dev.to/lukekyl/how-to-build-a-skeleton-layout-in-react-21hb</guid>
      <description>&lt;p&gt;The use of a Skeleton Layout for asynchronous content is becoming more and more popular across mobile and web apps alike. Google, Facebook, LinkedIn, Youtube and many more use a skeleton layout to display what the content and layout might look like, before it loads. Using one in your own project is a nice styling effect for your users, and also might just improve the SEO of your project in the near future by reducing "&lt;a href="https://dev.to/ben/fixing-cumulative-layout-shift-41ja"&gt;cumulative layout shift&lt;/a&gt;". This post shows you how easy it is to add a skeleton layout that updates after asynchronous content is loaded.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RKvEPLBS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2As7uxK77a0FY43NLe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RKvEPLBS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2As7uxK77a0FY43NLe.png" alt="LinkedIn Skeleton Layout Example from: https://uxdesign.cc/what-you-should-know-about-skeleton-screens-a820c45a571a"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#isloaded-state" class="anchor"&gt;
  &lt;/a&gt;
  isLoaded State
&lt;/h3&gt;

&lt;p&gt;React allows for us to set state from &lt;code&gt;isLoaded: false&lt;/code&gt; to &lt;code&gt;isLoaded: true&lt;/code&gt; when an asynchronous function has completed. This will be the basis for which set of content we will display. We will create two CSS classes for our content based on the isLoaded state: &lt;code&gt;.loading&lt;/code&gt; and &lt;code&gt;.loaded&lt;/code&gt;. We will then do an if statement that will return the JSX for the &lt;code&gt;.loaded&lt;/code&gt; content, IF &lt;code&gt;isLoaded = true&lt;/code&gt;. If &lt;code&gt;isLoaded = false&lt;/code&gt;, the app will return the JSX for the &lt;code&gt;.loading&lt;/code&gt; content, which will be out skeleton layout.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// JSX
class App extends React.Component {
  constructor(props){
    super(props);

    this.state = {
      isLoaded: false,
      asyncData: []
    }
  };

render(){

    asyncFunction = () =&amp;gt; {
        // Async function fetches asyncData, and upon fetch updates state from `isLoaded:false` to `isLoaded:true`
    }

    if(this.state.isLoaded===true){
        // If state.isLoaded=true, component will render complete layout and async content
          return(
            &amp;lt;&amp;gt;
              &amp;lt;LayoutContent className="loaded" /&amp;gt;
            &amp;lt;/&amp;gt;
          );
        } 

    return(
      // While state.isLoaded=false, component will only render skeleton layout
        &amp;lt;&amp;gt;
            &amp;lt;LayoutContent className="loading" /&amp;gt;
        &amp;lt;/&amp;gt;
    );
};
};
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#css" class="anchor"&gt;
  &lt;/a&gt;
  CSS
&lt;/h3&gt;

&lt;p&gt;The CSS we need to style will include our two classes: &lt;code&gt;.loading&lt;/code&gt; and &lt;code&gt;.loaded&lt;/code&gt;. This gives you a little freedom for how you would like your skeleton layout to look, but I chose an &lt;a href="https://dev.to/stackfindover/youtube-loading-animation-using-html-and-css-44c2"&gt;animated approach from StackFindOver&lt;/a&gt; for the styling for the CodePen example below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Skeleton Layout styles and animation
.loading {
    position: relative;
    background: #cccccc;
}
.loading:after {
    content: "";
    display: block;
    position: absolute;
    top:0;
    width: 100%;
    height: 100%;
    transform: translateX(-100px);
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
    animation: loading 0.8s infinite;
}
@keyframes loading {
    100% {
        transform: translateX(100%);
    }
}

// Loaded styling
.loaded {
    // Styles
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Some additional things to note when it comes to CSS styling:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Width and Height of components should be defined to reduce content jumping&lt;/li&gt;
&lt;li&gt;Consider using CSS Flexbox for responsive components with max-width/height defined&lt;/li&gt;
&lt;li&gt;If component sizes vary based on content consider adding an "overflow-y: scroll" property&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#example-application" class="anchor"&gt;
  &lt;/a&gt;
  Example Application
&lt;/h3&gt;

&lt;p&gt;Feel free to steal some of the code from this &lt;a href="https://codepen.io/lukekyl/pen/NWRZZoW"&gt;CodePen example&lt;/a&gt;, but note you will likely need to adjust some of the styling to fit your own application. &lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/lukekyl/embed/NWRZZoW?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Skeleton layouts not only give your application a fun and useful loading screen as asynchronous content loads, but also might just improve you application's SEO and user experience. Hopefully this blog post and the example gives you some ideas on how to apply a skeleton layout in your own project!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Have you used a Skeleton Layout in your project?&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Comment if you have used a similar method, or have suggestions for improvements!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>css</category>
      <category>codenewbie</category>
      <category>beginners</category>
    </item>
    <item>
      <title>5 built-in Next.js features you absolutely should check out</title>
      <author>James Wallis</author>
      <pubDate>Tue, 26 Jan 2021 23:42:27 +0000</pubDate>
      <link>https://dev.to/jameswallis/5-built-in-next-js-features-you-absolutely-should-check-out-4k8e</link>
      <guid>https://dev.to/jameswallis/5-built-in-next-js-features-you-absolutely-should-check-out-4k8e</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Recently I've been using &lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt; both at work and on after-work projects. Next.js is React framework that enables functionality such as server-side rendering and generating static websites. It has become my go-to technology when I'm building a frontend application, overtaking plain old React. &lt;/p&gt;

&lt;p&gt;With Next.js you get many things out of the box such as built-in routing, automatic code splitting and it will even decide whether your app can be statically rendered or needs to be rendered server-side on every request - all of this without any configuration. In fact, when creating a new React application I default to using &lt;a href="https://nextjs.org/docs/api-reference/create-next-app"&gt;&lt;code&gt;create-next-app&lt;/code&gt;&lt;/a&gt; as opposed to &lt;a href="https://github.com/facebook/create-react-app"&gt;&lt;code&gt;create-react-app&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;During my time developing with Next.js I discovered a few features which are easy to miss when you're just getting started. Some of these features helped me solve some problems I was having with my application. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features-you-should-check-out" class="anchor"&gt;
  &lt;/a&gt;
  Features you should check out 🤩
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Export your Next.js application into &lt;a href="https://nextjs.org/docs/advanced-features/static-html-export"&gt;static HTML using &lt;code&gt;next export&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;. &lt;br&gt;
Giving you the ability to run it without a running Node.js server while still being able to make data-fetching requests at build time using &lt;code&gt;getStaticProps&lt;/code&gt;. This feature bridges the gap between Next.js and its longtime alternative &lt;a href="https://www.gatsbyjs.com/"&gt;Gatsby&lt;/a&gt; which is exclusively a static site generator.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I've used &lt;code&gt;next export&lt;/code&gt; to host a Next.js site on GitHub Pages (although with issues that were solved with the subsequent feature).&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The &lt;code&gt;next.config.js&lt;/code&gt; &lt;a href="https://nextjs.org/docs/api-reference/next.config.js/cdn-support-with-asset-prefix"&gt;&lt;code&gt;assetPrefix&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://nextjs.org/docs/api-reference/next.config.js/basepath"&gt;&lt;code&gt;basePath&lt;/code&gt;&lt;/a&gt; options&lt;/strong&gt;. &lt;br&gt;
On its own &lt;code&gt;assetPrefix&lt;/code&gt; allows you to prefix all URLs to assets, like images, so that you can use assets hosted on a CDN. While &lt;code&gt;basePath&lt;/code&gt; provides the ability to host the app on the subpath of a domain such as &lt;code&gt;https://domain.com/app-on-this-subpath&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="https://dev.to/jameswallis/next-js-basepath-and-why-its-awesome-for-github-pages-and-static-sites-41ba"&gt;In the past I've utilised &lt;code&gt;next export&lt;/code&gt;, &lt;code&gt;assetPrefix&lt;/code&gt; and &lt;code&gt;basePath&lt;/code&gt; together to host a Next.js app on GitHub Pages&lt;/a&gt; - without &lt;code&gt;assetPrefix&lt;/code&gt; and &lt;code&gt;basePath&lt;/code&gt; you are unable to host a Next.js project on GitHub pages (without a custom domain) as it puts them on a subpath.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://nextjs.org/docs/basic-features/data-fetching#incremental-static-regeneration"&gt;Incremental Static Regeneration&lt;/a&gt;&lt;/strong&gt;. &lt;br&gt;
A feature of &lt;code&gt;getStaticProps&lt;/code&gt; which allows you to regenerate a static page while your app is running. It works by triggering a page rebuild in the background, which fetches updated page data, and replaces the existing HTML page with the newly generated one once the build has completed.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I haven't tried this feature but will in the future as it is a better alternative to completely rebuilding a static Next.js application each time data that it relies on changes.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://nextjs.org/docs/advanced-features/i18n-routing"&gt;Internationalized (i18n) routing&lt;/a&gt;&lt;/strong&gt;. &lt;br&gt;
If you're building a website that will be available in different countries, this feature is a game-changer. It makes supporting multiple languages simpler by enabling you to provide a list of supported locales which Next.js can read and automatically set up routing to ensure that users see the correct locale for their country. You can assign a default locale that will be used when no matching locale is detected for a user. Next.js supports both domain routing (&lt;code&gt;example.com&lt;/code&gt;, &lt;code&gt;example.fr&lt;/code&gt;) and subpath routing (&lt;code&gt;example.com/en&lt;/code&gt;, &lt;code&gt;example.com/fr&lt;/code&gt;) meaning it doesn't restrict how you plan to host your application.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If I ever decide to make my website multi-lingual or work on a global project, this is a feature I will definitely be using.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://nextjs.org/docs/advanced-features/measuring-performance"&gt;Measuring Performance - &lt;code&gt;reportWebVitals&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;.&lt;br&gt;
Next.js contains a built-in relayer allowing you to analyse and measure the performance of your application. To activate this you use the built-in function &lt;code&gt;reportWebVitals&lt;/code&gt;. Next.js calls &lt;code&gt;reportWebVitals&lt;/code&gt; with a single &lt;code&gt;metrics&lt;/code&gt; parameter, an object containing various properties such as an &lt;code&gt;id&lt;/code&gt;, the &lt;code&gt;startTime&lt;/code&gt; of a metric and a &lt;code&gt;value&lt;/code&gt; which can be the duration of a metric. This function will be called when running on the client-side. In development, you can simply log out the values to easily measure the performance of your application. In production, however, &lt;a href="https://nextjs.org/docs/advanced-features/measuring-performance#sending-results-to-analytics"&gt;you can use this function to send the &lt;code&gt;metrics&lt;/code&gt; to your own analytical service&lt;/a&gt;. They supply an example of this for use with Google Analytics.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I also haven't used &lt;code&gt;reportWebVitals&lt;/code&gt; but in the future I'll add it to &lt;a href="https://dev.to/jameswallis/adding-google-analytics-to-any-next-js-app-46h1"&gt;my Google Analytics article&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Using the following function should provide more accurate metrics than plain Google Analytics usage:&lt;br&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;reportWebVitals&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Use `window.gtag` if you initialized Google Analytics as this example:&lt;/span&gt;
  &lt;span class="c1"&gt;// https://github.com/vercel/next.js/blob/canary/examples/with-google-analytics/pages/_document.js&lt;/span&gt;
  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gtag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;event&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;event_category&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;web-vital&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Web Vitals&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Next.js custom metric&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;CLS&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="c1"&gt;// values must be integers&lt;/span&gt;
    &lt;span class="na"&gt;event_label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// id unique to current page load&lt;/span&gt;
    &lt;span class="na"&gt;non_interaction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// avoids affecting bounce rate.&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#bonus" class="anchor"&gt;
  &lt;/a&gt;
  Bonus
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The incredible amount of examples available in the Next.js GitHub repository&lt;/strong&gt;.&lt;br&gt;
If you haven't already stumbled onto them, the &lt;a href="https://github.com/vercel/next.js/tree/canary/examples"&gt;Next.js GitHub repository contains an examples directory&lt;/a&gt; that is full of examples. These show you how to use technologies such as &lt;a href="https://github.com/vercel/next.js/tree/canary/examples/with-tailwindcss"&gt;Tailwind CSS&lt;/a&gt;, &lt;a href="https://github.com/vercel/next.js/tree/canary/examples/with-typescript"&gt;TypeScript&lt;/a&gt; and various CMSs such as &lt;a href="https://github.com/vercel/next.js/tree/canary/examples/cms-contentful"&gt;Contentful&lt;/a&gt; with Next.js. You can use &lt;code&gt;create-next-app&lt;/code&gt; to download an example.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;When I am incorporating new technology into an existing Next.js application, the example directory is the first place I check for guidance on how to integrate it.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#final-words" class="anchor"&gt;
  &lt;/a&gt;
  Final words
&lt;/h2&gt;

&lt;p&gt;These are just a few of the features that Next.js includes that can automatically improve your application without having to install any external dependencies.&lt;/p&gt;

&lt;p&gt;If you liked this article, hit the like button. Something I can do better? Leave a comment!&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>nextjs</category>
      <category>react</category>
    </item>
    <item>
      <title>Learn Dependency Injection with Doug the Goldfish 🐠</title>
      <author>Oranda</author>
      <pubDate>Tue, 26 Jan 2021 23:14:14 +0000</pubDate>
      <link>https://dev.to/codalreef/learn-dependency-injection-with-doug-the-goldfish-3j43</link>
      <guid>https://dev.to/codalreef/learn-dependency-injection-with-doug-the-goldfish-3j43</guid>
      <description>&lt;p&gt;There are lots of great strategies to keep code manageable and extensible.  Today, let's learn about "Dependency Injection". &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#dependency-injection" class="anchor"&gt;
  &lt;/a&gt;
  Dependency Injection
&lt;/h1&gt;

&lt;p&gt;Imagine you're a goldfish named Doug (🐠), and you love bubbles.  So much so, that you bought a Bubble Machine with a programmable Typescript SDK.&lt;/p&gt;

&lt;p&gt;You write a program to make bubbles when you wake up:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Bubbler&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Bubbler&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initBubbler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="c1"&gt;//  Instantiate&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bubbler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Bubbler&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dougs-bubbler&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="c1"&gt;//  Start the Bubbler&lt;/span&gt;
  &lt;span class="nx"&gt;bubbler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bubble&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;startTime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;7:00AM&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;endTime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;8:00AM&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;initBubbler&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Great, now you awaken to fresh, well-oxygenated water 💦&lt;/p&gt;

&lt;p&gt;You tell your friend Mary (🐟), and she's so excited, she buys a bubbler too.&lt;/p&gt;

&lt;p&gt;You update the code to initialize both bubblers:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Bubbler&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Bubbler&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initDougsBubbler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bubbler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Bubbler&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dougs-bubbler&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="nx"&gt;bubbler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bubble&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;startTime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;7:00AM&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;endTime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;8:00AM&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initMarysBubbler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bubbler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Bubbler&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;marys-bubbler&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="nx"&gt;bubbler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bubble&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;startTime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;7:00AM&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;endTime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;8:00AM&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;initDougsBubbler&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;initMarysBubbler&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It works, but there's something fishy going on here...&lt;/p&gt;

&lt;p&gt;Instead of duplicating the &lt;code&gt;initBubbler&lt;/code&gt; function, you could have "hoisted" the instantiation step outside the function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Bubbler&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Bubbler&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dougsBubbler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Bubbler&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dougs-bubbler&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;marysBubbler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Bubbler&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dougs-bubbler&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initBubbler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bubbler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="nx"&gt;bubbler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bubble&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;startTime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;7:00AM&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;endTime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;8:00AM&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;initBubbler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dougsBubbler&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;initBubbler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;marysBubbler&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, we only need the single &lt;code&gt;initBubbler&lt;/code&gt; function, even if your friends Larry (🐙) and Barry (🐡) decide to buy Bubblers too.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;initBubbler&lt;/code&gt; function is no longer responsible for constructing a &lt;code&gt;bubbler&lt;/code&gt; instance.  Instead, it's &lt;strong&gt;injected&lt;/strong&gt; into the function from the outer scope.  This pattern is called "Dependency Injection" (DI).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#inversion-of-control" class="anchor"&gt;
  &lt;/a&gt;
  Inversion of Control
&lt;/h3&gt;

&lt;p&gt;Further, because the "caller" is now responsible for initializing the Bubbler (instead of the &lt;code&gt;initBubbler&lt;/code&gt; function), we say control has been "inverted".  Dependency Injection is a means by which to achieve "Inversion of Control" (IoC).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ioc-container" class="anchor"&gt;
  &lt;/a&gt;
  IoC Container
&lt;/h3&gt;

&lt;p&gt;The outer scope, responsible for instantiating the &lt;code&gt;bubbler&lt;/code&gt; dependency, is called the "Inversion of Control Container" (IoC Container).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#di-frameworks" class="anchor"&gt;
  &lt;/a&gt;
  DI Frameworks
&lt;/h3&gt;

&lt;p&gt;You can use a "DI Framework" to make things even easier.  Instead of manually initializing the dependencies, a DI Framework acts as the IoC Container and does the work for you.&lt;/p&gt;

&lt;p&gt;You just tell the framework which dependencies your function needs, and once they're initialized, the framework automatically invokes your function.&lt;/p&gt;

&lt;p&gt;Angular and Nest are two popular tools that include DI Frameworks.  Both of these helped in the writing of this article and shaping my own understanding of DI:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Angular:  &lt;a href="https://angular.io/guide/providers"&gt;https://angular.io/guide/providers&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Nest:  &lt;a href="https://docs.nestjs.com/fundamentals/custom-providers"&gt;https://docs.nestjs.com/fundamentals/custom-providers&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#plugins" class="anchor"&gt;
  &lt;/a&gt;
  Plugins
&lt;/h3&gt;

&lt;p&gt;DI Frameworks are great for keeping code organized.  However, I like to go one step further and implement what I call the "Plugin Pattern".&lt;/p&gt;

&lt;p&gt;With the "Plugin Pattern", each feature is encapsulated in a "Plugin" and back-injected into your App.  This centralizes the feature code instead of spreading it around your codebase.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The "Plugin Pattern" makes it easy to mix and match features, build new features, and even open your app for extension by external developers (like Wordpress does).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To learn more about building apps with the "Plugin Pattern", check out my new package "Halia":&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/CodalReef/Halia"&gt;Halia - Extensible TS / JS Dependency Injection Framework&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Halia is a simple, lightweight, and extensible DI Framework.  It's not tied to a particular backend / frontend technology, and you can customize the framework by installing "Plugins".&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We hope your time spent as Doug has helped you see value in the DI Pattern and DI Frameworks.&lt;/p&gt;

&lt;p&gt;If you'd like, you can stop imagining you're a goldfish and resume normal human function.&lt;/p&gt;

&lt;p&gt;All thoughts and comments are greatly appreciated =)&lt;/p&gt;

&lt;p&gt;Cheers,&lt;br&gt;
CR&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Lessons Learned From Singing Opera</title>
      <author>Akira</author>
      <pubDate>Tue, 26 Jan 2021 20:35:41 +0000</pubDate>
      <link>https://dev.to/akiramakes/lessons-learned-from-singing-opera-4gg3</link>
      <guid>https://dev.to/akiramakes/lessons-learned-from-singing-opera-4gg3</guid>
      <description>&lt;p&gt;You learn a lot being a high-performance oriented classical musician. Here are some lessons I learned along the way, especially in how I needed to practice so methodically to have any hope of making progress, which may be helpful to people as they learn to code. &lt;/p&gt;

&lt;p&gt;1) Isolate small, difficult sections&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you are having difficulty in a section of music, you don't go back and practice the entire piece over and over again. you isolate the measure (which is a very tiny segment!) of music you are most struggling with and practice that. You work smaller and smaller even until you can play it without getting it wrong. The same goes for coding. If you're struggling with a leetcode exercise, are you struggling with arrays? Objects? Maybe control flow? Go back and practice some &lt;em&gt;short&lt;/em&gt; exercises focused on that one thing you are struggling with until you absolutely cannot get them wrong. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2) Practice until you can't get it wrong. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Don't practice a section of music until you get it right. Practice it until you can't get it wrong. The same goes for difficult concepts in code. Don't just do an array exercise until you're like "oh, ok I got one right, I guess I understand arrays now." Do array exercises until you literally can do them in your sleep. That's not to say you need to memorize every array method ever, but you should understand in-depth how arrays work. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;3) Simple and good is better than complex and a trainwreck. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When singers audition, there is a lot of temptation to do a big, showy, frilly piece; however, those pieces can be exceptionally difficult and not necessarily showcase the singer in the best light. It's better to do a simple piece in the audition, but executed flawlessly, than a showy piece with lots of mistakes. Same with code, I think, is that its better to have solid, amazing basics and stretch from there in your work (of course, balancing this with pushing yourself forward is important), rather than biting off huge chunks of very complex projects that are way beyond your skillset and will ultimately lead you to get discouraged.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;4) At the end of the day, you're telling a story.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I think this one is the most ethereal tip, but in classical music, as obsessive as it is on technical perfection (and I'm not kidding when I say perfection),  your job is to tell a story through the sound of your voice and your technical chops serve that end. I think the same thing in code is important; keeping in mind that working code is better than perfect and that if you can't serve the end-user with your work, then something is off.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And yes, you can hear me sing; in a live performance of &lt;a href="https://www.youtube.com/watch?v=Oi_o3rdtXXI"&gt;Poulenc's Gloria&lt;/a&gt;:) &lt;/p&gt;

</description>
      <category>programming</category>
      <category>music</category>
      <category>javascript</category>
      <category>fullstack</category>
    </item>
    <item>
      <title>Everything is 'undefined' in JavaScript</title>
      <author>alimemonzx</author>
      <pubDate>Tue, 26 Jan 2021 20:26:26 +0000</pubDate>
      <link>https://dev.to/alimemonzx/everything-is-undefined-in-javascript-4jp</link>
      <guid>https://dev.to/alimemonzx/everything-is-undefined-in-javascript-4jp</guid>
      <description>&lt;p&gt;To understand the title first we have to recap the concept of hoisting in JavaScript. &lt;/p&gt;

&lt;p&gt;You may have heard that hoisting is a concept of JavaScript, in which JavaScript moves all the variable of your code at the top level and start executing. &lt;/p&gt;

&lt;p&gt;There are statements as well like, only the variable declarations are hoisted and initialisations are not. All these explanations are explained conceptually. Things work different in reality. &lt;/p&gt;

&lt;p&gt;How about if we take a deep look how JavaScript work. Then we can have a better understanding of hoisting and the title of this blog. &lt;/p&gt;

&lt;p&gt;Everyone may know that JavaScript has a call stack and all the programs executes in a call stack. JavaScript has a global execution context. So whenever you run a piece of code it is run inside global execution context. &lt;/p&gt;

&lt;p&gt;Now the fun part is global execution context does not start executing code line by line, instead it has two process before it start the execution of code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. The Creation Process&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;2. The Execution Process&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Both process do their job very differently. Let's just discuss the creation process and reveal the secret of this blog. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-creation-process" class="anchor"&gt;
  &lt;/a&gt;
  The Creation Process:
&lt;/h3&gt;

&lt;p&gt;When a program runs, javascript scans the whole program and registers all the variables in the global scope with the special value of &lt;strong&gt;'undefined'&lt;/strong&gt;. Yeah that's true, every variable is undefined in the creation Process. &lt;/p&gt;

&lt;p&gt;In case of functions things work differently. JavaScript registers the function with its actual body. So functions are not undefined, they have their whole body in the creation process.But, if you use arrow functions they will be undefined as well. Let's make it easier with images.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tXHXZQRj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3pshlwmfp9stn6lzh8t6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tXHXZQRj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3pshlwmfp9stn6lzh8t6.png" alt="alimemonzx-everything-is-undefined-in-javascript"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Step 1: Code starts executing in GEC.&lt;/li&gt;
&lt;li&gt;Step 2: The creation process started. It looks for all the variable and functions register them in global scope with the value of &lt;strong&gt;'undefined'&lt;/strong&gt; to variable and assigned whole function body to the function name.&lt;/li&gt;
&lt;li&gt;Step 3: The execution process started and actually assigned the value of &lt;code&gt;a&lt;/code&gt;. The value of &lt;code&gt;a&lt;/code&gt; is now replaced from &lt;code&gt;undefined&lt;/code&gt; to a string &lt;code&gt;Every variable is undefined&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now let's dive actually into the code. I have used the same code and tried to run it on my browser with a debug point at line no 1.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yf_7rW_u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/b9sh2qfz3hcba7aclday.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yf_7rW_u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/b9sh2qfz3hcba7aclday.png" alt="alimemonzx-everything-is-undefined-in-javascript"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Inside the highlighted red part you can see that &lt;code&gt;var a&lt;/code&gt; is undefined. At this point creation process is already finished and JavaScript has already added the variable &lt;code&gt;a&lt;/code&gt; in global scope with a default value of &lt;code&gt;undefined&lt;/code&gt;.&lt;code&gt;aFunction&lt;/code&gt; is also added in global context with its whole body.&lt;/p&gt;

&lt;p&gt;So this is how JavaScript works. Before executing, it kind of scans the whole program and register all the variables and functions in their respective scopes. The creation process is also known as hoisting in JavaScript.&lt;/p&gt;

&lt;p&gt;You can also try and debug the code in your browser, try with ES6 arrow functions and check if it is undefined or not. The information is taken from so many videos and articles and shared it here. Share your ideas in comments below. &lt;/p&gt;

&lt;p&gt;HAPPY CODING &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>functional</category>
    </item>
    <item>
      <title>24 Awesome Open-Source Rust Projects</title>
      <author>Serokell</author>
      <pubDate>Tue, 26 Jan 2021 20:18:40 +0000</pubDate>
      <link>https://dev.to/serokell/24-awesome-open-source-rust-projects-5cn4</link>
      <guid>https://dev.to/serokell/24-awesome-open-source-rust-projects-5cn4</guid>
      <description>&lt;p&gt;Rust has a very lively and fast-paced open source ecosystem, with a ton of contributors working on a ton of awesome projects. &lt;/p&gt;

&lt;p&gt;And if you are asking – what can I build in Rust? The answer is almost everything. &lt;/p&gt;

&lt;p&gt;This article will feature some of the open-source Rust libraries, frameworks, and repositories that could be useful to study or use for your own project. &lt;/p&gt;

&lt;p&gt;For your convenience, I’ve split them into fields such as web development, game development, blockchain, and others. Let’s dig in!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#web-development-frameworks-for-rust" class="anchor"&gt;
  &lt;/a&gt;
  Web development frameworks for Rust
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J96RhRkW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://serokell.io/files/t4/t4mp0qkr.1_%2845%29_%281%29.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J96RhRkW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://serokell.io/files/t4/t4mp0qkr.1_%2845%29_%281%29.jpg" alt="Rust web development"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Can you build a web app with Rust? Definitely! &lt;/p&gt;

&lt;p&gt;Rust has multiple extremely fast web frameworks – Actix, Rocket, and Yew – and you can use the one that matches your needs and preferences. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rocket" class="anchor"&gt;
  &lt;/a&gt;
  Rocket
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/SergioBenitez/Rocket"&gt;Rocket&lt;/a&gt; is the most accessible web framework in the Rust ecosystem for beginners. It is highly customizable and helps you kickstart a new application quickly. At the same time, it avoids a lot of unnecessary boilerplate. Rocket also has many features included, which means that you won’t need to go far from the framework to build everything you need. &lt;/p&gt;

&lt;p&gt;In contrast to Actix Web, the framework runs on nightly Rust – the “experimental” version of the language. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#actix-web" class="anchor"&gt;
  &lt;/a&gt;
  Actix Web
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/actix/actix-web"&gt;Actix Web&lt;/a&gt; is usually thought to be more performant and stable than Rocket. Underneath, it works with the actor model used in &lt;a href="https://serokell.io/blog/introduction-to-erlang#process-oriented"&gt;Erlang&lt;/a&gt; and &lt;a href="https://doc.akka.io/docs/akka/current/typed/actors.html"&gt;Akka&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;In contrast to Rocket, it’s less “batteries included”, meaning that you will most likely need to use third-party libraries for extra functionality.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#yew" class="anchor"&gt;
  &lt;/a&gt;
  Yew
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/yewstack/yew"&gt;Yew&lt;/a&gt; is a Rust framework for creating web apps with WebAssembly. Among its main benefits, it lists a component-based framework like in React and Elm, outstanding performance because of the multi-thread support, and JavaScript interoperability. &lt;/p&gt;

&lt;p&gt;As of now, it is not production-ready but should be an excellent choice for side projects and internal tooling, especially if you want to work with WASM. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#zola" class="anchor"&gt;
  &lt;/a&gt;
  Zola
&lt;/h3&gt;

&lt;p&gt;If you need something quick and simple to serve a static website, &lt;a href="https://github.com/getzola/zola"&gt;Zola&lt;/a&gt; is a fantastic tool to create fast and scalable web pages without any other dependencies or JS bloat. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#warp" class="anchor"&gt;
  &lt;/a&gt;
  Warp
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/seanmonstar/warp"&gt;Warp&lt;/a&gt; is a web server framework written in Rust. In comparison to Rocket and Actix, it is rather slim for a web framework and will provide you only with basic functionality out of the box. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#game-development" class="anchor"&gt;
  &lt;/a&gt;
  Game development
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M9Jx8eMC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://serokell.io/files/cu/cubf89sc.2_%2836%29_%281%29.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M9Jx8eMC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://serokell.io/files/cu/cubf89sc.2_%2836%29_%281%29.jpg" alt="Rust game development"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Rust is exceptional for game development for the same reason that C++ is: it is predictably performant. Here are some of the engines you can use to build your own Rust game.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bevy" class="anchor"&gt;
  &lt;/a&gt;
  Bevy
&lt;/h3&gt;

&lt;p&gt;Two of the main Rust game engines are Bevy and Amethyst. Among them, &lt;a href="https://github.com/bevyengine/bevy"&gt;Bevy&lt;/a&gt; is the newer and cooler one. It is a simple, data-driven engine and can essentially be called Amethyst 2.0 since it is heavily inspired by it. &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Qjc0V58lB7A"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;For more info on Bevy, you can check out the &lt;a href="https://bevyengine.org/learn/book/introduction/"&gt;Bevy book&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#amethyst" class="anchor"&gt;
  &lt;/a&gt;
  Amethyst
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/amethyst/amethyst"&gt;Amethyst&lt;/a&gt; is the more mature one of the two and, because of that, has more features that you might need for a large-scale project and better integrations with 3rd party libraries. But, Bevy is catching up fast. If you are searching for an engine for your new project, I’d recommend looking at them both and seeing which one you like better. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ggez" class="anchor"&gt;
  &lt;/a&gt;
  ggez
&lt;/h3&gt;

&lt;p&gt;If you are searching for something simple to start off, &lt;a href="https://github.com/ggez/ggez"&gt;ggez&lt;/a&gt; is a lightweight cross-platform game framework for making 2D games with minimal friction. &lt;/p&gt;




&lt;p&gt;If you want to read more on game development in Rust, check out &lt;a href="https://arewegameyet.rs/"&gt;Are we game yet?&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#operating-systems" class="anchor"&gt;
  &lt;/a&gt;
  Operating systems
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pi0df9VA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://serokell.io/files/zd/zdu35vif.3_%2834%29_%281%29.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pi0df9VA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://serokell.io/files/zd/zdu35vif.3_%2834%29_%281%29.jpg" alt="Rust operating systems"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Rust is an excellent alternative to C in operating system development since it offers the same level of performance while taking care of memory safety. Actually, developers &lt;a href="https://hackaday.com/2020/07/15/will-2020-be-the-year-of-rust-in-the-linux-kernel/"&gt;are investigating&lt;/a&gt; the possibility of adding Rust to the Linux kernel, and Microsoft &lt;a href="https://serokell.io/blog/rust-companies#microsoft"&gt;is experimenting with it&lt;/a&gt; as well. &lt;/p&gt;

&lt;p&gt;Here are some open-source operating systems that are written purely in Rust:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#redox" class="anchor"&gt;
  &lt;/a&gt;
  Redox
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.redox-os.org/"&gt;Redox&lt;/a&gt; is an operating system written in Rust that uses Rust’s innovations to build a modern microkernel.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#intermezzos" class="anchor"&gt;
  &lt;/a&gt;
  intermezzOS
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://intermezzos.github.io/"&gt;intermezzOS&lt;/a&gt; is a teaching operating system, specifically focused on introducing systems programming concepts to experienced developers from other programming areas.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#theseus" class="anchor"&gt;
  &lt;/a&gt;
  Theseus
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/theseus-os/Theseus"&gt;Theseus&lt;/a&gt; is a new OS written in Rust that presents a novel OS structure and claims to avoid the phenomenon of state spill, a thing that occurs when one entity’s state is permanently changed through interactions with another.&lt;/p&gt;

&lt;p&gt;There’s quite a lot to read about – here’s a &lt;a href="http://kevinaboos.web.rice.edu/docs/theseus_boos_osdi2020.pdf"&gt;paper&lt;/a&gt; on the project. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#gui-development" class="anchor"&gt;
  &lt;/a&gt;
  GUI development
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--12z_Sd7O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://serokell.io/files/2l/2lrxdv4z.4_%2827%29_%281%29.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--12z_Sd7O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://serokell.io/files/2l/2lrxdv4z.4_%2827%29_%281%29.jpg" alt="Rust GUI development"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While Rust isn't well known for its capability for building captivating user interfaces, there's still a lot of good libraries to build GUIs with. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#druid" class="anchor"&gt;
  &lt;/a&gt;
  Druid
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/linebender/druid"&gt;Druid&lt;/a&gt; is an experimental Rust-native UI toolkit with a focus on building simple, polished user experiences. It is data-oriented and inspired by modern frameworks such as Flutter, SwiftUI, and others.&lt;/p&gt;

&lt;p&gt;To learn more about it, you can check out the &lt;a href="https://linebender.org/druid/"&gt;Druid book&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#iced" class="anchor"&gt;
  &lt;/a&gt;
  Iced
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/hecrj/iced"&gt;Iced&lt;/a&gt; is a cross-platform GUI library with a focus on simplicity and type safety. It’s heavily inspired by Elm. While it is still experimental right now, it is an excellent option for creating GUIs right in Rust for your side project. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-orbital-widget-toolkit" class="anchor"&gt;
  &lt;/a&gt;
  The Orbital Widget Toolkit
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/redox-os/orbtk"&gt;The Orbital Widget Toolkit&lt;/a&gt; is a cross-platform toolkit for building scalable user interfaces with Rust. It’s focused on speed, ease of use, and cross-platform compatibility.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tauri" class="anchor"&gt;
  &lt;/a&gt;
  Tauri
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/tauri-apps/tauri"&gt;Tauri&lt;/a&gt; is a framework for building desktop applications for Windows, Linux, and macOS. With it, you can use any front-end framework that compiles to HTML/CSS/JS for building UIs, and Rust as the backend. &lt;/p&gt;




&lt;p&gt;If you want to learn more about GUI development possibilities in Rust, &lt;a href="https://dev.to/davidedelpapa/rust-gui-introduction-a-k-a-the-state-of-rust-gui-libraries-as-of-january-2021-40gl"&gt;here's a big post&lt;/a&gt; that covers most of the libraries. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#blockchain" class="anchor"&gt;
  &lt;/a&gt;
  Blockchain
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ztahIIE4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://serokell.io/files/tg/tguo1lj1.5_%2823%29_%281%29.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ztahIIE4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://serokell.io/files/tg/tguo1lj1.5_%2823%29_%281%29.jpg" alt="Rust blockchain"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#openethereum" class="anchor"&gt;
  &lt;/a&gt;
  OpenEthereum
&lt;/h3&gt;

&lt;p&gt;The main goal of &lt;a href="https://github.com/openethereum/openethereum"&gt;OpenEthereum&lt;/a&gt; is to be the fastest, lightest, and most secure Ethereum client. It is developed with Rust and claims to provide core infrastructure that is essential for speedy and reliable services. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lighthouse" class="anchor"&gt;
  &lt;/a&gt;
  Lighthouse
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/sigp/lighthouse"&gt;Lighthouse&lt;/a&gt; is an open-source Ethereum 2.0 client, written in Rust and maintained by Sigma Prime. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#parity-technologies-polkadot-and-substrate" class="anchor"&gt;
  &lt;/a&gt;
  Parity Technologies: Polkadot and Substrate
&lt;/h3&gt;

&lt;p&gt;Parity Technologies works on building blockchain infrastructure for the decentralized web. &lt;/p&gt;

&lt;p&gt;Among its projects are &lt;a href="https://github.com/paritytech/substrate"&gt;Substrate&lt;/a&gt;, a modular framework for blockchain development, and &lt;a href="https://github.com/paritytech/polkadot"&gt;Polkadot&lt;/a&gt;, a network of blockchains. Both of these projects heavily use Rust in their implementations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-projects" class="anchor"&gt;
  &lt;/a&gt;
  Other projects
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tQ7N16mU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://serokell.io/files/hm/hmv5pjmr.6_%2811%29_%281%29.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tQ7N16mU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://serokell.io/files/hm/hmv5pjmr.6_%2811%29_%281%29.jpg" alt="Other Rust projects"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here are some of the projects that don’t fit into any given category. Hope you can find something awesome in this collection of “things”. :) &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#servo" class="anchor"&gt;
  &lt;/a&gt;
  Servo
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/servo/servo"&gt;Servo&lt;/a&gt; is a web engine prototype written in Rust. It’s the result of Mozilla’s work on creating a new, open-source browser engine. In 2020, Servo moved on from Mozilla to being hosted by the Linux Foundation. &lt;/p&gt;

&lt;p&gt;Servo is supposed to be safer than the browsers written in C++ due to Rust’s memory safety guarantees that reduce the number of vulnerabilities. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#swc" class="anchor"&gt;
  &lt;/a&gt;
  swc
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/swc-project/swc"&gt;swc&lt;/a&gt; is a superfast JavaScript/TypeScript compiler. In comparison to Babel, it has been benchmarked to increase the compilation speed at least 18 times. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ruffle" class="anchor"&gt;
  &lt;/a&gt;
  Ruffle
&lt;/h3&gt;

&lt;p&gt;Want to run all the cool Flash games that Adobe has recently disabled support for? You can use &lt;a href="https://github.com/ruffle-rs/ruffle"&gt;Ruffle&lt;/a&gt;, a Flash player emulator written in Rust. &lt;/p&gt;

&lt;p&gt;You can try it out on &lt;a href="https://ruffle.rs/demo/"&gt;ruffle.rs&lt;/a&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lunatic" class="anchor"&gt;
  &lt;/a&gt;
  Lunatic
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/lunatic-lang/lunatic"&gt;Lunatic&lt;/a&gt; is an experimental platform that uses WASM instances as actors to structure execution. It is heavily inspired by &lt;a href="https://serokell.io/blog/introduction-to-erlang"&gt;Erlang&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;It is supposed to unite the good sides of WASM and Erlang, enabling you to build actor-based systems that are both fault-tolerant and blazingly fast. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#starship" class="anchor"&gt;
  &lt;/a&gt;
  Starship
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/starship/starship"&gt;Starship&lt;/a&gt; is a fast, customizable, and intelligent prompt for those that want to make their shell cooler. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#meilisearch" class="anchor"&gt;
  &lt;/a&gt;
  MeiliSearch
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/meilisearch/MeiliSearch"&gt;MeiliSearch&lt;/a&gt; is a powerful, fast, easy to use, and customizable search engine that’s also typo-tolerant. Now that’s a lot of adjectives! You can set it up for your own project instead of a custom and probably worse-performing solution. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#have-anything-to-add" class="anchor"&gt;
  &lt;/a&gt;
  Have anything to add?
&lt;/h2&gt;

&lt;p&gt;As you can see, the ecosystem is vast, and there is a lot to explore. I certainly wasn’t able to cover everything. If you know of a project that deserves to be here, don’t be afraid to let us know! &lt;/p&gt;

&lt;p&gt;If you want to learn more about Rust, I suggest going to our blog’s &lt;a href="https://serokell.io/blog/rust"&gt;Rust section&lt;/a&gt;. Have fun!&lt;/p&gt;

</description>
      <category>rust</category>
      <category>opensource</category>
      <category>webdev</category>
      <category>gamedev</category>
    </item>
    <item>
      <title>Light theme.. Swoosh! Dark Theme</title>
      <author>Temitope Ayodele</author>
      <pubDate>Tue, 26 Jan 2021 19:31:48 +0000</pubDate>
      <link>https://dev.to/temmietope/light-theme-swoosh-dark-theme-54pn</link>
      <guid>https://dev.to/temmietope/light-theme-swoosh-dark-theme-54pn</guid>
      <description>&lt;p&gt;&lt;em&gt;Originally written on &lt;a href="https://temmie.me/blog/light-theme-swoosh-dark-theme"&gt;my blog&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Many people prefer to read on a dark screen, while others prefer the light mode. Giving users the ability to switch between these two modes is a great user experience feature. It is pretty easy to implement this in your code, and in this article, I will work you through how to do this in React using &lt;code&gt;styled-components&lt;/code&gt;. I used this method to implement this on my &lt;a href="//temmie.me"&gt;portfolio website&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To begin install &lt;code&gt;styled-components&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install styled-components
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can check out &lt;a href="https://styled-components.com/"&gt;documentation of styled-components&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will now create some components&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-theme-component" class="anchor"&gt;
  &lt;/a&gt;
  1. Theme Component
&lt;/h3&gt;

&lt;p&gt;This component will contain your preferred colors for dark mode and light mode.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// theme.js&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lightTheme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#fffffe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;header&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#094067&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#5f6c7b&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;button&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#3da9fc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;darkTheme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#094067&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;header&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#fffffe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#d8eefe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;button&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#3da9fc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-wrapping-the-app-with-themeprovider" class="anchor"&gt;
  &lt;/a&gt;
  2. Wrapping the app with ThemeProvider
&lt;/h3&gt;

&lt;p&gt;To make this theme available to all pages, the component(in our case, App.js) is wrapped in the &lt;code&gt;ThemeProvider&lt;/code&gt;. This way, all styled-components within the ThemeProvider has access to the provided theme, no matter how deep.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ThemeProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;lightTheme&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;darkTheme&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./theme&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;///STYLED-COMPONENTS&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;H1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;P&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./styles&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ThemeProvider&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;lightTheme&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Layout&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;H1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;My&lt;/span&gt; &lt;span class="nx"&gt;Awesome&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/H1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;P&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;Lorem&lt;/span&gt; &lt;span class="nx"&gt;ipsum&lt;/span&gt; &lt;span class="nx"&gt;dolor&lt;/span&gt; &lt;span class="nx"&gt;sit&lt;/span&gt; &lt;span class="nx"&gt;amet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;consectetur&lt;/span&gt; &lt;span class="nx"&gt;adipiscing&lt;/span&gt; &lt;span class="nx"&gt;elit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;Fusce&lt;/span&gt; &lt;span class="nx"&gt;vel&lt;/span&gt;&lt;span class="p"&gt;....&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/P&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Toggle&lt;/span&gt; &lt;span class="nx"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Layout&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ThemeProvider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the above snippet, we wrapped the component with the ThemeProvider and passed the lightTheme to the theme prop.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-create-global-stylesheet" class="anchor"&gt;
  &lt;/a&gt;
  3. Create Global Stylesheet
&lt;/h3&gt;

&lt;p&gt;With styled components, you can specify global styles that spans across your application. You do this by importing &lt;code&gt;createGlobalStyle&lt;/code&gt; from styled-components. Now that our app is wrapped withing the &lt;code&gt;ThemeProvider&lt;/code&gt;, every component within it now has access to the theme.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// GlobalStyles.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createGlobalStyle&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;GlobalStyles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createGlobalStyle&lt;/span&gt;&lt;span class="s2"&gt;`
  body {
    background: &lt;/span&gt;&lt;span class="p"&gt;${({&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;;
    color: &lt;/span&gt;&lt;span class="p"&gt;${({&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;;
    font-family: Roboto, sans-serif;
    transition: all 0.4s linear;
  }
  `&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-accessing-the-theme-prop-for-styledcomponents" class="anchor"&gt;
  &lt;/a&gt;
  4. Accessing the theme prop for styled-components
&lt;/h3&gt;

&lt;p&gt;We can also go ahead to defined colors on our styled-components using the theme props&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// styles.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
  width: 100%;
  height: 100vh;
  text-align: center;
  padding: 2%;
  box-sizing: border-box;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;H1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="s2"&gt;`
  font-size: 2rem;
  color: &lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;header&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;P&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="s2"&gt;`
  font-size: 1.2rem;
  color: &lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="s2"&gt;`
  border: none;
  padding: 0.7rem 1rem;
  background: &lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;;
  border-radius: 5px;
  font-weight: 700;
  font-size: 1rem;
  color: &lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#toggle-between-light-mode-and-darkmode" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;TOGGLE BETWEEN LIGHT MODE AND DARKMODE&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;To toggle between the two modes, we can use a custom hook, called the &lt;strong&gt;useDarkMode.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// useDarkMode.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useDarkMode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTheme&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;componentMounted&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setComponentMounted&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;setMode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;theme&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setTheme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toggleTheme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;localTheme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;theme&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;localTheme&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setTheme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;localTheme&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;setComponentMounted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;toggleTheme&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;componentMounted&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;setMode&lt;/code&gt; saves the user's preferred theme in localStorage. This ensures that when the user selects a theme, the preferred choice persists even after the user leaves the app. &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;toggleTheme&lt;/code&gt; function toggles between light theme and dark theme&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;useEffect&lt;/code&gt; lifecycle hook checks on component mounting if there is a previuosly stored theme in the localStorage, if yes, the theme is set to that value. If there isn't the theme is set to light (or dark if you please)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Next we import this custom hook to the App.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;H1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;P&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./styles&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ThemeProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;lightTheme&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;darkTheme&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./theme&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;GlobalStyles&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./GlobalStyles&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useDarkMode&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./useDarkMode&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;//New&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;toggleTheme&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;componentMounted&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useDarkMode&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;componentMounted&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// eslint-disable-next-line&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;span class="c1"&gt;//..New&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ThemeProvider&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;lightTheme&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;darkTheme&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;GlobalStyles&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Layout&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;H1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;My&lt;/span&gt; &lt;span class="nx"&gt;Awesome&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/H1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;P&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;Lorem&lt;/span&gt; &lt;span class="nx"&gt;ipsum&lt;/span&gt; &lt;span class="nx"&gt;dolor&lt;/span&gt; &lt;span class="nx"&gt;sit&lt;/span&gt; &lt;span class="nx"&gt;amet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;consectetur&lt;/span&gt; &lt;span class="nx"&gt;adipiscing&lt;/span&gt; &lt;span class="nx"&gt;elit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;Fusce&lt;/span&gt; &lt;span class="nx"&gt;vel&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/P&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;toggleTheme&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Toggle&lt;/span&gt; &lt;span class="nx"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Layout&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ThemeProvider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the above snippet, we imported the useDarkMode custom hook which returns the theme, the toggle functionallity and the componentMounted.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First, we confirm that the component has mounted using the useEffect lifecycle hook. If it hasn't, we render an empty div. &lt;/li&gt;
&lt;li&gt;We add the toggleTheme functionality to the button, which toggles the theme onClick(light and dark mode), &lt;/li&gt;
&lt;li&gt;then in the ThemeProvider, we dynamically render lightTheme or darkTheme based on the theme returned by the useDarkMode hook.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That is all! We can now easily toggle between the light mode and the darkmode. Below is the codesandbox for the full code.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/broken-lake-fht2j"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>react</category>
      <category>beginners</category>
      <category>css</category>
    </item>
    <item>
      <title>How to Start Contributing to Open Source</title>
      <author>mydeveloperplanet</author>
      <pubDate>Tue, 26 Jan 2021 19:25:07 +0000</pubDate>
      <link>https://dev.to/mydeveloperplanet/how-to-start-contributing-to-open-source-2o79</link>
      <guid>https://dev.to/mydeveloperplanet/how-to-start-contributing-to-open-source-2o79</guid>
      <description>&lt;p&gt;Every now and then, the idea of contributing to Open Source Software crosses the mind of every developer. However, often, it just remains to think about it instead of actually doing something. In this blog, I want to tell the story of my first Pull Request.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-i-do-not-have-the-time-for-it" class="anchor"&gt;
  &lt;/a&gt;
  1. I Do Not Have the Time For It
&lt;/h2&gt;

&lt;p&gt;Do you also find good excuses for not contributing to Open Source Software (OSS)? I do. I do not have the time for it. I have a full time job, many leisure activities, I maintain my blog which takes up a significant part of my spare time. Where do I have to find the time to contribute to an OSS project? Besides that, there are many others who do so, so who is waiting for my contribution? And so on and so on. Humans are very good at finding excuses when it suits them. But is my time more valuable than the time of others? And maybe by restructuring some activities it will become possible to find some extra time? I do not have the time is all about priorities and good time management, right? And I am quite good at time management, looking at all the activities I am doing. So, why would it not be possible to contribute to OSS? Goodbye excuse…&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-where-to-get-started" class="anchor"&gt;
  &lt;/a&gt;
  2. Where to Get Started?
&lt;/h2&gt;

&lt;p&gt;About a year ago, I got this idea of actually going to contribute to an OSS project. I searched the internet for articles how to get started and which Open Source project to choose. I can tell you: the list is huge. I am a Spring fan, so I decided to take a look at the issues of some of the Spring projects. And more specifically, the issues labeled as suited for first contribution. But, most of them were too vague for me or they sounded complicated to me. Sometimes, the issue seemed right for me, but then it was already picked up by someone else. I guess you need to be fast in order to contribute to Spring. I think because many want to contribute to Spring because it is widely popular. However, I laid the idea of contributing again to rest.&lt;/p&gt;

&lt;p&gt;In the Summer, I always take a break from writing blogs. This seemed to be the right time to search for an OSS project to contribute to. However, something came in between and then it was already time for preparing the first blogs for September. Again, I postponed a possible first contribution.&lt;/p&gt;

&lt;p&gt;I kept the idea warm, though. In September I saw this talk How I Started Contributing to Open Source and &lt;strong&gt;Why You Should Too&lt;/strong&gt; from Marit van Dijk from the &lt;strong&gt;JetBrains Technology Day for Java&lt;/strong&gt;. It did inspire me to maintain my efforts for starting to contribute. I can recommend watching this talk.&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/GAqfMNB-YBU"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Recently, I saw a Twitter post of Eclipse Collections announcing a Learning Series in December due to the 5th anniversary of being part of Eclipse Foundation. The first Tweet in this series referred to a blog Donald Raab wrote in 2018.&lt;br&gt;
&lt;/p&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--pgqZJbfE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/900560918244765696/JZGADETm_normal.jpg" alt="Eclipse Collections profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Eclipse Collections
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @eclipsecollect
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P4t6ys1m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Today we are starting our Eclipse Collections Learning Series to celebrate 5 years &lt;a href="https://twitter.com/EclipseFdn"&gt;@EclipseFdn&lt;/a&gt;. Day 1: Help Wanted! How the the community can contribute &lt;a href="https://t.co/FbxLYdFC7B"&gt;donraab.medium.com/help-wanted-b1…&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      13:00 PM - 01 Dec 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1333757749914529792" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WwRENZp4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1333757749914529792" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PFD0MJBa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1333757749914529792" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6wx1BHu3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;
&lt;br&gt;
I read the blog and it gives you the handles to get started contributing to Eclipse Collections. What attracted me the most, was the availability of katas in order to get acquainted with Eclipse Collections. A &lt;a href="https://en.wikipedia.org/wiki/Kata"&gt;kata&lt;/a&gt; is a Japanese word which is used for practising martial arts. It is also being used for practising your software development skills. Victor Rentea often publishes coding katas and they are impressive to look at. But the whole idea is that you execute the katas yourselves of course. Next, I took a closer look at the GitHub repository and there were enough open issues which I thought I might contribute to. But the first step was to start with the katas when I had the time for it (where did I hear that before).
&lt;h2&gt;
  &lt;a href="#3-time-for-action" class="anchor"&gt;
  &lt;/a&gt;
  3. Time for Action
&lt;/h2&gt;

&lt;p&gt;I also take a Winter break for my blog. So, now it was time to take some action! First thing to do, was to start with the Eclipse Collections kata. I started cloning the &lt;a href="http://eclipse.github.io/eclipse-collections-kata/#/"&gt;repository&lt;/a&gt; and followed the instructions. I started with the Pet Kata, which gives you a nice introduction to Eclipse Collections. You need to fix failing unit tests, so I first ran the tests in order to verify that they did fail initially. Next, I studied the domain model which was a fairly easy one to understand. I finished the first three exercises, verifying my solution with the one provided in the repo. It does not necessarily mean that making the test green, that you have solved it as intended. However, probably more than one solution will be ok as long as you make use of Eclipse Collections. The whole idea is to get more acquainted with the library after all.&lt;/p&gt;

&lt;p&gt;I solved exercise 4 and noticed some minor inconsistencies between the exercise, the provided solutions and the documentation. Nothing really serious and I gues everyone will notice and understand what is wrong, but why not solve it now I noticed it?&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#4-my-first-pull-request" class="anchor"&gt;
  &lt;/a&gt;
  4. My First Pull Request
&lt;/h2&gt;

&lt;p&gt;I got started and tried to make my first Pull Request and we will see what will happen next.&lt;/p&gt;

&lt;p&gt;I navigated to the &lt;a href="https://github.com/eclipse/eclipse-collections-kata"&gt;repo&lt;/a&gt; and clicked the &lt;strong&gt;Fork&lt;/strong&gt; button in the upper right corner.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KX2LSSSX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tnm7ae709heb9341tldy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KX2LSSSX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tnm7ae709heb9341tldy.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
The forked repository was available in my GitHub space. You will of course need a GitHub account before you can do so.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FmzVhYU---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kiwz49p12mtxvbvjeqtb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FmzVhYU---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kiwz49p12mtxvbvjeqtb.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Next, I cloned the repository into my favorite IDE.&lt;/p&gt;

&lt;p&gt;First, I created a branch (in my enthusiasm, forgot to do so in the first place). I made the necessary changes and committed them into the repository. When finished, I pushed the changes. In my GitHub page a notification was shown for creating a Pull Request.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZdpORNJu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/98t05rifawpu5i9p8nqm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZdpORNJu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/98t05rifawpu5i9p8nqm.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
I clicked the &lt;strong&gt;Compare &amp;amp; pull request&lt;/strong&gt; button. You will notice that the Pull Request is going from your forked repository to the main repository of the Eclipse Collections Kata repo.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tZDWlOmv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fb3xcxrdvsau15z60ium.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tZDWlOmv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fb3xcxrdvsau15z60ium.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
After adding information about the Pull Request, some checks were executed, one of them failed. I must admit that I did not read any instructions how to contribute.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0-H9QA8Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/thifwj9irci0o2apsuzy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0-H9QA8Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/thifwj9irci0o2apsuzy.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
The details button referred to a login page of Eclipse Foundations. So, first I created an account. It seems that you must accept the &lt;strong&gt;Eclipse Contributor Agreement&lt;/strong&gt;, which I did. Ensure that you create an account with the mail address you use for your commits. Otherwise, the check will still fail. However, after doing so, the check still failed due to the fact that we did not have a &lt;strong&gt;Signed-off-by&lt;/strong&gt; footer in our commits. Sigh. I had multiple commits (keep the commits small, you know). Thus, I needed to alter the commit messages by rebasing them. First, I removed the Pull Request and deleted the remote branch. I thought it would be better to start from scratch for this one.&lt;/p&gt;

&lt;p&gt;I had three commit messages, so I started the interactive rebase in the local branch. Documentation how to do so is also &lt;a href="https://docs.github.com/en/free-pro-team@latest/github/using-git/using-git-rebase-on-the-command-line#:~:text=When%20you're%20finished%20making,run%20git%20rebase%20%2D%2Dcontinue%20.&amp;amp;text=As%20before%2C%20Git%20is%20showing,return%20you%20to%20the%20terminal."&gt;here&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git rebase -i HEAD~3
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;An editor is opened where I changed the &lt;strong&gt;pick&lt;/strong&gt; words at the beginning of the commits into &lt;strong&gt;edit&lt;/strong&gt;. I saved and exited the editor. The command prompt was shown again and I entered:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git commit --amend
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The commit message was shown in a text editor. Now I was able to add the &lt;strong&gt;Signed-off-by footer&lt;/strong&gt; to the commit message:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Signed-off-by: Your real name &amp;lt;youreclipsefoundationsaccountmailadress&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Saved, exited and entered:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git rebase --continue
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next, I entered the amend command again, edited the next message and so on. At the end, I entered the &lt;code&gt;continue rebase&lt;/code&gt; command in order to finish the rebase. I verified whether the commit messages had been altered correctly and pushed the branch. I created the Pull Request again and now all checks had been passed.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DVJRZqke--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bxw90wvqvqaokmuxuwks.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DVJRZqke--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bxw90wvqvqaokmuxuwks.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Now it was waiting for the review… I assumed that I had to wait for a week or so in order to receive a response, especially because many of us were enjoying some holiday (it was Christmas time). To my positive surprise, I received feedback the same day. I was enthusiastic about it and started the rework the next day. I agreed upon the feedback and made the changes, committed them and pushed them. Now waiting again… The same day, my first Pull Request was accepted!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#5-the-next-step" class="anchor"&gt;
  &lt;/a&gt;
  5. The Next Step
&lt;/h2&gt;

&lt;p&gt;In order to be prepared for making more changes, it is important to update your local repository. Therefore, it was necessary to add the original repository as a remote. I called it &lt;code&gt;upstream&lt;/code&gt; in order to be able to distinguish it with the forked repository in my own GitHub Space.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git add remote upstream https://github.com/eclipse/eclipse-collections-kata.git
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next, I needed to fetch the changes, switch to the branch I wanted to update (the &lt;code&gt;master&lt;/code&gt; branch) and rebased the changes from the &lt;code&gt;upstream&lt;/code&gt; remote. Also, when you have already changes in your local branch, the upstream changes will be applied to your local branch and your local commits will be replayed on top of that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git rebase upstream/master
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The changes in the forked repository in my GitHub Space were only visible after pushing these changes to the &lt;code&gt;origin&lt;/code&gt; remote. Remind that when you have rebased upstream changes in your local repository, you will need to force push your changes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git push -f
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Commit often is a practice I tend to use. It keeps the changes small and it is easier to revert a commit when necessary. The disadvantage is that you get a lengthy commit history. In order to solve this, you can squash commit your changes into e.g. 1 commit. You can also use the &lt;code&gt;rebase&lt;/code&gt; command for that. The easiest way is to rebase with the hash of the commit before your first commit.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git rebase -i &amp;lt;hash of commit before your first commit&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;A text editor will open and you leave your first commit with the &lt;strong&gt;pick&lt;/strong&gt; word and for the other commits you change &lt;strong&gt;pick&lt;/strong&gt; into &lt;strong&gt;squash&lt;/strong&gt;. After saving the text file, a new text file is opened where you can edit the commit message for the squash commit. Exit and save the text file and you are done. Do not forget to force push your changes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-conclusion" class="anchor"&gt;
  &lt;/a&gt;
  6. Conclusion
&lt;/h2&gt;

&lt;p&gt;I am very glad that I persisted in my goal to contribute to an OSS project. You might think you need to climb a mountain in order to do so, but it was easier than I thought.&lt;/p&gt;

&lt;p&gt;Some final thoughts about contributing to an OSS project:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Finding the right OSS project to contribute to was for me the greatest challenge;&lt;/li&gt;
&lt;li&gt;Once you have made a first contribution, the next one will be easier;&lt;/li&gt;
&lt;li&gt;Contributing is an opportunity to give something back. After all, we all are using OSS libraries and take advantage of the efforts of others;&lt;/li&gt;
&lt;li&gt;A contribution can be simple, but it feels very rewarding when a Pull Request has been accepted;&lt;/li&gt;
&lt;li&gt;Write a blog about it, tweet about it, spread the word, help is wanted and requested;&lt;/li&gt;
&lt;li&gt;Contributing to Eclipse Collections will give me a better understanding of Java Collections in general. It is a give and take.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And many thanks to Marit van Dijk and Donald Raab for inspiring me.&lt;/p&gt;

</description>
      <category>java</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Learning JavaScript is HARD!</title>
      <author>Ashley RNDLL</author>
      <pubDate>Tue, 26 Jan 2021 18:59:37 +0000</pubDate>
      <link>https://dev.to/xoshly/learning-javascript-is-hard-1b9f</link>
      <guid>https://dev.to/xoshly/learning-javascript-is-hard-1b9f</guid>
      <description>&lt;p&gt;When I first started to teach myself JavaScript, it was truly a breaking point for me. I cried, I whined and gave up a thousand times. Only to pick it back up every time. &lt;/p&gt;

&lt;p&gt;I used/ currently reviewing the entire course of JavaScript on FreeCodeCamp and I think that it is one of the toughest self-learning course out there. The challenges are just that... challenging and very intimidating. I stopped following FCC's course because I thought that it was too hard so I switched to other platforms (CodeCademy, W3 Schools, YouTube, etc.) to find something that was... easier. &lt;/p&gt;

&lt;p&gt;But by switching from one platform to another only confused the crap out of me. And I found myself going back to FCC over and over again until I finally finished the certification. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here is where I (bleeped) up.&lt;/strong&gt; Whenever I found myself in a pickle on the challenges, I would just get the answer from the forum and apply it to the problem and move on to the next. &lt;em&gt;I didn't learn a damn thing LOL.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#so-here-are-my-tips-on-learning-javascript" class="anchor"&gt;
  &lt;/a&gt;
  So here are my tips on learning JavaScript:
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1) Take your time.&lt;/strong&gt; Don't rush the learning process.&lt;br&gt;
&lt;strong&gt;2) Always jot down notes.&lt;/strong&gt; Don't you ever in your precious life copy and paste your notes. Trust me. &lt;br&gt;
&lt;strong&gt;3) Always check what you are doing by testing everything out.&lt;/strong&gt; Utilize console.log() to make sure that you are always on the right track.&lt;br&gt;
&lt;strong&gt;4) Play around with different inputs to see the outputs.&lt;/strong&gt; This is what I like to call: Cause and Effect Game. Change the values around to see what the outcome will be. Change the increments into decrements and see what happens. &lt;br&gt;
&lt;strong&gt;5) Don't be afraid to mess up.&lt;/strong&gt; It's gonna happen. You can't be perfect all of the damn time. LOL. Learn from it and keep it moving. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#i-think-that-these-steps-can-be-applied-to-any-language-that-you-are-learning-just-remember-you-got-this-" class="anchor"&gt;
  &lt;/a&gt;
  I think that these steps can be applied to any language that you are learning. Just remember, YOU GOT THIS!!! :)
&lt;/h4&gt;

</description>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>javascript</category>
      <category>selflearning</category>
    </item>
    <item>
      <title>JS and Design Patterns - Chapter 6 🚀</title>
      <author>Codespresso</author>
      <pubDate>Tue, 26 Jan 2021 18:45:28 +0000</pubDate>
      <link>https://dev.to/codespresso/js-and-design-patterns-chapter-6-273c</link>
      <guid>https://dev.to/codespresso/js-and-design-patterns-chapter-6-273c</guid>
      <description>&lt;p&gt;Table Of Contents&lt;br&gt;
        * 🤓&lt;a href="#intro"&gt;INTRODUCTION&lt;/a&gt;&lt;br&gt;
        * 🔌&lt;a href="#about-adapt"&gt;ABOUT ADAPTER PATTERN&lt;/a&gt;&lt;br&gt;
        * 📊&lt;a href="#stock-market-ex"&gt;STOCK MARKET EXAMPLE&lt;/a&gt;&lt;br&gt;
        * 👀&lt;a href="#visual"&gt;VISUAL REPRESENTATION&lt;/a&gt;&lt;br&gt;
        * 🧪&lt;a href="#chemical"&gt;CHEMICAL COMPOUND EXAMPLE&lt;/a&gt;&lt;br&gt;
        * ⚒ &lt;a href="#applicability"&gt;APPLICABILITY&lt;/a&gt;&lt;br&gt;
        * ✅&lt;a href="#pros"&gt;PROS&lt;/a&gt;&lt;br&gt;
        * ❌&lt;a href="#cons"&gt;CONS&lt;/a&gt;&lt;br&gt;
        * 🙏&lt;a href="#thank-you"&gt;THANK YOU&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  🤓 INTRODUCTION &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Welcome, my dear codedudes and codedudettes, to yet another Codespresso JS and Design Patterns blog! 👩‍💻 I hope you are all having a great day! Before we start I want to remind you that I am posting (almost daily) blogs about Computer Science and Computer Programming right here on Dev.to; If you have any ambiguities, or even If you just want to connect you can follow me, and contact me via &lt;a href="https://twitter.com/lazar_dev"&gt;🐤Twitter&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/lazar-stankovic-44a199177/"&gt;LinkedIn&lt;/a&gt;, &lt;a href="https://ko-fi.com/codespresso"&gt;☕ ko-fi&lt;/a&gt; or via E-mail. &lt;strong&gt;I am here for you to talk, discuss, maybe show you some pointers, especially for the coding newbies.&lt;/strong&gt;. Also, would like to connect, learn from you, or maybe teach you something, and just have fun by doing what I love.&lt;/p&gt;

&lt;p&gt;Today, we are talking about the Adapter Pattern. 🚀&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/kHr24u0jgWuxgo6Kz7/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/kHr24u0jgWuxgo6Kz7/giphy.gif" alt="adapt"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#about-adapter-pattern" class="anchor"&gt;
  &lt;/a&gt;
  🔌 ABOUT ADAPTER PATTERN &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The Adapter Pattern is a structural design pattern that allows objects with incompatible interfaces to collaborate. It can convert an interface of the class into an interface that another class expects. That way it allows classes to function together which normally couldn't be possible due to their incompatible interfaces.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#stock-market-example" class="anchor"&gt;
  &lt;/a&gt;
  📊 STOCK MARKET EXAMPLE &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Imagine that you need to create a stock market monitoring application. The app downloads the stock data from multiple sources in XML format and then displays nice-looking charts and diagrams for the user. At some point, you decide to improve the app by importing some 3rd-party analytics library. But, you encounter the problem. The 3rd-party library only works with data in JSON format. &lt;/p&gt;

&lt;p&gt;🤔 What should we do? &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Proposition: We could change the library to work with XML.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Yes, we could do it. But that might break some existing code that relies on the library, or worse, you might not have the library's source code in the first place, making this approach impossible.&lt;/p&gt;

&lt;p&gt;💡 REVELATION&lt;br&gt;
To solve this problem, we could create an adapter. The special object that converts the interface of one object in a way that another object can understand it. An adapter will wrap one of the objects to hide the complexity of the conversion happening behind the scenes. The wrapped object isn't even aware of the adapter.&lt;/p&gt;

&lt;p&gt;⚙ HOW DOES IT WORK?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The adapter gets an interface, compatible with one of the existing objects&lt;/li&gt;
&lt;li&gt;Using this interface, the existing object can safely call the adapter's methods&lt;/li&gt;
&lt;li&gt;Upon receiving a call, the adapter passes the request to the second object, but in a format and order that the second object expects&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the Stock Market example, we could create XML-to-JSON adapters for every class of the analytics library that your code works with directly. Then, we can adjust our code to communicate with the library only via these adapters. When an adapter receives a call, it will translate all incoming XML data into a JSON structure and it will pass the call to the appropriate methods of a wrapped analytics object.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#visual-representation" class="anchor"&gt;
  &lt;/a&gt;
  👀 VISUAL REPRESENTATION &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--asUsKx4c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kr34w08931i390s2jooc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--asUsKx4c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kr34w08931i390s2jooc.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;TARGET&lt;/strong&gt; - It defines the specific interface that is used by the Client class&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;ADAPTER&lt;/strong&gt; - It adapts the interface of the class Adaptee towards the interface of the class&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;ADAPTEE&lt;/strong&gt; - It defines an existing interface that should be adapted&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;CLIENT&lt;/strong&gt; - It looks after objects that require an interface of the Target class&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's explain this by using an interesting real-world science example.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#chemical-compound-example" class="anchor"&gt;
  &lt;/a&gt;
  🧪 CHEMICAL COMPOUND EXAMPLE &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This real-world example shows the use of the chemical-compound databank. The complex chemical compounds access the databank via an interface provided by an interface of the Adapter class.&lt;/p&gt;

&lt;p&gt;Let's dive into the code. 🚀 (❗ As always, read the comments)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Target - It defines the specific interface that is used by the Client class&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Compound&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;//setting up initial valules - self explanatory :)&lt;/span&gt;
   &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bolingPoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;meltingPoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;molecularWeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;molecularFormula&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="c1"&gt;//setting compound name&lt;/span&gt;
   &lt;span class="nx"&gt;setCompound&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="c1"&gt;//name getter&lt;/span&gt;
   &lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="c1"&gt;//Adapter - It adapts the interface of the class Adaptee towards the interface of the class&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;RichCompound&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Compound&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
      &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="cm"&gt;/* This function creates Chemical Databank for each 
   new Rich compound that we are creating*/&lt;/span&gt;
   &lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
     &lt;span class="c1"&gt;//creating a new chemical databank&lt;/span&gt;
     &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bank&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ChemicalDatabank&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
     &lt;span class="c1"&gt;//getting the boiling point based on the chemical name and indicator B === "Boiling"&lt;/span&gt;
     &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;boilingPoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bank&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getCriticalPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;B&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="c1"&gt;//getting the melting point based on the chemical name and indicator M === "Melting"&lt;/span&gt;
     &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;meltingPoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bank&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getCriticalPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;M&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="c1"&gt;//getting the molecular weight based on the chemical name&lt;/span&gt;
     &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;molecularWeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bank&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMolecularWeight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="c1"&gt;//getting the molecular formula based on the chemical name&lt;/span&gt;
     &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;molecularFormula&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bank&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMolecularStructure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

     &lt;span class="c1"&gt;//displaying all necessary information&lt;/span&gt;
     &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;%c%s&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;color: black; background: lightgreen; font-size: 24px; border: 1px solid lightgreen; border-radius: 5px; padding: 5px;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;`🧪 Name: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`👩‍🔬 Formula: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;molecularFormula&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`🏋️‍♀️ Weight: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;molecularWeight&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`❄ Melting Pt: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;meltingPoint&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;\u00B0C`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`🔥 Boiling Pt: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;boilingPoint&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;\u00B0C`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//Adaptee - It defines an existing interface that should be adapted&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ChemicalDatabank&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//databank - taken from the 'legacy API'&lt;/span&gt;
  &lt;span class="nx"&gt;getCriticalPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;compound&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;point&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
     &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;temperature&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="c1"&gt;//freezing point&lt;/span&gt;
     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;point&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;M&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;compound&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;()){&lt;/span&gt;
           &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;water&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;temperature&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
           &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;benzene&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;temperature&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;5.5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
           &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;alcohol&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;temperature&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;114.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;//boiling point&lt;/span&gt;
        &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;compound&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;()){&lt;/span&gt;
           &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;water&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;temperature&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;100.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
           &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;benzene&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;temperature&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;80.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
           &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;alcohol&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;temperature&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;78.3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;temperature&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;getMolecularStructure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;compound&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
     &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;structure&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;compound&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;()){&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;water&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;structure&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;H2O&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;benzene&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;structure&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;C6H6&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;alcohol&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;structure&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;C2H6O2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;structure&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;getMolecularWeight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;compound&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
     &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;weight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;compound&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;()){&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;water&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;weight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;18.015&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;benzene&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;weight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;78.1134&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;alcohol&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;weight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;46.0688&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//unadapted compound&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;unadaptedCompound&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Compound&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Unknown&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;%c%s&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;color: black; background: red; font-size: 24px; border: 1px solid red; border-radius: 5px; padding: 5px;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;`❌ Unadapted compound: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="nx"&gt;unadaptedCompound&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//adapted compounds&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;water&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;RichCompound&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Water&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;water&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;benzene&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;RichCompound&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Benzene&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;benzene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;alcohol&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;RichCompound&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Alcohol&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;alcohol&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Pretty interesting, right? 😎 Don't hesitate to play with the code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%E2%9A%92-applicability" class="anchor"&gt;
  &lt;/a&gt;
  ⚒ APPLICABILITY &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;You can use the Adapter pattern when you want to use some existing class, but its interface isn't compatible with the rest of your code. The adapter pattern, lets you create a middle-layer class that serves as a translator between your code and legacy class, a 3rd-party library, or any other class with a weird interface.&lt;/li&gt;
&lt;li&gt;Use the pattern when you want to reuse several existing subclasses that lack some common functionality that can't be added to the superclass. You could extend each subclass and put the missing functionality into new child classes. However, you'll need to duplicate the code across all of these new classes, which is not good.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#pros" class="anchor"&gt;
  &lt;/a&gt;
  ✅ PROS &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Single Responsibility Principle. You can separate the interface or data conversion code from the primary business logic of the program.&lt;/li&gt;
&lt;li&gt;Open/Closed Principle. You can introduce new types of adapters into the program without breaking the existing client code, as long as they work with the adapters through the client interface.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#cons" class="anchor"&gt;
  &lt;/a&gt;
  ❌ CONS &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The overall complexity of the code increases because you need to introduce a set of new interfaces and classes. Sometimes it’s simpler just to change the service class so that it matches the rest of your code.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#thank-you-for-reading" class="anchor"&gt;
  &lt;/a&gt;
  🙏 THANK YOU FOR READING!&lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;References:&lt;br&gt;
School notes...&lt;br&gt;
&lt;a href="https://refactoring.guru/design-patterns/abstract-factory"&gt;refactoring&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please leave the comment, tell me about you, about your work, comment your thoughts, connect with me via  &lt;a href="https://twitter.com/lazar_dev"&gt;Twitter&lt;/a&gt; or  &lt;a href="https://www.linkedin.com/in/lazar-stankovic-44a199177/"&gt;LinkedIn&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;☕ SUPPORT ME AND KEEP ME FOCUSED!&lt;br&gt;
&lt;a href="https://ko-fi.com/Z8Z33D1HJ"&gt;&lt;img height="36" src="https://res.cloudinary.com/practicaldev/image/fetch/s--IT81Gxvw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.ko-fi.com/cdn/kofi4.png%3Fv%3D2" alt="Buy Me a Coffee at ko-fi.com"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Have a nice time hacking! 😊&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>codequality</category>
    </item>
    <item>
      <title>The 7 Most Popular DEV Posts from the Past Week</title>
      <author>Jess Lee (she/her)</author>
      <pubDate>Tue, 26 Jan 2021 18:44:24 +0000</pubDate>
      <link>https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-1meo</link>
      <guid>https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-1meo</guid>
      <description>&lt;p&gt;Every Tuesday, we round up the previous week's top posts based on traffic, engagement, and a hint of editorial curation. The typical week starts on Monday and ends on Sunday, but don't worry, we take into account posts that are published later in the week. ❤️&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#watch-and-mern" class="anchor"&gt;
  &lt;/a&gt;
  Watch and MERN
&lt;/h3&gt;

&lt;p&gt;In this first installment in &lt;a class="comment-mentioned-user" href="https://dev.to/shubham1710"&gt;@shubham1710&lt;/a&gt;
’s new series on the MERN stack (MongoDB, Express, React and Node), you’ll get a tutorial worth saving if you want more full-stack experience!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/shubham1710" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dnP-JH9Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--_ysxMlOx--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/530291/218ccc1b-9fe9-45dc-b25d-1fef824edc79.jpg" alt="shubham1710 image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/shubham1710/build-an-e-commerce-website-with-mern-stack-part-1-setting-up-the-project-1l2d" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Build an E-Commerce website with MERN Stack - Part 1 (Setting Up the Project)&lt;/h2&gt;
      &lt;h3&gt;Kumar Shubham ・ Jan 23 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#mongodb&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
 
&lt;h3&gt;
  &lt;a href="#accessibility-should-be-at-the-heart-of-everything-we-do" class="anchor"&gt;
  &lt;/a&gt;
  Accessibility should be at the heart of everything we do
&lt;/h3&gt;

&lt;p&gt;“Building accessible websites shows that you care about disabled people. It's a small change that makes a difference.” - &lt;a class="comment-mentioned-user" href="https://dev.to/alenanik"&gt;@alenanik&lt;/a&gt;
 &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/alenanik" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WP8EhbGq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--i3zBUTgY--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/135491/54c8854e-48fb-4e49-9379-526061ad7edc.jpg" alt="alenanik image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/alenanik/inclusive-components-making-modals-accessible-1hn9" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;✨ Inclusive components: making modals accessible 🧑‍🦯&lt;/h2&gt;
      &lt;h3&gt;Alena Nik ・ Jan 19 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#a11y&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#frontend&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#inclusive&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
 
&lt;h3&gt;
  &lt;a href="#a-worthwhile-walk-in-the-jurrasic-park" class="anchor"&gt;
  &lt;/a&gt;
  A worthwhile walk in the (Jurrasic) park
&lt;/h3&gt;

&lt;p&gt;&lt;a class="comment-mentioned-user" href="https://dev.to/misslorsx"&gt;@misslorsx&lt;/a&gt;
 shares an incredibly honest and motivating look at the first few weeks and months of their new web development job.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/misslorsx" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1OJNXFg1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--VDCOgSFa--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/438488/ba014472-f69b-4281-9d74-14e0e3dc13e7.jpeg" alt="misslorsx image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/misslorsx/my-top-tips-for-your-first-3-months-in-a-new-tech-role-an-honest-article-1l7e" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;My top tips for your first 3 months in a new tech role: An HONEST article. &lt;/h2&gt;
      &lt;h3&gt;Laura Jane ・ Jan 21 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#a-fulfilling-manageable-2021" class="anchor"&gt;
  &lt;/a&gt;
  A fulfilling, manageable 2021
&lt;/h3&gt;

&lt;p&gt;&lt;a class="comment-mentioned-user" href="https://dev.to/patferraggi"&gt;@patferraggi&lt;/a&gt;
 is setting some realistic, yet ambitious goals for 2021. If you’ve been trying to think about what &lt;em&gt;you&lt;/em&gt; want to accomplish this year, Patricio’s framework is a great place to get inspiration.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/patferraggi" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HaLQ97SP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--duT1SVI6--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/257973/8ec7581b-807e-448d-8d3a-d69b7126fcaf.jpg" alt="patferraggi image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/patferraggi/planning-my-career-development-for-2021-52oo" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Planning my career development for 2021&lt;/h2&gt;
      &lt;h3&gt;Patricio Ferraggi ・ Jan 19 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#motivation&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#building-a-more-accessible-whitehousegov" class="anchor"&gt;
  &lt;/a&gt;
  Building a more accessible whitehouse.gov
&lt;/h3&gt;

&lt;p&gt;&lt;a class="comment-mentioned-user" href="https://dev.to/ritaxcorreia"&gt;@ritaxcorreia&lt;/a&gt;
 wrote an awesome case study on Whitehouse.gov’s new web accessibility stance under the new administration in the United States. Check it out! &lt;em&gt;P.S. This post is not intended to be political.&lt;/em&gt;&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/ritaxcorreia" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c5OL8dAH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--NWvMJSKJ--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/407623/c2f3e3d1-d1d8-4c68-8fd6-58275a106900.jpg" alt="ritaxcorreia image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/ritaxcorreia/web-accessibility-improvements-on-the-white-house-website-5bgk" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Web Accessibility: Improvements on the White House Website&lt;/h2&gt;
      &lt;h3&gt;Rita Correia ・ Jan 21 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#a11y&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#discuss&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#showdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#ux&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#your-guide-to-the-document-object-model" class="anchor"&gt;
  &lt;/a&gt;
  Your guide to the Document Object Model
&lt;/h3&gt;

&lt;p&gt;“DOM is there so we can play with elements within JavaScript directly; we don't need any intermediate in between HTML and JS.” &lt;/p&gt;

&lt;p&gt;Just one of the many pearls of wisdom in this DOM-focused post by &lt;a class="comment-mentioned-user" href="https://dev.to/whoadarshpandya"&gt;@whoadarshpandya&lt;/a&gt;
.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/whoadarshpandya" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ubPjO8rS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GwVLcyHI--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/424116/7c4c1404-b5e5-4c2b-b74b-db9adf5daf49.jpeg" alt="whoadarshpandya image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/whoadarshpandya/enough-javascript-to-get-you-started-14-understanding-dom-1m6c" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Enough JavaScript to get you Started : #14 Understanding DOM&lt;/h2&gt;
      &lt;h3&gt;Adarsh Pandya ・ Jan 20 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#100daysofcode&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#recreating-the-style-of-cyberpunk-2077" class="anchor"&gt;
  &lt;/a&gt;
  Recreating the style of Cyberpunk 2077
&lt;/h3&gt;

&lt;p&gt;… Well, the parts of Cyberpunk 2077 you’d &lt;em&gt;want&lt;/em&gt; to recreate! &lt;a class="comment-mentioned-user" href="https://dev.to/jh3y"&gt;@jh3y&lt;/a&gt;
 takes a look at the striking visual style of this explosive game.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/jh3y" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--waa_7ngq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Be0q_Hkr--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/288872/9f557ca6-9b98-4a65-87c5-ca8eee1028d3.jpg" alt="jh3y image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/jh3y/css-cyberpunk-2077-buttons-taking-your-css-to-night-city-43l0" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;CSS Cyberpunk 2077 Buttons - Taking your CSS to Night City&lt;/h2&gt;
      &lt;h3&gt;Jhey Tompkins ・ Jan 22 ・ 13 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#design&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;That's it for our weekly wrap up! Keep an eye on dev.to this week for daily content and discussions...and if you miss anything, we'll be sure to recap it next Tuesday!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>icymi</category>
    </item>
    <item>
      <title>Html Parser - How to scan HTML files for missing assets and broken links </title>
      <author>Sm0ke</author>
      <pubDate>Tue, 26 Jan 2021 17:46:49 +0000</pubDate>
      <link>https://dev.to/sm0ke/html-parser-how-to-scan-html-files-for-missing-assets-and-broken-links-2mke</link>
      <guid>https://dev.to/sm0ke/html-parser-how-to-scan-html-files-for-missing-assets-and-broken-links-2mke</guid>
      <description>&lt;p&gt;Hello Coders,&lt;/p&gt;

&lt;p&gt;The article presents a simple, open-source tool that I'm using to statically analyze HTML files for missing assets and broken links, before using the files in real projects. This &lt;strong&gt;Html Parser&lt;/strong&gt; is basically a Python3 wrapper over Beautiful Soup, the popular OSS parsing library for HTML files and XMLs. The source code can be found on Github released under EULA License. &lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Features:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Open-Source - can be also used for eLearning &lt;/li&gt;
&lt;li&gt;Works with directories - all HTML files are scanned&lt;/li&gt;
&lt;li&gt;Detects missing assets (JS, CSS, images ) for each page&lt;/li&gt;
&lt;li&gt;Detects broken links and suggest the right path&lt;/li&gt;
&lt;li&gt;Acceptable execution time - 100 Pages processed &amp;lt;1min&lt;/li&gt;
&lt;/ul&gt;




&lt;blockquote&gt;
&lt;p&gt;Thanks for reading! TL;DR;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/app-generator/developer-tools"&gt;Html Parser&lt;/a&gt; - source code&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/app-generator/developer-tools/blob/master/check-assets-output.txt"&gt;Sample Output&lt;/a&gt; - captured from a real project&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/app-generator/developer-tools/blob/master/LICENSE.md"&gt;EULA License&lt;/a&gt; - free for solo-developers, small companies, startUps, and NGOs&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RwsXCIxI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/app-generator/html-parser/master/media/html-parser-intro.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RwsXCIxI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/app-generator/html-parser/master/media/html-parser-intro.gif" alt="Html Parser - Developer Tool crafted by AppSeed, animated presentation."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;To use the tool we need to specify two things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The folder where HTML files are saved&lt;/li&gt;
&lt;li&gt;The assets folder - parent Directory for all JS, CSS, Images ..&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once we have provided this simple setup, we can call the scripts in the terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python ./check-assets.py
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#html-parser-the-relevant-parts" class="anchor"&gt;
  &lt;/a&gt;
  HTML Parser - The Relevant Parts
&lt;/h2&gt;

&lt;p&gt;To scan and correlate the information, the tool uses a few structures to save and reuse the relevant information and also perform simple operations over detected HTML files.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hot it works&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;define a map where the key is the file name&lt;/li&gt;
&lt;li&gt;associate a data structure to each file where the relevant information is stored and updated&lt;/li&gt;
&lt;li&gt;Each HTML file is scanned for assets and links&lt;/li&gt;
&lt;li&gt;Validate the information for each file and save the missing assets for each by looking on the disk &lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#html-parser-source-code" class="anchor"&gt;
  &lt;/a&gt;
  HTML Parser - Source Code
&lt;/h2&gt;

&lt;p&gt;The relevant functions and code chunks are below. If something relevant is missing, feel free to ask for it in the comments section:&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Read files from a directory&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_files&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;aPath&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;FILES_LIST&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; 
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dirs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;walk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;aPath&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;FILES_LIST&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;FILES_LIST&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;The structure/class to save the information for each file&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TMPL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="c1"&gt;# constructor
&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;aFile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;aFile&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;css&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="c1"&gt;# All CSS Files
&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;js&lt;/span&gt;        &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="c1"&gt;# All JS Files
&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="c1"&gt;# All Images
&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;links&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="c1"&gt;# All Links
&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="c1"&gt;# used to report missing assets
&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;err_links&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="c1"&gt;# used to report missing assets
&lt;/span&gt;
    &lt;span class="c1"&gt;# Used to have a string representation 
&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;' some other info'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;Initiate Beautiful Soup object&lt;/strong&gt; for each file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_bs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;aFile&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;

  &lt;span class="n"&gt;minified&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;htmlmin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;minify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;file_load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;aFile&lt;/span&gt; &lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;remove_empty_space&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;bs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;minified&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'html.parser'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;Scan each file for Links and assets&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The results are injected into associated structures for each file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# BS object is constructed and available for queries  
&lt;/span&gt;&lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_bs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;FULL_PATH&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Scan for CSS files
&lt;/span&gt;&lt;span class="n"&gt;tmpl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;css&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_css&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# # Scan for JS files
&lt;/span&gt;&lt;span class="n"&gt;tmpl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;css&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_js&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Links and images are scanned in the same way using simple helpers. &lt;br&gt;
Once the information is saved, we can traverse the DOM using BS objects and perform mutations over elements. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#html-parser-sample-output" class="anchor"&gt;
  &lt;/a&gt;
  HTML Parser - Sample output
&lt;/h2&gt;

&lt;p&gt;To visualize a real production output, please access a sample file saved into the public repository: &lt;a href="https://github.com/app-generator/developer-tools/blob/master/check-assets-output.txt"&gt;check assets - output&lt;/a&gt;&lt;/p&gt;






&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;env&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; PS &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; python.exe .&lt;span class="se"&gt;\c&lt;/span&gt;heck-assets.py

 Files &lt;span class="o"&gt;(&lt;/span&gt;2&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'apps-calendar.html'&lt;/span&gt;, &lt;span class="s1"&gt;'index.html'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;

 &lt;span class="k"&gt;*****&lt;/span&gt; &lt;span class="k"&gt;*****&lt;/span&gt; &lt;span class="k"&gt;*****&lt;/span&gt;

 PROCESSING &lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; apps-calendar.html | files &lt;span class="o"&gt;(&lt;/span&gt;1&lt;span class="o"&gt;)&lt;/span&gt; remaining
 PROCESSING &lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; index.html | files &lt;span class="o"&gt;(&lt;/span&gt;0&lt;span class="o"&gt;)&lt;/span&gt; remaining
 PROCESSING &lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; apps-calendar.html
 ERR - Missing Asset -&amp;gt; /static/assets/css/classic-horizontal/style-ERROR.css
 ERR - Missing Asset -&amp;gt; /static/assets/images/logo-mini-ERROR.svg
 PROCESSING &lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; index.html
 ERR - Missing Asset -&amp;gt; /static/assets/images/favicon-ERROR.png
    |
    |- apps-calendar.html
    |    |
    |    |--- CSS: 6 file&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;
    |          | /static/assets/vendors/mdi/css/materialdesignicons.min.css
    |          | /static/assets/vendors/css/vendor.bundle.base.css
    |          | /static/assets/vendors/fullcalendar/fullcalendar.min.css
    |          | /static/assets/css/classic-horizontal/style.css
    |          | /static/assets/css/classic-horizontal/style-ERROR.css
    |          | /static/assets/images/favicon.png
    |     
...

Pages with errors: 2
    |
    |- apps-calendar.html
    |    |     | /static/assets/css/classic-horizontal/style-ERROR.css
    |    |     | /static/assets/images/logo-mini-ERROR.svg
    |
    |- index.html
    |    |     | /static/assets/images/favicon-ERROR.png
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The tool can be easily extended to LIVE websites using the existing core. In case any of you find it useful, feel free to suggest features in the comments section or push a PR on Github. &lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Thank you! - For more resources, please access:&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/"&gt;Beautiful Soup&lt;/a&gt; - the official docs&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://appseed.us/"&gt;AppSeed&lt;/a&gt; - for more tools and starters&lt;/li&gt;
&lt;/ul&gt;




&lt;blockquote&gt;
&lt;p&gt;Btw, my (nick) name is &lt;strong&gt;Sm0ke&lt;/strong&gt; and I'm pretty active also on &lt;a href="https://twitter.com/Sm0keDev"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>webdev</category>
      <category>python</category>
      <category>devtools</category>
    </item>
  </channel>
</rss>
