<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to read Member-only Medium Stories for free without being a member?</title>
      <author>Cybear Tron</author>
      <pubDate>Tue, 15 Jun 2021 07:02:56 +0000</pubDate>
      <link>https://dev.to/cybeartron/how-to-read-member-only-medium-stories-for-free-without-being-a-member-16m7</link>
      <guid>https://dev.to/cybeartron/how-to-read-member-only-medium-stories-for-free-without-being-a-member-16m7</guid>
      <description>&lt;p&gt;So You are here to know how can you damn read member-only medium stories for free without being a member??&lt;br&gt;
If ur like me i.e. a minor who is not allowed to spend money online or ur broke or dont wanna pay medium... This is for u!!!!!&lt;/p&gt;

&lt;p&gt;Lets start!!!!&lt;br&gt;
STEP 1: First find yourself a medium story you want to read. For this tutorial, I will use Manpreet Singh's post &lt;a href="https://preettheman.medium.com/best-python-projects-to-finish-in-a-weekend-a032e5c11c1"&gt;https://preettheman.medium.com/best-python-projects-to-finish-in-a-weekend-a032e5c11c1&lt;/a&gt;&lt;br&gt;
STEP 2: Now that you have a story, now go to your browser. &lt;strong&gt;NOTE: TESTED ON CHROME AND EDGE. I WISH THIS WORKS ON OTHERS TOO&lt;/strong&gt; Press ctrl+shift+n or cmd+shift+n in mac for opening incognito or inprivate mode (Or jus use the way to open the alternative on your browser of incognito mode).&lt;br&gt;
STEP 3: Now u are in the incognito-esque mode, now paste the link of the medium article. Now ur good to go.&lt;br&gt;
You can read it!!!&lt;br&gt;
HAPPY CODING AND READING!!!!&lt;/p&gt;

</description>
      <category>medium</category>
      <category>incognito</category>
      <category>free</category>
      <category>member</category>
    </item>
    <item>
      <title>9 Responsive Website Tutorials With Html CSS JavaScript Bootstrap Step By Step</title>
      <author>fahim kabir</author>
      <pubDate>Tue, 15 Jun 2021 06:31:30 +0000</pubDate>
      <link>https://dev.to/fahimkabir/9-responsive-website-tutorials-with-html-css-javascript-bootstrap-step-by-step-56ng</link>
      <guid>https://dev.to/fahimkabir/9-responsive-website-tutorials-with-html-css-javascript-bootstrap-step-by-step-56ng</guid>
      <description>&lt;p&gt;&lt;strong&gt;Responsive web design&lt;/strong&gt; is a method of creating and &lt;strong&gt;developing websites&lt;/strong&gt; so that they are more accessible and give an ideal viewing experience for users on a variety of devices.&lt;/p&gt;

&lt;p&gt;With the rise of smart phones and tablets, it's practically impossible to ignore the need to &lt;strong&gt;optimize websites&lt;/strong&gt; for mobile devices. Responsive web design is a better option and a more effective technique to target a wide range of devices with fewer resources.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Responsive layouts&lt;/strong&gt; alter and adapt to any device screen size, whether it's a desktop, laptop, tablet, or smartphone.&lt;/p&gt;

&lt;p&gt;That's why I have selected &lt;strong&gt;10 beginner friendly responsive website tutorials&lt;/strong&gt; for you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-ultra-responsive-portfolio-website-using-bootstrap-html-css-from-scratch"&gt;
  &lt;/a&gt;
  1. Ultra Responsive Portfolio Website Using Bootstrap Html Css From Scratch
&lt;/h2&gt;

&lt;p&gt;Your First Website Should Be Your Portfolio. Lets &lt;strong&gt;create a  Responsive Portfolio Website Using Bootstrap, Html, CSS &amp;amp; JavaScript from scratch&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Because, creating responsive and mobile-friendly websites and applications has gotten considerably easier, thanks to Bootstrap 4's robust mobile-first flexbox grid framework.&lt;br&gt;
If you are a beginner, don't worry. This tutorial is mainly made for beginners.&lt;/p&gt;

&lt;p&gt;You will learn about,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Bootstrap&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;How to use bootstrap&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Structure of a &lt;strong&gt;static website&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Section - Home. About, Service, Newsletter, Contact us, Footer.&lt;/li&gt;
&lt;li&gt;Ideas for your portfolio.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;How to make a website Responsive&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is the tutorial for You:&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/kltvOVOEmM0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-complete-bootstrap-website-with-bootstrap-4-html5-css3"&gt;
  &lt;/a&gt;
  2. Complete Bootstrap Website With Bootstrap 4 HTML5 CSS3
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Bootstrap 4&lt;/strong&gt; is built from the ground up to be &lt;strong&gt;responsive and mobile friendly&lt;/strong&gt;. Its five-tier grid classes provide you more control over the layout and how it looks on different platforms, such as mobile phones, tablets, laptops and desktops, large-screen devices, and so on.&lt;/p&gt;

&lt;p&gt;And here we are creating a &lt;strong&gt;responsive agency website using bootstrap html css &amp;amp; js&lt;/strong&gt;. We will create,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Responsive Nav Bar&lt;/li&gt;
&lt;li&gt;Beautiful video background&lt;/li&gt;
&lt;li&gt;About section&lt;/li&gt;
&lt;li&gt;Service section&lt;/li&gt;
&lt;li&gt;Pricing section&lt;/li&gt;
&lt;li&gt;Sign up section &lt;/li&gt;
&lt;li&gt;Footer&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is the tutorial for You:&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/BSUjh4ebmzE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-how-to-make-bootstrap-website-step-by-step-with-html5-css3"&gt;
  &lt;/a&gt;
  3. How To Make Bootstrap Website Step By Step With HTML5 CSS3
&lt;/h2&gt;

&lt;p&gt;In this tutorial we will create another &lt;strong&gt;responsive agency website using html css js &amp;amp; bootstrap&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We will create,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Navigation Bar &lt;/li&gt;
&lt;li&gt;Hero Section
&lt;/li&gt;
&lt;li&gt;Featured Section &lt;/li&gt;
&lt;li&gt;About Section &lt;/li&gt;
&lt;li&gt;Customer review Section &lt;/li&gt;
&lt;li&gt;Call to action&lt;/li&gt;
&lt;li&gt;Footer &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is the tutorial for You:&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/BtdESApM0a4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-bootstrap-responsive-website-design-tutorial-using-bootstrap-html-css"&gt;
  &lt;/a&gt;
  4. Bootstrap Responsive Website Design Tutorial Using Bootstrap HTML CSS
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Using Bootstrap, Html, CSS &amp;amp; JavaScript we will create a beautiful Responsive blogging website&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Because the use of mobile devices to surf the web continues to grow at an astronomical pace, and these devices are often constrained by display size and require a different approach to how content is laid out on the screen.&lt;/p&gt;

&lt;p&gt;Web pages can be viewed using many different devices. Our web page should look good, and be easy to use, regardless of the device. Web pages should not leave out information to fit smaller devices, but rather adapt its content to fit any device.&lt;/p&gt;

&lt;p&gt;We will create,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Responsive Navigation Bar &lt;/li&gt;
&lt;li&gt;Hero Section
&lt;/li&gt;
&lt;li&gt;Featured Section &lt;/li&gt;
&lt;li&gt;Subscription Letter&lt;/li&gt;
&lt;li&gt;Blog Section &lt;/li&gt;
&lt;li&gt;Side Bar &lt;/li&gt;
&lt;li&gt;Responsive Footer &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is the tutorial for You:&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/QdavXfltTeY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-how-to-create-complete-responsive-website-using-bootstrap-html-css"&gt;
  &lt;/a&gt;
  5. How To Create Complete Responsive Website Using Bootstrap HTML CSS
&lt;/h2&gt;

&lt;p&gt;For creating this project we are using Bootstrap, Html, CSS &amp;amp; JavaScript.&lt;/p&gt;

&lt;p&gt;Today we will learn how to,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Setup Bootstrap&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Create Navigation Bar&lt;/li&gt;
&lt;li&gt;Create Hero Section&lt;/li&gt;
&lt;li&gt;Create About Section&lt;/li&gt;
&lt;li&gt;Create Project Section&lt;/li&gt;
&lt;li&gt;Create Team Slider&lt;/li&gt;
&lt;li&gt;Create Contact Section&lt;/li&gt;
&lt;li&gt;Create Footer Section&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is the tutorial for You:&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/SbukKlDWM3c"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Now, Lets make something more creative &amp;amp; reliable. That's why now we will &lt;strong&gt;create a responsive animated gym website&lt;/strong&gt;. And we will only &lt;strong&gt;using HTML, CSS &amp;amp; JavaScript&lt;/strong&gt;. No Bootstrap.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-responsive-animated-website-tutorial-using-html5-and-css3"&gt;
  &lt;/a&gt;
  6. Responsive Animated Website Tutorial Using HTML5 and CSS3
&lt;/h2&gt;

&lt;p&gt;In this tutorial, we will &lt;strong&gt;learn how to create Fully Professional Responsive Animated Website Using HTML, CSS &amp;amp; JavaScript&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;If you are a beginner, don't worry. We will go through every process step by step, even the animation part also.&lt;/p&gt;

&lt;p&gt;You will learn about -&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;How to make an Animated website&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;How to create &lt;strong&gt;pure CSS smooth scrolling effect&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Structure of a static website.&lt;/li&gt;
&lt;li&gt;Section - Home. About, Service, Contact us, Footer.&lt;/li&gt;
&lt;li&gt;Ideas for your website.&lt;/li&gt;
&lt;li&gt;How to make a website Responsive.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For more simplicity, I have divided this tutorial into 2 different parts, so that I can explain you every single details.&lt;/p&gt;

&lt;p&gt;Part 1:&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/aF1sv6AsDFE"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Part 2:&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/8_h4LCRpqkc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-html-css-javascript-responsive-website-tutorial"&gt;
  &lt;/a&gt;
  7. HTML CSS JavaScript Responsive Website Tutorial
&lt;/h2&gt;

&lt;p&gt;We will &lt;strong&gt;Build A Responsive Website With HTML CSS &amp;amp; JavaScript Step By Step&lt;/strong&gt;. This a organization website. That's why we have to give some extra effort for making this website.&lt;/p&gt;

&lt;p&gt;We are adding some eye catching CSS styling for graving users attention towards this company.&lt;/p&gt;

&lt;p&gt;Here we are creating,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Navigation Bar &lt;/li&gt;
&lt;li&gt;Home Section &lt;/li&gt;
&lt;li&gt;Service Section &lt;/li&gt;
&lt;li&gt;Pricing Cards &lt;/li&gt;
&lt;li&gt;Newsletter Email Section&lt;/li&gt;
&lt;li&gt;Contact Page&lt;/li&gt;
&lt;li&gt;Footer&lt;/li&gt;
&lt;li&gt;Responsive Design With Media Query&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For more clear explanation, I have divided this tutorial into 2 different parts.&lt;/p&gt;

&lt;p&gt;Part 1:&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/1FoQOProoeI"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Part 2:&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/G6JGc9MC96s"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Ok, Its time to do some advance stuffs. After creating our previous websites, I think you have got an idea of HTML, CSS, JavaScript &amp;amp; Bootstrap. Now we will implement them all to &lt;strong&gt;create a functional Responsive Ecommerce website With HTML, CSS, JavaScript &amp;amp; Bootstrap&lt;/strong&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-how-to-make-ecommerce-website-using-html-and-css-step-by-step"&gt;
  &lt;/a&gt;
  8. How To Make Ecommerce Website Using HTML And CSS Step By Step
&lt;/h2&gt;

&lt;p&gt;In the previous tutorials, you looked at the many aspects and functionalities of &lt;strong&gt;Bootstrap HTML CSS &amp;amp; JavaScript&lt;/strong&gt;. However, simply studying the principles is insufficient; you must also have the abilities to put them into practice. In this tutorial, we'll &lt;strong&gt;build an e-commerce website&lt;/strong&gt; to assist you learn &lt;strong&gt;how to use Bootstrap HTML CSS &amp;amp; JavaScript for web design&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We'll start by building the pieces one by one, gradually increasing the level of complexity so you don't become overwhelmed with knowledge.&lt;/p&gt;

&lt;p&gt;We'll start with the ecommerce.html page, then go on to the products.html, productDetails.html pages and so on to develop a responsive website.&lt;/p&gt;

&lt;p&gt;You will learn to,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Adding Bootstrap &lt;/li&gt;
&lt;li&gt;Adding Font awesome icon&lt;/li&gt;
&lt;li&gt;Creating Navigation Bar&lt;/li&gt;
&lt;li&gt;Creating Home Section&lt;/li&gt;
&lt;li&gt;Creating Responsive navigation&lt;/li&gt;
&lt;li&gt;Creating Brand Section&lt;/li&gt;
&lt;li&gt;Creating New section&lt;/li&gt;
&lt;li&gt;Creating Featured Products&lt;/li&gt;
&lt;li&gt;Creating Banner section&lt;/li&gt;
&lt;li&gt;Creating Dress section&lt;/li&gt;
&lt;li&gt;Creating Watches section&lt;/li&gt;
&lt;li&gt;Creating shoes section&lt;/li&gt;
&lt;li&gt;Creating website Footer&lt;/li&gt;
&lt;li&gt;Responsive Footer&lt;/li&gt;
&lt;li&gt;Products Page Design&lt;/li&gt;
&lt;li&gt;Products details page design&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For better understanding, I have divided this website into several parts.&lt;/p&gt;

&lt;p&gt;Part 1:&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/37KohMnlP7Q"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Part 2:&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Mr7eWzGyq3E"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Part 3:&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/gW-q6G9KYTg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-what-should-i-make-next-please-let-me-know-in-the-comment"&gt;
  &lt;/a&gt;
  9. What Should I Make Next? Please Let Me Know In The Comment.
&lt;/h2&gt;

&lt;p&gt;You can use this projects to learn, improve your skills or for your portfolio.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Previous Posts:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/fahimkabir" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OKX2P2LN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--8_Vu5jyt--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/642043/5a98e096-84fd-4f50-a9f6-10caf87d9fa2.png" alt="fahimkabir image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/fahimkabir/7-javascript-projects-for-beginners-d3m" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;7 JavaScript Projects For Beginners&lt;/h2&gt;
      &lt;h3&gt;fahim kabir ・ Jun 11 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/fahimkabir" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OKX2P2LN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--8_Vu5jyt--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/642043/5a98e096-84fd-4f50-a9f6-10caf87d9fa2.png" alt="fahimkabir image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/fahimkabir/15-python-projects-for-beginners-4j4f" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;15 Python Projects For Beginners&lt;/h2&gt;
      &lt;h3&gt;fahim kabir ・ Jun 12 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#python&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#graphql&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#resume&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Feel free to visit my YouTube channel:&lt;br&gt;
&lt;a href="//www.youtube.com/tech2etc"&gt;@Tech2etc&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Follow me on Instagram where I'm sharing lot's of useful resources!&lt;br&gt;
&lt;a href="https://www.instagram.com/fahimkabir.hamim"&gt;@fahimkabir.hamim&lt;/a&gt; 😉&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Create a serverless book library app with HarperDB and Gatsbyjs</title>
      <author>Tapas Adhikary</author>
      <pubDate>Tue, 15 Jun 2021 05:37:59 +0000</pubDate>
      <link>https://dev.to/atapas/create-a-serverless-book-library-app-with-harperdb-and-gatsbyjs-19cd</link>
      <guid>https://dev.to/atapas/create-a-serverless-book-library-app-with-harperdb-and-gatsbyjs-19cd</guid>
      <description>&lt;p&gt;One of the many advantages of trying out &lt;code&gt;side-projects&lt;/code&gt; is, you never run out of the ideas of trying out something new. For example, recently, I had an opportunity to try out a modern, easy-to-use, fast database, &lt;code&gt;HarperDB&lt;/code&gt;. As I learned how to set up and use it, I could further explore building a serverless app using it. &lt;/p&gt;

&lt;p&gt;This article will learn how to create a serverless &lt;code&gt;book library&lt;/code&gt; app using &lt;code&gt;HarperDB&lt;/code&gt; and &lt;code&gt;Gatsbyjs&lt;/code&gt;. We will also learn to deploy the app on the &lt;code&gt;Gatsby Cloud&lt;/code&gt;. I hope you enjoy following along and build the app with me.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#so-what-are-we-going-to-learn"&gt;
  &lt;/a&gt;
  So, What are we going to learn?
&lt;/h1&gt;

&lt;p&gt;We will learn to,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Setting up &lt;code&gt;HarperDB&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Configure the &lt;code&gt;Schema and Table&lt;/code&gt; in HarperDB.&lt;/li&gt;
&lt;li&gt;Populate &lt;code&gt;data&lt;/code&gt; in HarperDB.&lt;/li&gt;
&lt;li&gt;Setting up a &lt;code&gt;Gatsbyjs&lt;/code&gt; project.&lt;/li&gt;
&lt;li&gt;Use a &lt;code&gt;Gatsbyjs Plugin&lt;/code&gt; to access HarperDB data at the build time.&lt;/li&gt;
&lt;li&gt;Build the user interfaces for the book library app. It's all with &lt;code&gt;Reactjs&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Deploy the app on the &lt;code&gt;Gatsby Cloud&lt;/code&gt; to access it publicly.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At any point in time, feel free to refer to the source code of the app from the GitHub repository,&lt;/p&gt;

&lt;blockquote&gt;

&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/atapas"&gt;
        atapas
      &lt;/a&gt; / &lt;a href="https://github.com/atapas/flicks"&gt;
        flicks
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Flicks is a project to showcase the integration between Gatsbyjs and HarperDB. It provides a Gatsby-based user interface pulling data from the HarperDB. So you can assume it to be a library showing information about my favorite books!
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
  &lt;a href="https://flicks.gatsbyjs.io/" rel="nofollow"&gt;
    &lt;img alt="demo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--DU9ab79v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/atapas/flicks/main/./static/booklist.png" width="100%" height="auto"&gt;
  &lt;/a&gt;
&lt;/p&gt;
&lt;h1&gt;
  Flicks - Know My Favorite Books
&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;Flicks&lt;/code&gt; is a project to showcase the integration between &lt;code&gt;Gatsbyjs&lt;/code&gt; and &lt;code&gt;HarperDB&lt;/code&gt;. It provides a Gatsby-based user interface pulling data from the HarperDB. So you can assume it to be a library showing information about my favorite books!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Please feel free to fork and change the project in whatever ways you need to. If you like the work, please show your support by giving the repo a star(⭐)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
💻 Demo&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Flicks&lt;/code&gt; is deployed on the Gatsby Cloud. You can access it using, &lt;a href="https://flicks.gatsbyjs.io/" rel="nofollow"&gt;https://flicks.gatsbyjs.io/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
📚 Quickstart&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Clone the project and browse the project repo.&lt;/li&gt;
&lt;li&gt;Install dependencies using &lt;code&gt;npm install&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Follow this step-by-step tutorial to set up data with &lt;code&gt;HarperDB&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Start the UI using the &lt;code&gt;gatsby develop&lt;/code&gt; command.&lt;/li&gt;
&lt;li&gt;Open the code and start customizing! The app is now running at &lt;a href="http://localhost:8000" rel="nofollow"&gt;http://localhost:8000&lt;/a&gt;!&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
🖼️ Screenshots&lt;/h2&gt;
&lt;h3&gt;
The Book List Page&lt;/h3&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/atapas/flicks/main/./static/booklist.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DU9ab79v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/atapas/flicks/main/./static/booklist.png" alt="book deatils"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
The Book Details&lt;/h3&gt;…&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/atapas/flicks"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/blockquote&gt;

&lt;p&gt;Here goes a quick demo of the app that we will build in the next 12-15 minutes.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ErdlYiRVhSA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here is the demo of the library app. Please feel free to access and use.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://flicks.gatsbyjs.io/"&gt;https://flicks.gatsbyjs.io/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;You need a couple of prerequisites,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You must have &lt;code&gt;Node.js&lt;/code&gt; installed. Please make sure you have installed Node.js version &amp;gt;= 12.13.0. You can download and install Node.js &lt;a href="https://nodejs.org/en/download/current/"&gt;from here&lt;/a&gt;. You can check the version of the existing Node.js installation using the command, &lt;code&gt;node -v&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Knowledge of Reactjs would be helpful as Gatsbyjs is React-based.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#before-we-begin-what-is-raw-serverless-endraw-anyway"&gt;
  &lt;/a&gt;
  Before we begin, What is &lt;code&gt;serverless&lt;/code&gt; anyway?
&lt;/h1&gt;

&lt;p&gt;There is a high chance that you may have a couple of doubts as I had about the term &lt;code&gt;serverless&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Does serverless mean there are no servers involved at all in the app development?&lt;/li&gt;
&lt;li&gt;Are we talking about the &lt;a href="https://www.serverless.com/"&gt;Serverless Framework&lt;/a&gt; by any chance?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nope, both of them are not true in the context of this article. A server exists to provide services. It could be e-mail, form, hosting, and even database. By &lt;code&gt;serverless&lt;/code&gt; it doesn't mean there are no servers involved in the app development. It instead means we as developers do not set up, manage, and maintain these servers. Instead, we leverage the services made available and managed by providers like Google, Amazon, Netlify, Vercel, Gatsby, HarperDB, and many more.&lt;/p&gt;

&lt;p&gt;Coming to the second point above, the &lt;code&gt;Serverless Framework&lt;/code&gt; is a service that helps us to go serverless. However, we will not use it in this article.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#harperdb"&gt;
  &lt;/a&gt;
  HarperDB
&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;HarperDB&lt;/code&gt; is a fast, flexible database that allows you to perform rapid application development, distributed computing, SaaS, and many more. To set up HarperDB in a serverless way, we need to configure a cloud instance. But the first thing first, let's create an account with HarperDB.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-harperdb"&gt;
  &lt;/a&gt;
  Setting Up HarperDB
&lt;/h2&gt;

&lt;p&gt;Please browse to &lt;a href="https://harperdb.io/"&gt;https://harperdb.io/&lt;/a&gt; and create an account for free. Please click on the link &lt;code&gt;Start Free&lt;/code&gt; as shown below. If you have an account already, please sign in using this link, &lt;a href="https://studio.harperdb.io/"&gt;https://studio.harperdb.io/&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XIRwjlun--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622433378490/RP74kVKnM.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XIRwjlun--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622433378490/RP74kVKnM.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="Create a Free Account"&gt;&lt;/a&gt;&lt;br&gt;
Figure 1.1: Create a Free Account&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As part of the signup process, you need to provide the details like name, email, subdomain name. &lt;code&gt;HarperDB&lt;/code&gt; will now create a subdomain for you. So please provide the details and sign up for free.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zcWvc_1J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622434396513/BabLj1_rJ.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zcWvc_1J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622434396513/BabLj1_rJ.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="Specify Details to Sign Up"&gt;&lt;/a&gt;&lt;br&gt;
Figure 1.2: Specify Details to Sign Up&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the next step, you need to provide an account password. Please provide a strong password and complete the account creation process.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hArSowGI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622433425677/I6tOJRVAk.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hArSowGI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622433425677/I6tOJRVAk.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="Account Password"&gt;&lt;/a&gt;&lt;br&gt;
Figure 1.3: Specify the Account Password&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, let's create a HarperDB cloud instance. We will use this cloud instance to create and fetch data for our application. Please click on the section &lt;code&gt;Create New HarperDB Cloud Instance&lt;/code&gt; to move to the next step. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--USj1nwbN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622433435638/7p6IQxNdZ.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--USj1nwbN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622433435638/7p6IQxNdZ.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="Create a HarperDB Cloud Instance"&gt;&lt;/a&gt;&lt;br&gt;
Figure 1.4: Create a HarperDB Cloud Instance&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next, please select the &lt;code&gt;Create HarperDB Cloud Instance&lt;/code&gt; as shown in the image below.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VrrK0MbC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622433443441/DvOCNd9BJ.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VrrK0MbC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622433443441/DvOCNd9BJ.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="HarperDB Cloud Instance"&gt;&lt;/a&gt;&lt;br&gt;
Figure 1.5: Create HarperDB Cloud Instance&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now we have to specify the cloud instance name and credentials. Please provide an instance name of your choice along with the credentials.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FJJw0Alr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622434429229/Cus9BrFFQ.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FJJw0Alr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622434429229/Cus9BrFFQ.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="Credentials"&gt;&lt;/a&gt;&lt;br&gt;
Figure 1.6: Specify Instance Name and Credentials.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next, you need to select the RAM size, storage size, and other spec details. Please select all the free options.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xBULiBK4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622433516588/uSZbwoveZ.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xBULiBK4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622433516588/uSZbwoveZ.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="7.png"&gt;&lt;/a&gt;&lt;br&gt;
Figure 1.7: Select the specs&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The last step is to confirm and add the HarperDB cloud instance. Again, please review the details and click the &lt;code&gt;Add Instance&lt;/code&gt; button.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QHAzT5Uf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622434445840/i_NYUs4Bj.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QHAzT5Uf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622434445840/i_NYUs4Bj.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="8.png"&gt;&lt;/a&gt;&lt;br&gt;
Figure 1.8: Review the instance details and Add&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You should see the instance creation getting started.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EcpxK0MM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622434460243/RG6yA8B7u.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EcpxK0MM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622434460243/RG6yA8B7u.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="9.png"&gt;&lt;/a&gt;&lt;br&gt;
Figure 1.9: Creating Instance is In-Progress&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It may take a few minutes. However, you should see the status as &lt;code&gt;OK&lt;/code&gt; after a successful HarperDB cloud instance creation.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8iqS-4y7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622434475674/L48WYGd9r.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8iqS-4y7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622434475674/L48WYGd9r.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="10.png"&gt;&lt;/a&gt;&lt;br&gt;
Figure 1.10: Status OK&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A final step. Please go to the &lt;code&gt;config&lt;/code&gt; tab and copy the API Auth Header Key. Please preserve it somewhere, as we will use it when we configure Gatsbyjs with HarperDB.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MJlWx0jO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622469889870/2LSZSvMgBf.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MJlWx0jO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622469889870/2LSZSvMgBf.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="HarperDB_config.png"&gt;&lt;/a&gt;&lt;br&gt;
Figure 1.11: HarperDB API Auth Header Key&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That's all. We have successfully created a HarperDB cloud instance that is ready to use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configure-the-schema-and-table"&gt;
  &lt;/a&gt;
  Configure the Schema and Table
&lt;/h2&gt;

&lt;p&gt;We need to create a schema and table to insert a few records into the DB. To do that, load the HarperDB cloud instance from the dashboard. First, create a schema by specifying a schema name. For our app, let's give a schema name as &lt;code&gt;library&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dlz_s_BQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622433555806/DyV3g-UdD.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dlz_s_BQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622433555806/DyV3g-UdD.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="11.png"&gt;&lt;/a&gt;&lt;br&gt;
Figure 2.1: Create a Schema&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next, let's specify a table name. Let's specify &lt;code&gt;book&lt;/code&gt; as the table name and create. Please note, you have to specify a &lt;code&gt;hash_attribute&lt;/code&gt; for the table. HarperDB will auto-generate the value for it. You may manually add it if you want to specify its value. In our case, we will let HarperDB create it. Let's specify the &lt;code&gt;id&lt;/code&gt; column as the hash_attribute for the &lt;code&gt;book&lt;/code&gt; table.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XUkr2y26--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622434489898/itNE2fdrt.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XUkr2y26--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622434489898/itNE2fdrt.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="12.png"&gt;&lt;/a&gt;&lt;br&gt;
Figure 2.2: Create a Table&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#populate-data-in-harperdb"&gt;
  &lt;/a&gt;
  Populate data in HarperDB
&lt;/h2&gt;

&lt;p&gt;We will now populate data in HarperDB. We will insert a few records of books into the &lt;code&gt;book&lt;/code&gt; table using the HarperDB user interface. You can insert one record by specifying a JSON object or multiple records at once by specifying an array of JSON objects. Let us create a book record by specifying these properties and values,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Kyle Simpson&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="nx"&gt;cover&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://res.cloudinary.com/atapas/image/upload/v1622356611/book-covers/you_dont_know_js_1_le1xk5.jpg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;No matter how much experience you have with JavaScript, odds are you don’t fully understand the language. As part of the series, this compact guide focuses on new features available in ECMAScript 6 (ES6), the latest version of the standard upon which JavaScript is built.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;isbn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;9781491904244&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;pages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;278&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;published&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2015-12-27T00:00:00.000Z&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;publisher&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;O&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;Reilly Media&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;rating&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;subtitle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ES6 &amp;amp; Beyond. It covers all aspects of javaScript deep down.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;You Don&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;t Know JS&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;topic&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;JavaScript&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;website&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://github.com/getify/You-Dont-Know-JS/tree/master/es6%20&amp;amp;%20beyond&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Click on the save icon to save the record.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iEFNVpci--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622434576388/c6N63Mpfn.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iEFNVpci--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622434576388/c6N63Mpfn.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="13.png"&gt;&lt;/a&gt;&lt;br&gt;
Figure 3.1: Insert a book record&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Similarly, you can insert multiple records. So please insert a few more records as the book library must contain more than just one book!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A4ZtEsV9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622434591409/P3jIqDL61.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A4ZtEsV9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622434591409/P3jIqDL61.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="14.png"&gt;&lt;/a&gt;&lt;br&gt;
Figure 3.2: Book Records&lt;/p&gt;

&lt;p&gt;You can make use of the JSON data from my &lt;a href="https://github.com/atapas/flicks/blob/main/data/books.json"&gt;GitHub Repository&lt;/a&gt; to create multiple records.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Congratulations 🎉 !!! You have completed the database setup with the required data. Now, we will move our focus towards building the User Interface for the book library app.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#gatsbyjsaka-gatsby"&gt;
  &lt;/a&gt;
  Gatsbyjs(aka Gatsby)
&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;Gatsby&lt;/code&gt; is a React-based framework that allows you to build fast, secure, and robust websites. You can create markups with data at the build time and deploy the built artifacts to serve your pages much faster. It gives a phenomenal performance and speed improvement over the traditional client-server model. We will use Gatsby to create prebuilt markups using the data record added to the HarperDB.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#gatsby-plugin-for-harperdb"&gt;
  &lt;/a&gt;
  Gatsby Plugin for HarperDB
&lt;/h2&gt;

&lt;p&gt;Gatsby's massive plugin ecosystem allows us to pull data from several data sources, avail themes, and many more use-cases. Unfortunately, I couldn't find any existing Gatsby plugin for the HarperDB data source. But, as they say, &lt;em&gt;necessity is the mother and all inventions&lt;/em&gt;, I thought of creating one!&lt;/p&gt;

&lt;p&gt;%[&lt;a href="https://twitter.com/tapasadhikary/status/1397940296474714113"&gt;https://twitter.com/tapasadhikary/status/1397940296474714113&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;So now we have a Gatsby Plugin for HarperDB (&lt;code&gt;gatsby-source-harperdb&lt;/code&gt;) that allows you to use the HarperDB as the data source so that a Gatsby project can pull the data at the build time. You can find the source code of the plugin from here,&lt;/p&gt;

&lt;p&gt;%[&lt;a href="https://github.com/atapas/gatsby-source-harperdb"&gt;https://github.com/atapas/gatsby-source-harperdb&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;It is also available as an official plugin to install from the &lt;a href="https://www.gatsbyjs.com/plugins/gatsby-source-harperdb/?=Harper"&gt;Gatsby's plugin page&lt;/a&gt;. So please give it a try.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-a-gatsby-project"&gt;
  &lt;/a&gt;
  Setting up a Gatsby Project
&lt;/h2&gt;

&lt;p&gt;Alright, it's time to create our gatsby project. First, install the gatsby command-line interface(CLI) tool. Open a command prompt and use this command to install it globally,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;gatsby-cli &lt;span class="nt"&gt;-g&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will use the latest gatsby version 3.x to bootstrap our project. Gatsby provides many starter projects to get started with the development faster. Now let's create a gatsby project. Try this command from the command prompt,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;gatsby new
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will ask you a few questions like the site name, what kind of CSS library support you need, what are plugins you want to install? The image below shows my answers. You can choose to go with the same or anything else suitable for you.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://cdn.hashnode.com/res/hashnode/image/upload/v1622464125774/FQ6drNgux.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VDqFy1Uv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622464125774/FQ6drNgux.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="gatsby_new.png"&gt;&lt;/a&gt;&lt;br&gt;
Figure 4.1: Creating a Gatsby Project&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Please give it a while to complete the installation and set up the project for you. Once done, you should see a folder created with the site name provided by you in the last step. For me, it is &lt;code&gt;flicks&lt;/code&gt;. Please change to the project directory and try this command from the command line,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;gatsby develop
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will run the project in the development mode. First, it will build the project and then host the prebuilt markups from a server locally to access the app. By default, the app will run on the URL, &lt;code&gt;http://localhost:8000&lt;/code&gt;. Please open a browser window/tab and try the URL. You should see your app up and running,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_tkV7pRi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622435003659/6M2PFHfT2.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_tkV7pRi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622435003659/6M2PFHfT2.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="gatsby_8.png"&gt;&lt;/a&gt;&lt;br&gt;
Figure 4.2: The Initial App&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#configure-harperdb-with-our-gatsby-app"&gt;
  &lt;/a&gt;
  Configure HarperDB with our Gatsby App
&lt;/h2&gt;

&lt;p&gt;Let's configure the HarperDB with our Gatsby app. We will use the &lt;code&gt;gatsby-source-harperdb&lt;/code&gt; plugin. Please install it using the following command,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;gatsby-source-harperdb

&lt;span class="c"&gt;# If you are using yarn, try this,&lt;/span&gt;
&lt;span class="c"&gt;# yarn add gatsby-source-harperdb&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now create a file called &lt;code&gt;.env&lt;/code&gt; at the root of the project folder. Please specify the API auth header key and the instance URL in the .env file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;HARPER_DB_SECRET_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;API_KEY_VALUE
&lt;span class="nv"&gt;HARPER_DB_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;CLOUD_INSTANCE_VALUE
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Please replace the &lt;code&gt;API_KEY_VALUE&lt;/code&gt; with the API auth header key we copied before. Also, replace the &lt;code&gt;CLOUD_INSTANCE_VALUE&lt;/code&gt; with your cloud instance value. The URL ends with &lt;code&gt;.harperdbcloud.com&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Please make sure you add an entry of &lt;code&gt;.env&lt;/code&gt; in your &lt;code&gt;.gitignore&lt;/code&gt; file. You may not want to commit and push this file to your GitHub repository.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We need to install the &lt;code&gt;dotenv&lt;/code&gt; package to read environment variables from the &lt;code&gt;.env&lt;/code&gt; file. You can install it using this command,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;dotenv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now open the &lt;code&gt;gatsby-config.js&lt;/code&gt; file at the root of the project folder. It is a file to configure all the gatsby plugins required for the project. You may find a few plugin entries already. We have installed those while creating the project. Add this line at the top of the &lt;code&gt;gatsby-config.js&lt;/code&gt; file,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, please add the configuration for the &lt;code&gt;gatsby-source-harperdb&lt;/code&gt; in the config file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
     &lt;span class="p"&gt;....&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`gatsby-source-harperdb`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HARPER_DB_SECRET_KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HARPER_DB_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;operation&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sql&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sql&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;SELECT * FROM library.book&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;books&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Please note the &lt;code&gt;options&lt;/code&gt; in the above configuration,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We read the API Key from the &lt;code&gt;.env&lt;/code&gt; file and use it for the &lt;code&gt;secret&lt;/code&gt; value.&lt;/li&gt;
&lt;li&gt;Similarly, we get the HarperDB cloud instance URL from the .env file and use it in the configuration.&lt;/li&gt;
&lt;li&gt;Next is the &lt;code&gt;payload&lt;/code&gt; that we use to query HarperDB. Here we are specifying the SQL query to retrieve the data from the &lt;code&gt;book&lt;/code&gt; table of the &lt;code&gt;library&lt;/code&gt; schema.&lt;/li&gt;
&lt;li&gt;Last, specify the value of the &lt;code&gt;type&lt;/code&gt; property. It can be any string of your choice. It is the name under which your data will appear in Gatsby GraphQL queries. For example, if we specify &lt;code&gt;books&lt;/code&gt; as the type name, Gatsby will create GraphQL queries as &lt;code&gt;allBooks&lt;/code&gt; and &lt;code&gt;books&lt;/code&gt;. We will see that in a while.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are running the &lt;code&gt;gatsby develop&lt;/code&gt; already, please stop it(using the &lt;code&gt;control + c&lt;/code&gt; key combination) and start again.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fetch-the-book-records-in-the-ui"&gt;
  &lt;/a&gt;
  Fetch the Book records in the UI
&lt;/h2&gt;

&lt;p&gt;Gatsby source plugins make the data available to query using GraphQL queries. In addition, it provides a GraphQL playground for us to try out the queries before we use them in the app. To Open the GraphQL playground and query the book data from the HarperDB, please open this URL in your browser tab: &lt;a href="http://localhost:8000/___graphql"&gt;http://localhost:8000/___graphql&lt;/a&gt;. You should see the &lt;code&gt;allBooks&lt;/code&gt; and &lt;code&gt;books&lt;/code&gt; types under the explorer.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bdpq_uuS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622472609825/tV-vJsmPP.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bdpq_uuS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622472609825/tV-vJsmPP.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="GraphQL Explorer"&gt;&lt;/a&gt;&lt;br&gt;
Figure 5.1: GraphQL Explorer&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now expand the &lt;code&gt;allBooks&lt;/code&gt; type from the explorer. Then expand the &lt;code&gt;nodes&lt;/code&gt; node and select the attributes to query. As you select, you will see the query is getting built automatically. Now, execute the query using the &lt;code&gt;Execute Query&lt;/code&gt; button at the top. You will see the result of the query at the rightmost pane. Please refer to the image below.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TI7bU17U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622472933951/e5SL4rTHA.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TI7bU17U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622472933951/e5SL4rTHA.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="GraphQL Query"&gt;&lt;/a&gt;&lt;br&gt;
Figure 5.2: GraphQL Query Execution&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We will now use this query in our UI code(React components) to build the user interfaces.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#build-the-user-interfacesui"&gt;
  &lt;/a&gt;
  Build the User Interfaces(UI)
&lt;/h2&gt;

&lt;p&gt;Now we will build the user interfaces using this query to show the books in the UI. In the UI, we will first list all the books with details like title, topic, cover, author, subtitle. Then, when users click on any of the books, we take them to a details page to show more details about that book.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-the-book-listing-page"&gt;
  &lt;/a&gt;
  Create the Book Listing Page
&lt;/h3&gt;

&lt;p&gt;Let us create the book listing page. Open the &lt;code&gt;index.js&lt;/code&gt; file under the &lt;code&gt;src/pages&lt;/code&gt; folder. Replace the content of the file with the following content,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;// 1. Import React, Styled-Components, and gatsby&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useStaticQuery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;graphql&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gatsby&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// 2. Create Styled Components&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Main&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
    display: flex;
    flex-direction: column;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Container&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    align-items: center;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Book&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
    border: 1px solid #4e4e4e;
    border-radius: 4px;
    padding: 0.5rem;
    width: 250px;
    min-height: 450px;
    margin: 1rem;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ResponsiveImage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="s2"&gt;`
    width: 100%;
    height: auto;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="s2"&gt;`
    font-size: 20px;
    font-weight: 500;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// 3. The IndexPage Component&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;IndexPage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// 4. Query the data using GraphQL query&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useStaticQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;graphql&lt;/span&gt;&lt;span class="s2"&gt;`
        {
            allBooks {
                nodes {
                    title
                    id
                    author
                    cover
                    rating
                    subtitle
                    topic
                }
            }
        }
    `&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;books&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;allBooks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;books&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rating&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rating&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="c1"&gt;// 5. The Markup to render with the data&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Main&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Container&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;books&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Book&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;topic&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cover&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ResponsiveImage&lt;/span&gt;
                                    &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cover&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                                    &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                                &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                            &lt;span class="p"&gt;)}&lt;/span&gt;
                        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Title&amp;gt; by{" "&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;                        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subtitle&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rating&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Book&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                &lt;span class="p"&gt;))}&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Container&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Main&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;IndexPage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let us go over the code above and understand. It is a regular React component where,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We import &lt;code&gt;React&lt;/code&gt;, &lt;code&gt;Styled-Components&lt;/code&gt;, and &lt;code&gt;gatsby&lt;/code&gt; libraries.&lt;/li&gt;
&lt;li&gt;Create Styled Components for the main page, container inside it, and each box to show the book information.&lt;/li&gt;
&lt;li&gt;Then, we start the &lt;code&gt;IndexPage&lt;/code&gt; component.&lt;/li&gt;
&lt;li&gt;In the component, we use the GraphQL query to fetch the &lt;code&gt;books&lt;/code&gt; data. We fetch only the required attributes for the listing page. Please notice we use the &lt;code&gt;useStaticQuery&lt;/code&gt; hook from gatsby to perform the fetch. Gatsby recommends this hook to fetch data using the GarphQL queries inside a Gatsby component. We also sort the books based on the rating.&lt;/li&gt;
&lt;li&gt;Last, we have the markup to render using the data.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now refresh the page where the app is running. You will see a list of books with details like the image below,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fs5yT-7n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622474808172/-fjZUBJvm.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fs5yT-7n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622474808172/-fjZUBJvm.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="Book Listing Page"&gt;&lt;/a&gt;&lt;br&gt;
Figure 5.2.1: The Book Listing Page&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#create-the-book-details-page"&gt;
  &lt;/a&gt;
  Create the Book Details Page
&lt;/h3&gt;

&lt;p&gt;Great! Let us now implement the book details page. It will show a book's details when the user clicks on book information from the listing page. Gatsby provides a super cool feature of creating pages ahead in time(build time) using templates. So, we can create a single template for all the book details as we will show a similar structure for all the books.&lt;/p&gt;

&lt;p&gt;Create a folder called &lt;code&gt;templates&lt;/code&gt; under the &lt;code&gt;src&lt;/code&gt; folder. Now create a file called &lt;code&gt;BookDetails.js&lt;/code&gt; under &lt;code&gt;src\templates&lt;/code&gt; with the following content.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;// 1. Import required libraries&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;graphql&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gatsby&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Create the Styled Components&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Container&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
    display: flex;
    flex-direction: column;
    align-items: center;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AnchorButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="s2"&gt;`
    display: block;
    width: auto;
    height: 25px;
    background: #00ebff;
    padding: 10px;
    text-align: center;
    border-radius: 5px;
    color: #000000;
    font-weight: bold;
    line-height: 25px;
    text-transform: uppercase;
    &amp;amp;:hover {
        color: #2e2222;
    }
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// 3. The BookDetails Component&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;BookDetails&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;details&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;books&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Container&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;details&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;By&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&amp;gt; {}{" "&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;fontSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;20px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;details&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/b&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt;
                &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;details&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cover&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;details&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;40%&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
                &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;auto&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;

            &lt;span class="na"&gt;Rating&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;details&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rating&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;fontSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;20px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Pages&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/b&amp;gt;: {details.pages&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&amp;gt;{" "&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;                &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; | &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Publisher&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/b&amp;gt;: {details.publisher&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&amp;gt;{" "&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;                &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; | &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;ISBN&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/b&amp;gt;: {details.isbn&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;fontSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;25px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;details&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;AnchorButton&lt;/span&gt;
                &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;details&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;website&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;_blank&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
                &lt;span class="nx"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;noreferrer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nx"&gt;Go&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;Website&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/AnchorButton&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Container&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// 4. Gatsby Page/Template Query&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;graphql&lt;/span&gt;&lt;span class="s2"&gt;`
    query ($title: String!) {
        books(title: { eq: $title }) {
            author
            cover
            description
            id
            isbn
            pages
            published
            publisher
            rating
            subtitle
            title
            topic
            website
        }
    }
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;BookDetails&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are doing the followings in the template code above,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Import all required libraries for the template to work.&lt;/li&gt;
&lt;li&gt;Create Styled Components for UI structure to show the book details.&lt;/li&gt;
&lt;li&gt;Then, we create the &lt;code&gt;BookDetails&lt;/code&gt; React component and render the book details. Please note, we pass a prop to the component as &lt;code&gt;{ data }&lt;/code&gt;. It means we are performing destructuring here to extract the &lt;code&gt;data&lt;/code&gt; from an object. But, from which object?&lt;/li&gt;
&lt;li&gt;In a gatsby project, pages and templates use the result of a query as the prop. Please note the GraphQL query at the bottom of the source code. Here we are performing a filter query to filter out a book by its title. The result of this query will be passed automatically to the BookDetails component as a prop. We extract the data from that and use it for the rendering.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, as we have the template ready, we need to use it to create the pages for each of the books. Let's configure that.&lt;/p&gt;

&lt;p&gt;Create a file called &lt;code&gt;gatsby-node.js&lt;/code&gt; at the root of the project folder with the following content. It is a special file that helps in invoking Gatsby APIs and overrides them to customize things.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`path`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lodash&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createPages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;graphql&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;actions&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createPage&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;graphql&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`
        query {
            allBooks {
                edges {
                    node {
                        title
                    }
                }
            }
        }
    `&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;allBooks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;edges&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;edge&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;createPage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;kebabCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;edge&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;/`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`./src/templates/BookDetails.js`&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="na"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// Data passed to context is available&lt;/span&gt;
                &lt;span class="c1"&gt;// in page queries as GraphQL variables.&lt;/span&gt;
                &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;edge&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are using the &lt;code&gt;createPages&lt;/code&gt; API of Gatsby to create pages based on the query. First, the query fetches all the book titles. Then, it creates a page using the template for each of the titles and passes the title as a context. Each page will be accessed using a unique URL we build with the &lt;code&gt;path&lt;/code&gt; attribute. Also, if you recall, we use the title in the template to filter the book information.&lt;/p&gt;

&lt;p&gt;Please note, we use the &lt;code&gt;lodash&lt;/code&gt; library to utilize its method for formatting a URL fragment. Usually, a title may have spaces, and the URL doesn't accept that. So we use the &lt;code&gt;_.kebabCase(edge.node.title)&lt;/code&gt; to replace the spaces with a hyphen(-) character. Please install &lt;code&gt;lodash&lt;/code&gt; as a dependency.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;lodash
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now restart &lt;code&gt;gatsby develop&lt;/code&gt; once more. Next time when the &lt;code&gt;gatsby develop&lt;/code&gt; runs, it will create the pages for all the books using the template.&lt;/p&gt;

&lt;p&gt;So let us now create a link from each of the books on the book listing page to its respective details page. Please open the &lt;code&gt;index.js&lt;/code&gt; file. Include these two imports at the top,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ... Other imports&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lodash&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gatsby&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, wrap the &lt;code&gt;&amp;lt;Book&amp;gt;&lt;/code&gt; tag using the &lt;code&gt;Link&lt;/code&gt; like this,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;books&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;kebabCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Book&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="nx"&gt;All&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;previous&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Book&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Link&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;))}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Please note the &lt;code&gt;to&lt;/code&gt; attribute of the &lt;code&gt;Link&lt;/code&gt;. It links you to the URL fragment created using the title the same way we mapped the pages in the &lt;code&gt;gatsby-node.js&lt;/code&gt; file. Save your changes and refresh the app in the browser. Now, you will be able to click on the books from the listing page. Click on a book, and you should land on a details page like the one shown below,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L_LpxpTn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622523947978/ISpMelssO.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L_LpxpTn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622523947978/ISpMelssO.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Figure 5.2.2: Book Details Page&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That's it. We have the book library app ready with basic functionality. Please feel free to enhance the look and feel of the app using styles. You can add features like searching a book, filtering, many more.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#deploying-on-gatsby-cloud"&gt;
  &lt;/a&gt;
  Deploying on Gatsby Cloud
&lt;/h1&gt;

&lt;p&gt;Welcome to the last section of the article. Now we will deploy the library app to the &lt;code&gt;Gatsby Cloud&lt;/code&gt; with a few quick steps. At this stage, please create a repository on GitHub and push all the code.&lt;/p&gt;

&lt;p&gt;Please &lt;a href="https://www.gatsbyjs.com/products/cloud/"&gt;Create an account&lt;/a&gt; with Gatsby Cloud and Log in. Please select the free build and hosting plans while creating the account. Next, click on the &lt;code&gt;Add a site&lt;/code&gt; button.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8ZNPCoAW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622434915683/R4nEB7cS7.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8ZNPCoAW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622434915683/R4nEB7cS7.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="Add a Site"&gt;&lt;/a&gt;&lt;br&gt;
Figure 6.1: Add a Site&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Select the &lt;code&gt;Import from a Git repository&lt;/code&gt; option and click on the &lt;code&gt;Next&lt;/code&gt; button.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uGwyLfVK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622434930979/_BGgOwtcT.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uGwyLfVK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622434930979/_BGgOwtcT.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="Git Repo"&gt;&lt;/a&gt;&lt;br&gt;
Figure 6.2: Select from a Git Repo&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Assuming you have pushed your code to the GitHub repository, please select the &lt;code&gt;GitHub&lt;/code&gt; option.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KOg0OHa4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622434938539/9LuOJluGZ.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KOg0OHa4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622434938539/9LuOJluGZ.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="Select Repository Type"&gt;&lt;/a&gt;&lt;br&gt;
Figure 6.3: Select Repository Type&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Please provide the repository details and the site name and got to the next step.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KVnjFa5K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622434949080/1LDBtofL2.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KVnjFa5K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622434949080/1LDBtofL2.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="Repo Details"&gt;&lt;/a&gt;&lt;br&gt;
Figure 6.4: Provide Repository Details&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We will not use any CMS for our application. Therefore, you can skip the step of selecting the CMS.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7KfzBPny--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622434958522/y9TydhgFG.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7KfzBPny--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622434958522/y9TydhgFG.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="Skip CMS"&gt;&lt;/a&gt;&lt;br&gt;
Figure 6.5: Skip CMS&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the last step, please provide the environment variable details and finish the setup.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EvSj7OTB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622519233508/AOWv8OJte.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EvSj7OTB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622519233508/AOWv8OJte.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="ENV Details"&gt;&lt;/a&gt;&lt;br&gt;
Figure 6.6: Provide Environment Details&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now a build should get triggered automatically. Once the build is successful, the app will be available at &lt;code&gt;https://&amp;lt;YOUR_SITE_NAME&amp;gt;.gatsbyjs.io&lt;/code&gt;. In my case, it is &lt;a href="//flicks.gatsbyjs.io"&gt;flicks.gatsbyjs.io&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qjHVMGXO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622434983592/nWP0ey-vz.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qjHVMGXO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622434983592/nWP0ey-vz.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="Trigger Build"&gt;&lt;/a&gt;&lt;br&gt;
Figure 6.7: Trigger Build&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That's all. We have come to the end of this article. I hope you found it insightful. Thanks for reading and trying out. Please feel free to comment below with the link to your app. Also, feel free to &lt;a href="https://github.com/atapas/flicks/issues"&gt;reach out to me&lt;/a&gt; if you face any issues in following the article.&lt;/p&gt;




&lt;p&gt;I hope you enjoyed this article or found it helpful. Let's connect. You can find me on &lt;a href="https://twitter.com/tapasadhikary"&gt;Twitter(@tapasadhikary)&lt;/a&gt;, sharing thoughts, tips, and code practices.&lt;/p&gt;

&lt;p&gt;You may also like,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.greenroots.info/why-do-you-need-to-do-side-projects-as-a-developer-ckhn5m5km05teajs1fvjd7u5f"&gt;Why do you need to do Side Projects as A Developer?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.greenroots.info/16-side-project-github-repositories-you-may-find-useful-ckk50hic406quhls1dui2d6sd"&gt;16 side project GitHub repositories you may find helpful&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.greenroots.info/build-test-and-publish-your-npm-i-just-did-it-in-few-minutes-ck3dwi1j100vzo4s15qy8ail9"&gt;Build, Test and Publish your NPM, I just did it in few minutes!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>jamstack</category>
      <category>harperdb</category>
      <category>gatsby</category>
    </item>
    <item>
      <title>I'm switching to vim!</title>
      <author>Siddharth</author>
      <pubDate>Tue, 15 Jun 2021 05:07:12 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/i-m-switching-to-vim-867</link>
      <guid>https://dev.to/siddharthshyniben/i-m-switching-to-vim-867</guid>
      <description>&lt;p&gt;I just took a short look at the (neo)vim docs, and I'm officially moving to (neo)vim (and tmux)! I have just used it for a few days, but I really can feel the power it gives me. Not to mention that it really saves my 6GB ram for other uses.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
A snapshot of my coding session




&lt;p&gt;And I encourage all of you to do the same. It really is super faster (I come from vscode, and it is really faster). Vim has everything you need – Syntax highlighting, Split screen, File explorers(!), Autocomplete(!), Tabs, Folding lines(!), Indentation autofixing(!), macros, line bookmarks, integrated terminal like interface and what not (I should make an article on it soon). Vim is basically equivalent to VSCode for me. &lt;/p&gt;

</description>
      <category>vim</category>
      <category>tmux</category>
      <category>terminal</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Python's Collections Module: Why dictionaries maintain insertion order but printing Counter doesn't?</title>
      <author>Kathan Vakharia</author>
      <pubDate>Tue, 15 Jun 2021 04:47:18 +0000</pubDate>
      <link>https://dev.to/kathanvakharia/python-s-collections-module-why-dictionaries-maintain-insertion-order-but-printing-counter-doesn-t-4jg5</link>
      <guid>https://dev.to/kathanvakharia/python-s-collections-module-why-dictionaries-maintain-insertion-order-but-printing-counter-doesn-t-4jg5</guid>
      <description>&lt;h2&gt;
  &lt;a href="#do-dictionaries-in-python-maintain-insertion-order"&gt;
  &lt;/a&gt;
  Do dictionaries in python maintain insertion  order?
&lt;/h2&gt;

&lt;p&gt;Well if your answer was NO, time to update your python knowledge because they do maintain their insertion order in python 3.6+  and completely from python 3.7+&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EWgrq5H5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5lg6g8i4apqkzl9s3rba.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EWgrq5H5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5lg6g8i4apqkzl9s3rba.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But a &lt;code&gt;Counter&lt;/code&gt; object doesn't,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt; 

&lt;span class="n"&gt;nums&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;#You would expect the order of counts,
# to be 1-&amp;gt;2-&amp;gt;3-&amp;gt;5
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="s"&gt;"""Output: But it didn't work that way!

Counter({2: 3, 5: 3, 1: 2, 3: 1})
"""&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#why-printing-counter-doesnt-maintain-insertion-order-despite-the-fact-it-is-a-dict-subclass"&gt;
  &lt;/a&gt;
  Why printing Counter doesn't maintain insertion order despite the fact it is a dict sub-class?
&lt;/h2&gt;

&lt;p&gt;The reason behind this is the &lt;code&gt;__repr__&lt;/code&gt;  method implementation of Counter object.&lt;br&gt;
The  &lt;code&gt;__repr__&lt;/code&gt; method decides object's representation when displaying it using &lt;code&gt;print()&lt;/code&gt; function. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cZQawNbZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jgy562b29dofjbtx7w12.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cZQawNbZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jgy562b29dofjbtx7w12.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Don't worry if above definition looks complex at first sight :)&lt;/p&gt;

&lt;p&gt;Let's try to get insights from this method definition, &lt;/p&gt;

&lt;p&gt;Focus on the code inside the &lt;code&gt;try&lt;/code&gt; block because that's what decides what happens while we print a &lt;code&gt;Counter&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Aha! we can see the call to &lt;code&gt;most_common method&lt;/code&gt; and that's what causing the &lt;strong&gt;descending&lt;/strong&gt; order. MYSTERY SOLVED🔥 or is it?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L4M6wjQ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/63hnr6dbwawvgketp2ol.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L4M6wjQ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/63hnr6dbwawvgketp2ol.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#but"&gt;
  &lt;/a&gt;
  But...
&lt;/h3&gt;

&lt;p&gt;You might have a doubt. Considering Counter is infact a  sub class of &lt;code&gt;builtins.dict&lt;/code&gt;, why it doesn't obey dictionary class's   &lt;code&gt;__repr__&lt;/code&gt;  and maintain insertion order 🤔&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-method-resolution-order-mro"&gt;
  &lt;/a&gt;
  The Method Resolution Order (MRO)
&lt;/h2&gt;

&lt;p&gt;To put it simply, &lt;strong&gt;MRO&lt;/strong&gt; defines the &lt;em&gt;order&lt;/em&gt; in which python interpreter searches a method for a particular object,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LaCq5eeX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oqogygv9ctryppic9t5b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LaCq5eeX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oqogygv9ctryppic9t5b.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Method Resolution Order&lt;/strong&gt; can be found using &lt;code&gt;ClassName.__mro__&lt;/code&gt;  attribute or calling &lt;code&gt;help&lt;/code&gt; on that Class.&lt;/p&gt;

&lt;p&gt;It is evident that, &lt;code&gt;__repr__&lt;/code&gt; of Counter's priority is higher than that of &lt;code&gt;builtins.dict&lt;/code&gt;  and that's the reason while printing Counter object doesn't maintain insertion order.&lt;/p&gt;

&lt;p&gt;Then how the heck &lt;code&gt;Counter&lt;/code&gt; can maintain insertion order when printing it 😐, How about you find yourself? OR as always&lt;/p&gt;

&lt;p&gt;STAY TUNED for the next post 😉&lt;/p&gt;

</description>
      <category>python</category>
      <category>codenewbie</category>
      <category>collections</category>
    </item>
    <item>
      <title>Roads quality in Asia 2006-2019</title>
      <author>ChiCongNguyen</author>
      <pubDate>Tue, 15 Jun 2021 04:16:40 +0000</pubDate>
      <link>https://dev.to/congnguyen/roads-quality-in-asia-2006-2019-24cj</link>
      <guid>https://dev.to/congnguyen/roads-quality-in-asia-2006-2019-24cj</guid>
      <description>&lt;p&gt;In south asia, we could see the top one is Singapore&amp;gt;&amp;gt;Malaysia&amp;gt;&amp;gt;Thailand&amp;gt;&amp;gt;Indonesia&amp;gt;&amp;gt;Laos&amp;gt;&amp;gt;Cambodia&amp;gt;&amp;gt;VietNam&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--icmmBf9s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/62sdt2c579rqt790wa9g.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--icmmBf9s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/62sdt2c579rqt790wa9g.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://www.theglobaleconomy.com/rankings/roads_quality/Asia/"&gt;https://www.theglobaleconomy.com/rankings/roads_quality/Asia/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>logistics</category>
    </item>
    <item>
      <title>Object destructuring in JavaScript</title>
      <author>Hidayt Rahman</author>
      <pubDate>Tue, 15 Jun 2021 04:12:55 +0000</pubDate>
      <link>https://dev.to/hidaytrahman/object-destructuring-in-javascript-21h8</link>
      <guid>https://dev.to/hidaytrahman/object-destructuring-in-javascript-21h8</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qg7V7kgA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/26e0bi64mcr5k0n0bsvh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qg7V7kgA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/26e0bi64mcr5k0n0bsvh.png" alt="Object destructuring in JavaScript"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Object destructuring is a useful JavaScript feature to extract properties from objects and bind them to variables. What’s better, object destructuring can extract multiple properties in one statement, can access properties from nested objects, and can set a default value if the property doesn’t exist.&lt;/p&gt;

&lt;p&gt;Normally, we access objects with the key. Nothing new :)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;object.key
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s have quick look at the example below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// object (Literal)
var user = {
    name: "Hidayt",
    city: "Delhi",
    type: "Admin"
}
console.log(user.name); // Hidayt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have a user object which contains user info (name, city, type). We will be using this example for object destructuring.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#object-destructuring"&gt;
  &lt;/a&gt;
  Object destructuring
&lt;/h2&gt;

&lt;p&gt;Let’s use object destructuring and Destructuring the object into our variables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// object destructuring
var {name, city, type} = user;
// access as a normal variable
console.log(name); // Hidayt
console.log(city); // Delhi
console.log(type); // Admin
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can access name directly instead of user.name&lt;/p&gt;

&lt;p&gt;Now it can be accessible as a normal variable.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Destructuring makes code tidy and easy to access.&lt;/em&gt;&lt;/p&gt;



</description>
      <category>javascript</category>
      <category>objectdesctructuring</category>
      <category>webtechpie</category>
    </item>
    <item>
      <title>The Advanced Challenge of Load Balancing</title>
      <author>RainrainWu</author>
      <pubDate>Tue, 15 Jun 2021 03:57:02 +0000</pubDate>
      <link>https://dev.to/rainrainwu/the-advanced-challenge-of-load-balancing-ccb</link>
      <guid>https://dev.to/rainrainwu/the-advanced-challenge-of-load-balancing-ccb</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Not all traffic can be arbitrarily routed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While taking the responsibility of a mature service, it may not be possible for a single server to handle all the workload. This is due to three main considerations: performance, availability, and economy.&lt;/p&gt;

&lt;p&gt;In order to handle the excessive traffic well, increasing the capacity of processing requests is necessary, it can be achieved by either scale-up or scale-out.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J_8T_9J3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lcpnwrjcfmg1blqz9era.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J_8T_9J3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lcpnwrjcfmg1blqz9era.jpeg" alt="Photo by Piret Ilver on Unsplash"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Photo by Piret Ilver on Unsplash&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;However, machine failures happen, and the cost of using top specification machines may not be affordable. Spread the workload evenly into multiple general workers sounds like a more feasible solution in most cases.&lt;/p&gt;

&lt;p&gt;This seems pretty natural….right?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Yes, but actually not.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The architecture works for most stateless APIs, but this newly added "Spread" behavior adds some uncertainty for other stateful interactions.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#session"&gt;
  &lt;/a&gt;
  Session
&lt;/h1&gt;

&lt;p&gt;Any techniques that make the servers store "state", which results in different logical behaviors between them, may conflict with the general load balancing architecture above.&lt;/p&gt;

&lt;p&gt;Using sessions on the web service is a classic case.&lt;/p&gt;

&lt;p&gt;Limited by the stateless design of HTTP protocol, in order to allow users to have continuity in each operation, the context information was stored on the server-side within a certain period of time, such as login status and shopping cart.&lt;/p&gt;

&lt;p&gt;Just like taking out a meal in the real world. Customers can get a number plate after ordering a meal at the counter, and they can pick up the meal with the number plate when it is ready.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o473y1kt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/0%2ADw2Irliq0pHz0KSd" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o473y1kt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/0%2ADw2Irliq0pHz0KSd" alt="Photo by Brooke Cagle on Unsplash"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Photo by Brooke Cagle on Unsplash&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ordering a meal and pick it up are two independent steps for customers but with continuous logic, this is because the counter already stores the data of who they are and what they have ordered, and could be retrieved by the number plate they provided.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sticky-session"&gt;
  &lt;/a&gt;
  Sticky Session
&lt;/h2&gt;

&lt;p&gt;Well, most of the time, the number plate can only be used in the same shop, we can not take the plate we got at A store to ask B store for our meal.&lt;/p&gt;

&lt;p&gt;This principle is the same on web services, because the session data may not be shared. There are two main directions to solve this problem:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Share session data between all web server with external storage (e.g. Redis cluster)&lt;/li&gt;
&lt;li&gt;Force all the requests from the same client dispatched to the same server.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first one is a little bit more complex and out of the scope of this story, I will focus on the second solution here.&lt;/p&gt;

&lt;p&gt;Maintaining the mapping relationships between the clients and web servers can help us forward each client to the same server they connected to last time, which currently handles the session context for them.&lt;/p&gt;

&lt;p&gt;This can be achieved by various identifiers from the client-side like IP addresses and cookies. Many well-known load-balancing solutions provide this option with different approaches, such as AWS NLB/ALB, GCP Cloud Load Balancer, and Envoy from CNCF.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Iz9-b0a_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/0%2A-wq4j3GYElMK5tjB" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Iz9-b0a_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/0%2A-wq4j3GYElMK5tjB" alt="Photo by Benedetta Pacelli on Unsplash"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Photo by Benedetta Pacelli on Unsplash&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;However, enable the sticky sessions option is equivalent to adding a hard rule the may conflict with traffic balancing. For example, while handling a vast amount of client requests with the same IP address, an IP-based sticky session may not be a good choice since it may cause part of the servers under a heavy workload.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#websocket"&gt;
  &lt;/a&gt;
  WebSocket
&lt;/h1&gt;

&lt;p&gt;In modern software services, there are many situations that require real-time updates of information, such as stock market transactions, online games, and chat rooms.&lt;/p&gt;

&lt;p&gt;Using the polling strategy which driven by the periodic requests sent by the client-side sounds not economical, we need to afford the cost of TCP connections for each request, and it is very likely that there is no information to update.&lt;/p&gt;

&lt;p&gt;WebSocket with full-duplex communication is a solution worth trying. It allows the server-side to actively push messages to the client-side, effectively avoiding meaningless requests.&lt;/p&gt;

&lt;p&gt;However, a long-live connection between the client and the server would be maintained after the first request …&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We are actually balancing the connections, not the workloads.&lt;/p&gt;

&lt;p&gt;Any problem with this?&lt;br&gt;
The main risk is that the workload cannot be properly distributed among multiple machines:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Different connections have different workloads at the same time. For chat software servers, users with many friends may have a much higher connection workload than users without friends (so sad …).&lt;/li&gt;
&lt;li&gt;The same connection has different workloads at different times. An obvious example is a game server, especially large open-world RPGs. When a character browses and trades items in the market, the required data transmission may be relatively small, but the workload may increase dramatically in an instant because many characters frequently move and cast skills during guild wars.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mYF4nuEn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/0%2A9cKCUJctoB33z1mX" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mYF4nuEn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/0%2A9cKCUJctoB33z1mX" alt="Photo by Chanhee Lee on Unsplash"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Photo by Chanhee Lee on Unsplash&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To avoid a single server carrying too much workload, there are two main directions to solve this problem:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lower the metrics value upper bound for cluster scale-out trigger&lt;/li&gt;
&lt;li&gt;Reshape the Traffic by Reconnecting&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#lower-the-metrics-value-upper-bound-for-cluster-scaleout-trigger"&gt;
  &lt;/a&gt;
  Lower the metrics value upper bound for cluster scale-out trigger
&lt;/h2&gt;

&lt;p&gt;Assuming that after a period of observation and statistics, we found that the workload of the same group of WebSocket connections during rush hours is about twice as much as usual, then we can do some simple calculations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Set 70% of resource usages as a scale-out trigger is very dangerous, common traffic fluctuations can easily overload a server.&lt;/li&gt;
&lt;li&gt;Set 50% of resource usages as a scale-out trigger can be a great choice, From past experience, each server will not run out of resources for more than 99% of the time.&lt;/li&gt;
&lt;li&gt;Set 30% of resource usages as a scale-out trigger seems not very economical, more than half of the resources are idle outside of peak hours.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is just a simple case for easy explanation, this strategy highly depends on the traffic shape and business nature of your services.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6kRF_pbI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/0%2ABL2USDaP_8UmquQc" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6kRF_pbI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/0%2ABL2USDaP_8UmquQc" alt="Photo by Marcus Castro on Unsplash"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Photo by Marcus Castro on Unsplash&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If the service only encounters traffic peak during holidays, we can definitely set 70% of resources usages as upper bound during weekdays, and only increase the sensitivity of the trigger before holidays.&lt;/p&gt;

&lt;p&gt;Honestly, I don't recommend this practice as a long-term solution. Although it is relatively simple and can gain effect immediately, it does not solve the issue of unbalanced workload fundamentally, but make costs of devices grow more rapidly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reshape-the-traffic-by-reconnecting"&gt;
  &lt;/a&gt;
  Reshape the Traffic by Reconnecting
&lt;/h2&gt;

&lt;p&gt;Another more solid practice is to reshape all traffic through reconnecting. To a certain extent, it overcomes the balancing failure of long-term connection, but it also brings new challenges to the user experience and service resilience.&lt;/p&gt;

&lt;p&gt;Every reconnection is not only an opportunity but a risk.&lt;br&gt;
The timing of the reconnection is a critical issue, it has a very direct impact on the effectiveness of load balancing and the user experience. Below are several commonly used strategies:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reconnect-periodically"&gt;
  &lt;/a&gt;
  Reconnect Periodically
&lt;/h3&gt;

&lt;p&gt;This is one of the most intuitive methods, it can almost ensure the effectiveness of the workload balancing with an appropriate time interval setting. Unfortunately, the brute force of this hard rule probably devastates the client's experience while using the service.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2hfnUvtz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/0%2AbWka-3csOuTa9wSQ" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2hfnUvtz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/0%2AbWka-3csOuTa9wSQ" alt="Photo by JOHN TOWNER on Unsplash"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Photo by JOHN TOWNER on Unsplash&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Product managers can easily make a list of situations that should not be interrupted:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Users are shopping without the awareness of budget control&lt;/li&gt;
&lt;li&gt;Users are filling in the information required for the purchase order&lt;/li&gt;
&lt;li&gt;Users are playing player versus player (PVP) arena in an e-sport game&lt;/li&gt;
&lt;li&gt;Users are playing a card game with a time limit for each round, and it is currently counting down&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is no doubt that disturbing the user while they expect to have fluent operations is terrible.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#choose-the-right-occasion-to-reconnect"&gt;
  &lt;/a&gt;
  Choose the right occasion to reconnect
&lt;/h3&gt;

&lt;p&gt;Since we can sort out many situations that are not suitable for reconnecting, on the other hand, there may also exist some suitable. To be more precise, we can make good use of the moment that users can accept and expect to wait:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Start watching a new live streaming on social APPs&lt;/li&gt;
&lt;li&gt;Request for a massive amount of data or download a file&lt;/li&gt;
&lt;li&gt;Teleport between different maps in an open-world RPG&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When a user is ready to wait, he is less concerned about waiting a little longer, and they will not even notice that you are secretly reconnecting. Even if the reconnection unfortunately fails, it will not interrupt the continuous operation and have too much negative impact.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#wrap-up"&gt;
  &lt;/a&gt;
  Wrap Up
&lt;/h1&gt;

&lt;p&gt;A good user experience is often regarded as a holy grail, in order to realize various product imaginations, the techniques and strategies behind them are always astonishing.&lt;/p&gt;

&lt;p&gt;I hope that my experience sharing in load balancing architectures and strategies can help you handle the challenges in software engineering well in the future :)&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>cloud</category>
      <category>backend</category>
      <category>engineering</category>
    </item>
    <item>
      <title>Six Serverless Frameworks to watch in 2021</title>
      <author>Hardik Shah</author>
      <pubDate>Tue, 15 Jun 2021 03:56:11 +0000</pubDate>
      <link>https://dev.to/hsshah_/six-serverless-frameworks-to-watch-in-2021-4p2</link>
      <guid>https://dev.to/hsshah_/six-serverless-frameworks-to-watch-in-2021-4p2</guid>
      <description>&lt;p&gt;Are you planning to adopt serverless architecture to proliferate your business productivity? If your answer is yes, you’ve come to the right place. &lt;/p&gt;

&lt;p&gt;There are many platforms and frameworks available to integrate serverless in your tech stack. You might know a few frameworks and may have used some of them. But, choosing the one that can accelerate your product in terms of scalability and cost-efficiency is not easy. &lt;/p&gt;

&lt;p&gt;Many large-scale enterprises like Amazon, Netflix, Nordstrom, Mindmup, etc., use this software architecture pattern and enjoy tremendous benefits such as faster development, security, and improved productivity. &lt;/p&gt;

&lt;p&gt;Not only that, but startups are also leveraging this breakthrough technology. Using &lt;a href="https://www.simform.com/serverless-for-startups/"&gt;serverless for startups&lt;/a&gt; is a classic example of how organizations can shift their focus from infrastructure provisioning and management to building actual products. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#serverless-frameworks"&gt;
  &lt;/a&gt;
  Serverless Frameworks
&lt;/h2&gt;

&lt;p&gt;It’s challenging to decide on one framework for your business product to integrate with your cloud platform provider. If you’re delving into a dilemma of what framework can benefit your business most, then fret not. &lt;/p&gt;

&lt;p&gt;Let’s explore the following Serverless frameworks for 2021:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#serverless"&gt;
  &lt;/a&gt;
  Serverless
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p41zHnVi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/1MgTzjg/Serverless.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p41zHnVi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/1MgTzjg/Serverless.png" alt="Serverless"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With more than 39.9k stars and 4.8k forks on GitHub, this is the most popular framework available for building varieties of serverless applications. In addition, this toolkit lets you package and deploy apps to multiple cloud service providers like AWS, Azure, and Google Cloud Function. &lt;/p&gt;

&lt;p&gt;Some of the features this framework offers include multi-language support, scaffolding, workflow automation, etc., and it is extensible via plugins.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#zappa"&gt;
  &lt;/a&gt;
  Zappa
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bq9IcGYc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/z8cjqrV/Zappa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bq9IcGYc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/z8cjqrV/Zappa.png" alt="Zappa"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Zappa is a Python framework, which allows you to build and deploy any WSGI-compatible serverless and event-driven applications hosted on AWS Lambda. Using three simple commands - install, init, and deploy, you can easily deploy applications developed in Django, Flask, and other Python frameworks on AWS Lambda and API Gateway.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#architect"&gt;
  &lt;/a&gt;
  Architect
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--22ZuLix3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/9T6SScK/Architect.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--22ZuLix3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/9T6SScK/Architect.png" alt="Architect"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Architect a.k.a. ARC is the sophisticated OpenJS foundation project that is used to define serverless architecture. Low-code, offline workflows, and well-integrated local development are a few features of this framework. And what’s more, it allows you to quickly and concisely build, deploy, and manage AWS serverless infrastructure. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sigma"&gt;
  &lt;/a&gt;
  Sigma
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--baxcqUre--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/Dg67TKB/Sigma.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--baxcqUre--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/Dg67TKB/Sigma.png" alt="Sigma"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sigma is a cloud-based platform to provide support for serverless development in AWS and GCP. It’s a fully-featured IDE that entirely runs on the browser and lets you write and publish the code in real-time. &lt;/p&gt;

&lt;p&gt;You need backend services for authenticating users and collecting analytical data. Other than that, it doesn’t require a backend to perform any other functions, as it is serverless itself. It is a real fast IDE with monitoring and debugging features and is worth trying for your serverless project.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#up"&gt;
  &lt;/a&gt;
  Up
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qMb-HsX7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/1XCdYJn/Up.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qMb-HsX7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/1XCdYJn/Up.png" alt="Up"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This feature-rich framework allows you to deploy serverless applications, static websites, and API gateways with infinite scalability. Moreover, you don’t need to learn new languages. Instead, you can start with your choice of frameworks like Express and Django and build your web product. &lt;/p&gt;

&lt;p&gt;It supports multiple runtimes, includes Node.js 10.x, Golang, Python, and Crystal. Furthermore, you can quickly deploy applications without any difficulty using a single command. Structured logging, instant rollback, and encrypted environment are a few features of this framework. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pulumi"&gt;
  &lt;/a&gt;
  Pulumi
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jpTuuKDK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/YNGrqHC/Pulumi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jpTuuKDK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/YNGrqHC/Pulumi.png" alt="Pulumi"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is an Infrastructure as Code (IaC) SDK that lets you create, deploy, and manage serverless infrastructure on any cloud-based platform. Fortunately, you can use your choice of language, tools, and engineering practices to build, deploy, and manage cloud-based apps. It also supports TypeScript, JavaScript, Python, Go, and .NET frameworks. &lt;/p&gt;

&lt;p&gt;Pulumi is the best option for provisioning and managing infrastructure tasks on cloud service providers like AWS, Azure, GCP, and Kubernetes. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The market is flooded with lots of serverless frameworks, and most of them are designed to offer rapid development and deployment of a project. Unfortunately, though, each is meant for a defined task. Henceforth, deciding the appropriate one for your project depends solely on the project requirement. &lt;/p&gt;

&lt;p&gt;I have tried to list out a few best serverless frameworks here. I hope this will help you in deciding the one for your serverless project. Which framework are you going to choose? Please let me know in the comments, or you can contact me for any discussion. &lt;/p&gt;

</description>
      <category>serverless</category>
    </item>
    <item>
      <title>Quiz Website | Javascript</title>
      <author>Knol Coder</author>
      <pubDate>Tue, 15 Jun 2021 03:47:17 +0000</pubDate>
      <link>https://dev.to/knolcoder/quiz-website-3jbi</link>
      <guid>https://dev.to/knolcoder/quiz-website-3jbi</guid>
      <description>&lt;p&gt;Quiz Website Made With Html , Css &amp;amp; Javascript&lt;br&gt;
info :-&lt;br&gt;
1) You Can Set Time .&lt;br&gt;
2) You Can Set Rule.&lt;br&gt;
3) You Can Set Custom Question .&lt;/p&gt;

&lt;p&gt;Download - &lt;a href="https://dropbay.net/2zWJ/quiz-web.zip"&gt;Download Now&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>css</category>
      <category>html</category>
    </item>
    <item>
      <title>Designing functions: The building blocks of computer programs</title>
      <author>Dave Amiana</author>
      <pubDate>Tue, 15 Jun 2021 03:09:51 +0000</pubDate>
      <link>https://dev.to/iamdeb25/designing-functions-the-building-blocks-of-computer-programs-2pmb</link>
      <guid>https://dev.to/iamdeb25/designing-functions-the-building-blocks-of-computer-programs-2pmb</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Photo by Magda Ehlers from Pexels&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A function is an essential construct in programming. In the language that we use to convey a message on the computer, functions closely resemble a verb: &lt;em&gt;"the nuts and bolts of the language"&lt;/em&gt; (S. Pinker, 2007). Put it in another way, functions serve as the primary constructs for expressing a set computational procedure in a programming language. &lt;/p&gt;




&lt;p&gt;It is better to break down the problem into manageable pieces. Solving the smaller part of the problem requires a computational procedure that we store in a function. &lt;/p&gt;

&lt;p&gt;This article will introduce the things to consider in designing and organizing functions. &lt;/p&gt;

&lt;p&gt;A function is a block of code that processes inputs and configures an output. One of the nice things about this is it breaks down our solution into a set of subroutines that we can reuse to solve other problems. &lt;/p&gt;

&lt;p&gt;Indeed, simple algorithms can be stored in one function, sometimes, it branches off into two or more: &lt;strong&gt;the question is when and why do we need indirection?&lt;/strong&gt; The most obvious reason for this is &lt;em&gt;code-reusability&lt;/em&gt;. We need to make conscious efforts into making our codebase sustainable i.e. reusable. To achieve this, we have to delegate the simplest version of a task in a function. Our goal is to minimize the &lt;em&gt;boilerplate code&lt;/em&gt; (sections of code that are repeated in multiple places with little to no variation), &lt;strong&gt;we follow the virtue of not repeating ourselves&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Functions are sufficient for developing sophisticated software systems. This technique is sometimes known as &lt;em&gt;modular programming&lt;/em&gt;. This is one of the reasons why C is deemed elegant by some developers I know. &lt;/p&gt;

&lt;p&gt;There are three major concepts in modular programming:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Module&lt;/em&gt; - a self-contained collection of functions that solves a problem (or subproblem).&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Abstract Step&lt;/em&gt; - A step in which some implementation details are unspecified. This step may define the routes where concrete functions may take place. In other words, it is a code block that delegates a group of functions necessary for solving the problem. &lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Concrete Step&lt;/em&gt; - A realization of the abstract step that implements the logic for solving independent subproblems.&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#software-design-process-topdown-approach"&gt;
  &lt;/a&gt;
  Software Design Process: Top-Down Approach
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1BkE8VVO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623724225735/nkFCw94Pc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1BkE8VVO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623724225735/nkFCw94Pc.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;code&gt;Figure 1.0&lt;/code&gt;. Hierarchical solution tree (Dale, N. B., &amp;amp; Weems, C., 2014).&lt;/p&gt;

&lt;p&gt;Steps for applying design principles in functions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; &lt;strong&gt;Understand the problem&lt;/strong&gt;. State its input requirements as well as the specifications for expected output.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Write the major steps for solving the problem&lt;/strong&gt;. Make a hierarchical solution tree (as seen in figure 1) and define the major problems you need to solve. As you go down to the bottom, problems become more concrete and simpler.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Decide if the problem can be broken down into independent subproblems that we can work on separately&lt;/strong&gt;. It is often simple enough when you can see how to implement it directly in a language. If you feel overwhelmed by writing it in a language, you are probably bypassing one or more levels of abstraction -- you need to step back and think through how you can simplify this by breaking down the problem.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Ensure that each function has exactly one job&lt;/strong&gt;. Their purpose should be obvious in its name (it makes your code easier to read and self-documenting, so we must assure that the function name should clearly state its purpose).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Document solution process&lt;/strong&gt;. Documentation helps to make our codebase easier to maintain. &lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference:
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Pinker, S. (2007). Steven Pinker: What our language habits reveal.  &lt;a href="https://www.youtube.com/watch?v=LjQM8PzCEY0"&gt;TED&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Dale, N. B., &amp;amp; Weems, C. (2014). Programming and problem solving with C++. Jones &amp;amp; Bartlett Publishers.&lt;/li&gt;
&lt;li&gt;DeNero, J. (n.d.).  &lt;a href="https://composingprograms.com/pages/14-designing-functions.html"&gt;Composing Programs&lt;/a&gt;. &lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>programming</category>
      <category>beginners</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>Everything you need to know about linux File System directories!</title>
      <author>mohammed afif ahmed</author>
      <pubDate>Tue, 15 Jun 2021 03:05:53 +0000</pubDate>
      <link>https://dev.to/afif_ahmed/everything-you-need-to-know-about-linux-directories-57ha</link>
      <guid>https://dev.to/afif_ahmed/everything-you-need-to-know-about-linux-directories-57ha</guid>
      <description>&lt;h2&gt;
  &lt;a href="#history-of-linux-and-windows"&gt;
  &lt;/a&gt;
  History of Linux and Windows
&lt;/h2&gt;

&lt;p&gt;Okay, before starting with the actual topic, let’s discuss what makes Linux different from windows. If you are a Windows user you might have seen different drives such as C, D, E, etc which are absent in Linux instead it has folders named /bin, /sbin, /usr, /etc.&lt;/p&gt;

&lt;p&gt;For new Linux users, let us tell you about how Linux and windows evolved. Windows was installed on top of DOS(Disk operating system), which was a command-line tool where you can run programs, games, etc. It used letters to assign removable discs such as floppy drives, i.e. A and B. When the hard drive was introduced, the letter C was assigned for the internal disk and the next available letter for the next disk.&lt;/p&gt;

&lt;p&gt;Microsoft evolved their kernel so that windows boots are less dependent on DOS and eventually without DOS at all. Linux follows the Unix tradition which is why it uses forward slash unlike backslash in windows. It is also case sensitive, also macOS has similar features as it is a common Unix-based ancestor.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#so-now-lets-jump-into-the-linux-filesystem"&gt;
  &lt;/a&gt;
  So now let’s jump into the Linux filesystem.
&lt;/h2&gt;

&lt;p&gt;A filesystem is used to control the flow of how data is stored or distributed or retrieved from a physical storage device such as HDD, SSD, etc. Its main purpose is to make users and the operating system store files in such a manner that all the different directories can utilize them efficiently.&lt;/p&gt;

&lt;p&gt;The OS plays the role of intermediate that facilitates the data transfer for storage on a storage device. Linux uses a directory tree to manage directories and files. The tree information is also stored on a storage device and this part is called the root file system or root directory.&lt;/p&gt;

&lt;p&gt;The root directory is the most important as all other directories are derived from it and it is responsible for booting, repairing, and restoring the Linux system.&lt;/p&gt;

&lt;p&gt;The File hierarchy for Linux defines the Linux directory structure. We can refer to the sequential directories in those directories by using directory names connected by a forward slash (/) such as /var/log and /var/spool/mail. These are called paths.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#now-let-us-explore-these-subdirectories-of-the-root-directory-one-by-one"&gt;
  &lt;/a&gt;
  Now let us explore these sub-directories of the root directory one by one.
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---hUu8cAH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.rs-online.com/designspark/rel-assets/dsauto/temp/uploaded/linux-filesystem.png%3Fw%3D1042" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---hUu8cAH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.rs-online.com/designspark/rel-assets/dsauto/temp/uploaded/linux-filesystem.png%3Fw%3D1042" alt="lfs"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#bin"&gt;
  &lt;/a&gt;
  /bin
&lt;/h3&gt;

&lt;p&gt;This is a subdirectory of the root which stands for binaries and contains the executable programs, which are used for minimal functionality for booting or repairing. It usually contains the shell commands like cp(copy), rm(remove), ls, etc. It also contains programs that boot scripts may depend on. Bin folders can also be found in other sections of the file system tree.&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#sbin"&gt;
  &lt;/a&gt;
  /sbin
&lt;/h3&gt;

&lt;p&gt;This stands for system binaries that a system administrator may use and a standard user would not have access without permission. This folder, along with the one above it,contains the files that must be accessible while running in single-user mode (this mode boots you in as a root user to enable you to perform device repairs,updates, and testing) rather than multi-user mode.&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#boot"&gt;
  &lt;/a&gt;
  /boot
&lt;/h3&gt;

&lt;p&gt;This directory contains all the executables or programs responsible for booting up a Linux machine whether it is ubuntu or kali or mint. As a result, the data used until even the Linux kernel starts to run some program is stored in the /boot directory.&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#dev"&gt;
  &lt;/a&gt;
  /dev
&lt;/h3&gt;

&lt;p&gt;This directory houses some exclusive or device-specific files. Everything in Linux is categorized as a file or a directory, as this command emphasizes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-la&lt;/span&gt; /dev 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can see all the partitions on the system. /dev/cdrom represents our CD-ROM. Here the nested files represent a hardware device and any changes to them will be reflected in our hardware. For example, /dev/dsp represents the speakers and if you make changes to it, it will be reflected in the speakers. For instance, it will make a sound if you cat something on it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cat&lt;/span&gt; /boot/vminux &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; /dev/dsp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#etc"&gt;
  &lt;/a&gt;
  /etc
&lt;/h3&gt;

&lt;p&gt;This directory contains all your configurations. Here configuration refers to those which are system-wide and not just for a particular user such as /etc/apt contains the sources list which contains the repo’s the system connects to and its various settings.&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#lib-lib32-lib64"&gt;
  &lt;/a&gt;
  /lib, /lib32, /lib64
&lt;/h3&gt;

&lt;p&gt;These are the directories where the libraries are stored. Libraries are files that the application uses to perform various functions, and these are required by the binaries in the /bin directory.&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#media-and-mnt-mount"&gt;
  &lt;/a&gt;
  /media and /mnt (mount)
&lt;/h3&gt;

&lt;p&gt;These are the directories where we can find our other mounted drives such as USB,floppy disks, or external hard drives, etc. The /media folder wasn’t there before. &lt;br&gt;
It was just /mnt, but nowadays most Linux distros automatically mount devices in /media directory. But why two directories for mounting? Well, When manually mounting files, we use the /mnt directory and leave the /media directory to the operating system.&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#opt-this-is-the-optional-folder"&gt;
  &lt;/a&gt;
  /opt (this is the optional folder)
&lt;/h3&gt;

&lt;p&gt;This folder usually contains manually installed software from any third-party vendors. This is the place where you can install the software created by you.&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#proc"&gt;
  &lt;/a&gt;
  /proc
&lt;/h3&gt;

&lt;p&gt;This directory contains all the pseudo files that have information about the system processes and resources. Every process has a directory (named after the process ID) that contains all the necessary information on that process and these are not saved on the hard drive. The files here are translated by the kernel to generate some other information. for example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cat&lt;/span&gt; /proc/cpuinfo 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command prints out the information about the CPU.&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#root"&gt;
  &lt;/a&gt;
  /root
&lt;/h3&gt;

&lt;p&gt;This is the home directory of the root user. It does not contain typical directories and does not reside in the /home directory, unlike a user's /home directory. You can store the files here but you need to have root access. This directory's location also means that the root has constant access to its /home folder.&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#run"&gt;
  &lt;/a&gt;
  /run
&lt;/h3&gt;

&lt;p&gt;This directory is relatively new, and various distributions use it in different ways. It's a tempfs file system, which means everything in it is deleted when the system is rebooted or shut down. It is used to store runtime information that processes use to work early in&lt;br&gt;
the boot method.&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#srv"&gt;
  &lt;/a&gt;
  /srv
&lt;/h3&gt;

&lt;p&gt;This is called a service directory where data from the service is saved. For you, it will most likely be null, but if you run a web server or an FTP server, you will store files here that will be accessed by other users. Since it is at the root of the drive, it provides better&lt;br&gt;
protection.&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sys"&gt;
  &lt;/a&gt;
  /sys
&lt;/h3&gt;

&lt;p&gt;This is called a system directory, It's been around for quite some time. It's a method of communicating with the kernel. This directory is similar to the /run directory in that it is not written to the disc physically. It's generated every time the machine starts up, so you wouldn't save anything here, and nothing is mounted here.&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tmp"&gt;
  &lt;/a&gt;
  /tmp
&lt;/h3&gt;

&lt;p&gt;It is a temp (temporary) directory. This is where the program temporarily stores files that could be used during a session. For example, when you write a document in a program in vscode, it will save a temporary copy of what you're writing here on a regular basis. If the program crashes, you can search here to see if you have a recently saved copy that you can restore.&lt;/p&gt;

&lt;p&gt;When you reboot your computer, this folder is normally empty. Any files or directories may still be present or may have been stuck because the machine was unable to remove them. This isn't a concern unless there are hundreds of files taking up disc space, in which case you'll need to log in as root and manually delete them.&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#usr"&gt;
  &lt;/a&gt;
  /usr
&lt;/h3&gt;

&lt;p&gt;In contrast to the /bin directory, which is used by the system and system administrator to perform maintenance, this is the user application space where programs that are used by the user will be installed. Any program installed here is considered non-essential for basic system service, and it is also known as Unix System Resource. &lt;/p&gt;

&lt;p&gt;The installed programme can be found in a variety of locations, including /usr/bin, /usr/sbin, and /usr/local. The local directory is where most programs installed from source code end up. The /usr/share is where many larger programs mount themselves.&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#var"&gt;
  &lt;/a&gt;
  /var
&lt;/h3&gt;

&lt;p&gt;This is the directory for variables. It contains files and directories that are expected to grow in size over time, such as dynamic data. /var/log contains system and application log files, which will grow in size as you use the system. Other items included here include mail databases and temporary storage for printer queues, also known as /spool.&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#home"&gt;
  &lt;/a&gt;
  /home
&lt;/h3&gt;

&lt;p&gt;Each user has this directory. The /home directory is where you store your file and documents. Each user can access only their folder unless admin permissions.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;And, phew...! finally we have reach the end. In this article, we have covered all the different Linux File system directories. We have also seen what makes Linux FS different from Windows FS and how Linux evolved. I  certainly hope that you now have knowledge of what each directory in Linux FS means and its true functionality as well as its role in OS.&lt;/p&gt;

&lt;p&gt;liked the post? &lt;br&gt;
&lt;a href="https://ko-fi.com/I2I639WWJ"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FKanlt08--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ko-fi.com/img/githubbutton_sm.svg" alt="ko-fi"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>linux</category>
      <category>tutorial</category>
      <category>os</category>
      <category>windows</category>
    </item>
  </channel>
</rss>
