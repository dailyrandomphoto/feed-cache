<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Building a dropdown menu using Alpine.js</title>
      <author>Michael Burrows</author>
      <pubDate>Wed, 13 Oct 2021 22:23:35 +0000</pubDate>
      <link>https://dev.to/michaelburrows/building-a-dropdown-menu-using-alpinejs-47o3</link>
      <guid>https://dev.to/michaelburrows/building-a-dropdown-menu-using-alpinejs-47o3</guid>
      <description>&lt;p&gt;&lt;a href="https://alpinejs.dev/"&gt;AlpineJS&lt;/a&gt; is a small JavaScript framework for composing behavior directly in HTML markup. In this tutorial I’ll show you how the framework can be used to build a dropdown menu component. If you’ve never worked with Alpine before this will serve as a simple introduction to the framework.&lt;/p&gt;

&lt;p&gt;For the purposes of this tutorial you can load the framework via CDN:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With Alpine loaded create a wrapper &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; with the following attributes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;x-data=&lt;/span&gt;&lt;span class="s"&gt;"{ open: false }"&lt;/span&gt; &lt;span class="na"&gt;x-on:click.outside=&lt;/span&gt;&lt;span class="s"&gt;"open = false"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  // ...
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;x-data&lt;/code&gt; defines a chunk of HTML as an Alpine component and provides data for that component to reference. &lt;code&gt;x-on:click.outside&lt;/code&gt; set’s the open data to false which will hide the dropdown when anywhere outside the component is clicked.&lt;/p&gt;

&lt;p&gt;Next inside the wrapper &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; add a button that’ll trigger the dropdown’s visibility:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;x-on:click=&lt;/span&gt;&lt;span class="s"&gt;"open = !open"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  My Account
&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another &lt;code&gt;x-on:click&lt;/code&gt; this time we’re only tracking clicks directly on the button itself.&lt;/p&gt;

&lt;p&gt;Now for the dropdown menu which is an unordered list with a &lt;code&gt;x-show&lt;/code&gt; attribute:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;x-show=&lt;/span&gt;&lt;span class="s"&gt;"open"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Edit Profile&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Settings&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Log Out&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;        
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When &lt;code&gt;open&lt;/code&gt; equals &lt;code&gt;true&lt;/code&gt; the &lt;code&gt;x-show&lt;/code&gt; attribute will change the visibility of the &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; element. At this point in the tutorial we have a basic functioning dropdown, let’s add a couple of finishing touches to improve the look and feel. First let’s add an icon that’ll represent the state of the dropdown menu:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;x-on:click=&lt;/span&gt;&lt;span class="s"&gt;"open = !open"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  My Account 
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;:class=&lt;/span&gt;&lt;span class="s"&gt;"{'rotated': open}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;raquo;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you view the source code after the button has been clicked you’ll see the rotated class has been applied to the &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; element:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qegb0q93--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ofi8dnqwbhgq417y1ffy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qegb0q93--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ofi8dnqwbhgq417y1ffy.gif" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can now apply some CSS to rotate the icon indicating the menu is open:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.rotated&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;90deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally we’ll add a transition so the opening and closing of the dropdown appears smoother:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;x-show=&lt;/span&gt;&lt;span class="s"&gt;"open"&lt;/span&gt; &lt;span class="na"&gt;x-transition.opacity&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
 ...       
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That’s all for this tutorial. As you’ve just seen by adding some simple Alpine attributes to HTML markup it relatively easy to create a functioning dropdown menu. With what you learnt in this tutorial you could also start building other UI elements with show/hide functionality and Alpine.js.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>alpinejs</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Build an Embeddable Widget using Preact and the Shadow DOM</title>
      <author>Coleman Imhoff</author>
      <pubDate>Wed, 13 Oct 2021 21:36:50 +0000</pubDate>
      <link>https://dev.to/companycam/build-an-embeddable-widget-using-preact-and-the-shadow-dom-33lm</link>
      <guid>https://dev.to/companycam/build-an-embeddable-widget-using-preact-and-the-shadow-dom-33lm</guid>
      <description>&lt;p&gt;Our team at &lt;a href="https://companycam.com/"&gt;CompanyCam&lt;/a&gt; was tasked with building a widget that our users could embed on their websites. The widget needed to be easy to install, responsive, and provide a fullscreen application experience. This article introduces and explains the technical decisions made and how we got there.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#discovery"&gt;
  &lt;/a&gt;
  Discovery
&lt;/h2&gt;

&lt;p&gt;Before jumping into the code, I want to quickly discuss some things our team learned during discovery. Hopefully, this will assist you in making the right decisions for your project.&lt;/p&gt;

&lt;p&gt;After learning about the details of the product, we found that the codebase had two requirements.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#encapsulation"&gt;
  &lt;/a&gt;
  Encapsulation
&lt;/h3&gt;

&lt;p&gt;Our team needed to prevent external CSS from cascading into our code. In addition, our styling needed to be scoped to our application. We explored wrapping the widget in an iFrame, which provides &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe"&gt;a nested browsing context&lt;/a&gt;.  This offered the encapsulation we needed, but we found it difficult to control the iFrame in order to provide a quality fullscreen experience. The &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API"&gt;Fullscreen API&lt;/a&gt; was a potential solution, but it did not hold the required &lt;a href="https://caniuse.com/fullscreen"&gt;browser support&lt;/a&gt;. Using an iFrame to encapsulate a smaller product could be a great solution, but did not fit our use case.&lt;/p&gt;

&lt;p&gt;We turned our attention to the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM"&gt;Shadow DOM API&lt;/a&gt;. The Shadow DOM provides a way to attach a hidden DOM tree to any element. This creates encapsulation, but doesn't limit your ability to have control of the application. In addition, the Shadow DOM API has &lt;a href="https://caniuse.com/?search=attachShadow"&gt;good browser support&lt;/a&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#small-bundle"&gt;
  &lt;/a&gt;
  Small Bundle
&lt;/h3&gt;

&lt;p&gt;It's imperative that the widget loads &lt;em&gt;quickly&lt;/em&gt;. With the strategy the team had in place, it was clear that it was going to be difficult to code-split our application. At CompanyCam, engineers write user interfaces in &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt; therefore it made sense to stick with that.&lt;/p&gt;

&lt;p&gt;As we added 3rd party libraries, our bundle size grew. We found that &lt;a href="https://preactjs.com/"&gt;Preact&lt;/a&gt; was a good solution to this problem. It provides all the same features as React, but in a much smaller package. You can compare the unpacked size of &lt;a href="https://www.npmjs.com/package/preact"&gt;Preact&lt;/a&gt; to a combined &lt;a href="https://www.npmjs.com/package/react"&gt;React&lt;/a&gt; and &lt;a href="https://www.npmjs.com/package/react-dom"&gt;React-DOM&lt;/a&gt; and see a significant difference!&lt;/p&gt;

&lt;p&gt;Now, let's jump into some code! Feel free to clone &lt;a href="https://github.com/colemanimhoff/preact-shadow-dom-starter"&gt;this starter repo&lt;/a&gt; if a working example is helpful for you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mounting-your-app-with-a-shadow-dom-layer"&gt;
  &lt;/a&gt;
  Mounting Your App with a Shadow DOM Layer
&lt;/h2&gt;

&lt;p&gt;Preact is easy to &lt;a href="https://preactjs.com/guide/v10/getting-started/#integrating-into-an-existing-pipeline"&gt;integrate into an existing project&lt;/a&gt;. Mounting our Preact &lt;code&gt;App&lt;/code&gt; component should look similar to React.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* @jsx h */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;preact&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./components/App.jsx&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;appRoot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#app-root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;appRoot&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's add a Shadow DOM layer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* @jsx h */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;preact&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./components/App.jsx&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// app shadow root&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;appRoot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#app-root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;appRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attachShadow&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;open&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;,&lt;/span&gt; &lt;span class="nx"&gt;appRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shadowRoot&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can attach a Shadow DOM layer to a regular DOM node, called a shadow host. We can do this by calling the &lt;code&gt;attachShadow&lt;/code&gt; method, which takes &lt;code&gt;options&lt;/code&gt; as a parameter. Passing &lt;code&gt;mode&lt;/code&gt; with the value &lt;code&gt;open&lt;/code&gt; allows the shadow DOM to be accessible through the &lt;code&gt;shadowRoot&lt;/code&gt; property. The other value for &lt;code&gt;mode&lt;/code&gt; is &lt;code&gt;closed&lt;/code&gt;, which results in &lt;code&gt;shadowRoot&lt;/code&gt; returning &lt;code&gt;null&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;To verify things are in working order, we can open our &lt;br&gt;
browser's developer tools and and look at the DOM tree. Here, we can see our Shadow DOM layer.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--59VUSADF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ijtt3i0jyy1gntsbxfz8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--59VUSADF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ijtt3i0jyy1gntsbxfz8.png" alt="Screen Shot 2021-09-30 at 2.01.52 PM-1"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#styling-the-shadow-dom"&gt;
  &lt;/a&gt;
  Styling the Shadow DOM
&lt;/h2&gt;

&lt;p&gt;Styles must be scoped inside the Shadow DOM in order to render.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* @jsx h */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;preact&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./components/App.jsx&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./styles.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// app shadow root&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;appRoot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#app-root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;appRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attachShadow&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;open&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// inject styles&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;styleTag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;style&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;styleTag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;appRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;styleTag&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;appRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shadowRoot&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you're using webpack, keep in mind you will need &lt;a href="https://webpack.js.org/loaders/css-loader/"&gt;css-loader&lt;/a&gt; in order for this approach to work. Create a &lt;code&gt;style&lt;/code&gt; tag and set its &lt;code&gt;innerHTML&lt;/code&gt; to an imported stylesheet.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YpcOFrxZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1vl4im01rjq69ia45zxz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YpcOFrxZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1vl4im01rjq69ia45zxz.png" alt="Screen Shot 2021-10-07 at 10.44.27 AM"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;As our application grew, managing our styles became cumbersome and our team wanted to find another solution. At CompanyCam, our designers enjoy designing our products with &lt;a href="https://styled-components.com/"&gt;styled-components&lt;/a&gt;. With &lt;code&gt;styled-components&lt;/code&gt;, a &lt;a href="https://styled-components.com/docs/advanced#existing-css"&gt;generated stylesheet is injected&lt;/a&gt; at the end of the &lt;code&gt;head&lt;/code&gt; of the document. Due to our Shadow DOM layer, this won't work without some configuration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* @jsx h */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;preact&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;StyleSheetManager&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Heading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt;&lt;span class="s2"&gt;`
  color: #e155f5;
  font-family: sans-serif;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;StyleSheetManager&lt;/span&gt; &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#app-root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;shadowRoot&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hey, Shadow DOM!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;StyleSheetManager&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;a href="https://styled-components.com/docs/api#stylesheetmanager"&gt;StyleSheetManager&lt;/a&gt; helper component allows us to modify how styles are processed. Wrap it around the &lt;code&gt;App&lt;/code&gt; component's &lt;code&gt;children&lt;/code&gt; and pass the &lt;code&gt;shadowRoot&lt;/code&gt; of the shadow host as the value of &lt;code&gt;target&lt;/code&gt;. This provides an alternate DOM node to inject styles into.&lt;/p&gt;

&lt;p&gt;Just like the previous technique, we can see our styles scoped within the Shadow DOM.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lReOSyo---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y01nycmwjzl6bnn1onwo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lReOSyo---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y01nycmwjzl6bnn1onwo.png" alt="Screen Shot 2021-10-07 at 10.53.48 AM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#avoid-inheritance"&gt;
  &lt;/a&gt;
  Avoid Inheritance
&lt;/h2&gt;

&lt;p&gt;The Shadow DOM will prevent outside CSS selectors from reaching any contained markup. But, it is possible for elements in Shadow DOM to &lt;a href="https://www.w3.org/TR/css-scoping-1/#shadow-cascading"&gt;inherit CSS values&lt;/a&gt;. We can &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/initial"&gt;reset properties to their default values&lt;/a&gt; by declaring the the property &lt;code&gt;all&lt;/code&gt; to the value &lt;code&gt;initial&lt;/code&gt; on the parent element of your application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* @jsx h */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;preact&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;StyleSheetManager&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Heading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt;&lt;span class="s2"&gt;`
  color: #e155f5;
  font-family: sans-serif;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;WidgetContainer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
  all: initial;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;StyleSheetManager&lt;/span&gt; &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#app-root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;shadowRoot&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;WidgetContainer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hey, Shadow DOM!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;WidgetContainer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;StyleSheetManager&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#win-the-stacking-order-battle-with-portals"&gt;
  &lt;/a&gt;
  Win the Stacking Order Battle with Portals
&lt;/h2&gt;

&lt;p&gt;Whether it's Wordpress, Squarespace, Wix, or something from scratch, our widget needed to live on any website. Since &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context#the_example"&gt;stacking order depends on the DOM tree hierarchy&lt;/a&gt;, we immediately saw &lt;code&gt;z-index&lt;/code&gt; issues in our fullscreen components.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Sb4yvad7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/httqp2k5lo82jwxj8zll.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sb4yvad7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/httqp2k5lo82jwxj8zll.png" alt="Screen Shot 2021-10-07 at 11.57.11 AM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="(https://reactjs.org/docs/portals.html)"&gt;Portals&lt;/a&gt; provide a way to render &lt;code&gt;children&lt;/code&gt; into a DOM node which exists outside the context of the application. You can mount your &lt;code&gt;Portal&lt;/code&gt; to any DOM node. In our case, we needed to render these fullscreen components as high in the DOM tree as possible. Therefore, we can append our &lt;code&gt;Portal&lt;/code&gt; to the &lt;code&gt;body&lt;/code&gt; of the document we are installing the widget on.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s0_3BzNU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bkpk08269n5e2zltlu7n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s0_3BzNU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bkpk08269n5e2zltlu7n.png" alt="Screen Shot 2021-10-07 at 11.57.17 AM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's create our &lt;code&gt;Portal&lt;/code&gt; by starting at the root of our application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// index.js&lt;/span&gt;

&lt;span class="cm"&gt;/* @jsx h */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;preact&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./components/App.jsx&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// shadow portal root&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;portalRoot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;portalRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;portal-root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;portalRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attachShadow&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;open&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;portalRoot&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// app shadow root&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;appRoot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#app-root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;appRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attachShadow&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;open&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;appRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shadowRoot&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a shadow host for the &lt;code&gt;Portal&lt;/code&gt; component and give it an &lt;code&gt;id&lt;/code&gt;. Then, just like we did with &lt;code&gt;appRoot&lt;/code&gt;, attach a new Shadow DOM layer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* @jsx h */&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Fragment&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;preact&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useLayoutEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;preact/hooks&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createPortal&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;preact/compat&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;StyleSheetManager&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Portal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PortalContainer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
    all: initial;
  `&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;portalRoot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#portal-root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useLayoutEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;portalRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;portalRoot&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Fragment&lt;/span&gt; &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;createPortal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;StyleSheetManager&lt;/span&gt; &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;portalRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shadowRoot&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;PortalContainer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;PortalContainer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;StyleSheetManager&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;portalRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shadowRoot&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Fragment&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Portal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, create the &lt;code&gt;Portal&lt;/code&gt; component. Add an effect to append  &lt;code&gt;portalRoot&lt;/code&gt; to the parent element of the component. From there, pass &lt;code&gt;children&lt;/code&gt; and &lt;code&gt;portalRoot.shadowRoot&lt;/code&gt; to &lt;code&gt;createPortal&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Remember to scope your styles to the &lt;code&gt;Portal&lt;/code&gt; Shadow DOM layer using &lt;code&gt;StyleSheetManager&lt;/code&gt; and reset child elements' styles to their default values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* @jsx h */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;preact&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;StyleSheetManager&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Portal&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Portal.jsx&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Heading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt;&lt;span class="s2"&gt;`
  color: #e155f5;
  font-family: sans-serif;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;WidgetContainer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
  all: initial;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;StyleSheetManager&lt;/span&gt; &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#app-root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;shadowRoot&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;WidgetContainer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hey, Shadow DOM!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Portal&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hey, Shadow Portal!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Portal&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;WidgetContainer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;StyleSheetManager&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we can wrap any fullscreen component within our &lt;code&gt;Portal&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G37-tCSq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ork0tbw48vvafvuq7d44.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G37-tCSq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ork0tbw48vvafvuq7d44.png" alt="Screen Shot 2021-10-07 at 4.09.34 PM"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Recently, our team has &lt;a href="https://companycam.com/showcases"&gt;released the widget to GA&lt;/a&gt;. The techniques outlined above have allowed us to build a rich application experience with a small codebase that is... &lt;em&gt;mostly&lt;/em&gt; encapsulated. We still run into the occasional &lt;code&gt;z-index&lt;/code&gt; issue or JavaScript event conflict provided by a website builder theme. Overall, widget installs have been a success.&lt;/p&gt;

</description>
      <category>preact</category>
      <category>shadowdom</category>
      <category>webcomponents</category>
      <category>styledcomponents</category>
    </item>
    <item>
      <title>The difficult journey to land the first tech job.</title>
      <author>Thiago Tavares</author>
      <pubDate>Wed, 13 Oct 2021 20:55:37 +0000</pubDate>
      <link>https://dev.to/thiagoltavares/the-difficult-journey-to-land-the-first-tech-job-1cdg</link>
      <guid>https://dev.to/thiagoltavares/the-difficult-journey-to-land-the-first-tech-job-1cdg</guid>
      <description>&lt;p&gt;I just finished college, and now? I did a code Bootcamp, and now? Self-taught and now?&lt;/p&gt;

&lt;p&gt;These are common questions in the minds of many new talents in the IT area, full of new skills, set out to land their first job in the software development area. Companies need new talented people, and new talented people need companies, but why these two doesn't match?&lt;/p&gt;

&lt;p&gt;Landing the first job becomes a paradox. Companies want programmers with &lt;strong&gt;experience&lt;/strong&gt;, but these prodigies have just left college with none. And this search is endless, nowadays even for internships they want &lt;strong&gt;experience&lt;/strong&gt;, &lt;strong&gt;how to get a job if I don't have experience and how to get experience if I don't have a job?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1QargKWW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sn78uy8hf6xqagc6q1if.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1QargKWW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sn78uy8hf6xqagc6q1if.png" alt="question"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The interviews begin, the first one we are excited, on the fifth we are anxious for a positive answer, on the tenth we think we are not good enough, on the 30th we don't even know what to think. Almost always with the same feedback, and most of the time, you don't even have feedback.&lt;/p&gt;

&lt;p&gt;I had to go through many interviews in the past to understand that we also need to study for interviews, study the company we want to join, the vacancy, the position, adapt the curriculum to the desired position, after all, the blessed &lt;strong&gt;experience&lt;/strong&gt; is still the "main"!&lt;/p&gt;

&lt;p&gt;We can consider ourselves lucky because we can get &lt;strong&gt;experience&lt;/strong&gt; putting our knowledge into practice. We are not like doctors who cannot make mistakes or "play" to get &lt;strong&gt;experience&lt;/strong&gt;. We are programmers, and we need only a computer to get our hands dirty.&lt;/p&gt;

&lt;p&gt;Do you know that open position in that e-commerce company you want so much? How about studying the company, seeing what technologies it uses, and then putting into practice what you know by creating something simple like, for example, a homepage with products, then take more risks and try to create a flow of adding products to a cart. You can "play" without being afraid of making mistakes because you won't hurt anyone with your try, at least you'll create something ugly, and that doesn't even work, but you'll learn with your &lt;strong&gt;experience&lt;/strong&gt;... And look at her there, the so dreamed &lt;strong&gt;EXPERIENCE&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;With all that in mind, it will be your turn to yells "I did it!" so don't lose focus, keep trying with everything you have, you can.&lt;/p&gt;

&lt;p&gt;And finally, one last tip, don't forget to organize your interview schedule with the recruiter's name, date, time, company name, frequently asked questions, etc.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;p.s. take advantage and create your app to persist your interviews.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>career</category>
      <category>programming</category>
      <category>beginners</category>
      <category>portfolio</category>
    </item>
    <item>
      <title>Welcome Thread - v146</title>
      <author>dev.to staff</author>
      <pubDate>Wed, 13 Oct 2021 20:41:08 +0000</pubDate>
      <link>https://dev.to/thepracticaldev/welcome-thread-v146-5coa</link>
      <guid>https://dev.to/thepracticaldev/welcome-thread-v146-5coa</guid>
      <description>&lt;p&gt;&lt;a href="https://i.giphy.com/media/l0Exl2gzkfMptFOGA/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/l0Exl2gzkfMptFOGA/giphy.gif" alt="Yo graphic"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#welcome-to-dev"&gt;
  &lt;/a&gt;
  Welcome to DEV!
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Leave a comment below to introduce yourself! You can talk about what brought you here, what you're learning, or just a fun fact about yourself.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reply to someone's comment, either with a question or just a hello. 👋 &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Great to have you in the community!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>welcome</category>
    </item>
    <item>
      <title>A practical introduction to git – jumping in with both feet</title>
      <author>s-heins</author>
      <pubDate>Wed, 13 Oct 2021 20:08:06 +0000</pubDate>
      <link>https://dev.to/sheins/-a-practical-introduction-to-git-jumping-in-with-both-feet-2o56</link>
      <guid>https://dev.to/sheins/-a-practical-introduction-to-git-jumping-in-with-both-feet-2o56</guid>
      <description>&lt;p&gt;If you're a developer, you have probably heard about the version control system, git. If you haven't used it yourself yet, or not a lot, you might also be a bit scared by all the different words – commits, branches, pushing, cherry-picking, rebasing, … what is all that stuff? And why is version control so hard? What if I do the wrong thing and I end up losing everything?&lt;/p&gt;

&lt;p&gt;First up, git doesn't lose anything you have committed. It might be a bit harder to find but don't despair. We'll get you there.&lt;br&gt;
But let's start at the beginning without any looming threat of losing your changes.&lt;/p&gt;

&lt;p&gt;This will be the first article in a series and it will tell you how to set up your repository from the command line, how to add changes and save ("commit") them, how to set your name and email address to be added as metadata to those changes, and how to do define a git alias, namely one to get a pretty git tree of your changes in the console.&lt;/p&gt;

&lt;p&gt;(Cover image by &lt;a href="https://freeimages.com/photographer/nexxy-42715"&gt;Nerry Burg&lt;/a&gt; from &lt;a href="https://freeimages.com"&gt;FreeImages&lt;/a&gt;).&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#why-version-control"&gt;
  &lt;/a&gt;
  Why version control?
&lt;/h2&gt;

&lt;p&gt;If you add some files or change their contents, you'll want to have a way to save your progress. The difference between having the file in a version control system such as git rather than just saving it on your hard drive is that you have a history of the file along with additional metadata – you could revert back to an old version if you wanted to, look at exactly which changes were introduced when, by whom, and, if they wrote a meaningful message, why they did those changes.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#your-task"&gt;
  &lt;/a&gt;
  Your task
&lt;/h2&gt;

&lt;p&gt;Let's say you're tasked with creating an encyclopedia on animals. This is something that will require a lot of work, and re-working articles, so you want to know your articles are safe and sound. You might also want to revert some changes if your editor tells you to get rid of that article on flamingos one day and then changes their mind the next. You decide to start a git repository to commit your changes.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#initializing-your-git-repository"&gt;
  &lt;/a&gt;
  Initializing your git repository
&lt;/h3&gt;

&lt;p&gt;In your shell, create a new directory and initialize your git repository by running &lt;code&gt;git init&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9_11rn59--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k0g1y7tkm4u0ep37xg81.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9_11rn59--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k0g1y7tkm4u0ep37xg81.png" alt="Initializing a git repository"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, this creates to a hidden folder &lt;code&gt;.git&lt;/code&gt;. If we delete this folder again, your directory will no longer be a git repository.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#configure"&gt;
  &lt;/a&gt;
  Configure
&lt;/h3&gt;

&lt;p&gt;So that other people know whom to contact regarding the changes you introduced because they might have some questions (or if you want to be able to run into some code and then marvel at the fact that these changes here were done by yourself a year ago and now you can't remember very much about them), you will want to set your name and email in your git config.&lt;br&gt;
You can either do so globally for the current logged-in user by running it with the &lt;code&gt;--global&lt;/code&gt; modifier which sets it for all repositories you commit to from this user on your machine, or for just this one repository if you run these commands with the &lt;code&gt;--local&lt;/code&gt; flag or leaving out the flag altogether since "local" is the default setting.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git config &lt;span class="nt"&gt;--global&lt;/span&gt; user.name &lt;span class="s2"&gt;"Evelyn Example"&lt;/span&gt;
git config &lt;span class="nt"&gt;--global&lt;/span&gt; user.email evelyn@example.com
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#getting-started-on-content"&gt;
  &lt;/a&gt;
  Getting started on content
&lt;/h2&gt;

&lt;p&gt;Now that we've got this out of the way, let's get started!&lt;br&gt;
You might have noticed that git has automatically created a branch named "main" for us (or, depending on your settings, this may also be called "master". If you want to change the name of the default branch that gets created on running git init to something other than &lt;code&gt;master&lt;/code&gt;, you can run &lt;code&gt;git config --global init.defaultBranch main&lt;/code&gt; , or whichever name you prefer instead of &lt;code&gt;main&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Depending on which approach you are using when developing, you may work with additional branches, then creating merge requests that need to be approved so you can move these changes onto the main branch, or alternatively, just work with the main branch.&lt;br&gt;
Let's assume we're the only collaborator on this encyclopedia for now and thus, we can use the main branch to make our changes and will not run into trouble. (If multiple people are working on just one branch, it requires a team that is highly coordinated so those changes keep getting reviewed)&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#adding-files"&gt;
  &lt;/a&gt;
  Adding files
&lt;/h3&gt;

&lt;p&gt;At first, we might want to create a list of animals we want to write articles on. We create a file &lt;code&gt;animals-to-write-about&lt;/code&gt; and add a line &lt;code&gt;house cat&lt;/code&gt; because, hey, everyone seems to be crazy about cats, so our encyclopedia needs to have an article on them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d7mijN2d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wbv1e4wcjaoj8nubuojk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d7mijN2d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wbv1e4wcjaoj8nubuojk.png" alt="Adding a new file to the git repository"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we want to know what the current status of our repository is, we can run &lt;code&gt;git status&lt;/code&gt;.&lt;br&gt;
Git says our file is an &lt;em&gt;untracked file&lt;/em&gt;… but what does that mean?&lt;/p&gt;

&lt;p&gt;If git does not yet know about a file, it is &lt;strong&gt;untracked&lt;/strong&gt;. If we want to add it to git, we can run &lt;code&gt;git add &amp;lt;file&amp;gt;&lt;/code&gt; or just add all files with &lt;code&gt;git add .&lt;/code&gt; (the dot at the end means all files in the current directory and sub-directories). In the next step, we can then &lt;code&gt;git commit&lt;/code&gt; these files. Only files that have been committed are safe from being lost, so we want to make sure we always commit any changes that we want to keep.&lt;br&gt;
By adding the &lt;code&gt;-m&lt;/code&gt; flag and then a note in quotation marks or single quotes, we can add a commit message. This should always start with an upper case verb in the present tense. For more pointers on how to write good commit messages, have a look at &lt;a href="https://chris.beams.io/posts/git-commit/"&gt;this article by Chris Beams&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ofaprr4o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lnvhpbp3xjq4rtqyfcy1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ofaprr4o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lnvhpbp3xjq4rtqyfcy1.png" alt="Creating our first commit"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#git-aliases"&gt;
  &lt;/a&gt;
  Git aliases
&lt;/h3&gt;

&lt;p&gt;What was this &lt;code&gt;git lg&lt;/code&gt; command I just used to look at the changes? It was a git alias. This is a handy way to save all your typing energy for that encyclopedia.&lt;br&gt;
You can add your own aliases by editing the &lt;code&gt;~/.gitconfig&lt;/code&gt; file (on Linux / MacOS). My list looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# This is Git's per-user configuration file.&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;user]
    email &lt;span class="o"&gt;=&lt;/span&gt; s.heins@example.com
    name &lt;span class="o"&gt;=&lt;/span&gt; S Heins
&lt;span class="o"&gt;[&lt;/span&gt;credential]
    helper &lt;span class="o"&gt;=&lt;/span&gt; osxkeychain
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    s &lt;span class="o"&gt;=&lt;/span&gt; status
    c &lt;span class="o"&gt;=&lt;/span&gt; commit &lt;span class="nt"&gt;-m&lt;/span&gt;
    co &lt;span class="o"&gt;=&lt;/span&gt; checkout
    lg &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;clear &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git log &lt;span class="nt"&gt;--all&lt;/span&gt; &lt;span class="nt"&gt;--graph&lt;/span&gt; &lt;span class="nt"&gt;--pretty&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'format:%C(auto)%h%d %s  %C(magenta)[%an] (%ad)%C(reset)'&lt;/span&gt; &lt;span class="nt"&gt;--date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;format:&lt;span class="s1"&gt;'%d.%m.%y %H:%M'&lt;/span&gt;
    p &lt;span class="o"&gt;=&lt;/span&gt; pull &lt;span class="nt"&gt;--all&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;core]
    excludesfile &lt;span class="o"&gt;=&lt;/span&gt; /Users/heinss/.gitignore_global
&lt;span class="o"&gt;[&lt;/span&gt;commit]
    template &lt;span class="o"&gt;=&lt;/span&gt; /Users/heinss/.gitmessage.txt
&lt;span class="o"&gt;[&lt;/span&gt;pull]
    rebase &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;init]
    defaultBranch &lt;span class="o"&gt;=&lt;/span&gt; main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I highly recommend adding the alias under &lt;code&gt;lg&lt;/code&gt; for a pretty git tree right in your command line.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#outlook-working-with-remotes-and-branches"&gt;
  &lt;/a&gt;
  Outlook: Working with remotes and branches
&lt;/h2&gt;

&lt;p&gt;In the next article, we will be looking at how to work with remotes in case you want to save your work somewhere other than just your local machine and how to work with branches.&lt;/p&gt;

&lt;p&gt;If you work with multiple collaborators, working with branches in conjunction with a version control service such as github or gitlab that lets you create requests to propagate these changes into the main branch enables you to first review the changes before they go into your main branch most easily. Propagating changes from one branch to the other is called &lt;em&gt;merging&lt;/em&gt; one branch into the other.&lt;br&gt;
Otherwise, collaborators would commit in the main branch and if something goes seriously wrong, they would have to roll back those changes. Or if a commit needs to be reworked, additional rework commits need to be added, potentially bloating up your tree instead of the collaborator being able to still add them to their commit before merging. There are working modes though that use only one branch; this is called trunk-based development.&lt;br&gt;
However, most teams I have worked in have chosen to work with branching and so-called &lt;em&gt;merge requests&lt;/em&gt;, also called &lt;em&gt;pull requests&lt;/em&gt;.&lt;br&gt;
More on working with branches in the next post though!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion-and-command-summary"&gt;
  &lt;/a&gt;
  Conclusion and command summary
&lt;/h2&gt;

&lt;p&gt;We created our first local git repository, and added and committed a file to it!&lt;/p&gt;

&lt;p&gt;Here are some commands to keep in mind:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;git init&lt;/code&gt; to initialize a local git repository&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git status&lt;/code&gt; to show the current status of a repository and the files it contains&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git add .&lt;/code&gt; to add all files&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git commit -m 'My message'&lt;/code&gt; to commit those changes with a commit message (i.e. propagate those changes to the branch and thus keep them from being lost)&lt;/li&gt;
&lt;li&gt;setting some options in the global git config file at &lt;code&gt;~/.gitconfig&lt;/code&gt;:

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;git config --global user.name "Evelyn Example"&lt;/code&gt; to set the author name globally (for all git repositories)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git config --global user.email evelyn@example.com&lt;/code&gt; to set the author email address globally&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git config --global init.defaultBranch main&lt;/code&gt; to set the default branch name when initializing a new repository to &lt;code&gt;main&lt;/code&gt; globally&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>git</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>The Do's and Don'ts of Front-End Documentation</title>
      <author>lary mak</author>
      <pubDate>Wed, 13 Oct 2021 19:47:54 +0000</pubDate>
      <link>https://dev.to/larymak/the-dos-and-donts-of-front-end-documentation-2k5b</link>
      <guid>https://dev.to/larymak/the-dos-and-donts-of-front-end-documentation-2k5b</guid>
      <description>&lt;p&gt;&lt;a href="https://aviyel.com/post/1178/the-do-s-and-don-ts-of-front-end-documentation"&gt;Full article available on Aviyel for free&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;One thing almost all developers might all agree on is even if you have the best programming project ready for the world but, if it doesn’t have good &lt;a href="https://aviyel.com/post/1161/this-free-tool-lets-you-create-world-class-documentation-for-react-components"&gt;documentation&lt;/a&gt;, chances are it won't reach the right audience. For instance, in an organization, a good set of well-explained rules could save you from having to repeatedly answer the same questions. The rules ensure that people can figure out how things work around the organization if key employees decide to leave the company. The same thing happens in a project, a well-documented guideline will help bring consistency and exposure to source code and ensures regular modification even if senior employees might want to walk out. &lt;/p&gt;

&lt;p&gt;In the software technical industry, it can be really challenging for engineers to obtain documentation from product owners that can actually be used to build and test a product. This is because the chances of product owners being developers is very low, so they have very little concept of what information a developer needs in order to actually compose a functional digital product. This means that this task often falls in the hands of developers and technical engineers to maintain a library of documentation for the products they’re building. &lt;/p&gt;

&lt;p&gt;Now, to help you get started with writing good documentation for your products here are some tips that might help you to curate full-fledged, quality documentation that can be used as both a tool for building a product and a reference for learning and testing your recently created product.&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-types-of-documentation-available"&gt;
  &lt;/a&gt;
  What are the Types of Documentation Available?
&lt;/h2&gt;

&lt;p&gt;We will agree that good, &lt;a href="https://aviyel.com/post/1152/thinking-outside-the-box-an-online-resume-with-docz"&gt;front-end&lt;/a&gt; documentation is important to the success of software products, and yet very few projects actually have good documentation. It's funny how even successful projects often have barely adequate documentation. You can resolve these issues by understanding the mechanism behind doc maintenance and by choosing the right one to document your product. The two main types of documentation include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Product documentation&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Process documentation&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Structuring documentation into these categories helps ensure that each detail is covered and makes it easier to write and maintain. Our main focus in this article will be on the product documentation where we will cover what should be done and what should be avoided when writing the documentation, with these tips you will be able to make your software projects and teams more successful. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-dos-of-frontend-documentation"&gt;
  &lt;/a&gt;
  The Dos of Front-end Documentation
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RSi-9GBD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v2bwvp5hkc3dhwj6b99e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RSi-9GBD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v2bwvp5hkc3dhwj6b99e.png" alt="The Dos of Front-end Documentation"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Target Audience&lt;/strong&gt; - Before you begin writing your documentation it is highly advised to define your target audience, the tone, style, and technicality you will use, depends on the audience you will be targeting.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Understand the product&lt;/strong&gt; - If you want to write great documentation, the first step is for you to be sure you understand how the products work. If you don’t even know how something is supposed to work, you can’t have much confidence that it’s working correctly. Plus, it creates uncertainty amongst teams about the working of a project.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Structure and Markup&lt;/strong&gt; - Structure your documentation by tasks relevant to the user instead of providing reference documentation by describing each part of the user interfaces individually. Always describe what a product can do rather than its limitations. You can follow these components to standardize your doc:&lt;br&gt;
Title&lt;br&gt;
Abstract&lt;br&gt;
Table of content&lt;br&gt;
Chapters&lt;br&gt;
Sections&lt;br&gt;
Contributors&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Use of visual aids&lt;/strong&gt; - Provide diagrams or other graphic materials to help understand and communicate the structure and design principles.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Keep it up-to-date&lt;/strong&gt; - Documentation is only as valuable as it is accurate, so it's important to keep it updated with changes made to the UI and backend services. It is a good practice to make updating the documentation a part of the process.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Language&lt;/strong&gt; - We all come from different zones and we all speak different languages, this does not mean you need to translate your code into vernaculars. Writing your documentation in English will work since English is a globally accepted language. You might want to use a translator tool here if your target audience isn't familiar with English.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Provide the definition of used terms and full forms of abbreviation - consider creating a reference page with all definitions, commonly used words, etc. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#more-tips-to-remember"&gt;
  &lt;/a&gt;
  More Tips to Remember
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Define the purpose of the project in the documentation&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Document the technologies used&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Document any unexpected events that may occur&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Address how it will be distributed for public use&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Mention the expected, emphasize the unique&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Remember to backup &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#where-can-i-create-documentation-of-my-project"&gt;
  &lt;/a&gt;
  Where Can I Create Documentation of My Project?
&lt;/h2&gt;

&lt;p&gt;The market is filled with really popular &lt;a href="https://aviyel.com/post/1178/the-do-s-and-don-ts-of-front-end-documentation"&gt;style guides&lt;/a&gt; and documentation tool to code your projects. However, I am a big fan of open source and prefer them only for my documentation needs. I mostly use &lt;a href="https://www.docz.site/docs/getting-started"&gt;Docz&lt;/a&gt; to curate technical documentation of my codes. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-i-use-docz-for-my-frontend-needs"&gt;
  &lt;/a&gt;
  Why I Use Docz For my Front-End Needs?
&lt;/h2&gt;

&lt;p&gt;While I prefer Docz for curating frontend documentation, you might also try VuePress if you have adopted Vue framework. GitBook could be your go-to option if you want to switch to a paid option. Plus, here's a catch. Open-source teams can use GitBook for free. However, I prefer Docz because:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It’s Gatsby Powered&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Easily customizable&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Blazingly fast&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Based on MDX&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;TypeScript support&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It makes sure that your content includes all SEO requisites, making it more user-friendly and readable. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#still-in-the-article"&gt;
  &lt;/a&gt;
  Still in the Article...
&lt;/h3&gt;

&lt;p&gt;Now we have a few easy steps still left out. &lt;br&gt;
They include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A guide on how to set up Docz&lt;/li&gt;
&lt;li&gt;What Points to Avoid While Writing Front-End Documentation? &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Check out the complete &lt;a href="https://aviyel.com/post/1178/the-do-s-and-don-ts-of-front-end-documentation"&gt;Article&lt;/a&gt; on Aviyel and also follow discussion to get all the required details.  &lt;/p&gt;

&lt;p&gt;☕ &lt;a href="https://www.buymeacoffee.com/lary"&gt;Help me Get a Cup of Tea&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Connect With me at &lt;a href="https://twitter.com/larymak1"&gt;Twitter&lt;/a&gt; | &lt;a href="https://www.instagram.com/nextgencoders/"&gt;Insta&lt;/a&gt; | &lt;a href="https://www.youtube.com/channel/UCrT1ARRZfLOuf6nc_97eXEg"&gt;YouTube&lt;/a&gt; | &lt;a href="https://www.linkedin.com/in/hillary-nyakundi"&gt;LinkedIn&lt;/a&gt;  | &lt;a href="https://github.com/larymak"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enjoy Coding ❤&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>documentation</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Let's go CSRF-ing!</title>
      <author>Antonio Villagra De La Cruz</author>
      <pubDate>Wed, 13 Oct 2021 19:35:53 +0000</pubDate>
      <link>https://dev.to/antoniovdlc/lets-go-csrf-ing-j7c</link>
      <guid>https://dev.to/antoniovdlc/lets-go-csrf-ing-j7c</guid>
      <description>&lt;p&gt;Get your surfboard ready, we are heading to the sea ... and the less than relaxed and laid back world of CSRF (pronounced "sea surf") attacks! &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-is-csrf"&gt;
  &lt;/a&gt;
  What is CSRF?
&lt;/h2&gt;

&lt;p&gt;Cross-Site Request Forgery (abbreviated as CSRF or XSRF) is an exploit which tricks a web application into sending a malicious request on behalf of an authenticated user. It is also known as one-click attack, session riding, hostile linking, or cross-site reference forgery. This allows an attacker to trick a web application into executing any actions of their choosing as if they were the authenticated user. &lt;/p&gt;

&lt;p&gt;Fundamentally, a CSRF attack relies on user's identity on a given web application and the web application's server's trust in that identity. As the attacker does not receive the response of the malicious request, only requests with side effect present a risk vector (for example: a request that transfers funds, changes passwords, ...).&lt;/p&gt;

&lt;p&gt;In order for a CSRF attack to be successful, an attacker needs to have knowledge of the APIs they are targeting to be able to craft a valid request. They also need to make use of social engineering to trick users to visit a web page in their control or open an email they sent, and in some cases, albeit not necessarily, interact with said page or email. The victims should also be logged into the specific service when the attack is performed. These conditions make such attacks somewhat complex, but in most severe cases (for example, targeting a user with administrative rights), CSRF attacks can potentially lead to the compromise of the entire web application.&lt;/p&gt;

&lt;p&gt;Some major CSRF attacks include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Netflix's website in 2006 (when Netflix was still renting DVDs!), which allowed attackers to order DVDs for a victim, change the shipping address, or fully compromise the account by changing the login credentials.&lt;/li&gt;
&lt;li&gt;ING Direct's online banking web application, which allowed attackers to transfer money from victims' accounts.&lt;/li&gt;
&lt;li&gt;YouTube's website in 2008, which allowed attackers to perform nearly all actions as a given user.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Any web application that accepts HTTP requests from an authenticated user and does not implement a verification mechanism to ensure that the request is unique to the user's session is potentially vulnerable. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-does-a-csrf-attack-work"&gt;
  &lt;/a&gt;
  How does a CSRF attack work?
&lt;/h2&gt;

&lt;p&gt;The vulnerability lies in the fact that a web application will trust any request sent by the user's browser as legitimate, even if the request was not meant to be sent by the user, but crafted by a malicious actor. From the server perspective though, the request looks totally valid and legitimate as if it was sent by the user themselves. This allows a malicious actor to basically impersonate a user. This particular attack works because authentication tokens are usually stored in cookies, and most browsers will send said cookies with each request.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dhqUzh55--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z3s0lzpq4pyqxjb41xgb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dhqUzh55--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z3s0lzpq4pyqxjb41xgb.png" alt="Diagram of a CSRF attack"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[1] Alice logs into her bank account online portal. This sets a session cookie (A) that will be automatically sent with every subsequent request Alice's browser makes to the bank web app.&lt;br&gt;
[2] Alice sends money to Bob. Attached with the request sent by her browser is the session cookie (A) previously generated. That allows the bank's backend to authenticate Alice and ensure the request is legitimate.&lt;br&gt;
[3] In the meantime, Mallory crafts a script that will send a similar request, but sending money to her account instead. See below for more details on how to craft such scripts.&lt;br&gt;
[4] Using social engineering, Mallory tricks Alice into visiting her website, which then tricks Alice's browser into sending Mallory's request to the bank's backend. &lt;br&gt;
[5] Because the request stemmed from Alice's browser, it has Alice's session cookie (A) attached to it. The bank application is then tricked into believing this request comes from Alice and is legitimate, hence transferring money to Mallory.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#urlbased-attack"&gt;
  &lt;/a&gt;
  URL-based attack
&lt;/h3&gt;

&lt;p&gt;The most basic form of CSRF attack is URL-based. An attacker crafts a GET request with the desired URL, and embeds said URL in an image, for example. That image can then be sent via email to the victim or hosted in a website owned by the attacker that the victim then visits.&lt;/p&gt;

&lt;p&gt;Let's say that there exists a banking web application built solely using GET requests, which stores session tokens in cookies, and that has no CSRF prevention method implemented. &lt;/p&gt;

&lt;p&gt;For Alice to send $100 to Bob, the app will make the following request:&lt;br&gt;
&lt;code&gt;GET https://some-random-bank.com/transfer?account=BOB&amp;amp;amout=100&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;With that information in mind, Mallory can craft a valid request that would send her $1,000, namely:&lt;br&gt;
&lt;code&gt;GET https://some-random-bank.com/transfer?account=MAL&amp;amp;amount=1000&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now, for the social engineering part of the attack, Mallory embeds that URL into a zero-size image that she attaches to an email she sends Alice:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://some-random-bank.com/transfer?account=MAL&amp;amp;amount=1000"&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt; &lt;span class="na"&gt;border=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When opening the email, Alice won't see anything suspicious, but her browser will make that request, and if Alice is logged in her online banking web application, the transaction will be successful and Mallory will receive $1,000 from Alice!&lt;/p&gt;

&lt;p&gt;This works because the session cookies that authenticate Alice from the bank's application's perspective will be automatically attached to and sent with the malicious request.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#formbased-attack"&gt;
  &lt;/a&gt;
  Form-based attack
&lt;/h3&gt;

&lt;p&gt;Alright, so I guess we can agree that using GET requests to perform actions with side-effects is not ideal. Unfortunately, using POST requests won't save us!&lt;/p&gt;

&lt;p&gt;It might take Mallory a couple of lines of code more, but it is still possible (and quite trivial) to craft a POST request that can take advantage of a CSRF vulnerability.&lt;/p&gt;

&lt;p&gt;Let's keep our online banking application from the previous example, only this time, the request to make a transfer is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;POST https://some-random-bank.com/transfer

account=BOB&amp;amp;amount=100
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, Mallory cannot simply use a link or an image, but she can use a form, which she can embed in a web page she controls.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"https://some-random-bank.com/transfer"&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"POST"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"hidden"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"account"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"MAL"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"hidden"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"amount"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"1000"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Click here"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As with the URL-based attacks, Alice doesn't even need to interact with the web page that includes the malicious form, as Mallory can automatically submit it when Alice visits her web page:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;body&lt;/span&gt; &lt;span class="na"&gt;onload=&lt;/span&gt;&lt;span class="s"&gt;"document.forms[0].submit()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  ...
  &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="err"&gt;...&lt;/span&gt;
&lt;span class="err"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All cookies (including authentication ones) will again be sent with the request, and Mallory pockets yet again $1,000!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#xhrbased-attack"&gt;
  &lt;/a&gt;
  XHR-based attack
&lt;/h3&gt;

&lt;p&gt;OK, this is great, but what if we use a JSON API, and actually use other HTTP verbs such as PUT or DELETE? Well, still no luck!&lt;/p&gt;

&lt;p&gt;Let's keep using the same banking example. This time, the request to transfer money is as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;PUT https://some-random-bank.com/transfer

{ "account": "BOB", "amount": 100 }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In that case, Mallory will have to work a little bit harder, but it is still a handful of lines of code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;put&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;XMLHttpRequest&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;PUT&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://some-random-bank.com/transfer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setRequestHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;account&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;MAL&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;amount&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&lt;/span&gt; &lt;span class="na"&gt;onload=&lt;/span&gt;&lt;span class="s"&gt;"put()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  ...
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Fortunately, this request will not execute in modern browsers thanks to same-origin policy restrictions, which is enabled by default. Careful though with allowing cross-origin requests, as that can allow attackers to bypass those restrictions. In particular, using the following CORS header will make the above CSRF attack possible:&lt;br&gt;
&lt;code&gt;Access-Control-Allow-Origin: *&lt;/code&gt;.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#how-to-protect-a-web-app-from-csrf-attacks"&gt;
  &lt;/a&gt;
  How to protect a web app from CSRF attacks?
&lt;/h2&gt;

&lt;p&gt;Now that we have a better understanding of the risks of CSRF attacks, how do we protect a web application from such vulnerabilities?&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#methods-that-do-not-work"&gt;
  &lt;/a&gt;
  Methods that do NOT work
&lt;/h3&gt;

&lt;p&gt;Let's first look at some methods that do not work in protecting a web application from CSRF attacks and why that is the case.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#secret-cookie"&gt;
  &lt;/a&gt;
  Secret Cookie
&lt;/h4&gt;

&lt;p&gt;One way one might think of preventing CSRF is by using a secret cookie to store the session token. Unfortunately, this method fails because all cookies, including secret cookies, are sent with every request.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#only-post-requests"&gt;
  &lt;/a&gt;
  Only POST Requests
&lt;/h4&gt;

&lt;p&gt;Some past CSRF vulnerabilities came from the fact that some web application were using GET request to perform side effects on the server. Besides being a poor practice, this made URL-based CSRF attacks trivial to implement. &lt;/p&gt;

&lt;p&gt;Hence, can the solution be only using POST requests? Unfortunately, as seen in the previous section, it is still possible to craft CSRF attacks using POST (or any other HTTP) requests.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#multistep-transactions"&gt;
  &lt;/a&gt;
  Multi-Step Transactions
&lt;/h4&gt;

&lt;p&gt;Maybe using multi-step transactions then? For example, we can require a first request to make a bank transfer, and a second to confirm? Unfortunately, this method also fails, as long as the attacker can predict the steps needed and craft malicious requests.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#prevention-methods"&gt;
  &lt;/a&gt;
  Prevention methods
&lt;/h3&gt;

&lt;p&gt;Let's now look at some prevention techniques that do work in protecting a web application from CSRF attacks and why that is the case.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#synchroniser-token-pattern"&gt;
  &lt;/a&gt;
  Synchroniser Token Pattern
&lt;/h4&gt;

&lt;p&gt;One of the most common prevention methods is to generate a token on the server. A token can be generated per request or per session, the latter being slightly less secure but more convenient. The token is then sent with each request and validated before performing said request. The token is usually embedded in a hidden form field, or in a custom header. This means that a malicious CSRF request will not possess the token and will fail validation on the server, as only cookies are sent automatically, and the attacker has no way of accessing data on the web page.&lt;/p&gt;

&lt;p&gt;For example, the server-side rendered HTML for a form could look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"/transfer"&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"POST"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"hidden"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"CSRFToken"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"BfbhY4e/7Qa7iWUMV09r5lm0mAdXnDHGBdYfgHCMnKf8yuxVcULDdEYSDYotrpmoo2NKGzuDyHjzD74QUyfq5g=="&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  ...
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Taking another look at our previous example with Alice and Mallory, by implementing this method, Alice's request to transfer money to Bob will contain the CSRF token, whereas Mallory has no way of guessing its value (even if she knows that she must also send a token), hence her malicious request won't be valid from the server's perspective.&lt;/p&gt;

&lt;p&gt;This method is what most popular web frameworks implement.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#double-submit-cookie"&gt;
  &lt;/a&gt;
  Double Submit Cookie
&lt;/h4&gt;

&lt;p&gt;If maintaining state on the server side is an issue, we can use the double submit cookie technique. The idea here is to send a random value both in a cookie and as part of the request (in a parameter or a header). If both values match, the server accepts the request as legitimate and proceeds.&lt;/p&gt;

&lt;p&gt;This method works because the attacker doesn't have access to the value of the token stored in the cookie. Thus, when crafting the malicious request, they cannot include the same value as part of the request. The value in the cookie will automatically be sent to the server, but the validation will fail.&lt;/p&gt;

&lt;p&gt;As subdomains can write cookies to the parent domain over HTTP, this technique only works if all subdomains are properly secured and only accept HTTPS. It is also possible to secure the cookie by using the &lt;code&gt;__Host-&lt;/code&gt; cookie prefix. Another way to enhance the security of this method is to use an encrypted cookie to store the token.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#samesite-cookie-attribute"&gt;
  &lt;/a&gt;
  SameSite Cookie Attribute
&lt;/h4&gt;

&lt;p&gt;The SameSite cookie attribute aims to mitigate CSRF vulnerabilities by providing a hint to browsers if they should submit cookies with cross-origin requests.&lt;/p&gt;

&lt;p&gt;Possible values are &lt;code&gt;Strict&lt;/code&gt;, &lt;code&gt;Lax&lt;/code&gt;, and &lt;code&gt;None&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Strict&lt;/code&gt; prevents any cross-origin request to carry cookies. This means for example, that if you follow a link to a service where you are authenticated, the page that will be displayed won't be able to authenticate you, as no cookies will be submitted. This might not always be the intended user experience.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Lax&lt;/code&gt;, which is the default in some modern browsers, provides a better user experience while still ensuring that only top level navigation and safe HTTP method request are submitted with cookies.&lt;/p&gt;

&lt;p&gt;This method is unfortunately not sufficient to fully protect users from CSRF attacks, and should instead be used in conjunction with previous methods.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#origin-headers"&gt;
  &lt;/a&gt;
  Origin Headers
&lt;/h4&gt;

&lt;p&gt;This method relies on examining HTTP request header values, in particular to find out the source origin (where is the request coming from) and the target origin (where is the request going to). If both values match, the server proceeds with the request as legitimate.&lt;/p&gt;

&lt;p&gt;The reliability of the value in those headers come from the fact that they can only be set by the browser as they are in the forbidden headers list, meaning that they cannot be set programmatically.&lt;/p&gt;

&lt;p&gt;The drawback of this method is that it can be difficult to accurately retrieve the values for source origin and target origin.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#custom-request-headers"&gt;
  &lt;/a&gt;
  Custom Request Headers
&lt;/h4&gt;

&lt;p&gt;An alternate method that works for AJAX or API endpoints is to set a custom request header, with the presence of this header being validated on the server. This method relies on same-origin policy to ensure that only JavaScript from the legitimate domain can set those headers. &lt;/p&gt;

&lt;p&gt;This is a particularly attractive method for REST services, as it doesn't require the server to maintain any state. Unfortunately, this method doesn't cover vulnerabilities on &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt;s. &lt;/p&gt;

&lt;p&gt;The security of this method also depends on having robust CORS settings (as cross-origin requests with custom headers are pre-flighted and might expose the list of custom headers).&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#user-interaction-defense"&gt;
  &lt;/a&gt;
  User Interaction Defense
&lt;/h4&gt;

&lt;p&gt;Finally, we can also fend off CSRF attacks by altering the user interaction flow of certain actions. For example, we can ask the user to re-enter their password to confirm certain actions (like transferring funds). &lt;/p&gt;

&lt;p&gt;This will impact the user experience though, so it might not make sense to solely rely on this technique to secure an entire web application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#some-implementations-in-popular-web-frameworks"&gt;
  &lt;/a&gt;
  Some implementations in popular web frameworks
&lt;/h3&gt;

&lt;p&gt;As CSRF vulnerabilities basically exist in any web application with authentication, most web frameworks implement some sort of protection against them. Let's look at a few examples:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#django"&gt;
  &lt;/a&gt;
  Django
&lt;/h4&gt;

&lt;p&gt;Django implements a middleware and template tag to mitigate CSRF attacks. Note that "login CSRF" attacks are also covered. The CSRF middleware is activated by default.&lt;/p&gt;

&lt;p&gt;For server-rendered markup, we can add the CSRF token in any form like follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"post"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;{% csrf_token %}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For AJAX requests, a custom &lt;code&gt;X-CSRFToken&lt;/code&gt; header needs to be appended to the requests. The value of the token can either be retrieved from a &lt;code&gt;csrfToken&lt;/code&gt; cookie, or directly from the server-rendered markup:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;{% csrf_token %}
&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;csrftoken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[name=csrfmiddlewaretoken]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For more details, including how to handle some edge cases, feel free to check the official documentation: &lt;a href="https://docs.djangoproject.com/en/3.2/ref/csrf/"&gt;https://docs.djangoproject.com/en/3.2/ref/csrf/&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#laravel"&gt;
  &lt;/a&gt;
  Laravel
&lt;/h4&gt;

&lt;p&gt;Laravel automatically generates CSRF tokens for each user session. It also uses a middleware by default to check the validate of said tokens.&lt;/p&gt;

&lt;p&gt;The token can be accessed on the server via the following methods:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Http\Request&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/token'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Request&lt;/span&gt; &lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;session&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;token&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="c1"&gt;// or&lt;/span&gt;
    &lt;span class="nv"&gt;$token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;csrf_token&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For server-rendered markup, the following code allows to embed the token in forms:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"POST"&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"/profile"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    @csrf
    &lt;span class="c"&gt;&amp;lt;!-- Equivalent to... --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"hidden"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"_token"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"{{ csrf_token() }}"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For AJAX request, the token can be retrieved from a meta tag and sent as a custom &lt;code&gt;X-CSRF-TOKEN&lt;/code&gt; header:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"csrf-token"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"{{ csrf_token() }}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ajaxSetup&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;X-CSRF-TOKEN&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;meta[name="csrf-token"]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;content&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, the token is also set in a secure cookie &lt;code&gt;XSRF-TOKEN&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For more details, including how to handle some edge cases, feel free to check the official documentation: &lt;a href="https://laravel.com/docs/8.x/csrf"&gt;https://laravel.com/docs/8.x/csrf&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#express"&gt;
  &lt;/a&gt;
  Express
&lt;/h4&gt;

&lt;p&gt;Express doesn't implement mitigation for CSRF attacks by default, but provides an npm package: &lt;code&gt;csurf&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That package can be used to implement either the synchroniser token pattern (which requires a session middleware such as &lt;code&gt;express-session&lt;/code&gt;), or the double submit cookie method (which requires the &lt;code&gt;cookie-parser&lt;/code&gt; middleware).&lt;/p&gt;

&lt;p&gt;The value of the token can be retrieved via the &lt;code&gt;req&lt;/code&gt; object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;csrfToken&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For server-rendered markup, the following code can be used:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;cookieParser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cookie-parser&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;csrf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;csurf&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;bodyParser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;body-parser&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// setup route middlewares&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;csrfProtection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;csrf&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;cookie&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;parseForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;bodyParser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;urlencoded&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;extended&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// create express app&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;// parse cookies&lt;/span&gt;
&lt;span class="c1"&gt;// we need this because "cookie" is true in csrfProtection&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cookieParser&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/form&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;csrfProtection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// pass the csrfToken to the view&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;send&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;csrfToken&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;csrfToken&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/process&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;parseForm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;csrfProtection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data is being processed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"/process"&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"POST"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"hidden"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"_csrf"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"{{ csrfToken }}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

  Favorite color: &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"favoriteColor"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Submit&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For AJAX request, the token can be retrieved from a meta tag and sent as a custom &lt;code&gt;CSRF-Token&lt;/code&gt; header:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"csrf-token"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"{{ csrfToken }}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Read the CSRF token from the &amp;lt;meta&amp;gt; tag&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;meta[name="csrf-token"]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;content&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Make a request using the Fetch API&lt;/span&gt;
&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/process&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;credentials&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;same-origin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- includes cookies in the request&lt;/span&gt;
  &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;CSRF-Token&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- is the csrf token as a header&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;favoriteColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, in some cases it might also be possible to send the token via a cookie, most notably for single-page applications:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cookie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;XSRF-TOKEN&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;csrfToken&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;index&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For more details, including how to handle some edge cases, feel free to check the official documentation: &lt;a href="http://expressjs.com/en/resources/middleware/csurf.html"&gt;http://expressjs.com/en/resources/middleware/csurf.html&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#spring"&gt;
  &lt;/a&gt;
  Spring
&lt;/h4&gt;

&lt;p&gt;Spring provides CSRF mitigation by default since Spring Security 4.0.&lt;/p&gt;

&lt;p&gt;For server-rendered markup, the following example shows how to embed a CSRF token to a form:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsp"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;c:url &lt;/span&gt;&lt;span class="na"&gt;var=&lt;/span&gt;&lt;span class="s"&gt;"logoutUrl"&lt;/span&gt;&lt;span class="na"&gt; value=&lt;/span&gt;&lt;span class="s"&gt;"/logout"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"${logoutUrl}"&lt;/span&gt;
    &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"post"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;
    &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Log out"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"hidden"&lt;/span&gt;
    &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"${_csrf.parameterName}"&lt;/span&gt;
    &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"${_csrf.token}"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For AJAX requests, the token can be embedded in a meta tag and retrieved via JavaScript on the client:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsp"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"_csrf"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"${_csrf.token}"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- default header name is X-CSRF-TOKEN --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"_csrf_header"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"${_csrf.headerName}"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;meta[name='_csrf']&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;content&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;header&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;meta[name='_csrf_header']&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;content&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;ajaxSend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;xhr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;xhr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setRequestHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;header&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is also possible to persist the CSRF token in a cookie, by default &lt;code&gt;XSRF-TOKEN&lt;/code&gt;, and expect the value back in a custom &lt;code&gt;X-XSRF-TOKEN&lt;/code&gt; header.&lt;/p&gt;

&lt;p&gt;For more details, including how to handle some edge cases, feel free to check the official documentation: &lt;a href="https://docs.spring.io/spring-security/site/docs/5.0.x/reference/html/csrf.html"&gt;https://docs.spring.io/spring-security/site/docs/5.0.x/reference/html/csrf.html&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#login-csrf"&gt;
  &lt;/a&gt;
  Login CSRF
&lt;/h2&gt;

&lt;p&gt;A related type of attack that we haven't discussed at all so far is login CSRF. This attack is somewhat similar to the previous we have discussed, but targets login forms, making the impact and risk different. &lt;/p&gt;

&lt;p&gt;Login CSRF can be mitigated by creating pre-sessions and embedding the token in the login form, or using any of the techniques previously discussed.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Cross-site_request_forgery"&gt;https://en.wikipedia.org/wiki/Cross-site_request_forgery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://owasp.org/www-community/attacks/csrf"&gt;https://owasp.org/www-community/attacks/csrf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://owasp.org/www-project-code-review-guide/reviewing-code-for-csrf-issues"&gt;https://owasp.org/www-project-code-review-guide/reviewing-code-for-csrf-issues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html"&gt;https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://seclab.stanford.edu/websec/csrf/csrf.pdf"&gt;https://seclab.stanford.edu/websec/csrf/csrf.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.twilio.com/blog/2018/01/protect-your-node-js-app-from-cross-site-request-forgery.html"&gt;https://www.twilio.com/blog/2018/01/protect-your-node-js-app-from-cross-site-request-forgery.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/20504846/why-is-it-common-to-put-csrf-prevention-tokens-in-cookies"&gt;https://stackoverflow.com/questions/20504846/why-is-it-common-to-put-csrf-prevention-tokens-in-cookies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/5207160/what-is-a-csrf-token-what-is-its-importance-and-how-does-it-work"&gt;https://stackoverflow.com/questions/5207160/what-is-a-csrf-token-what-is-its-importance-and-how-does-it-work&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>security</category>
      <category>csrf</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Open Source: Community, Sustainability and Growth</title>
      <author>Rishabh Kaul</author>
      <pubDate>Wed, 13 Oct 2021 19:26:08 +0000</pubDate>
      <link>https://dev.to/rishabhkaul/open-source-community-sustainability-and-growth-2f7h</link>
      <guid>https://dev.to/rishabhkaul/open-source-community-sustainability-and-growth-2f7h</guid>
      <description>&lt;p&gt;As part of &lt;a href="https://hacktoberfest.appsmith.com"&gt;Hacktoberfest2021&lt;/a&gt;, we're hosting a special session with Joseph Jacks (aka JJ) to talk about all things open source. Appsmith's CEO Abhishek Nayak will be in conversation with JJ to cover a range of topics from sustainability to community to growth. &lt;/p&gt;

&lt;p&gt;Joseph Jacks is the Founder and General Partner of OSS Capital and is a champion of OSS. He's a core part of CNCF, as well as the founder of KubeCon while also founding and building Kismatic, the first enterprise-focused commercial Kubernetes company. &lt;/p&gt;

&lt;p&gt;In the discussion, Abhishek will be discussing with Joseph around what he's seeing among the best of breed open source projects, how should open source maintainers think about the sustainability of their projects, things to keep in mind as you build a community around your open source project and how to think about growth, especially in an era where there's no shortage of projects for people to go to, as well as new technologies keep coming up every day. &lt;/p&gt;

&lt;p&gt;If you're someone involved in an open source project and thinking about its future, or someone thinking about starting or contributing to one, this is a session worth attending. &lt;/p&gt;

&lt;p&gt;Please do &lt;a href="https://lu.ma/6owi92ag?utm_source=ActiveCampaign&amp;amp;utm_medium=email&amp;amp;utm_content=Open+Source%3A+Community%2C+Sustainability+%26+Growth%2C+with+Open-source+investor+JJ+Jacks%2C+Founder+OSS+Capital&amp;amp;utm_campaign=Appsmith%3A+Opensource+Event+with+JJ+and+Abhishek"&gt;register&lt;/a&gt; for the session. The event is Thursday 14th October (10 AM PST, 5 PM GMT, 10:30 PM IST).&lt;/p&gt;

&lt;p&gt;We will be posting notes of the session as well as the recording here once its done. &lt;/p&gt;

</description>
      <category>hacktoberfest</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Git and GitHub: The Complete Guides - Chapter 8 : Collaboration</title>
      <author>Goran Kortjie</author>
      <pubDate>Wed, 13 Oct 2021 19:24:56 +0000</pubDate>
      <link>https://dev.to/ifierygod/git-and-github-the-complete-guides-chapter-8-collaboration-28fa</link>
      <guid>https://dev.to/ifierygod/git-and-github-the-complete-guides-chapter-8-collaboration-28fa</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aWkicK4s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u7pp7w6qo7jbwez79v8r.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aWkicK4s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u7pp7w6qo7jbwez79v8r.gif" alt="south-park-hello"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hello everyone, I hope you have been enjoying this series on Git and Github as much as I have. But like all good things it has to come to an end.&lt;/p&gt;

&lt;p&gt;This last chapter took a quite a while to publish, I've been busy with studies and now I am proud to say I have completed my Microsoft 365 Certified: Fundamentals.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fGhBPVCn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/edw034gh2truv31v2ydn.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fGhBPVCn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/edw034gh2truv31v2ydn.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.credly.com/badges/456c8c12-4809-470e-b34e-a67b1c1a0ff5/accept"&gt;Credly&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am an IT Technician so this one really comes in handy at my place of work.😁&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ju-eTicj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nhh1pkwnrgu1go8udutn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ju-eTicj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nhh1pkwnrgu1go8udutn.png" alt="collab-human-paper-image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Today we are going to discuss one of the most important topics in GitHub. That of course is &lt;strong&gt;Collaboration&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;In the previous chapter we looked at how we can copy someone else's remote repository to our own GitHub account and how to clone it to our local computer. We made some changes and updated it, when we were satisfied with our changes we eventually contributed to the original remote repository belonging to the owner.&lt;/p&gt;

&lt;p&gt;This whole process is somewhat like &lt;em&gt;collaboration&lt;/em&gt; only difference is it's actually &lt;strong&gt;not!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the case of &lt;em&gt;collaboration&lt;/em&gt; the owner can add different developers as collaborators, each collaborator will have almost identical rights and permissions as the owner allowing them to manage the project. &lt;/p&gt;

&lt;p&gt;We say &lt;em&gt;almost&lt;/em&gt; because there may be some rules put in place to manage the different roles given to collaborators and protect the master branch or other branches.&lt;/p&gt;

&lt;p&gt;What we will be discussing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add a Collaborator&lt;/li&gt;
&lt;li&gt;Being a Collaborator&lt;/li&gt;
&lt;li&gt;Protecting your Branches&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#add-a-collaborator"&gt;
  &lt;/a&gt;
  Add a Collaborator
&lt;/h3&gt;

&lt;p&gt;To begin, we will create a new repository on our local computer, we do this by creating a folder in our desktop directory, we can call this new repo 'collabs'. We open VS-Code and choose the newly created folder.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P_pv-Xd9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6lt5riq5yi4qunq520iz.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P_pv-Xd9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6lt5riq5yi4qunq520iz.gif" alt="create-folder"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first thing we do is initialise the repository by running the following command inside of our 'collabs' folder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Afterwards we create two files, we name them, index.html and style.css respectively. Next we add them to the staging area by running the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally we make a commit by running the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git commit -m 'created index.html and style.css'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s7U3ku8V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nzb1fjna900kgr2pglxi.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s7U3ku8V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nzb1fjna900kgr2pglxi.gif" alt="vs-code-git-basics"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s add our html structure to the index.html file and make a commit, followed by adding a H1 tag to the index.html file and make another commit.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HNzTDrKb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mf4nutqmuzvfo29r96av.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HNzTDrKb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mf4nutqmuzvfo29r96av.gif" alt="index.html"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We continue adding changes to our project by modifying the style.css file, we select all elements in the html page and set the margin and padding to 0, and make a commit. We log the history of our commits to see our progress. We do this by running the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git log --oneline
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SozIbrhc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6d6z1163yb0duqml2c23.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SozIbrhc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6d6z1163yb0duqml2c23.gif" alt="style.css"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Quite a few commits exist in our history, the next thing we need is to create the remote repository on GitHub and push our local repository to the remote.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_SDzJVhZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z6p3dy6q1ayl73q7qsii.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_SDzJVhZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z6p3dy6q1ayl73q7qsii.gif" alt="create new remote repo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As discussed in previous chapters, we can add the remote repository &lt;strong&gt;url link&lt;/strong&gt; to our local repository to bind them together. We do this by running the command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git remote add origin
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command is followed by the &lt;strong&gt;url link&lt;/strong&gt; of the remote repository.&lt;/p&gt;

&lt;p&gt;Finally we run the command to push the local repository to our remote repository. We use the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nW8o-rwB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4y5g6c64yoehpblwod2g.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nW8o-rwB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4y5g6c64yoehpblwod2g.gif" alt="push to remote repo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You might end up with an error concerning the permissions. To correct it you need to change the credentials on the Control Panel (Windows users). All the (Mac users) you need to create and add an ssh key to your new GitHub account. As we did in the previous chapter.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;On our Github account where we created the new repo, you can see when we refresh the page, our local repository has successfully been pushed to our remote repository including all files and commits.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hllrJKLA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nd2g2b6wy1si6ukxzrxh.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hllrJKLA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nd2g2b6wy1si6ukxzrxh.gif" alt="added-repo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ju-eTicj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nhh1pkwnrgu1go8udutn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ju-eTicj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nhh1pkwnrgu1go8udutn.png" alt="collab-human-paper-image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#time-to-collaborate"&gt;
  &lt;/a&gt;
  Time to collaborate
&lt;/h4&gt;

&lt;p&gt;In order to add someone as a collaborator to our project, we need to navigate to the &lt;strong&gt;SETTINGS&lt;/strong&gt; tab. Inside the &lt;strong&gt;SETTINGS&lt;/strong&gt;, on the left side of the screen there is a list of the different settings we can manage.&lt;/p&gt;

&lt;p&gt;What we are essentially trying to accomplish is give someone else access to our repository. The &lt;strong&gt;Manage Access&lt;/strong&gt; option is where we can perform access management. Here we can see the different management settings related to access control, right below we see it says we &lt;em&gt;haven't invited any collaborators yet&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;We can choose the &lt;strong&gt;Add People&lt;/strong&gt; button to add a collaborator, a box will pop-up which we need to fill in with the full name, email address or username of the person we want to grant access to our repository.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3QX1Tde0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8nxtulf9eh7bc1jcovhn.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3QX1Tde0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8nxtulf9eh7bc1jcovhn.gif" alt="Alt Text3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you found and added the collaborator, notice it says &lt;em&gt;'&lt;strong&gt;awaiting collaborator response&lt;/strong&gt;'&lt;/em&gt;. this is because the collaborator needs to accept the invitation sent to them.&lt;/p&gt;

&lt;p&gt;You will probably expect there to be some kind of notification or message received on the Github account of the collaborator. However this is not the case.😕 &lt;/p&gt;

&lt;p&gt;The collaborator will instead receive an email, with a message that states something along the line of &lt;em&gt;'&lt;strong&gt;this person wants to invite you to collaborate on their GitHub project&lt;/strong&gt;'&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;It is up to the collaborator to accept the invitation. Once they accept the invitation, the owners repository will be pulled into the collaborators GitHub account.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fQ_c-XqH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2xc22je2swwvf52iym0s.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fQ_c-XqH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2xc22je2swwvf52iym0s.gif" alt="Alt Text1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the owners account, inside the &lt;strong&gt;Manage Access&lt;/strong&gt; option, we will see that we have &lt;strong&gt;1&lt;/strong&gt; new collaborator added to our repository.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EdW-Xdqx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a5uea5ovhuywwlnlbjv6.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EdW-Xdqx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a5uea5ovhuywwlnlbjv6.gif" alt="Alt Text2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#being-a-collaborator"&gt;
  &lt;/a&gt;
  Being a Collaborator
&lt;/h3&gt;

&lt;p&gt;We have successfully added a collaborator to our project and now the collaborator has complete access and can manage the code how ever they want.&lt;/p&gt;

&lt;p&gt;We can simulate working on this repository as the collaborator. However to properly simulate this process, we need to work on the project from a different computer otherwise we will get unexpected results, which might end up confusing you.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you have a second computer, you can use it to work on the second GitHub account. As for me, I am using Azure to quickly provision a VM where I can simulate being a collaborator.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Firstly, since we are a collaborator, we don't need to fork the repository anymore, we just need to clone it to our local computer.To do this we can click the &lt;strong&gt;url link&lt;/strong&gt; to clone the repo. &lt;/p&gt;

&lt;p&gt;In VS-CODE we need to create a new folder inside the desktop directory. We move into that folder and then run the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command is followed by the &lt;strong&gt;url link&lt;/strong&gt; we got from our remote repository.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VdozhWWm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9kr2d59lmwqz40g6nr18.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VdozhWWm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9kr2d59lmwqz40g6nr18.gif" alt="clone-git-repo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we log the history of our commits we will see the commits we made on the owners local repo.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iy_FK37l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i0n1xkrqompneodt40nt.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iy_FK37l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i0n1xkrqompneodt40nt.gif" alt="history-of-commits"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So far so good!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UugKshd---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9svqwhf9u5nhapabogiz.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UugKshd---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9svqwhf9u5nhapabogiz.gif" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let’s make some changes to the project as a collaborator.&lt;/p&gt;

&lt;p&gt;To begin we will modify the size of the h1 tag, increasing the font-size by 40px. Then we will make a commit and add it to the staging area simultaneously.&lt;/p&gt;

&lt;p&gt;You might be surprised to see a Git message we encountered in chapter 1 of the Git and Github guides, Git is requesting our information. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This makes sense since this is a computer I quickly spun up in Azure and didn't necessarily configure everything yet. It does provide an opportunity for recollection of the commands we use to provide Git with our information though.&lt;/p&gt;

&lt;p&gt;Remember! You will add in your own username and email, since this is unique to you and how you setup the GitHub account.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We add our username by typing the commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git config --global user.name John
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we will give git our email address, we add it by typing the commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git config --global user.email john@gmail.com
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We continue by making the commit to increase the font-size. Next we modify the colour of the h1 tag, then make a commit and set it to the staging area.&lt;/p&gt;

&lt;p&gt;We log the history of our commits and we see two new commits in the history.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ox8LrW03--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tguvnv2v0frg0qryuqas.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ox8LrW03--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tguvnv2v0frg0qryuqas.gif" alt="making-commits-as-collaborator"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is time to push these changes from the local repository to the remote repository. For this we run the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can see the changes have been pushed to our remote repository as the collaborator, what you should notice is the fact we didn't have to create a pull request, these changes were pushed to the remote repo as if it was our own.&lt;/p&gt;

&lt;p&gt;Another aspect to realise is how the changes took place on the owners repo as well, we didn't need to request permission or wait for the owner to review the code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sPK_SFw6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6g6fox0wc7z39c2b3tae.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sPK_SFw6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6g6fox0wc7z39c2b3tae.gif" alt="push-to-repo-as-collaborator"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This at first seems &lt;strong&gt;AWESOME&lt;/strong&gt; since you don't need to jump through hoops to deploy your changes, but it presents a problem, since you as the &lt;em&gt;owner&lt;/em&gt; no longer have complete control over the repository and the changes it goes through, this kind of collaboration process is a &lt;u&gt;shared-equal responsibility&lt;/u&gt; model. Each member has equal rights and permissions in a shared environment/repository.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#protecting-your-branches"&gt;
  &lt;/a&gt;
  Protecting your Branches
&lt;/h3&gt;

&lt;p&gt;In the real-world, a &lt;u&gt;shared-equal responsibility&lt;/u&gt; model is not convenient. If you are the owner of a project and you have some collaborators on your team. You would generally want mechanisms to control and manage your teams work to avoid any unexpected results.&lt;/p&gt;

&lt;p&gt;Github allows the owners of repositories to protect the branches by requiring reviews before merging the branches.&lt;/p&gt;

&lt;p&gt;Let’s simulate what was just discussed by protecting the master branch. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In most cases the master branch is deployable and nobody touches it for testing purposes, which means it has to be protected.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To protect the branch we have to go to the &lt;strong&gt;SETTINGS&lt;/strong&gt; tab, down the list of options choose &lt;strong&gt;Branches&lt;/strong&gt;. Here we will see a title that states &lt;em&gt;'&lt;strong&gt;Branch Protecting Rules&lt;/strong&gt;'&lt;/em&gt; and on the right side we will see a button that reads &lt;em&gt;'&lt;strong&gt;Add Rule&lt;/strong&gt;'&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;We click on &lt;strong&gt;Add Rule&lt;/strong&gt; and we are presented with a form, we give a name for the branch and down below we see the rules we can define. We will choose &lt;em&gt;'&lt;strong&gt;Require a pull request before merging&lt;/strong&gt;'&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It will require the collaborators to perform a pull request before merging, this will enforce that all commit be made to a non-protected branch and submitted via a pull request before it can be merged with the master.&lt;/p&gt;

&lt;p&gt;Also we will set the number of approvals needed to 1, For the purpose of this discussion it makes sense but in a real-world scenario you can imagine many collaborators needing to approve a pull request before a merger can take place.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XP_R8AQb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vpdrp8aherxwwn3ow6el.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XP_R8AQb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vpdrp8aherxwwn3ow6el.gif" alt="protect-a-branch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our master branch is now protected, to confirm this we can make changes on our local repo and push them to the remote repo.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;NB! I am using a VM in Azure to simulate a different collaborator.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We make the changes to our index.html file and commit them. But when we try to push the changes to the master branch, we receive an error, it is a message letting us know that the master branch is protected.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_nSDXXtp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j0y2c612orr4auvr0npa.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_nSDXXtp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j0y2c612orr4auvr0npa.gif" alt="add-to-protected-branch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This proves that our master branch is protected and we can control and manage how changes happen from the owners standpoint.&lt;/p&gt;

&lt;p&gt;However for the collaborator, they need to push the changes to a non-protected branch and perform a pull request as dictated in the branch rules.&lt;/p&gt;

&lt;p&gt;Basically we need to create a new branch, push it to GitHub and then merge it to the master branch.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xsr-GzI3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/892csxt4mxr1515gkei9.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xsr-GzI3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/892csxt4mxr1515gkei9.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We create and switch into branch by running the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git switch -c test
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here &lt;em&gt;test&lt;/em&gt; is refering to the name of the new branch we are creating. The &lt;em&gt;test&lt;/em&gt; branch will have all the commits we just made, therefore we can just push this branch to our remote repo by running the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git push origin test
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see below, we have pushed our code the remote repo. For us to merge it with the master branch we need to perform a pull request.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eZqZQM75--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kgg4mhinxwt773r5vyyv.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eZqZQM75--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kgg4mhinxwt773r5vyyv.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notice when we clicked to create a pull request, we received some warnings, the first states &lt;strong&gt;Review Required&lt;/strong&gt; the second states &lt;strong&gt;Merging is blocked&lt;/strong&gt;. Also we are not able to merge the pull request since the button has been disabled.&lt;/p&gt;

&lt;p&gt;Back in the owners account, we refresh to see the latest changes and see we have a new pull request.&lt;/p&gt;

&lt;p&gt;Here we will see the same warnings we saw on the collaborators account, however we can merge the pull request since the button is not disabled, since we are the owner of the repo.&lt;/p&gt;

&lt;p&gt;Before we merge the branches, we need to set the reviewer to 1 since it is one of the branch rules we created.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OChacSEb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mvj1a5sq0d7wh9bp9vbx.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OChacSEb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mvj1a5sq0d7wh9bp9vbx.gif" alt="pull-request-on-owner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once we add ourselves to the Reviewers option, we have to go to the &lt;strong&gt;files changed&lt;/strong&gt; tab. Where we can find all the changes made by the collaborator, after reviewing the changes, if the owner is happy, they can approve the changes by clicking the &lt;strong&gt;review changes&lt;/strong&gt; green button at the top right.&lt;/p&gt;

&lt;p&gt;In this case we click on the &lt;strong&gt;Approve&lt;/strong&gt; option and leave a sincere comment for the collaborator. Next we click the green button the reads &lt;strong&gt;Submit Review&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MiXYe1qs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g2eufy0hm3mr2cj8j7y8.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MiXYe1qs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g2eufy0hm3mr2cj8j7y8.gif" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can see the pull request has been approved by the owner and we can finally merge the changes to the master branch by clicking the &lt;strong&gt;Merge Pull Request&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;If we check the commits history, we will find all the commits made by the collaborator followed by the merge commit. We can see the same changes have reflected on the collaborators account. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_AvfO5Se--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hr7z07zzgjfwvp1g9ope.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_AvfO5Se--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hr7z07zzgjfwvp1g9ope.gif" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That is the way we can protect the branches and control collaborators work on GitHub.&lt;/p&gt;

&lt;p&gt;I hope you gained at-least a single piece of knowledge from this series, I personally have learnt a lot and feel more comfortable working with Git and GitHub than before I started this series. &lt;/p&gt;

&lt;p&gt;Even though it is the end, I realise there are more aspects of Git and GitHub I haven't touched on. I might decide to visit them and share my experience. &lt;/p&gt;

&lt;p&gt;For now I signing off on Git and GitHub, it was a fun ride and thank you all for being a part of this journey.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FltxjCUD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6zrmcqtg60wwzn2qqw4k.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FltxjCUD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6zrmcqtg60wwzn2qqw4k.gif" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>git</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Responsive Image slider using Owl Carousel | HTML &amp; CSS</title>
      <author>UI Geeks</author>
      <pubDate>Wed, 13 Oct 2021 19:16:11 +0000</pubDate>
      <link>https://dev.to/uigeeks/responsive-image-slider-using-owl-carousel-html-css-44gn</link>
      <guid>https://dev.to/uigeeks/responsive-image-slider-using-owl-carousel-html-css-44gn</guid>
      <description>&lt;p&gt;In This Video Tutorial, I will be showing  How to Create Responsive Image slider using Owl Carousel | HTML &amp;amp; CSS .  This carousel is stage carousel automatic image sider with  works very better in any mobile device as well as a desktop device. This automatic image slide makes with popular jQuery plugin Owl Carousel.&lt;/p&gt;

&lt;p&gt;Source :&lt;/p&gt;

&lt;p&gt;Owl Carousel : &lt;br&gt;
&lt;a href="https://owlcarousel2.github.io/OwlCarousel2/"&gt;https://owlcarousel2.github.io/OwlCarousel2/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Images : &lt;br&gt;
&lt;a href="https://unsplash.com/"&gt;https://unsplash.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CDN&lt;br&gt;
jQuery : &lt;a href="https://cdnjs.com/libraries/jquery"&gt;https://cdnjs.com/libraries/jquery&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Source Code&lt;br&gt;
GitHub : &lt;a href="https://github.com/Ui-geeks/Responsive-image-slider-"&gt;https://github.com/Ui-geeks/Responsive-image-slider-&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Watch More Animation web Tutorials :&lt;br&gt;
Glitch Text Animation Using Baffle.js | HTML &amp;amp; CSS &lt;br&gt;
&lt;a href="https://youtu.be/YTXxbusCCr0"&gt;https://youtu.be/YTXxbusCCr0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Infinite Marquee Animation Using jQuery.Marquee | HTML &amp;amp; CSS&lt;br&gt;
&lt;a href="https://youtu.be/33qPfl16tZw"&gt;https://youtu.be/33qPfl16tZw&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'm on some other places on the internet too!&lt;/p&gt;

&lt;p&gt;Follow on Instagram&lt;br&gt;
&lt;a href="https://www.instagram.com/uigeeks"&gt;https://www.instagram.com/uigeeks&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>javascript</category>
      <category>slider</category>
    </item>
    <item>
      <title>Progress and Lessons Learned Internationalizing the user-statistician GitHub Action</title>
      <author>Vincent A. Cicirello</author>
      <pubDate>Wed, 13 Oct 2021 19:07:37 +0000</pubDate>
      <link>https://dev.to/cicirello/progress-and-lessons-learned-internationalizing-the-user-statistician-github-action-2he9</link>
      <guid>https://dev.to/cicirello/progress-and-lessons-learned-internationalizing-the-user-statistician-github-action-2he9</guid>
      <description>&lt;p&gt;A couple weeks ago, at the start of Hacktoberfest, I decided to recruit Hacktoberfest contributors to help internationalize the &lt;a href="https://github.com/cicirello/user-statistician"&gt;user-statistician GitHub Action&lt;/a&gt;. This post is an update on the progress of this effort and lessons learned from the experience. It is organized as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-is-the-userstatistician"&gt;What is the user-statistician?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#progress-internationalizing-for-hacktoberfest"&gt;Progress Internationalizing for Hacktoberfest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#lessons-learned-from-the-experience"&gt;Lessons Learned from the Experience&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By the way, there are still a couple open issues for additional language translations if you are looking for something to contribute to. And if it doesn't already support your preferred language and there isn't an open issue, feel free to submit an issue.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-userstatistician"&gt;
  &lt;/a&gt;
  What is the user-statistician?
&lt;/h2&gt;

&lt;p&gt;The user-statistician GitHub Action generates a detailed GitHub stats SVG entirely within GitHub Actions, GitHub's framework for workflow automation. It generates a detailed visual summary of your activity on GitHub, such as your contributions, distribution of programming languages within your public repositories, etc, suitable to display on your &lt;a href="https://docs.github.com/en/github/setting-up-and-managing-your-github-profile/customizing-your-profile/managing-your-profile-readme"&gt;GitHub Profile README&lt;/a&gt;. It can also be customized in various ways, such as color theme, among other customizations.&lt;/p&gt;

&lt;p&gt;You can find more about it in my earlier Dev.to post recruiting Hacktoberfest contributors, including a few examples of the SVGs of GitHub profile stats that it produces:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/cicirello" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lVYicB_O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--lv_vXYvX--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/469122/085f1955-378c-49cb-866b-21b9ec1f1439.jpeg" alt="cicirello"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/cicirello/hacktoberfest-participants-help-us-internationalize-the-user-statistician-github-action-2bga" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Hacktoberfest Participants Help Us Internationalize the user-statistician GitHub Action&lt;/h2&gt;
      &lt;h3&gt;Vincent A. Cicirello ・ Sep 29 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#hacktoberfest&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#showdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#github&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;And all of the details are available in the GitHub repository:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/cicirello"&gt;
        cicirello
      &lt;/a&gt; / &lt;a href="https://github.com/cicirello/user-statistician"&gt;
        user-statistician
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Generate a GitHub stats SVG for your GitHub Profile README in GitHub Actions
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
user-statistician&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/cicirello/user-statistician#user-statistician"&gt;&lt;img alt="user-statistician" src="https://res.cloudinary.com/practicaldev/image/fetch/s--TO3wDtp4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/cicirello/user-statistician.github/preview/user-statistician.png" width="640"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Check out all of our GitHub Actions: &lt;a href="https://actions.cicirello.org/" rel="nofollow"&gt;https://actions.cicirello.org/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Hacktoberfest Participants and Other Potential Contributors&lt;/h2&gt;
&lt;p&gt;We are currently interested in increasing internationalization of this project. It currently supports generating
the SVG in &lt;a href="https://github.com/cicirello/user-statistician#locale"&gt;15 languages&lt;/a&gt;. There are open issues for a few other languages, which you can work on if
you would like to translate the various labels. You may also work on translations to other languages not currently
included among open issues. In such a case, please start by submitting an issue (similar to the existing ones) so that
we are aware of interest in a particular language.&lt;/p&gt;
&lt;h2&gt;
About&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/marketplace/actions/user-statistician"&gt;&lt;img src="https://camo.githubusercontent.com/3ca5b3c655ed2e7763b5fa5f8b645cdef39e76e823daa262f8789413ef798321/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f72656c656173652f6369636972656c6c6f2f757365722d73746174697374696369616e3f6c6162656c3d4d61726b6574706c616365266c6f676f3d476974487562" alt="GitHub release (latest by date)"&gt;&lt;/a&gt;
&lt;a href="https://github.com/search?q=cicirello+user-statistician+path%3A.github%2Fworkflows+language%3AYAML&amp;amp;type=Code"&gt;&lt;img src="https://camo.githubusercontent.com/22b7cb980be30b3bba9d973f16414cebd772dd3765fab691c5039308aa0693a5/68747470733a2f2f696d672e736869656c64732e696f2f656e64706f696e743f75726c3d68747470732533412532462532467777772e6369636972656c6c6f2e6f7267253246656e64706f696e7473253246757365722d73746174697374696369616e2e6a736f6e" alt="Count of Action Users"&gt;&lt;/a&gt;
&lt;a href="https://github.com/cicirello/user-statistician/actions/workflows/build.yml"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cm00pQqq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/cicirello/user-statistician/actions/workflows/build.yml/badge.svg" alt="build"&gt;&lt;/a&gt;
&lt;a href="https://github.com/cicirello/user-statistician/actions/workflows/generate-samples.yml"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T8_119MR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/cicirello/user-statistician/actions/workflows/generate-samples.yml/badge.svg" alt="samples"&gt;&lt;/a&gt;
&lt;a href="https://github.com/cicirello/user-statistician/actions/workflows/codeql-analysis.yml"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AfF_iOMD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/cicirello/user-statistician/actions/workflows/codeql-analysis.yml/badge.svg" alt="CodeQL"&gt;&lt;/a&gt;
&lt;a href="https://github.com/cicirello/user-statistician/blob/main/LICENSE"&gt;&lt;img src="https://camo.githubusercontent.com/a0bcf640ead218e8b4b6b3773a9bb0d5208717ad85db5a09c3e3c73e55968403/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6369636972656c6c6f2f757365722d73746174697374696369616e" alt="License"&gt;&lt;/a&gt;
&lt;a href="https://github.com/cicirello/user-statistician"&gt;&lt;img src="https://camo.githubusercontent.com/2311408c037fc2534ccfc335d604eadf1f8fcc7e5dd8c3c6cd326d433d7f2936/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c616e6775616765732f746f702f6369636972656c6c6f2f757365722d73746174697374696369616e" alt="GitHub top language"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/cicirello/user-statistician/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22"&gt;&lt;img src="https://camo.githubusercontent.com/9076b1744dc383d6ac9ea39f2123071a1b05ad480062a701fb5d2f7533f2765b/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f6369636972656c6c6f2f757365722d73746174697374696369616e2f676f6f6425323066697273742532306973737565" alt="good first issue"&gt;&lt;/a&gt;
&lt;a href="https://github.com/cicirello/user-statistician/issues?q=is%3Aissue+is%3Aopen+label%3A%22Hacktoberfest%22"&gt;&lt;img src="https://camo.githubusercontent.com/a5227a0c8cc5370d4bd5bd9cfa00c46bd310967ab1dd7df8d9abec94ba14f3de/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f6369636972656c6c6f2f757365722d73746174697374696369616e2f4861636b746f62657266657374" alt="Hacktoberfest"&gt;&lt;/a&gt;
&lt;a href="https://github.com/cicirello/user-statistician/issues?q=is%3Aissue+is%3Aopen"&gt;&lt;img src="https://camo.githubusercontent.com/8bbf1d76b3fcf9677726d5a9660892a65edfde5599afe1f357df57e2ab3b6d50/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f6369636972656c6c6f2f757365722d73746174697374696369616e" alt="GitHub open issues"&gt;&lt;/a&gt;
&lt;a href="https://github.com/cicirello/user-statistician/issues?q=is%3Aissue+is%3Aclosed"&gt;&lt;img src="https://camo.githubusercontent.com/77fbc7e5808b4c9f5f468f50c0997ac5f209d111ff1220b938e478932aec5c18/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732d636c6f7365642f6369636972656c6c6f2f757365722d73746174697374696369616e" alt="GitHub closed issues"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://github.com/cicirello/user-statistician"&gt;cicirello/user-statistician&lt;/a&gt; GitHub
Action generates a detailed visual summary of your activity on GitHub in the form of an SVG
suitable to display on
your &lt;a href="https://docs.github.com/en/github/setting-up-and-managing-your-github-profile/customizing-your-profile/managing-your-profile-readme"&gt;GitHub Profile README&lt;/a&gt;
Although the intended use-case is to generate an SVG image for your GitHub Profile README
you can also potentially link to…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/cicirello/user-statistician"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#progress-internationalizing-for-hacktoberfest"&gt;
  &lt;/a&gt;
  Progress Internationalizing for Hacktoberfest
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Before Hacktoberfest:&lt;/strong&gt; I designed the Action from the start so that it would be easy to add support for languages other than English. I initially opened a few issues for translations to a few random languages, and labeled them as &lt;code&gt;good first issue&lt;/code&gt; and &lt;code&gt;help wanted&lt;/code&gt;, and I got a couple random contributions that way. But prior to Hacktoberfest, user-statistician was limited to three languages: English, German, and Italian.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Two Weeks into Hacktoberfest:&lt;/strong&gt; A couple days before Hacktoberfest began, I added the topic to the repository, labeled all of the existing language translation issues with &lt;code&gt;Hacktoberfest&lt;/code&gt;, and posted about it here on Dev.to. In the first two weeks of Hacktoberfest, I've merged PRs from 12 different contributors, adding support for 12 more languages. The user-statistician GitHub Action now supports 15 languages: Bahasa Indonesia, Bengali, English, French, German, Hindi, Italian, Japanese, Korean, Lithuanian, Polish, Portuguese, Russian, Spanish, and Turkish. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lessons-learned-from-the-experience"&gt;
  &lt;/a&gt;
  Lessons Learned from the Experience
&lt;/h2&gt;

&lt;p&gt;99% of the code that I write is for my research on evolutionary computation, and other computational intelligence topics. It includes a handful of libraries including implementations of the relevant algorithms, a few repositories that provide example usage of those libraries, code to reproduce experiments from published articles, etc. None of it has a user interface. So most, if not all, of that code doesn't really motivate an internationalization effort, other than if I wanted to provide translations of API docs.&lt;/p&gt;

&lt;p&gt;Therefore, this was my first attempt at providing international support for software I've developed. I actually thought about this at the beginning. The user-statistician action is implemented in Python. Right at the beginning, I isolated into a single source code file all of the strings related to labeling the different stats, section headings used to organize the stats into a couple categories, and template strings for the heading at the top. Specifically, I used a couple Python dictionaries, with the locale code for the language as a key. This worked well, and the two languages (Italian and German) that were contributed prior to Hacktoberfest were easily merged.&lt;/p&gt;

&lt;p&gt;However, what I did not anticipate in that design was the potential for there to be multiple PRs (several in one case) submitted over a short time-frame (e.g., within the same day). And this is what I experienced with early Hacktoberfest contributions. The result was many conflicts requiring resolution prior to merge. Most of these were easy to resolve, but somewhat tedious. If I were to design another tool in the future with international support, I would likely isolate each locale into its own individual source file. JSON may have been the way to go for this particular GitHub Action since JSON is simple to parse from Python, perhaps using a file naming convention with the locale code as the filename (e.g., &lt;code&gt;en.json&lt;/code&gt; for the English version). Even the beginning of Hacktoberfest rush of new contributors would have been free of conflicting PRs since each would have been isolated from the others. Perhaps this is obvious to those of you with prior experience supporting multiple languages within an application or tool.&lt;/p&gt;

&lt;p&gt;I could potentially take the time to refactor in this very way. But at this point for this application, there would be little if any benefit to do so. Most of the languages with the largest numbers of native speakers are now accounted for, so I'm not likely to see several PRs coming in at about the same time with new language translations leading to the quantity of conflicts I experienced at the start of Hacktoberfest. So although I do believe in refactoring to improve maintainability, in this case I would not likely gain back the time needed to do so. &lt;/p&gt;

</description>
      <category>hacktoberfest</category>
      <category>github</category>
      <category>showdev</category>
      <category>githubactions</category>
    </item>
    <item>
      <title>Why use a headless commerce platform?</title>
      <author>Nicklas Gellner</author>
      <pubDate>Wed, 13 Oct 2021 18:55:45 +0000</pubDate>
      <link>https://dev.to/medusajs/why-use-a-headless-commerce-platform-g8a</link>
      <guid>https://dev.to/medusajs/why-use-a-headless-commerce-platform-g8a</guid>
      <description>&lt;p&gt;In the world of ecommerce, headless commerce platforms have rapidly gained interest in recent years, but what is the buzz really about? We interviewed more than 20 ecommerce managers from D2C brands to understand what elements they found to be most valuable in a headless commerce platform like &lt;a href="https://www.medusa-commerce.com/"&gt;Medusa&lt;/a&gt;. The findings are summarized below.&lt;/p&gt;

&lt;p&gt;Additionally, we will explain some of the functional differences between a monolithic and a headless commerce platform. For more technical insights into how Medusa works, please check out our &lt;a href="https://docs.medusa-commerce.com/quickstart/quick-start"&gt;documentation&lt;/a&gt; or &lt;a href="https://github.com/medusajs/medusa"&gt;GitHub repo&lt;/a&gt;.&lt;br&gt;
‍&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#monolithic-platforms-the-world-before-headless%C2%A0commerce"&gt;
  &lt;/a&gt;
  Monolithic platforms: The world before headless commerce
&lt;/h1&gt;

&lt;p&gt;Monolithic structures, such as Shopify, are known for their all-in-one characteristic that link backend and frontend interdependently into one solution. Frontend refers to the visual elements of a website that users can see and interact with, while backend refers to the parts not directly accessed by the user such as order processing, customer information storage etc.&lt;/p&gt;

&lt;p&gt;Monolithic solutions have always been popular for providing quick out-of-the-box solutions that make ecommerce easily available for everyone. However, as much as these solutions are easy to get started with, they often lead to pain points that companies realize as they grow. Here are some of the most common pain points we hear:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Customizability is limited due to monolithic solutions' templated setup&lt;/strong&gt;. Indeed, they are often built upon templated frontend designs, complicating the creation of a true on-brand experience for the customers. In a similar manner, limitations also apply in the use of outside plugins as monolithic solutions are not purposefully built for easy integrations.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Monolithic solutions lack the flexibility that scaling merchants need&lt;/strong&gt;. Adapting code, adding functionality, or changing plugins take significant manpower and often lead to "hacked solutions" - i.e., suboptimal building choices that yield subsequent complications. A problematic example is multi-regional and currency support, which have caused a maintenance nightmare for businesses that need to set up individual webshops for each country they operate in because out-of-the-box functionality does not support expansions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Monolithic structures are not built for performance&lt;/strong&gt;. Due to multiple integrations and often overwhelming use of micro-plugins, many merchants observe decreasing page speed and lack of control over Search Engine Optimization (SEO) using a monolithic setup as they expand. Likewise, hosting solutions are using local servers which is not a performance-enhancing method compared to using distributed hosting possibilities otherwise available.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These traditional solutions' shortcomings have been central drivers provoking shifts from monolithic to headless setups in recent years. Let us briefly outline how headless commerce platforms work in opposition to the above.&lt;br&gt;
‍&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-headless-commerce-platforms-work"&gt;
  &lt;/a&gt;
  How headless commerce platforms work
&lt;/h1&gt;

&lt;p&gt;In essence, the term "headless commerce" refers to the architectural decoupling of the frontend and backend layer of an ecommerce platform. If you think of a traditional ecommerce application as a body, removing its 'head', or the frontend layer leaves you with the ecommerce backend. This separation ensures that each module within the application - be it a shopping cart, a payment gateway, or pricing engine - can function as a microservice that operates independently.&lt;/p&gt;

&lt;p&gt;This decoupled and modular architecture gives several structural advantages such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Control the frontend:&lt;/strong&gt; Being able to choose the frontend layer that seems most fit for purpose and can be customized to the extent needed&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;API-first design:&lt;/strong&gt; More seamlessly integrate with other solutions as the backend is often purposefully made for integrations with outside solutions through APIs&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Developer experience:&lt;/strong&gt; Increasing developers flexibility when building custom features to the setup - which is only enhanced with open-source visibility as is the case with Medusa&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Currently, there is a rapid interest from businesses in transitioning from monolithic into modular ecommerce platforms. A &lt;a href="https://wpengine.com/resources/the-state-of-headless-global-research-report/"&gt;study&lt;/a&gt; by WP Engine finds that more than 90% of the ecommerce businesses surveyed that do not currently operate headless are planning to transition in the future.&lt;br&gt;
‍&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-headless-commerce-platforms-are-changing-the%C2%A0game"&gt;
  &lt;/a&gt;
  How headless commerce platforms are changing the game
&lt;/h1&gt;

&lt;p&gt;Building with a headless commerce platform enables you to get structural benefits such as frontend control, API-first design, and an improved developer experience. But how does it translate into business impact?&lt;/p&gt;

&lt;p&gt;After interviewing +20 D2C eCommerce managers on their opinions about the headless commerce platforms, we have found the three areas that they see the most value from.&lt;br&gt;
‍&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#customization"&gt;
  &lt;/a&gt;
  Customization
&lt;/h3&gt;

&lt;p&gt;The separation of frontend and backend enables you to build a perfect on-brand experience for the webshop visitors and ensures integrations are tailored to the shop's individual needs. Indeed, infinite, and specific modular changes allow ecommerce stores to creatively adapt to any desired design without predetermined and templated CMS constraints. In other words, headless commerce platforms have the advantage of giving merchants the freedom of expression to build however they want to enrich the user experience. Moreover, the API-first and open-source design of a headless commerce platform like Medusa ensures that merchants can take full ownership of their tech stack to build with best-in-breed technologies that best meet their needs. This setup also makes it easier to build custom functionality due to the direct code access giving merchants the right to innovate on their own distinction. In short, headless commerce platforms offer original and custom-built possibilities for merchants to design an ecommerce site that best matches themselves and their customers.&lt;br&gt;
‍&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#flexibility"&gt;
  &lt;/a&gt;
  Flexibility
&lt;/h3&gt;

&lt;p&gt;Headless commerce platforms give webshops the flexibility to adjust their commerce setup as they grow. One example is the need for multi-regional currency-, shipping- and payment-support which is often not fully provided in most monolithic solutions. For Medusa, it has been essential to build this flexibility into the core to ensure that a global setup can be managed from one place and making it easy to adjust for local currency differences and shift between local shipping and payment providers. For other integrations such as CMS, analytics, and accounting solutions, it becomes smoother to shift around due to the API-first approach. We experienced this first-hand by building an extensive ERP integration in a record time of only 4 weeks; in comparison, the ERP vendor was used to these processes taking no less than 12 weeks with monolithic setups. Another place where the flexibility of headless commerce platform becomes handy is in the omni-channel setup: integrations can be facilitated to any type of sales channel from different POS systems to all types of online channels (e.g. SoMe platforms, market places, chatbots etc.) while gathering it all in one backend. To sum up, adjusting the tech setup to a merchant's evolving needs gets simplified with a headless commerce platform.&lt;br&gt;
‍&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#performance"&gt;
  &lt;/a&gt;
  Performance
&lt;/h3&gt;

&lt;p&gt;Last but not least, a headless commerce platform gives you the ideal prerequisite for optimizing your page performance. Page speed is instrumental for the user experience and some &lt;a href="https://www.fasterize.com/en/loading-speed-web-performance-key-figures/"&gt;studies&lt;/a&gt; even suggest that a 0.1 sec. improvement is enough to boost conversions up to 8%. With a headless commerce platform, the frontend is behaving as an independent unit which enables users to get the interactive interface significantly faster. This can be done, as it allows websites to load the static content of a page (e.g., fixed images, plain text, etc.) before the dynamic and interactive components. Moreover, headless commerce platforms (especially open-source ones) will often contain fewer "quick fix plugins" as adjustments can be made directly to the core instead of requiring more plugins. On performance, headless commerce platforms also solve the problem of slow servers as they allow for the use of distributed cloud server networks that are significantly faster than using stationary remote ones. Finally, the ability to use an outside CMS allows for custom URL structure and better page control than what is possible with a solution like Shopify. URLs that contain self-explanatory keywords and that refer to one specific links maximizing search rankings along with the improved page speed. In sum, conversion relies heavily on SEO, itself revamped by headless' page speed, efficiency and control over page structure.&lt;br&gt;
‍&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#business-impact-of-a-headless-commerce%C2%A0platform"&gt;
  &lt;/a&gt;
  Business impact of a headless commerce platform
&lt;/h1&gt;

&lt;p&gt;As headless commerce platforms start to be more commonly used, it gets evident that the above benefits can have a profound measurable impact on webshops' overall performance and for the most part, with limited little developer support:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;TEKLA Fabrics&lt;/strong&gt; moved from WooCommerce to Medusa's headless commerce platform and achieved a 70% uplift in conversion and scaled to cover more than 50 markets. They achieved this with only one front-end developer to manage the full setup.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Burrow&lt;/strong&gt;, the home furniture retailer, observed a 30% increase in conversion rate and a 50% site speed improvement leveraging a headless commerce platform and a modern frontend. They achieved this progress only 2 months after the platform shift with limited developer support.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Pretty Green&lt;/strong&gt; experienced a shift from 4- to 1-second response time on their commerce site, even during high traffic. Moreover, the shift to a headless commerce platform resulted in a +5% increase in average order value and a +6% rise in product recommendation clicks.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;K2 Sports&lt;/strong&gt; claimed that a shift to a headless commerce platform helped them meet their on-brand experience goal, created a site that was 75% faster, enabled them to publish content 90% more quickly, and boosted productivity by 50%, all while alleviating development dependencies.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Medusa gives all merchants the possibility to achieve such meaningful success. We think the best way to do this is to plan for a shift to a headless commerce platform already early in the digital commerce journey. In reality, many problems encountered when scaling an ecommerce business simply come from not adopting to a more custom commerce platform early, as merchants tried to take an "easy" templated solution from the get-go, without considering the issues that build on top as you grow.&lt;br&gt;
‍&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lowering-the-bar-for-when-to-use-a-headless-commerce%C2%A0platform"&gt;
  &lt;/a&gt;
  Lowering the bar for when to use a headless commerce platform
&lt;/h1&gt;

&lt;p&gt;Headless commerce platforms present numerous benefits that are not negligible anymore in a world where competition is increasing online, platforms multiply, customers' expectations rise, and technology shapes ecommerce prosperity. In this context, accessibility should not be a barrier for any ambitious business willing to invest in their growth potential and shift to a headless commerce platform. That is why Medusa made it a key priority to:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Lower the bar for when businesses can shift to a headless commerce platform&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We do this by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Creating a setup that is easy to use and extend, even as a smaller merchant with limited developer resources&lt;/li&gt;
&lt;li&gt;Making a suite of plugins, quick starters, and migration tools available to make it easy to get up and run&lt;/li&gt;
&lt;li&gt;Making it free to use our cloud solution compared to many other competing platforms starting at +20,000 USD / year&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With a lower bar for entering into the world of headless commerce, we hope to make the benefits accessible to merchants of all sizes in the future. If you are interested to hear more, we are always happy to give you a &lt;a href="https://ky5eo2x1u81.typeform.com/to/OtbNv3tx"&gt;product demo&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>jamstack</category>
      <category>webdev</category>
      <category>opensource</category>
      <category>ecommcerce</category>
    </item>
  </channel>
</rss>
