<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Develop your first Dapp!</title>
      <author>Nazeeh Vahora</author>
      <pubDate>Sat, 03 Jul 2021 07:54:59 +0000</pubDate>
      <link>https://dev.to/nazeeh21/develop-your-first-dapp-26dj</link>
      <guid>https://dev.to/nazeeh21/develop-your-first-dapp-26dj</guid>
      <description>&lt;p&gt;Interested in Blockchain technology, but don't find a reliable source to get started?&lt;br&gt;
You have come to the right place. In this article, we'll learn how to develop a complete decentralized website (Dapp) from scratch. &lt;/p&gt;

&lt;p&gt;We will be writing a &lt;strong&gt;Lottery&lt;/strong&gt; contract that will allow people to participate in the lottery. The lottery manager will pick a lottery winner and all the lottery amount will eventually get transferred to the winner. Sounds interesting, right?  So, let's get started!&lt;/p&gt;

&lt;p&gt;To develop a dapp, we first need to write an Ethereum Smart Contract using &lt;a href="https://docs.soliditylang.org/en/v0.8.6/"&gt;Solidity&lt;/a&gt; which we'll deploy on the blockchain network.&lt;/p&gt;

&lt;p&gt;We'll be using &lt;a href="http://remix.ethereum.org/"&gt;Remix IDE&lt;/a&gt; for writing, debugging, and interacting locally with the Smart Contract.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; To follow along, refer to &lt;a href="https://github.com/Nazeeh21/Lottery-Contract/blob/main/contracts/Lottery.sol"&gt;this contract&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let's write our &lt;strong&gt;first smart contract&lt;/strong&gt;. Head on to the &lt;a href="http://remix.ethereum.org/"&gt;Remix IDE&lt;/a&gt; and navigate to the &lt;em&gt;Storage.sol&lt;/em&gt; file in the &lt;em&gt;Contracts&lt;/em&gt; folder as shown.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BPgb-vlf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://azrejqwiefqzfnmtdomu.supabase.co/storage/v1/object/public/avatars/remix_ss_1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BPgb-vlf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://azrejqwiefqzfnmtdomu.supabase.co/storage/v1/object/public/avatars/remix_ss_1.png" alt="Storage.sol"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Delete the existing code from the &lt;em&gt;Storage.sol&lt;/em&gt; file and follow along.&lt;/p&gt;

&lt;p&gt;Specify the Solidity version for our code by adding the code below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pragma solidity ^0.4.17;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's get started with the &lt;strong&gt;Contract&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;contract Lottery {  

 }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Firstly, we have used the &lt;code&gt;contract&lt;/code&gt; keyword to declare a Contract named &lt;strong&gt;Lottery&lt;/strong&gt;, followed by the &lt;em&gt;curly&lt;/em&gt; braces, where we'll write our Contract.&lt;/p&gt;

&lt;p&gt;Now, declare two variables namely &lt;code&gt;manager&lt;/code&gt; of datatype &lt;code&gt;address&lt;/code&gt; and &lt;code&gt;players&lt;/code&gt; of datatype &lt;code&gt;address[]&lt;/code&gt;.  In Solidity, the &lt;code&gt;address&lt;/code&gt; datatype is used to store the &lt;strong&gt;wallet address&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;address public manager;
address[] public players;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Following, declare a &lt;code&gt;Lottery()&lt;/code&gt; function. As this function has the same name as the Contract name, it will eventually work as a &lt;strong&gt;constructor&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Lottery() public {
        manager = msg.sender;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This function will execute automatically when anyone deploys the Contract.  We have used the &lt;code&gt;public&lt;/code&gt; keyword after the function name which will make the function's visibility &lt;em&gt;public&lt;/em&gt; and let anyone call the function.&lt;/p&gt;

&lt;p&gt;In this function, we are setting the caller of the function as the manager.  As a result, the user who will deploy this Contract will be recognized as the manager of the contract.&lt;/p&gt;

&lt;p&gt;In our case, you will the renowned manager of the Contract as you are going to deploy it.&lt;/p&gt;

&lt;p&gt;After that, declare an &lt;code&gt;enter()&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function enter() public payable {
        require(msg.value &amp;gt; .01 ether);
        players.push(msg.sender);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This function will let anyone enter our lottery. Apart from the &lt;code&gt;public&lt;/code&gt; keyword, we have used the &lt;code&gt;payable&lt;/code&gt; keyword. It specifies that this function will require some amount of &lt;strong&gt;ethers&lt;/strong&gt; to execute. So, whoever wants to enter our lottery, needs to pay a specified amount of &lt;em&gt;ether&lt;/em&gt;, which also seems necessary, right? This &lt;em&gt;ether&lt;/em&gt; will get stored as the &lt;em&gt;Contract's&lt;/em&gt; ether in our &lt;em&gt;Contract&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;enter()&lt;/code&gt; function, we have written &lt;code&gt;require(msg.value &amp;gt; .01 ether);&lt;/code&gt;. Here, &lt;code&gt;msg.value&lt;/code&gt; denotes the amount of ether the user sends along with the function. It specifies that to enter our &lt;em&gt;Lottery&lt;/em&gt;, the caller of the function must send ethers more than &lt;em&gt;0.01 ether&lt;/em&gt; and if the caller fulfills the specified condition, then only he is welcomed in the contract by pushing the caller's address to the &lt;code&gt;players&lt;/code&gt; array.&lt;/p&gt;

&lt;p&gt;Following the &lt;code&gt;enter()&lt;/code&gt; function, comes the &lt;code&gt;random()&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function random() private view returns (uint) {
        return uint(keccak256(block.difficulty, now, players));
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yes, you are getting it right. This function will return a &lt;em&gt;random&lt;/em&gt; number which will help the manager in picking a random winner among the entered players. Solidity does not have a native &lt;code&gt;random&lt;/code&gt; method, thus we have to define our own.&lt;/p&gt;

&lt;p&gt;But let's discuss what are these &lt;code&gt;private&lt;/code&gt;, &lt;code&gt;view&lt;/code&gt;, and &lt;code&gt;returns&lt;/code&gt; keywords following the function name.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;private&lt;/code&gt; -&amp;gt; This keyword is the opposite of the &lt;code&gt;public&lt;/code&gt; keyword. By using the &lt;code&gt;private&lt;/code&gt; keyword, we are blocking public access to this function. As a result of which, this function can't be called from outside of the contract, even by the manager, and can only be called from inside of the Contract.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;view&lt;/code&gt; -&amp;gt; It will restrict the modification of the data of our Contract and will only allow reading our Contract data.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;returns&lt;/code&gt; -&amp;gt; It specifies that our function will return some data. Following it, we have written &lt;code&gt;(uint)&lt;/code&gt; which specifies that our function will return data of type &lt;code&gt;uint&lt;/code&gt;. (&lt;em&gt;uint&lt;/em&gt; stands for &lt;em&gt;unsigned integer&lt;/em&gt;).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you want to know more about the Solidity datatypes, then go to &lt;a href="https://docs.soliditylang.org/en/v0.4.24/types.html#value-types"&gt;this&lt;/a&gt; page.&lt;/p&gt;

&lt;p&gt;After &lt;code&gt;random()&lt;/code&gt; comes the &lt;code&gt;pickWinner()&lt;/code&gt; function, which will let the manager pick the winner of our &lt;em&gt;Lottery&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function pickWinner() public restricted {
        uint index = random() % players.length;
        players[index].transfer(this.balance);
        players = new address[](0);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we have used a new keyword namely &lt;code&gt;restricted&lt;/code&gt; after the &lt;code&gt;public&lt;/code&gt; keyword.&lt;/p&gt;

&lt;p&gt;What does this &lt;code&gt;restricted&lt;/code&gt; keyword specify? Well, we'll talk about this keyword after the upcoming function.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;pickWinner()&lt;/code&gt; function, we are initializing the &lt;code&gt;index&lt;/code&gt; variable of type &lt;em&gt;uint&lt;/em&gt; to store the array index of the winning player, which is obtained by the shown operation. This operation will return a random number from 0 to &lt;code&gt;players.length() -1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;After getting the &lt;code&gt;index&lt;/code&gt;, we are transferring all the contract's ether to the address at the &lt;code&gt;players[index]&lt;/code&gt;.  Followed by resetting the &lt;code&gt;players&lt;/code&gt; variable to an empty array, so that we can now accept entries for a new lottery.&lt;/p&gt;

&lt;p&gt;After &lt;code&gt;pickWinner()&lt;/code&gt;, comes the &lt;code&gt;restricted()&lt;/code&gt; modifier.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;modifier restricted() {
        require(msg.sender == manager);
        _;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Modifier&lt;/strong&gt; is a special keyword that allows you to control the behavior of your smart contract functions. We have seen the use case of modifier in &lt;code&gt;pickWinner()&lt;/code&gt; function. By using &lt;em&gt;modifier&lt;/em&gt;, all the conditions specified in the modifier will also be applicable for the function in which it is used.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;restricted()&lt;/code&gt; modifier, we have specified the condition &lt;code&gt;require(msg.sender == manager);&lt;/code&gt; which specifies that sender must be the manager of the Contract.&lt;br&gt;
After that, we have written &lt;code&gt;_;&lt;/code&gt;, which will execute all the function code after this.&lt;/p&gt;

&lt;p&gt;Lastly comes the &lt;code&gt;player()&lt;/code&gt; function, which returns the &lt;code&gt;players&lt;/code&gt; array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function getPlayers() public view returns (address[]) {
        return players;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Getting bored of the theoretical thing, right? So, let's deploy our contract and start interacting with it.&lt;/p&gt;

&lt;p&gt;Navigate to the &lt;strong&gt;deploy and run transactions&lt;/strong&gt; panel on the Remix IDE. In this panel, make sure, your &lt;em&gt;ENVIRONMENT&lt;/em&gt; is set to &lt;em&gt;JavaScript VM&lt;/em&gt; as shown. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GJiC7XZa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://azrejqwiefqzfnmtdomu.supabase.co/storage/v1/object/public/avatars/remix_ss_5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GJiC7XZa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://azrejqwiefqzfnmtdomu.supabase.co/storage/v1/object/public/avatars/remix_ss_5.png" alt="remix_ss_5"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Similarly, select &lt;em&gt;Lottery-Contracts&lt;/em&gt; under the &lt;em&gt;CONTRACT&lt;/em&gt;  tab. Now, click &lt;strong&gt;Deploy&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;After &lt;strong&gt;Successfully&lt;/strong&gt; deploying your Contract, you can see all the variables and methods of our &lt;em&gt;Lottery&lt;/em&gt; contract in a Graphical form as shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sPmStuzx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://azrejqwiefqzfnmtdomu.supabase.co/storage/v1/object/public/avatars/remix_ss_3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sPmStuzx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://azrejqwiefqzfnmtdomu.supabase.co/storage/v1/object/public/avatars/remix_ss_3.png" alt="remix_ss_3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Clicking each of these buttons, allow us to interact with our Contract.&lt;/p&gt;

&lt;p&gt;On clicking the &lt;em&gt;manager&lt;/em&gt; button, you should get your current address. You can verify that address with your current address in the &lt;em&gt;ACCOUNT&lt;/em&gt; tab below the &lt;em&gt;ENVIRONMENT&lt;/em&gt; tab as shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XxJ6EVAK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://azrejqwiefqzfnmtdomu.supabase.co/storage/v1/object/public/avatars/remix_ss_4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XxJ6EVAK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://azrejqwiefqzfnmtdomu.supabase.co/storage/v1/object/public/avatars/remix_ss_4.png" alt="remix_ss_4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also change your current account, by selecting another account from the &lt;em&gt;ACCOUNT&lt;/em&gt; tab. Now, enter the lottery from this new account.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#note-you-can-check-the-status-of-your-transaction-by-expanding-the-panel-from-the-bottom-as-shown-below"&gt;
  &lt;/a&gt;
  Note: You can check the status of your transaction by expanding the panel from the bottom as shown below.
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3NnntqUB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://azrejqwiefqzfnmtdomu.supabase.co/storage/v1/object/public/avatars/remix_ss_6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3NnntqUB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://azrejqwiefqzfnmtdomu.supabase.co/storage/v1/object/public/avatars/remix_ss_6.png" alt="remix_ss_6"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, click the &lt;strong&gt;getPlayers&lt;/strong&gt; button, you should get an empty array. Surprised to see an empty array despite entering the lottery?&lt;/p&gt;

&lt;p&gt;In reality, our &lt;strong&gt;enter&lt;/strong&gt; function was failed. This was because we have required a minimum value of &lt;em&gt;0.01 ether&lt;/em&gt; to enter our lottery.&lt;/p&gt;

&lt;p&gt;Now, under the &lt;em&gt;VALUE&lt;/em&gt; tab, change the unit to &lt;strong&gt;ether&lt;/strong&gt; from &lt;strong&gt;Wei&lt;/strong&gt; and enter value &lt;em&gt;1&lt;/em&gt;. Now, again click the &lt;strong&gt;enter&lt;/strong&gt; button and then click &lt;strong&gt;getPlayers&lt;/strong&gt; button again. Now you should see your current address.&lt;/p&gt;

&lt;p&gt;Finally, click the &lt;strong&gt;pickWinner&lt;/strong&gt; button. Before clicking, ensure that your address is the same as the manager's address, by selecting from the &lt;em&gt;ACCOUNT&lt;/em&gt; tab. After picking the winner, you can verify that the ether in any of the player's addresses is again 100 and now the &lt;code&gt;players&lt;/code&gt; array is also empty.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;That's all! Woohoo! You just wrote and deployed your first Smart Contract on the test network.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Stay tuned for the next half of this project, in which we will learn the interaction of this Contract from our front end.&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>solidity</category>
      <category>ethereum</category>
      <category>smartcontracts</category>
    </item>
    <item>
      <title>Protect secrets in Azure Functions using Key Vault</title>
      <author>Marcel.L</author>
      <pubDate>Sat, 03 Jul 2021 07:54:05 +0000</pubDate>
      <link>https://dev.to/pwd9000/protect-secrets-in-azure-functions-using-key-vault-d2i</link>
      <guid>https://dev.to/pwd9000/protect-secrets-in-azure-functions-using-key-vault-d2i</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-an-azure-function"&gt;
  &lt;/a&gt;
  What is an Azure function?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/azure-functions/functions-overview"&gt;Azure Functions&lt;/a&gt; is a cloud service available on-demand that provides all the continually updated infrastructure and resources needed to run your applications. You focus on the pieces of code that matter most to you, and Functions handles the rest. Functions provides serverless compute for Azure. You can use Functions to build web APIs, respond to database changes, process IoT streams, manage message queues, and more.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/8-jz5f_JyEQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-azure-key-vault"&gt;
  &lt;/a&gt;
  What is Azure Key Vault?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/key-vault/general/overview"&gt;Azure Key Vault&lt;/a&gt; is a cloud service that allows us to protect cryptographic keys, certificates (and the private keys associated with certificates), and secrets (such as connection strings and passwords) in the cloud.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-integrate-key-vault-with-azure-functions"&gt;
  &lt;/a&gt;
  How to integrate Key Vault with Azure Functions
&lt;/h2&gt;

&lt;p&gt;Because Azure functions are serverless pieces of code, we do not want to put any of our secrets (such as passwords or connection strings) into our function code in plain-text. For security reasons we need to protect the secrets we use in our function code to not expose sensitive information. So today we will look at how we can create a function app using PowerShell Core as the code base, and protect any secrets that we use in our function code with Azure Key Vault.&lt;/p&gt;

&lt;p&gt;To get everything ready I will be using Azure CLI in a powershell console. First we will log into Azure by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="n"&gt;az&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we will create a &lt;code&gt;resource group&lt;/code&gt;, &lt;code&gt;storage account&lt;/code&gt;, &lt;code&gt;key vault&lt;/code&gt;, &lt;code&gt;app service plan&lt;/code&gt; and &lt;code&gt;function app&lt;/code&gt; by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Variables - Function app and storage account names must be unique.&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nv"&gt;$randomInt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Get-Random&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;-Maximum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;9999&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nv"&gt;$resourceGroupName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"KeyVaultFunction"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nv"&gt;$functionAppName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"func&lt;/span&gt;&lt;span class="nv"&gt;$randomInt&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nv"&gt;$storageName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"sa&lt;/span&gt;&lt;span class="nv"&gt;$functionAppName&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nv"&gt;$kvName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"kv&lt;/span&gt;&lt;span class="nv"&gt;$functionAppName&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nv"&gt;$region&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"uksouth"&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c"&gt;# Create a resource resourceGroupName&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;az&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;group&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$resourceGroupName&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--location&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$region&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c"&gt;# Create an azure storage account&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;az&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;storage&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;`
&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;--name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$storageName&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;`
&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;--location&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$region&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;`
&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;--resource-group&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$resourceGroupName&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;`
&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;--sku&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Standard_LRS"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;`
&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;--kind&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"StorageV2"&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c"&gt;# Create an azure key vault (RBAC model)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;az&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;keyvault&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;`
&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;--name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$kvName&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;`
&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;--resource-group&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$resourceGroupName&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;`
&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;--location&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$region&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;`
&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;--enable-rbac-authorization&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c"&gt;# Create a Function App&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;az&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;functionapp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;`
&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;--name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$functionAppName&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;`
&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;--storage-account&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$storageName&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;`
&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;--consumption-plan-location&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$region&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;`
&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;--resource-group&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$resourceGroupName&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;`
&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;--os-type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Windows"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;`
&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;--runtime&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"powershell"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;`
&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;--runtime-version&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"7.0"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;`
&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;--functions-version&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"3"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we will enable the function app with a &lt;strong&gt;system assigned&lt;/strong&gt; &lt;a href="https://docs.microsoft.com/en-us/azure/active-directory/managed-identities-azure-resources/overview"&gt;managed identity&lt;/a&gt; so that we can permission our function app to access our key vault.&lt;/p&gt;

&lt;p&gt;Under the function app &lt;strong&gt;settings&lt;/strong&gt; pane select &lt;strong&gt;Identity&lt;/strong&gt; and enable the &lt;strong&gt;system assigned&lt;/strong&gt; setting to be &lt;code&gt;ON&lt;/code&gt; and save the setting:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3HcZNjvx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/Azure-KeyVault-Function-Integrate/assets/managedIdentity-01.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3HcZNjvx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/Azure-KeyVault-Function-Integrate/assets/managedIdentity-01.png" alt="managedIdentity-01"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With the managed identity now created, we can add a role assignment and permissions (IAM) to our key vault. We will give the function identity the role &lt;a href="https://docs.microsoft.com/en-us/azure/role-based-access-control/built-in-roles#key-vault-secrets-user"&gt;Key Vault Secrets User&lt;/a&gt; because we only want the function to be able to retrieve secrets.&lt;/p&gt;

&lt;p&gt;On the same &lt;strong&gt;settings&lt;/strong&gt; pane where we set the &lt;strong&gt;identity&lt;/strong&gt; you will now see a new setting called &lt;strong&gt;Permissions&lt;/strong&gt;. Click on &lt;strong&gt;Azure Role Assignments&lt;/strong&gt; and add the relevant permissions on the key vault.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Note:&lt;/strong&gt; You can also add the role assignment permissions on the key vault by going to the key vault and select &lt;strong&gt;IAM&lt;/strong&gt; on the key vault directly.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3eYrYxbD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/Azure-KeyVault-Function-Integrate/assets/managedIdentity-02.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3eYrYxbD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/Azure-KeyVault-Function-Integrate/assets/managedIdentity-02.png" alt="managedIdentity-02"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TFcgAPNu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/Azure-KeyVault-Function-Integrate/assets/managedIdentity-03.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TFcgAPNu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/Azure-KeyVault-Function-Integrate/assets/managedIdentity-03.png" alt="managedIdentity-03"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can also check the &lt;strong&gt;IAM&lt;/strong&gt; permissions under our key vault for our function app:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PHBkH0Ue--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/Azure-KeyVault-Function-Integrate/assets/iam.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PHBkH0Ue--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/Azure-KeyVault-Function-Integrate/assets/iam.png" alt="iam"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create some secrets in the key vault for testing:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;SecUser01&lt;/td&gt;
&lt;td&gt;pwd9000admin&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SecPass01&lt;/td&gt;
&lt;td&gt;S8p3r$3cR3t2021!*!&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XYiPmYZo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/Azure-KeyVault-Function-Integrate/assets/kvsecrets.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XYiPmYZo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/Azure-KeyVault-Function-Integrate/assets/kvsecrets.png" alt="kvsecrets"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we will configure our function app to reference our key vault secrets and test the solution.&lt;br&gt;&lt;br&gt;
We will use the following &lt;a href="https://docs.microsoft.com/en-us/azure/app-service/app-service-key-vault-references#reference-syntax"&gt;Reference syntax&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@Microsoft.KeyVault(VaultName=myvault;SecretName=mysecret)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Under our function &lt;strong&gt;Settings&lt;/strong&gt; pane select &lt;strong&gt;Configuration&lt;/strong&gt; and add two new &lt;strong&gt;Application settings:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bJn1_wDW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/Azure-KeyVault-Function-Integrate/assets/app-settings-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bJn1_wDW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/Azure-KeyVault-Function-Integrate/assets/app-settings-1.png" alt="app-settings-1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oAG-ckAq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/Azure-KeyVault-Function-Integrate/assets/app-settings-2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oAG-ckAq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/Azure-KeyVault-Function-Integrate/assets/app-settings-2.png" alt="app-settings-2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PUHlYnUf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/Azure-KeyVault-Function-Integrate/assets/app-settings-3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PUHlYnUf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/Azure-KeyVault-Function-Integrate/assets/app-settings-3.png" alt="app-settings-3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Under the &lt;strong&gt;Functions&lt;/strong&gt; pane click &lt;strong&gt;Add&lt;/strong&gt; with the following settings: &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LDGt4gTa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/Azure-KeyVault-Function-Integrate/assets/function-add.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LDGt4gTa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/Azure-KeyVault-Function-Integrate/assets/function-add.png" alt="function-add"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Development Environment&lt;/td&gt;
&lt;td&gt;Develop in portal&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Select a template&lt;/td&gt;
&lt;td&gt;HTTP trigger&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;New Function&lt;/td&gt;
&lt;td&gt;keyvaultdemo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Authorization level&lt;/td&gt;
&lt;td&gt;Function&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Next under &lt;code&gt;Code + Test&lt;/code&gt; copy the following powershell code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="kr"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;namespace&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;System.Net&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c"&gt;# Input bindings are passed in via param block.&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="kr"&gt;param&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$TriggerMetadata&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c"&gt;# Write to the Azure Functions log stream.&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;Write-Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"PowerShell HTTP trigger function processed a request."&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c"&gt;# Interact with query parameters or the body of the request.&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$Request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Query&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Name&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="kr"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$Request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Body&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Name&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="nv"&gt;$body&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"This HTTP triggered function executed successfully. Pass a name in the query string or in the request body for a personalized response."&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="nv"&gt;$User&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$&lt;/span&gt;&lt;span class="nn"&gt;ENV&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;kv_SecUser01&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nv"&gt;$Pass&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$&lt;/span&gt;&lt;span class="nn"&gt;ENV&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;kv_SecPass01&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="n"&gt;Write-Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Username retrieved from key vault: &lt;/span&gt;&lt;span class="nv"&gt;$User&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;Write-Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Password retrieved from key vault: &lt;/span&gt;&lt;span class="nv"&gt;$Pass&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="kr"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nv"&gt;$body&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Hello, &lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="s2"&gt;. This HTTP triggered function executed successfully."&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c"&gt;# Associate values to output bindings by calling 'Push-OutputBinding'.&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;Push-OutputBinding&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;-Name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;-Value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;HttpResponseContext&lt;/span&gt;&lt;span class="p"&gt;]@{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nx"&gt;StatusCode&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;HttpStatusCode&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;OK&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nx"&gt;Body&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$body&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is also a &lt;a href="https://github.com/Pwd9000-ML/blog-devto/tree/master/posts/Azure-KeyVault-Function-Integrate/code/function.ps1"&gt;Link&lt;/a&gt; to the function code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Our secret references that we configured on the functions application settings are loaded into environment variables as you can see from the function code above:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$User&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$&lt;/span&gt;&lt;span class="nn"&gt;ENV&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;kv_SecUser01&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nv"&gt;$Pass&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$&lt;/span&gt;&lt;span class="nn"&gt;ENV&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;kv_SecPass01&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="n"&gt;Write-Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Username retrieved from key vault: &lt;/span&gt;&lt;span class="nv"&gt;$User&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;Write-Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Password retrieved from key vault: &lt;/span&gt;&lt;span class="nv"&gt;$Pass&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#testing-our-function-app"&gt;
  &lt;/a&gt;
  Testing our function app
&lt;/h2&gt;

&lt;p&gt;Let's test our function app by triggering the code manually using &lt;strong&gt;Test/Run&lt;/strong&gt; to see if our function can retrieve our secrets we specified.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X7xdodRT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/Azure-KeyVault-Function-Integrate/assets/log-01.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X7xdodRT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/Azure-KeyVault-Function-Integrate/assets/log-01.png" alt="log-01"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope you have enjoyed this post and have learned something new. You can also find the code samples used in this blog post on my &lt;a href="https://github.com/Pwd9000-ML/blog-devto/tree/master/posts/Azure-KeyVault-Function-Integrate/code"&gt;Github&lt;/a&gt;. ❤️&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#author"&gt;
  &lt;/a&gt;
  &lt;em&gt;Author&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;Marcel.L - &lt;a href="mailto:pwd9000@hotmail.co.uk"&gt;pwd9000@hotmail.co.uk&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>azure</category>
      <category>productivity</category>
      <category>security</category>
    </item>
    <item>
      <title>How to SetUp Billing Alarm in AWS</title>
      <author>Neha Soni</author>
      <pubDate>Sat, 03 Jul 2021 07:15:06 +0000</pubDate>
      <link>https://dev.to/nehasoni__/how-to-setup-billing-alarm-in-aws-4144</link>
      <guid>https://dev.to/nehasoni__/how-to-setup-billing-alarm-in-aws-4144</guid>
      <description>&lt;p&gt;AWS offers large number of resources and services. With such a diverse options it is very easy to over-spend money in AWS and obviously you do not want that. No matter you are an expert developer, administrator or just starting with AWS, you should always keep eye on your AWS usage and its bills. &lt;br&gt;
Therefore, the first thing you should do after creating your AWS account is set up the billing alarm🚨  for your account. In this blog post, I am going to show you how to create a billing alarm on AWS.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#login-to-your-aws-account"&gt;
  &lt;/a&gt;
  Login to your AWS Account
&lt;/h1&gt;

&lt;p&gt;Open your favorite browser and navigate to  &lt;a href="https://signin.aws.amazon.com/signin?redirect_uri=https%3A%2F%2Fconsole.aws.amazon.com%2Fconsole%2Fhome%3Ffromtb%3Dtrue%26hashArgs%3D%2523%26isauthcode%3Dtrue%26region%3Dus-east-1%26state%3DhashArgsFromTB_us-east-1_289005c9d938f257&amp;amp;client_id=arn%3Aaws%3Asignin%3A%3A%3Aconsole%2Fcanvas&amp;amp;forceMobileApp=0&amp;amp;code_challenge=AtiCkSbZT1B2Iq58rfQmJL8MmEljEwiweEKCEbiil3c&amp;amp;code_challenge_method=SHA-256"&gt;AWS Login Page&lt;/a&gt; &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RAJPw5QZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625045791032/vuaBViXUH.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RAJPw5QZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625045791032/vuaBViXUH.png" alt="Screenshot 2021-06-30 at 2.35.31 AM.png"&gt;&lt;/a&gt;&lt;br&gt;
Enter the captcha and click done.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ty8HuWTb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625045854030/0YBKyXZtV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ty8HuWTb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625045854030/0YBKyXZtV.png" alt="Screenshot 2021-06-30 at 2.36.46 AM.png"&gt;&lt;/a&gt;&lt;br&gt;
Then enter in your password and click submit.&lt;br&gt;
You have now successfully signed in to the AWS Management Console&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T4Z3o7rh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625045976615/Rks8lzqHZ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T4Z3o7rh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625045976615/Rks8lzqHZ.png" alt="Screenshot 2021-06-30 at 2.38.18 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#go-to-billing-amp-cost-management-dashboard"&gt;
  &lt;/a&gt;
  Go to Billing &amp;amp; Cost Management Dashboard
&lt;/h1&gt;

&lt;p&gt;In the search bar type &lt;em&gt;billing&lt;/em&gt; and click on Billing service to navigate to Billing &amp;amp; Cost Management Dashboard&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VEkgMMWE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625208736787/RykhouQsQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VEkgMMWE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625208736787/RykhouQsQ.png" alt="Screenshot 2021-07-01 at 11.45.31 PM.png"&gt;&lt;/a&gt;&lt;br&gt;
On the left side of the page, you should see an option called &lt;strong&gt;Billing Preferences.&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4yoMfx_n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625231268932/Mih6WccB5.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4yoMfx_n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625231268932/Mih6WccB5.jpeg" alt="billing.jpg"&gt;&lt;/a&gt;&lt;br&gt;
Click on that option, and you will be taken to the Billing Preferences page. Here you see three options. Choose &lt;strong&gt;receive billing alerts&lt;/strong&gt; and &lt;strong&gt;Receive Free Tier Usage Alerts&lt;/strong&gt;, and enter your email and click save preferences.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YOU5-Keh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625231519626/yNl1oXbZt.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YOU5-Keh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625231519626/yNl1oXbZt.jpeg" alt="preferences.jpg"&gt;&lt;/a&gt;&lt;br&gt;
Now, we will receive an alert to our email address if we reach the free tier limit.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#go-to-cloudwatch-and-check-the-current-aws-region"&gt;
  &lt;/a&gt;
  Go to CloudWatch and Check the current AWS region
&lt;/h1&gt;

&lt;p&gt;You can even search for CloudWatch here by starting to type in the search box and it will find the service that you're searching for. Or you can click on the drop-down along with services and then you can see all the services by category.&lt;br&gt;
&lt;strong&gt;"CloudWatch is a monitoring and management service that provides data and actionable insights for AWS, hybrid, and on-premises applications and infrastructure resources. With CloudWatch, you can collect and access all your performance and operational data in form of logs and metrics from a single platform."&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Important:- Check your current AWS region. You can check your region in the top-right corner. You have to select the region as Northen Virginia or “us-east-1”.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#create-a-billing-alarm"&gt;
  &lt;/a&gt;
  Create a Billing Alarm 🚨
&lt;/h1&gt;

&lt;p&gt;On the left side of the page, you should see an option called &lt;strong&gt;Alarm&lt;/strong&gt;. Click on it and then click &lt;strong&gt;Create Alarm&lt;/strong&gt; button on the right side of the page and it will navigate to a new page.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KvhbB0aA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625231808269/-JOnXEhV-.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KvhbB0aA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625231808269/-JOnXEhV-.jpeg" alt="createalarm.jpg"&gt;&lt;/a&gt;&lt;br&gt;
Click Select metric. After that click &lt;strong&gt;Billing.&lt;/strong&gt; and then &lt;strong&gt;Total estimated charge&lt;/strong&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C7mQit1H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625232499089/yGD9qnyXq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C7mQit1H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625232499089/yGD9qnyXq.png" alt="metrics.png"&gt;&lt;/a&gt;&lt;br&gt;
On the next page choose currency as USD and click a select metric button.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IxuD2Q2E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625242028904/fi6mUMHOm.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IxuD2Q2E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625242028904/fi6mUMHOm.jpeg" alt="usd.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#setting-up-conditions"&gt;
  &lt;/a&gt;
  Setting up Conditions
&lt;/h1&gt;

&lt;p&gt;In this step, you need to choose conditions that will trigger this alarm. Select the threshold type as Static. Then for an alarm condition, choose, “Greater”. Finally, enter the threshold value for your bill. &lt;br&gt;
I am keeping it at $5. This means once we have bills greater than or equal to $5, we will get an alert from AWS.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BnO3G9eC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625242053691/Rvk8mcUME.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BnO3G9eC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625242053691/Rvk8mcUME.png" alt="threshold.png"&gt;&lt;/a&gt;&lt;br&gt;
Click on the Next button.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#create-snssimple-notification-service-topic"&gt;
  &lt;/a&gt;
  Create SNS(Simple Notification Service) Topic
&lt;/h1&gt;

&lt;p&gt;Amazon SNS is a service that can notify you via various different transport protocols when an alarm gets triggered.&lt;br&gt;
Create a new topic radio button. Then you have to give a name for this topic, and an email id to notify when this alarm is triggered. After that, click on the “Create topic” button. This should create a new SNS topic.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Uy1DF8Dj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625242331464/Pr7EazxcV.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Uy1DF8Dj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625242331464/Pr7EazxcV.jpeg" alt="create topic.jpg"&gt;&lt;/a&gt;&lt;br&gt;
Then click on the “Next” button at the bottom of the screen.&lt;br&gt;&lt;br&gt;
Then Enter the Alarm name and description(optional) and click the next button.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kbvhGnfu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625242403004/sjf4jHDFC.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kbvhGnfu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625242403004/sjf4jHDFC.png" alt="Screenshot 2021-07-01 at 1.20.30 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#verify-details-and-create-alarm"&gt;
  &lt;/a&gt;
  Verify details and Create Alarm
&lt;/h1&gt;

&lt;p&gt;This is the final step for creating an alarm. you need to verify all details and click on the “Create alarm” button at the bottom of the screen. This will take you to the billing dashboard. &lt;br&gt; Here you can see that we have pending confirmation in the action column. For the confirmation, you need to confirm the email id that you have entered while creating an SNS topic. AWS will send a verification link to all of those emails. Just go to your email and click confirm subscription.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j6cBbtjH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625242498190/ehSO1pLKg.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j6cBbtjH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625242498190/ehSO1pLKg.jpeg" alt="email.jpg"&gt;&lt;/a&gt;&lt;br&gt;
Once you click on this link, It should confirm your Email. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9a8NCJn1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625243157704/donPbfPVx.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9a8NCJn1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625243157704/donPbfPVx.jpeg" alt="subscription.jpg"&gt;&lt;/a&gt;&lt;br&gt;
Congratulations 🎉🎉🎉🎉🎉🎉, you have set up a billing alarm for your AWS Account. &lt;br&gt;
Now, you will receive alerts on this email whenever our billing alarm is triggered.&lt;br&gt;
That's all for this blog post. In the next blog post, I will try to explain the IAM concept.&lt;br&gt;
If you enjoyed learning and find it useful please do like and share so that, it reaches others as well 🤝&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading 😃
&lt;/h3&gt;

&lt;p&gt;I would ❤ to connect with you at  &lt;a href="https://twitter.com/nehasoni__"&gt;Twitter&lt;/a&gt;  |  &lt;a href="https://www.linkedin.com/in/neha-soni-70a6231b1/"&gt;LinkedIn&lt;/a&gt; | &lt;a href="https://github.com/nehasoni05"&gt;GitHub&lt;/a&gt;&lt;br&gt;
Let me know in the comment section if you have any doubts or feedback.&lt;br&gt;
&lt;strong&gt;You should definitely check out my other Blogs:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/amazon-web-services-an-overview-2okc"&gt;Amazon Web Services- An Overview&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/cloud-computing-an-overview-4ib3"&gt;Cloud Computing- An Overview&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/how-to-build-a-strong-professional-network-online-b7k"&gt;How to Build a Strong Professional Network Online&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/plasma-donation-website-using-mern-stack-26f5"&gt;Plasma Donation Website&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/random-quote-generator-using-html-css-and-javascript-3gbp"&gt;Random Quote Generator Using HTML, CSS, and JavaScript&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/digital-clock-using-javascript-2648"&gt;Digital Clock using JavaScript&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/introduction-to-javascript-basics-g6n"&gt;Introduction to JavaScript: Basics&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/playing-with-javascript-objects-k4h"&gt;Playing with JavaScript Objects&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nehasoni__/7-javascript-data-structures-you-must-know-57ah"&gt;7 JavaScript Data Structures you must know&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/digital-clock-using-javascript-2648"&gt;Digital Clock using JavaScript&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/introduction-to-reactjs-3553"&gt;Introduction to ReactJS
&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See you in my next Blog article, Take care!!&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Happy Learning😃😃&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>devops</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Learning Python-Basic course: Day 9, Summary of the week and exercises.</title>
      <author>Aatmaj</author>
      <pubDate>Sat, 03 Jul 2021 06:38:43 +0000</pubDate>
      <link>https://dev.to/aatmaj/learning-python-basic-course-day-9-summary-of-the-week-and-exercises-ji6</link>
      <guid>https://dev.to/aatmaj/learning-python-basic-course-day-9-summary-of-the-week-and-exercises-ji6</guid>
      <description>&lt;h2&gt;
  &lt;a href="#today-we-will-look-at-the-whole-weeks-summary-and-check-out-some-more-questions-the-solution-to-the-day-7-coding-challenge-is-also-provided"&gt;
  &lt;/a&gt;
  Today, we will look at the whole week's summary and check out some more questions. The solution to the Day 7 coding challenge is also provided.
&lt;/h2&gt;




&lt;h1&gt;
  &lt;a href="#summary-of-the-week"&gt;
  &lt;/a&gt;
  Summary of the week-
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://dev.to/aatmaj/learning-python-basic-course-day-6-the-while-loop-and-more-questions-k23"&gt;Day 6&lt;/a&gt;- We learnt about the while loop, while-else and solved questions&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/aatmaj/learning-python-basic-course-day-7-exercises-and-coding-challenges-2l2b"&gt;Day 7&lt;/a&gt;- We solved some more exciting questions on the for and while loop, and the coding challenge whose solution is presented today.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/aatmaj/learning-python-basic-course-day-8-unicode-in-python-4pdc"&gt;Day 8&lt;/a&gt;- We learnt about Unicode in Python and solved some questions.&lt;/p&gt;




&lt;p&gt;Sample questions-&lt;/p&gt;

&lt;p&gt;1) Password generator. Write a sample program to input a number and output a 6 Unicode-character password. Divide the number by numbers 1-7 and generate characters using the result.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Please enter a 6 digit number "&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Please enter a 6 digit number 1293748 
🥞ﲯ꡴繗攒吺
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can find the unicode chart &lt;a href="https://www.ssec.wisc.edu/~tomw/java/unicode.html"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2) Write code to give the following output-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;A
ABA
ABCBA
ABCDCBA
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Answer-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
 &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;Exercise-&lt;br&gt;
1) Write a program to get 5 characters from user, take its Unicode sum and display the corresponding character for Unicode value. &lt;a href="https://github.com/Aatmaj-Zephyr/Learning-Python/blob/74a1987aa31350d964e6caa1193bfbb7ab87598f/Basic/Day%209/Exercise%20solutions/Exercise%201.py"&gt;Answer&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Please enter a character A
Please enter a character A
Please enter a character T
Please enter a character M
Please enter a character A
Please enter a character J
Please enter a character -
Answer is  Ǜ
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2) Modify the password generator to include only keyboard characters (Unicode 33 to 126)&lt;br&gt;
OUTPUT-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Please enter a 6 digit number 135689
#P@gk0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href=""&gt;Answer&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Solution to the coding challenge.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
 &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
     &lt;span class="k"&gt;break&lt;/span&gt;
 &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
 &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;","&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
     &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;✌️So friends that's all for now. 😊 Hope you all are having fun.😎 Please let me know in the comment section below 👇. And don't forget to like the post if you did. 😍 I am open to any suggestions or doubts. 🤠 Just post in the comments below or gmail me. 😉&lt;br&gt;
Thank you all👍&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;For those who have not yet made account in Dev.to, you can have a free easy sign-up using your mail or GitHub accounts. I would suggest the budding developers to create your GitHub free account right away. You would require to register sooner or later anyways&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥&lt;br&gt;
Next day will begin from Tuesday📅, Monday is reserved for.... &lt;a href="https://dev.to/aatmaj/launching-matlab-mondays-a-crash-course-nb1"&gt;MATLAB MONDAYS💥&lt;/a&gt; Follow me for updates...&lt;/p&gt;

</description>
      <category>python</category>
      <category>tutorial</category>
      <category>learningpython</category>
    </item>
    <item>
      <title>Play Games in VSCODE</title>
      <author>Muhimen</author>
      <pubDate>Sat, 03 Jul 2021 05:43:04 +0000</pubDate>
      <link>https://dev.to/muhimen123/play-games-in-vscode-1k3a</link>
      <guid>https://dev.to/muhimen123/play-games-in-vscode-1k3a</guid>
      <description>&lt;p&gt;Are you bored of long coding sessions and want to take a small break? Or you want to play a game but you can't because your colleague is looking over you? What if I tell you that you can play games inside VSCode itself? Yes, you heard me right! Don't get your hopes too high though since the number of playable games in vscode can be counted with your hand. But hey! Something is better than nothing. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-visual-snake-code"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://marketplace.visualstudio.com/items?itemName=ZhouSir.visual-snake-code"&gt;Visual Snake Code&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Roam around inside your editor, collect &lt;del&gt;fruits&lt;/del&gt; blocks and grow the snake! Simply use A, s, d, w to move around and that is it! Enjoy the classic retro. 😉&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IGBb-30e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/http://res.cloudinary.com/muhimen/image/upload/v1625290486/i9zbqwyxiqed1v8frdkr.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IGBb-30e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/http://res.cloudinary.com/muhimen/image/upload/v1625290486/i9zbqwyxiqed1v8frdkr.gif" alt="GIF snake game"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-chrome-dino-game"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://marketplace.visualstudio.com/items?itemName=yiwwan.vscode-games"&gt;Chrome Dino Game&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Whether you have an internet connection or not, you can play the famous &lt;a href="https://trex-runner.com/night/"&gt;dino game&lt;/a&gt; from vscode. And a neat thing about this extension is that you can put your own games as well(check the docs for further details).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ca9hk0mI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/http://res.cloudinary.com/muhimen/image/upload/v1625290504/jogz0mdl24h19t5p5hdn.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ca9hk0mI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/http://res.cloudinary.com/muhimen/image/upload/v1625290504/jogz0mdl24h19t5p5hdn.gif" alt="GIF dino game"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-cybercode"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://cybercodeonline.com/"&gt;CyberCode&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Are you tired of the boring retro games? Welcome to the world of &lt;del&gt;CyberPunk&lt;/del&gt; CyberCode! Text-based MMORPG game. Although this doesn't have a dedicated vscode extension, the browser-based game has an AWESOME vscode like UI! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xa20_btA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://res.cloudinary.com/muhimen/image/upload/v1625290462/gygl1hhie7s2coqtirvq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xa20_btA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://res.cloudinary.com/muhimen/image/upload/v1625290462/gygl1hhie7s2coqtirvq.png" alt="png cyber code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At first glance, you will think, "Well, it's just a normal vsc screenshot." But don't get deceived by its appearance. Because under the hood, there is a full-blown RPG. Take a closer look at it and then think again, you will be amazed. 😉&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bonus"&gt;
  &lt;/a&gt;
  BONUS!!
&lt;/h3&gt;

&lt;p&gt;Here are a few color themes to get along with the games. I hope you will enjoy it. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://vscodethemes.com/e/vampyrsoda.pac-man-theme"&gt;Pac-man Theme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=sdras.fortnite-vscode-theme"&gt;Fortnite Theme&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, that was my shortlist of vscode playable games. Although there were some other games available, those kinda appeared to be shady to me. So I decided not to put them here. If you want, you can give them a try too(at your own risk)! &lt;/p&gt;

&lt;p&gt;Do you have any other sneaky tricks to take a quick break during work hours as well? Let us know in the comment. [whispers]&lt;em&gt;Your boss won't know about it&lt;/em&gt;[whispers]&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>vscode</category>
    </item>
    <item>
      <title>Flutter how it works, Hello World</title>
      <author>Chris Bongers</author>
      <pubDate>Sat, 03 Jul 2021 05:25:54 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/flutter-how-it-works-hello-world-582l</link>
      <guid>https://dev.to/dailydevtips1/flutter-how-it-works-hello-world-582l</guid>
      <description>&lt;p&gt;When learning a new language, Dart, in this case, it's a good starting point to go back to the basics.&lt;br&gt;
So today, I'll explore the minimum requirements for a basic Hello World app in Flutter.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-flutter-works"&gt;
  &lt;/a&gt;
  How Flutter works
&lt;/h2&gt;

&lt;p&gt;Before we get started with this, let's have a look at how Flutter actually works.&lt;br&gt;
I won't go into all the nitty-gritty details, but more a high-level view.&lt;/p&gt;

&lt;p&gt;Flutter is Google's version of a hybrid framework, much like &lt;a href="https://daily-dev-tips.com/tags/ionic/"&gt;Ionic&lt;/a&gt; or React native.&lt;/p&gt;

&lt;p&gt;One single codebase for all your projects, including mobile and web. Sounds pretty cool, right!&lt;/p&gt;

&lt;p&gt;The big catch is that it's using Dart, a new language for many.&lt;/p&gt;

&lt;p&gt;Flutter uses its own rendering methods compared to the other frameworks.&lt;br&gt;
It also should be performing better in terms of speed.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#a-sample-hello-world-in-flutter"&gt;
  &lt;/a&gt;
  A sample Hello World in Flutter
&lt;/h2&gt;

&lt;p&gt;I got pretty confused at first when looking at the basic counter-example Flutter app, it showed me some widgets and extended codebases, and I had no clue what was going on.&lt;/p&gt;

&lt;p&gt;So I decided to go back to the most basic app that I could create. It needed only to render some text.&lt;/p&gt;

&lt;p&gt;So start up a new flutter app, and clear the complete code in the &lt;code&gt;lib/main.dart&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;We will start by importing the flutter package. This allows us to use some ready-made widgets.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:flutter/material.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the Dart language, we must always define a &lt;code&gt;main&lt;/code&gt; function. This is the case for Dart files, so also for flutter applications.&lt;/p&gt;

&lt;p&gt;In a basic Dart example, we could do something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Hello World 👋'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running this code will show us a blank Flutter app, but log &lt;code&gt;Hello World 👋&lt;/code&gt; in the console.&lt;/p&gt;

&lt;p&gt;In Flutter, we need to include a &lt;code&gt;runApp&lt;/code&gt; function inside this main function.&lt;br&gt;
This function will run your flutter app.&lt;/p&gt;

&lt;p&gt;We want to have some content inside this &lt;code&gt;runApp&lt;/code&gt; function that shows our Hello World.&lt;/p&gt;

&lt;p&gt;For this, we can leverage the &lt;code&gt;Center&lt;/code&gt; widget that comes with Flutter. Inside this widget, we can pass a child, in our case, a Text widget containing our text.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;runApp&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;Center&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;'Hello World 👋'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;textDirection:&lt;/span&gt; &lt;span class="n"&gt;TextDirection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ltr&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;),&lt;/span&gt;
  &lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And when we now run our app with &lt;code&gt;flutter run&lt;/code&gt;, we should see our very first Flutter application.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4pMNObIf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624808501935/ryVCDKGbg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4pMNObIf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624808501935/ryVCDKGbg.png" alt="Hello World in Flutter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, we can leverage Flutter scaffolding to make this a bit cleaner.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;runApp&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;MaterialApp&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;debugShowCheckedModeBanner:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="nl"&gt;home:&lt;/span&gt; &lt;span class="n"&gt;Scaffold&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;body:&lt;/span&gt; &lt;span class="n"&gt;MyApp&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;),&lt;/span&gt;
  &lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyApp&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;StatelessWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Center&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;'Hello World 👋'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;textDirection:&lt;/span&gt; &lt;span class="n"&gt;TextDirection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ltr&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This code will render the same app, but as you see, Flutter is very widget-driven, much like what you'll see in React.&lt;/p&gt;

&lt;p&gt;The idea is that we build our app out of widgets. These widgets describe what their view should look like, given a specific state and configuration. When the state of these widgets changes, it is rebuilt with the new configuration.&lt;/p&gt;

&lt;p&gt;I like this concept, as it also forces us to think out an app design-wise and extend widgets throughout our application.&lt;/p&gt;

&lt;p&gt;For today we learned the very basics of Dart and Flutter and created a hello world application.&lt;/p&gt;

&lt;p&gt;I've also uploaded this to my &lt;a href="https://github.com/rebelchris/flutter/tree/hello-world"&gt;GitHub&lt;/a&gt; branch.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>flutter</category>
    </item>
    <item>
      <title>How to Deploy React JS Applications for Free on Firebase 2021</title>
      <author>Suhail Kakar</author>
      <pubDate>Sat, 03 Jul 2021 04:50:34 +0000</pubDate>
      <link>https://dev.to/suhailkakar/how-to-deploy-react-js-applications-for-free-on-firebase-2021-3k2h</link>
      <guid>https://dev.to/suhailkakar/how-to-deploy-react-js-applications-for-free-on-firebase-2021-3k2h</guid>
      <description>&lt;p&gt;In this article , I’ll show you how to deploy react js applications for free on Firebase, First let’s understand what is Firebase&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-firebase"&gt;
  &lt;/a&gt;
  What is Firebase
&lt;/h3&gt;

&lt;p&gt;Firebase is a Backend as a Service that started as a YC11 startup and grew up into a next-generation app-development platform on Google Cloud Platform. Firebase frees developers to focus crafting fantastic user experiences. You don’t need to manage servers. You don’t need to write APIs. Firebase is your server, your API and your datastore, all written so generically that you can modify it to suit most needs. Yeah, you’ll occasionally need to use other bits of the Google Cloud for your advanced applications. Firebase can’t be everything to everybody. But it gets pretty close.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h3&gt;

&lt;p&gt;Before deploying your app on Firebase, you need to have Firebase project and a React project (create-react-app)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#build-your-app-for-production"&gt;
  &lt;/a&gt;
  Build Your App for Production
&lt;/h3&gt;

&lt;p&gt;Open your project folder cd your-project and build your app for production using command below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run build / yarn build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The JavaScript and CSS files will be inside the build/static directory.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#install-firebase-tools"&gt;
  &lt;/a&gt;
  Install Firebase Tools
&lt;/h3&gt;

&lt;p&gt;Once you built your app then you can install Firebase tools that will allow you to deploy your React app. You can install the tools by running&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;firebase-tools &lt;span class="nt"&gt;-g&lt;/span&gt; or yarn global add firebase-tools
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#login-to-firebase"&gt;
  &lt;/a&gt;
  Login to Firebase
&lt;/h3&gt;

&lt;p&gt;Make sure you’re in the root directory of your React app and run the following command to login to firebase in your terminal&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;firebase login
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;*If you’re not logged in, you’ll be asked to enter the credentials for your google account.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#initialise-firebase"&gt;
  &lt;/a&gt;
  Initialise Firebase
&lt;/h3&gt;

&lt;p&gt;Now that you’re logged in, you will need to initialise Firebase in your React app. You can do it by running the following command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;firebase init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will then be prompted with a series of questions and configuration options.&lt;/p&gt;

&lt;p&gt;Choose Hosting: Configure and deploy Firebase Hosting sites&lt;br&gt;
Choose Use an existing project&lt;br&gt;
Select the firebase project that you created&lt;br&gt;
What do you want to use as your public directory? (public) build&lt;br&gt;
Configure as a single-page app (rewrite all urls to /index.html)? No&lt;/p&gt;

&lt;p&gt;Now it is time to deploy our app&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#deploying-our-react-js-app-on-firebase"&gt;
  &lt;/a&gt;
  Deploying Our React JS App on Firebase
&lt;/h3&gt;

&lt;p&gt;Run the following command to deploy your app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;firebase deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;*Firebase will then give you a unique URL where your deployed app is located (e.g. react-app.web.app).That’s all there is to it!&lt;/p&gt;

</description>
      <category>react</category>
      <category>firebase</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Install Tailwind CSS in Solid and Vite</title>
      <author>Robert</author>
      <pubDate>Sat, 03 Jul 2021 04:48:57 +0000</pubDate>
      <link>https://dev.to/wobsoriano/install-tailwind-css-in-solid-and-vite-jfl</link>
      <guid>https://dev.to/wobsoriano/install-tailwind-css-in-solid-and-vite-jfl</guid>
      <description>&lt;p&gt;Here's a quick guide on setting up Tailwind in your Solid project.&lt;/p&gt;

&lt;p&gt;First, generate a Solid + Vite app if you don’t have one set up already.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx degit solidjs/templates/js my-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Navigate to the project directory and install the dependencies using &lt;code&gt;npm&lt;/code&gt; or &lt;code&gt;yarn&lt;/code&gt; or &lt;code&gt;pnpm&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd my-app
npm install # or yarn or pnpm
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Next, we'd need to install tailwind and its dependencies (PostCSS &amp;amp; autoprefixer).&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -D tailwindcss@latest postcss@latest autoprefixer@latest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Next, generate your &lt;code&gt;tailwind.config.js&lt;/code&gt; and &lt;code&gt;postcss.config.js&lt;/code&gt; files:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx tailwindcss init -p
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This will create two files in your root directory: &lt;code&gt;tailwind.config.js&lt;/code&gt; and &lt;code&gt;postcss.config.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Open the &lt;code&gt;tailwind.config.js&lt;/code&gt; file and update the &lt;code&gt;purge&lt;/code&gt; property to include the path to our &lt;code&gt;src&lt;/code&gt; folder and &lt;code&gt;index.html&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;purge&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./index.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./src/**/*.{js,ts,jsx,tsx}&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;darkMode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// or 'media' or 'class'&lt;/span&gt;
  &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;variants&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Next, we’ll import Tailwind’s styles using the &lt;code&gt;@tailwind&lt;/code&gt; directive within our entry CSS file:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* ./src/index.css */&lt;/span&gt;
&lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;components&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;utilities&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Finally, ensure your CSS file is being imported in your &lt;code&gt;./src/index.js&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;solid-js/web&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./index.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;,&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You're finished! Now when you run &lt;code&gt;npm run dev&lt;/code&gt;, Tailwind CSS will be ready to use in your Solid and Vite project.&lt;/p&gt;

&lt;p&gt;Here's a Vite + Solid + Tailwind starter with Routing configured for you:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/wobsoriano"&gt;
        wobsoriano
      &lt;/a&gt; / &lt;a href="https://github.com/wobsoriano/vite-solid-tailwind-starter"&gt;
        vite-solid-tailwind-starter
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Starter using Vite + Solid + Tailwind CSS
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Vite + Solid + Tailwind CSS starter&lt;/h1&gt;
&lt;p&gt;Inspired by &lt;a href="https://github.com/posva"&gt;posva's&lt;/a&gt; &lt;a href="https://github.com/posva/vite-tailwind-starter"&gt;vite-tailwind-starter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Note if you have access to &lt;a href="https://tailwindui.com" rel="nofollow"&gt;Tailwind UI&lt;/a&gt;, you can follow the following steps to add it:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install &lt;code&gt;@tailwindcss/ui&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;yarn add @tailwindcss/ui&lt;/pre&gt;

&lt;/div&gt;
&lt;ol start="2"&gt;
&lt;li&gt;Add the plugin in &lt;code&gt;tailwind.config.js&lt;/code&gt; without changing anything else:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight highlight-source-js position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-c"&gt;// tailwind.config.js&lt;/span&gt;
&lt;span class="pl-smi"&gt;module&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-c1"&gt;exports&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt;
  &lt;span class="pl-c"&gt;// ...&lt;/span&gt;
  &lt;span class="pl-c"&gt;// rest of the config&lt;/span&gt;
  &lt;span class="pl-c1"&gt;plugins&lt;/span&gt;: &lt;span class="pl-kos"&gt;[&lt;/span&gt;&lt;span class="pl-en"&gt;require&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;'@tailwindcss/ui'&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;]&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
&lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Installation&lt;/h2&gt;
&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;yarn&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Development&lt;/h2&gt;
&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;yarn dev&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Build&lt;/h2&gt;
&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;yarn build&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;

  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/wobsoriano/vite-solid-tailwind-starter"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>solidjs</category>
      <category>tailwindcss</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>5 Underrated React Libraries ⚛️ </title>
      <author>Chetan Atrawalkar👉CA.</author>
      <pubDate>Sat, 03 Jul 2021 04:12:00 +0000</pubDate>
      <link>https://dev.to/chetan_atrawalkar/5-underrated-react-libraries-1lli</link>
      <guid>https://dev.to/chetan_atrawalkar/5-underrated-react-libraries-1lli</guid>
      <description>&lt;p&gt;Every React developer use react libraries in daily basis to build react applications and it's a  better and faster ways to create customized components. &lt;br&gt;
So today, I want to share 5 react libraries that will help you to make react projects.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. React-Perfect-Scrollbar&lt;/strong&gt;&lt;br&gt;
This is a wrapper to allow use perfect-scrollbar in React. It is used inside our project for creating nice scrollbars.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q2ndgLv1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/chetan-ca/image/upload/v1625207826/RL/Rps_xj7sac.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q2ndgLv1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/chetan-ca/image/upload/v1625207826/RL/Rps_xj7sac.jpg" alt="Scrollbars"&gt;&lt;/a&gt; &lt;br&gt;
&lt;a href="https://github.com/goldenyz/react-perfect-scrollbar"&gt;Homepage&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/goldenyz/react-perfect-scrollbar"&gt;GitHub&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Usage:-&lt;/strong&gt;&lt;br&gt;
Install the package &lt;code&gt;npm install react-perfect-scrollbar -S&lt;/code&gt; &lt;br&gt;
Import the css file if you have loader for css files:&lt;br&gt;
    &lt;code&gt;import 'react-perfect-scrollbar/dist/css/styles.css';&lt;/code&gt;&lt;br&gt;
Import the module in the place you want to use:&lt;br&gt;
    &lt;code&gt;import PerfectScrollbar from 'react-perfect-scrollbar'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. React DnD&lt;/strong&gt;&lt;br&gt;
React DnD is drag and drop library it mostly used for make drag and drop functionality on particular elements.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HR6wFdiq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/chetan-ca/image/upload/v1625207825/RL/Rdnd_xnihmg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HR6wFdiq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/chetan-ca/image/upload/v1625207825/RL/Rdnd_xnihmg.jpg" alt="DnD"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/react-dnd/react-dnd#readme"&gt;Homepage&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/react-dnd/react-dnd"&gt;GitHub&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Usage:-&lt;/strong&gt;&lt;br&gt;
Install the packages &lt;code&gt;npm install react-dnd react-dnd-html5-backend&lt;/code&gt;&lt;br&gt;
Import the module in the place you want to use:&lt;br&gt;
&lt;code&gt;import { useDrag } from 'react-dnd'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. React-Device-Detect&lt;/strong&gt;&lt;br&gt;
Detect device, and render view according to the detected device type.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LAjuhScP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/chetan-ca/image/upload/v1625207825/RL/Rdt_m4kwax.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LAjuhScP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/chetan-ca/image/upload/v1625207825/RL/Rdt_m4kwax.jpg" alt="detect"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/duskload/react-device-detect#readme"&gt;Homepage&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/duskload/react-device-detect"&gt;GitHub&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Usage:-&lt;/strong&gt;&lt;br&gt;
Install the packages using npm or yarn:&lt;br&gt;
 &lt;code&gt;npm install react-device-detect --save&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn add react-device-detect&lt;/code&gt;&lt;br&gt;
Import the module in the place you want to use:&lt;br&gt;
&lt;code&gt;import {&lt;br&gt;
  BrowserView,&lt;br&gt;
  MobileView,&lt;br&gt;
  isBrowser,&lt;br&gt;
  isMobile&lt;br&gt;
} from "react-device-detect";&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Pure React Carousel&lt;/strong&gt;&lt;br&gt;
A highly impartial suite of React components that can be assembled by the consumer to create a responsive and aria compliant carousel with almost no limits on DOM structure or CSS styles.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OY_zzJzR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/chetan-ca/image/upload/v1625207826/RL/Rpc_prcqdr.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OY_zzJzR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/chetan-ca/image/upload/v1625207826/RL/Rpc_prcqdr.jpg" alt="carousel"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/express-labs/pure-react-carousel#readme"&gt;Homepage&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/express-labs/pure-react-carousel"&gt;GitHub&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Usage:-&lt;/strong&gt;&lt;br&gt;
Add the module to your project.&lt;br&gt;
&lt;code&gt;npm i -S pure-react-carousel&lt;/code&gt;&lt;br&gt;
Import only the required components into your project.&lt;br&gt;
&lt;code&gt;import React from 'react';&lt;br&gt;
import { CarouselProvider, Slider, Slide, ButtonBack, ButtonNext } from 'pure-react-carousel';&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. React Grid System&lt;/strong&gt;&lt;br&gt;
A powerful Bootstrap-like responsive grid system for React.&lt;br&gt;
&lt;code&gt;react-grid-system&lt;/code&gt; provides a responsive grid for React inspired by Bootstrap. Moreover, it has various additional powerful features, such as setting breakpoints and gutter widths through React's context.&lt;br&gt;
Three components are provided for creating responsive grids: &lt;code&gt;Container&lt;/code&gt;, &lt;code&gt;Row&lt;/code&gt;, and &lt;code&gt;Col&lt;/code&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NpJTBl_Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/chetan-ca/image/upload/v1625207825/RL/Rgs_kf7ajs.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NpJTBl_Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/chetan-ca/image/upload/v1625207825/RL/Rgs_kf7ajs.jpg" alt="Grid"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/sealninja/react-grid-system/issues"&gt;Homepage&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/sealninja/react-grid-system"&gt;GitHub&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Usage:-&lt;/strong&gt;&lt;br&gt;
Installation:-&lt;br&gt;
&lt;code&gt;npm install react-grid-system --save&lt;/code&gt;&lt;br&gt;
An example on how to use these:-&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--24FmXWga--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/chetan-ca/image/upload/v1625284358/RL/carbon_fbibxl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--24FmXWga--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/chetan-ca/image/upload/v1625284358/RL/carbon_fbibxl.png" alt="example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope you like this react libraries please drop your comments about your thoughts and suggest more libraries you used daily basis in react projects.&lt;br&gt;
For more content follow me on&lt;br&gt;
Instagram &lt;a class="mentioned-user" href="https://dev.to/chetan"&gt;@chetan&lt;/a&gt;
.fullstack&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thank you!&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;😎 Keep Claim And Just Code It!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>react</category>
      <category>javascript</category>
      <category>github</category>
    </item>
    <item>
      <title>Project 87 of 100 - Slider Component in React</title>
      <author>James Hubert</author>
      <pubDate>Sat, 03 Jul 2021 03:35:48 +0000</pubDate>
      <link>https://dev.to/jwhubert91/project-87-of-100-slider-component-in-react-22nl</link>
      <guid>https://dev.to/jwhubert91/project-87-of-100-slider-component-in-react-22nl</guid>
      <description>&lt;p&gt;&lt;em&gt;Hey! I'm on a mission to make 100 React.js projects. Please follow my dev.to profile or my &lt;a href="https://www.twitter.com/jwhubert91"&gt;twitter&lt;/a&gt; for updates and feel free to reach out if you have questions. Thanks for your support!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Link to today's deployed app: &lt;a href="https://100-react-projects-day-87-react-slider.netlify.app/"&gt;Link&lt;/a&gt;&lt;br&gt;
Link to the repo: &lt;a href="https://github.com/jwhubert91/100daysofreact/tree/master/day-87-react-slider"&gt;github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is part 7 of 15 in a series on building React projects by John Smilga, covered in &lt;a href="https://www.youtube.com/watch?v=a_7Z7C_JCyo"&gt;this 10 hour video&lt;/a&gt; on Youtube.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you like projects like this and want to stay up to date with more, check out my Twitter &lt;a href="https://twitter.com/jwhubert91"&gt;@jwhubert91&lt;/a&gt;, I follow back! See you tomorrow for another project.&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>A progressive micro frontends framework - Fronts</title>
      <author>Michael Lin</author>
      <pubDate>Sat, 03 Jul 2021 02:31:41 +0000</pubDate>
      <link>https://dev.to/unadlib/a-progressive-micro-frontends-framework-fronts-3kn1</link>
      <guid>https://dev.to/unadlib/a-progressive-micro-frontends-framework-fronts-3kn1</guid>
      <description>&lt;h2&gt;
  &lt;a href="#micro-frontends"&gt;
  &lt;/a&gt;
  Micro Frontends
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;An architectural style where independently deliverable frontend applications are composed into a greater whole.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As front-end development becomes increasingly complex, traditional large front-end projects should likely end up being difficult to maintain due to over-coupling, and therefore Micro Frontends is also gaining attention in front-end architectures.&lt;/p&gt;

&lt;p&gt;Front-end application modules dynamic will become one of the new trends in front-end development, and it will be possible to solve the problem of code base maintainability and delivery efficiency more thoroughly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benefits-and-value-of-micro-frontends"&gt;
  &lt;/a&gt;
  Benefits and Value of Micro Frontends
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt; Independence and Autonomy&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Only if the overall process of application development can be developed, deployed and managed independently of the code base, etc., then the front-end project can have true independence guaranteed. And this possibility of team autonomy is also in line with Conway's Law, which states that "Any organization that designs a system (defined broadly) will produce a design whose structure is a copy of the organization's communication structure", thus bringing about a possible new form of organizational management.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Technology Agnostic&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Technology agnostic facilitates the collaboration of multiple teams with different technology stacks. The smooth migration of technology stacks also brings greater convenience to the continuous iteration and technology upgrade of the older business system.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Runtime Integration&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In modern front-end development processes, we most often see build-time integration. Whereas before, runtime integration happened to separate modules more independently. Micro frontends also happen to integrate well with such micro module concepts and keep such modules independent and dependency sharing.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Decoupled Modularity &amp;amp; Composable&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In large front-end projects, we have high requirements for modular decoupling, often based on different types of divisions, such as business type modularity, technical service type modularity, and so on. The composable of individual micro frontends particles in turn allows for good module consistency and overall customization differentiation across multiple deliverable families, and can greatly reduce business duplication.&lt;/p&gt;

&lt;p&gt;In general, the proper practice of micro frontends architecture will bring far-reaching value to the long-term maintenance of some large front-end projects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#motivation"&gt;
  &lt;/a&gt;
  Motivation
&lt;/h2&gt;

&lt;p&gt;Among the many micro frontends solutions, single-spa and Module Federation are the best of them.&lt;/p&gt;

&lt;p&gt;single-spa is a micro frontends framework based on router configuration. The centralization of configuration brings some limitations, such as it is difficult to granulate nestable micro frontends, module granularity control, module sharing, and so on.&lt;/p&gt;

&lt;p&gt;In 2019, Zack Jackson proposed and implemented Module Federation. Module Federation is a completely different concept from single-spa, and allows a JavaScript application to dynamically load code from another application. It completely solves the problem of code dependency sharing and runtime modularity. The idea is true - A game-changer in JavaScript architecture as mentioned in Zack Jackson's article. And it's currently supported by Webpack, Next.js, and Rollup.&lt;/p&gt;

&lt;p&gt;Although the Module Federation concept is so amazing, it has not yet gone further to provide a more complete and fully targeted micro frontends framework implementation, and this is what Fronts is trying to do.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hotspots-of-micro-frontends-framework"&gt;
  &lt;/a&gt;
  Hotspots of Micro Frontends Framework
&lt;/h2&gt;

&lt;p&gt;Based on the current mainstream micro frontends frameworks or concepts, the following is a compilation of the main hotspots involved.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Should the granularity level be application level or module level&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Module level is obviously more advantageous in terms of flexibility and granularity, but there is clearly an advantage to supporting application level in order to be compatible with some not so modern front-end projects, so we need a framework that supports both. If application-level runtime integration is required, it is clear that just using Module Federation's Webpack is not enough, we also need a runtime application-level granular entry point loader.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Whether the entry point file is HTML or JavaScript&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From a modern engineering perspective, most front-end application entry points are JS-based, and some previous front-end projects have used HTML alone as the entry point. The trade-off is that building a micro frontends system for applications where HTML is the main entry point is bound to be a longer and more complex of processes. Such a library would be better suited as a standalone sub-package, while the overall framework should take JS files as the entry point.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Is it necessary to support perfect module sharing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Module sharing is a problem that must be solved by micro frontends frameworks, otherwise the duplication of resources at runtime will make micro frontends less valuable. Currently, only Webpack with Module Federation allows such module sharing to be handled at build time, with dynamic dependency sharing at runtime. No better solution than Module Federation has yet emerged.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CSS/JS isolation trade-off&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Isolation of CSS is almost required and is supported by many micro frontends frameworks. We may have to do all kinds of hijacking to ensure the security, performance and stability, and also consider the compatibility of different browsers. However, JS isolation is relatively expensive to implement, and the fact that such isolation is required for modern front-end engineering depends on the actual situation of each micro frontend.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Generic micro frontend and support multiple containers with multiple modes (Or SSR, etc.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In large front-end projects, it is often not just about building a single web application, but possibly multiple web applications, or even more front-end application types, such as Electron applications, browser extensions, native applications, etc. So a good micro frontends framework should be able to run more kinds of containers and build a variety of application types, but also preferably compatible with building traditional SPA and micro frontends applications. Module Federation also initially implemented in the next.js implementation of SSR support.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Version control and dependency management&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With rapid iteration and business growth, various module management becomes very important, so when a large front-end project practices micro frontends architecture at a later stage, version control and dependency management will become especially important, which will determine the delivery efficiency and maintainability.&lt;/p&gt;

&lt;p&gt;To solve these problems, Fronts was created.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-fronts"&gt;
  &lt;/a&gt;
  What's Fronts
&lt;/h2&gt;

&lt;p&gt;Fronts is a progressive micro frontends framework for building Web applications, and it's based on the module federation of Webpack.&lt;/p&gt;

&lt;p&gt;Repo: &lt;a href="https://github.com/unadlib/fronts"&gt;https://github.com/unadlib/fronts&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Non-module-federation&lt;/strong&gt; - Although Fronts is based on the concept of module federation, it also supports &lt;code&gt;non-module-federation&lt;/code&gt; mode.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Decentralized configuration&lt;/strong&gt; - Configure &lt;code&gt;site.json&lt;/code&gt; for dependency management in each Fronts app, support for nested micro frontends.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Cross frameworks&lt;/strong&gt; - No framework or technology stack is restricted.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Code splitting &amp;amp; lazy loading&lt;/strong&gt; - Support code splitting within the Fronts app as a module, it can be lazy loaded by other Fronts app as a dependent module.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;CSS isolation&lt;/strong&gt; - Optional CSS isolation solution.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Lifecycle&lt;/strong&gt; - Fronts provide concise lifecycle for Fronts app entry.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Web Components &amp;amp; iFrame&lt;/strong&gt; - Support for multiple frontend containers.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Multiple patterns&lt;/strong&gt; - Support for building &lt;code&gt;micro-frontends&lt;/code&gt; app and &lt;code&gt;non-micro-frontends&lt;/code&gt; app.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Monorepo &amp;amp; TypeScript&lt;/strong&gt; - Friendly support for Monorepo and TypeScript, which are mutually appropriate technology stack.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Version control&lt;/strong&gt; - It's used for efficient and dynamic delivery apps such as canary release.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Zero hijacking&lt;/strong&gt; - Fronts didn't do any hijacking, maintaining originality and possible loss of performance and security.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Generic Communication&lt;/strong&gt; - Fronts provides concise and generic communication APIs, which supports almost all frontend environments.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#benefits-of-fronts"&gt;
  &lt;/a&gt;
  Benefits of Fronts
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Fronts is a concise and easy to understand micro frontends framework.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Set &lt;code&gt;site.json&lt;/code&gt; to define a micro frontend, similar to a &lt;code&gt;package.json&lt;/code&gt; in Node.js.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"app1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"exports"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"./src/bootstrap"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"dependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;If&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;version&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;control&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;enabled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;here&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;it&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;looks&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;like:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="nl"&gt;"app2"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.0.0"&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"app2"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"http://localhost:3002/remoteEntry.js"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"shared"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"react"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"singleton"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"react-dom"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"singleton"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Fronts is progressive.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If every front-end application does not support Module Federation, it will still work well as a micro frontend, with on-demand runtime modes, and as projects are upgraded, they can gradually be made to support Module Federation and eventually version control can be enabled. With support for multiple granularity levels, build types, module types, shared types, runtime types, and communication types, Fronts can almost meet all kinds of micro frontends architectures.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fronts APIs are clean and simple.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Fronts provides three sets of loaders &lt;code&gt;useApp()&lt;/code&gt;, &lt;code&gt;useWebComponents()&lt;/code&gt; and &lt;code&gt;useIframe()&lt;/code&gt;. It also provides an micro frontend launcher &lt;code&gt;boot()&lt;/code&gt; and a Webpack configuration generator &lt;code&gt;createWebpackConfig()&lt;/code&gt;. With these APIs, you will be able to do micro frontends development quickly and efficiently.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;

&lt;p&gt;We will build a micro frontends project based on Fronts, where &lt;code&gt;app1&lt;/code&gt; is the main entry point and it will depend on &lt;code&gt;app2&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can follow this article(&lt;a href="https://dev.to/rogeliosamuel621/react-without-create-react-app-webpack-5-1b1o"&gt;React without create-react-app Webpack 5&lt;/a&gt;) to quickly create &lt;code&gt;app1&lt;/code&gt; and &lt;code&gt;app2&lt;/code&gt; React projects.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Assuming you've completed these steps, let's get started with a quick taste of the wonderful micro frontends development of Fronts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#install-raw-frontsreact-endraw-and-raw-frontsbundler-endraw-in-the-projects"&gt;
  &lt;/a&gt;
  Install &lt;code&gt;fronts-react&lt;/code&gt; and &lt;code&gt;fronts-bundler&lt;/code&gt; in the projects.
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# with NPM&lt;/span&gt;
npm &lt;span class="nb"&gt;install &lt;/span&gt;fronts-react fronts-bundler

&lt;span class="c"&gt;# or with Yarn&lt;/span&gt;
yarn add fronts-react fronts-bundler
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#set-up-raw-sitejson-endraw-and-raw-webpackconfigjs-endraw-in-the-projects"&gt;
  &lt;/a&gt;
  Set up &lt;code&gt;site.json&lt;/code&gt; and &lt;code&gt;webpack.config.js&lt;/code&gt; in the projects
&lt;/h3&gt;

&lt;p&gt;We define &lt;code&gt;app1&lt;/code&gt; as a parent micro frontend and it depends on &lt;code&gt;app2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;app1/site.json&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"app1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"exports"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"dependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"app2"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"http://localhost:3002/remoteEntry.js"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;app2&lt;/code&gt; doesn't have any dependencies, it acts as a micro frontend and we define it to export &lt;code&gt;./src/bootstrap&lt;/code&gt; as a micro frontends entry, this entry of &lt;code&gt;app2&lt;/code&gt; end will be used by &lt;code&gt;app1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;app2/site.json&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"app2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"exports"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"./src/bootstrap"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"dependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Wrap the Webpack config with &lt;code&gt;createWebpackConfig()&lt;/code&gt; in &lt;code&gt;config/webpack.config.js&lt;/code&gt; in the projects.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createWebpackConfig&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fronts-bundler&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createWebpackConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;originalWebpackConfig&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#define-the-default-exported-bootstrap-function-in-raw-app2srcbootstrapjsx-endraw-and-use-raw-boot-endraw-to-get-it-booted"&gt;
  &lt;/a&gt;
  Define the default exported bootstrap function in &lt;code&gt;app2/src/bootstrap.jsx&lt;/code&gt; and use &lt;code&gt;boot()&lt;/code&gt; to get it booted.
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;boot&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fronts-react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;,&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unmountComponentAtNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;boot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#load-raw-app1srcappjsx-endraw-with-raw-useapp-endraw-to-import-raw-app2-endraw-"&gt;
  &lt;/a&gt;
  Load &lt;code&gt;app1/src/App.jsx&lt;/code&gt; with &lt;code&gt;useApp()&lt;/code&gt; to import &lt;code&gt;app2&lt;/code&gt;.
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useApp&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fronts-react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useApp&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app2/src/bootstrap&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App2&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run &lt;code&gt;yarn start&lt;/code&gt;, and &lt;code&gt;app2&lt;/code&gt; is rendered as a micro frontend on &lt;code&gt;app1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Example repo：&lt;a href="https://github.com/unadlib/fronts-example"&gt;https://github.com/unadlib/fronts-example&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#notes"&gt;
  &lt;/a&gt;
  Notes
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Built-in packages&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The mainstream front-end frameworks are still React, Vue and Angular. When a micro frontend uses one of them, it is recommended to use Fronts' built-in packages, such as &lt;code&gt;fronts-react&lt;/code&gt;, &lt;code&gt;fronts-vue&lt;/code&gt; and &lt;code&gt;fronts-ng&lt;/code&gt;, and when it comes to other frameworks not supported by the built-in packages or no framework, then please use &lt;code&gt;fronts&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Built-in Package API&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each built-in package contains three sets of loaders &lt;code&gt;useApp()&lt;/code&gt;, &lt;code&gt;useWebComponents()&lt;/code&gt;, &lt;code&gt;useIframe()&lt;/code&gt;. &lt;code&gt;useApp()&lt;/code&gt; provides loose CSS isolation, &lt;code&gt;useWebComponents()&lt;/code&gt; provides strict CSS isolation, and &lt;code&gt;useIframe()&lt;/code&gt; provides native strict CSS isolation and JS isolation.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Version Control&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Fronts does not have full version control suite support and currently only supports self-built registry server.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Monorepo &amp;amp; TypeScript&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Large front-end projects often mean a high level of complexity, so Fronts are well suited for use in a combination of technology stacks like Monorepo and TypeScript. You get a great development experience in type safety, code management and runtime integration. when each micro frontend is used as a Monorepo sub-package, you just run &lt;code&gt;SPA=true yarn start&lt;/code&gt; and switch the micro frontends development mode to the traditional SPA development mode.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The front-end architecture based on Fronts, Monorepo, and TypeScript will significantly improve codebase management, type safety, business development and delivery efficiency, and enable multiple combination of product business capabilities, high reuse and consistency of business code, and diversity of application types.&lt;/p&gt;

&lt;p&gt;Every large front-end project that tries to implement micro frontends architecture has different or similar requirements, so by analyzing the demands and needs of their own large front-end projects and using them to build or choose their own micro front-end architecture, they can really solve their own main engineering problems.&lt;/p&gt;

&lt;p&gt;With a general module concept based on Module Federation, Fronts tries to solve the main problems of micro frontends in a more targeted and systematic way, such as cross-framework, dependency sharing, dependency management, version control, compatibility with multiple runtime containers and patterns, etc.&lt;/p&gt;

&lt;p&gt;Fronts wants to evolve from more micro frontends architecture requirements to an efficient micro frontends framework.&lt;/p&gt;

&lt;p&gt;Repo: &lt;a href="https://github.com/unadlib/fronts"&gt;https://github.com/unadlib/fronts&lt;/a&gt;&lt;/p&gt;

</description>
      <category>microfrontends</category>
      <category>javascript</category>
      <category>react</category>
      <category>frontend</category>
    </item>
    <item>
      <title>Java Quickies. Singleton Pattern </title>
      <author>Tristan Elliott</author>
      <pubDate>Sat, 03 Jul 2021 02:13:06 +0000</pubDate>
      <link>https://dev.to/theplebdev/java-quickies-singleton-pattern-4glj</link>
      <guid>https://dev.to/theplebdev/java-quickies-singleton-pattern-4glj</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;This series is going to be dedicated to the basic understanding of Java. When ever I find myself asking, "How does this work ?". I will create a blog post and put it here. This series will not be in order so feel free to read whatever post you find most relevant. All my references for this blog post can be found &lt;a href="https://ticketnote.dev/ticket/jPg8c6QhDW85jNlsR89P"&gt;HERE&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#singleton-pattern"&gt;
  &lt;/a&gt;
  Singleton Pattern
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;By the time that this blog post is over I want you and I to be able to understand what the singleton pattern in Java is and be able to explain the code below.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public class Singleton {
    private static Singleton uniqueInstance;
 // other useful instance variables here

    private Singleton() {}
    public static Singleton getInstance() {
       if (uniqueInstance == null) {
          uniqueInstance = new Singleton();
       }
       return uniqueInstance;
    }

 // other useful methods here
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#what-is-the-singleton-pattern"&gt;
  &lt;/a&gt;
  What is the Singleton pattern?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Well as &lt;a href="https://en.wikipedia.org/wiki/Singleton_pattern"&gt;Wikipedia&lt;/a&gt; states, &lt;code&gt;In software engineering, the singleton pattern is a software design pattern that restricts the instantiation of a class to one "single" instance&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#why-use-the-singleton-pattern"&gt;
  &lt;/a&gt;
  Why use the Singleton pattern?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Stated &lt;a href="https://stackoverflow.com/questions/228164/on-design-patterns-when-should-i-use-the-singleton#:~:text=A%20singleton%20should%20be%20used,of%20pattern%20can%20be%20vital."&gt;here&lt;/a&gt;, &lt;code&gt;A singleton should be used when managing access to a resource which is shared by the entire application, and it would be destructive to potentially have multiple instances of the same class. Making sure that access to shared resources thread safe is one very good example of where this kind of pattern can be vital&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ok now putting the copy pasta and technical definitions aside. We can conclude that to use a singleton pattern means that we only want to create one instance of our class. How can we do that? Well the answer lies in the &lt;code&gt;static&lt;/code&gt; keyword and using a private constructor. However, before I can explain more I must establish that you and I have the same level of understanding when it comes to what the &lt;code&gt;static&lt;/code&gt; keyword means.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-is-the-raw-static-endraw-keyword-"&gt;
  &lt;/a&gt;
  What is the &lt;code&gt;static&lt;/code&gt; keyword ?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Normally when we create an object each object has its own distinct copy of variables and methods. However, sometimes we want to have variables or methods that are common to all objects, this is where &lt;code&gt;static&lt;/code&gt; comes into play.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#static-variables"&gt;
  &lt;/a&gt;
  Static variables
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;A variable that has static as its modifier is called a &lt;code&gt;class variable&lt;/code&gt; or a &lt;code&gt;static variable&lt;/code&gt;. Theses class variables are  commonly used when we want to share a variable across all instances. I should also point out that our class variable &lt;code&gt;private static Singleton uniqueInstance;&lt;/code&gt; is static for another reason but more on that later.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#static-methods"&gt;
  &lt;/a&gt;
  Static methods
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Static methods look like normal methods but they have the static keyword in their declarations. A static method should be invoked by using the class name. So to invoke our static method we would do this, &lt;code&gt;Singleton.getInstance()&lt;/code&gt;. Another important thing to note is that static methods can only access other static method/variables, you can &lt;strong&gt;NOT&lt;/strong&gt; access instance method/variables from a static method. You also can not use the &lt;code&gt;this&lt;/code&gt; keyword inside of a static method.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now that we both have a basic understanding of how the &lt;code&gt;static&lt;/code&gt; keyword works we can move forward.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#main-style-of-the-singleton-patter"&gt;
  &lt;/a&gt;
  Main style of the Singleton patter
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;There are a few different versions of the singleton pattern but they all have 3 common attributes:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;1)&lt;/strong&gt; : Private constructor to restrict instantiation of the class from other classes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2)&lt;/strong&gt; : Private static variable that is the only instance of the class&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3)&lt;/strong&gt; : Public static method that returns the instance of the class&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-private-constructor"&gt;
  &lt;/a&gt;
  The private constructor
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;I want to talk about what the private constructor is doing. So when you define a constructor as private, we are shutting off its access to the outside world. This means that we can not create a traditional class through instantiation. So how do we create a new class? With a static method and then we use that method to instantiate a single instance. Now we have to use a static method because the private constructor guarantees that initially there will be no instantiated class. So the only way to access a method is to make it static. As I noted earlier static methods allow us access to them through the class name, &lt;code&gt;Singleton.getInstance()&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;private Singleton() {}
    public static Singleton getInstance() {
       if (uniqueInstance == null) {
          uniqueInstance = new Singleton();
       }
       return uniqueInstance;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;As you can see we have our private constructor, the &lt;code&gt;uniqueInstance == null&lt;/code&gt; will guarantee that we only have one instance of the class. The new instance is assigned to the &lt;code&gt;private static Singleton uniqueInstance;&lt;/code&gt; variable. If you are wondering why it is static, it is because we created the new instance inside of a static method and static methods only have access to static variables. So the static method and variable are all necessary because we have a private constructor.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This is just the basics of the singleton pattern and design patterns in general, so I encourage you to read more about them.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Thank you for taking the time out of your day to read this blog post of mine. If you have any questions or concerns please comment below or reach out to me on &lt;a href="https://twitter.com/TristAndroidDev"&gt;Twitter&lt;/a&gt;. &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>java</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
