<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>100 Languages Speedrun: Episode 22: XSLT</title>
      <author>Tomasz Wegrzanowski</author>
      <pubDate>Mon, 13 Dec 2021 00:49:59 +0000</pubDate>
      <link>https://dev.to/taw/100-languages-speedrun-episode-22-xslt-4am6</link>
      <guid>https://dev.to/taw/100-languages-speedrun-episode-22-xslt-4am6</guid>
      <description>&lt;p&gt;In the late 1990s and early 2000s there was an XML craze. People even wanted to replace HTML with some XML variant, and literally the only "advantage" it would have over HTML was that if you made any typos, the website would just refuse to display anything at all. Somehow that was supposed to be a huge selling point.&lt;/p&gt;

&lt;p&gt;Eventually common sense prevailed, but back then XML craze was going so hot, people were asking questions like - what if I need to turn XML into XML? I know, I'l use XML! That's how XSLT came to be.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hello-world"&gt;
  &lt;/a&gt;
  Hello, World!
&lt;/h3&gt;

&lt;p&gt;We can't really do conventional Hello, World!, as the whole XSLT model is turning XML into XML, but let's do something simple anyway.&lt;/p&gt;

&lt;p&gt;Here's &lt;code&gt;hello.xml&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" ?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;persons&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;person&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;Alice&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/person&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;person&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;Bob&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/person&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/persons&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here's &lt;code&gt;hello.xslt&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;xsl:stylesheet&lt;/span&gt; &lt;span class="na"&gt;xmlns:xsl=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/1999/XSL/Transform"&lt;/span&gt; &lt;span class="na"&gt;version=&lt;/span&gt;&lt;span class="s"&gt;"1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;xsl:output&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"xml"&lt;/span&gt; &lt;span class="na"&gt;indent=&lt;/span&gt;&lt;span class="s"&gt;"yes"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class="na"&gt;match=&lt;/span&gt;&lt;span class="s"&gt;"/persons"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;messages&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;xsl:apply-templates&lt;/span&gt; &lt;span class="na"&gt;select=&lt;/span&gt;&lt;span class="s"&gt;"person"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/messages&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/xsl:template&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class="na"&gt;match=&lt;/span&gt;&lt;span class="s"&gt;"person"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;message&amp;gt;&lt;/span&gt;Hello, &lt;span class="nt"&gt;&amp;lt;xsl:value-of&lt;/span&gt; &lt;span class="na"&gt;select=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;!&lt;span class="nt"&gt;&amp;lt;/message&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/xsl:template&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/xsl:stylesheet&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can then run it like this, &lt;code&gt;xsltproc&lt;/code&gt; is even preinstalled on OSX:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;$ xsltproc hello.xslt hello.xml
&lt;span class="cp"&gt;&amp;lt;?xml version="1.0"?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;messages&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;message&amp;gt;&lt;/span&gt;Hello, Alice!&lt;span class="nt"&gt;&amp;lt;/message&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;message&amp;gt;&lt;/span&gt;Hello, Bob!&lt;span class="nt"&gt;&amp;lt;/message&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/messages&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So what's going on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;first, the &lt;code&gt;&amp;lt;?xml&amp;gt;&lt;/code&gt; boilerplate and some namespaces and versions. It's best to just copy paste paste it.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;xsl:output&lt;/code&gt; specifies output mode, in this case we want to generate XML and indent it automatically for readability. Not every kind of XML should be indented like that.&lt;/li&gt;
&lt;li&gt;Then we have two templates with &lt;code&gt;xsl:template&lt;/code&gt; - top level one for &lt;code&gt;/persons&lt;/code&gt; and then second one for each &lt;code&gt;/person&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If this seems to you like a bit crazy way to code, then you're not wrong.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#text-output"&gt;
  &lt;/a&gt;
  Text output
&lt;/h3&gt;

&lt;p&gt;In addition to generating XML, XSLT can also generate HTML and plain text. Let's try some plain text. We need to be very careful to get all the spaces and newlines in the right places, so this look extremely verbose.&lt;/p&gt;

&lt;p&gt;Here's &lt;code&gt;text.xml&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" ?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;persons&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;person&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;Alice&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;surname&amp;gt;&lt;/span&gt;Cooper&lt;span class="nt"&gt;&amp;lt;/surname&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/person&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;person&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;Bob&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;surname&amp;gt;&lt;/span&gt;Smith&lt;span class="nt"&gt;&amp;lt;/surname&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/person&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/persons&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here's &lt;code&gt;text.xslt&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;xsl:stylesheet&lt;/span&gt; &lt;span class="na"&gt;xmlns:xsl=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/1999/XSL/Transform"&lt;/span&gt; &lt;span class="na"&gt;version=&lt;/span&gt;&lt;span class="s"&gt;"1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;xsl:output&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class="na"&gt;match=&lt;/span&gt;&lt;span class="s"&gt;"/persons"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;xsl:apply-templates&lt;/span&gt; &lt;span class="na"&gt;select=&lt;/span&gt;&lt;span class="s"&gt;"person"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&amp;lt;/xsl:template&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class="na"&gt;match=&lt;/span&gt;&lt;span class="s"&gt;"person"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;xsl:text&amp;gt;&lt;/span&gt;Hello, &lt;span class="nt"&gt;&amp;lt;/xsl:text&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;xsl:value-of&lt;/span&gt; &lt;span class="na"&gt;select=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;xsl:text&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/xsl:text&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;xsl:value-of&lt;/span&gt; &lt;span class="na"&gt;select=&lt;/span&gt;&lt;span class="s"&gt;"surname"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;xsl:text&amp;gt;&lt;/span&gt;!&lt;span class="ni"&gt;&amp;amp;#10;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/xsl:text&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/xsl:template&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/xsl:stylesheet&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Hello, Alice Cooper!
Hello, Bob Smith!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#fizzbuzz"&gt;
  &lt;/a&gt;
  FizzBuzz
&lt;/h3&gt;

&lt;p&gt;We could just generate the whole thing from scratch, but I think it's more true to the purpose of XSLT if we start with this &lt;code&gt;fizzbuzz.xml&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;fizzbuzz&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;number&amp;gt;&lt;/span&gt;1&lt;span class="nt"&gt;&amp;lt;/number&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;number&amp;gt;&lt;/span&gt;2&lt;span class="nt"&gt;&amp;lt;/number&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;number&amp;gt;&lt;/span&gt;3&lt;span class="nt"&gt;&amp;lt;/number&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;number&amp;gt;&lt;/span&gt;4&lt;span class="nt"&gt;&amp;lt;/number&amp;gt;&lt;/span&gt;
  ...
  &lt;span class="nt"&gt;&amp;lt;number&amp;gt;&lt;/span&gt;100&lt;span class="nt"&gt;&amp;lt;/number&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/fizzbuzz&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we could do this for &lt;code&gt;fizzbuzz.xslt&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;xsl:stylesheet&lt;/span&gt; &lt;span class="na"&gt;xmlns:xsl=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/1999/XSL/Transform"&lt;/span&gt; &lt;span class="na"&gt;version=&lt;/span&gt;&lt;span class="s"&gt;"1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;xsl:output&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class="na"&gt;match=&lt;/span&gt;&lt;span class="s"&gt;"/fizzbuzz"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;xsl:apply-templates&lt;/span&gt; &lt;span class="na"&gt;select=&lt;/span&gt;&lt;span class="s"&gt;"number"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&amp;lt;/xsl:template&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class="na"&gt;match=&lt;/span&gt;&lt;span class="s"&gt;"number"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;xsl:variable&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"i"&lt;/span&gt; &lt;span class="na"&gt;select=&lt;/span&gt;&lt;span class="s"&gt;"."&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;xsl:choose&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;xsl:when&lt;/span&gt; &lt;span class="na"&gt;test=&lt;/span&gt;&lt;span class="s"&gt;"$i mod 15 = 0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;FizzBuzz&lt;span class="nt"&gt;&amp;lt;/xsl:when&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;xsl:when&lt;/span&gt; &lt;span class="na"&gt;test=&lt;/span&gt;&lt;span class="s"&gt;"$i mod 3 = 0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Fizz&lt;span class="nt"&gt;&amp;lt;/xsl:when&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;xsl:when&lt;/span&gt; &lt;span class="na"&gt;test=&lt;/span&gt;&lt;span class="s"&gt;"$i mod 5 = 0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Buzz&lt;span class="nt"&gt;&amp;lt;/xsl:when&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;xsl:otherwise&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;xsl:value-of&lt;/span&gt; &lt;span class="na"&gt;select=&lt;/span&gt;&lt;span class="s"&gt;"$i"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/xsl:otherwise&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/xsl:choose&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;xsl:text&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;#10;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/xsl:text&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/xsl:template&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/xsl:stylesheet&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which generates exactly the FizzBuzz sequence you're expecting.&lt;/p&gt;

&lt;p&gt;There's things happenings here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;xsl:variable&lt;/code&gt; sets a local variable &lt;code&gt;i&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;xsl:choose&lt;/code&gt; with &lt;code&gt;xsl:whene&lt;/code&gt; and &lt;code&gt;xsl:otherwise&lt;/code&gt; decide which FizzBuzz branch to take&lt;/li&gt;
&lt;li&gt;there's also &lt;code&gt;xsl:if&lt;/code&gt; we could use instead&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#loops"&gt;
  &lt;/a&gt;
  Loops
&lt;/h3&gt;

&lt;p&gt;XSLT went through many iterations. XSLT 2.0 would actually make this reasonably easy, thanks to more flexible &lt;code&gt;xsl:for-each&lt;/code&gt;, but the XSLT processor that comes with OSX only supports XSLT 1.0, and it's not the only one - a lot of XSLT software never went past XSLT 1.0. So let's give it a go - we don't have loops, but we have recursion.&lt;/p&gt;

&lt;p&gt;Basically we first figure out how many iterations we want, then call &lt;code&gt;iteration(1, 20)&lt;/code&gt;. It will then check if current index reached max - if yes, that will be the end of it, otherwise it will call &lt;code&gt;iteration(2, 20)&lt;/code&gt;, which will call &lt;code&gt;iteration(3, 20)&lt;/code&gt; and so on until &lt;code&gt;iteration(20, 20)&lt;/code&gt; eventually stops.&lt;/p&gt;

&lt;p&gt;Here's &lt;code&gt;loop.xml&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" ?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;loop&amp;gt;&lt;/span&gt;20&lt;span class="nt"&gt;&amp;lt;/loop&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And &lt;code&gt;loop.xslt&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;xsl:stylesheet&lt;/span&gt; &lt;span class="na"&gt;xmlns:xsl=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/1999/XSL/Transform"&lt;/span&gt; &lt;span class="na"&gt;version=&lt;/span&gt;&lt;span class="s"&gt;"1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;xsl:output&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"iteration"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;xsl:param&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"i"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;xsl:param&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"max"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;xsl:text&amp;gt;&lt;/span&gt;Iteration &lt;span class="nt"&gt;&amp;lt;/xsl:text&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;xsl:value-of&lt;/span&gt; &lt;span class="na"&gt;select=&lt;/span&gt;&lt;span class="s"&gt;"$i"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;xsl:text&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;#10;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/xsl:text&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;xsl:if&lt;/span&gt; &lt;span class="na"&gt;test=&lt;/span&gt;&lt;span class="s"&gt;"$max &amp;gt; $i"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;xsl:call-template&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"iteration"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;xsl:with-param&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"i"&lt;/span&gt; &lt;span class="na"&gt;select=&lt;/span&gt;&lt;span class="s"&gt;"$i + 1"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;xsl:with-param&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"max"&lt;/span&gt; &lt;span class="na"&gt;select=&lt;/span&gt;&lt;span class="s"&gt;"$max"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/xsl:call-template&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/xsl:if&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/xsl:template&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class="na"&gt;match=&lt;/span&gt;&lt;span class="s"&gt;"/loop"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;xsl:call-template&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"iteration"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;xsl:with-param&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"i"&lt;/span&gt; &lt;span class="na"&gt;select=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;xsl:with-param&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"max"&lt;/span&gt; &lt;span class="na"&gt;select=&lt;/span&gt;&lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/xsl:call-template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/xsl:template&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/xsl:stylesheet&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which generates:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ xsltproc loop.xslt loop.xml
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#fibonacci"&gt;
  &lt;/a&gt;
  Fibonacci
&lt;/h3&gt;

&lt;p&gt;And now that we can loop, we can generate the Fibonacci sequence.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;fib.xml&lt;/code&gt; is just the max value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" ?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;fib-sequence&amp;gt;&lt;/span&gt;20&lt;span class="nt"&gt;&amp;lt;/fib-sequence&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And let's do &lt;code&gt;fib.xslt&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;xsl:stylesheet&lt;/span&gt; &lt;span class="na"&gt;xmlns:xsl=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/1999/XSL/Transform"&lt;/span&gt; &lt;span class="na"&gt;version=&lt;/span&gt;&lt;span class="s"&gt;"1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;xsl:output&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"fib"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;xsl:param&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"n"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;xsl:choose&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;xsl:when&lt;/span&gt; &lt;span class="na"&gt;test=&lt;/span&gt;&lt;span class="s"&gt;"2 &amp;gt;= $n"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;1&lt;span class="nt"&gt;&amp;lt;/xsl:when&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;xsl:otherwise&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;xsl:variable&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;xsl:call-template&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"fib"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;xsl:with-param&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"n"&lt;/span&gt; &lt;span class="na"&gt;select=&lt;/span&gt;&lt;span class="s"&gt;"$n - 1"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/xsl:call-template&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/xsl:variable&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;xsl:variable&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"b"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;xsl:call-template&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"fib"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;xsl:with-param&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"n"&lt;/span&gt; &lt;span class="na"&gt;select=&lt;/span&gt;&lt;span class="s"&gt;"$n - 2"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/xsl:call-template&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/xsl:variable&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;xsl:value-of&lt;/span&gt; &lt;span class="na"&gt;select=&lt;/span&gt;&lt;span class="s"&gt;"$a + $b"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/xsl:otherwise&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/xsl:choose&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/xsl:template&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"iteration"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;xsl:param&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"i"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;xsl:param&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"max"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;xsl:text&amp;gt;&lt;/span&gt;fib(&lt;span class="nt"&gt;&amp;lt;/xsl:text&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;xsl:value-of&lt;/span&gt; &lt;span class="na"&gt;select=&lt;/span&gt;&lt;span class="s"&gt;"$i"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;xsl:text&amp;gt;&lt;/span&gt;) = &lt;span class="nt"&gt;&amp;lt;/xsl:text&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;xsl:call-template&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"fib"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;xsl:with-param&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"n"&lt;/span&gt; &lt;span class="na"&gt;select=&lt;/span&gt;&lt;span class="s"&gt;"$i"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/xsl:call-template&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;xsl:text&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;#10;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/xsl:text&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;xsl:if&lt;/span&gt; &lt;span class="na"&gt;test=&lt;/span&gt;&lt;span class="s"&gt;"$max &amp;gt; $i"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;xsl:call-template&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"iteration"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;xsl:with-param&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"i"&lt;/span&gt; &lt;span class="na"&gt;select=&lt;/span&gt;&lt;span class="s"&gt;"$i + 1"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;xsl:with-param&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"max"&lt;/span&gt; &lt;span class="na"&gt;select=&lt;/span&gt;&lt;span class="s"&gt;"$max"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/xsl:call-template&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/xsl:if&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/xsl:template&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class="na"&gt;match=&lt;/span&gt;&lt;span class="s"&gt;"/fib-sequence"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;xsl:call-template&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"iteration"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;xsl:with-param&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"i"&lt;/span&gt; &lt;span class="na"&gt;select=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;xsl:with-param&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"max"&lt;/span&gt; &lt;span class="na"&gt;select=&lt;/span&gt;&lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/xsl:call-template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/xsl:template&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/xsl:stylesheet&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;we define recursive function &lt;code&gt;fib(n)&lt;/code&gt; for calculating the Fibonacci value&lt;/li&gt;
&lt;li&gt;we define &lt;code&gt;iteration(i, max)&lt;/code&gt; which will do our looping&lt;/li&gt;
&lt;li&gt;we call &lt;code&gt;iteration(1, max)&lt;/code&gt; at top level &lt;code&gt;/fib-sequence&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And the output is as expected:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fib(1) = 1
fib(2) = 1
fib(3) = 2
fib(4) = 3
fib(5) = 5
fib(6) = 8
fib(7) = 13
fib(8) = 21
fib(9) = 34
fib(10) = 55
fib(11) = 89
fib(12) = 144
fib(13) = 233
fib(14) = 377
fib(15) = 610
fib(16) = 987
fib(17) = 1597
fib(18) = 2584
fib(19) = 4181
fib(20) = 6765
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;XSLT 2.0 would make it slightly more readable as we wouldn't ned recursive looping, but in the end it would still be quite dreadful.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#should-you-use-xslt"&gt;
  &lt;/a&gt;
  Should you use XSLT?
&lt;/h3&gt;

&lt;p&gt;Absolutely not.&lt;/p&gt;

&lt;p&gt;XSLT is basically a joke language, except unlike with Emojicode, Befunge, Brainfuck, and such, people who created it weren't in on the joke.&lt;/p&gt;

&lt;p&gt;Just about every real language does XML processing better than XSLT. Just pick your favorite.&lt;/p&gt;

&lt;p&gt;Usually Ruby or Python is a close call, but in this case the first choice is very clearly Ruby. Ruby's Nokogiri is nearly perfect, and for some reason all Python's XML libraries I've tried (and I've tried a lot of them), had a lot of issues. Of course that's just relatively speaking, any of Python's libraries is still far better than using XSLT.&lt;/p&gt;

&lt;p&gt;There are no excuses to use XSLT. It's unsuitable for any purpose, in any version.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/taw/100-languages-speedrun"&gt;All code examples for the series will be in this repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/taw/100-languages-speedrun/tree/master/episode-22-xslt"&gt;Code for the XSLT episode is available here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>xml</category>
      <category>xslt</category>
    </item>
    <item>
      <title>JavaScript Anti-patterns</title>
      <author>Medhat Dawoud</author>
      <pubDate>Sun, 12 Dec 2021 23:14:15 +0000</pubDate>
      <link>https://dev.to/medhatdawoud/javascript-anti-patterns-2nia</link>
      <guid>https://dev.to/medhatdawoud/javascript-anti-patterns-2nia</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This post was originally published on my own blog, so you can check it out from &lt;a href="https://medhatdawoud.net/blog/javascript-anti-patterns"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Usually people search for patterns to follow but some of them are searching for the anti-patterns to avoid, In my opinion both are equally important, as by knowing them you are leveling up your skills in programming using a specific tool.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-the-design-patterns"&gt;
  &lt;/a&gt;
  What are the design patterns?
&lt;/h3&gt;

&lt;p&gt;To understand what are the anti-patterns we need first to define what is a pattern. a pattern is usually a well known solution for a recurring problem, or we can first talk about the concept through a food metaphor.&lt;/p&gt;

&lt;p&gt;This plate (for people who don't know) is a street Egyptian food called "Koshary", I picked it because it has quite a lot of ingredients including rice, pasta, hummus, lentil, tomato sauce, and more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8_k12xO---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/e/e9/Egyptian_food_Koshary.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8_k12xO---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/e/e9/Egyptian_food_Koshary.jpg" alt="koshary"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's imagine the first person who made this dish, how did he think about it? did he add all together from the beginning? did he try other ingredients that didn't work out? how did he picked each of them? I believe that can be applied to any other food.&lt;/p&gt;

&lt;p&gt;Now if you search on the recipe of making &lt;a href="https://en.wikipedia.org/wiki/Koshary"&gt;Egyptian Koshary&lt;/a&gt; you can find it everywhere, that's because some people has made this documented after making several trials, these trials introduced a pattern and this recipe is the design pattern to get the same dish (results) every time.&lt;/p&gt;

&lt;p&gt;If we project that on programming, so design patterns are simply good solutions for recurring problems, our ancestor developers made in the past and documented it for us not to repeat same issues.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-the-antipatterns"&gt;
  &lt;/a&gt;
  What are the anti-patterns?
&lt;/h3&gt;

&lt;p&gt;We can imagine now what is an anti-pattern, it is basically also some documents for bad recipes, telling people that we tried this before and here are the results, it was simply a bad idea to do the same again.&lt;/p&gt;

&lt;p&gt;same for programming, anti-patterns are simply a bad solution for a recurring problem, people thought about it in the past and documented that their trials ended with failure or bad results.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-might-be-thinking-why-we-might-have-antipatterns-in-javascript"&gt;
  &lt;/a&gt;
  You might be thinking, why we might have anti-patterns in JavaScript?
&lt;/h3&gt;

&lt;p&gt;The reasons for having anti-patterns despite of having developer guide for all tools might be one of the following or all of them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Different &lt;a href="https://en.wikipedia.org/wiki/Programming_paradigm"&gt;programming languages paradigm&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Going with the easy shortcut solutions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Adopting the “for now” phrase (which pile tech debt with bad practices)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lake for experience in the tool used (new developers to JavaScript)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Or much more ...&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#antipatterns-examples"&gt;
  &lt;/a&gt;
  Anti-Patterns Examples
&lt;/h2&gt;

&lt;p&gt;Now we understand the terminologies, let's have some Anti-patterns / Bad practices to avoid in you next project or maybe enhance your current project whenever you notice one of them 😉&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#0-naming-convention"&gt;
  &lt;/a&gt;
  0. Naming convention
&lt;/h3&gt;

&lt;p&gt;Your naming convention needs to be very clear and descriptive, whenever you see a variable or a function name you should be able to guess what to expect as a value coming from there, have a look into the following examples&lt;/p&gt;

&lt;h4&gt;Bad&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// This is a user name&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Medhat Dawoud&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="c1"&gt;// This is for a year&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;yyyy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2021&lt;/span&gt;

&lt;span class="c1"&gt;// This function should duplicate a number&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;dNum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This function is checking if 2 numbers are equal&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;Good&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// This is a user name&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;userName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Medhat Dawoud&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="c1"&gt;// This is for a year&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;currentYear&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2021&lt;/span&gt;

&lt;span class="c1"&gt;// This function should duplicate a number&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;doubleNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This function is checking if 2 numbers are equal&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#1-magic-numbers-or-strings"&gt;
  &lt;/a&gt;
  1. Magic numbers or strings
&lt;/h3&gt;

&lt;p&gt;You might face in the code some magic number or a strings, I call them magic because you or one of the your team mates might be wondering from where does this number or string come, a bit confusing, check the examples below for more clarification:&lt;/p&gt;

&lt;h4&gt;Bad&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Calculate circle circumference which equal to&lt;/span&gt;
&lt;span class="c1"&gt;// 2 * radius * pi&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;circleCircumference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;3.14&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This is one day in milliseconds&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;oneDay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;86400000&lt;/span&gt;

&lt;span class="c1"&gt;// Time to live is 6 weeks&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;timeToLive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;

&lt;span class="c1"&gt;// This is checking if the user is admin&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isAdmin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Medhat&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;Good&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;3.14&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;circleCircumference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;PI&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This is one day in milliseconds&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;oneDay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="c1"&gt;// 86400000&lt;/span&gt;

&lt;span class="c1"&gt;// Time to live is 6 weeks&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;timeToLiveInDays&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="c1"&gt;// 42&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ADMIN_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Medhat&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isAdmin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;ADMIN_NAME&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-improper-use-of-truthy-and-falsy-values"&gt;
  &lt;/a&gt;
  2. Improper use of Truthy and Falsy values
&lt;/h3&gt;

&lt;p&gt;In JavaScript, Falsy and Truthy values are a bit different than other tools, and by Falsy that means equal to false, and Truthy means when we check it is equal to true, we have about 5 different values which are Falsy in JavaScript which might be wise if you check for each one in the proper way instead of checking in general if they are falsy, check below for best practices.&lt;/p&gt;

&lt;h4&gt;Bad&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isTruthy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;
&lt;span class="nx"&gt;isTruthy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;

&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="nx"&gt;isTruthy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;

&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;
&lt;span class="nx"&gt;isTruthy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;

&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
&lt;span class="nx"&gt;isTruthy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;

&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;NaN&lt;/span&gt;
&lt;span class="nx"&gt;isTruthy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;Good&lt;/h4&gt;  

&lt;p&gt;(A comment in front of each value tells you how to check that value)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isTruthy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;
&lt;span class="nx"&gt;isTruthy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// This is okay to check undefined&lt;/span&gt;

&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="nx"&gt;isTruthy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// check -&amp;gt; x !== 0 || x &amp;gt; 0&lt;/span&gt;

&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;
&lt;span class="nx"&gt;isTruthy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// check -&amp;gt; x !== '' || x?.length &amp;gt; 0&lt;/span&gt;

&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
&lt;span class="nx"&gt;isTruthy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// check -&amp;gt; x ?? true : false&lt;/span&gt;

&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;NaN&lt;/span&gt;
&lt;span class="nx"&gt;isTruthy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// check -&amp;gt; isNaN(x)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-modify-dom-in-loop"&gt;
  &lt;/a&gt;
  3. Modify DOM in loop
&lt;/h3&gt;

&lt;p&gt;Modifying DOM is one of the most expensive operations that might happen in the browser, because it cause a reflow/repaint for the page, adding or modifying DOM in a loop is the worst, instead you can use something called &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment"&gt;DocumentFragment&lt;/a&gt; which will be created in memory and cause the reflow only once after the loop as follow:&lt;/p&gt;

&lt;h4&gt;Bad&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create 10 elements and push them to document&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;
  &lt;span class="c1"&gt;// every loop iteration a new element is created&lt;/span&gt;
  &lt;span class="c1"&gt;// and get added to document node what causes&lt;/span&gt;
  &lt;span class="c1"&gt;// re-paint and re-flow&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;Good&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// DocumentFragment are saved in memory&lt;/span&gt;
&lt;span class="c1"&gt;// push elements all at once into the document node&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fragment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;DocumentFragment&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;
  &lt;span class="nx"&gt;fragment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fragment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-new-object-in-raw-arrayprototypereduce-endraw-"&gt;
  &lt;/a&gt;
  4. New Object in &lt;code&gt;Array.prototype.reduce&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The problem here is to try to create a new Object in each round in &lt;code&gt;reduce&lt;/code&gt; function, trying to make it immutable however if is creating already a new Object/Array in each route so mutating it is fine otherwise you will end up creating extra Objects in memory.&lt;/p&gt;

&lt;h4&gt;Bad&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Medhat&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Adam&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Karma&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;// spread operator is creating a new Obj&lt;/span&gt;
&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Expected Output&lt;/span&gt;
&lt;span class="c1"&gt;// {&lt;/span&gt;
&lt;span class="c1"&gt;//   Medhat: true, Adam: false, Karma: true&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;Good&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Medhat&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Adam&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Karma&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;admin&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;

&lt;span class="c1"&gt;// Expected Output&lt;/span&gt;
&lt;span class="c1"&gt;// {&lt;/span&gt;
&lt;span class="c1"&gt;//   Medhat: true, Adam: false, Karma: true&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#5-manipulate-arguments"&gt;
  &lt;/a&gt;
  5. Manipulate arguments
&lt;/h3&gt;

&lt;p&gt;Here is a very common issue for beginners, the thing is that non-primitive data types are passing by reference not by value, which means when you make an object &lt;code&gt;let obj = { name: 'Medhat' };&lt;/code&gt; and create another variable to copy that object like &lt;code&gt;let obj2 = obj&lt;/code&gt; actually &lt;code&gt;obj2&lt;/code&gt; in pointing at the same object in memory and if you make a change like &lt;code&gt;obj2.name = 'Adam'&lt;/code&gt; also &lt;code&gt;obj&lt;/code&gt; will have "Adam" as a name.&lt;/p&gt;

&lt;p&gt;In javaScript you can access all arguments or a function through an object named &lt;code&gt;arguments&lt;/code&gt;, given what we understand above, mutating the arguments object will make a mess, check the example below to understand what I mean&lt;/p&gt;

&lt;h4&gt;Bad&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;makePerson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;green&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;makePerson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Medhat&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; {"name":"green","age":"green","color":"green"}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I'd advice not to ever mutate the &lt;code&gt;arguments&lt;/code&gt; object, if you want to achieve the above result without a problem you might deep-copy the object using &lt;code&gt;let argCopy = Object.assign({}, arguments);&lt;/code&gt; or by sending the color argument to as a last argument and make it optional.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;In this article you should have learnt what are design patterns and what are the anti-patterns, learnt that the Koshary is an awesome food from the Egyptian cuisine, learnt 6 different example of anti-patterns/bad practices to avoid in your next JavaScript project.&lt;/p&gt;

&lt;p&gt;I've talked about this topic before in an online event and here is the &lt;a href="https://docs.google.com/presentation/d/18A1utrkOpcVtA8sQp-Fz8aVfXOUDyH2Gl-2UM7uxH7A/edit?usp=sharing"&gt;presentation&lt;/a&gt;, feel free to tweet to me if you have any comment or addition to the info in this article.&lt;/p&gt;

&lt;p&gt;Tot ziens 👋&lt;/p&gt;

</description>
      <category>patterns</category>
      <category>antipatterns</category>
      <category>bestpractices</category>
    </item>
    <item>
      <title>Python Tools for Data Science: The Best Python Packages, Libraries and Frameworks</title>
      <author>images.cv</author>
      <pubDate>Sun, 12 Dec 2021 22:55:50 +0000</pubDate>
      <link>https://dev.to/imagescv/python-tools-for-data-science-the-best-python-packages-libraries-and-frameworks-28im</link>
      <guid>https://dev.to/imagescv/python-tools-for-data-science-the-best-python-packages-libraries-and-frameworks-28im</guid>
      <description>&lt;p&gt;&lt;strong&gt;If you're just getting started with data science, then Python programming is a great language to start with. It's the most popular programming language for data scientists and it has many powerful packages, libraries and frameworks that are designed specifically for their needs. In this post, we'll take a look at some of the best tools out there - so read on if you want to get up-to-speed quickly!&lt;/strong&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://numpy.org/"&gt;NumPy&lt;/a&gt; is the fundamental package for scientific computing in Python. It provides an efficient and comprehensive array-processing facility that can handle large multi-dimensional arrays. NumPy also contains high-level mathematical functions for linear algebra, Fourier transforms, and other operations.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://pandas.pydata.org/"&gt;Pandas&lt;/a&gt; is a powerful data analysis library that provides everything you need to manipulate, process, and analyze data in Python. It's built on top of NumPy, which means that it uses efficient arrays to handle structured data. Pandas is great for working with time series analysis (e.g., stocks prices) or relational data (e.g., Excel files).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://seaborn.pydata.org/"&gt;Seaborn&lt;/a&gt; is a powerful statistical plotting library for Python that's built on top of Matplotlib. It provides a wide range of high-level plotting functions for statistical data, as well as support for customizing the look and feel of your plots. Seaborn is great for visualizing regression models or clustering data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://scikit-learn.org/"&gt;Scikit-Learn &lt;/a&gt; is a versatile machine learning library that provides tools for data mining, preprocessing and modeling. You can use this tool to do everything from clustering your text data to building random forests or deep neural networks. What's really great about Scikit-learn is that it allows you to work with Python code instead of having to learn a new language.&lt;/p&gt;




&lt;p&gt;These are just some of the best Python tools for data science - there are many others out there that can help you get your job done quickly and efficiently. So don't be afraid to experiment with different libraries and frameworks until you find the one that's right for you!&lt;/p&gt;




&lt;p&gt;&lt;a href="https://images.cv/"&gt;images.cv&lt;/a&gt; provide you with an easy way to build image datasets.&lt;br&gt;
15K+ categories to choose from&lt;br&gt;
Consistent folders structure for easy parsing&lt;br&gt;
Advanced tools for dataset pre-processing: image format, data split, image size and data augmentation.&lt;/p&gt;

&lt;p&gt;👉Visit &lt;a href="https://images.cv/"&gt;images.cv&lt;/a&gt; to learn more&lt;/p&gt;

</description>
      <category>python</category>
      <category>datascience</category>
    </item>
    <item>
      <title>Using MongoDB with Node.JS</title>
      <author>Pepper.</author>
      <pubDate>Sun, 12 Dec 2021 22:33:22 +0000</pubDate>
      <link>https://dev.to/peppermints/using-mongodb-with-nodejs-4n94</link>
      <guid>https://dev.to/peppermints/using-mongodb-with-nodejs-4n94</guid>
      <description>&lt;p&gt;First, create a new project.&lt;/p&gt;

&lt;p&gt;CD into the project folder and run &lt;code&gt;npm init&lt;/code&gt;. Follow those steps until you're done.&lt;/p&gt;

&lt;p&gt;Run: &lt;code&gt;npm i mongodb&lt;/code&gt;. This will install the official MongoDB driver for Node.&lt;/p&gt;

&lt;p&gt;Create an &lt;code&gt;index.js&lt;/code&gt;, or &lt;code&gt;main.js&lt;/code&gt;, depending on your main file when you ran &lt;code&gt;npm init&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Inside there: add this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const {MongoClient} = require("mongodb");
const mongouri = 'mongodb://your_connection_string';
const client = new MongoClient(mongouri);

client.connect().then(console.log("Connected to MongoDB"));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Congrats, if you run &lt;code&gt;node .&lt;/code&gt;, you should see 'Connected to MongoDB'.&lt;/p&gt;

&lt;p&gt;Let's create a quick question database by using an asynchronous function. Add this above &lt;code&gt;client.connect().then(console.log("Connected to MongoDB"));&lt;/code&gt; and under the constants:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;async function createListing(db, collection, data) {
    await client.db(db).collection(collection).insertOne(data);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, under &lt;code&gt;client.connect(...&lt;/code&gt;, put:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;createListing('question', 'questions', {
    question: "What's 2+2?",
    answer: 4
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Go ahead and run &lt;code&gt;node .&lt;/code&gt;. If you have access to your database, you should see that listing in the database.&lt;/p&gt;

&lt;p&gt;Let's read a listing and compare an answer by creating another asynchronous function. Under the 'createListing' function, add:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;async function readListing(db, collection, data) {
    const result = await client.db(db).collection(collection).findOne(data);
    if(result === null || result === undefined) {
        return false;
    }
    return result;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, let's remove the lines where we created our listing, and we will replace it with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let guess = 4;
const res = readListing('question', 'questions', {
    answer: guess
});
if(res === false) {
    console.log("Oops, you got it wrong.");
} else {
    console.log("Yay! You got it right!");
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now, we will run &lt;code&gt;node .&lt;/code&gt;, it should output: "Yay! You got it right!"&lt;/p&gt;

&lt;p&gt;Congratulations! You've just created and read data from a database!&lt;/p&gt;

&lt;p&gt;To the beginners: Keep learning. You never know what you can accomplish if you keep putting your all into it. This tutorial has just showed you how to use one of the BEST databases out there, very easily. So go and do what we all beginners &lt;em&gt;should&lt;/em&gt; do, keep learning, and keep attempting new things. Good luck!&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>mongodb</category>
    </item>
    <item>
      <title>I made a Bandersnatch clone. Come interview me!</title>
      <author>Bruno Noriller</author>
      <pubDate>Sun, 12 Dec 2021 22:25:14 +0000</pubDate>
      <link>https://dev.to/noriller/i-made-a-bandersnatch-clone-come-interview-me-5bkg</link>
      <guid>https://dev.to/noriller/i-made-a-bandersnatch-clone-come-interview-me-5bkg</guid>
      <description>&lt;p&gt;It's amazing how complex something can get.&lt;br&gt;
And something like this sure demanded a lot, especially because, many of the APIs I had never used.&lt;br&gt;
And also... all the event listeners and triggers... so many triggers.&lt;/p&gt;

&lt;p&gt;My player has a fraction of the functionalities a player like Youtube has, and yet I was already drowning in endless "pages" of events.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-stack"&gt;
  &lt;/a&gt;
  The stack
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Next.js / React.js

&lt;ul&gt;
&lt;li&gt;Mostly because is what I'm used to... and since I'm using React, no reason not to go with Next, even though I'm not actually using anything it offers.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Chakra UI

&lt;ul&gt;
&lt;li&gt;I love the developer experience of Chakra UI. I mean... what's more intuitive than &lt;code&gt;fontSize={[1em', '1.2em', '1.5em']}&lt;/code&gt; to handle breakpoint values?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AWS S3/Cloudfront

&lt;ul&gt;
&lt;li&gt;The videos are hosted there.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Github of the project: &lt;a href="https://github.com/Noriller/bander-interview"&gt;https://github.com/Noriller/bander-interview&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-im-not-using"&gt;
  &lt;/a&gt;
  What I'm not using
&lt;/h3&gt;

&lt;p&gt;The video data should probably be inside a CMS... and if I want to make it a "boilerplate" of sorts for other things, I could probably refactor a lot to make all the configuration taken from a CMS... &lt;br&gt;
If I did that, I could actually put Next to use and have multiple different copies, each one for one occasion.&lt;br&gt;
But that will come another time...&lt;/p&gt;

&lt;p&gt;And tests... I chose not to have tests because the components are either too humble or too "godly".&lt;br&gt;
The actual video player has too many triggers going on and I was changing a lot from commit to commit, alongside learning the APIs... so, I'm ashamed to say... it's not tested.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-player"&gt;
  &lt;/a&gt;
  The player
&lt;/h2&gt;

&lt;p&gt;What do you need for a player?&lt;/p&gt;

&lt;p&gt;I choose to go vanilla on this one, using the pure &lt;code&gt;&amp;lt;video /&amp;gt;&lt;/code&gt; component.&lt;/p&gt;

&lt;p&gt;For those who don't know, the most important APIs for the player are the &lt;code&gt;[HTMLMediaElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement)&lt;/code&gt; and the &lt;code&gt;[Media Source API](https://developer.mozilla.org/en-US/docs/Web/API/MediaSource)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;HTMLMediaElement&lt;/code&gt; is the one you use for the video components.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Media Source API&lt;/code&gt; is the one you use if you want full control of the buffer you're using on your video. (This one, basically gives you player superpowers!)&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#things-to-consider"&gt;
  &lt;/a&gt;
  Things to consider
&lt;/h3&gt;

&lt;p&gt;When making the best video player possible... you probably want to make your own controls, so give a look at my &lt;a href="https://dev.to/noriller/the-fullscreen-api-4mbj"&gt;Fullscreen API&lt;/a&gt; article.&lt;/p&gt;

&lt;p&gt;And, when I think about a video player I think about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Play/Pause&lt;/li&gt;
&lt;li&gt;Volume&lt;/li&gt;
&lt;li&gt;Video Quality&lt;/li&gt;
&lt;li&gt;Playback Speed&lt;/li&gt;
&lt;li&gt;Seek bar&lt;/li&gt;
&lt;li&gt;Fullscreen&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All with buttons (or clicks) and with listeners for the keyboard. &lt;/p&gt;

&lt;p&gt;Of course, you're always free to not implement something, maybe because it's something you think your app shouldn't do... (as I did!)&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#interview"&gt;
  &lt;/a&gt;
  Interview?
&lt;/h2&gt;

&lt;p&gt;Fine, you want to see the finished product right?&lt;/p&gt;

&lt;p&gt;But first...&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#whats-the-interview-about"&gt;
  &lt;/a&gt;
  What's the interview about?
&lt;/h3&gt;

&lt;p&gt;And the interview is actually a job interview... mine!&lt;br&gt;
You can interview me at &lt;a href="https://noriller-interview.vercel.app/"&gt;https://noriller-interview.vercel.app/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'm currently job hunting for a job opportunity outside Brazil (where I'm currently living).&lt;br&gt;
And since I had little success, I decided to spice my portfolio a bit while making sure I could get interviewed by anyone who wants it.&lt;br&gt;
There are a lot of opportunities out there, but for reasons... even when I got to the interview phase...&lt;/p&gt;

&lt;p&gt;If you or your company is hiring... I want to work with you!&lt;br&gt;
I like frontend, but I'm fullstack. And while I do have some years of programming, I'm considering even junior positions (I do still have a lot to learn!).&lt;br&gt;
I would love to work on-site or hybrid... so I would need sponsorship.&lt;/p&gt;

&lt;p&gt;If not, you can always help by sharing... maybe someone will want to work with an "outside the box" guy who made a Bandersnatch clone to get interviews.&lt;/p&gt;

&lt;p&gt;If you want, you can share this very message:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Check this out: mad lad made a Bandersnatch clone to get interviews!
Watch here: https://noriller-interview.vercel.app/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And regardless of that... feel free to add me on &lt;a href="https://www.linkedin.com/in/noriller/"&gt;Linkedin&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As a special thanks, I have to acknowledge another "outside the box" person who used a chatbot to get a lot of interviews. I saw in the news somewhere, a few months ago and since I can do frontend... well... there you have it.&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>javascript</category>
      <category>devjournal</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Introduction to Blockchain Technology and  Development.</title>
      <author>Daniel Onuoha  Agbo</author>
      <pubDate>Sun, 12 Dec 2021 22:09:39 +0000</pubDate>
      <link>https://dev.to/shieldstring/introduction-to-blockchain-technology-and-development-4g50</link>
      <guid>https://dev.to/shieldstring/introduction-to-blockchain-technology-and-development-4g50</guid>
      <description>&lt;p&gt;After going through the material here, you would've learned a lot about Blockchain and What it is all about. Let's dive in 🚀.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#definition"&gt;
  &lt;/a&gt;
  🔰Definition
&lt;/h3&gt;

&lt;p&gt;A Blockchain is a decentralized distributed ledger network that is cryptographically secured.&lt;/p&gt;

&lt;p&gt;Think of it as a database where different features can be built on such as coins, apps etc and no single entity has control over it. This allows for transparency, security and gives everyone full control of their assets.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#networks"&gt;
  &lt;/a&gt;
  🔰Networks:
&lt;/h3&gt;

&lt;p&gt;We have 3 major types of networks in computing, they are:&lt;br&gt;
Centralized, Decentralized and Distributed Networks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YV1Minqh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yb3fec07pta7l3mh5pie.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YV1Minqh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yb3fec07pta7l3mh5pie.png" alt="Image description" width="600" height="380"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In a centralized network, all the data and information is regulated by a single entity. Example Facebook, WhatsApp etc they are all centralized.&lt;/p&gt;

&lt;p&gt;In a decentralized network, different nodes on the network have equally control and the source of Truth is checked on the network to ensure that everyone has a correct copy regardless of if any node tampers with It's copy.&lt;/p&gt;

&lt;p&gt;In a distributed network, there are not only few nodes that have access to the data but the idea is stretched such that it is peer-to-peer and every participant in the network has equal access.&lt;/p&gt;

&lt;p&gt;A Blockchain combines the features of a Decentralized &amp;amp; a Distributed network, to provide transparency, security and peer-to-peer interaction.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#blockchain-development"&gt;
  &lt;/a&gt;
  💻&lt;strong&gt;Blockchain Development&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;The idea of Blockchain Development is all about building on the Blockchain.&lt;/p&gt;

&lt;p&gt;This can be anything from Cryptocurrencies, tokens, smart contracts or dApps. What do all these mean.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cryptocurrency"&gt;
  &lt;/a&gt;
  🔰Cryptocurrency:
&lt;/h2&gt;

&lt;p&gt;This is a digital currency that runs on the Blockchain Network. Similar to the way we have physical cash or fiat. Cryptocurrencies can be stored in a wallet and used as a viable means of exchange.&lt;/p&gt;

&lt;p&gt;*A wallet can be an App or Device that stores the digital assets. And is accessible using a private key.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tokens"&gt;
  &lt;/a&gt;
  🔰 Tokens:
&lt;/h2&gt;

&lt;p&gt;Tokens serve as digital assets on the blockchain. They are very similar to native Cryptocurrencies in the sense that they can be easily created by any entity for the purpose of generating funds, driving a product on the blockchain or providing incentives for the use of certain services provided on the blockchain. Tokens can equally be traded and fungible(divisible into smaller parts). Most tokens are usually distributed with an Initial Coin Offering (ICO)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#smart-contracts"&gt;
  &lt;/a&gt;
  🔰Smart Contracts:
&lt;/h2&gt;

&lt;p&gt;A smart contract is a self-executing contract with the terms of the agreement between buyer and seller being directly written into lines of code. The code and the agreements contained therein exist across a distributed, decentralized blockchain network. The code controls the execution, and transactions are track-able and irreversible.&lt;/p&gt;

&lt;p&gt;Smart contracts permit trusted transactions and agreements to be carried out among disparate, anonymous parties without the need for a central authority, legal system, or external enforcement mechanism.&lt;/p&gt;

&lt;p&gt;In simple terms smart contracts are just pieces of code that enables transactions, entities, apps etc to interact with the Blockchain Network without a 3rd party.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nfts"&gt;
  &lt;/a&gt;
  🔰NFTS
&lt;/h2&gt;

&lt;p&gt;(NON-FUNGIBLE TOKENS)&lt;/p&gt;

&lt;p&gt;These are digital assets that are not divisible as the name implies. Unlike Cryptocurrencies which can be exchange and look identical, NFTs are unique and have a metadata that ties them to the identity of it's owner.&lt;/p&gt;

&lt;p&gt;NFTs are a revolution because it has created a means to define the authenticity of assets and can be tied to documents, real estate, arts etc.&lt;/p&gt;

&lt;p&gt;Imagine writing a book and selling it as an NFT, this would mean that whosoever buys it has sole ownership of it and everybody would know that they own it. They can choose to sell it or transfer it at any perceived value.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  🔰Conclusion
&lt;/h2&gt;

&lt;p&gt;Blockchain  technology  might  become  the  defining technology of the future, specifically because it has unique  building  blocks  that  allow  us  to  build  trust enabling  infrastructures.  Where  we  go  from  here would be a defining moment that future generations would be grateful for and understanding how it all fits in would go a long way to enable everyone to be a part of this alternate possibility.&lt;/p&gt;

</description>
      <category>career</category>
      <category>javascript</category>
      <category>web3</category>
      <category>blockchain</category>
    </item>
    <item>
      <title>A Simple chat app using Socket.io with NodeJS and ReactJS </title>
      <author>Malik-Idrees</author>
      <pubDate>Sun, 12 Dec 2021 21:16:52 +0000</pubDate>
      <link>https://dev.to/malikidrees/a-simple-chat-app-using-socketio-with-nodejs-and-reactjs-46i0</link>
      <guid>https://dev.to/malikidrees/a-simple-chat-app-using-socketio-with-nodejs-and-reactjs-46i0</guid>
      <description>&lt;h3&gt;
  &lt;a href="#i-have-used"&gt;
  &lt;/a&gt;
  I have used:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;NodeJS with Express for server side logic&lt;/li&gt;
&lt;li&gt;ReactJS to build a simple client app&lt;/li&gt;
&lt;li&gt;Socket.io for real-time connection between both sides&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://reactsocket.netlify.app"&gt;Live Preview&lt;/a&gt;&lt;br&gt;
Connect from two different tabs or two different PC's to test it out&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5d_UFbHz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/avw8utrdbq9rhq29b6y9.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5d_UFbHz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/avw8utrdbq9rhq29b6y9.PNG" alt="shows the landing page" width="880" height="349"&gt;&lt;/a&gt;&lt;br&gt;
You can use it to understand how sockets work in react with a bit of touch from Material UI.&lt;/p&gt;

&lt;p&gt;I am a full stack developer and i created this small app to understand working of sockets. Here is another &lt;a href="https://youtu.be/ZwFA3YMfkoc"&gt;resource&lt;/a&gt; to learn about socket by JavaScript Mastery.&lt;br&gt;
Source code will be available soon!oops&lt;br&gt;
Stay Tuned  for more coming soon! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's next?
&lt;/h3&gt;

&lt;p&gt;A detailed article about creating API's using Node.js and MongoDb along with In-memory testing and optional GitHub actions to test and deploy to Heroku whenever I have free time.&lt;/p&gt;

&lt;p&gt;GitHub: &lt;a href="https://dev.tomalik-idrees"&gt;https://github.com/malik-Idrees&lt;/a&gt; ⭐&lt;br&gt;
Fiverr: &lt;a href="https://www.fiverr.com/share/27Yy04"&gt;imidrees&lt;/a&gt; ✨&lt;br&gt;
Thanks for reading!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>socket</category>
    </item>
    <item>
      <title>Caso de uso: RegEx</title>
      <author>bug_elseif</author>
      <pubDate>Sun, 12 Dec 2021 21:10:45 +0000</pubDate>
      <link>https://dev.to/feministech/caso-de-uso-regex-19bn</link>
      <guid>https://dev.to/feministech/caso-de-uso-regex-19bn</guid>
      <description>&lt;p&gt;Podemos identificar padrões em uma cadeia de caracteres usando Expressões Regulares (&lt;em&gt;Regular Expression&lt;/em&gt; ou RegEx).&lt;/p&gt;

&lt;p&gt;Para validar o formato de um CPF, por exemplo, é necessário que esteja no seguinte padrão:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;xxx.xxx.xxx-xx&lt;/code&gt; (cada &lt;code&gt;x&lt;/code&gt; corresponde à um dígito decimal)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Então através de uma RegEx conseguimos identificar se esse padrão foi seguido ou não.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introdu%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Introdução
&lt;/h2&gt;

&lt;p&gt;Usando a linguagem de programação Python, importa-se o módulo &lt;code&gt;re&lt;/code&gt; que fornece operações de expressões regulares.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Cria-se uma função &lt;code&gt;validar&lt;/code&gt; a qual recebe uma string &lt;code&gt;cpf&lt;/code&gt;, ela retorna &lt;code&gt;válido&lt;/code&gt; ou &lt;code&gt;inválido&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;validar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cpf&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;validador&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;expressao&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cpf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;validador&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'válido'&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'inválido'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#primeiro-caso"&gt;
  &lt;/a&gt;
  Primeiro caso
&lt;/h2&gt;

&lt;p&gt;Usando a função &lt;code&gt;re.match&lt;/code&gt;, compara-se o &lt;code&gt;cpf&lt;/code&gt; com a expressão regular compilada &lt;code&gt;expressao&lt;/code&gt;, ela retorna um &lt;code&gt;Match Object&lt;/code&gt; caso combine, do contrário retorna &lt;code&gt;None&lt;/code&gt;, o valor é atribuído à variável &lt;code&gt;validador&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A expressão escrita a seguir contém alguns símbolos com significado especial, são eles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;^&lt;/code&gt; sinaliza o início de uma linha ou string&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;$&lt;/code&gt; sinaliza o fim de uma linha ou string&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;\d&lt;/code&gt; corresponde aos dígitos decimais de 0 a 9&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Um detalhe importante, o uso de &lt;code&gt;.&lt;/code&gt; também possui um significado especial e para retirar esse significado usa-se a &lt;code&gt;\&lt;/code&gt; antes do caracter, assim ele se torna o &lt;code&gt;.&lt;/code&gt; (ponto literal).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;expressao&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s"&gt;'^\d\d\d\.\d\d\d\.\d\d\d-\d\d$'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Essa expressão é escrita de uma forma simples, repetindo os caracteres no formato esperado.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#evitando-repeti%C3%A7%C3%A3o-de-elementos"&gt;
  &lt;/a&gt;
  Evitando repetição de elementos
&lt;/h2&gt;

&lt;p&gt;Podemos reescrevê-la usando mais recursos implementados no módulo &lt;code&gt;re&lt;/code&gt;, usando o conceito de repetição de elementos da RegEx representados por chaves &lt;code&gt;{}&lt;/code&gt;, aplicando-o ao conjunto de dígitos &lt;code&gt;\d&lt;/code&gt; que é repetido um certo número de vezes, obtem-se:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;expressao&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s"&gt;'^\d{3}\.\d{3}\.\d{3}-\d{2}$'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#evitando-repeti%C3%A7%C3%A3o-de-trechos"&gt;
  &lt;/a&gt;
  Evitando repetição de trechos
&lt;/h2&gt;

&lt;p&gt;Outra forma de expressar a RegEx é usando o conceito de grupos. Nesse caso podemos agrupar um trecho do formato que se repete, fazendo um grupo de 3 dígitos e um &lt;code&gt;.&lt;/code&gt; (ponto literal), que devem ser repetidos duas vezes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;expressao&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s"&gt;'^(\d{3}\.){2}\d{3}-\d{2}$'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#exemplos-de-execu%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Exemplos de execução
&lt;/h2&gt;

&lt;p&gt;Usaremos três exemplos para testar a validação do CPF:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'111.222.333-44'&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'1234.123.789-88'&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'123.12.789-88'&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'abs.ert.yui.lk'&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'''
    O CPF: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; é &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;validar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;
    O CPF: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; é &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;validar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;
    O CPF: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; é &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;validar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;
    O CPF: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; é &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;validar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;
    '''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Analisando a saída obtida, notamos que:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;O exemplo &lt;code&gt;a&lt;/code&gt; está no formato correto.&lt;/li&gt;
&lt;li&gt;O exemplo &lt;code&gt;b&lt;/code&gt; contém mais dígitos do que o esperado no primeiro trecho.&lt;/li&gt;
&lt;li&gt;O exemplo &lt;code&gt;c&lt;/code&gt; contém menos dígitos do que o esperado no segundo trecho.&lt;/li&gt;
&lt;li&gt;O exemplo &lt;code&gt;d&lt;/code&gt; apresenta caracteres não-dígitos, sendo inválido.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    O CPF: 111.222.333-44 é válido
    O CPF: 1234.123.789-88 é inválido
    O CPF: 1234.12.789-88 é inválido
    O CPF: abs.ert.yui.lk é inválido
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#considera%C3%A7%C3%B5es"&gt;
  &lt;/a&gt;
  Considerações
&lt;/h2&gt;

&lt;p&gt;Vimos que uma RegEx pode ser escrita de várias formas para validar o mesmo padrão e ainda existem diversas outras maneiras, podendo levar em conta a legibilidade ou complexidade da escrita para fazer sua escolha.&lt;/p&gt;

&lt;p&gt;Aprendendo mais sobre os recursos do &lt;a href="https://docs.python.org/pt-br/3/library/re.html"&gt;módulo &lt;em&gt;re&lt;/em&gt; do Python&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Estudando mais sobre &lt;a href="https://aurelio.net/regex/"&gt;expressões regulares&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Se escreve &lt;a href="https://www.flip.pt/Duvidas-Linguisticas/Duvida-Linguistica/DID/745"&gt;caracter/caráter/caracteres&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;

</description>
      <category>python</category>
      <category>regex</category>
      <category>braziliandevs</category>
    </item>
    <item>
      <title>OSD600 - Final Release</title>
      <author>DukeManh</author>
      <pubDate>Sun, 12 Dec 2021 20:55:37 +0000</pubDate>
      <link>https://dev.to/dukemanh/osd600-final-release-2pl</link>
      <guid>https://dev.to/dukemanh/osd600-final-release-2pl</guid>
      <description>&lt;p&gt;For release 0.4, I decided to take the the time to participate in the 2021 GitHub Action hackathon and continue to contribute to Telescope.&lt;/p&gt;

&lt;p&gt;About the same time we worked on integrating GitHub Continuous Integration into our SSG project, GitHub announced they are holding &lt;a href="https://dev.to/devteam/join-us-for-the-2021-github-actions-hackathon-on-dev-4hn4"&gt;2021 GitHub Action&lt;/a&gt; hackathon in collaboration with Dev. This year, we’re encouraged to utilize existing GitHub Actions to create workflows solutions other developers can utilize to solve problems with open source. &lt;a href="https://dev.to/dukemanh/run-prettier-eslint-on-changed-files-and-run-tests-on-changed-workspaces-25n8"&gt;My submission&lt;/a&gt; was a workflow to run code linter and formatter on only changed files and run test on only changed workspaces of a monorepo. I used what learned from building an SSG in OSD600 to build this project. After all, I walked away having a deeper understanding of GitHub actions, from exploring many existing actions, to building a useful one and publishing it to GitHub marketplace.&lt;/p&gt;

&lt;p&gt;The other contributions were for improving website accessibility and responsiveness in Telescope. These fixed some of the minor issues I encountered while using Telescope myself.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Truncate post titles at 2 lines vs 1&lt;/li&gt;
&lt;li&gt;Fluid post titles&lt;/li&gt;
&lt;li&gt;Smaller code block padding on mobile&lt;/li&gt;
&lt;li&gt;Smaller code font-size&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt; for date data. Interesting, I learned that &lt;a href="https://github.com/humphd"&gt;David&lt;/a&gt; was the &lt;a href="https://bugzilla.mozilla.org/show_bug.cgi?id=629801"&gt;original author&lt;/a&gt; of the &lt;time&gt; element, implemented 11 years ago. Thank you Dave for your many contributions in open-source technology.&lt;/time&gt;
&lt;/li&gt;
&lt;li&gt;Fix &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; cannot be descendant of &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; DOM warning&lt;/li&gt;
&lt;li&gt;Do not skip heading levels (e.g, from &lt;code&gt;h1&lt;/code&gt; to &lt;code&gt;h3&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://github.com/Seneca-CDOT/telescope/pull/2594"&gt;#2594&lt;/a&gt;, &lt;br&gt;
&lt;a href="https://github.com/Seneca-CDOT/telescope/pull/2593"&gt;#2593&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Python: The Best Image Processing Libraries</title>
      <author>images.cv</author>
      <pubDate>Sun, 12 Dec 2021 20:48:34 +0000</pubDate>
      <link>https://dev.to/imagescv/python-the-best-image-processing-libraries-1gfl</link>
      <guid>https://dev.to/imagescv/python-the-best-image-processing-libraries-1gfl</guid>
      <description>&lt;p&gt;&lt;strong&gt;In this blog post, we will take a look at some of the best image processing libraries in Python. We'll spend time looking at their strengths and weaknesses to help you pick one that is right for your needs!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.opencv.org/4.x/d6/d00/tutorial_py_root.html"&gt;OpenCV&lt;/a&gt; &lt;br&gt;
The Open Computer Vision library, or simply OpenCV, is a collection of powerful image processing tools. It was originally developed for use in the video game industry but has since found widespread success outside of it as well! If you are looking for an open source alternative to MATLAB, then this might be your best bet.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://matplotlib.org/"&gt;Matplotlib&lt;/a&gt; &lt;br&gt;
The matplotlib library is a plotting library for Python. It can be used to generate plots in either the "matlab" style or the more traditional gnuplot-style, depending on your preference. Best of all, it's actually built into numpy; simply use np.imshow() and youj'll be on your way!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://numpy.org/"&gt;Numpy&lt;/a&gt; &lt;br&gt;
While not exactly an image processing library, numpy is one of the most important libraries for scientific computing in Python today. It provides powerful tools like linear algebra and Fourier transforms that make it easier to work with images. If you are doing serious mathematics or data analysis with your images, then this is probably the library you want to use.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://imagemagick.org/script/develop.php"&gt;ImageMagick&lt;/a&gt; &lt;br&gt;
ImageMagick is a software suite for processing images. It has its own programming language that allows users to manipulate their image files in many ways, including resizing, adjusting color balance or applying filters and effects. Image processing with ImageMagick can be done from the command line or through a graphical interface.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://pillow.readthedocs.io/en/stable/"&gt;Pillow&lt;/a&gt; &lt;br&gt;
The Pillow library is a fork of the PIL library that aims to be more user-friendly and maintainable. It includes many of the same features as PIL, but also adds support for animated GIFs, JPEG2000 files, and WebP images. If you are looking for a drop-in replacement for PIL, then this is probably your best bet!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://scikit-image.org/"&gt;Scikit-image&lt;/a&gt; &lt;br&gt;
The Scikit-image library is a collection of image processing algorithms that are designed to be easy to use and understand. It includes algorithms for common tasks like edge detection, feature extraction, and image restoration. If you are just starting out in image processing, then this is a good library to check out!&lt;/p&gt;




&lt;p&gt;That's it for our roundup of the best image processing libraries in Python! We hope this gives you a better idea of which one is right for your needs. If you have any questions, feel free to leave a comment below!&lt;/p&gt;




&lt;p&gt;&lt;a href="https://images.cv/"&gt;images.cv&lt;/a&gt; provide you with an easy way to build image datasets.&lt;br&gt;
15K+ categories to choose from&lt;br&gt;
Consistent folders structure for easy parsing&lt;br&gt;
Advanced tools for dataset pre-processing: image format, data split, image size, and data augmentation.&lt;br&gt;
👉Visit &lt;a href="https://images.cv/"&gt;images.cv&lt;/a&gt; to learn more&lt;/p&gt;

</description>
      <category>python</category>
      <category>imageprocessing</category>
    </item>
    <item>
      <title>Sentiment Analysis With 🐍. Making Your First Sentiment Analysis Script.</title>
      <author>Code_Jedi</author>
      <pubDate>Sun, 12 Dec 2021 20:22:14 +0000</pubDate>
      <link>https://dev.to/code_jedi/sentiment-analysis-with-making-your-first-sentiment-analysis-script-4ea8</link>
      <guid>https://dev.to/code_jedi/sentiment-analysis-with-making-your-first-sentiment-analysis-script-4ea8</guid>
      <description>&lt;p&gt;Do you want to perform sentiment analysis with Python but don't know how to get started? Not to worry. In this article, I'll demonstrate and explain how you can make your own sentiment analysis app, even if you are new to Python.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-exactly-is-sentiment-analysis"&gt;
  &lt;/a&gt;
  What Exactly Is Sentiment Analysis?
&lt;/h2&gt;

&lt;p&gt;If you've been following programming and data science, you'll probably be familiar with sentiment analysis. If you're not, here the definition:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The process of computationally identifying and categorizing opinions expressed in a piece of text, especially in order to determine whether the writer's attitude towards a particular topic, product, etc. is positive, negative, or neutral.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sentiment analysis programs have become increasingly popular in the tech world. It's time you make one for yourself!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#educative"&gt;
  &lt;/a&gt;
  Educative
&lt;/h2&gt;

&lt;p&gt;Before I get on with the article, I'd like to recommend &lt;a href="https://bit.ly/3rVIDoN"&gt;Educative&lt;/a&gt; for learners like you.&lt;br&gt;
&lt;strong&gt;Why Educative?&lt;/strong&gt;&lt;br&gt;
It is home to hundreds of development courses, hands on tutorials, guides and demonstrations to help you stay ahead of the curve in your development journey.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You can get started with Educative &lt;a href="https://bit.ly/3EeDfAi"&gt;here&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#making-a-simple-sentiment-analysis-script"&gt;
  &lt;/a&gt;
  Making A Simple Sentiment Analysis Script
&lt;/h1&gt;

&lt;p&gt;Let's make a simple sentiment analysis script with Python. What will it do? &lt;br&gt;
It will:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Scrape news headlines from BBC news.&lt;/li&gt;
&lt;li&gt;Get rid of unwanted scraped elements and duplicates.&lt;/li&gt;
&lt;li&gt;Scan every headline for words that may indicate it's sentiment.&lt;/li&gt;
&lt;li&gt;Based on the found words, determine each headline's sentiment.&lt;/li&gt;
&lt;li&gt;Aggregate the headlines into different arrays based on their sentiment.&lt;/li&gt;
&lt;li&gt;Print the number of scraped headlines and number of headlines with a positive, negative and neutral sentiment.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;p&gt;Create a new Python file with your favorite text-editor. You can name it however you want, but I'll name the file &lt;em&gt;main.py&lt;/em&gt; for this tutorial.&lt;br&gt;
Before writing the main code, make sure to install(if not already installed) and import the following libraries.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import requests
import pandas
from bs4 import BeautifulSoup
import numpy as np
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-dataset"&gt;
  &lt;/a&gt;
  The Dataset
&lt;/h2&gt;

&lt;p&gt;A sentiment analysis script needs a dataset to train on.&lt;br&gt;
Here's &lt;a href="https://github.com/matveynikon/Sentiment-Analysis-With-Python/blob/main/sentiment.csv"&gt;the dataset&lt;/a&gt; that I made for this script. I've tested it and found it to work well.&lt;br&gt;
To work with this tutorial, make sure to download this dataset, move it into your Python file's directory and add the following code to your Python file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;df = pandas.read_csv('sentiment.csv')
sen = df['word']
cat = df['sentiment']
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you take a look at this dataset, you'll notice that it's just over 100 lines long. Each line contains a number, 1 or 0 and a word.&lt;br&gt;
The number just gives a way for the Python file to paddle through each word, the word is what is going to indicate a headline's sentiment, and the 1 or 0 indicates whether the word has negative(0) or positive(1) sentiment.&lt;br&gt;
This isn't a lot, but it is enough to perform accurate sentiment analysis on news headlines, which are typically only about 6-10 words long. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#scraping-the-news-headlines"&gt;
  &lt;/a&gt;
  Scraping The News Headlines
&lt;/h2&gt;

&lt;p&gt;Here's the code that is going to scrape the news headlines:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;url='https://www.bbc.com/news'
response = requests.get(url)

soup = BeautifulSoup(response.text, 'html.parser')
headlines = soup.find('body').find_all('h3')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As this is not a web scraping tutorial, you don't have to understand what's happening here. In case you are interested in how this works, here's a tutorial on how to &lt;a href="https://dev.to/code_jedi/scrape-news-headlines-with-python-1go6"&gt;scrape news headlines with Python in &amp;lt;10 lines of code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Before performing sentiment analysis on the scraped headlines, add the following code to your Python file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;url='https://www.bbc.com/news'
response = requests.get(url)

soup = BeautifulSoup(response.text, 'html.parser')
headlines = soup.find('body').find_all('h3')
unwanted = ['BBC World News TV', 'BBC World Service Radio', 'News daily newsletter', 'Mobile app', 'Get in touch']
news = []
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;em&gt;unwanted&lt;/em&gt; array contains elements that will be scraped from BBC news, that are not news headlines.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Full Code:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import requests
import pandas
from bs4 import BeautifulSoup
import numpy as np

df = pandas.read_csv('sentiment.csv')
sen = df['word']
cat = df['sentiment']

url='https://www.bbc.com/news'
response = requests.get(url)

soup = BeautifulSoup(response.text, 'html.parser')
headlines = soup.find('body').find_all('h3')
unwanted = ['BBC World News TV', 'BBC World Service Radio', 'News daily newsletter', 'Mobile app', 'Get in touch']
news = []
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#performing-sentiment-analysis"&gt;
  &lt;/a&gt;
  Performing Sentiment Analysis
&lt;/h2&gt;

&lt;p&gt;It's time to write the code which will perform sentiment analysis on the scraped headlines.&lt;br&gt;
Add the following code to your Python file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;neutral = []
bad = []
good = []
for x in headlines:
    if x.text.strip() not in unwanted and x.text.strip() not in news:
        news.append(x.text.strip())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Here's what this code does:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;First, it defines the &lt;em&gt;neutral&lt;/em&gt;, &lt;em&gt;bad&lt;/em&gt; and &lt;em&gt;good&lt;/em&gt; arrays.&lt;/li&gt;
&lt;li&gt;While paddling through every scraped headline element, it checks if it's not inside the &lt;em&gt;unwanted&lt;/em&gt; and &lt;em&gt;news&lt;/em&gt; array.&lt;/li&gt;
&lt;li&gt;It appends the headline to the &lt;em&gt;news&lt;/em&gt; array.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The reason why it checks if the headline is in the &lt;em&gt;unwanted&lt;/em&gt; and &lt;em&gt;news&lt;/em&gt; array is to exclude non-headline elements and prevent duplicate headlines to be analyzed more than once.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Full Code:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import requests
import pandas
from bs4 import BeautifulSoup
import numpy as np

df = pandas.read_csv('sentiment.csv')
sen = df['word']
cat = df['sentiment']

url='https://www.bbc.com/news'
response = requests.get(url)

soup = BeautifulSoup(response.text, 'html.parser')
headlines = soup.find('body').find_all('h3')
unwanted = ['BBC World News TV', 'BBC World Service Radio', 'News daily newsletter', 'Mobile app', 'Get in touch']
news = []
neutral = []
bad = []
good = []
for x in headlines:
    if x.text.strip() not in unwanted and x.text.strip() not in news:
        news.append(x.text.strip())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's perform sentiment analysis on the news headlines by adding the following code to the &lt;code&gt;if x.text.strip() not in unwanted and x.text.strip() not in news:&lt;/code&gt; condition.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    for i in range(len(df['n'])):
        if sen[i] in x.text.strip().lower():
            if cat[i] == 0:
                bad.append(x.text.strip().lower())
            else:
                good.append(x.text.strip().lower())

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Here's what this code does:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;First, the &lt;code&gt;for i in range(len(df["n"])):&lt;/code&gt; loop makes sure to search the headlines for any of the words in the &lt;em&gt;sentiment.csv&lt;/em&gt; dataset.&lt;/li&gt;
&lt;li&gt;If a word from the dataset is found in the headline using the &lt;code&gt;if sen[i] in x.text.strip().lower():&lt;/code&gt; condition, the &lt;code&gt;if cat[i] == 0:&lt;/code&gt; condition then finds if the found word has a negative or positive sentiment and adds the headline to either the &lt;em&gt;bad&lt;/em&gt; or &lt;em&gt;good&lt;/em&gt; array.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;The &lt;code&gt;lower()&lt;/code&gt; function converts all the letters inside the headlines to lowercase. This is done because the word search algorithm is case sensitive.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Full Code:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import requests
import pandas
from bs4 import BeautifulSoup
import numpy as np

df = pandas.read_csv('sentiment.csv')
sen = df['word']
cat = df['sentiment']

url='https://www.bbc.com/news'
response = requests.get(url)

soup = BeautifulSoup(response.text, 'html.parser')
headlines = soup.find('body').find_all('h3')
unwanted = ['BBC World News TV', 'BBC World Service Radio', 'News daily newsletter', 'Mobile app', 'Get in touch']
news = []
neutral = []
bad = []
good = []
for x in headlines:
    if x.text.strip() not in unwanted and x.text.strip() not in news:
        news.append(x.text.strip())
        for i in range(len(df['n'])):
            if sen[i] in x.text.strip().lower():
                if cat[i] == 0:
                    bad.append(x.text.strip().lower())
                else:
                    good.append(x.text.strip().lower())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#theres-one-thing-left-to-do"&gt;
  &lt;/a&gt;
  There's one thing left to do.
&lt;/h3&gt;

&lt;p&gt;Add the following code to the end of your Python file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;badp = len(bad)
goodp = len(good)
nep = len(news) - (badp + goodp)
print('Scraped headlines: '+ str(len(news)))
print('Headlines with negative sentiment: ' + str(badp) + '\nHeadlines with positive sentiment: ' + str(goodp) + '\nHeadlines with neutral sentiment: ' + str(nep))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will print the number of scraped headlines and the number of headlines with a bad, good and neutral sentiment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-end-result"&gt;
  &lt;/a&gt;
  The End Result
&lt;/h2&gt;

&lt;p&gt;Here's the full sentiment analysis code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import requests
import pandas
from bs4 import BeautifulSoup
import numpy as np

df = pandas.read_csv('sentiment.csv')
sen = df['word']
cat = df['sentiment']

url='https://www.bbc.com/news'
response = requests.get(url)

soup = BeautifulSoup(response.text, 'html.parser')
headlines = soup.find('body').find_all('h3')
unwanted = ['BBC World News TV', 'BBC World Service Radio', 'News daily newsletter', 'Mobile app', 'Get in touch']
news = []
neutral = []
bad = []
good = []
for x in headlines:
    if x.text.strip() not in unwanted and x.text.strip() not in news:
        news.append(x.text.strip())
        for i in range(len(df['n'])):
            if sen[i] in x.text.strip().lower():
                if cat[i] == 0:
                    bad.append(x.text.strip().lower())
                else:
                    good.append(x.text.strip().lower())

badp = len(bad)
goodp = len(good)
nep = len(news) - (badp + goodp)
print('Scraped headlines: '+ str(len(news)))
print('Headlines with negative sentiment: ' + str(badp) + '\nHeadlines with positive sentiment: ' + str(goodp) + '\nHeadlines with neutral sentiment: ' + str(nep))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if you run your Python file containing the above code, you will see an output similar to the below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ziVqoBNW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l7v1ssnnlfyb96aakdz5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ziVqoBNW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l7v1ssnnlfyb96aakdz5.png" alt="Output" width="880" height="178"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope that this tutorial has successfully demonstrated how you can perform sentiment analysis with Python.&lt;/p&gt;

&lt;p&gt;Byeeee👋&lt;/p&gt;

</description>
      <category>python</category>
      <category>datascience</category>
      <category>tutorial</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>Documentation in Python - Part 1</title>
      <author>Dev_it</author>
      <pubDate>Sun, 12 Dec 2021 20:13:49 +0000</pubDate>
      <link>https://dev.to/alizdevcorner/documentation-in-python-part-1-4h8l</link>
      <guid>https://dev.to/alizdevcorner/documentation-in-python-part-1-4h8l</guid>
      <description>&lt;p&gt;One of the major challenges in software engineering is documentation. After all, software is not only about code but the documentation that comes with it. It is a manual, costly process which should be human legible and comprehensible.&lt;/p&gt;

&lt;p&gt;So why is documentation so important ? &lt;br&gt;
When the code-base is huge and the complexities are high, having a well documented code is extremely helpful. Even more so, when a developer leaves an organization taking the code-base specific developer knowledge with them.&lt;/p&gt;

&lt;p&gt;In this blog we will talk about some of the ways we can document code functionality in Python. &lt;/p&gt;

&lt;p&gt;Since Python is a dynamically typed language, coding modules for example a piece of code for a function can take any parameter values without any validations or checks. In some cases, the function name and parameters may be self-explanatory but how the parameters and function work may be unknown unless the code is read which can contain large number of complexities.Therefore having documentation on inputs and outputs of a function provides utility and potentially yielding higher productivity.&lt;/p&gt;

&lt;p&gt;Python offers docstrings which are strings placed in the code for documentation purposes. They are used for explanations rather than justifications. Wait, wait, hold on so you are claiming a developer should use docstrings for documenting the code ? Okayy, what about comments ?&lt;/p&gt;

&lt;p&gt;Excellent question! Comments in the code base show that there is a flaw in how the code works that is why it was left. Flawed code means that the code can be improved upon as it fails to be self-explanatory. Worse than reading complicated code is, reading a comment on how it works and then finding out that the code does something else. This is specially true when the code changes and the comment stays.&lt;/p&gt;

&lt;p&gt;The more accepted and encouraged practice is to use docstrings. They should be added in the code-base wherever possible. &lt;/p&gt;

&lt;p&gt;Lets look at an example of a docstring in action.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class User:
    """
    A class to represent a User.

    ...

    Attributes
    ----------
    username : str
        username of the user
    email: str
        email of the user

    """

    def __init__(self, username, email):
        """
        Initializes the attributes for the User object.

        Parameters
        ----------
            username: str
                username of the user
            email: str
                email of the user
        """

        self.username = username
        self.email = email
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, we have defined a simple class for a User Type with only 2 attributes and no methods. The multiline strings serve as documentation for the User Type and are placed right below a class method, or a function. The documentation can be accessed either with the &lt;em&gt;help&lt;/em&gt; command or &lt;em&gt;&lt;strong&gt;doc&lt;/strong&gt;&lt;/em&gt; command like so.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; help(User)
class User(builtins.object)
 |  User(username, email)
 |
 |  A class to represent a User.
 |
 |  ...
 |
 |  Attributes
 |  ----------
 |  username : str
 |      username of the user
 |  email: str
 |      email of the user
 |
 |  Methods defined here:
 |
 |  __init__(self, username, email)
 |      Initializes the attributes for the User object.
 |
 |      Parameters
 |      ----------
 |          username: str
 |              username of the user
 |          email: str
 |              email of the user
 |
 |  ----------------------------------------------------------------------
&amp;gt;&amp;gt;&amp;gt; User.__doc__
A class to represent a User.
  ...

  Attributes
  ----------
  username : str
      username of the user
  email: str
      email of the user
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As seen in the above examples, both methods display the documentation for the User Type with the help function providing more details. So the next time, the code is changed don't forget to change the documentation as well. Think of your future self or the next developer who will work on the code-base.&lt;/p&gt;

&lt;p&gt;In the next article, we will talk about Annotations in Python. In the meantime, Happy Documenting!&lt;/p&gt;

</description>
      <category>python</category>
      <category>documentation</category>
    </item>
  </channel>
</rss>
