<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Git Merge: The Final Guide</title>
      <author>ZigRazor</author>
      <pubDate>Sat, 28 Aug 2021 11:08:43 +0000</pubDate>
      <link>https://dev.to/zigrazor/git-merge-the-final-guide-ldn</link>
      <guid>https://dev.to/zigrazor/git-merge-the-final-guide-ldn</guid>
      <description>&lt;h2&gt;
  &lt;a href="#merging"&gt;
  &lt;/a&gt;
  Merging
&lt;/h2&gt;

&lt;p&gt;Having multiple branches is extremely convenient to keep new changes separated from each other, and to make sure you don't accidentally push unapproved or broken changes to production. Once the changes have been approved, we want to get these changes in our &lt;em&gt;main&lt;/em&gt; branch!&lt;/p&gt;

&lt;p&gt;One way to get the changes from one branch to another is by performing a &lt;code&gt;git merge&lt;/code&gt;! There are two types of merges &lt;em&gt;Git&lt;/em&gt; can perform: a &lt;strong&gt;fast-forward&lt;/strong&gt;, or a &lt;strong&gt;no-fast-forward&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fastforward"&gt;
  &lt;/a&gt;
  Fast-forward
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git merge --ff 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A &lt;strong&gt;fast-forward&lt;/strong&gt; merge can happen when the current branch has no extra commits compared to the branch we’re merging. Git is... lazy and will first try to perform the easiest option: the fast-forward! This type of merge doesn’t create a new commit, but rather merges the commit(s) on the branch we’re merging right in the current branch &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nofastfoward"&gt;
  &lt;/a&gt;
  No-fast-foward
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git merge --no-ff 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Not ever your current branch doesn't have any extra commits compared to the branch that you want to merge. If we committed changes on the current branch that the branch we want to merge doesn't have, git will perform a &lt;strong&gt;no-fast-forward&lt;/strong&gt; merge.&lt;/p&gt;

&lt;p&gt;With a &lt;strong&gt;no-fast-forward&lt;/strong&gt; merge, Git creates a new merging commit on the active branch. The commit's parent commits point to both the active branch and the branch that we want to merge!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#merge-conflicts"&gt;
  &lt;/a&gt;
  Merge Conflicts
&lt;/h3&gt;

&lt;p&gt;Although &lt;em&gt;Git&lt;/em&gt; is good at deciding how to merge branches and add changes to files, it cannot always make this decision all by itself. This can happen when the two branches we're trying to merge have changes on the same line in the same file, or if one branch deleted a file that another branch modified, and so on.&lt;/p&gt;

&lt;p&gt;In that case, &lt;em&gt;Git&lt;/em&gt; will ask you to help decide which of the two options we want to keep! Let's say that on both branches, we edited the nineth line of &lt;em&gt;file.txt&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;If we want to merge &lt;em&gt;dev&lt;/em&gt; into &lt;em&gt;master&lt;/em&gt;, this will end up in a merge conflict: which is the correct line? Git can't knows this.&lt;/p&gt;

&lt;p&gt;When trying to merge the branches, &lt;em&gt;Git&lt;/em&gt; will show you where the conflict happens. We can manually remove the changes we don't want to keep, save the changes, add the changed file again, and commit the changes.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>git</category>
      <category>codenewbie</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Github 101</title>
      <author>rkganeshan</author>
      <pubDate>Sat, 28 Aug 2021 10:13:17 +0000</pubDate>
      <link>https://dev.to/rkganeshan/github-101-hda</link>
      <guid>https://dev.to/rkganeshan/github-101-hda</guid>
      <description>&lt;p&gt;Hey, if you are absolute beginner or just started to code recently, and have seen your peers showcasing their projects and works in platforms like GitHub, then you are at the right spot!&lt;/p&gt;

&lt;p&gt;I'll let you know some quick easy peasy tools online where in you can code and "PUSH" your code to github by just a click.&lt;br&gt;
Also, I will let you know how to push your entire codebase from your system to GitHub.&lt;/p&gt;

&lt;p&gt;(Now here I am assuming that you have created an account on GitHub, if not - do it first, it's simple , create an account directly from your Google Account.)&lt;/p&gt;

&lt;p&gt;01 ) If you are quite new to web dev and just trying your hands on experimenting a few stuffs here and there, then try using platforms such as CodeSandbox and Repl.&lt;br&gt;
All you need to is , go to the github icon, connect your sandbox to your github by providing your credentials and after authorization(this is just a one time step) you just need to type out your repository name, a few words about your project and hit the Create button. Similar steps for Repl too. Isn't that easy?&lt;br&gt;
Now you are all set to show case your project.&lt;br&gt;
Bonus here is: You can copy the URL from the output sample browser in your sandbox, go to your Github repo, and in the about section,paste this link under the wesite input field.&lt;br&gt;
So, now your work is all set, pushed into github and your peers can also directly view your project up and running from the URL that you had provided from the Sandbox!&lt;/p&gt;

&lt;p&gt;02) If you want to push your project from your System to Github, download GitBash terminal, it helps you to do this in no time.&lt;br&gt;
Now follow the steps:&lt;br&gt;
Step 0: Open the GitBash terminal in the directory wherein your desired project folder(s) exists.&lt;br&gt;
Now type the following commands.&lt;br&gt;
Step 01:git init&lt;br&gt;
Step 02:git add   &lt;br&gt;
Step 03:git commit -m "Your message about the commit"&lt;br&gt;
(Now go to GitHub, under repositories create a new Repo by hitting the New button and provide the name of your repository and give some description about it, and you may also set you repo to private or public)&lt;br&gt;
Step 04:git remote add origin &lt;a href="https://github.com/yourUsername/yourRepository.git"&gt;https://github.com/yourUsername/yourRepository.git&lt;/a&gt;&lt;br&gt;
Step 05:git push -u origin master&lt;br&gt;
Step 06:git push origin master&lt;br&gt;
That's it, now you can check your repo(give a refresh maybe), and in the master branch you would be able to see the changes.&lt;br&gt;
Similar to 01) if you want to host it live, we'll that's for some other day , for sure!&lt;/p&gt;

</description>
      <category>github</category>
      <category>beginners</category>
      <category>opensource</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How different is CommonJs require from ES6 import?</title>
      <author>Mike Mwanje</author>
      <pubDate>Sat, 28 Aug 2021 09:28:36 +0000</pubDate>
      <link>https://dev.to/mwanjemike/how-different-is-commonjs-require-from-es6-import-hh1</link>
      <guid>https://dev.to/mwanjemike/how-different-is-commonjs-require-from-es6-import-hh1</guid>
      <description>&lt;p&gt;In JavaScript, you can use either ECMAScript 6(ES6) modules or CommonJs modules in your project and there are a few differences between these that do affect how your program modules are loaded. In this article, I explore how each works and how it may affect your program execution.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#commonjs-modules"&gt;
  &lt;/a&gt;
  CommonJs modules.
&lt;/h3&gt;

&lt;p&gt;CommonJs is the original and default module system of Node.js which uses require and module.exports. Below is an example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Importing modules&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fileDelete&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./fileDeleter&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fileName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./fileNamer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;writeFile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Exporting writeFile module&lt;/span&gt;
&lt;span class="nx"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;writeFile&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With require, you can’t selectively load only the modules you need. This means even the fileDelete module from the example above will be imported even if it is not needed or used anywhere. Additionally, importing of the modules is synchronous which means that fileName module can’t be imported before fs and fileDelete modules are imported, and a failure to import fileDelete will cause run-time errors even if it is not used anywhere in our program. CommonJS modules are the choice for the node.js server.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ecmascript-modules"&gt;
  &lt;/a&gt;
  ECMAScript modules
&lt;/h3&gt;

&lt;p&gt;ECMAScript modules are relatively newer and use import and export. Below is the transformation of our CommonJs example from above to ESM.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Importing modules&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;fileDelete&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./fileDeleter&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;fileName&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./fileNamer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;writeFile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Exporting writeFile module&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;writeFile&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With import, you load only the modules you need. For example, the fileDelete module from the above will not be imported since it is not used anywhere. Additionally, the importing of the modules is asynchronous which means that both fs and fileName are imported at the same time. You generally want to use ESM for your new projects.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;…how about .cjs and .mjs?&lt;/strong&gt;&lt;br&gt;
.cjs is a file extension for CommonJS modules while .mjs is a file extension for ECMAScript module. Node.js by default treats .js files as CommonJS modules. You can change this by adding "type": "module"to your package.json file so you can use ECMAScript modules (in your .mjs files) within a Node.js environment. This is what Google Chrome &lt;a href="https://v8.dev/"&gt;V8&lt;/a&gt; recommends.&lt;/p&gt;

&lt;p&gt;I hope this was helpful to you and for further reading, do checkout &lt;a href="https://v8.dev/features/modules"&gt;JavaScript modules&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Happy coding!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>es6modules</category>
      <category>commonjs</category>
    </item>
    <item>
      <title>C# For Beginners - Lesson 10: Methods</title>
      <author>Kristina (Coding Mama)</author>
      <pubDate>Sat, 28 Aug 2021 09:18:15 +0000</pubDate>
      <link>https://dev.to/coding_mama/c-for-beginners-lesson-10-methods-3e01</link>
      <guid>https://dev.to/coding_mama/c-for-beginners-lesson-10-methods-3e01</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;At the end of this lesson, you should be able to answer the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is a method? What is it used for?&lt;/li&gt;
&lt;li&gt;How do I declare a method? How do I call it?&lt;/li&gt;
&lt;li&gt;What is a method parameter?&lt;/li&gt;
&lt;li&gt;What is a return statement?&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;p&gt;In our final lesson, we will learn about methods, C#'s equivalent to functions or subroutines in other programming languages.&lt;/p&gt;

&lt;p&gt;As our programs get bigger and more complex, we can organise our code into more manageable chunks by grouping related statements together. A &lt;em&gt;method&lt;/em&gt; is a group of statements that can be called to perform a single task.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#method-declaration-and-invocation"&gt;
  &lt;/a&gt;
  Method declaration and invocation
&lt;/h3&gt;

&lt;p&gt;Let's go back to our very first program, Hello World. Instead of just printing the message, perhaps we want to make it fancier by adding an &lt;a href="https://www.asciiart.eu/art-and-design/patterns"&gt;ASCII art border&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Below we've used a &lt;a href="https://dev.to/coding_mama/c-for-beginners-lesson-8-loops-3mf0"&gt;for loop&lt;/a&gt; to make a string that repeats &lt;code&gt;+-&lt;/code&gt; 20 times. We then use this string as our border.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Creates a border like this: +-+-+-+-+-+-&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;border&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;++)&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;border&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;"+-"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Prints the message with the border&lt;/span&gt;
&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;border&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, World!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;border&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Suppose we wanted to display this message at various times in our program. To do that, we would have to keep repeating these lines. A better way would be to group them first into a method called &lt;code&gt;ShowMessage&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;ShowMessage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ...steps go here!&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To declare a method in C#, we specify the method's &lt;em&gt;return type&lt;/em&gt;, followed by the name of the method, and round brackets. The curly brackets contains the method's body - the statements that we want to run when the method is called. We'll explain return type later in this lesson.&lt;/p&gt;

&lt;p&gt;Once the method is declared, we can call &lt;code&gt;ShowMessage&lt;/code&gt; every time we want to display the message.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Displays the message twice&lt;/span&gt;
&lt;span class="nf"&gt;ShowMessage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nf"&gt;ShowMessage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To call or &lt;em&gt;invoke&lt;/em&gt; a method in C#, we use the name of the method followed by round brackets. A method call by itself is a valid statement.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kspIB2Q5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8rsi6mnpg3wb769bpvr5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kspIB2Q5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8rsi6mnpg3wb769bpvr5.png" alt="Methods calls are valid statements"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#method-parameters-and-arguments"&gt;
  &lt;/a&gt;
  Method parameters and arguments
&lt;/h3&gt;

&lt;p&gt;Suppose we wanted to display a different message, but we still want a fancy border. We can't use &lt;code&gt;ShowMessage&lt;/code&gt; because it would say "Hello, World!". But the steps are pretty much the same, so can we reuse it somehow?&lt;/p&gt;

&lt;p&gt;Instead of duplicating then varying it slightly, we could make our method more generic by adding &lt;em&gt;parameters&lt;/em&gt;. A method parameter is a variable that can be used in the method to alter its behaviour. &lt;/p&gt;

&lt;p&gt;In our method declaration, we put parameters in the round brackets. First, we specify the type of the parameter, then the name of the parameter. It's similar to how we declare a variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;ShowMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Creates a border like this: +-+-+-+-+-+-&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;border&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;++)&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;border&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;"+-"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// Prints the message with the border&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;border&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    &lt;span class="c1"&gt;// The parameter is used here!&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;border&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we call a method, we can supply values (also called &lt;em&gt;arguments&lt;/em&gt;) inside the round brackets. If a parameter is defined for that method, that argument gets passed in as the value of the parameter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Display a different message&lt;/span&gt;
&lt;span class="nf"&gt;ShowMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Greetings, human!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Display another message&lt;/span&gt;
&lt;span class="nf"&gt;ShowMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"こんにちは、世界！"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JPa8XHTF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5zn57pn77dtzwei7om0o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JPa8XHTF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5zn57pn77dtzwei7om0o.png" alt="Passing arguments to methods"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;We can have more than one parameter in a method. For example, we could change the border by supplying the pattern to repeat. Below, we have added a &lt;code&gt;string&lt;/code&gt; parameter called &lt;code&gt;borderPattern&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;ShowMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;borderPattern&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Creates a border&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;border&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;++)&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;border&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;borderPattern&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;// borderPattern is used here!&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// Prints the message with the border&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;border&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    &lt;span class="c1"&gt;// message is used here!&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;border&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Call the ShowMessage method&lt;/span&gt;
&lt;span class="nf"&gt;ShowMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hey, you. You're finally awake."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"-&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we call &lt;code&gt;ShowMessage&lt;/code&gt; with multiple arguments, the order matters. For example, if we do this, can you guess what will happen?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="nf"&gt;ShowMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"-&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Hey, you. You're finally awake."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0excHw4v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0tla085y1bkmqis7ac5d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0excHw4v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0tla085y1bkmqis7ac5d.png" alt="Not the output we wanted!"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The order of the arguments need to match the parameter order!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#named-arguments"&gt;
  &lt;/a&gt;
  Named arguments
&lt;/h3&gt;

&lt;p&gt;If a method accepts many parameters, it can be hard to keep track of the order. Fortunately, C# allows us to name the arguments as we pass them in the method. Replace Line 17 of the previous program with the line below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="nf"&gt;ShowMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;borderPattern&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"-&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Hey, you. You're finally awake."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Even though we supplied the border pattern first, C# knows to assign this value to the &lt;code&gt;borderPattern&lt;/code&gt; parameter.  The same goes with the &lt;code&gt;message&lt;/code&gt; parameter.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--te3ujgz_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yy36idr99emrh4zd3o2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--te3ujgz_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yy36idr99emrh4zd3o2.png" alt="Using named parameters"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#optional-parameters"&gt;
  &lt;/a&gt;
  Optional parameters
&lt;/h3&gt;

&lt;p&gt;We've made our method more flexible. However, when we invoke the &lt;code&gt;ShowMessage&lt;/code&gt; method, we can no longer just supply a message - we will need to include the border pattern as well.&lt;/p&gt;

&lt;p&gt;If we don't supply a border pattern, we want the method to default to our original pattern. To do this, in our parameter declaration we need to assign a value to the parameter. Add &lt;code&gt;= "+-"&lt;/code&gt; next to the &lt;code&gt;borderPattern&lt;/code&gt; parameter in the declaration, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;ShowMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;borderPattern&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"+-"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="c1"&gt;// Call the ShowMessage method&lt;/span&gt;
&lt;span class="nf"&gt;ShowMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hey, you. You're finally awake."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can call &lt;code&gt;ShowMessage&lt;/code&gt; again with just the message!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#method-return-type"&gt;
  &lt;/a&gt;
  Method return type
&lt;/h3&gt;

&lt;p&gt;Aside from performing a task, methods can also return a value after the task has been completed. Our method &lt;code&gt;ShowMessage&lt;/code&gt; displays a message for us, but it doesn't really return a value we can use. That's why its return type is &lt;code&gt;void&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;Double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above is an example method that returns a value. Can you guess what the method does?&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Double&lt;/code&gt; method takes a number of type &lt;code&gt;int&lt;/code&gt; and returns the number multiplied by 2, effectively doubling it. The value that is returned is of type &lt;code&gt;int&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;We use the &lt;code&gt;return&lt;/code&gt; keyword to specify the value that is returned by the method. If the method return type is not &lt;code&gt;void&lt;/code&gt;, the &lt;code&gt;return&lt;/code&gt; statement is &lt;strong&gt;required&lt;/strong&gt; to be present in the method's body.&lt;/p&gt;

&lt;p&gt;We can add more statements before the &lt;code&gt;return&lt;/code&gt; statement if needed, and they will be executed before the method finishes and returns the expression &lt;code&gt;number * 2&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;When the method has either returned a value or reached the end of its body, program execution will go back to the statement that called the method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;Double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Calling the method Double"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;Double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;50&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"And we're back here!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0AA5TDHF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vvinkn1wpudny9oorihu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0AA5TDHF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vvinkn1wpudny9oorihu.png" alt="Returning a value from a method"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Methods with a return value can be used in expressions, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;expr&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;Double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="nf"&gt;Double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Prints 24&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Questions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;True or False:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;To declare a method, we specify the return type and method name, followed by square brackets.&lt;/li&gt;
&lt;li&gt;The order of the arguments passed in a method must match the order of the parameters.&lt;/li&gt;
&lt;li&gt;To make a parameter optional, we mark it with the keyword &lt;code&gt;optional&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;void&lt;/code&gt; method cannot be used in expressions.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Console.WriteLine()&lt;/code&gt; is a method.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Question&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You are a human compiler. Can you find all the errors in this code?&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Adding {x} and {y}"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;75&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;25&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Question&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What is the difference between a method parameter and a method argument?&lt;/p&gt;
&lt;/blockquote&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Challenges&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a &lt;code&gt;Multiply&lt;/code&gt; method similar to the &lt;code&gt;Double&lt;/code&gt; method in the lesson. Calling &lt;code&gt;Multiply(10,12)&lt;/code&gt; should return &lt;code&gt;120&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Convert the code in &lt;a href="https://dev.to/coding_mama/c-for-beginners-lesson-7-conditionals-2e07"&gt;Lesson 7&lt;/a&gt; into a method called &lt;code&gt;IsAllowedToDrive&lt;/code&gt;. The method should have two parameters, &lt;code&gt;age&lt;/code&gt; and &lt;code&gt;hasLicence&lt;/code&gt; . The return type should be &lt;code&gt;bool&lt;/code&gt;. &lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

</description>
      <category>csharp</category>
      <category>dotnet</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Multiplayer Connect Four Game. (Board Game) (WebSocket)</title>
      <author>FRADAR</author>
      <pubDate>Sat, 28 Aug 2021 08:38:39 +0000</pubDate>
      <link>https://dev.to/fradar/multiplayer-connect-four-game-board-game-websocket-30ig</link>
      <guid>https://dev.to/fradar/multiplayer-connect-four-game-board-game-websocket-30ig</guid>
      <description>&lt;p&gt;A friendly game of Connect 4 that lets you play with someone else looking at the pen! It automatically queues people into the next available game or creates a new one. The game server is built on node.js and running on a Heroku instance.&lt;/p&gt;

&lt;p&gt;This game also has a chat feature, where you can talk to your opponent.&lt;/p&gt;

&lt;p&gt;Play it with your friends here! :&lt;br&gt;
&lt;a href="https://codepen.io/FRADAR/full/xxrGdRv"&gt;https://codepen.io/FRADAR/full/xxrGdRv&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Like my games? Follow me here:&lt;br&gt;
&lt;a href="https://codepen.io/FRADAR"&gt;https://codepen.io/FRADAR&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See Ya!&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>challenge</category>
      <category>javascript</category>
      <category>gamedev</category>
    </item>
    <item>
      <title>No More React Context Hell</title>
      <author>Denis Maushov</author>
      <pubDate>Sat, 28 Aug 2021 07:59:58 +0000</pubDate>
      <link>https://dev.to/hyposlasher/no-more-react-context-hell-4pm3</link>
      <guid>https://dev.to/hyposlasher/no-more-react-context-hell-4pm3</guid>
      <description>&lt;p&gt;If you always wanted it to look like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Providers&lt;/span&gt; &lt;span class="nx"&gt;providers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{[&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;FooContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;BarContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;BazContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;baz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Providers&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;,
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;here is your Providers Component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Providers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;renderProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;provider&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;restProviders&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;provider&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cloneElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;provider&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;renderProvider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;restProviders&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;renderProvider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Enjoy!&lt;/p&gt;

&lt;p&gt;Like, share and etc&lt;/p&gt;

</description>
      <category>react</category>
      <category>context</category>
      <category>provider</category>
      <category>hell</category>
    </item>
    <item>
      <title>Step by Step Guide to NFTS creation and sale for beginners using OpenSea</title>
      <author>Victor Quan Lam</author>
      <pubDate>Sat, 28 Aug 2021 07:10:41 +0000</pubDate>
      <link>https://dev.to/victorquanlam/step-by-step-guide-to-nfts-creation-and-sale-for-beginners-using-opensea-4dm6</link>
      <guid>https://dev.to/victorquanlam/step-by-step-guide-to-nfts-creation-and-sale-for-beginners-using-opensea-4dm6</guid>
      <description>&lt;p&gt;&lt;a href="https://opensea.io/"&gt;https://opensea.io/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first thing you may do is to pay for a "mint" platform (i.e. create) an NFT. You have to construct a digital wallet and buy any currency for this reason.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to construct a digital wallet to purchase NFTs?&lt;/strong&gt;&lt;br&gt;
You have to put money into a digital wallet from which you can spend before you start.&lt;br&gt;
OpenSea employs ether, a cryptocurrency that you will have to purchase. Consider it as an arcade. You walk in and want to play games. But you have to buy some tokens before you play the games. Here is the same principle, except the tokens are called ether and you are presumably starting small, with fractions of ether, instead of buying a lot of tokens. &lt;br&gt;
All right, so back to the digital wallet. OpenSea proposes utilizing a Chrome browser plug-in known as MetaMask but supports many alternative digital wallets.&lt;br&gt;
It took approximately 30 seconds to install the plug-in and enter a password. Now, let's do that.&lt;br&gt;
Tap the Profile icon on the website upper right.&lt;br&gt;
• Click on the "Get " button.&lt;br&gt;
• Choose "Install MetaMask" for Chrome or your favourite compatible browser. This installs a plug-in for Chrome.&lt;br&gt;
• Select "Get Started." &lt;br&gt;
• Choose "Create Wallet."&lt;br&gt;
• Select "No thanks" for feedback sharing.&lt;br&gt;
• Create a password.&lt;br&gt;
• Write down the secret sentence you are given. This is extremely crucial and your backup for accessing your account. Don't lose it. Don't lose it.&lt;br&gt;
• Tap "Next" and confirm the confidential sentence.&lt;br&gt;
• To connect your account to the digital wallet, click "Next."&lt;br&gt;
• Click again on "Connect."&lt;br&gt;
Okay, you have an OpenSea digital wallet now. You now have to acquire a certain ether that you can spend on NFTs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to buy ether&lt;/strong&gt;&lt;br&gt;
You may use a range of applications to purchase cryptocurrency. Coinbase is popular. Robinhood is like that.&lt;br&gt;
Tap the symbol on the top right of Chrome at the end of your URL box.&lt;br&gt;
• Click on the icon.&lt;br&gt;
• Click on "Buy." If you have any in another account, click "Directly Deposit Ether."&lt;br&gt;
• Click "Follow Wyre."&lt;br&gt;
• Select the amount of ether you want to buy. Get used to these fees; when you buy something, there are more.&lt;br&gt;
• Click on the "Next" button.&lt;br&gt;
• Enter your payment and telephone number.&lt;br&gt;
• Tap "Send."&lt;br&gt;
• Enter your phone's payment authentication code.&lt;br&gt;
Authorize your purchase by typing in your bank account a six-digit number for an outstanding Wyre transaction.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to create and sell NFTs&lt;/strong&gt;&lt;br&gt;
You have some cool digital art, or you’re ready to sell. &lt;br&gt;
• Go to any site and tap on the top right on the "Create" button.&lt;br&gt;
• Create one or more collections— the latter for a collection, for instance, of images or cards that you have prepared.&lt;br&gt;
• To upload a PNG, GIF, MP3 or another form of a file, select "Choose File." The maximum capacity is 30MB.&lt;br&gt;
• Enter the price you want, or leave "place on sale." If it's ever sold. It seems sensible. It seems logical.&lt;br&gt;
• Enter your NFT name and description.&lt;br&gt;
• Set royalties. You will still be paid if it is sold on the secondary market. This is based on the present selling price.&lt;br&gt;
• Choose "Connect and create a wallet."&lt;br&gt;
• Connect your wallet.&lt;br&gt;
• Pay the "Gas" cost for listing processing.&lt;br&gt;
• To sign a sales order using your digital wallet, click "Start."&lt;br&gt;
• Click "Sign".&lt;br&gt;
That's it! It's listed now Offers will be displayed on the sales page. If the monies are ever sold, they will be transferred to my digital wallet. I may then use them to purchase more NFTs or cash in an app like Coinbase.&lt;/p&gt;

&lt;p&gt;OpenSea employs NFTS creation and sale, a cryptocurrency that you will have to purchase. You must construct a digital wallet from which you can spend NFTs before you can access the platform. The best place to start is with a Chrome browser plug-in called MetaMask. What does it take to create and sell an online art collection? You will still be paid if it is sold on the secondary market, based on the price you paid for it in the primary market.&lt;/p&gt;

</description>
      <category>nfts</category>
      <category>blockchain</category>
      <category>bitcoin</category>
    </item>
    <item>
      <title>Git CheatSheet</title>
      <author>TaheraFirdose</author>
      <pubDate>Sat, 28 Aug 2021 07:07:18 +0000</pubDate>
      <link>https://dev.to/taherafirdose/git-cheatsheet-for-testers-11c0</link>
      <guid>https://dev.to/taherafirdose/git-cheatsheet-for-testers-11c0</guid>
      <description>&lt;p&gt;This guide includes an introduction on Git, a definition of terms, and lists of commonly used Git commands. If you're having trouble getting started with Git, or if you're an experienced tester looking for a refresher, this cheat sheet can help.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-git"&gt;
  &lt;/a&gt;
  What is GIT
&lt;/h1&gt;

&lt;p&gt;Git is a free, open source distributed version control system tool designed to handle everything from small to very large projects with speed and efficiency. It was created by Linus Torvalds in 2005 to develop Linux Kernel. Git has the functionality, performance, security and flexibility that most teams and individual developers and testers need. It also serves as an important distributed version-control DevOps tool. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#git-terminologies"&gt;
  &lt;/a&gt;
  Git Terminologies:
&lt;/h1&gt;

&lt;p&gt;Repositories&lt;br&gt;
Repositories can be compared to folders on your computer. A Github repository contains all of the project's files, including the documentation and all revisions. It is the most basic element of &lt;br&gt;
Github.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#branch"&gt;
  &lt;/a&gt;
  Branch:
&lt;/h3&gt;

&lt;p&gt;Branch is a version of the repository that diverges from the main working project. It is an essential feature available in most modern version control systems. A Git project can have more than one branch. We can perform many operations on Git branch-like rename, list, delete, etc&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#remote"&gt;
  &lt;/a&gt;
  Remote:
&lt;/h3&gt;

&lt;p&gt;Remote is the term used to refer to the repository hosted in Github. A company's local Git repository hosted in Github or any other Git host platform for sharing and collaboration is generally called Remote repository.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#master"&gt;
  &lt;/a&gt;
  Master
&lt;/h3&gt;

&lt;p&gt;The master is the primary branch of all your repositories. It should include the most recent changes and commits.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#checkout"&gt;
  &lt;/a&gt;
  Checkout
&lt;/h3&gt;

&lt;p&gt;Use the git checkout command to switch between branches. Just enter git checkout followed by the name of the branch you wish to move to, or enter git checkout master to return to the master branch.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#commit"&gt;
  &lt;/a&gt;
  Commit
&lt;/h3&gt;

&lt;p&gt;Commit is one the most frequently used feature of Git, it’s like saving the updated file to its original folder and overwrite on already existing.A commit is a collection of content, a message about how you got there, and the commits that came before it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fetch"&gt;
  &lt;/a&gt;
  Fetch
&lt;/h3&gt;

&lt;p&gt;Fetching refers to getting the latest changes from an online repository (like GitHub.com) without merging them in. Once these changes are fetched you can compare them to your local branches (the code residing on your local machine).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fork"&gt;
  &lt;/a&gt;
  Fork
&lt;/h3&gt;

&lt;p&gt;A 'fork' is a personal copy of another user's repository on your GitHub account. Forks allow you to freely modify a project without affecting the original, providing limitless opportunities for experimentation and learning from the work of others.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#head"&gt;
  &lt;/a&gt;
  Head
&lt;/h3&gt;

&lt;p&gt;A HEAD is a snapshot of the most recent commit on each branch. On each branch, it is a short name or a pointer reference to a SHA-1 of a commit ID.A HEAD always points to the branch's most recent commit (code) and moves forward with each commit to point to the most recent commit ID.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#index"&gt;
  &lt;/a&gt;
  Index
&lt;/h3&gt;

&lt;p&gt;When you add, delete, or modify a file, it is retained in the index until you are ready to commit the changes. Think of it as Git's staging area. To view the contents of your index, use the git status command. Changes highlighted in green are ready to commit, while those highlighted in red must still be added to staging.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stash"&gt;
  &lt;/a&gt;
  Stash
&lt;/h3&gt;

&lt;p&gt;Git stash removes changes from your index and "stashes" them for later use. It's useful if you want to put something on hold and work on something else for a while. You can only stash one set of changes at a time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tags"&gt;
  &lt;/a&gt;
  Tags
&lt;/h3&gt;

&lt;p&gt;Tags provide a way to keep track of important commits. Lightweight tags simply serve as pointers while annotated tags get stored as full objects.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#upstream"&gt;
  &lt;/a&gt;
  Upstream
&lt;/h3&gt;

&lt;p&gt;In the context of Git, upstream refers to where you push your changes, which is typically the master branch.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#merge"&gt;
  &lt;/a&gt;
  Merge
&lt;/h3&gt;

&lt;p&gt;To add changes from one branch to another, use the git merge command in conjunction with pull requests.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#origin"&gt;
  &lt;/a&gt;
  Origin
&lt;/h3&gt;

&lt;p&gt;The default version of a repository is referred to as the origin. Origin can also be used as a system alias to communicate with the master branch. To push local changes to the master branch, use the command git push origin master.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pull"&gt;
  &lt;/a&gt;
  Pull
&lt;/h3&gt;

&lt;p&gt;Pull requests represent suggestions for changes to the master branch. If you're working with a team, you can create pull requests to tell the repository maintainer to review the changes and merge them upstream. The git pull command is used to add changes to the master branch.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#push"&gt;
  &lt;/a&gt;
  Push
&lt;/h3&gt;

&lt;p&gt;Pushing refers to sending your committed changes to a remote repository such as GitHub.com. For instance, if you change something locally, you'd want to then push those changes so that others may access them&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#git-commands"&gt;
  &lt;/a&gt;
  GIT Commands
&lt;/h1&gt;

&lt;p&gt;Here are some basic GIT commands you need to know&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-setup-your-git-username"&gt;
  &lt;/a&gt;
  How to setup your Git username:
&lt;/h3&gt;

&lt;p&gt;With the command below you can configure your user name:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VyPId-B7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xxqehkh2zgws87a4idgw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VyPId-B7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xxqehkh2zgws87a4idgw.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-setup-your-git-user-email"&gt;
  &lt;/a&gt;
  How to setup your Git user email:
&lt;/h3&gt;

&lt;p&gt;This command lets you setup the user email address you'll use in your commits.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xlGvC6Bd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0zrcec3vmxyzrgacnlq7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xlGvC6Bd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0zrcec3vmxyzrgacnlq7.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-initialize-a-git-repo"&gt;
  &lt;/a&gt;
  How to Initialize a Git repo:
&lt;/h3&gt;

&lt;p&gt;Everything begins here. The first step is to create a new Git repo in your project's root directory. You can do so with the command below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fZP25MQq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7dopv8yzlxepr68k35hx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fZP25MQq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7dopv8yzlxepr68k35hx.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-clone-a-repository"&gt;
  &lt;/a&gt;
  How to clone a Repository:
&lt;/h3&gt;

&lt;p&gt;Git clone is a Git command line utility which is used to target an existing repository and create a clone, or copy of the target repository&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#cloning-to-a-specific-folder"&gt;
  &lt;/a&gt;
  Cloning to a specific folder
&lt;/h4&gt;

&lt;p&gt;Clone the repository located at ＜repo＞ into the folder called ~＜directory＞! on the local machine.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IwwApMHs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dba2w4mhqpdz5nypedw8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IwwApMHs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dba2w4mhqpdz5nypedw8.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-create-a-new-branch-in-git"&gt;
  &lt;/a&gt;
  How to Create a New Branch in Git:
&lt;/h3&gt;

&lt;p&gt;By default, there is only one branch, the main branch. You can use this command to create a new branch. Git will not switch to it automatically; you must do so manually with the following command.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#to-create-a-new-branch-use"&gt;
  &lt;/a&gt;
  To create a new branch use:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o5t9JMqk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o1u2lcimfylxe6e5lcwj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o5t9JMqk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o1u2lcimfylxe6e5lcwj.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-list-branches-in-git"&gt;
  &lt;/a&gt;
  How to List Branches in Git:
&lt;/h3&gt;

&lt;p&gt;Using the git branch command, you can see all of the branches that have been created. It will display a list of all branches, with the current branch marked with an asterisk and highlighted in green.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8Rny60GQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zmm583z1ip1cre44vpfz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8Rny60GQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zmm583z1ip1cre44vpfz.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-switch-branches-in-git"&gt;
  &lt;/a&gt;
  How to Switch Branches in Git:
&lt;/h3&gt;

&lt;p&gt;When you create a new branch, Git will automatically switch to it.&lt;br&gt;
If you have multiple branches, you can easily switch between them by running git checkout:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jXOIVHfZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cdw9neczu5lasm45zlum.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jXOIVHfZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cdw9neczu5lasm45zlum.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-delete-a-branch-in-git"&gt;
  &lt;/a&gt;
  How to delete a branch in Git:
&lt;/h3&gt;

&lt;p&gt;You can delete the branch using below command&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xj0fsr0c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ymcyb4g6v6z4jt69kleq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xj0fsr0c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ymcyb4g6v6z4jt69kleq.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-add-a-file-to-the-staging-area-in-git"&gt;
  &lt;/a&gt;
  How to add a file to the staging area in Git:
&lt;/h3&gt;

&lt;p&gt;The command below will add a file to the staging area. Simply replace filename here with the name of the file you want to include in the staging area.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q3hkKIw3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i0wr8531ndth20apihfi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q3hkKIw3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i0wr8531ndth20apihfi.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-add-all-files-in-the-staging-area-in-git"&gt;
  &lt;/a&gt;
  How to add all files in the staging area in Git:
&lt;/h3&gt;

&lt;p&gt;You can use a wildcard to add all files in your project to the staging area.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NjfHiMH4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j8jr6ydusb0p8u4s43m1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NjfHiMH4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j8jr6ydusb0p8u4s43m1.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-add-only-certain-files-to-the-staging-area-in-git"&gt;
  &lt;/a&gt;
  How to add only certain files to the staging area in Git:
&lt;/h3&gt;

&lt;p&gt;You can add all files beginning with 'str' to the staging area by using the command below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xJuu2-cR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xbfekf0gy5csuhsamzgk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xJuu2-cR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xbfekf0gy5csuhsamzgk.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-check-repositorys-status-in-git"&gt;
  &lt;/a&gt;
  How to Check repository's status in Git:
&lt;/h3&gt;

&lt;p&gt;This command displays the current repository's status, including staged, unstaged, and untracked files.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DnFqYQYs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nkapfkb9olqghk50rgpa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DnFqYQYs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nkapfkb9olqghk50rgpa.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-commit-changes-with-a-message"&gt;
  &lt;/a&gt;
  How to Commit changes with a message:
&lt;/h3&gt;

&lt;p&gt;This command allows you to specify a brief summary of your commit message.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q6sAiDot--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4wjemui8pxtjbzg5wqqe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q6sAiDot--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4wjemui8pxtjbzg5wqqe.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-commit-changes-and-skip-the-staging-area-in-git"&gt;
  &lt;/a&gt;
  How to Commit changes (and skip the staging area) in Git:
&lt;/h3&gt;

&lt;p&gt;Using the -a and -m options, you can add and commit tracked files with a single command.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--erZIG7ir--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tflvmugbcca870in7enx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--erZIG7ir--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tflvmugbcca870in7enx.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-view-your-commit-history-in-git"&gt;
  &lt;/a&gt;
  How to View your commit history in Git:
&lt;/h3&gt;

&lt;p&gt;This command displays the commit history for the current repository:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hog9-3Vy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i239opy48993hy6stnfv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hog9-3Vy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i239opy48993hy6stnfv.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-view-commit-history-including-changes-in-git"&gt;
  &lt;/a&gt;
  How to view commit history including changes in Git:
&lt;/h3&gt;

&lt;p&gt;This command displays the current repository's commit history:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j9_A2mVu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u3zv0juyei52u78r6bb3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j9_A2mVu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u3zv0juyei52u78r6bb3.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-view-log-stats-in-git"&gt;
  &lt;/a&gt;
  How to view log stats in Git:
&lt;/h3&gt;

&lt;p&gt;This command causes the Git log to display some statistics about the changes in each commit, such as the number of lines changed and file names.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GLIUA0-h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gdg9jr2glcog3oyc1vex.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GLIUA0-h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gdg9jr2glcog3oyc1vex.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-amend-the-most-recent-commit-in-git"&gt;
  &lt;/a&gt;
  How to Amend the most recent commit in Git:
&lt;/h3&gt;

&lt;p&gt;You can use git commit —amend to modify and add changes to the most recent commit.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2o_I0Wkc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zcxc6jis8dunz4lpc2ff.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2o_I0Wkc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zcxc6jis8dunz4lpc2ff.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-view-a-specific-commit-in-git"&gt;
  &lt;/a&gt;
  How to view a specific commit in Git
&lt;/h3&gt;

&lt;p&gt;Replace commit-id with the id of the commit found in the commit log.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qyq7j8B4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3rqlr7hoba014w4rg656.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qyq7j8B4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3rqlr7hoba014w4rg656.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-view-changes-made-before-committing-them-using-diff-in-git"&gt;
  &lt;/a&gt;
  How to view changes made before committing them using "diff" in Git:
&lt;/h3&gt;

&lt;p&gt;You can specify a file as a parameter to only see changes to that file. By default, git diff displays only unstaged changes.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#to-see-any-staged-changes-we-can-use-diff-with-the-staged-flag"&gt;
  &lt;/a&gt;
  To see any staged changes, we can use diff with the —staged flag.
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WTR3aEET--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ehqgrseiiq0kpedao1jt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WTR3aEET--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ehqgrseiiq0kpedao1jt.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-revert-staged-changes-in-git"&gt;
  &lt;/a&gt;
  How to revert staged changes in Git:
&lt;/h3&gt;

&lt;p&gt;If you want to remove a certain file from the stage:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--biyy1A40--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q95ptbdbj7wtc5faww94.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--biyy1A40--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q95ptbdbj7wtc5faww94.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#remove-all-staged-files"&gt;
  &lt;/a&gt;
  Remove all staged files:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dpShaezC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0vuyh9i2cqig50sr69c8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dpShaezC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0vuyh9i2cqig50sr69c8.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-rename-files-in-git"&gt;
  &lt;/a&gt;
  How to Rename files in Git:
&lt;/h3&gt;

&lt;p&gt;This command stages the changes, then it expects a commit message.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9ZD6sRxi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5qp5svj9zuyuzvf6ogpl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9ZD6sRxi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5qp5svj9zuyuzvf6ogpl.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-push-changes-to-a-remote-repo-in-git"&gt;
  &lt;/a&gt;
  How to push changes to a remote repo in Git:
&lt;/h3&gt;

&lt;p&gt;When all of your work is complete and ready to be saved on a remote repository, use the commands below to push all changes:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#first-push"&gt;
  &lt;/a&gt;
  First Push
&lt;/h4&gt;

&lt;p&gt;Push a local branch for the first time:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5oOnQacf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jal86r9cs86jvs0oc4fn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5oOnQacf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jal86r9cs86jvs0oc4fn.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#after-that-then-you-can-just-use"&gt;
  &lt;/a&gt;
  After that, then you can just use:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BzA95Wux--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p7nc8ghrjef6to3m7dd9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BzA95Wux--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p7nc8ghrjef6to3m7dd9.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#push-local-branch-to-different-remote-branch"&gt;
  &lt;/a&gt;
  Push local branch to different remote branch
&lt;/h4&gt;

&lt;p&gt;To push a local branch to a different remote branch, you can use:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zEB2Ia0e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x5x5chogvmu813tg86wv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zEB2Ia0e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x5x5chogvmu813tg86wv.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-undo-last-push"&gt;
  &lt;/a&gt;
  How to Undo Last Push
&lt;/h3&gt;

&lt;p&gt;If you have to undo your last push, you can use below command.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g3WVFm1x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/grr0f43rp5oa99kitvia.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g3WVFm1x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/grr0f43rp5oa99kitvia.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-fetch-remote-repo-changes-in-git"&gt;
  &lt;/a&gt;
  How to fetch remote repo changes in Git:
&lt;/h3&gt;

&lt;p&gt;This command will download changes from a remote repository but will not merge them into your local branch (use git pull to do that).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AT196jt6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vv6zagquwrw2hg06qdy2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AT196jt6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vv6zagquwrw2hg06qdy2.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-pull-changes-from-a-remote-repo-in-git"&gt;
  &lt;/a&gt;
  How to pull changes from a remote repo in Git:
&lt;/h3&gt;

&lt;p&gt;If other team members are working on your repository, you can use the command below to retrieve the most recent changes made to the remote repository:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fQG3YY7t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6uputg5ykeo8843y21tr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fQG3YY7t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6uputg5ykeo8843y21tr.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#if-you-have-a-branch-called-myfeature-and-you-want-to-pull-that-branch-you-can-use"&gt;
  &lt;/a&gt;
  If you have a branch called my_feature and you want to pull that branch, you can use:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mZw4CBj8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zlxktsjpxl1hay4xzh5q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mZw4CBj8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zlxktsjpxl1hay4xzh5q.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-merge-two-branches-in-git-or-rebase"&gt;
  &lt;/a&gt;
  How to merge two branches in Git or Rebase:
&lt;/h3&gt;

&lt;p&gt;When you run git merge, your HEAD branch will generate a new commit, preserving the ancestry of each commit history.&lt;br&gt;
The rebase re-writes the changes of one branch onto another without creating a new commit.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#merge-master-branch-to-feature-branch"&gt;
  &lt;/a&gt;
  Merge Master Branch to Feature Branch:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MGNOOVkS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kpyvmkrxsoprgb2kmlrn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MGNOOVkS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kpyvmkrxsoprgb2kmlrn.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#or-with-rebase-option-use-below-command"&gt;
  &lt;/a&gt;
  Or with rebase option, use below command:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vAX7ce_Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l2417c0ekg8ohsmbk8on.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vAX7ce_Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l2417c0ekg8ohsmbk8on.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#merge-feature-branch-to-master-branch"&gt;
  &lt;/a&gt;
  Merge Feature Branch to Master Branch:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q9jHuzjj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o7qd6ahnj7dxqmjlfdsg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q9jHuzjj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o7qd6ahnj7dxqmjlfdsg.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-use-git-stash"&gt;
  &lt;/a&gt;
  How to use GIT STASH:
&lt;/h3&gt;

&lt;p&gt;Git stash temporarily shelves (or stashes) changes you've made to your working copy so you can work on something else, and then come back and re-apply them later on. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#to-stash-changes-use-below-command"&gt;
  &lt;/a&gt;
  To stash changes use below command
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7hex-Z8E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ks8irhxs1nuyr5exai2l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7hex-Z8E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ks8irhxs1nuyr5exai2l.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#if-you-want-to-unstash-those-changes-and-bring-them-back-into-your-working-directory-use"&gt;
  &lt;/a&gt;
  If you want to unstash those changes and bring them back into your working directory use:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RWbmyFRc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n1u11mvsmup5h0f4ce84.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RWbmyFRc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n1u11mvsmup5h0f4ce84.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devops</category>
      <category>github</category>
      <category>automationtesting</category>
    </item>
    <item>
      <title>Click to Copy!</title>
      <author>Mohd Shahid</author>
      <pubDate>Sat, 28 Aug 2021 06:39:54 +0000</pubDate>
      <link>https://dev.to/sidmirza4/click-to-copy-81k</link>
      <guid>https://dev.to/sidmirza4/click-to-copy-81k</guid>
      <description>&lt;h3&gt;
  &lt;a href="#hey-guys"&gt;
  &lt;/a&gt;
  Hey Guys 👋
&lt;/h3&gt;

&lt;p&gt;Ever wondered how some websites have "click to copy" functionality?  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can also do just that, whether you're building an e-commerce website where you want user to click on share button to write the url of the product on their website.
&lt;/li&gt;
&lt;li&gt;or you are building some website/documentation where people can click somewhere and copy the code snippet.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this article I will explain how you can mess around with the user's clipboard 😄. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-get-started"&gt;
  &lt;/a&gt;
  Let's get started 🚀
&lt;/h2&gt;

&lt;p&gt;To explain this better, I will create a demo project. You can  follow along if you want to.  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make a folder and name it whatever you like.
&lt;/li&gt;
&lt;li&gt;In that folder make two files

&lt;ul&gt;
&lt;li&gt;1. &lt;code&gt;index.html&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;2. &lt;code&gt;app.js&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Add the following HTML code in &lt;code&gt;index.html&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Copy to Clipboard 📋&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;style&amp;gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Implementing copy to clipboard with a simple click 📋&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&amp;gt;&lt;/span&gt;Click to copy&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./app.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Now select &lt;code&gt;h2&lt;/code&gt; and &lt;code&gt;button&lt;/code&gt; element in &lt;code&gt;app.js&lt;/code&gt;:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;h2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;h2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Preview the &lt;code&gt;index.html&lt;/code&gt; in your browser.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Side note: This demo will not work in IE  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It should look something like this 👇&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wZm6KEow--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rhqcmdm6uu6um171yeyc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wZm6KEow--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rhqcmdm6uu6um171yeyc.png" alt="preview of  raw `index.html` endraw "&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;Now to alter the user's clipboard we have to use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Navigator/clipboard"&gt;Clipboard API&lt;/a&gt;.&lt;br&gt;&lt;br&gt;
The &lt;code&gt;clipboard&lt;/code&gt; object is exposed by the &lt;code&gt;navigator.clipboard&lt;/code&gt; property.  &lt;/p&gt;

&lt;p&gt;Add the following code in the &lt;code&gt;app.js&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clipboard&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;console.log(cb)&lt;/code&gt; will look something like this 👇
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w9F1U8DY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nia59dvsjbkxi19goq5u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w9F1U8DY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nia59dvsjbkxi19goq5u.png" alt="Preview of clipboard"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;👉 Remember: Clipboard API is asnychronous, means every method will return a promise which will resolve or reject.&lt;br&gt;
To consume the &lt;code&gt;promise&lt;/code&gt; we can either use &lt;code&gt;async/await&lt;/code&gt; syntax or &lt;code&gt;.then/.catch&lt;/code&gt;.  &lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#reading-text-from-clipboard"&gt;
  &lt;/a&gt;
  Reading text from clipboard 📋
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;To read the text from clipboard I will add a &lt;code&gt;click&lt;/code&gt; event listener to the &lt;code&gt;button&lt;/code&gt;:
&lt;/li&gt;
&lt;li&gt;In the event listener I will call a method called &lt;code&gt;readText()&lt;/code&gt;, which is available on the &lt;code&gt;cb&lt;/code&gt; object we accessed earlier:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readText&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// output will be whatever you last copied, &lt;/span&gt;
    &lt;span class="c1"&gt;// or empty string if the&lt;/span&gt;
    &lt;span class="c1"&gt;// copied data is not of type text.&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;To read the text from clipboard user must grant &lt;code&gt;read&lt;/code&gt; permission, otherwise the operation will fail. 👇
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ti_ryIHA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0gwby69z2pfzdaslwke7.png" alt="clipboard_permissrion"&gt;
&lt;/li&gt;
&lt;li&gt;If permission is denied 👇
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_1CxXBB1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9mjrfhwop3mwmgebgqoj.png" alt="permission_denied"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;You check if the user granted the permission or not using the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Permissions_API"&gt;Permission API&lt;/a&gt;.  &lt;/p&gt;
&lt;/blockquote&gt;


&lt;h3&gt;
  &lt;a href="#writing-text-to-clipboard"&gt;
  &lt;/a&gt;
  Writing text to clipboard 📋
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;To write the text to user's clipboard we use &lt;code&gt;writeText()&lt;/code&gt; method available on the &lt;code&gt;cb&lt;/code&gt; object.
&lt;/li&gt;
&lt;li&gt;Writing permission is given automatically by the browser.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Write the following the code in the &lt;code&gt;app.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// const text = await cb.readText();&lt;/span&gt;
  &lt;span class="c1"&gt;// console.log(text);&lt;/span&gt;

  &lt;span class="c1"&gt;// writing the inner text of the h2 element&lt;/span&gt;
  &lt;span class="c1"&gt;// to the user's clipboard.  &lt;/span&gt;
    &lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text written to clipboard&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;That's it for this article guys.  &lt;/p&gt;

&lt;p&gt;See, how easy it is you mess with the user's clipboard 😂.  &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#thanks-for-giving-it-a-read-i-hope-you-found-it-useful"&gt;
  &lt;/a&gt;
  Thanks ❤️ for giving it a read, I hope you found it useful.
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#for-concise-tips-and-tricks-please-follow-me-on-twitter"&gt;
  &lt;/a&gt;
  For concise tips and tricks, please follow me on &lt;a href="https://www.twitter.com/sidmirza4"&gt;Twitter&lt;/a&gt;
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#happy-coding"&gt;
  &lt;/a&gt;
  Happy Coding 💚
&lt;/h4&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Everything you need to know about Hackathons
</title>
      <author>Muthu Annamalai Venkatachalam</author>
      <pubDate>Sat, 28 Aug 2021 06:39:38 +0000</pubDate>
      <link>https://dev.to/muthuannamalai12/everything-you-need-to-know-about-hackathons-3fp8</link>
      <guid>https://dev.to/muthuannamalai12/everything-you-need-to-know-about-hackathons-3fp8</guid>
      <description>&lt;p&gt;As a college student, I bounce on every opportunity I can to have fun or further my career. A hackathon combines both. I’m a Computer Science major that can find it hard to code personal projects outside of class. Hackathons motivate me and give me time to explore these passions. In this article, we will take a deep dive into hackathons&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-hackathon"&gt;
  &lt;/a&gt;
  What is a Hackathon?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--unE6ePbM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625219300275/jFCH0v4jB.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--unE6ePbM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625219300275/jFCH0v4jB.jpeg" alt="Hackathons.jpeg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hackathon is a word creation of the words hack(-ing) and marathon. In this context, hacking stands for the development of software- or hardware solution and the marathon describes the format, which is a 1–3 days lasting event.&lt;br&gt;
Usually, it takes place in a spacious venue, which fits sometimes several hundred hackers.&lt;/p&gt;

&lt;p&gt;Nowadays, hackathons are taking place completely online, due to the Corona outbreak.&lt;br&gt;
The goal of a hackathon is to develop a solution for a given problem. The solution can be in different forms: it could be a pitch deck containing the concept and business model, a mockup/wireframe of an app, or functioning software or hardware prototypes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#who-can-attend-hackathons"&gt;
  &lt;/a&gt;
  Who can attend Hackathons?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K1tHMnQu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625219384645/dXoIzX5lz.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K1tHMnQu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625219384645/dXoIzX5lz.jpeg" alt="Hackathons1.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It depends on the rules and kind of hackathon but you can usually count on developers, designers, project managers, and maybe some people with experience developing hardware. Skill levels and experience also vary greatly. As a student or someone new to development, you may experience what many call "imposter syndrome" when thinking of going to a hackathon. In other words, you may believe you are too green to contribute which may lead to a bad experience and embarrassment. Don't let that worry prevent you from joining. New developers, designers, and people with less formal roles than that are always welcome&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#do-i-need-to-have-programming-experience"&gt;
  &lt;/a&gt;
  Do I need to have programming experience?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s8z04kgg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625219562706/BbZg8HQIc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s8z04kgg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625219562706/BbZg8HQIc.png" alt="Hackathons4.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;NO. You don’t. The organizers usually hold workshops throughout the hackathon for anyone who is new to programming or someone who wishes to learn more about a particular topic. Mentors are also available 24/7. So if you go to a hackathon without knowing what you want to do, that’s totally fine because you will have these mentors at your service to help and guide you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dos-amp-donts"&gt;
  &lt;/a&gt;
  Dos &amp;amp; Don’ts
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LnDfjjvd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625219500064/_O88q0Tt3.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LnDfjjvd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625219500064/_O88q0Tt3.jpeg" alt="Hackathons3.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DO pair up with people you haven’t met before&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I went with a group of My college students, but we ended up pairing with other college students, and they had a lot of insight to offer as a front-end visual designer. Plus, you make new friends that can tell you about life at their colleges!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DON’T spend the entire time in the hacking space:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You’re in a new place (most likely)! Feel free to explore campus when you get the chance and snap some pictures of the misty graveyard or gothic buildings. Many of the small meetings offered by organizers will also likely relocate somewhere outside of the hacking space.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DO accept that your stress personality will come out:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you’re doing everything right, then you’re likely nowhere near being finished with your project by the last evening of the hackathon. This is when you pull an all-nighter to get a minimum viable product out, cutting corners (or probably more than just corners) to have something to present the next morning. This puts a lot of stress on you; you can expect your stress personality to rear its ugly head, and you may scare your teammates. At least I did.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DON’T be a perfectionist:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This was my biggest mistake. The products coming out of hackathons are not by any means expected to be usable; essentially, you are rapid-prototyping a way to communicate your vision to the judges. Just that can get you a long way. In general make something generally functional, rather than perfect in some aspects and completely broken in others.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Most importantly, DO enjoy your time!:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Hackathons are meant to be a learning experience! If you didn’t have fun by the end of it, then you did it wrong. And that’s the only way to do it wrong. Now that I’ve bestowed upon you my infinite wisdom (coming from my experience at one entire hackathon, mind you), go sign up for a hackathon! I promise you that it’ll be worth your weekend.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reasons-to-attend-a-hackathon"&gt;
  &lt;/a&gt;
  Reasons To Attend a Hackathon
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1nhm9WiO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625219456711/h-0jnSAoZ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1nhm9WiO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625219456711/h-0jnSAoZ.png" alt="Hackathons2.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Showcase Your Skills:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;While hackathons are a great way for everyone to meet and collaborate with others in their field of expertise, there’s also a competitive side. Hackathons challenge attendees to exhibit their ability to innovate and create compelling, real-world solutions, utilizing the latest devices and technology. It’s also a chance to demonstrate specific skills that you aren’t able to showcase elsewhere.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Learn About Tech:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;One of the biggest benefits of attending a hackathon is learning new skills and attaining new knowledge. According to coding society Hackerstolz, you might gain more knowledge than you would in six months, due to the learning-by-doing approach employed at hackathons. You can also soak up information from fellow attendees — including ideas you may never have gained in the classroom or from a book.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Share Your Ideas:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;At its heart, a hackathon is a deeply collaborative effort. To get the most out of these events, attendees need to be willing to share their expertise with others, ensuring that everyone learns from everyone else. For example, experts in security can learn from designers about how to better implement their features, and app designers can learn how to better protect personal information. Hardware and software specialists can better learn how to work with each others’ tools — everyone learns something new.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Challenge Yourself:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It can be very easy to remain in your comfort zone, doing things you know how to do and never really challenging yourself. At hackathons, there is no such safe space. You will be constantly challenged to push yourself and move outside your comfort zone.&lt;/p&gt;

&lt;p&gt;From working as part of a team of people who you don’t know, to doing things that you never even thought you’d try, hackathons are a great way to discover new talents, passions and skills.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Collaborate Under Pressure:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It may not sound like a selling point, but experiencing the pressure of having to come together with people you don’t know and create something entirely new in a very short space of time can be hugely rewarding. You don’t simply get a sense of achievement from completing the task — you also learn how to work efficiently, how to work as a team, and how you can put your skills to work in a quick-turn environment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-to-find-a-hackathon-near-you"&gt;
  &lt;/a&gt;
  Where to find a hackathon near you?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wbye_AC9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625220073073/stgtSoOxf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wbye_AC9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625220073073/stgtSoOxf.png" alt="Hackathons5.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks to the Internet, there are various online resources available which you can use to find a hackathon in your city.&lt;br&gt;
Here’s a list:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://mlh.io/"&gt;Major League Hacking&lt;/a&gt;  — The Official Student Hackathon League&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://devpost.com/hackathons"&gt;Devpost&lt;/a&gt; — Online and In-Person hackathons.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.hackathon.io/network"&gt;Hackathon.io&lt;/a&gt; — Platform to discover, share and manage hackathons.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.hackalist.org/"&gt;Hackalist&lt;/a&gt; — Hackathons from around the world&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://hackathons.hackclub.com/"&gt;Hack Club&lt;/a&gt; — For high-school hackathons.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://hackathonsnear.me/"&gt;HackathonsNear.me&lt;/a&gt; — Hackathon listing&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;If you are a computer science student, or an upcoming developer looking for something to do this summer, a hackathon might be an alternative for you. By attending a hackathon, either physical or online, allows you to develop your coding skills, add a project to your resume, work with developers, and network with current professionals in the field of your interest. You might also win a prize, which sometimes can be in cash form. Coding challenges are another way you could use to work on your coding skills this summer. Also, you can use these challenges to prepare for technical interviews if you are searching for a job.&lt;/p&gt;

&lt;p&gt;There you have it, what is a hackathon, why you should attend one, resources you can use to find a hackathon near you. Feel free to post in the comments other resources where to find hackathons that I have missed. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can now extend your support by buying me a Coffee.😊👇&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/muthuannamalai"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for Reading 😊 &lt;/p&gt;

</description>
      <category>hackathons</category>
      <category>programming</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Create a Newsletter app with Twitter Revue, Next.js API Routes, and Tailwindcss</title>
      <author>Tapas Adhikary</author>
      <pubDate>Sat, 28 Aug 2021 06:15:10 +0000</pubDate>
      <link>https://dev.to/atapas/create-a-newsletter-app-with-twitter-revue-next-js-api-routes-and-tailwindcss-34ip</link>
      <guid>https://dev.to/atapas/create-a-newsletter-app-with-twitter-revue-next-js-api-routes-and-tailwindcss-34ip</guid>
      <description>&lt;p&gt;Hey there 👋, do you like to learn from video tutorials? This article is also available as video content.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/XbtgjxWFssQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Please feel free to &lt;a href="https://www.youtube.com/tapasadhikary"&gt;subscribe&lt;/a&gt; for the future content&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;Do you have an email newsletter, or consider starting one? An email newsletter gives your subscribers regular updates about your work, products, passion, life, journey, anything that you find suitable to share. We have some great vendors/products/sites that help us to instantly get started with an email newsletter service. Buttondown, Mailchimp, MailerLite, Substack are just a few to name here.&lt;/p&gt;

&lt;p&gt;Early this year, &lt;a href="https://blog.twitter.com/en_us/topics/company/2021/making-twitter-a-better-home-for-writers"&gt;Twitter announced&lt;/a&gt; the acquisition of &lt;a href="https://www.getrevue.co/"&gt;Revue&lt;/a&gt;, a service that makes it free and easy for anyone to start and publish editorial newsletters. Not only that. Twitter has also made Revue’s Pro features free for all accounts.&lt;/p&gt;

&lt;p&gt;A few days back, a tweet from Revue's official account confirmed that they would allow people to subscribe to your Revue newsletter directly from your Twitter profile. Keeping some debates aside, I think it is a great move.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ESISLB56--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/tweet_video_thumb/E9KYB4VXoAcHKq8.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ErZ8tVim--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1354036477915754499/zQrdrHL9_normal.jpg" alt="Revue profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Revue
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @revue
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      It’s here 🧡&lt;br&gt;&lt;br&gt;Today, we’re starting to test a feature that allows people to subscribe to your Revue newsletter directly from your Twitter profile. &lt;br&gt;&lt;br&gt;It's available to all Revue creators immediately. To start though, your newsletters will show only for a test group on Twitter. 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:00 PM - 19 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1428371221524189186" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1428371221524189186" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1428371221524189186" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;As the owner of a newsletter, we can promote it in many ways. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We can link to the &lt;a href="https://www.getrevue.co/profile/tapasadhikary"&gt;newsletter page&lt;/a&gt; from our website, blog. &lt;/li&gt;
&lt;li&gt;We can embed the subscription form to our website using simple JavaScript, HTML, CSS snippets provided by vendors. &lt;/li&gt;
&lt;li&gt;Lastly, if the newsletter vendor provides APIs to access data, we can create, manage the newsletter entirely within our control. It is a powerful usage that gives your users a feeling of &lt;code&gt;oneness&lt;/code&gt; being part of the same website, similar look-and-feel.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#so-whats-the-plan"&gt;
  &lt;/a&gt;
  So, What's the Plan?
&lt;/h1&gt;

&lt;p&gt;This tutorial will teach how to use the &lt;code&gt;Revue&lt;/code&gt; APIs to fetch data into a &lt;code&gt;Next.js&lt;/code&gt; application using the API routes(serverless functions). We will also use the &lt;code&gt;tailwindcss&lt;/code&gt; to give the app a better look and feel. &lt;/p&gt;

&lt;p&gt;I am on my way to migrate &lt;a href="https://tapasadhikary.com/"&gt;my website&lt;/a&gt; using &lt;code&gt;Next.js&lt;/code&gt; and &lt;code&gt;tailwindcss&lt;/code&gt;, and the newsletter will be a part of it. So, it is an excellent opportunity to share what I have implemented and learned.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h1&gt;

&lt;p&gt;If you want to jump into the final app or the source code early, here are the links,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://next-starter-revue-tailwind.vercel.app/"&gt;The Newsletter App Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/atapas/next-starter-revue-tailwind"&gt;The Entire Source Code on the GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=XbtgjxWFssQ"&gt;(Again) The YouTube Link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#setup-a-newsletter-service-using-revue"&gt;
  &lt;/a&gt;
  Setup a Newsletter Service using Revue
&lt;/h1&gt;

&lt;p&gt;To set up a newsletter with &lt;code&gt;Revue&lt;/code&gt;, sign up to &lt;a href="https://www.getrevue.co/"&gt;https://www.getrevue.co/&lt;/a&gt; using your Twitter account or email. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xFjvHOag--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629961288039/a9cLtdxcW.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xFjvHOag--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629961288039/a9cLtdxcW.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="Revue Sign up"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, log in to your account to set up the newsletter by providing the name, description, layout, issues, and schedule. You can &lt;a href="https://www.getrevue.co/app/integrations"&gt;integrate many services&lt;/a&gt; like Twitter, Facebook, Instagram with your Revue account to fetch content from them to add to the newsletter. Additionally, you can fetch the data using the RSS feeds. You can integrate your Hshnode or Dev blog's RSS feed as well. I've made my wish already 😆!&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--gZs-D4vf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1305109781619724288/5-e1f9SQ_normal.jpg" alt="Tapas Adhikary profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Tapas Adhikary
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @tapasadhikary
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/tanoaksam"&gt;@tanoaksam&lt;/a&gt; &lt;a href="https://twitter.com/revue"&gt;@revue&lt;/a&gt; Cool. revue sounds promising. I was looking into it too. I loved how we can integrate services like Twitter and Insta to bring the items into the newsletter..&lt;br&gt;&lt;br&gt;Food for thought: &lt;a href="https://twitter.com/hashnode"&gt;@hashnode&lt;/a&gt; integration would be so good 😀. For now, we can do with its RSS integration though.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:42 PM - 20 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1428744252532477955" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1428744252532477955" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1428744252532477955" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;The bottom of the &lt;a href="https://www.getrevue.co/app/integrations"&gt;integration page&lt;/a&gt; shows your API key to access the newsletter data over HTTP requests. Please copy this key and keep it safe.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A0fGWF7M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629961839803/kYd5WYoA7.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A0fGWF7M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629961839803/kYd5WYoA7.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="API Key"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This API key will be part of the &lt;code&gt;Authorization&lt;/code&gt; header value when using the Revue APIs. &lt;a href="https://www.getrevue.co/api#get-/v2/lists"&gt;Here is the link&lt;/a&gt; to learn about all publicly available APIs. In this tutorial, we will use the following,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;POST /v2/subscribers&lt;/code&gt;: Add a subscriber to the list.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;GET /v2/subscribers&lt;/code&gt;: Returns a list of your active subscribers.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;GET /v2/issues&lt;/code&gt;: Returns a list of your sent issues.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But, before that, let us build the user interface of the Newsletter Subscription app.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#build-a-newsletter-subscription-app-using-nextjs-and-tailwindcss"&gt;
  &lt;/a&gt;
  Build a Newsletter Subscription App using Next.js and Tailwindcss
&lt;/h1&gt;

&lt;p&gt;There are plenty of starter projects available in GitHub to get started with Next.js and Tailwindcss. My personal favorite is &lt;a href="https://github.com/taylorbryant/next-starter-tailwind"&gt;next-starter-tailwind&lt;/a&gt; because of its simplicity. I'll be using it as a template to create a repository for the newsletter subscription app. Please feel free to use any other starter project you are comfortable with.&lt;/p&gt;

&lt;p&gt;Please create a repo by clicking on the &lt;code&gt;Use this template&lt;/code&gt; button of the &lt;code&gt;next-starter-tailwind&lt;/code&gt; repository.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BHvmJx0Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629963836334/CGyvzhFNu.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BHvmJx0Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629963836334/CGyvzhFNu.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Provide required details and create a repository from the template.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DdG19dEg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629963928403/7fMP3ykgS.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DdG19dEg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629963928403/7fMP3ykgS.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now clone the repository and browse to the project folder. Open a command prompt or terminal window to install dependencies using the following command,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="c"&gt;# Or, yarn install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this stage, please open the project with your favorite code editor(VS Code, in my case) and make minor code changes. Open the &lt;code&gt;header.js&lt;/code&gt; file under the &lt;code&gt;components&lt;/code&gt; folder and find the &lt;code&gt;Next.js Starter Tailwind&lt;/code&gt; text. Change this text to &lt;code&gt;Newsletter demo powered by Next.js Revue Tailwind&lt;/code&gt;. Additionally, you can change the creator name, GitHub information in the &lt;code&gt;footer.js&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Now save your changes and use this command from your command prompt to launch the app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run dev &lt;span class="c"&gt;# Or, yarn dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Access the app using the URL &lt;code&gt;http://localhost:3000&lt;/code&gt;. You should see the initial user interface coming up.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q8Kd_Yxs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629964964534/ZAjQJYCfE.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q8Kd_Yxs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629964964534/ZAjQJYCfE.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="Initial UI"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-the-subscription-form"&gt;
  &lt;/a&gt;
  Create the Subscription Form
&lt;/h2&gt;

&lt;p&gt;Let's create a basic subscription form with a single email field and a button to subscribe. Please create a new file called &lt;code&gt;Subscribe.js&lt;/code&gt; under the &lt;code&gt;components&lt;/code&gt; folder with the following content.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Subscribe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;border border-gray-200 rounded p-6 my-4 w-full bg-gray-50&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-gray-900 mb-6 text-lg md:text-xl&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
         &lt;span class="nx"&gt;Want&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;keep&lt;/span&gt; &lt;span class="nx"&gt;your&lt;/span&gt; &lt;span class="nx"&gt;brain&lt;/span&gt; &lt;span class="nx"&gt;engaged&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;great&lt;/span&gt; &lt;span class="nx"&gt;UI&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;UX&lt;/span&gt; &lt;span class="nx"&gt;learning&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-gray-800 dark:text-gray-400 mb-10 text-base&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;Enter&lt;/span&gt; &lt;span class="nx"&gt;your&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="nx"&gt;address&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;you&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ll be be added to my email newsletter, of which you can opt out any time.
      &amp;lt;/p&amp;gt;
      &amp;lt;form className="relative my-4"&amp;gt;
        &amp;lt;input
          aria-label="Email for newsletter"
          placeholder="john@email.com"
          type="email"
          autoComplete="email"
          required
          className="py-4 px-0 text-md bg-transparent w-9/12 text-gray-900 border-b-2 border-gray-600 dark:border-gray-400 dark:text-white focus:border-brand focus-visible:outline-none"
        /&amp;gt;
        &amp;lt;button
          className="flex justify-center px-5 py-4 mt-8 bg-green-600 text-white font-bold text-lg"
          type="submit"
        &amp;gt;
          Subscribe
        &amp;lt;/button&amp;gt;
      &amp;lt;/form&amp;gt;

      &amp;lt;p className="text-xl text-gray-800 dark:text-gray-200"&amp;gt;
        14 subscribers . 3 issues
      &amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
  );
};

export default Subscribe;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is a react component with a simple form having one email field and a button. We have also hardcoded the subscribers and issues count. Later, we will make the API calls to fetch those. We have styled the HTML element using &lt;a href="https://tailwindcss.com/docs"&gt;tailwindcss classes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now move over to the &lt;code&gt;index.js&lt;/code&gt; under the &lt;code&gt;pages&lt;/code&gt; folder. Replace the content of the file with the following,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Subscribe&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@components/Subscribe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;IndexPage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Subscribe&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are importing and using the &lt;code&gt;Subscribe&lt;/code&gt; component so that when the app loads, it shows the newsletter subscription form. Let's refresh the page. You should see subscription forms like,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EsJjc4oN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630071552191/Kp8AMgDwD.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EsJjc4oN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630071552191/Kp8AMgDwD.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="Subscription Form"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#create-nextjs-api-routes-to-subscribe-and-many-more"&gt;
  &lt;/a&gt;
  Create Next.js API Routes to Subscribe, and Many More
&lt;/h1&gt;

&lt;p&gt;Now it's time to create &lt;code&gt;Next.js API Routes&lt;/code&gt; to register a new subscriber, get the subscriber count, and list of issues.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nextjs-serverless-functions"&gt;
  &lt;/a&gt;
  Next.js Serverless Functions
&lt;/h2&gt;

&lt;p&gt;With Next.js's &lt;a href="https://nextjs.org/docs/api-routes/introduction"&gt;API Routes&lt;/a&gt;, you can easily create API endpoints. In the background, it uses Node.js serverless functions. You need to create these functions inside the &lt;code&gt;pages/api&lt;/code&gt; folder. So, let us first create a folder called &lt;code&gt;api&lt;/code&gt; under the &lt;code&gt;pages&lt;/code&gt; folder. &lt;/p&gt;

&lt;p&gt;We will need the Revue API key now. Please create &lt;code&gt;.env.local&lt;/code&gt; file at the root of the project folder with the following line,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;REVUE_API_KEY&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;REPLACE_THIS_WITH_REVUE_API_KEY&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Please use your &lt;code&gt;API Key&lt;/code&gt; you have copied from the revue integration page earlier.&lt;/p&gt;

&lt;p&gt;At this stage, you need to restart the local server for the environment variable to get loaded in our app. So stop the server and restart it using the &lt;code&gt;yarn dev&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;Let's create the API route to register a new subscriber.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#but-hold-on-why-cant-we-use-the-revue-api-directly"&gt;
  &lt;/a&gt;
  But, Hold On! Why Can't We use the Revue API Directly?
&lt;/h2&gt;

&lt;p&gt;You can. It is possible to use the Revue APIs directly in your React components. However, there are a few advantages of using it via the Next.js APIs.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In the future, if you want to use another newsletter service other than Revue, your user interface component code never changes. You just change the serverless function and redeploy.&lt;/li&gt;
&lt;li&gt;There is an abstraction. It helps you to deploy and host just the API separately along with your own business use cases. Alright, let's move on.&lt;/li&gt;
&lt;li&gt;Accessing these APIs directly on the client-side will leave you with the risk of the API key exposed that anyone can obtain easily by inspecting network requests. You do not want that!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#create-nextjs-api-route-to-register-a-new-subscriber"&gt;
  &lt;/a&gt;
  Create Next.js API Route to Register a New Subscriber
&lt;/h2&gt;

&lt;p&gt;Create a file called &lt;code&gt;subscribe.js&lt;/code&gt; inside &lt;code&gt;pages/api&lt;/code&gt; folder. It means our API route will be accessible from the UI components using the URI &lt;code&gt;/api/subscribe&lt;/code&gt;. Please paste the following content in the &lt;code&gt;subscribe.js&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// 1. Get the email from the payload and&lt;/span&gt;
    &lt;span class="c1"&gt;// validate if it is empty.&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Please provide an email id.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// 2. Use the Revue API Key and create a subscriber using&lt;/span&gt;
    &lt;span class="c1"&gt;// the email we pass to the API. Please note, we pass the&lt;/span&gt;
    &lt;span class="c1"&gt;// API Key in the 'Authorization' header.&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;API_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;REVUE_API_KEY&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;`https://www.getrevue.co/api/v2/subscribers`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;double_opt_in&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt;
                &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Authorization&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Token &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;API_KEY&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;// 3. We check in the response if the status is 400&lt;/span&gt;
    &lt;span class="c1"&gt;// If so, consider it as error and return. Otherwise a 201&lt;/span&gt;
    &lt;span class="c1"&gt;// for create        &lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]});&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="c1"&gt;// Send a JSON response&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;201&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Hey, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, Please check your email and verify it. Can't wait to get you boarded.`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// 4. If the control goes inside the catch block&lt;/span&gt;
    &lt;span class="c1"&gt;// let us consider it as a server error(500)  &lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A few things are going on in the above function.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;When someone invokes this API function, we expect an email part of the payload. So first, get the email from the payload and validate if it is empty.&lt;/li&gt;
&lt;li&gt;Next, use the email and API_KEY to call the Revue API to register a subscriber. Note the payload here. We are passing the email value and &lt;code&gt;double_opt_in&lt;/code&gt; value as &lt;code&gt;false&lt;/code&gt;. In reality, you will NOT pass the double_opt_in value as false as you want your subscribers to verify email before confirming. We are doing it just for the demo's sake.&lt;/li&gt;
&lt;li&gt;Then, we check in the &lt;code&gt;response&lt;/code&gt; if the status is 400. If so, consider it as an error and return with an error message. Otherwise, a 201 for creating and return with a success message.&lt;/li&gt;
&lt;li&gt;Last, If the control goes inside the catch block, let us consider it a server error(500).&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#update-the-ui-code-to-register-subscribers"&gt;
  &lt;/a&gt;
  Update the UI Code to Register Subscribers
&lt;/h3&gt;

&lt;p&gt;We will update the &lt;code&gt;Subscribe&lt;/code&gt; component to use the &lt;code&gt;/api/subscribe&lt;/code&gt; API. Open the &lt;code&gt;Subscribe.js&lt;/code&gt; file under the &lt;code&gt;components&lt;/code&gt; folder and make these changes.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Import the &lt;code&gt;useState&lt;/code&gt; hook from &lt;code&gt;react&lt;/code&gt; to manage a few states. Add this line at the top of the file.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Create three state variables to handle the email from the user input and the error, success message from the API call. Add these three lines at the beginning of the &lt;code&gt;Subscribe&lt;/code&gt; function as,
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Subscribe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setEmail&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setSuccess&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;.....&lt;/span&gt; 
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Rest of the code as is */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;....&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Next, handle two events. One is to capture the user input in the email field, and the second is to handle the for submit.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt; ...
 ...
 &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;className=&lt;/span&gt;&lt;span class="s"&gt;"relative my-4"&lt;/span&gt; &lt;span class="na"&gt;onSubmit=&lt;/span&gt;&lt;span class="s"&gt;{subscribeMe}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt;
          &lt;span class="na"&gt;onChange=&lt;/span&gt;&lt;span class="s"&gt;{changeEmail}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Now is the time to define both &lt;code&gt;subscribeMe&lt;/code&gt; and &lt;code&gt;changeEmail&lt;/code&gt; methods.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;subscribeMe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/api/subscribe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
        &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setSuccess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;changeEmail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;setEmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the &lt;code&gt;subscribeMe&lt;/code&gt; method, we call the API &lt;code&gt;/api/subscribe&lt;/code&gt;, passing the email value as the payload. Then we handle the error and success message.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Last, let's show the success and error message in the UI. Add this code right after the form element.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;   {success 
          ? 
       &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;className=&lt;/span&gt;&lt;span class="s"&gt;"flex items-center text-sm font-bold text-green-700"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; 
            {success}
       &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt; 
          : 
       &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;className=&lt;/span&gt;&lt;span class="s"&gt;"flex items-center text-sm font-bold text-red-800"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
             {error} 
       &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
   }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great, now go to the app and provide an email id to register. As we have turned off the email verification, you can test it with an arbitrary email id. Please take a look into the entire source file &lt;a href="https://github.com/atapas/next-starter-revue-tailwind/blob/master/components/Subscribe.js"&gt;from here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7oLz6xi5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630082649555/YLQNTgmsf.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7oLz6xi5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630082649555/YLQNTgmsf.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="Register Success"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To verify, the email address got added successfully, got to the &lt;a href="https://www.getrevue.co/app/lists"&gt;subscribers&lt;/a&gt; page of your account. You should see this new email id added,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dkzKgP14--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629973057192/-Webt8GAm.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dkzKgP14--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629973057192/-Webt8GAm.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="Subascriber added"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Please make sure to use the email verification by turning on &lt;code&gt;double_opt_in: true&lt;/code&gt; in the API function for production usage.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Try the same email id again to attempt to register!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qbeGN4zA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630082807675/muZ1jY72r.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qbeGN4zA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630082807675/muZ1jY72r.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="register fail"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yep, you will get that error. That's all. The subscription works well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#get-the-subscriber-count"&gt;
  &lt;/a&gt;
  Get the Subscriber Count
&lt;/h2&gt;

&lt;p&gt;Alright, let's get the subscriber count. So we will now write a serverless function to fetch the subscriber count. Please create a file called &lt;code&gt;subscribers.js&lt;/code&gt; under the &lt;code&gt;pages/api&lt;/code&gt; folder with the following content.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;API_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;REVUE_API_KEY&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://www.getrevue.co/api/v2/subscribers&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;Authorization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Token &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;API_KEY&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Cache-Control&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;public, s-maxage=1200, stale-while-revalidate=600&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We use the Revue API to fetch the subscriber list and then return the count as a response. So, now we have to use the &lt;code&gt;/api/subscribers&lt;/code&gt; URI to fetch the count. Let's do it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#update-the-ui-code-to-fetch-subscriber-count"&gt;
  &lt;/a&gt;
  Update the UI Code to Fetch Subscriber Count
&lt;/h3&gt;

&lt;p&gt;We need to fetch the subscriber count when the &lt;code&gt;Subscribe&lt;/code&gt; component loads. Also, if there is a new subscriber, we need to show the updated count in the UI. &lt;code&gt;Next.js&lt;/code&gt; supports two kinds of &lt;code&gt;pre-rendering&lt;/code&gt;,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Static Generation(SSG)&lt;/code&gt;: In this case, everything is precompiled, prebuilt and cached. You do not see changes in your content until there is another build. It works best when you deal with static data like blog articles.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Server-Side Rendering(SSR)&lt;/code&gt;: Here, the data for a page generates on demand for each request.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We prefer static generation as much as possible but may not avoid the server-side rendering in some cases. For our app, we will use &lt;code&gt;SWR&lt;/code&gt;. As described &lt;a href="https://swr.vercel.app/"&gt;here&lt;/a&gt;,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;SWR&lt;/code&gt; is derived from &lt;code&gt;stale-while-revalidate&lt;/code&gt; , a HTTP cache invalidation strategy popularized by &lt;code&gt;HTTP RFC 5861&lt;/code&gt;. SWR is a strategy to first return the data from cache (stale), then send the fetch request (revalidate), and finally come with the up-to-date data.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With Next.js &lt;code&gt;pre-rendering&lt;/code&gt; support and &lt;code&gt;SWR&lt;/code&gt;, you can pre-render the page for SEO and allow caching, revalidation, and re-fetching at intervals on the client side.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Install &lt;code&gt;swr&lt;/code&gt; library using the command,
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;swr&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;Or&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;yarn&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="nx"&gt;swr&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;swr&lt;/code&gt; library gives us a hook called &lt;code&gt;useSWR&lt;/code&gt;. It takes two parameters, a &lt;code&gt;key&lt;/code&gt;  and a fetcher function. The &lt;code&gt;key&lt;/code&gt; is a string value, usually the API URL that we will pass to the &lt;code&gt;fetcher&lt;/code&gt; function, and the &lt;code&gt;fetcher&lt;/code&gt; function can be an asynchronous function. So, let us create a simple fetcher function. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Please create a &lt;code&gt;utils&lt;/code&gt; folder at the root of the project and create a &lt;code&gt;fetcher.js&lt;/code&gt; file with the following content,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Fetcher&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, in the &lt;code&gt;components/Subscribe.js&lt;/code&gt; file, include these two imports.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;useSWR&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;swr&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;fetcher&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../utils/fetcher&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can use the &lt;code&gt;useSWR&lt;/code&gt; hook to pass the API(&lt;code&gt;api/subscribers&lt;/code&gt;) and the fetcher function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Subscribe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setEmail&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setSuccess&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="c1"&gt;// --- above is old code ---&lt;/span&gt;

     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSWR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/subscribers&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fetcher&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;subscriberCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Please note, we use the &lt;code&gt;JavaScript optional chaining(?.)&lt;/code&gt; feature to get the count value. It handles the &lt;code&gt;undefined&lt;/code&gt; value much safely.&lt;/p&gt;

&lt;p&gt;Every time the data gets changed at the back-end, the &lt;code&gt;subscriberCount&lt;/code&gt; variable will have the latest count.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Last is to use the &lt;code&gt;subscriberCount&lt;/code&gt; state variable instead of the hardcoded value.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;  &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;className=&lt;/span&gt;&lt;span class="s"&gt;"text-sm text-gray-800 dark:text-gray-200"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
     { subscriberCount } subscribers . 3 issues
  &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's all. Refresh the app and see the actual count reflecting.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MS-uN5Mr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630083167179/SbLVFz4lo.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MS-uN5Mr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630083167179/SbLVFz4lo.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="Subscriber count"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#get-the-issue-list"&gt;
  &lt;/a&gt;
  Get the Issue List
&lt;/h2&gt;

&lt;p&gt;Now we need to get the issue list and the count of published issues. So we have to write a serverless function again to fetch these details. But wait, I'm not going to do that in this tutorial. Please take it as an exercise to try out. &lt;/p&gt;

&lt;p&gt;Hint: You need to use this Revue API to fetch the data =&amp;gt; &lt;code&gt;GET /v2/issues&lt;/code&gt;. If you need help, the &lt;a href="https://github.com/atapas/next-starter-revue-tailwind/blob/master/pages/api/issues.js"&gt;API code is here&lt;/a&gt;, and the &lt;a href="https://github.com/atapas/next-starter-revue-tailwind/blob/master/components/Subscribe.js"&gt;component changes&lt;/a&gt; are here to refer to.&lt;/p&gt;

&lt;p&gt;In the end, the UI should have the actual issue count and a list of published issues like this(I have one test issue).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UHp5TtHG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630083249642/_OUZULeLh.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UHp5TtHG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630083249642/_OUZULeLh.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="final page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lets-deploy"&gt;
  &lt;/a&gt;
  Let's Deploy
&lt;/h1&gt;

&lt;p&gt;Congratulations!!! The app is ready to use. But, it is available only with you. Let's deploy it publicly. We will use the &lt;a href="https://vercel.com/"&gt;Vercel&lt;/a&gt; platform to deploy our app. It is super easy to deploy a Next.js app on Vercel using a few simple steps. To make it happen, please commit and push all your code changes to the &lt;code&gt;GitHub&lt;/code&gt; repository.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create an account with Vercel, log in and click on the &lt;code&gt;New Project&lt;/code&gt; button to get started.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pg9gMS1---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629979553563/T5xJig9eN.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pg9gMS1---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629979553563/T5xJig9eN.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Next, import your project from GitHub.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KW8mITG0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629979633056/Lwb0k4SFB.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KW8mITG0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629979633056/Lwb0k4SFB.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Now, you need to configure your project. For a Next.js project, you hardly need to make any changes to the build and other parameters. If your app is depending on any Environment Variables, you need to add them one by one. In our case, we have one. So let's add it. Then, click on the &lt;code&gt;Deploy&lt;/code&gt; button.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rKbdwi20--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629979696642/0buvXxOsn.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rKbdwi20--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629979696642/0buvXxOsn.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Congratulations!!! You have deployed the app successfully on Vercel. Now you can access the app publicly using the URL generated by the deployment process.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DZTgRjOS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629979809143/GeERj2HL8.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DZTgRjOS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629979809143/GeERj2HL8.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Post-deployment, you can perform many checks and additional configurations based on your needs. If your app has one or more serverless functions, you can see the live execution logs from your project's &lt;code&gt;Functions&lt;/code&gt; tab. The image below shows the log for our functions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JLz2p6xP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629982080277/tl8GRrAec.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JLz2p6xP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629982080277/tl8GRrAec.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#in-summary"&gt;
  &lt;/a&gt;
  In Summary
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Next.js&lt;/code&gt; is the future(arguably?) for React-based projects. It is easy to set up, learn, and use. The &lt;code&gt;tailwindcss&lt;/code&gt; is a developer-friendly CSS library to style the app. &lt;code&gt;Revue&lt;/code&gt; is an amazing newsletter service.&lt;/li&gt;
&lt;li&gt;Your users, customers like the &lt;code&gt;oneness&lt;/code&gt; and the &lt;code&gt;belongingness&lt;/code&gt;. Then why not get the newsletter service within the app/site itself and manage it?&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Next.js APIs&lt;/code&gt; are the Node.js &lt;code&gt;serverless functions&lt;/code&gt; in the background. It is a great way to fetch, interact with back-end services.&lt;/li&gt;
&lt;li&gt;It is super easy to deploy and maintain your Next.js app(including serverless functions) using &lt;code&gt;Vercel&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Similar to this, you can integrate many other services like GitHub, your blog, and many more that I'll cover in my upcoming post.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;That's all. I hope you enjoyed building it with me. Please share/like this article and the video tutorial so that it reaches others as well. &lt;/p&gt;

&lt;p&gt;Let's connect. Please find me on &lt;a href="https://twitter.com/tapasadhikary"&gt;Twitter(@tapasadhikary)&lt;/a&gt;, sharing thoughts, tips, and code practices. Would you please give a follow?&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>tailwindcss</category>
      <category>twitter</category>
      <category>sideprojects</category>
    </item>
    <item>
      <title>Can we make our own music player using an API which'll be free. </title>
      <author>Prajal Sharma</author>
      <pubDate>Sat, 28 Aug 2021 06:13:56 +0000</pubDate>
      <link>https://dev.to/prajalsharma/can-we-make-our-own-music-player-using-an-api-which-ll-be-free-5fpk</link>
      <guid>https://dev.to/prajalsharma/can-we-make-our-own-music-player-using-an-api-which-ll-be-free-5fpk</guid>
      <description>&lt;p&gt;Can we make our own music player using an API which'll be free as we will be the ones using it and no one else so there'll be no traffic in the server . We can search songs and play songs for free instead of this Spotify ad bs&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>python</category>
      <category>typescript</category>
      <category>android</category>
    </item>
  </channel>
</rss>
