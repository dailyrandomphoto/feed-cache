<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Pure waterfall development model</title>
      <author>Aatmaj</author>
      <pubDate>Mon, 27 Sep 2021 12:42:58 +0000</pubDate>
      <link>https://dev.to/aatmaj/pure-waterfall-development-model-5hem</link>
      <guid>https://dev.to/aatmaj/pure-waterfall-development-model-5hem</guid>
      <description>&lt;p&gt;In the waterfall model, a project progresses through an orderly sequence of steps from the initial software concept through system testing. The project holds a review at the end of each stage to determine whether it is ready to advance to the next phase. If not, it remains in the same phase.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yfIpxzgY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3oosvmrzhnibvjysillq.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yfIpxzgY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3oosvmrzhnibvjysillq.jpeg" alt="WhatsApp Image 2021-09-27 at 9.32.39 AM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The pure waterfall model performs well for product cycles in which you have a stable product defination and when you are working with well understood technical methodologies. In such cases, the waterfall model helps you to find out errors in the early, low cost stages of the product. It provides the requirements stability that developers crave. If you are building a well defined maintenance release of an existing product or porting an existing product to a new platform, a waterfall lifecycle might be the right choice for rapid development&lt;/p&gt;

&lt;p&gt;The pure waterfall model helps to minimize planning overhead because you can do all the planning up front. It doesn't provide tangible results in the form of software until the end of the lifecycle, but to someone who is familiar with it, the documentation it generates provides meaningful indications of progress throughout the lifecycle. The waterfall model works well for projects that are well defined, well understood and complex, because you can benifit from tackling complexity in an orderly way. It works well when quality requirements dominate cost and schedule requirements. Elimination of midstream changes eliminates a huge and common source of potential errors.&lt;/p&gt;

&lt;p&gt;The waterfall model works especially well if you have a technically weak staff or an inexperienced staff, because it provides the project with a structure that helps to minimize wasted effort.&lt;/p&gt;

&lt;p&gt;The disadvantages of the pure waterfall model arise from the difficulty of fully specifying requirements at the beginning of the project, before any design work has been done and before any code has been written.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The major problem with the waterfall model is that it is not flexible. You have to fully specify the requirements at the beginning of the project.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Notes and images from &lt;a href="https://www.amazon.com/Rapid-Development-Taming-Software-Schedules/dp/1556159005"&gt;Rapid Development: Taming Wild Software Schedules by Steve McConnell&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Créer un backend en Javascript : Introduction à Node.js</title>
      <author> Eric Le Codeur</author>
      <pubDate>Mon, 27 Sep 2021 12:11:33 +0000</pubDate>
      <link>https://dev.to/ericlecodeur/creer-un-backend-en-javascript-introduction-a-node-js-3014</link>
      <guid>https://dev.to/ericlecodeur/creer-un-backend-en-javascript-introduction-a-node-js-3014</guid>
      <description>&lt;p&gt;Voici une série d'articles qui vous permettra créer des applications backend en Javascript.&lt;/p&gt;

&lt;p&gt;Node.js est aujourd'hui un incontournable, il est donc essentiel pour un développeur de le maitriser.&lt;/p&gt;

&lt;p&gt;Je vais donc publier un nouvel article environ au deux jours et petit à petit vous apprendrez tout ce qu'il y a à savoir sur Node.js&lt;/p&gt;

&lt;p&gt;Pour ne rien manquer suivez moi sur twitter : &lt;a href="https://twitter.com/EricLeCodeur"&gt;https://twitter.com/EricLeCodeur&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#questce-que-nodejs-"&gt;
  &lt;/a&gt;
  Qu'est-ce que Node.js ?
&lt;/h2&gt;

&lt;p&gt;NodeJS permet d’exécuter du code Javascript en dehors d’un navigateur.&lt;/p&gt;

&lt;p&gt;Node.js est un environnement serveur, open source, gratuit, et qui utilise le language Javascript pour créer des applications Web côté serveur. (backend)&lt;/p&gt;

&lt;p&gt;Node.js fonctionne sur différentes plateformes (Windows, Linux, Unix, Mac OS X, etc.) Avec Node.js, nous pouvons créer une application Web rapide et hautement évolutive. &lt;/p&gt;

&lt;p&gt;L'utilisation de Node.js signifie également que nous pouvons utiliser Javascript sur l'ensemble du stack c’est à dire le même language pour le frontend et le backend. Donc un développement plus rapide et efficace.&lt;/p&gt;

&lt;p&gt;Node.js a une énorme bibliothèque de packages prêts à l'emploi et qui vous feront gagner beaucoup de temps. Ces bibliothèques sont gérées par NPM (Node Package Manager) &lt;/p&gt;

&lt;p&gt;Une particularité de Node.js est qu'il utilise la programmation asynchrone (exécution de plusieurs tâches en même temps) vs la programmation synchrone (exécution d'une tâche à la fois) que l'on trouve sur de nombreux langages de programmation côté serveur comme PHP et Ruby.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#installation-de-nodejs"&gt;
  &lt;/a&gt;
  Installation de Node.js
&lt;/h2&gt;

&lt;p&gt;Node.js peut être installé directement à partir de son site Web : &lt;a href="https://nodejs.org/en/"&gt;https://nodejs.org/en/&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Une documentation détaillée est également disponible sur le site Web de Node.js : &lt;a href="https://nodejs.org/en/docs/"&gt;https://nodejs.org/en/docs/&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Une fois l’installation terminé, vous pouvez vérifier la version installé avec cette commande&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;node &lt;span class="nt"&gt;-v&lt;/span&gt;
&lt;span class="c"&gt;# v16.9.1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#hello-world"&gt;
  &lt;/a&gt;
  Hello World
&lt;/h2&gt;

&lt;p&gt;Tradition oblige, le premier truc que nous allons faire est le classique 'Hello World'&lt;/p&gt;

&lt;p&gt;La façon la plus rapide et la plus simple d'exécuter du code avec Node, c'est l'utilisation du REPL. Pour lancer le REPL, il suffit d'exécuter cette commande :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;node
Welcome to Node.js v16.9.1
Type &lt;span class="s2"&gt;".help"&lt;/span&gt; &lt;span class="k"&gt;for &lt;/span&gt;more information
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="nx"&gt;World&lt;/span&gt;
&lt;span class="nx"&gt;undefided&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Le REPL permet d'exécuter du javascript mais vous l'aurez compris est très limité. Le REPL est utilisé pour exécuter de petites commandes ou pour des tests uniquement.&lt;/p&gt;

&lt;p&gt;Si vous désirez écrire un programme complet en NodeJS, il faudra créer un fichier et l'exécuter.&lt;/p&gt;

&lt;p&gt;Créer et ouvrez le fichier app.js, saisir la ligne suivante :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;console.log&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Hello World'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Chaque fichier  est considérer par NodeJS comme étant un module et peut donc être exécuté. &lt;/p&gt;

&lt;p&gt;Pour ce faire, à partir du terminal saisir:  node &lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;node app.js
Hello World
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Voilà, bravo vous venez de créer votre première application NodeJS !&lt;/p&gt;

&lt;p&gt;Chaque fois que vous devez exécuter du code NodeJS il faudra le faire avec cette commande.&lt;/p&gt;

&lt;p&gt;Nous verrons, plus tard qu'il existe un façon de créer un serveur NodeJS qui permettra d'exécuter du code automatiquement.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript-navigateur-vs-javascript-serveur"&gt;
  &lt;/a&gt;
  Javascript navigateur vs JavaScript serveur
&lt;/h2&gt;

&lt;p&gt;Comme vous l'avez constaté grâce à NodeJS vous pouvez exécuter du code Javascript sans navigateur ! C'est bien mais malgré cela, tout n'est pas exactement la même chose.&lt;/p&gt;

&lt;p&gt;Voici une liste des différences principales entre le code Javascript navigateur et NodeJS&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Une application navigateur s'exécuter sur le poste du client&lt;/li&gt;
&lt;li&gt;Une application NodeJS s'exécute sur le serveur&lt;/li&gt;
&lt;li&gt;Avec NodeJS, il n'y a pas de navigateur donc pas de DOM et pas d'object Window&lt;/li&gt;
&lt;li&gt;Avec NodeJS il est possible d'accéder au file system&lt;/li&gt;
&lt;li&gt;Avec NodeJS, le système de module appelé 'CommonJS' ne fonctionne pas avec la même syntaxe que les modules Javascript ES6&lt;/li&gt;
&lt;li&gt;Il existe en NodeJS des objets qui sont disponible partout dans votre code. Ces objets sont appelé les Globals.

&lt;ul&gt;
&lt;li&gt;Voici quelques un de ces objets. Vous apprendrez à la utiliser en temps et lieu :

&lt;ul&gt;
&lt;li&gt;__dirname (retourne le path du dossier en cours)&lt;/li&gt;
&lt;li&gt;__filename (retourne le nom du fichier en cours d'exécution)&lt;/li&gt;
&lt;li&gt;require (permet de charger des modules)&lt;/li&gt;
&lt;li&gt;module (retourne info sur le module en cours)&lt;/li&gt;
&lt;li&gt;process (retourne info à propos de l'environnement en cours)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;C'est tout pour aujourd'hui, suivez moi sur twitter : &lt;a href="https://twitter.com/EricLeCodeur"&gt;https://twitter.com/EricLeCodeur&lt;/a&gt; afin d'être avisé de la parution du prochain article (d'ici deux jours).&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>express</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to sort lists alphabetically in Python?</title>
      <author>hrishikesh1990</author>
      <pubDate>Mon, 27 Sep 2021 11:58:46 +0000</pubDate>
      <link>https://dev.to/hrishikesh1990/how-to-sort-lists-alphabetically-in-python-2ecc</link>
      <guid>https://dev.to/hrishikesh1990/how-to-sort-lists-alphabetically-in-python-2ecc</guid>
      <description>&lt;p&gt;In this short tutorial, we look at how to sort list alphabetically in Python. We look at the various methods and discuss their use cases.&lt;/p&gt;

&lt;p&gt;This tutorial is a part of our initiative at &lt;a href="https://flexiple.com/"&gt;Flexiple&lt;/a&gt;, to write short curated tutorials around often used or interesting concepts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#how-to-sort-lists-alphabetically-in-python"&gt;How to sort lists alphabetically in Python?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#using-the-sort-method"&gt;Using the sort() method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#using-the-sorted-method"&gt;Using the sorted() method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#closing-thoughts"&gt;Closing thoughts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-to-sort-lists-alphabetically-in-python"&gt;
  &lt;/a&gt;
  How to sort lists alphabetically in Python?
&lt;/h2&gt;

&lt;p&gt;Lists are used to store a collection of items and quite often it may contain data in an unpredictable order. This could largely be due to the order they have been added by the user. Due to this, when it comes to user input data there is no way they can be ordered. Hence it is important to have a couple of methods that can be used to sort a list.&lt;/p&gt;

&lt;p&gt;Lists can be sorted using two methods, the sort() and the sorted() method. The former permanently sorts the list whereas sorted() is used to sort the list temporarily.&lt;/p&gt;

&lt;p&gt;Let us take a closer look at both the methods below.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-the-sort-method"&gt;
  &lt;/a&gt;
  Using the sort() method:
&lt;/h2&gt;

&lt;p&gt;As aforementioned, the sort() method can be used to sort a list alphabetically in Python. However, this method permanently changes the order of the items in the list. In practice use cases this might not be a problem, however, while dealing with real-world data there might be instances where the order of the list must be preserved.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-amp-explanation"&gt;
  &lt;/a&gt;
  Code &amp;amp; Explanation:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;letters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"e"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"f"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"g"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"h"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"c"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"b"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"d"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;letters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code snippet outputs the following value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'c'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'d'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'e'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'f'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'g'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'h'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see we have used sort() to sort the list in alphabetical order in Python. We then print the original list and the values have been changed permanently.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-the-sorted-method"&gt;
  &lt;/a&gt;
  Using the sorted() method:
&lt;/h2&gt;

&lt;p&gt;In case you want to sort the list alphabetically in Python but want to preserve the original list, the sorted() method can be used. This method sorts and displays the list but does not change the original list.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-and-explanation"&gt;
  &lt;/a&gt;
  Code and Explanation:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;letters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"e"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"f"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"g"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"h"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"c"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"b"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"d"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letters&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see in the above code snippet, we have first sorted and printed the list after which we have printed the original list and this is the output.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'c'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'d'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'e'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'f'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'g'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'h'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'e'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'f'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'g'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'h'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'c'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'d'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see here, the list was sorted but the original list was not affected.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing Thoughts:
&lt;/h2&gt;

&lt;p&gt;We have covered two methods to sort a list and discussed their use cases. Although our examples use alphabets, they can be used to sort lists based on numbers as well.&lt;/p&gt;

&lt;p&gt;As a next step, I would recommend trying to sort an alphabetical list containing items in various cases.&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How Long it Takes to Learn CSS</title>
      <author>Coderslang: Become a Software Engineer</author>
      <pubDate>Mon, 27 Sep 2021 11:49:35 +0000</pubDate>
      <link>https://dev.to/coderslang/how-long-it-takes-to-learn-css-44im</link>
      <guid>https://dev.to/coderslang/how-long-it-takes-to-learn-css-44im</guid>
      <description>&lt;p&gt;Like HTML, CSS is also simple to learn because there are few concepts to remember it. These concepts include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CSS syntax&lt;/li&gt;
&lt;li&gt;Common CSS properties&lt;/li&gt;
&lt;li&gt;The CSS Box Model&lt;/li&gt;
&lt;li&gt;How to find more information&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#css-syntax"&gt;
  &lt;/a&gt;
  CSS syntax
&lt;/h2&gt;

&lt;p&gt;The first concept to remember is to know the syntax of CSS. In essence, the CSS syntax comes in three parts. They are the selectors, property, and value.&lt;/p&gt;

&lt;p&gt;Here's a basic example of the CSS syntax. It tells CSS to change the color of the &lt;code&gt;h1&lt;/code&gt; element into red color:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let me explain what's happening in this code:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;h1&lt;/code&gt; is the CSS selector, and it points to the HTML element that you want to change styles. In this case, we select the &lt;code&gt;h1&lt;/code&gt; element.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;color&lt;/code&gt; is the CSS property, and it tells what type of styling you want to apply. In this case, change the color of the &lt;code&gt;h1&lt;/code&gt; element.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;red&lt;/code&gt; is the CSS property value, and it tells how the style should change. In this case, change the &lt;code&gt;h1&lt;/code&gt; element color to red.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As long as you remember the syntax, then you pretty much know half of the CSS rules. The other half comes from experiences (making mistakes and learning from them) and regular practice.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#common-css-properties"&gt;
  &lt;/a&gt;
  Common CSS properties
&lt;/h2&gt;

&lt;p&gt;The next concept to know is the CSS properties. While CSS has more than a hundred properties, there are few of them you will use frequently. These common CSS properties include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Colors&lt;/li&gt;
&lt;li&gt;Width and Height&lt;/li&gt;
&lt;li&gt;Background&lt;/li&gt;
&lt;li&gt;Background color&lt;/li&gt;
&lt;li&gt;Font size&lt;/li&gt;
&lt;li&gt;Margin and Padding&lt;/li&gt;
&lt;li&gt;Border&lt;/li&gt;
&lt;li&gt;Display&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By knowing these common CSS properties, you will have the foundations to build simple websites. As for the rest of the CSS properties, you will learn them when you need them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-css-box-model"&gt;
  &lt;/a&gt;
  The CSS Box Model
&lt;/h2&gt;

&lt;p&gt;The third concept to remember is knowing what the CSS box model is.&lt;/p&gt;

&lt;p&gt;Every HTML element wraps around a box called the box model. This box model consists of multiple properties which are margins, paddings, borders, and content. The purpose of the box model is to help you design and build the layout of a web page. It is also a handy tool for identifying issues in CSS stylings.&lt;/p&gt;

&lt;p&gt;Learning CSS Box Model is challenging at first. But with enough time and practice, it will make sense to you. Plus, once you've learned it, you will have a deep understanding of CSS and be able to build complex web designs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-find-more-information"&gt;
  &lt;/a&gt;
  How to find more information
&lt;/h2&gt;

&lt;p&gt;The last concept to remember is knowing how to find more information about CSS.&lt;/p&gt;

&lt;p&gt;It is crucial to know how to search because a lot of times, you will spend your time googling how to add stylings in CSS and fix any issues you encounter when building a layout of a web page.&lt;/p&gt;

&lt;p&gt;The first place to start is MDN Web Docs. It is an official documentation website where you can learn anything related to CSS. Another good website to look for CSS information is CSS-Tricks and &lt;a href="https://learn.coderslang.com/tags/css/"&gt;Coderslang&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;To sum it up, it will probably take you few weeks to learn the basics of CSS. As long as you keep the CSS concepts in mind, like the box modal, syntax, and practice regularly, you will become good at CSS within one or two months.&lt;/p&gt;

&lt;p&gt;I hope you find this article helpful, and good luck learning CSS!&lt;/p&gt;

&lt;p&gt;Get my &lt;a href="https://learn.coderslang.com/free-ebooks/"&gt;free e-book&lt;/a&gt; to prepare for the technical interview or start to &lt;a href="https://js.coderslang.com/"&gt;Learn Full-Stack JavaScript&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>webdev</category>
    </item>
    <item>
      <title>The Best JetBrains Plugins For Remote Working
</title>
      <author>Carlo Morrone</author>
      <pubDate>Mon, 27 Sep 2021 11:37:08 +0000</pubDate>
      <link>https://dev.to/morrone_carlo/the-best-jetbrains-plugins-for-remote-working-64</link>
      <guid>https://dev.to/morrone_carlo/the-best-jetbrains-plugins-for-remote-working-64</guid>
      <description>&lt;p&gt;What do developers want? Money, flexible schedules, pizza? Sure. Effortless remote collaboration? Hell, yes! Programming is a team sport and without proper communication, you can’t really expect spectacular results. A remote set-up can make developer-to-developer communication challenging, but equipped with the right tools you have nothing to fear. Let’s take a look at the best JetBrains plugins that can seriously improve your remote working routine. &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#gitlive"&gt;
  &lt;/a&gt;
  &lt;a href="https://plugins.jetbrains.com/plugin/11955-gitlive"&gt;GitLive&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This plugin is for all you team players out there, GitLive makes Git, well, live. &lt;/p&gt;

&lt;p&gt;It adds a tool window where you can see the collaborators from your repository, if they are online, and all their work in progress (branches/issues/PRs they are working on not yet merged in) where you can view diffs of the file changes, all updated in real-time.&lt;/p&gt;

&lt;p&gt;Their flagship feature, instant merge conflict detection, provides early warning of potential merge conflicts. Real-time gutter indicators show ​​where your teammates have made changes to the file you’re currently working on, which can be very useful, especially on the bigger projects. &lt;/p&gt;

&lt;p&gt;On top of that, GitLive also supports starting a Code With Me session with a fellow collaborator via a single click (or keyboard shortcut), and for those pesky collaborators that use VS Code there is even cross-IDE codeshare support!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Benefits for remote teams:&lt;/strong&gt; &lt;br&gt;
Improve developer communication with real-time cross-IDE collaboration, merge conflict detection and video calls!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D6p7QkH_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631192221415/ACy__GEsG.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D6p7QkH_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631192221415/ACy__GEsG.png" alt="image6.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-with-me"&gt;
  &lt;/a&gt;
  &lt;a href="https://plugins.jetbrains.com/plugin/14896-code-with-me"&gt;Code With Me&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;If you are a JetBrains user working remotely, the chances are that you’re already familiar with this one. Code With Me is a collaborative coding and pair programming service bundled in the latest versions of most IntelliJ IDEs. &lt;/p&gt;

&lt;p&gt;Code With Me lets you share your JetBrains IDE with others by inviting them to join a coding session (as a matter of fact, the guests don’t even need to have a JetBrains IDE installed - they can download a light-weight client instead). Thanks to the integrated group calls and customisable permissions, the plugin can be useful for educational purposes like teaching but works fine also for code reviews or technical interviews.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Benefits for remote teams:&lt;/strong&gt; &lt;br&gt;
Boost your team’s productivity by pair-programming in real-time, straight from your JetBrains IDE! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hpG6fnVg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631192175132/Gi_hrh2WY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hpG6fnVg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631192175132/Gi_hrh2WY.png" alt="image1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#waka-time"&gt;
  &lt;/a&gt;
  &lt;a href="https://plugins.jetbrains.com/plugin/7425-wakatime"&gt;Waka Time&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;One common problem that people have with remote working is the blurring of the lines between work and leisure time. Waka Time is a plugin that helps with this. It gives you a nice, visually appealing dashboard in your IDE’s which summarises your day’s coding activity. It shows you how much time you’ve spent programming, and also breaks down into how much time you’ve spent using different languages, IDEs or how much time you’ve spent on different projects. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Benefit for remote teams:&lt;/strong&gt;&lt;br&gt;
A good way to monitor how you’re splitting your time between projects and tasks. The team plan gives you an overview of your team’s project details. WakaTime detects your team projects automatically and shows how long each team member coded individually on each project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0Oj3HIM7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631192206417/3QcdX1o4W.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0Oj3HIM7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631192206417/3QcdX1o4W.png" alt="image4.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#presentation-assistant"&gt;
  &lt;/a&gt;
  &lt;a href="https://plugins.jetbrains.com/plugin/7345-presentation-assistant"&gt;Presentation Assistant&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;If you’ve ever given an online code presentation you know that moving too quickly can confuse your audience and constant questions about your last move can easily throw you off your game. Luckily this handy plugin can help you and your audience stay on a track during the live coding session. It provides annotations that explain which shortcuts you’re using as you are presenting your screen, which can make it much easier for your audience to follow along as you work. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Benefits for remote teams:&lt;/strong&gt;&lt;br&gt;
This plugin comes in handy during company-wide presentations, when you need to record screencasts and of course, during a pair programming session. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1990pplz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631192187460/LFihBs4_s.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1990pplz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631192187460/LFihBs4_s.gif" alt="image3.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#gitlink"&gt;
  &lt;/a&gt;
  &lt;a href="https://plugins.jetbrains.com/plugin/8183-gitlink"&gt;GitLink&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Simple and effective extension that does one job: allows you to send a link with selected code from your editor to your teammates, who can view it in GitHub. Besides the advantage of sharing code with your team (note that only committed changes will be reflected in the link), it is also useful if you want to check history, contributors, or branch versions. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Benefits for remote teams:&lt;/strong&gt;&lt;br&gt;
Easily send links of code snippets to coworkers! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9mIKpvTD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631192230049/xSOT7aQ9f.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9mIKpvTD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631192230049/xSOT7aQ9f.gif" alt="image5.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sonarlint"&gt;
  &lt;/a&gt;
  &lt;a href="https://plugins.jetbrains.com/plugin/7973-sonarlint"&gt;SonarLint&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Looking for a tool that will help you write efficient, safe and quality code?&lt;br&gt;
Most modern IDEs have a mechanism to allow for static code analysis, but you can bring the analysis to the next level by using a handy plugin like SonarLint. SonarLint SonarLint is a static code analyser meant as a way to get feedback about your code directly in the IDE. It’s great when it comes to detecting bad smells or finding and fixing bugs. &lt;/p&gt;

&lt;p&gt;SonarLint integrates with most JetBrains IDEs and supports languages like C, C++, Java, JavaScript, TypeScript, Python, C#, Kotlin, Ruby, HTML &amp;amp; PHP.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Benefits for remote teams:&lt;/strong&gt;&lt;br&gt;
You can use it on your own, but it works best when connected with the SonarQube platform, where your team can share common language rulesets or project analysis settings.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6m_Wmjbm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632332865080/mLb1KUWVq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6m_Wmjbm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632332865080/mLb1KUWVq.png" alt="sonarlint.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Good communication within a distributed team is key to productive remote working. Hopefully, some of the tools I rounded up in this short article will make your team collaboration faster, more efficient and productive. Happy hacking! &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>git</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>CxJS went open-source</title>
      <author>vladimirk4</author>
      <pubDate>Mon, 27 Sep 2021 11:30:46 +0000</pubDate>
      <link>https://dev.to/vladimirk4/cxjs-went-open-source-1jfl</link>
      <guid>https://dev.to/vladimirk4/cxjs-went-open-source-1jfl</guid>
      <description>&lt;p&gt;CxJS is a now open-source, plug-n-play Javascript framework for developing complex and data-rich applications fast.&lt;br&gt;
It's been in development for 5 years, and now it's free under the MIT license with its set of widgets, charts, themes, demo applications, documentation and tools.&lt;br&gt;
You can read more about it here:&lt;br&gt;
&lt;a href="https://medium.com/@marko.stijak/cxjs-goes-open-source-f52fee2a8214"&gt;https://medium.com/@marko.stijak/cxjs-goes-open-source-f52fee2a8214&lt;/a&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>javascript</category>
      <category>showdev</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Building a Tailwind CSS badge component</title>
      <author>Zoltán Szőgyényi</author>
      <pubDate>Mon, 27 Sep 2021 11:22:36 +0000</pubDate>
      <link>https://dev.to/themesberg/how-to-build-a-badge-component-in-tailwind-css-5bc4</link>
      <guid>https://dev.to/themesberg/how-to-build-a-badge-component-in-tailwind-css-5bc4</guid>
      <description>&lt;p&gt;I've been using Tailwind CSS in a lot of my projects lately and one of the disadvantages that I've found that it does not come with a base set of components that you can use right away.&lt;/p&gt;

&lt;p&gt;I've started a series of tutorials on how to build commonly used components with Tailwind CSS and today I want to show you how you can build a badge element.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jRuYm-39--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/buiz23y45q3mo8ttur0i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jRuYm-39--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/buiz23y45q3mo8ttur0i.png" alt="Tailwind CSS badge"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tailwind-css-badge-component"&gt;
  &lt;/a&gt;
  Tailwind CSS badge component
&lt;/h2&gt;

&lt;p&gt;First of all, let's start with the HTML markup. I recommend using a simple &lt;code&gt;span&lt;/code&gt; element for the badge so that it can easily be added inside other elements as an inline element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;span&amp;gt;Badge text&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next up we should make it look like a badge by adding a padding, background color and text color:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;span class="bg-blue-100 text-blue-800 px-2.5 py-0.5"&amp;gt;Default&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's also set the text size and font weight of the badge:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;span class="bg-blue-100 text-blue-800 text-xs font-medium px-2.5 py-0.5"&amp;gt;Default&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can make it look nicer by also adding a border radius:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;span class="bg-blue-100 text-blue-800 text-xs font-medium px-2.5 py-0.5 rounded-md"&amp;gt;Default&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Awesome! Now we have created a badge element. However, what if you want to create a slightly larger badge? No problem, all you need to do is increase the padding and font size of the badge.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;span class="bg-blue-100 text-blue-800 text-sm font-medium mr-2 px-2.5 py-0.5 rounded-md"&amp;gt;Default&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#badge-as-a-link"&gt;
  &lt;/a&gt;
  Badge as a link
&lt;/h2&gt;

&lt;p&gt;You can also easily change the badge component to become a link by changing the &lt;code&gt;span&lt;/code&gt; element to an anchor tag:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;a href="#" class="bg-blue-100 hover:bg-blue-200 text-blue-800 text-xs font-medium mr-2 px-2.5 py-0.5 rounded-md"&amp;gt;Default&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#badge-with-icon"&gt;
  &lt;/a&gt;
  Badge with icon
&lt;/h2&gt;

&lt;p&gt;Sometimes adding an icon can improve a lot in terms of UI and even usability. I recommend using SVG icons for better performance. Here's an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;span class="bg-gray-100 text-gray-800 text-xs font-medium inline-flex items-center px-2.5 py-0.5 rounded-md mr-2"&amp;gt;
  &amp;lt;svg class="w-3 h-3 mr-1 text-gray-500" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"&amp;gt;&amp;lt;path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clip-rule="evenodd"&amp;gt;&amp;lt;/path&amp;gt;&amp;lt;/svg&amp;gt;
  3 days ago
&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I hope this tutorial helps you in your journey with Tailwind and your project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tailwind-css-components-library-flowbite"&gt;
  &lt;/a&gt;
  Tailwind CSS Components Library - Flowbite
&lt;/h2&gt;

&lt;p&gt;This &lt;a href="https://flowbite.com/docs/components/badge/"&gt;Tailwind badge component&lt;/a&gt; is part of a larger Tailwind CSS components library that I helped develop. It is open source under the MIT license and it is also published on &lt;a href="https://github.com/themesberg/flowbite"&gt;Github&lt;/a&gt; and NPM.&lt;/p&gt;

&lt;p&gt;Learn more about Flowbite, a &lt;a href="https://flowbite.com/docs/getting-started/introduction/"&gt;Tailwind CSS components library&lt;/a&gt; by following the quickstart guide.&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>tutorial</category>
      <category>opensource</category>
    </item>
    <item>
      <title>💭 How to make clear &amp; pretty error messages from the Go backend to your frontend?</title>
      <author>Vic Shóstak</author>
      <pubDate>Mon, 27 Sep 2021 11:19:49 +0000</pubDate>
      <link>https://dev.to/koddr/how-to-make-clear-pretty-error-messages-from-the-go-backend-to-your-frontend-21b2</link>
      <guid>https://dev.to/koddr/how-to-make-clear-pretty-error-messages-from-the-go-backend-to-your-frontend-21b2</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Hey-hey, awesome DEV people! 😉&lt;/p&gt;

&lt;p&gt;How about a little time in the company of an article that teaches you how to better communicate with the frontend developers on your team? Intrigued, but don't know what it's about? Don't worry, I'll explain it all now!&lt;/p&gt;

&lt;p&gt;👀 I often notice an interesting trend in my work: the backend developer sends error statuses and explanations to the frontend, which are not always clear how to handle and output to the user in the application. As a result, the frontend developer spends precious time understanding what's going on and implementing borderline cases in the code.&lt;/p&gt;

&lt;p&gt;💡 But, what if I told you that errors from the backend can be not just readable to the developer, but understandable even to the user? Yes, that's accurately what this article will talk about! &lt;/p&gt;

&lt;p&gt;We will take a look at package &lt;a href="https://github.com/go-playground/validator"&gt;go-playground/validator&lt;/a&gt; &lt;code&gt;v10&lt;/code&gt;, which is almost the number one choice for such problems in Go.&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  📝 Table of contents
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#model-to-validate"&gt;Model to validate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#vanilla-representation-of-the-error-from-package"&gt;Vanilla representation of the error from package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#recreate-validator"&gt;Recreate validator&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#function-to-check-the-validation-error"&gt;Function to check the validation error&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#custom-validation-tag"&gt;Custom validation tag&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#override-error-message"&gt;Override error message&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#model-to-validate"&gt;
  &lt;/a&gt;
  Model to validate
&lt;/h2&gt;

&lt;p&gt;Imagine we need to implement backend validation of incoming data from &lt;code&gt;POST&lt;/code&gt; request to REST API endpoint of new project creation. Can you imagine? Okay, now let's describe this structure in Go code.&lt;/p&gt;

&lt;p&gt;Besides the standard attributes &lt;code&gt;db:"..."&lt;/code&gt; and &lt;code&gt;json:"..."&lt;/code&gt;, we need to add a new attribute &lt;code&gt;validate:"..."&lt;/code&gt; with the required validation tag from the &lt;code&gt;go-playground/validator&lt;/code&gt; package to each structure field that we need to validate.&lt;/p&gt;

&lt;p&gt;It only sounds very complicated, in fact, everything is much simpler. Look:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// ./app/models/project_model.go&lt;/span&gt;

&lt;span class="c"&gt;// Project struct to describe project.&lt;/span&gt;
&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Project&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Title&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`db:"title" json:"title" validate:"required,lte=25"`&lt;/span&gt; 
    &lt;span class="c"&gt;// --&amp;gt; verify that the field exists and is less than or equal to 25 characters&lt;/span&gt;

    &lt;span class="n"&gt;Description&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`db:"description" json:"description" validate:"required"`&lt;/span&gt;
    &lt;span class="c"&gt;// --&amp;gt; verify that the field exists&lt;/span&gt;

    &lt;span class="n"&gt;WebsiteURL&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`db:"website_url" json:"website_url" validate:"uri"`&lt;/span&gt;
    &lt;span class="c"&gt;// --&amp;gt; verify that the field is correct URL string&lt;/span&gt;

    &lt;span class="n"&gt;Tags&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`db:"tags" json:"tags" validate:"len=3"`&lt;/span&gt;
    &lt;span class="c"&gt;// --&amp;gt; verify that the field contains exactly three elements&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;☝️ &lt;strong&gt;Note:&lt;/strong&gt; These are not all the parameters by which you can configure field validation for your structures! You can find the full list &lt;a href="https://github.com/go-playground/validator#baked-in-validations"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;An interesting thing is that if we specify a validator to check, for example, if the URL validated, then we don't need to specify the &lt;code&gt;required&lt;/code&gt; validation tag anymore. This happens because an empty string is not a valid URL. &lt;/p&gt;

&lt;p&gt;In other words, almost any validation tag will also include a mandatory non-empty value (&lt;em&gt;empty string&lt;/em&gt;, &lt;em&gt;zero&lt;/em&gt;, &lt;em&gt;nil&lt;/em&gt;, …) for the field.&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vanilla-representation-of-the-error-from-package"&gt;
  &lt;/a&gt;
  Vanilla representation of the error from package
&lt;/h2&gt;

&lt;p&gt;Input JSON body (&lt;em&gt;here and below, we will work with these very input parameters for the JSON request body&lt;/em&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"website_url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"not-valid-uri"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"tags"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"one"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"two"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I will display the resulting error response as plain text so that you can appreciate why this presentation option for the frontend would &lt;em&gt;not&lt;/em&gt; be good:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Key: 'Project.Title' Error:Field validation for 'Title' failed on the 'required' tag

Key: 'Project.Description' Error:Field validation for 'Description' failed on the 'required' tag

Key: 'Project.WebsiteURL' Error:Field validation for 'WebsiteURL' failed on the 'uri' tag

Key: 'Project.Tags' Error:Field validation for 'Tags' failed on the 'len' tag
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And there are several important points that we want to improve right away.&lt;/p&gt;

&lt;p&gt;First, the frontend knows nothing about the structures and models in our application. If the backend returns an error in this form (&lt;em&gt;without specifying at least the field that failed validation&lt;/em&gt;), the frontend will not be able to make a visual output of the error for a particular field.&lt;/p&gt;

&lt;p&gt;Second, it's better to specify the exact names of the fields which the frontend works with — not &lt;code&gt;WebsiteURL&lt;/code&gt; but &lt;code&gt;website_url&lt;/code&gt;, like in JSON.&lt;/p&gt;

&lt;p&gt;Third, the error description itself will not tell the user (or even the frontend developer) anything useful, except that something went wrong somewhere.&lt;/p&gt;

&lt;p&gt;Well, let's try to improve it! &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;☝️ &lt;strong&gt;Note:&lt;/strong&gt; I will show you the way I do it on my projects. By the way, I'd be happy to get feedback and examples of how you customize error output for frontend in your projects.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recreate-validator"&gt;
  &lt;/a&gt;
  Recreate validator
&lt;/h2&gt;

&lt;p&gt;Great, we get rid of the fields with names, like in the structure. We just override their output, so that the validator looks at the &lt;code&gt;json:"..."&lt;/code&gt; parameter in the structure, not at its actual name.&lt;/p&gt;

&lt;p&gt;To complete this, we use the &lt;code&gt;RegisterTagNameFunc&lt;/code&gt; method built into the package with a little magic. I will put this in a different helper package (&lt;code&gt;./pkg/utilities/validator.go&lt;/code&gt;) so that there is more readable application code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// ./pkg/utilities/validator.go&lt;/span&gt;

&lt;span class="c"&gt;// NewValidator func for create a new validator for struct fields.&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;NewValidator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;validator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Validate&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Create a new validator.&lt;/span&gt;
    &lt;span class="n"&gt;validate&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;validator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;// Rename struct fields to JSON.&lt;/span&gt;
    &lt;span class="n"&gt;validate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RegisterTagNameFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fl&lt;/span&gt; &lt;span class="n"&gt;reflect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StructField&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SplitN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"json"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;","&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"-"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;validate&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to avoid renaming any of the fields, add &lt;code&gt;,-&lt;/code&gt; (comma + dash) to the end of its JSON name, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;WebsiteURL&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`db:"website_url" json:"website_url,-" validate:"uri"`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yes, you got me right, this method opens up great possibilities to customize the error output itself. You can rely not on &lt;code&gt;json:"..."&lt;/code&gt; attribute in the field, but on your one, for example, &lt;code&gt;field_name:"..."&lt;/code&gt; or any other one you wish.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;☝️ &lt;strong&gt;Note:&lt;/strong&gt; To understand how it works, please follow &lt;a href="https://github.com/go-playground/validator/issues/258"&gt;this&lt;/a&gt; issue.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#function-to-check-the-validation-error"&gt;
  &lt;/a&gt;
  Function to check the validation error
&lt;/h3&gt;

&lt;p&gt;Let's move on. It's time to make a nicer output of validation errors, so that the frontend developer on your team will thank you.&lt;/p&gt;

&lt;p&gt;I always use this practice when implementing a REST API in JSON format for internal use (&lt;em&gt;e.g., for &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/SPA"&gt;single-page applications&lt;/a&gt; aka SPA&lt;/em&gt;):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We return JSON in strictly consistent notation with the frontend, but relative to the interaction objects;&lt;/li&gt;
&lt;li&gt;The status code of the response from the backend is always &lt;code&gt;HTTP 200 OK&lt;/code&gt;, unless it concerns server errors (status code &lt;code&gt;5XX&lt;/code&gt;);&lt;/li&gt;
&lt;li&gt;The server response always contains the &lt;code&gt;status&lt;/code&gt; field (type &lt;code&gt;int&lt;/code&gt;) indicating the actual status code;&lt;/li&gt;
&lt;li&gt;If an error occurred (status code not &lt;code&gt;2ХХ&lt;/code&gt;), the server response always contains a field &lt;code&gt;msg&lt;/code&gt; (type &lt;code&gt;string&lt;/code&gt;) with a short indication of the cause of the error;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Furthermore, in the example below, I took code from my project written using the &lt;a href="https://gofiber.io/"&gt;Fiber&lt;/a&gt; web framework. So, some elements from its libraries are present there. Don't be scared, the main thing here is to understand the principle of validation itself.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;☝️ &lt;strong&gt;Note:&lt;/strong&gt; If you want to learn more about Fiber, I have a &lt;a href="https://dev.to/koddr/series/14132"&gt;series of articles&lt;/a&gt; to help you do that. I'd be glad if you'd study it later, too.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Okay, my function to check for validation errors would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// ./pkg/utilities/validator.go&lt;/span&gt;

&lt;span class="c"&gt;// ...&lt;/span&gt;

&lt;span class="c"&gt;// CheckForValidationError func for checking validation errors in struct fields.&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;CheckForValidationError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errFunc&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;statusCode&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;errFunc&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;"status"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"msg"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"validation errors for the %s fields"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="s"&gt;"fields"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ValidatorErrors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;errFunc&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The principle of this function is elementary:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Accept the Fiber context to have all the possibilities to work with the context that came;&lt;/li&gt;
&lt;li&gt;Accept the object with the validation error defined above;&lt;/li&gt;
&lt;li&gt;Accept the status code, which should return if the error occurs;&lt;/li&gt;
&lt;li&gt;Accept the name of the object (or model) we're currently checking, so we can output a more readable error message;&lt;/li&gt;
&lt;li&gt;Return the generated JSON with all the necessary errors and explanations or &lt;code&gt;nil&lt;/code&gt;;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I can now easily use the &lt;code&gt;CheckForValidationError&lt;/code&gt; function in the controller:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// ./app/controllers/project_controller.go&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c"&gt;// ...&lt;/span&gt;
    &lt;span class="s"&gt;"github.com/my-user/my-repo/pkg/utilities"&lt;/span&gt; 
    &lt;span class="c"&gt;// --&amp;gt; add local package `utilities`&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;// CreateNewProject func for create a new project.&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;CreateNewProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c"&gt;// ...&lt;/span&gt;

    &lt;span class="c"&gt;// Create a new validator, using helper function.&lt;/span&gt;
    &lt;span class="n"&gt;validate&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;utilities&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewValidator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;// Validate all incomming fields for rules in Project struct.&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;validate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Struct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// Returning error in JSON format with status code 400 (Bad Request).&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;utilities&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CheckForValidationError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusBadRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"project"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#custom-validation-tag"&gt;
  &lt;/a&gt;
  Custom validation tag
&lt;/h3&gt;

&lt;p&gt;Every so often, it happens that the built-in validation tags (or rather, the rules by which a particular field should be validated) are not always sufficient. To solve this problem, the authors of &lt;code&gt;go-playground/validator&lt;/code&gt; package provided a special method.&lt;/p&gt;

&lt;p&gt;Let's consider its use on a simple example 👇&lt;/p&gt;

&lt;p&gt;So, we have a field with type &lt;code&gt;uuid.UUID&lt;/code&gt; which we create with the package &lt;a href="https://github.com/google/uuid"&gt;google/uuid&lt;/a&gt;, which we want to check with the built-in validator &lt;code&gt;uuid.Parse()&lt;/code&gt; of that package. All we need to do is add a new &lt;code&gt;RegisterValidation&lt;/code&gt; method to the &lt;code&gt;NewValidator&lt;/code&gt; function (&lt;em&gt;described above&lt;/em&gt;) with simple logic code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// ./pkg/utilities/validator.go&lt;/span&gt;

&lt;span class="c"&gt;// NewValidator func for create a new validator for struct fields.&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;NewValidator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;validator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Validate&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Create a new validator.&lt;/span&gt;
    &lt;span class="n"&gt;validate&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;validator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;// ...&lt;/span&gt;

    &lt;span class="c"&gt;// Custom validation for uuid.UUID fields.&lt;/span&gt;
    &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;validate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RegisterValidation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"uuid"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fl&lt;/span&gt; &lt;span class="n"&gt;validator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FieldLevel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;fl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c"&gt;// convert to string&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;uuid&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt; &lt;span class="c"&gt;// field has error&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt; &lt;span class="c"&gt;// field has no error&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="c"&gt;// ...&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;validate&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it! If the field passed validation, it will return &lt;code&gt;false&lt;/code&gt; logical value, and if there are any errors it will return &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;☝️ &lt;strong&gt;Note:&lt;/strong&gt; The method &lt;code&gt;RegisterValidation&lt;/code&gt; should be read and understood like this: “&lt;em&gt;please check if there is an error in the value of the field with the validation tag &lt;code&gt;uuid&lt;/code&gt;?&lt;/em&gt;”.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now we can validate fields of this type like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// ./app/models/something_model.go&lt;/span&gt;

&lt;span class="c"&gt;// MyStruct struct to describe something.&lt;/span&gt;
&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;MyStruct&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;ID&lt;/span&gt; &lt;span class="n"&gt;uuid&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UUID&lt;/span&gt; &lt;span class="s"&gt;`db:"id" json:"id" validate:"uuid"`&lt;/span&gt; 
    &lt;span class="c"&gt;// --&amp;gt; verify that the field is a valid UUID&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cp_ZS6lB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d5trc230d303imerg3k6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cp_ZS6lB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d5trc230d303imerg3k6.jpg" alt="Override error message"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#override-error-message"&gt;
  &lt;/a&gt;
  Override error message
&lt;/h2&gt;

&lt;p&gt;And now for the best part. Overriding the validation error message itself. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;☝️ &lt;strong&gt;Note:&lt;/strong&gt; Follow comments in the code to better understand.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This helper function will map all validation errors to each field and then simply pass that map to the &lt;code&gt;CheckForValidationError&lt;/code&gt; function (&lt;em&gt;which we described in the previous section&lt;/em&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// ./pkg/utilities/validator.go&lt;/span&gt;

&lt;span class="c"&gt;// ...&lt;/span&gt;

&lt;span class="c"&gt;// ValidatorErrors func for show validation errors for each invalid fields.&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;ValidatorErrors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Define variable for error fields.&lt;/span&gt;
    &lt;span class="n"&gt;errFields&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="c"&gt;// Make error message for each invalid field.&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;validator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ValidationErrors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// Get name of the field's struct.&lt;/span&gt;
        &lt;span class="n"&gt;structName&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Namespace&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="c"&gt;// --&amp;gt; first (0) element is the founded name&lt;/span&gt;

        &lt;span class="c"&gt;// Append error message to the map, where key is a field name,&lt;/span&gt;
        &lt;span class="c"&gt;// and value is an error description.&lt;/span&gt;
        &lt;span class="n"&gt;errFields&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s"&gt;"failed '%s' tag check (value '%s' is not valid for %s struct)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tag&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;structName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;errFields&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you may have noticed, to override the field error message, we operate on special variables (&lt;code&gt;err.Namespace()&lt;/code&gt;, &lt;code&gt;err.Field()&lt;/code&gt;, &lt;code&gt;err.Tag()&lt;/code&gt; and &lt;code&gt;err.Value()&lt;/code&gt;) which the authors of the &lt;code&gt;go-playground/validator&lt;/code&gt; package offer us.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;☝️ &lt;strong&gt;Note:&lt;/strong&gt; You can find a complete list of all available ones &lt;a href="https://github.com/go-playground/validator/blob/master/_examples/simple/main.go#L69"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, we will get this message when we make an invalid request:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"status"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"msg"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"validation errors for the project fields"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"fields"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"category"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"failed 'required' tag check (value '' is not valid for Project struct)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"failed 'required' tag check (value '' is not valid for Project struct)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"tags"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"failed 'len' tag check (value '[one two]' is not valid for Project struct)"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"failed 'required' tag check (value '' is not valid for Project struct)"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"website_url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"failed 'uri' tag check (value 'not-valid-uri' is not valid for Project struct)"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;☝️ &lt;strong&gt;Note:&lt;/strong&gt; After validation, all not valid fields are in alphabetical order, not in the order that was defined by the Go structure.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hooray! 🎉 We got what we wanted and no one got hurt. On the contrary, everyone is happy, both on the frontend and the backend.&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#photos-and-videos-by"&gt;
  &lt;/a&gt;
  Photos and videos by
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Authors of the package &lt;code&gt;go-playground/validator&lt;/code&gt; feat. Vic Shóstak&lt;/li&gt;
&lt;li&gt;Markus Spiske &lt;a href="https://unsplash.com/photos/IiEFmIXZWSw"&gt;https://unsplash.com/photos/IiEFmIXZWSw&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ps"&gt;
  &lt;/a&gt;
  P.S.
&lt;/h2&gt;

&lt;p&gt;If you want more articles like this on this blog, then post a comment below and subscribe to me. Thanks! 😘&lt;/p&gt;

</description>
      <category>go</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Cypress Basic Learning</title>
      <author>Vital</author>
      <pubDate>Mon, 27 Sep 2021 11:17:38 +0000</pubDate>
      <link>https://dev.to/twitvital/about-cypress-26on</link>
      <guid>https://dev.to/twitvital/about-cypress-26on</guid>
      <description>&lt;p&gt;&lt;b&gt;What is Cypress&lt;/b&gt;&lt;br&gt;
• Cypress is a next generation front end testing tool built for the modern web. We address &lt;br&gt;
the key pain points developers and QA engineers face when testing modern &lt;br&gt;
applications. This enables you to write faster, easier, and more reliable tests.&lt;br&gt;
• Cypress is a JavaScript-based tool for frontend testing.&lt;br&gt;
• With it, you can write all types of tests: End-to-end tests, Integration tests, and Unit &lt;br&gt;
tests. &lt;br&gt;
Fast, easy and reliable testing for anything that runs in a browser.&lt;br&gt;
&lt;b&gt;Cypress Features&lt;/b&gt;&lt;br&gt;
• Time travel: Cypress takes snapshots as your tests run&lt;br&gt;
• Debugging: Readable errors and stack traces make debugging easier&lt;br&gt;
• Automatic waiting: Automatically waits for commands and assertions before moving &lt;br&gt;
on&lt;br&gt;
• Spies, stubs, and clocks: Verify and control the behavior of functions, server &lt;br&gt;
responses, or timers&lt;br&gt;
• Network Traffic Control: Control, stub, and test edge cases without involving the &lt;br&gt;
server&lt;br&gt;
• Screenshots and videos: View screenshots taken automatically on failure, or videos of &lt;br&gt;
your entire test suite when run from the CLI&lt;br&gt;
• Cross browser Testing: Run tests within Firefox and Chrome-family browsers &lt;br&gt;
(including Edge and Electron) locally&lt;br&gt;
&lt;b&gt;Pros &amp;amp; Cons&lt;/b&gt;&lt;br&gt;
Pros..&lt;br&gt;
• Cypress framework captures snapshots at the time of test execution. This allows QAs or &lt;br&gt;
developers to hover over a specific command in the Command Log to see exactly what &lt;br&gt;
happened at that particular step.&lt;br&gt;
• One doesn’t need to add explicit or implicit wait commands in test scripts, unlike &lt;br&gt;
Selenium. Cypress waits automatically for commands and assertions.&lt;br&gt;
• Auto reload, act as real user&lt;br&gt;
• Uses Mocha as a testing framework &amp;amp; chai is assertion library&lt;br&gt;
• Rich documentation&lt;br&gt;
Cons..&lt;br&gt;
• Only supports Javascript language &lt;br&gt;
• Only supports css selector&lt;br&gt;
• It doesn’t provide support for multi-tabs&lt;br&gt;
• Cypress doesn’t provide support for browsers like Safari at this moment.&lt;br&gt;
&lt;b&gt;Tech Stack&lt;/b&gt;&lt;br&gt;
• Cypress&lt;br&gt;
• VS code&lt;br&gt;
• Javascript Programming&lt;br&gt;
• Mocha framework&lt;br&gt;
• Reports: Mocha Awesome&lt;br&gt;
&lt;b&gt;Installation of Cypress&lt;/b&gt;&lt;br&gt;
• Download Node.js from &lt;a href="https://nodejs.org/en/download/"&gt;https://nodejs.org/en/download/&lt;/a&gt; as per your operating &lt;br&gt;
System, as the Cypress is build on the node.js&lt;br&gt;
• Create a folder and import the folder in Visual Studio code editor (or Atom,sublime) and &lt;br&gt;
open the terminal&lt;br&gt;
• Setup a new npm package : npm init&lt;br&gt;
• Open the terminal and enter npm install cypress --save-dev&lt;br&gt;
• Enter following command to open cypress studio ./node_modules/.bin/cypress open.&lt;br&gt;
• Refer Cypress installation documentation &lt;br&gt;
&lt;a href="https://docs.cypress.io/guides/getting-started/installing-cypress#npm-install"&gt;https://docs.cypress.io/guides/getting-started/installing-cypress#npm-install&lt;/a&gt;&lt;br&gt;
&lt;b&gt;Understanding folder structure&lt;/b&gt;&lt;br&gt;
• Fixtures: for all the test data information&lt;br&gt;
• Integration: for writing test cases &lt;br&gt;
• Plugins: kind of listeners, customized methods to handle cypress events&lt;br&gt;
• Support: for utility methods, like method, is getting used by many test cases. No need &lt;br&gt;
to import support folder, Cypress will automatically sense the method&lt;br&gt;
• Videos/Screenshots: for running tests&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br&gt;
Vital Kumar U&lt;br&gt;
&lt;a href="https://www.linkedin.com/in/vital-kumar-uppuluri/"&gt;Linkedin&lt;/a&gt;&lt;/p&gt;

</description>
      <category>cypressio</category>
      <category>javascript</category>
      <category>angular</category>
      <category>automationtesting</category>
    </item>
    <item>
      <title>AWS Resource Access Manager — Simple and powerful service for multi-account resource governance</title>
      <author>Serhii Vasylenko</author>
      <pubDate>Mon, 27 Sep 2021 11:16:27 +0000</pubDate>
      <link>https://dev.to/svasylenko/aws-resource-access-manager-simple-and-powerful-service-for-multi-account-resource-governance-11na</link>
      <guid>https://dev.to/svasylenko/aws-resource-access-manager-simple-and-powerful-service-for-multi-account-resource-governance-11na</guid>
      <description>&lt;p&gt;With a multi-account approach of building the infrastructure, there is always a challenge of provision and governance of the resources to subordinate accounts within the Organization. Provision resources, keep them up to date, and decommission them properly — that's only a part of them.&lt;/p&gt;

&lt;p&gt;AWS has numerous solutions that help make this process reliable and secure, and the Resource Access Manager (RAM) is one of them.&lt;/p&gt;

&lt;p&gt;In a nutshell, the RAM service allows you to share the AWS resources you create in one AWS account with other AWS accounts. These can be your organizations' accounts, organizational units (OU), or even third-party accounts.&lt;/p&gt;

&lt;p&gt;So let's see what the RAM is and review some of its usage examples. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-using-ram"&gt;
  &lt;/a&gt;
  Why using RAM
&lt;/h2&gt;

&lt;p&gt;There are several benefits of using the RAM service:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Reduced operational overhead&lt;/strong&gt;. Eliminate the need of provisioning the same kind of resource multiple times — RAM does that for you&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Simplified security management&lt;/strong&gt;. AWS RAM-managed permissions (at least one per resource type) define the actions that principals with access to the resources (i.e., resource users) can perform on those resources.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Consistent experience&lt;/strong&gt;. You share the resource in its state and with its security configuration with an arbitrary number of accounts. &lt;/p&gt;

&lt;p&gt;That plays incredibly well in the case of organization-wide sharing: new accounts get the resources automatically. And the shared resource itself looks like a native resource in the account that accepts your sharing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Audit and visibility&lt;/strong&gt;. RAM integrates with the CloudWatch and CloudTrail.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#how-to-share-a-resource"&gt;
  &lt;/a&gt;
  How to share a resource
&lt;/h2&gt;

&lt;p&gt;When you share a resource, the AWS account that owns that resource retains full ownership of the resource.&lt;/p&gt;

&lt;p&gt;Sharing of the resource doesn't change any permissions or quotas that apply to that resource. Also, you can share the resource only if you own it.&lt;/p&gt;

&lt;p&gt;Availability of the shared resources scopes to the Region: the users of your shared resources can access these resources only in the same Region where resources belong.&lt;/p&gt;

&lt;p&gt;Creation of resource share consists of three steps:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w-1pD6PT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8v6wrva946qfzv7ybpvr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w-1pD6PT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8v6wrva946qfzv7ybpvr.png" alt="AWS RAM diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Specify the share name and the resource(s) you want to share. It can be either one resource type or several. You can also skip the resources selection and do that later. &lt;/p&gt;

&lt;p&gt;It's possible to modify the resource share later (e.g., you want to add some resources to the share).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Associate permissions with resource types you share. Some resources can have only one managed permission (will be attached automatically), and some can have multiple.&lt;/p&gt;

&lt;p&gt;You can check the Permissions Library in the AWS RAM Console to see what managed permissions are available.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select who can use the resources you share: either external or Organization account or IAM role/user. If you share the resource with third parties, they will have to accept the sharing explicitly.&lt;/p&gt;

&lt;p&gt;Organization-wide resource share is accepted implicitly if resource sharing is enabled for the Organization.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Finally, review the summary page of the resource share and create it.&lt;/p&gt;

&lt;p&gt;Only specific actions are available to the users of shared resources. These actions mostly have the "read-only" nature and &lt;a href="https://docs.aws.amazon.com/ram/latest/userguide/shareable.html"&gt;vary by resource type&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also, the RAM service is &lt;a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ram_resource_share"&gt;supported by Terraform&lt;/a&gt;, so the resource sharing configuration may look like that, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight hcl"&gt;&lt;code&gt;&lt;span class="nx"&gt;resource&lt;/span&gt; &lt;span class="s2"&gt;"aws_ram_resource_share"&lt;/span&gt; &lt;span class="s2"&gt;"example"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;name&lt;/span&gt;                      &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"example"&lt;/span&gt;
  &lt;span class="nx"&gt;allow_external_principals&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;

  &lt;span class="nx"&gt;tags&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;Environment&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Production"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;resource&lt;/span&gt; &lt;span class="s2"&gt;"aws_ram_resource_association"&lt;/span&gt; &lt;span class="s2"&gt;"example"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;resource_arn&lt;/span&gt;       &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;aws_subnet&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;example&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;arn&lt;/span&gt;
  &lt;span class="nx"&gt;resource_share_arn&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;aws_ram_resource_share&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;example&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;arn&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#example-use-cases"&gt;
  &lt;/a&gt;
  Example use cases
&lt;/h2&gt;

&lt;p&gt;One of the trivial but valuable examples of RAM service usage is sharing a Manged Prefix List.&lt;br&gt;
Suppose you have some service user across your Organization, a self-hosted VPN server, for example. And you have a static set of IPs for that VPN: you trust these IPs and would like them to be allow-listed in other services.&lt;/p&gt;

&lt;p&gt;How to report these IPs to all organization accounts/users? &lt;/p&gt;

&lt;p&gt;And if the IP set changes, how to announce that change, and what should be done to reflect that change in services that depend on it, for example, Security Groups?&lt;/p&gt;

&lt;p&gt;The answer is a shared &lt;a href="https://docs.aws.amazon.com/vpc/latest/userguide/managed-prefix-lists.html#managed-prefix-lists-concepts"&gt;Managed Prefix List&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You create the list once in the account and share it across your Organization. Other accounts automatically get access to that list and can reference the list in their Security Groups. And when the list entry is changed, they do not need to perform any actions: their Security Groups will get the updated IPs implicitly.&lt;/p&gt;

&lt;p&gt;Another everyday use case of RAM is the VPC sharing that can form the foundation of the &lt;a href="https://aws.amazon.com/blogs/networking-and-content-delivery/vpc-sharing-a-new-approach-to-multiple-accounts-and-vpc-management/"&gt;multi-account AWS architectures&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;Of course, the RAM service is not the only way to organize and centralize resource management in AWS. There are Service Catalog, Control Tower, Systems Manager, Config, and others. However, the RAM is relatively simple to adopt but is capable of providing worthy outcomes.&lt;/p&gt;

&lt;p&gt;I hope the article was informative and relevant to you!&lt;/p&gt;

&lt;p&gt;If you liked it, please support me by sharing this article on social networks 🙏&lt;/p&gt;

</description>
      <category>aws</category>
      <category>devops</category>
      <category>architecture</category>
    </item>
    <item>
      <title>Prevent "window is not defined" Errors With a  useClientSide() Custom Hook</title>
      <author>Ash Connolly</author>
      <pubDate>Mon, 27 Sep 2021 11:09:41 +0000</pubDate>
      <link>https://dev.to/ashconnolly/prevent-window-is-not-defined-errors-with-a-useclientside-custom-hook-20f8</link>
      <guid>https://dev.to/ashconnolly/prevent-window-is-not-defined-errors-with-a-useclientside-custom-hook-20f8</guid>
      <description>&lt;p&gt;&lt;strong&gt;TLDR:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There is no &lt;code&gt;window&lt;/code&gt; object on the server - trying to access the &lt;code&gt;window&lt;/code&gt; object will thrown an error in server side rendered code, and in Node.js based development environments&lt;/li&gt;
&lt;li&gt;You can access &lt;code&gt;window&lt;/code&gt; in a &lt;code&gt;useEffect&lt;/code&gt; hook, as &lt;code&gt;uesEffect&lt;/code&gt; only runs on the client&lt;/li&gt;
&lt;li&gt;We want to avoid having to repeat this &lt;code&gt;useEffect&lt;/code&gt; logic in every component that needs to access &lt;code&gt;window&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Instead we can move this logic into a custom react hook to keep everything super tidy! 🎉&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The finished &lt;code&gt;useClientSide()&lt;/code&gt; hook:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useClientSide&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getUserAgent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userAgent&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userAgent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useClientSide&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getUserAgent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;userAgent&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;userAgent&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Heres a &lt;a href="https://stackblitz.com/edit/useclientside-hook?file=pages%2Findex.js"&gt;stackblitz⚡ Next.js demo&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h2&gt;

&lt;p&gt;When trying to access window with react frameworks like Next.js you might run into issues when trying to access the window object and see the following error: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MKeR5BRH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dawxjxnxxv94b6rqex6m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MKeR5BRH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dawxjxnxxv94b6rqex6m.png" alt="window is not defined error"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is because somewhere in your app window is trying to be accessed from the server, where it does not exist. &lt;/p&gt;

&lt;p&gt;In Next.js this could be because we're trying to access &lt;code&gt;window&lt;/code&gt; on a page that uses &lt;a href="https://nextjs.org/docs/basic-features/data-fetching#getserversideprops-server-side-rendering"&gt;getServerSideProps&lt;/a&gt;, which makes the page a server side rendered (SSR).&lt;/p&gt;

&lt;p&gt;You might think:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"But my app is static, with no server side rendering, why am I getting Server errors??"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Most development environments are created by running a local Node.js server (Next.js does this). And as Node.js runs on the server, there is no &lt;code&gt;window&lt;/code&gt; object&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example-problem-device-detection"&gt;
  &lt;/a&gt;
  Example Problem: Device Detection
&lt;/h2&gt;

&lt;p&gt;Say if you had a button, and on a touch device you want it to say &lt;strong&gt;"Tap here"&lt;/strong&gt;, otherwise it would say &lt;strong&gt;"Click here"&lt;/strong&gt;, you could check the &lt;code&gt;window&lt;/code&gt; object for &lt;code&gt;navigator.userAgent&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;This would tell us what device type they're on, like Android or IOS, and we could infer if it's a touch device. There are other ways to check touch devices, but for the purposes of this tutorial, we'll do it this way.&lt;/p&gt;

&lt;p&gt;You could approach it like this for client side rendered apps:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isTouchDevice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ua&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userAgent&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ua&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/Android|webOS|iPhone|iPad|iPod|BlackBerry|BB10|PlayBook|IEMobile|Opera Mini/i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isTouch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;isTouchDevice&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isTouch&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tap here!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Click here!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: I won't show the code for &lt;code&gt;isTouchDevice()&lt;/code&gt; again, just to keep the code examples clearer. Just remember it returns &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;! :)&lt;/p&gt;

&lt;p&gt;Here we are getting the &lt;code&gt;window.navigator.userAgent&lt;/code&gt; and then passing it into our function and checking if it contains any identifiers for touch devices, if it does return &lt;code&gt;true&lt;/code&gt;, otherwise return &lt;code&gt;false&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;However, this code will cause the &lt;code&gt;window is not defined&lt;/code&gt; error, as our local dev environment is running on a server, where there is no window object! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-common-but-not-ideal-solution"&gt;
  &lt;/a&gt;
  A Common, But Not Ideal Solution 🙅‍♂️
&lt;/h2&gt;

&lt;p&gt;We could check if window is not defined by adding this line at the top of any function that tries to access window:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;undefined&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note you cannot do &lt;code&gt;window === undefined&lt;/code&gt; as this assume would &lt;code&gt;window&lt;/code&gt; is declared, but has no value. When actually, &lt;code&gt;window&lt;/code&gt; hasn't been declared at all. This is the difference between:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;undefined&lt;/code&gt;: a variable that is declared but not initialised or defined (aka not given a value)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;not defined&lt;/code&gt;: a variable that has not been declared at all &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using &lt;code&gt;typeof window === 'undefined'&lt;/code&gt; is far from ideal and can cause rendering issues as explained in this brilliant in-depth article by &lt;a class="mentioned-user" href="https://dev.to/joshwcomeau"&gt;@joshwcomeau&lt;/a&gt;
: &lt;a href="https://www.joshwcomeau.com/react/the-perils-of-rehydration/"&gt;The Perils Of Rehydration&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-solution-only-reference-window-on-the-client"&gt;
  &lt;/a&gt;
  The Solution: Only Reference Window On The Client 👍
&lt;/h2&gt;

&lt;p&gt;We can do this by running our &lt;code&gt;isTouchDevice()&lt;/code&gt; function inside a &lt;code&gt;useEffect&lt;/code&gt;, which only runs on the client when the component mounts.&lt;/p&gt;

&lt;p&gt;We can also store the return value of &lt;code&gt;isTouchDevice()&lt;/code&gt; in state by using &lt;code&gt;useState&lt;/code&gt;. Storing it in state means that it's value is preserved during re-renders.&lt;/p&gt;

&lt;p&gt;Here's a working example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isTouchDevice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="c1"&gt;// returns true or false, see code above&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isTouch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setisTouch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setisTouch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isTouchDevice&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isTouch&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tap here!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Click here!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the component mounts (which only happens on the client) the function is run and the state of &lt;code&gt;isTouch&lt;/code&gt; is updated to a &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; value, which causes our button to show the correct messaging.&lt;/p&gt;

&lt;p&gt;🤔 But having to do this every time you want to use the &lt;code&gt;isTouchDevice&lt;/code&gt; function is really a hassle and will lead to lots of needless repetition of &lt;code&gt;useEffect()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What would be much neater is a custom react hook that obfuscates all of this logic, allowing us to do something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isTouch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useIsTouchDevice&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isTouch&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tap here!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Click here!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That would help make things easier, but something else would be better...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-step-further-making-a-raw-useclientside-endraw-hook"&gt;
  &lt;/a&gt;
  A Step Further: Making a &lt;code&gt;useClientSide()&lt;/code&gt; Hook! 🔥
&lt;/h2&gt;

&lt;p&gt;What would be even better than a &lt;code&gt;useIsTouchDevice()&lt;/code&gt; hook? A flexible, generalized custom hook that could take any function as an argument, and only run that function on the client side: a &lt;code&gt;useClientSide()&lt;/code&gt; hook! 😃&lt;/p&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useClientSide&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getUserAgent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userAgent&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userAgent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useClientSide&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getUserAgent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;userAgent&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;userAgent&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What this custom hook is doing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;taking a function as an argument&lt;/li&gt;
&lt;li&gt;calling that function in a &lt;code&gt;useEffect&lt;/code&gt; hook (which is only done on the client)&lt;/li&gt;
&lt;li&gt;saving what is returned by that function to the local state of the &lt;code&gt;useClientSide()&lt;/code&gt; hook&lt;/li&gt;
&lt;li&gt;then returning that local state value &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now let's use it with our &lt;code&gt;isTouchDevice()&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isTouchDevice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ua&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userAgent&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ua&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/Android|webOS|iPhone|iPad|iPod|BlackBerry|BB10|PlayBook|IEMobile|Opera Mini/i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useClientSide&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isTouch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useClientSide&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isTouchDevice&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isTouch&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tap here!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Click here!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Heres a &lt;a href="https://stackblitz.com/edit/useclientside-hook?file=pages%2Findex.js"&gt;stackblitz⚡ Next.js demo&lt;/a&gt;.  &lt;/p&gt;

&lt;p&gt;If you want to check the &lt;code&gt;isTouch&lt;/code&gt; is working as expected, just simulate a mobile device using your browser's dev tools. Like &lt;a href="https://developer.chrome.com/docs/devtools/device-mode/"&gt;device mode&lt;/a&gt; in chrome.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#done"&gt;
  &lt;/a&gt;
  Done!
&lt;/h2&gt;

&lt;p&gt;There we go! All working! We have a useful, reusable custom hook that allows use to run any client specific code easily! 😃 🎉&lt;/p&gt;

&lt;p&gt;I built this hook while building &lt;a href="http://episoderatings.com"&gt;episoderatings.com&lt;/a&gt; (a way to view episode ratings in a graph), to help me easily detect touch devices and display specific messaging! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qp6r0iBy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pmu59cj5jrtxau33zu3z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qp6r0iBy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pmu59cj5jrtxau33zu3z.png" alt="episode ratings"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you like React, Next.js and front end development, feel free to follow me and say hi on &lt;a href="http://twitter.com/_AshConnolly"&gt;twitter.com/_AshConnolly&lt;/a&gt;! 👋 🙂&lt;/p&gt;

&lt;p&gt;Stunning cover photo by &lt;a href="https://unsplash.com/photos/dEOC8M_lmxI"&gt;Spencer Watson on Unsplash!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>react</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Neo4j GraphQL Library 2.0.0</title>
      <author>Tomek Poniatowicz</author>
      <pubDate>Mon, 27 Sep 2021 11:03:20 +0000</pubDate>
      <link>https://dev.to/tomekponiat/neo4j-graphql-library-2-0-0-3cec</link>
      <guid>https://dev.to/tomekponiat/neo4j-graphql-library-2-0-0-3cec</guid>
      <description>&lt;p&gt;A while ago I wrote a bit about the GRAND stack, an integration of GraphQL, React, Apollo and the Neo4j Database. While working with the stack carries numerous benefits (and hey if you’re curious about those head on over and &lt;a href="https://blog.graphqleditor.com/grandstack"&gt;read about them here&lt;/a&gt;) it can be a bit overwhelming to get straight into it if you’re just starting out. So this time let's just look at the integration of the ‘G’ with the ‘N’ and with good reason as there is quite a bit of new stuff to check out there.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#from-grand-to-js"&gt;
  &lt;/a&gt;
  From GRAND to .js
&lt;/h2&gt;

&lt;p&gt;The GRAND stack has made use of combining the strengths of the Neo4j database with GraphQL for a while, but the team at Neo4j wasn't resting on their laurels and has been hard at work to improve on the benefits of combining the two technologies. In 2018 they released  a library neo4j-graphql.js, a GraphQL-to-Cypher based query execution layer for Neo4j and JavaScript GraphQL implementations. To put it short, something that gives you a fully functioning GraphQL API backed by Neo4j just by using type implementations from the GraphQL schema. The library was very useful and quite popular so it's not surprising they decided to build on that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#beta-and-100"&gt;
  &lt;/a&gt;
  Beta and 1.0.0
&lt;/h2&gt;

&lt;p&gt;In early april of 2021 the Neo4j team announced that after a year of hard work they’re releasing a beta of the Neo4j GraphQL library. Since then they’ve only picked up the pace with the full stable 1.0.0 release coming in that very same month. Even at just a glance the features look pretty enticing&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Automatic query and mutation generation for CRUD interactions&lt;/li&gt;
&lt;li&gt;Object Graph Mapper for programmatic interaction with your GraphQL API&lt;/li&gt;
&lt;li&gt;node and relationship properties support&lt;/li&gt;
&lt;li&gt;custom resolver support&lt;/li&gt;
&lt;li&gt;multiple pagination options&lt;/li&gt;
&lt;li&gt;authentication and authorisation options with additional access control options&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#onto-200"&gt;
  &lt;/a&gt;
  Onto 2.0.0
&lt;/h2&gt;

&lt;p&gt;Continuing with their blistering pace, neo4j dropped version 2.0.0 of their library on august tenth. While you could say that on the whole this library is a replacement or rather a continuation of the neo4j-graphql.js library with the sheer number of features it has far surpassed it. Aside from the usual stuff you can expect from a 2.0 update like bug fixes or performance improvements we have a few completely new features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;relationship properties&lt;/strong&gt;: This is the star of the show, adding relationships to your type definitions provides way more context for your data. This way when fetching data you will have a much clearer picture than you would with just disconnected nodes. This solution combines rich and interconnected data with the transparency of GraphQL letting you easily build apps even when using quite complex data sets.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Cursor-based pagination&lt;/strong&gt;: on relationship connected fields in your schema you’re able to use cursor-based pagination which is especially handy for infinitely scrolling apps&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Count queries&lt;/strong&gt;: if cursor based pagination is not your thing you can now use a simple query for counting all user nodes&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#graphql-easy-on-the-eye"&gt;
  &lt;/a&gt;
  GraphQL = easy on the eye
&lt;/h2&gt;

&lt;p&gt;That’s not all, the update also provides improvements to union relationship fields, more comprehensive validation of type definitions and various bug fixes. On the whole the key thing is still utilizing how good GraphQL is at displaying even complex data and relationships is probably the best way to take full advantage of that. Even if that doesn't convince you, with how quickly the development is going on this particular library, you can be sure a lot of additional features will be added very soon.&lt;/p&gt;

&lt;p&gt;Oh and make sure to check this video presenting Neo4j GraphQL Library in action:&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Ww3XclhuaaU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;&lt;em&gt;A guest blog post for &lt;a href="https://blog.graphqleditor.com/"&gt;GraphQL Editor blog&lt;/a&gt; by Michał Tyszkiewicz&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#speed-up-your-graphql-api-development"&gt;
  &lt;/a&gt;
  Speed up your GraphQL API development
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;GraphQL Editor&lt;/strong&gt; is a supportive tool for both advanced GraphQL users as well as those taking their first steps with GraphQL APIs. Our all-in-one development environment for GraphQL will help you build, manage &amp;amp; deploy your GraphQL API much faster. &lt;strong&gt;&lt;a href="https://graphqleditor.com"&gt;Try GraphQL Editor for free!&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>graphql</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
