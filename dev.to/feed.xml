<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>AWS Auto Scaling Groups</title>
      <author>Ajit Singh</author>
      <pubDate>Tue, 29 Jun 2021 04:14:44 +0000</pubDate>
      <link>https://dev.to/this-is-learning/aws-auto-scaling-groups-2od7</link>
      <guid>https://dev.to/this-is-learning/aws-auto-scaling-groups-2od7</guid>
      <description>&lt;p&gt;Last article we studied how to load balance our servers so that we can make them more reliable but adding servers manually still make our system brittle. At any time the load on our servers may increase. So, we need to set our servers in such a way that servers are added and removed automatically. This is what auto scaling groups are used for in AWS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-an-auto-scaling-group"&gt;
  &lt;/a&gt;
  What is an Auto Scaling Group?
&lt;/h2&gt;

&lt;p&gt;In the cloud you can create and get rid of serves very quickly and we don't know what kind of a load will be on our server. So, in order to ensure an optimum number of server quantity we use auto scaling groups. ASG adds EC2 instances and removes EC2 instances according to need. ASG automatically registers new EC2 instances as and when needed on the load balancer. It can also detect unhealthy instances and add new servers replacing them. This leads to cost savings and a robust system architecture. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-an-asg-work"&gt;
  &lt;/a&gt;
  How does an ASG work?
&lt;/h2&gt;

&lt;p&gt;In an ASG we give a minimum capacity, a maximum capacity and a preferred capacity. Our ASG starts from a preferred quantity and add or remove servers according to need. It registers all of them under a load balancer so that we can still take the advantage of one common DNS for all our servers, plus traffic is automatically balanced across our servers.&lt;/p&gt;

&lt;p&gt;In the next article we will see how to create a robust architecture in our EC2 instances using our load balancers and auto scaling groups.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloudskills</category>
      <category>cloud</category>
    </item>
    <item>
      <title>8 Websites You Should Visit To Learn Web Development  A Thread üßµ</title>
      <author>Manitej ‚ö°</author>
      <pubDate>Tue, 29 Jun 2021 03:03:44 +0000</pubDate>
      <link>https://dev.to/manitej/8-websites-you-should-visit-to-learn-web-development-a-thread-40lh</link>
      <guid>https://dev.to/manitej/8-websites-you-should-visit-to-learn-web-development-a-thread-40lh</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;this article is generated using (give a ‚≠ê) &lt;br&gt;
 &lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Manitej66"&gt;
        Manitej66
      &lt;/a&gt; / &lt;a href="https://github.com/Manitej66/twlog"&gt;
        twlog
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      This is a web app that converts Twitter threads into blogs in a single click üî•
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
twlog&lt;/h1&gt;
&lt;p&gt;This is a webapp which convert twitter threads into dev.to blogs in a single click&lt;/p&gt;
&lt;h2&gt;
Acknowledgements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/FeedHive/twitter-api-client"&gt;twitter api client&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Manitej66/twlog"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
 &lt;br&gt;
 &lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--tbV2dlOg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1388824183866490882/d0_IVyWr_normal.jpg" alt="Avni Gupta profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Avni Gupta
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @avnigupta_
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      8 Websites You Should Visit To Learn Web Development&lt;br&gt;&lt;br&gt;A Thread üßµ
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      14:24 PM - 28 Jun 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1409518155626545157" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1409518155626545157" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1409518155626545157" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--tbV2dlOg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1388824183866490882/d0_IVyWr_normal.jpg" alt="Avni Gupta profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Avni Gupta
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @avnigupta_
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      1. FreeCodeCamp (FREE) &lt;br&gt;&lt;br&gt;FreeCodeCamp is probably one of the best free resources on the internet to learn web development. It covers every topic you need to learn: HTML, CSS (Flexbox, Bootstrap, Sass, and Grid) and Javascript (Jquery, React). &lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/zjG5Vuywi9"&gt;freecodecamp.org&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      14:24 PM - 28 Jun 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1409518157409112064" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1409518157409112064" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1409518157409112064" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--tbV2dlOg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1388824183866490882/d0_IVyWr_normal.jpg" alt="Avni Gupta profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Avni Gupta
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @avnigupta_
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      2. Udemy (PAID)&lt;br&gt;&lt;br&gt;Udemy is an online learning platform covering every topic you can think of. Right now, it has over 80,000 courses ready to teach you to code. Its main advantage is that the courses are most of the time heavily discounted.&lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/1YLgcgJA7s"&gt;udemy.com/courses/develo‚Ä¶&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      14:24 PM - 28 Jun 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1409518159397146626" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1409518159397146626" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1409518159397146626" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--tbV2dlOg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1388824183866490882/d0_IVyWr_normal.jpg" alt="Avni Gupta profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Avni Gupta
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @avnigupta_
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      3. Coursera (FREE)&lt;br&gt;&lt;br&gt;Like Udemy, Coursera is a popular online learning platform where all the courses are free (Payment required for graded assignments). It was founded by Stanford professors Daphne Koller and Andrew Ng. &lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/MKk7WJF5jb"&gt;coursera.org&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      14:24 PM - 28 Jun 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1409518161804726275" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1409518161804726275" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1409518161804726275" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--tbV2dlOg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1388824183866490882/d0_IVyWr_normal.jpg" alt="Avni Gupta profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Avni Gupta
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @avnigupta_
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      4. Treehouse (Paid)&lt;br&gt;&lt;br&gt;Treehouse is a very well known online learning platform in web development. It has over 1000 quality videos covering topics like web development, web design, and entrepreneurship.&lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/gPjH1zHthT"&gt;teamtreehouse.com&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      14:24 PM - 28 Jun 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1409518163922853894" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1409518163922853894" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1409518163922853894" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--tbV2dlOg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1388824183866490882/d0_IVyWr_normal.jpg" alt="Avni Gupta profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Avni Gupta
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @avnigupta_
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      5. Codecademy (Free and Paid Version)&lt;br&gt;&lt;br&gt;Codeacademy is one of the most popular coding websites on the internet. It has taught more than 45 million users to code. Its main advantage is that it has many free courses.&lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/HTHENZoxig"&gt;codecademy.com&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      14:24 PM - 28 Jun 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1409518166078758915" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1409518166078758915" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1409518166078758915" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--tbV2dlOg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1388824183866490882/d0_IVyWr_normal.jpg" alt="Avni Gupta profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Avni Gupta
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @avnigupta_
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      6. W3Schools (Free)&lt;br&gt;&lt;br&gt;Very Similar to FreeCodeCamp, W3Schools is a website where you can learn all about programming and web development. You‚Äôll be able to learn the three core technologies of the web, HTML, CSS, and Javascript, Sass, Bootstrap, and React.&lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/0o8JSTRCXm"&gt;w3schools.com&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      14:24 PM - 28 Jun 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1409518168024834049" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1409518168024834049" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1409518168024834049" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;br&gt;
&lt;/blockquote&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Why Python?</title>
      <author>Let√≠cia Silva</author>
      <pubDate>Tue, 29 Jun 2021 02:51:45 +0000</pubDate>
      <link>https://dev.to/dii_lua/why-python-3ng0</link>
      <guid>https://dev.to/dii_lua/why-python-3ng0</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Of all the questions and doubts I get, I believe this one is universal. I will try to answer it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    Beautiful is better than ugly.
    Explicit is better than implicit.
    Simple is better than complex.
    Complex is better than complicated.
    Flat is better than nested.
    Sparse is better than dense.
    Readability counts.
    Special cases aren't special enough to break the rules.
    Although practicality beats purity.
    Errors should never pass silently.
    Unless explicitly silenced.
    In the face of ambiguity, refuse the temptation to guess.
    There should be one-- and preferably only one --obvious way to do it.
    Although that way may not be obvious at first unless you're Dutch.
    Now is better than never.
    Although never is often better than *right* now.
    If the implementation is hard to explain, it's a bad idea.
    If the implementation is easy to explain, it may be a good idea.
    Namespaces are one honking great idea -- let's do more of those!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#to-read-the-poem-above-just-install-python-on-your-computer-tutorial-avaliable-here-and-use-the-command"&gt;
  &lt;/a&gt;
  To read the poem above, just install Python on your computer (tutorial avaliable &lt;a href="https://www.python.org/downloads/"&gt;here&lt;/a&gt;) and use the command:
&lt;/h3&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import this
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Occupapying the 3rd position as the most used language in the world (source: &lt;a href="https://www.tiobe.com/tiobe-index/"&gt;TIOBE&lt;/a&gt;), Python has been looking for a constant demand, both from developers and from companies. It's high performance with large volumes of data has made the technology grow exponentially, and the trend is for it's applications to grow more and more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#but-where-did-it-came-from"&gt;
  &lt;/a&gt;
  But where did it came from?
&lt;/h2&gt;

&lt;p&gt;A dutchman, named Guido Van Rossum, created the language at Christmas &lt;strong&gt;1989&lt;/strong&gt;. It's C based, and it's name is a reference to the &lt;a href="https://en.wikipedia.org/wiki/Monty_Python%27s_Flying_Circus"&gt;Monty Python&lt;/a&gt; comedy series.&lt;/p&gt;

&lt;p&gt;It's goals are:  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;to be intuitive and easy to learn, yet still as good as languages ‚Äã‚Äãconsidered "powerful";  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;to have a syntax as intelligible as English;  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;to be open source, thus allowing other people to be able to contribute with ideas and features;  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;to be perfect for solving everyday's problems, providing faster development and a lower learning curve.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#why-should-i-learn-it"&gt;
  &lt;/a&gt;
  Why should I learn it?
&lt;/h2&gt;

&lt;p&gt;If the topics above are not enough to convince you to learn the language, I give to you a little help. As said, the language learning curve is low, which means that the language learning is fast and the trend is for you to produce code that is more and more intuitive - and faster.&lt;/p&gt;

&lt;p&gt;A few years ago, the &lt;strong&gt;MIT&lt;/strong&gt; (Massachusetts Institute of Technology) decided to use Python to introduce programming logic to it's students. The strategy was made because many students failed the subject. In Switzerland, the &lt;strong&gt;Fachhochschule Zurich&lt;/strong&gt; university works with the language in postgraduate courses.&lt;/p&gt;

&lt;p&gt;Already here in Brazil, we have these institutions teaching the disciplines of programming logic / programming with Python (as far as I could list):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;FATEC&lt;/strong&gt; (Faculty of Technology of S√£o Paulo) - some units;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;IMPACTA&lt;/strong&gt; (private college in S√£o Paulo);&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;USP&lt;/strong&gt; (University of S√£o Paulo);&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;IFRO&lt;/strong&gt; (Federal Institute of Rond√¥nia);&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;PUC-Rio&lt;/strong&gt; (Pontifical Catholic University of Rio de Janeiro);&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;UFC&lt;/strong&gt; (Federal University of Cear√°);&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;UFSCar&lt;/strong&gt; (Federal University of S√£o Carlos, S√£o Paulo);&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Mackenzie&lt;/strong&gt; (private college in S√£o Paulo);&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Infnet Institute&lt;/strong&gt; (private college in Rio de Janeiro);&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;UEFS&lt;/strong&gt; (State University of Feira de Santana, Bahia);&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;UNICSAL&lt;/strong&gt; (State University of Health Sciences of Alagoas);&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;UEA&lt;/strong&gt; (University of the State of Amazonas);&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;IFPB&lt;/strong&gt; (Federal Institute of Para√≠ba);&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;UERJ&lt;/strong&gt; (State University of Rio de Janeiro);&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;UFSC&lt;/strong&gt; (Federal University of Santa Catarina);&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Instituto Superior Tupy&lt;/strong&gt; (Private College of Joinville, Santa Catarina);&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;UEPB&lt;/strong&gt; (State University of Para√≠ba);&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;IFPI - Campus Picos&lt;/strong&gt; (Federal Institute of Piau√≠);&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;UNIFEI&lt;/strong&gt; (Federal University of Itajub√° - Minas Gerais);&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Est√°cio de S√° University&lt;/strong&gt; (Rio de Janeiro branch);&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;UFV&lt;/strong&gt; (Federal University of Vi√ßosa - Minas Gerais);&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;UNB&lt;/strong&gt; (Federal University of Bras√≠lia - Federal District);&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;UFMG&lt;/strong&gt; (Federal University of Minas Gerais);&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;IFF&lt;/strong&gt; (Instituto Federal Fluminense - RJ);&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;IFRN&lt;/strong&gt; (Federal Institute of Rio Grande do Norte);&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;UFCG&lt;/strong&gt; (Federal University of Campina Grande - Para√≠ba);&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;UFMS&lt;/strong&gt; (Federal University of Mato Grosso do Sul);&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;IFSP S√£o Carlos&lt;/strong&gt; (Federal Institute of S√£o Carlos, S√£o Paulo);&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;UFPR Litoral&lt;/strong&gt; (Federal University of Paran√°);&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;UCL&lt;/strong&gt; (University of Centro Leste - Esp√≠rito Santo);&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;IFRN - Cear√°-Mirim Campus&lt;/strong&gt; (Federal Institute of Rio Grande do Norte).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#thanks-to-followers-who-contributed-to-this-list-of-institutions-i-love-you"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Thanks to &lt;a href="https://twitter.com/dii_lua/status/1238225579239002117"&gt;followers&lt;/a&gt; who contributed to this list of institutions - I love you!&lt;/strong&gt;
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#and-what-is-it-for"&gt;
  &lt;/a&gt;
  And what is it for?
&lt;/h2&gt;

&lt;p&gt;Well, here's a broad question. When we talk about Python, the subject ranges from applications developed for the web to machine learning algorithms. Remember the first black hole photo made famous in 2019? So, several Python libraries were used to achieve this feat. Companies like Youtube, Google, Pinterest, Instagram, Spotify, Reddit, Dropbox and Quora also uses it in their applications.&lt;/p&gt;

&lt;p&gt;Below is an example list of technologies developed in Python and their respective areas of expertise:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Web development&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Django;&lt;/li&gt;
&lt;li&gt;Flask;&lt;/li&gt;
&lt;li&gt;Tornado;&lt;/li&gt;
&lt;li&gt;Web2Py;&lt;/li&gt;
&lt;li&gt;CherryPy;&lt;/li&gt;
&lt;li&gt;Bottle;&lt;/li&gt;
&lt;li&gt;TurboGears.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Information security&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;URLLib;&lt;/li&gt;
&lt;li&gt;Requests;&lt;/li&gt;
&lt;li&gt;Socket;&lt;/li&gt;
&lt;li&gt;HTTPLib;&lt;/li&gt;
&lt;li&gt;PyAesCrypt.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Data Science&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Scikit learn;&lt;/li&gt;
&lt;li&gt;NumPy;&lt;/li&gt;
&lt;li&gt;SciPy;&lt;/li&gt;
&lt;li&gt;Numba;&lt;/li&gt;
&lt;li&gt;TensorFlow;&lt;/li&gt;
&lt;li&gt;PyTorch;&lt;/li&gt;
&lt;li&gt;Keras;&lt;/li&gt;
&lt;li&gt;NLTK;&lt;/li&gt;
&lt;li&gt;SpaCy;&lt;/li&gt;
&lt;li&gt;Gensim;&lt;/li&gt;
&lt;li&gt;Scrapy;&lt;/li&gt;
&lt;li&gt;Beautiful Soup;&lt;/li&gt;
&lt;li&gt;Requests;&lt;/li&gt;
&lt;li&gt;PyOD;&lt;/li&gt;
&lt;li&gt;QGrid;&lt;/li&gt;
&lt;li&gt;LightGBM;&lt;/li&gt;
&lt;li&gt;Vaex;&lt;/li&gt;
&lt;li&gt;XGBoost;&lt;/li&gt;
&lt;li&gt;CatBoost;&lt;/li&gt;
&lt;li&gt;Matplotlib;&lt;/li&gt;
&lt;li&gt;Pandas;&lt;/li&gt;
&lt;li&gt;Plotly;&lt;/li&gt;
&lt;li&gt;LIME;&lt;/li&gt;
&lt;li&gt;Featuretools;&lt;/li&gt;
&lt;li&gt;StatsModels;&lt;/li&gt;
&lt;li&gt;Seaborn;&lt;/li&gt;
&lt;li&gt;Bokeh;&lt;/li&gt;
&lt;li&gt;Pydot.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Bioinformatics&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DB-API;&lt;/li&gt;
&lt;li&gt;Pillow;&lt;/li&gt;
&lt;li&gt;NumPy;&lt;/li&gt;
&lt;li&gt;HTMLgen;&lt;/li&gt;
&lt;li&gt;PyGTK;&lt;/li&gt;
&lt;li&gt;WxPython.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Statistics&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;*RPy;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Scipy;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;*PyChem.&lt;/p&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Image processing&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pillow;&lt;/li&gt;
&lt;li&gt;OpenCV;&lt;/li&gt;
&lt;li&gt;Scikit-image;&lt;/li&gt;
&lt;li&gt;SciPy;&lt;/li&gt;
&lt;li&gt;NumPy.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#why-has-it-become-so-well-known"&gt;
  &lt;/a&gt;
  Why has it become so well known?
&lt;/h2&gt;

&lt;p&gt;Unlike other famous languages ‚Äã‚Äãthat are owned by large companies, Python always kept it's source open and available to anyone who wanted to contribute. This helps the fact that people who adhere to the &lt;em&gt;open source&lt;/em&gt; movement are attracted to the universe of this technology, but it doesn't stop there.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It is a language that does not require the use of lots of special characters, making it's usage pretty simple;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It is also multiparadigm, which provides greater development experience;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It has an extensive internal library, which facilitates the use of the language and does not need to import from external libraries all the time;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It's &lt;em&gt;built-ins&lt;/em&gt; functions (i.e native functions), are always available;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It is extremely comprehensive and used by several areas that are not necessarily in STEM. For example: there are several journalists who are great Python programmers and I've met biomedics, accountants, physicists, geographers, mathematicians, neuroscientists, engineers, and people from various professions who program in the language;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It has an amazing community, which values ‚Äã‚Äãdiversity and inclusion, as well as being very welcoming. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#people-gt-technology"&gt;
  &lt;/a&gt;
  People &amp;gt; Technology
&lt;/h2&gt;

&lt;p&gt;And we come to my favorite part of this theme. For a lot of people, hearing about the community may seen strange or confusing, but I'll explain it. They are people (who don't need to be Python developers) that gather together to learn and share knowledge. As a person once taught me (** &amp;lt;3 **), there is a common phrase that defines it very well:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;     "Software community is when you bring together people who excel in teaching, people interested in learning, and people who have different levels of knowledge who interact with each other to make the same project."
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;And with that definition, I can explain a little better what communities are like. In this environment, people from different levels come together to help, learn, support, network, have ideas and develop them, promote initiatives (such as using programming for groups considered a minority in IT), provide a safe environment where they can evolve and find opportunities.&lt;/p&gt;

&lt;p&gt;Within the Python community, there are many of these groups. Check it out:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It has the &lt;strong&gt;GruPy's&lt;/strong&gt; or &lt;strong&gt;PUG's&lt;/strong&gt;, which are Python user groups and open to everyone;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;strong&gt;PyLadies&lt;/strong&gt;, an initiative to insert, encourage, and empower women in programming using Python;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;strong&gt;SciPy&lt;/strong&gt;, which is the scientific language community;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;strong&gt;AfroPython&lt;/strong&gt;, aimed to black people;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;PyData&lt;/strong&gt;, for people who like and / or work with data;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And there are several other language-specific groups! To learn more, you can access &lt;a href="https://wiki.python.org/moin/LocalUserGroups"&gt;here&lt;/a&gt; to find out about local groups, and &lt;a href="https://pyladies.com/locations/"&gt;here&lt;/a&gt; for local PyLadies groups.&lt;/p&gt;

&lt;p&gt;And it is in the midst of these people that emerges conections for the rest of their lives. Are you finding it exaggerated? I've seen job offers, dating requests, marriages, company partnerships, various partnerships, many friendships and hangouts that are forever imprinted in my memory. Here's the tip: go to a Python event and stay for the PyPub. You won't regret it :D&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ps-if-you-dont-have-a-local-group-where-you-live-why-not-create-one-to-start-a-community-just-have-the-will-and-initiative"&gt;
  &lt;/a&gt;
  PS .: If you don't have a local group where you live, why not create one? To start a community, just have the will and initiative!
&lt;/h3&gt;

&lt;p&gt;Now that I've told you a little about Python, I think it's clear why so many people like the language right?! So don't waste time and come to the Pythonic side of the force!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#little-kisses-lel%C3%AA-lt3"&gt;
  &lt;/a&gt;
  Little kisses! &lt;a href="//twitter.com/dii_lua"&gt;Lel√™&lt;/a&gt; &amp;lt;3
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--az8Rmcpx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/24clozqzr0dv01y3xxfm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--az8Rmcpx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/24clozqzr0dv01y3xxfm.png" alt="I choose you"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>community</category>
      <category>opensource</category>
    </item>
    <item>
      <title>About your transparent logo...</title>
      <author>Uli Troyo</author>
      <pubDate>Tue, 29 Jun 2021 01:59:47 +0000</pubDate>
      <link>https://dev.to/ulitroyo/about-your-transparent-logo-1ik0</link>
      <guid>https://dev.to/ulitroyo/about-your-transparent-logo-1ik0</guid>
      <description>&lt;p&gt;As more sites and apps support dark mode, I've seen tons of logos and profile avatars saved as transparent PNGs and SVGs begin to break. This is just a soft reminder that you should probably add a border of a contrasting color to your art before you save it:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u5H3cZ8i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gtp39rvy6eoatyprrp6k.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u5H3cZ8i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gtp39rvy6eoatyprrp6k.jpg" alt="Demo of logos with transparency shown over backgrounds of their same color, compared to the same transparent logos using a contrasting border."&gt;&lt;/a&gt;&lt;br&gt;
That's literally all I have to say! I've seen this a lot in the wild and it's apparent it bears to be mentioned. I hope you didn't need the help, but you're welcome if it did ;)&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>images</category>
    </item>
    <item>
      <title>Django vs React</title>
      <author>Zach</author>
      <pubDate>Tue, 29 Jun 2021 01:51:19 +0000</pubDate>
      <link>https://dev.to/zbretz/django-vs-react-3067</link>
      <guid>https://dev.to/zbretz/django-vs-react-3067</guid>
      <description>&lt;p&gt;Developing apps with frameworks. Yes! This is what I've been waiting for.&lt;/p&gt;

&lt;p&gt;Today is the start of Week 3 and while I know the foundational material we've been covering is critical -- and it has been helpful and rewarding (esp. the pair programming) -- I feel like we're just now getting into what I signed up for.&lt;/p&gt;

&lt;p&gt;Well after hearing so much about how great React is as a framework - it's intuitive and flexible, and I think our learning materials called it fun, and it'll make you breakfast in bed and so on, well my first hands-on experience landed like a sack of bricks.&lt;/p&gt;

&lt;p&gt;My app-building experience to date comes from learning and using Django, a MVC web-building framework for Python. Django felt intuitive. Now maybe I'm looking back on it through a time-distorted lens. Maybe I only remember the good times, when code was flying, my apps were growing, and I'm forgetting the growing pains.&lt;/p&gt;

&lt;p&gt;What's more, I'm not sure what I like about Python is directly comparable to what I find disorienting about React. I don't know React enough to say, and I may be comparing apples to french fries.&lt;/p&gt;

&lt;p&gt;But here's what I've seen on the front end from each. Take this with a grain of salt, I'm only a few hours deep with React.&lt;/p&gt;

&lt;p&gt;React works like this.&lt;/p&gt;

&lt;p&gt;Take a component that you want to build (like a grocery list). Populate it with data (bananas, etc), and wrap it up in some html-like syntax.&lt;/p&gt;

&lt;p&gt;First we have to create those grocery items (here they bold themselves when they're hovered over):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;GroceryListItem&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;onListItemClick&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;fontWeight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bold&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;onMouseOver&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onListItemClick&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Not cute.&lt;/p&gt;

&lt;p&gt;Okay, back to our list. It might look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;GroceryList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;GroceryListItem&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)}&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Map iterates over our items and generates those list elements complete with our grocery items.&lt;/p&gt;

&lt;p&gt;Wait, first, let's get those items, and attach our grocery list to our html document (in the #app div):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;GroceryList&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Cereal&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Broccoli&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Olive Oil&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;React has props, states, and other lingo that makes sense when I'm reading it, but somehow clears itself from my memory when I move to the next section of the docs.&lt;/p&gt;

&lt;p&gt;There's a lot to learn to implement the front-end.&lt;/p&gt;




&lt;p&gt;Django, I think, makes it more intuitive. Its front-end framework has you essentially writing normal html code, in an html document (a template) with some pythonic logic embedded.&lt;/p&gt;

&lt;p&gt;The above code might look something like this in a Django template:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;'app'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
    {% for item in groceries %}
      &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt; item &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    {% endfor %}
  &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This just &lt;em&gt;looks&lt;/em&gt; like html and makes it easy to visualize and understand the structure. Not appending things to other things, but nesting elements as they will be in our rendered template.&lt;/p&gt;

&lt;p&gt;Alright, I'm leaving out a lot. What's 'groceries' and where does it come from? Well it comes from the model. But we're not talking about the rest of the framework, I'm talking about how data is presented.&lt;/p&gt;

&lt;p&gt;Loops, conditional statements, formatting options, those are all available and stackable/nestable/etc within the html page itself. It feels like writing python. It feels intuitive.&lt;/p&gt;

&lt;p&gt;Learning is fun - but it's not fun when you're stubborn. And I feel like I'm stubbornly clinging to another way of doing something - the Django way. I'm going to embrace React and hope that over time, and with repetition, it becomes as intuitive to me as Django.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Introduction to styled-components (CSS-in-JS) in React</title>
      <author>Michael Burrows</author>
      <pubDate>Tue, 29 Jun 2021 00:58:51 +0000</pubDate>
      <link>https://dev.to/michaelburrows/introduction-to-styled-components-css-in-js-in-react-2dd6</link>
      <guid>https://dev.to/michaelburrows/introduction-to-styled-components-css-in-js-in-react-2dd6</guid>
      <description>&lt;p&gt;&lt;a href="https://styled-components.com/"&gt;styled-components&lt;/a&gt; provides a way to write CSS-in-JS. It was created to enhance the way CSS is written when styling React components. This tutorial will provide an introduction to styled-components so you can decide if it‚Äôs an approach you would like to use in future or existing React applications.&lt;/p&gt;

&lt;p&gt;For the purposes of this tutorial we‚Äôll create a simple component with some text and buttons like the following:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rxQ2oydY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x7nva0hf1bbhu2jmwkwt.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rxQ2oydY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x7nva0hf1bbhu2jmwkwt.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here‚Äôs how the markup for this component would be structured with traditional HTML:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"welcome"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Hello World!&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
    Accusantium enim placeat aperiam asperiores non earum. Sit rerum nihil
    omnis in velit voluptatem. Vero amet exercitationem aut. Praesentium
    sequi quisquam ducimus.
  &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
    Impedit iste fuga architecto. Blanditiis maiores labore sint qui fuga
    nemo id blanditiis. Iusto officia maxime consequatur est voluptatum
    voluptatem aut.
  &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-light"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;More Info&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt; 
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-dark"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Get Started&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the CSS would look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.welcome&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;    
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;480px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
  &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2.5em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.4em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.2em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.btn&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.75em&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.btn-light&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.btn-dark&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;darkblue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let‚Äôs now go through the process of converting this HTML and CSS into a styled-component.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h3&gt;

&lt;p&gt;The styled-components framework can be installed using either NPM or Yarn:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install styled-components
yarn add styled-components
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then imported into React as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#creating-components"&gt;
  &lt;/a&gt;
  Creating components
&lt;/h3&gt;

&lt;p&gt;First thing we need to do is convert the HTML markup into component based markup:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;Welcome&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;Heading&amp;gt;&lt;/span&gt;Hello World!&lt;span class="nt"&gt;&amp;lt;/Heading&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;Paragraph&amp;gt;&lt;/span&gt;
    Accusantium enim placeat aperiam asperiores non earum. Sit rerum nihil
    omnis in velit voluptatem. Vero amet exercitationem aut. Praesentium
    sequi quisquam ducimus.
  &lt;span class="nt"&gt;&amp;lt;/Paragraph&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;Paragraph&amp;gt;&lt;/span&gt;
    Impedit iste fuga architecto. Blanditiis maiores labore sint qui fuga
    nemo id blanditiis. Iusto officia maxime consequatur est voluptatum
    voluptatem aut.
  &lt;span class="nt"&gt;&amp;lt;/Paragraph&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;Button&lt;/span&gt; &lt;span class="na"&gt;light&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;More Info&lt;span class="nt"&gt;&amp;lt;/Button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;Button&lt;/span&gt; &lt;span class="na"&gt;dark&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Get Started&lt;span class="nt"&gt;&amp;lt;/Button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/Welcome&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#styling-components"&gt;
  &lt;/a&gt;
  Styling components
&lt;/h3&gt;

&lt;p&gt;styled-components utilises tagged template literals to style components. So in order to style our components we need to declare a variable that matches the component name and define what type of HTML element to render (div, h1, p, or button):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Welcome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`  
  margin: auto;
  max-width: 480px;  
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Heading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="s2"&gt;`
  margin-top: 0;
  font-size: 2.5em;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Paragraph&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="s2"&gt;`
  line-height: 1.4em;
  font-size: 1.2em;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="s2"&gt;`
  border: none;
  border-radius: 3px;
  color: white;
  font-size: 1em;
  font-weight: bold;
  margin: 1em 1em 0 0;
  padding: 0.75em 1em;  
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#adjusting-styling-using-props"&gt;
  &lt;/a&gt;
  Adjusting styling using props
&lt;/h3&gt;

&lt;p&gt;You may have noticed the buttons have a light &amp;amp; dark property attached to them. You can pass a function to a styled component‚Äôs template literal to modify the styling based on the property provided. We‚Äôll change the background color to be light or dark:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="s2"&gt;`
  ...
  background-color: &lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;light&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;blue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;darkblue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;CSS-in-JS was one of those things I was reluctant to use at first but after spending some time working with styled-components it‚Äôs something I‚Äôve grown to enjoy. If you‚Äôre interested in learning more about styled-components the full documentation can be found &lt;a href="https://styled-components.com/docs"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>react</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Core Concepts behind Java OOP</title>
      <author>Patricia Nicole</author>
      <pubDate>Tue, 29 Jun 2021 00:43:25 +0000</pubDate>
      <link>https://dev.to/pat_the99/core-concepts-behind-java-oop-2dom</link>
      <guid>https://dev.to/pat_the99/core-concepts-behind-java-oop-2dom</guid>
      <description>&lt;h2&gt;
  &lt;a href="#java-wilthinking1"&gt;
  &lt;/a&gt;
  [Java WILü§î#1]
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;I am reviewing for an Oracle Java Certification exam and decided to run through the documentation of Java's Nuts and Bolts. Check out the github repository for other &lt;a href="https://github.com/fatrixienicolieopetina/java-1z0819"&gt;review bullet points&lt;/a&gt;. Here are my notes for the core concepts behind Java's object-oriented programming (OOP).&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#what-are-objects"&gt;
  &lt;/a&gt;
  üìå What are Objects
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;An object is a software bundle of related state and behavior. Software objects are often used to model real-world objects found in everyday life&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Real world observations all translate into the world of object-oriented programming. Real-world objects share two characteristics, they all have &lt;strong&gt;&lt;em&gt;state&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;behavior&lt;/em&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Software objects are conceptually similar to real-world objects; they too, consist of state and related behavior. An object stores its state in &lt;strong&gt;fields&lt;/strong&gt; and exposes its behavior through &lt;strong&gt;methods&lt;/strong&gt;. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Methods&lt;/strong&gt; operate on an object's internal state and serve as the primary mechanism for object-to-object communication.&lt;/li&gt;
&lt;li&gt;Hiding internal state and requiring all interaction to be performed through an object's method is known as &lt;strong&gt;data ecapsulation&lt;/strong&gt;. &lt;/li&gt;
&lt;li&gt;By attributing state and providing methods for changing that state, the object remains in control of how the outside world is allowed to use it.&lt;/li&gt;
&lt;li&gt;Building code into individual software objects provide a number of benefits, including:

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Modularity&lt;/strong&gt; : The source code for an object can be written and maintained independently of the source code for other projects. Once created, an object can be easily passed around inside the system.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Information Hiding&lt;/strong&gt;. By interacting only with an object's methods, the details of its internal implementaion remain hidden from the outside world.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Code reuse&lt;/strong&gt; : If an object already exists (might have been written by another programmer), that can be used in the program. This allows specialists to implement/test/debug complex, task-specific objects, which can then be trusted in your own code.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Pluggability and Debugging Ease&lt;/strong&gt; . If a particular object turns out to be problematic, it can simply be removed from the application and plug in a different object as a replacement. Similar to fixing a mechanical problem in the real world, if a bolt breaks, it can be replaced, but not the entire machine.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#what-are-classes"&gt;
  &lt;/a&gt;
  üìå What are Classes
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;A class is a blueprint or prototype from which objects are created.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;In real world, many individual objects have the same kind, i.e. they are built from the same set of blueprints and therefore contains the same components.&lt;/li&gt;
&lt;li&gt;In object-oriented terms, a &lt;code&gt;class&lt;/code&gt; is the blueprint from which individual objects are created.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#what-is-inheritance"&gt;
  &lt;/a&gt;
  üìå What is Inheritance
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Inheritance provides a powerful and natural mechanism for organizing and structuring software.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Different kinds of objects often have a certain amount in common with each other. Yet, each also defines additional features that make them different. &lt;/li&gt;
&lt;li&gt;OOP allows classes to inherit commonly used state and behavior from other classes. &lt;/li&gt;
&lt;li&gt;In Java, each class is allowed to have &lt;strong&gt;one direct superclass&lt;/strong&gt; and each superclass has the potential for an &lt;strong&gt;unlimited number of subclasses&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#what-are-interfaces"&gt;
  &lt;/a&gt;
  üìå What are Interfaces
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;An interface is a contract between a class and the outside world. When a class implements an interface, it promises to provide the behavior published by that interface.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Methods form the object's interface with the outside world. &lt;/li&gt;
&lt;li&gt;In its most common form, an interface is a group of related methods with empty bodies.&lt;/li&gt;
&lt;li&gt;Implementing an interface allows a class to become more formal about the behavior it promises to provide. &lt;/li&gt;
&lt;li&gt;Interfaces form a &lt;strong&gt;contract&lt;/strong&gt; between the class and the outside world and this contract is enforced at &lt;strong&gt;build time by the compiler&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;If the class claims to implement an interface, all methods defined by that interface must appear in its source code before the class will successfully compile.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#what-are-packages"&gt;
  &lt;/a&gt;
  üìå What are Packages
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;A package is a namespace for organizing classes and interfaces in a logical manner. Placing code into packages makes large software projects easier to manage.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;A package is a namespace that organizes a set of related classes and interfaces. Conceptually they are similar to folders in a computer. &lt;/li&gt;
&lt;li&gt;Because the program might be composed of hundreds and thousands of individual classes, it makes sense to keep things organized by placing related classes and interfaces into packages.&lt;/li&gt;
&lt;li&gt;The Java platform provides an enormous class library (a set of packages) suitable for use in applications. This library is known as the &lt;strong&gt;"Application Programming Interface (API)"&lt;/strong&gt;. Its packages represent tasks most commonly associated with general-purpose programming. The &lt;a href="https://docs.oracle.com/javase/8/docs/api/index.html"&gt;Java Platform API Specification&lt;/a&gt; contains the complete listing for all packages, interfaces, classes, fields and methods supplied by the Java SE plaform.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#question-quiz-time"&gt;
  &lt;/a&gt;
  ‚ùì Quiz Time
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt;  &lt;em&gt;These questions are the review questions in the &lt;a href="https://docs.oracle.com/javase/tutorial/java/concepts/QandE/questions.html"&gt;Java documentation&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
  Real-world objects contain ‚ùì and ‚ùì.
  &lt;em&gt;Real-world objects contain &lt;strong&gt;states&lt;/strong&gt; and &lt;strong&gt;behaviors&lt;/strong&gt;.&lt;/em&gt; 


  A software object's state is stored in ‚ùì.
  &lt;em&gt;A software object's state is stored in &lt;strong&gt;fields&lt;/strong&gt;.&lt;/em&gt; 


  A software object's behavior is exposed through ‚ùì.
  &lt;em&gt;A software object's behavior is exposed through &lt;strong&gt;methods&lt;/strong&gt;.&lt;/em&gt; 


  Hiding internal data from the outside world, and accessing it only through publicly exposed methods is known as ‚ùì.
  &lt;em&gt;Hiding internal data from the outside world, and accessing it only through publicly exposed methods is known as &lt;strong&gt;data encapsulation&lt;/strong&gt;.&lt;/em&gt; 


  A blueprint for a software object is called a ‚ùì.
  &lt;em&gt;A blueprint for a software object is called a &lt;strong&gt;class&lt;/strong&gt;.&lt;/em&gt; 


  Common behavior can be defined in a ‚ùì and inherited into a ‚ùì using the ‚ùì keyword.
  &lt;em&gt;Common behavior can be defined in a &lt;strong&gt;superclass&lt;/strong&gt; and inherited into a &lt;strong&gt;subclass&lt;/strong&gt; using the &lt;strong&gt;&lt;code&gt;extends&lt;/code&gt;&lt;/strong&gt; keyword.&lt;/em&gt; 


  A collection of methods with no implementation is called an ‚ùì.
  &lt;em&gt;A collection of methods with no implementation is called an &lt;strong&gt;interface&lt;/strong&gt;.&lt;/em&gt; 


  A namespace that organizes classes and interfaces by functionality is called a ‚ùì.
  &lt;em&gt;A namespace that organizes classes and interfaces by functionality is called a &lt;strong&gt;package&lt;/strong&gt;.&lt;/em&gt; 


  The term API stands for ‚ùì ?
  &lt;em&gt;The term API stands for &lt;strong&gt;Application Programming Interface&lt;/strong&gt;.&lt;/em&gt; 

&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  [REFERENCES]
&lt;/h3&gt;

&lt;p&gt;[1] &lt;a href="https://docs.oracle.com/javase/tutorial/java/concepts/index.html"&gt;Java OOP Concepts&lt;/a&gt;&lt;/p&gt;

</description>
      <category>java</category>
      <category>oop</category>
      <category>codenewbie</category>
      <category>todayisearched</category>
    </item>
    <item>
      <title>Test ActionMailer `deliver_later` in RSpec Controller Tests</title>
      <author>Josh Branchaud</author>
      <pubDate>Tue, 29 Jun 2021 00:16:17 +0000</pubDate>
      <link>https://dev.to/jbranchaud/test-actionmailer-deliverlater-in-rspec-controller-tests-44h7</link>
      <guid>https://dev.to/jbranchaud/test-actionmailer-deliverlater-in-rspec-controller-tests-44h7</guid>
      <description>&lt;p&gt;A lot can happen when a Rails controller action gets called. This includes transactional emails getting queued up for delivery. To ensure our controller's behavior stays consistent as our app evolves we can write RSpec tests.&lt;/p&gt;

&lt;p&gt;Among other things these tests can ensure that transactional emails get queued for delivery at the appropriate times.&lt;/p&gt;

&lt;p&gt;This post documents a couple different methods I've used for those tests.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-actionmailerbasedeliveries-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;ActionMailer::Base.deliveries&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;If you have your &lt;code&gt;queue_adapter&lt;/code&gt; set to &lt;a href="https://api.rubyonrails.org/classes/ActiveJob/QueueAdapters/InlineAdapter.html"&gt;&lt;code&gt;:inline&lt;/code&gt;&lt;/a&gt;, then a &lt;code&gt;deliver_later&lt;/code&gt; will happen synchronously. So, the email will immediately end up in the &lt;code&gt;deliveries&lt;/code&gt; box.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s1"&gt;'#welcome'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'sends the welcome email to the user'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;valid_params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;user_id: &lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;expect&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="ss"&gt;:invite&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;params: &lt;/span&gt;&lt;span class="n"&gt;valid_params&lt;/span&gt;
    &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;change&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="no"&gt;ActionMailer&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;deliveries&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;count&lt;/span&gt; &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point you could even write an additional test to look at properties of the email that was sent, like who it was sent to and what the subject line said.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-haveenqueuedjob-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;have_enqueued_job&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The behavior is a bit different if your &lt;code&gt;queue_adapter&lt;/code&gt; is set to something like &lt;a href="https://api.rubyonrails.org/classes/ActiveJob/QueueAdapters/TestAdapter.html"&gt;&lt;code&gt;:test&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;async&lt;/code&gt;. In this case, the email is going to be queued in the app's job queue. Since it is not immediately being sent, the expectation will have to be about the job queue instead.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s1"&gt;'#welcome'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'sends the welcome email to the user'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;valid_params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;user_id: &lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;expect&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="ss"&gt;:invite&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;params: &lt;/span&gt;&lt;span class="n"&gt;valid_params&lt;/span&gt;
    &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;have_enqueued_job&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;ActionMailer&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;DeliveryJob&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can even dig into more specifics about what mailer class and method were invoked, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s1"&gt;'#welcome'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'sends the welcome email to the user'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;valid_params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;user_id: &lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;expect&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="ss"&gt;:invite&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;params: &lt;/span&gt;&lt;span class="n"&gt;valid_params&lt;/span&gt;
    &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;have_enqueued_job&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;ActionMailer&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;DeliveryJob&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'UserMailer'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'welcome'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'deliver_now'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://relishapp.com/rspec-staging/rspec-rails/docs/matchers/have-enqueued-mail-matcher"&gt;docs&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#receive-block-and-mail-double"&gt;
  &lt;/a&gt;
  Receive Block and Mail Double
&lt;/h2&gt;

&lt;p&gt;This approach mocks the mailer so that we can test that &lt;code&gt;deliver_later&lt;/code&gt; gets called. We take things a step further with the &lt;code&gt;receive&lt;/code&gt; method by using its &lt;code&gt;&amp;amp;block&lt;/code&gt; argument to make assertions about the values passed to the mailer method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s1"&gt;'#welcome'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'sends the welcome email to the user'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;mail_double&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;double&lt;/span&gt;
    &lt;span class="n"&gt;allow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mail_double&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:deliver_later&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;UserMailer&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:welcome&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;and_return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mail_double&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;valid_params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;user_id: &lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="ss"&gt;:invite&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;params: &lt;/span&gt;&lt;span class="n"&gt;valid_params&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#actionmailer-rspec-matcher"&gt;
  &lt;/a&gt;
  ActionMailer RSpec Matcher
&lt;/h2&gt;

&lt;p&gt;The previous approach requires a bit of boilerplate setup. If There is a way to go the (instance) double route, without duplicating this setup over and over. That can be achieved with a custom RSpec matcher. I've used some version of the following on many Rails projects.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# spec/support/mailer_matcher.rb&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"rspec/expectations"&lt;/span&gt;

&lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Matchers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;define&lt;/span&gt; &lt;span class="ss"&gt;:send_email&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;mailer_action&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;mailer_class&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;message_delivery&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;instance_double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;ActionMailer&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;MessageDelivery&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mailer_class&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mailer_action&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;and_return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message_delivery&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;allow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message_delivery&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:deliver_later&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Assuming the spec helper requires support files, this custom matcher will be available in your specs. Here is how to use it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s1"&gt;'#welcome'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'sends the welcome email to the user'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;UserMailer&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;send_email&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:welcome&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;valid_params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;user_id: &lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="ss"&gt;:invite&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;params: &lt;/span&gt;&lt;span class="n"&gt;valid_params&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These are the approaches I know about and use. If I'm missing an approach to testing ActionMailer, drop a note. I'd love to see how you're doing it.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you enjoy my writing, consider &lt;a href="https://crafty-builder-6996.ck.page/e169c61186"&gt;joining my newsletter&lt;/a&gt; or following me on &lt;a href="https://twitter.com/jbrancha"&gt;twitter&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;References:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jbranchaud/til/blob/master/rails/test-if-deliver-later-is-called-for-a-mailer.md"&gt;Test If deliver_later Is Called For A Mailer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/27647749/how-to-test-actionmailer-deliver-later-with-rspec"&gt;Related StackOverflow Question&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://api.rubyonrails.org/v6.0.3.6/classes/ActionMailer/TestHelper.html"&gt;&lt;code&gt;ActionMailer::TestHelper&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;em&gt;Cover photo by &lt;a href="https://unsplash.com/@timothyeberly?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Timothy Eberly&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/mail?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>rails</category>
      <category>ruby</category>
      <category>testing</category>
      <category>webdev</category>
    </item>
    <item>
      <title>üáßüá∑ | Produtividade com styled-components</title>
      <author>Diego Silva</author>
      <pubDate>Tue, 29 Jun 2021 00:04:26 +0000</pubDate>
      <link>https://dev.to/coderamos/produtividade-com-styled-components-67e</link>
      <guid>https://dev.to/coderamos/produtividade-com-styled-components-67e</guid>
      <description>&lt;p&gt;&lt;em&gt;Duas boas pr√°ticas para melhorar o seu projeto com essa biblioteca fenomenal&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;O &lt;strong&gt;styled-components&lt;/strong&gt; √© uma biblioteca para estilizar a sua aplica√ß√£o atrav√©s do JavaScript e √© utilizada principalmente na estiliza√ß√£o de projetos React e React Native.&lt;/p&gt;

&lt;p&gt;Quando pensamos em estilizar algo, tamb√©m dever√≠amos estar pensando em como organizar esses estilos, e para quem est√° come√ßando no mundo do desenvolvimento front end, essas duas pr√°ticas s√£o fundamentais para a escrita e manuten√ß√£o de um bom c√≥digo:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#crie-estilos-isolados"&gt;
  &lt;/a&gt;
  Crie estilos isolados
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Sempre que poss√≠vel, crie estilos isolados.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Atrav√©s dessa pr√°tica temos acesso aos estilos do seu componente de forma mais r√°pida e isso gera mais produtividade e torna a manutenibilidade seus estilos muito mais f√°cil.&lt;/p&gt;

&lt;p&gt;Uma pr√°tica muito utilizada no mercado √© criar o arquivo de estilos juntamente com o arquivo principal (&lt;code&gt;index.js&lt;/code&gt;) do seu componente / p√°gina.&lt;/p&gt;

&lt;p&gt;Nomear o seu arquivo como &lt;code&gt;styles.js&lt;/code&gt; ou &lt;code&gt;styled.js&lt;/code&gt; tamb√©m √© uma boa pr√°tica. Esses dois nomes s√£o muito utilizados.&lt;/p&gt;

&lt;p&gt;Como exemplo, essa √© a estrutura dos arquivos de estilo que utilizei em um template para React, no meu GitHub:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HyN5gUEF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h4lt44meb4ywjrbpi6zd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HyN5gUEF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h4lt44meb4ywjrbpi6zd.png" alt="files structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#crie-estilos-sem%C3%A2nticos"&gt;
  &lt;/a&gt;
  Crie estilos sem√¢nticos
&lt;/h3&gt;

&lt;p&gt;Apesar do styled-components ser muito conhecido e adotado, √© comum vermos muitos componentes de agrupamento e que deveriam possui escopo sem√¢ntico, sendo criados como uma simples &lt;code&gt;div&lt;/code&gt;. √â extremamente importante n√£o esquecermos de utilizar as tags de forma correta  e consciente.&lt;/p&gt;

&lt;p&gt;Esse √© um exemplo de como criamos e exportamos um componente estilizado com styled-components:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ExampleComponentContainer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;``&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Podemos acessar todas as outras tags como propriedades do styled, como &lt;code&gt;styled.header&lt;/code&gt;, &lt;code&gt;styled.nav&lt;/code&gt;, &lt;code&gt;styled.section&lt;/code&gt;, &lt;code&gt;styled.article&lt;/code&gt;, &lt;code&gt;styled.aside&lt;/code&gt;, &lt;code&gt;styled.footer&lt;/code&gt;, dentre outras.&lt;/p&gt;




&lt;p&gt;Voc√™ pode acessar o template mencionado acima clicando &lt;a href="https://github.com/coderamos/template-reactjs"&gt;aqui&lt;/a&gt;. Baixe o projeto ai e me diga o que achou!&lt;/p&gt;

</description>
      <category>css</category>
      <category>react</category>
      <category>translated</category>
      <category>beginners</category>
    </item>
    <item>
      <title>part 4: insertion, search in binary search tree0</title>
      <author>Aya Bouchiha</author>
      <pubDate>Mon, 28 Jun 2021 23:43:41 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/part-4-insertion-search-in-binary-search-tree-4h44</link>
      <guid>https://dev.to/ayabouchiha/part-4-insertion-search-in-binary-search-tree-4h44</guid>
      <description>&lt;p&gt;hi, this is part 4 of the tree data structure we'll explain binary search tree operations with their implementation such as insertion, and search.&lt;br&gt;
In the next post, we will talk about the deletion.&lt;br&gt;
#day_16&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#insertion-in-the-binary-search-tree"&gt;
  &lt;/a&gt;
  Insertion in the binary search tree
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Let's say we want to insert 17 in this binary search tree.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        20
      /    \
    12      23
  /   \    /  \
7     15  21   35
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Since 17 &amp;lt; 20, we will go to the left sub-tree.&lt;/li&gt;
&lt;li&gt;17 &amp;gt; 12, we will go the right.&lt;/li&gt;
&lt;li&gt;17 &amp;gt; 15 and the no more child in the right's why we will go to the right and insert it.
so this binary search tree above will be like this:
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        20
      /     \
    12       23
  /   \     /  \
7     15   21   35
        \
         17
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#the-insert-approach"&gt;
  &lt;/a&gt;
  The insert approach
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;We need to know that the inserted node will be always one of the binary search tree leaves.&lt;/li&gt;
&lt;li&gt;while the root is None(&lt;em&gt;null&lt;/em&gt;) store the previous root in a variable 

&lt;ol&gt;
&lt;li&gt;if the previousRoot is less than the elementToInsert moves to the root of the right sub-tree &lt;code&gt;root = root. right&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;else (&lt;em&gt;that means the previousRoot is greater than or equal the elementToInsert&lt;/em&gt;) move to the root of the left sub-tree &lt;code&gt;root = root. left&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;When the loop break (&lt;em&gt;stop&lt;/em&gt;), the previous root will be:

&lt;ol&gt;
&lt;li&gt;case 1:  &lt;code&gt;previousRoot = None&lt;/code&gt; if the binary search tree is empty. so the previousRoot will be the new Node &lt;code&gt;previousRoot = Node(elementToInsert)&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;case 2:  &lt;code&gt;previousRoot &amp;lt; elementToInsert&lt;/code&gt; if the previousRoot is less than the elementToInsert, so the node will be the right child of the previousRoot &lt;code&gt;previousRoot.right = elementToInsert&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;case 3: &lt;code&gt;previousRoot &amp;gt;= elementToInsert&lt;/code&gt; if the previousRoot is greater than or equal the elementToInsert, so the node will be the left child of the previousRoot &lt;code&gt;previousRoot.left = elementToInsert&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#implementation-of-insert-using-python"&gt;
  &lt;/a&gt;
  Implementation of insert using python
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elementToInsert&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# new node
&lt;/span&gt;    &lt;span class="n"&gt;TheNewNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elementToInsert&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;previousRoot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;previousRoot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;
        &lt;span class="c1"&gt;# if the root's value is less than elementToInsert
&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;elementToInsert&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;# the root variable will be the root of the right sub-tree
&lt;/span&gt;            &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;
        &lt;span class="c1"&gt;# if the root value is greater than or equal elementToInsert
&lt;/span&gt;        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;# the root variable will be the root of the left sub-tree
&lt;/span&gt;            &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;
    &lt;span class="c1"&gt;# if the binary search tree is empty
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;previousRoot&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;previousRoot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TheNewNode&lt;/span&gt;
    &lt;span class="c1"&gt;# if the previous root value is greater than or equal the elementToInsert
&lt;/span&gt;    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;previousRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;elementToInsert&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# the new node will be its left child
&lt;/span&gt;        &lt;span class="n"&gt;previousRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TheNewNode&lt;/span&gt;
    &lt;span class="c1"&gt;# if the previous root value is less than the elementToInsert
&lt;/span&gt;    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
        &lt;span class="c1"&gt;# the new node will be its right child
&lt;/span&gt;        &lt;span class="n"&gt;previousRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TheNewNode&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;TheNewNode&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#search-in-the-binary-search-tree"&gt;
  &lt;/a&gt;
  Search in the binary search tree
&lt;/h2&gt;

&lt;p&gt;We want to search for example the number 21&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        20
      /    \
    12      23
  /   \    /  \
7     15  21   35
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;start from the root and compare its value with the wanted number (20 &amp;lt; 21), so we will go to the right sub-tree and compare its root with the wanted element.&lt;/li&gt;
&lt;li&gt;(23 &amp;gt; 21), that's why we will go to the left sub-tree and compare its root with the wanted element.&lt;/li&gt;
&lt;li&gt;since (21 == 21), will return the node&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#the-search-approach"&gt;
  &lt;/a&gt;
  the search approach
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;compare the root value with the wanted element. 

&lt;ul&gt;
&lt;li&gt;If the root is None (null) &lt;em&gt;that means the element is not found&lt;/em&gt; return False. &lt;/li&gt;
&lt;li&gt;Else If the root is equal to the wanted element return the root.&lt;/li&gt;
&lt;li&gt;Else If the root is greater than it, return the same function with these arguments:(root of the left sub-tree, wanted element)&lt;/li&gt;
&lt;li&gt;Else (that means the root is less than the wanted element)  return the same function with these arguments:(root of the right sub-tree, wanted element)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#implementation-of-the-search-algorithm-in-the-binary-search-tree"&gt;
  &lt;/a&gt;
  implementation of the search algorithm in the binary search tree
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="c1"&gt;# If there are no more nodes.
&lt;/span&gt;    &lt;span class="c1"&gt;# that means the node value will be None(null)
&lt;/span&gt;    &lt;span class="c1"&gt;# that means the wanted element doesn't exist
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# the wanted element is not found so return False
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="c1"&gt;# if the root value is equal to the wanted element
&lt;/span&gt;    &lt;span class="c1"&gt;# that means the wanted element is found
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;wantedElement&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# return the node
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;
    &lt;span class="c1"&gt;# if the root value is smaller than  the wanted element
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;wantedElement&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# return the same function with the root of the right sub-tree
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;wantedElement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# if the root value is greater than or equal the wanted element
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;wantedElement&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# return the same function with the root of the left sub-tree
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;wantedElement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Happy coding! see you next post (&lt;em&gt;we will discuss deletion&lt;/em&gt;)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references-and-useful-resources"&gt;
  &lt;/a&gt;
  References and useful resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.geeksforgeeks.org/insert-a-node-in-binary-search-tree-iteratively/"&gt;https://www.geeksforgeeks.org/insert-a-node-in-binary-search-tree-iteratively/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.geeksforgeeks.org/binary-search-tree-data-structure/"&gt;https://www.geeksforgeeks.org/binary-search-tree-data-structure/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.javatpoint.com/insertion-in-binary-search-tree"&gt;https://www.javatpoint.com/insertion-in-binary-search-tree&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>algorithms</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>Conviction to Code</title>
      <author>commdao</author>
      <pubDate>Mon, 28 Jun 2021 23:40:58 +0000</pubDate>
      <link>https://dev.to/commdao/conviction-to-code-1fph</link>
      <guid>https://dev.to/commdao/conviction-to-code-1fph</guid>
      <description>&lt;p&gt;I reached a &lt;em&gt;great&lt;/em&gt; milestone moment in this coding journey recently. &lt;/p&gt;

&lt;p&gt;For the past month and a half I've tried to buckle down on my routine and study habits. I know it's repeated often (and with good reason) to make your own projects. Don't &lt;em&gt;only&lt;/em&gt; follow along in a tutorial. And I've been trying to stick to that. I've also started writing some of the code with pen and paper, hoping to have it be better ingrained.&lt;/p&gt;

&lt;p&gt;But with coding being so different from most of the things I've done before, progress &lt;em&gt;felt&lt;/em&gt; stagnant still. A little different from imposter syndrome, but I'd get frustrated and just wonder &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;am I really ever going to be able to learn this coding stuff?&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And then I remember, this feeling isn't so different at all. &lt;/p&gt;

&lt;p&gt;Well, I didn't come to that realization on my own. &lt;a href="https://youtu.be/vP2MNhC_Igw"&gt;WebDevSimplified has a video about not needing to memorize code.&lt;/a&gt; My mentor introduced a "simplified" function that really intimidating:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4qKN3C28--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/11he8l4ltx5cqdz4ifxb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4qKN3C28--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/11he8l4ltx5cqdz4ifxb.jpg" alt="Blurred Because Mentor Shame"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But he reminded me that the important thing isn't knowing every single component, and instead, simply being able to think through the process.&lt;/p&gt;

&lt;p&gt;And that's an experience that is very familiar. I had it when learning Japanese (a language very different from Spanish or French). Learning the writing system is a daunting task, but I excelled at speaking because I knew how to think through a conversation. &lt;/p&gt;

&lt;p&gt;I had it when starting my fitness journey. In the beginning, you might not know all the exercises and machines, but you probably have an idea of what you're hoping to work. And that small sense, even if completely misguided, can separate those who are feeling iffy on what they're doing vs. those who absolutely have no idea what they're doing.&lt;/p&gt;

&lt;p&gt;You don't have to know everything. And when you hit that moment where you don't know something-- yeah it can still suck. But knowing that you don't know something in particular, that's still an advantage.&lt;/p&gt;

&lt;p&gt;In fighting games I get overwhelmed by all the options available constantly. &lt;br&gt;
&lt;/p&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PKR6G-FG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/ext_tw_video_thumb/1407913151077650434/pu/img/J5iMq13ykrToIY_2.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--cgmpAdeo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1393392228358369282/CQNKDTkT_normal.jpg" alt="Jon Dao profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Jon Dao
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/commdao"&gt;@commdao&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Found a &lt;a href="https://twitter.com/hashtag/BBCF"&gt;#BBCF&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/NintendoSwitch"&gt;#NintendoSwitch&lt;/a&gt; ranked match! I get bodied as expected... 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      04:07 AM - 24 Jun 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1407913201312833539" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1407913201312833539" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1407913201312833539" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;It's a very pulverizing genre, and it makes total sense why a lot of people would rather play something else. But it's super helpful for those who want to stick with it to know that's part of the process. You can't know all the options when you're new.&lt;/p&gt;

&lt;p&gt;Doing well doesn't even really show you how much you've learned. It's encountering the problem (again and again sometimes), and finding out how to get out of it... that's what it's all about.&lt;/p&gt;

&lt;p&gt;And eventually, all these options that used to feel overwhelming? They're going to feel pretty damn freeing when you can flex them. üí™&lt;/p&gt;




&lt;p&gt;I titled this post the way I did because of the plot from Dragon Zakura. One of the core themes is drawing out the sense of conviction, and I like that word a lot since "sense of belief" and "motivation" have been overtaken by toxic positivity.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2FJjwBv5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/BrA1uuiCIAEymvJ.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--cgmpAdeo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1393392228358369282/CQNKDTkT_normal.jpg" alt="Jon Dao profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Jon Dao
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/commdao"&gt;@commdao&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      "On a test, there's always one right answer. If you don't find that right answer, you fail..." &lt;a href="https://twitter.com/hashtag/Quotes"&gt;#Quotes&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/DragonZakura"&gt;#DragonZakura&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      23:37 PM - 25 Jun 2014
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=481944238616494080" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=481944238616494080" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=481944238616494080" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;It's nice to be inspired. It's nice to have reminders for your self-esteem. Yet, those can be fleeting.&lt;/p&gt;

&lt;p&gt;With conviction, it's set. &lt;/p&gt;

&lt;p&gt;For now, after feeling pretty directionless for some time, I know I want to keep coding!  &lt;/p&gt;

</description>
      <category>motivation</category>
      <category>codenewbie</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Netflix Clone using ReactJS, Python (Flask), and TMDB API</title>
      <author>Srinandan Komanduri</author>
      <pubDate>Mon, 28 Jun 2021 23:33:22 +0000</pubDate>
      <link>https://dev.to/keidakira/netflix-clone-using-reactjs-python-flask-and-tmdb-api-3c52</link>
      <guid>https://dev.to/keidakira/netflix-clone-using-reactjs-python-flask-and-tmdb-api-3c52</guid>
      <description>&lt;p&gt;Well, one day I was recommended by YouTube a video named "Build Netflix Clone in React" and I was like.... that's a cool idea. And that is how I spent four days non-stop building a Netflix clone. And here is the  &lt;a href="https://my-watchlist-eba0a.web.app/"&gt;demo&lt;/a&gt; :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WNVmztOT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624921448789/H64jPqpMy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WNVmztOT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624921448789/H64jPqpMy.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;I built the front-end in ReactJS and hosted it on firebase.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For the back-end, I used Python with Flask since I needed some web-scraping work to be done.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As for getting the info about movies, I used &lt;a href="https://developers.themoviedb.org/3/getting-started/introduction"&gt;TMDB&lt;/a&gt; API along with JustWatch for getting the sources where we can stream movies/shows/anime, as shown below for the anime Jujutsu Kaisen:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s42TaHPG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624922736286/XJr5ZWn8x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s42TaHPG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624922736286/XJr5ZWn8x.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are interested in the code, you can get the repo &lt;a href="https://github.com/keidakira/my-watchlist"&gt;here&lt;/a&gt;, if any of you are interested to know how I built it, then I'll definitely write a tutorial on it!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>showdev</category>
      <category>python</category>
    </item>
  </channel>
</rss>
