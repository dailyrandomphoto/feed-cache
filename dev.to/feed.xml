<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Spring internal micro-service driven communication</title>
      <author>Elattar Saad </author>
      <pubDate>Sat, 01 Jan 2022 20:04:18 +0000</pubDate>
      <link>https://dev.to/xrio/spring-internal-micro-service-driven-communication-5co8</link>
      <guid>https://dev.to/xrio/spring-internal-micro-service-driven-communication-5co8</guid>
      <description>&lt;p&gt;During the solution architecture phase, especially when we're talking micro-services, we need a sort of internal exchange&lt;br&gt;
of data, they're many tools to do so, such as Spring rest template and web client, but I'm using the one I find the simplest of them all:&lt;br&gt;
Yes, &lt;strong&gt;OpenFeign&lt;/strong&gt;!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#installing-openfeign"&gt;
  &lt;/a&gt;
  Installing OpenFeign
&lt;/h2&gt;

&lt;p&gt;First, we add the OpenFeign dependency (inside the pom.xml file), so it will be imported by Maven (our dependency manager).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-cloud-starter-openfeign&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;3.1.0&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;

&amp;lt;dependencyManagement&amp;gt;
        &amp;lt;dependencies&amp;gt;
            &amp;lt;dependency&amp;gt;
                &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;
                &amp;lt;artifactId&amp;gt;spring-cloud-dependencies&amp;lt;/artifactId&amp;gt;
                &amp;lt;version&amp;gt;${spring-cloud.version}&amp;lt;/version&amp;gt;
                &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;
                &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt;
            &amp;lt;/dependency&amp;gt;
        &amp;lt;/dependencies&amp;gt;
&amp;lt;/dependencyManagement&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you already noticed, we are using a tool which belongs to the spring cloud project, as result, we need to set the Spring cloud version we're using.&lt;br&gt;
In side the properties tag, we'll add both, java and spring cloud versions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;properties&amp;gt;
    &amp;lt;java.version&amp;gt;1.8&amp;lt;/java.version&amp;gt;
    &amp;lt;spring-cloud.version&amp;gt;2021.0.0&amp;lt;/spring-cloud.version&amp;gt;
&amp;lt;/properties&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Please note that I'm using Spring boot version &lt;code&gt;2.6.1&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Also note that I'll be using the &lt;a href="https://github.com/xrio/spring-boot-movies-api"&gt;movies project&lt;/a&gt; from the previous articles&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After having all the needed dependencies, we still have to declare our app is using OpenFeign in a certain package.&lt;br&gt;
We decorate our main class with the &lt;code&gt;@EnableFeignClients&lt;/code&gt; with the target package which will have the feign clients.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@SpringBootApplication
@EnableFeignClients("io.xrio.movies.controller.client")
public class MoviesApplication {
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#openfeign-client-implementation"&gt;
  &lt;/a&gt;
  OpenFeign client implementation
&lt;/h2&gt;

&lt;p&gt;In the  the implementation, I will be sending a simple get request to the jsonplaceholder API (acting as the second micro-service) to get a list of posts using OpenFeign:&lt;/p&gt;

&lt;p&gt;
  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6Ryot6Xv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://elattar.me/images/spring/spring-inter-comm-arch.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6Ryot6Xv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://elattar.me/images/spring/spring-inter-comm-arch.png" width="880" height="250"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;In order to make use the Json/POJO auto-conversion which Spring Boot offers, we'll be using a DTO to manipulate the received/sent data (posts).&lt;br&gt;&lt;br&gt;
Inside the controller &amp;gt; dto package, we create the PostDTO.java file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@Data
public class PostDTO {

    private Long id;
    private Long userId;
    private String title;
    private String body;

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note that the structure of the DTO is defined by the response of the jsonplaceholder API.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Next, we create our post client (feign client), which is going to be like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@FeignClient(name = "jsonplaceholder", url = "https://jsonplaceholder.typicode.com/posts")
public interface PostClient {

    @GetMapping
    List&amp;lt;PostDTO&amp;gt; getPosts();

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;@FeignClient&lt;/code&gt; will declare this interface as a feign client in order to be implemented according to our needs.&lt;br&gt;&lt;br&gt;
The name attribute mainly useless in this case since we're not addressing the api with a name, but using its url instead. The name is used when a naming registry is integrated (a future article is on the way).   &lt;/p&gt;

&lt;p&gt;And just like magic, that's all for our client!&lt;/p&gt;

&lt;p&gt;Now we need to call our client and return the response to our user. We'll create a PostController which does just that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@RestController
@RequestMapping("post")
@AllArgsConstructor
public class PostController {

    final PostClient postClient;

    @GetMapping
    public List&amp;lt;PostDTO&amp;gt; getPosts(){
        return postClient.getPosts();
    }


}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, that's what you will get when invoking this PostController method:&lt;/p&gt;

&lt;p&gt;
  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m7eDtSdF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://elattar.me/images/spring/spring-inter-comm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m7eDtSdF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://elattar.me/images/spring/spring-inter-comm.png" width="880" height="509"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;More articles &lt;a href="https://elattar.me/"&gt;Here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>springcloud</category>
      <category>java</category>
      <category>openfeign</category>
      <category>spring</category>
    </item>
    <item>
      <title>Top 10 Most Useful Python Libraries For Data Scientists</title>
      <author>Ayesha Sahar</author>
      <pubDate>Sat, 01 Jan 2022 19:49:19 +0000</pubDate>
      <link>https://dev.to/iayeshasahar/top-10-most-useful-python-libraries-for-data-scientists-1d3d</link>
      <guid>https://dev.to/iayeshasahar/top-10-most-useful-python-libraries-for-data-scientists-1d3d</guid>
      <description>&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Table of Contents&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="#introduction"&gt;Introduction&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#1"&gt;Pandas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2"&gt;NumPy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#3"&gt;TensorFlow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#4"&gt;Scikit-learn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#5"&gt;Sci-Py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#6"&gt;Matplotlib&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#7"&gt;Seaborn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#8"&gt;Keras&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#9"&gt;Scrapy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#10"&gt;BeautifulSoup&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Introduction&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;As you guys know, Python is a popular language that is assisting developers in creating PC, games, mobile, and other types of applications. This is possible due to its libraries that are almost more than 137,000 in number. Crazy right? Moreover, in this world that revolves around data where buyers demand relevant information while buying, big companies or even small start-ups require "data scientists" to get valuable insights by processing massive data sets.&lt;/p&gt;

&lt;p&gt;The results of such an analysis guide them in critical decision making, business operations, and various other tasks that require valuable information to be completed efficiently. Now you might be thinking, how do data scientists accomplish all this? The answer is simple, as mentioned above, they use various libraries to perform these tasks. &lt;/p&gt;

&lt;p&gt;So, here is a list of the top 10 most useful Python libraries for data scientists;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-pandas"&gt;
  &lt;/a&gt;
  &lt;strong&gt;1. Pandas&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;It was basically created as a community library project and released around 2008. It provides various high-performance, easy-to-use data structures and operations for manipulating data in the form of numerical tables and time series. Pandas also has multiple tools for reading and writing data between in-memory data structures and different file formats. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-and-applications"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Features and Applications:&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;• Good syntax with various functionalities that gives you the freedom to even deal with some missing data.&lt;/p&gt;

&lt;p&gt;• It helps you make your own function and then run it across a series of data.&lt;/p&gt;

&lt;p&gt;• It has high-level abstraction.&lt;/p&gt;

&lt;p&gt;• It contains high-level data structures &amp;amp; manipulation tools.&lt;/p&gt;

&lt;p&gt;• It helps to perform data wrangling and data cleaning.&lt;/p&gt;

&lt;p&gt;• It is used in a variety of academic areas, commercial areas, statistics, finance and even neuroscience.&lt;/p&gt;

&lt;p&gt;• It has time-series-specific functionality like date range generation, date shifting, linear regression, and moving window.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#documentation"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Documentation:&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://pandas.pydata.org/docs/"&gt;https://pandas.pydata.org/docs/&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#2-numpy"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2. NumPy&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;NumPy is actually the fundamental package for scientific numerical computation in Python as it contains a powerful N-dimensional array object. It is quite popular among developers and data scientists who are aware of the technologies which are dealing with data-oriented stuff. It is a general-purpose array-processing package that provides high-performance multidimensional objects called arrays and also provides tools for working with them. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-and-applications"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Features and Applications:&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;• It provides fast and precompiled functions for numerical calculations.&lt;/p&gt;

&lt;p&gt;• It is used in data analysis.&lt;/p&gt;

&lt;p&gt;• The Array-oriented computing increases its efficiency.&lt;/p&gt;

&lt;p&gt;• It also forms the base of other libraries like SciPy and scikit-learn.&lt;/p&gt;

&lt;p&gt;• It supports the concepts of Object-Oriented Programming (OOP).&lt;/p&gt;

&lt;p&gt;• It performs compact computations with vectorization.&lt;/p&gt;

&lt;p&gt;• It can create a powerful N-dimensional array.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#documentation"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Documentation:&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://numpy.org/doc/"&gt;https://numpy.org/doc/&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#3-tensorflow"&gt;
  &lt;/a&gt;
  &lt;strong&gt;3. TensorFlow&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;It was designed by Google to compute data low graphs with the empowered machine learning algorithms and to fulfill the high demand for the training neural networks work. It is an open-source library. Its performance is quite high and it has a flexible architecture.  It also allows you to deploy Machine Learning models in places like the cloud, your browser, or even your own device. TensorFlow is available for Python, C APIs, C++, Java, JavaScript, Go, Swift, etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-and-applications"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Features and Applications:&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;• It is optimized for speed and makes use of techniques such as XLA to perform quick linear algebra operations.&lt;/p&gt;

&lt;p&gt;• It is easily trainable on both CPU and GPU.&lt;/p&gt;

&lt;p&gt;• It can visualize each and every single part of the graph with ease.&lt;/p&gt;

&lt;p&gt;• It can perform speech and image recognition.&lt;/p&gt;

&lt;p&gt;• In neural machine learning, it reduces error by 50 to 60%.&lt;/p&gt;

&lt;p&gt;• It can also perform video detection.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#documentation"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Documentation:&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.tensorflow.org/guide"&gt;https://www.tensorflow.org/guide&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#4-scikitlearn"&gt;
  &lt;/a&gt;
  &lt;strong&gt;4. Scikit-learn&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Scikit-Learn is used for performing data analysis and mining-related tasks. It is also open-source like TensorFlow and licensed under the BSD. Anyone can access it. It is developed mainly over the Numpy, Scipy, and Matplotlib. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-and-applications"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Features and Applications:&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;• It works well with complex data.&lt;/p&gt;

&lt;p&gt;• It is quite useful for extracting features from images and text.&lt;/p&gt;

&lt;p&gt;• It has a lot of algorithms for the purpose of implementing standard machine learning and even data mining tasks.&lt;/p&gt;

&lt;p&gt;• It allows dimensionality reduction, model selection, and pre-processing.&lt;/p&gt;

&lt;p&gt;• It can also perform clustering, classification, and regression.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#documentation"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Documentation:&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://scikit-learn.org/stable/"&gt;https://scikit-learn.org/stable/&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#5-scipy"&gt;
  &lt;/a&gt;
  &lt;strong&gt;5. Sci-Py&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;SciPy (Scientific Python) is another free and open-source Python library for data science and is mainly used for high-level computations. It has around 19,000 comments on GitHub with about 600 contributors. It is widely used for scientific and technical computations because it extends NumPy while providing many user-friendly routines for scientific calculations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-and-applications"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Features and Applications:&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;• It is used for multi-dimensional image processing&lt;/p&gt;

&lt;p&gt;• It has can solve Fourier transforms, and differential equations.&lt;/p&gt;

&lt;p&gt;• Due to its optimized algorithms, it can do linear algebra computations quite efficiently.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#documentation"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Documentation:&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://scipy.org"&gt;https://scipy.org&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#6-matplotlib"&gt;
  &lt;/a&gt;
  &lt;strong&gt;6. Matplotlib&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Matplotlib has various powerful but beautiful visualizations. It is a Python library used for plotting. It has around 26,000 comments on GitHub with about 700 contributors. It is extensively used for data visualization due to the graphs and plots that it creates. It also provides an object-oriented API. This API can be used to embed the created plots into applications. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-and-applications"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Features and Applications:&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;• It offers many charts and customizations from histograms to even scatterplots.&lt;/p&gt;

&lt;p&gt;• It is useful while performing data exploration for a machine learning project.&lt;/p&gt;

&lt;p&gt;• You can use it regardless of which operating system you’re using or which output format you wish to use as it supports various backends and output types.&lt;/p&gt;

&lt;p&gt;• It can perform correlation analysis of variables.&lt;/p&gt;

&lt;p&gt;• It has low memory consumption and good runtime behavior.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#documentation"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Documentation:&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://matplotlib.org/stable/contents.html"&gt;https://matplotlib.org/stable/contents.html&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#7-seaborn"&gt;
  &lt;/a&gt;
  &lt;strong&gt;7. Seaborn&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;It is a Python data visualization library. Seaborn is based on Matplotlib and is integrated with the NumPy and pandas data structures. It provides various dataset-oriented plotting functions that operate on data frames and arrays that have whole datasets within them.  The Seaborn data graphics it can create include bar charts, pie charts, histograms, scatterplots, error charts, etc. It also has many tools for choosing color palettes that are used to reveal patterns in the data.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-and-applications"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Features and Applications:&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;• It has a high-level interface.&lt;/p&gt;

&lt;p&gt;• It can draw attractive yet informative statistical graphics.&lt;/p&gt;

&lt;p&gt;• It performs the necessary statistical aggregation and mapping functions that allows users to create the plots that they want.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#documentation"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Documentation:&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://seaborn.pydata.org/tutorial.html"&gt;https://seaborn.pydata.org/tutorial.html&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#8-keras"&gt;
  &lt;/a&gt;
  &lt;strong&gt;8. Keras&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;It is one of the most powerful Python libraries. It allows high-level neural network APIs for integration that execute over the top of TensorFlow, Theano, and CNTK. It was created mainly for reducing challenges faced in complex researches allowing users to compute faster.  It is also open-source. It provides a user-friendly environment.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-and-applications"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Features and Applications:&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;• It allows fast prototyping. &lt;/p&gt;

&lt;p&gt;• It supports the recurrent and convolution networks individually.&lt;/p&gt;

&lt;p&gt;• It is a high-level neural network library&lt;/p&gt;

&lt;p&gt;• It is simple to use but is also powerful.&lt;/p&gt;

&lt;p&gt;• By using Keras, users can simply add new modules as a class or even as a function.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#documentation"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Documentation:&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://keras.io/guides/"&gt;https://keras.io/guides/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-scrapy"&gt;
  &lt;/a&gt;
  &lt;strong&gt;9. Scrapy&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;It is one of the most popular and fast web crawling frameworks written in Python. It is also open-source. Scrapy is mainly used to extract the data from the web page with the help of selectors. These selectors are based on the XPath.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-and-applications"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Features and Applications:&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;• It can perform large-scale web-scraping.&lt;/p&gt;

&lt;p&gt;• After extracting and processing the data from websites, users can store it in their preferred format.&lt;/p&gt;

&lt;p&gt;• It can also be used to gather data from APIs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#documentation"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Documentation:&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://docs.scrapy.org/en/latest/"&gt;https://docs.scrapy.org/en/latest/&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#10-beautifulsoup"&gt;
  &lt;/a&gt;
  &lt;strong&gt;10. BeautifulSoup&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;BeautifulSoup is also a popular choice for data scientists.  It is commonly known for web crawling and data scraping. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-and-applications"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Features and Applications:&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;• It performs web scraping from HTML and XML documents.&lt;/p&gt;

&lt;p&gt;• It can automatically detect encodings.&lt;/p&gt;

&lt;p&gt;• Users can navigate a parsed document and extract the data from various web pages.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#documentation"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Documentation:&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://crummy.com/software/BeautifulSoup/bs4/doc/"&gt;https://crummy.com/software/BeautifulSoup/bs4/doc/&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Let's connect!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;✨ &lt;a href="https://twitter.com/IAyeshaSahar"&gt;Twitter&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;✨ &lt;a href="https://github.com/AyeshaSahar"&gt;Github&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>datascience</category>
    </item>
    <item>
      <title>🤪 How should I build a duplicate detection system?</title>
      <author>William McGonagle</author>
      <pubDate>Sat, 01 Jan 2022 19:47:08 +0000</pubDate>
      <link>https://dev.to/williammcgonagle/how-should-i-build-a-duplicate-detection-system-22le</link>
      <guid>https://dev.to/williammcgonagle/how-should-i-build-a-duplicate-detection-system-22le</guid>
      <description>&lt;p&gt;&lt;a href="https://github.com/fairfield-programming/eaf-linter"&gt;I'm working on a linter right now&lt;/a&gt;, and one of the requested features for it was code duplication detection. I made an &lt;a href="https://github.com/fairfield-programming/eaf-linter/issues/6"&gt;issue for it already&lt;/a&gt;, but I need to start working on it. And, that's where my question lies. &lt;/p&gt;

&lt;p&gt;I can either build the system to detect the duplications based on plain text. This is how most systems work because it is the simpler of the two options. But, it is also the most failure prone. For instance, this system would fail if there was the same exact code in two places, but there was a comment in the middle of one of them- it would not register as a duplicate.  &lt;/p&gt;

&lt;p&gt;Alternatively, I can use an abstract syntax tree to detect the duplications. But, theres another problem there- what is the most-lightweight and all-around-best javascript parser out there? I'm planning on using the babel parser but I'm already running into a problem because it doesn't parse the comments in a way I would like. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So, if you have an opinion on what I should do, please leave a comment below. Also, please star &lt;a href="https://github.com/fairfield-programming/eaf-linter"&gt;the project&lt;/a&gt; and contribute if you have time. If you can, that would be amazing, and I thank you so much!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>discuss</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Thirteen Incredible GitHub Repositories To Leverage Your Blockchain Learning</title>
      <author>Oliver Jumpertz</author>
      <pubDate>Sat, 01 Jan 2022 18:44:16 +0000</pubDate>
      <link>https://dev.to/oliverjumpertz/thirteen-incredible-github-repositories-to-leverage-your-blockchain-learning-113p</link>
      <guid>https://dev.to/oliverjumpertz/thirteen-incredible-github-repositories-to-leverage-your-blockchain-learning-113p</guid>
      <description>&lt;p&gt;The internet is a beautiful place of knowledge. You can find educational material nearly everywhere, and GitHub is no different. This article focuses on showcasing thirteen incredible GitHub repositories to you, all packed and filled with learning resources and opportunities to make you better at blockchain development. From Bitcoin to Ethereum, from Python to JavaScript or Solidity, there's something in here for everyone.&lt;/p&gt;

&lt;p&gt;(This article is based on a &lt;a href="https://twitter.com/oliverjumpertz/status/1476187542248730627?s=20"&gt;thread I released on Twitter&lt;/a&gt;.)&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#1-awesome-blockchain-resources"&gt;
  &lt;/a&gt;
  1. Awesome Blockchain Resources
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wDxbSjAu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640807291079/7_X-adzC8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wDxbSjAu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640807291079/7_X-adzC8.png" alt="Awesome Blockchain Resources" width="880" height="284"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/yjjnls/awesome-blockchain"&gt;Visit the repository.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This repository contains an awesomely curated list of resources related to blockchain. It contains tutorials, guides, articles, papers, and books. Many of your questions are already answered here.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#2-awesome-blockchain-collection"&gt;
  &lt;/a&gt;
  2. Awesome Blockchain Collection
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s7Ww1S98--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640807219808/vdUIY0zIr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s7Ww1S98--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640807219808/vdUIY0zIr.png" alt="Awesome Blockchain Collection" width="880" height="437"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/openblockchains/awesome-blockchains"&gt;Visit the repository.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This repository contains a tremendous amount of learning resources. They range from tutorials covering the implementation of your very own blockchain to articles and books. There is something in for everyone.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#3-awesome-blockchain-curated"&gt;
  &lt;/a&gt;
  3. Awesome Blockchain Curated
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---JmQ9Dvd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640807123728/G-sb_wc-O.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---JmQ9Dvd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640807123728/G-sb_wc-O.png" alt="Awesome Blockchain Curated" width="880" height="610"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/imbaniac/awesome-blockchain"&gt;Visit the repository.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This repository does not contain the classical learning materials as many of the other repositories listed here. Instead, it has many real-life examples of applications working on the blockchain, for you to analyze and get an idea about. Sometimes, the best way to learn something is to see how others do it.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#4-blockchain-learning-path"&gt;
  &lt;/a&gt;
  4. Blockchain Learning Path
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3_lX6y7Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640807505568/4N6YbGLKV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3_lX6y7Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640807505568/4N6YbGLKV.png" alt="Blockchain Learning Path" width="880" height="422"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/protofire/blockchain-learning-path"&gt;Visit the repository.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This learning path covers everything, from theory to practice. It guides you from the basics to the advanced concepts and is a great path to follow if you want to cover Bitcoin and Ethereum.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#5-learn-blockchain-in-2-months"&gt;
  &lt;/a&gt;
  5. Learn Blockchain In 2 Months
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MbyecozC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640807618518/p-kvj4JJL.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MbyecozC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640807618518/p-kvj4JJL.png" alt="Learn Blockchain In 2 Months" width="880" height="218"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/llSourcell/Learn_Blockchain_in_2_months"&gt;Visit the repository.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Learning blockchain in 2 months is a challenging task, but not impossible. This repository does not seem like much, but it covers all the resources you need to complete that task in chronological order. Follow this path, and you will be pretty up-to-date after only two months.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#6-ultimate-solidity-blockchain-and-smart-contract-beginner-to-expert-full-course-python-edition"&gt;
  &lt;/a&gt;
  6. Ultimate Solidity, Blockchain, and Smart Contract - Beginner to Expert Full Course | Python Edition
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8u80uDMJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640807832838/kL1H9Tmi_.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8u80uDMJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640807832838/kL1H9Tmi_.png" alt="Ultimate Solidity, Blockchain, and Smart Contract - Beginner to Expert Full Course | Python Edition" width="880" height="332"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/smartcontractkit/full-blockchain-solidity-course-py"&gt;Visit the repository.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The repository to the great freeCodeCamp YouTube course on blockchain with Python. If you don't know that course yet, it covers over 16 hours of in-depth knowledge and everything you need to use Python for smart contract development. It contains a lot of code that helps you to understand what's going on for sure.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#7-a-simple-blockchain-implementation-in-python"&gt;
  &lt;/a&gt;
  7. A simple blockchain implementation in Python
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2QdHNfTT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640808016806/YRWG-AKwk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2QdHNfTT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640808016806/YRWG-AKwk.png" alt="A simple blockchain implementation in Python" width="880" height="332"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/dvf/blockchain"&gt;Visit the repository.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Learn to build a blockchain in Python by analyzing this implementation. It is the accompanying repository to another book that contains all explanations you need to understand the whole code. This repository is especially interesting because it shows you that even Python, a language not usually used for blockchain clients, is still a very good choice and gets the job done.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#8-learn-bitcoin-from-the-command-line"&gt;
  &lt;/a&gt;
  8. Learn Bitcoin From The Command Line
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--82YDlMSJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640808356407/7nMTCIdIl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--82YDlMSJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640808356407/7nMTCIdIl.png" alt="Bildschirmfoto 2021-12-29 um 21.05.50.png" width="880" height="610"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/BlockchainCommons/Learning-Bitcoin-from-the-Command-Line"&gt;Visit the repository.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A complete guide to interacting with Bitcoin and learning more about it through its CLI. This one is not directly tied to implementing logic, learning about cryptographic primitives, or peer 2 peer networking. Instead, it focuses on you learning to interact with Bitcoin through its CLI client. Using the major blockchain out there also helps you to understand blockchains themselves.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#9-learn-how-to-build-a-blockchain-with-go"&gt;
  &lt;/a&gt;
  9. Learn How To Build A Blockchain With Go
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dn0E4DwT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640808686041/-ZAtK95_F.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dn0E4DwT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640808686041/-ZAtK95_F.png" alt="Learn How To Build A Blockchain With Go" width="880" height="466"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/nosequeldeebee/blockchain-tutorial"&gt;Visit the repository.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you ever dreamed of implementing your own blockchain in one of the most popular programming languages for blockchain development out there, this repository might be exactly what you look for. Go is the language most Ethereum clients and nodes and many other blockchains are implemented in. Why not use it to implement your very own?&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#10-the-bitcoin-book"&gt;
  &lt;/a&gt;
  10. The Bitcoin Book
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b5o5wGKJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640808836530/uAgABY9Ww.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b5o5wGKJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640808836530/uAgABY9Ww.png" alt="The Bitcoin Book" width="880" height="291"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/bitcoinbook/bitcoinbook"&gt;Visit the repository.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bitcoin is still &lt;strong&gt;the&lt;/strong&gt; blockchain. It might not be a smart blockchain like Ethereum or Solana, but it definitely is the father of many modern implementations. It is always worth it to learn about Bitcoin, especially as Layer-2 solutions begin to emerge and add capabilities to Bitcoin itself.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#11-the-defi-developer-roadmap"&gt;
  &lt;/a&gt;
  11. The DeFi Developer Roadmap
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pPsautyb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640810286881/KywKnIsMt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pPsautyb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640810286881/KywKnIsMt.png" alt="The DeFi Developer Roadmap" width="880" height="213"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/OffcierCia/DeFi-Developer-Road-Map"&gt;Visit the repository.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;DeFi (decentralized finance) was one of the first, and still is one of the most important applications of blockchains. This curated Ethereum developer handbook contains everything you need to become a DeFi developer on Ethereum, sidechains like Polygon, and derived chains like the Binance Smart Chain.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#12-build-your-own-x"&gt;
  &lt;/a&gt;
  12. Build Your Own X
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eG0v16fF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640810463726/34xevE9V6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eG0v16fF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640810463726/34xevE9V6.png" alt="Build Your Own X" width="880" height="486"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/danistefanovic/build-your-own-x#build-your-own-blockchain--cryptocurrency"&gt;Visit the repository.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A general-purpose repository containing curated resources for multiple purposes, including Blockchain/Crypto. You get material for JavaScript, Python, Go, and some more languages. All learning materials are of high quality and good to follow.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#13-build-a-blockchain-with-javascript"&gt;
  &lt;/a&gt;
  13. Build A Blockchain With JavaScript
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hJJbxu92--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640810647406/3dSdrFL2a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hJJbxu92--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640810647406/3dSdrFL2a.png" alt="Build A Blockchain With JavaScript" width="880" height="223"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/nambrot/blockchain-in-js"&gt;Visit the repository.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;JavaScript is a great language, and although it is not one of the major languages used to implement blockchains, it still can. This repository shows you how you can implement one for yourself and even comes with a UI that helps you to explore what happens under the hood better.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#before-you-leave"&gt;
  &lt;/a&gt;
  Before You Leave
&lt;/h2&gt;

&lt;p&gt;Do you like content like this? Why don't you follow me on social media for a daily dose of education?&lt;/p&gt;

&lt;p&gt;Join me on &lt;a href="https://www.instagram.com/oliverjumpertz"&gt;Instagram&lt;/a&gt; and get a daily dose of educational content right in your feed, soon also including short educational videos.&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>web3</category>
    </item>
    <item>
      <title>How it works: Oauth 2.0</title>
      <author>Arun Mathew Kurian</author>
      <pubDate>Sat, 01 Jan 2022 18:28:59 +0000</pubDate>
      <link>https://dev.to/amkurian/how-it-works-oauth-20-1la</link>
      <guid>https://dev.to/amkurian/how-it-works-oauth-20-1la</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Oauth 2.0 which stands for 'Open authorization' is an authorization framework that enables an application to obtain limited access to your account on another https service. This is done by delegating the authorization to the application that hosts the user data from the third-party app.&lt;/p&gt;

&lt;p&gt;It's basically like giving an app a key that gives them specific permission to access data and perform actions on behalf of a user in another app. This allows the user to provide restricted access to user's account in another service to the client app without providing a username or password. The user can revoke the permission whenever they want.&lt;/p&gt;

&lt;p&gt;The steps to grant permission are often referred to as authorization or delegated authorization.&lt;/p&gt;

&lt;p&gt;Let's look at an example.&lt;/p&gt;

&lt;p&gt;The client app is an app that sends greeting emails on user's behalf. This app requires permission to send emails and access contacts from the user's behalf and they support Oauth 2.0 authorization for the email provider (like Gmail or Outlook) the user uses.&lt;br&gt;
When the email provider is selected user is redirected to the email service. The email provider checks if the user is logged in. If not the user will be prompted to log in.&lt;/p&gt;

&lt;p&gt;After login, the user will be shown a screen with permission that will be provided to the client app. This can be accepted or rejected by the user. Once the user grants the permission, they will be redirected to the original app. Now the app can access the user's contact and send emails on their behalf.&lt;/p&gt;

&lt;p&gt;This flow is known as authorization code flow. None of this may sound new to the reader as we have seen this flow in our daily internet life frequently.&lt;/p&gt;

&lt;p&gt;Let's look into Oauth 2.0's working in detail.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#terminology"&gt;
  &lt;/a&gt;
  Terminology
&lt;/h2&gt;

&lt;p&gt;First, let's look at the various terminologies present in Oauth 2.0 flow&lt;/p&gt;

&lt;p&gt;*&lt;em&gt;Resource Owner *&lt;/em&gt;- The user who is providing the access to some portion of their account data to the client app&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Client&lt;/strong&gt; - Application that needs the data or permissions&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Authorization Server&lt;/strong&gt; - This is the server that knows the resource owner. The user will interact with the authorization server when an application is requesting access to their account. The authorization server will prompt the users to grant permission to the client.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resource Server&lt;/strong&gt; - The API/server that contains the user's data that is being accessed by the client app. The resource server must be able to accept and validate access tokens and grant access if the user has allowed it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Redirect URI&lt;/strong&gt; - The URI to which the authorization server will redirect the resource owner back after granting permission. This also known as callback URI.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Response Type&lt;/strong&gt; - This is the type of response the client expects. It informs the authorization Server of the desired authorization processing flow. The common response type is 'code'.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scope&lt;/strong&gt; - These are the granular permissions that the client app needs. An application can request one or more scopes. The value of scopes is not standardized and is dependent on the service's internal architecture.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Consent&lt;/strong&gt; - The authorization server takes the scope client has requested and verifies it with the resource owner whether or not they want to give permission. A consent form will be prompted to the user regarding the scopes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Client Id&lt;/strong&gt; - This is the value that is used to uniquely identify a client app.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Client Secret&lt;/strong&gt; - The client secret is essentially the client application's own password to the authorization server. This is a secret only known to the application and authorization server&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Authorization Code&lt;/strong&gt; - This code is a short-lived value that the authorization server sends back to the client. The client will send the authorization code back to the authorization server along with the client secret in exchange for an access token.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Access Token&lt;/strong&gt; - This is the key the client app use to make API request on behalf of the user. This allows the application to access specific parts of a user's data. OAuth 2.0 doesn't define a specific format for Access Tokens. The JSON Web Token (JWT) format is often used for Access Tokens. For security reasons, the Access Tokens may have expiration dates.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#authorization-code-flow-under-the-hood"&gt;
  &lt;/a&gt;
  Authorization Code Flow: Under the hood
&lt;/h2&gt;

&lt;p&gt;Now that the terminologies of Oauth 2.0 are clear let's look at the authorization code flow in detail&lt;/p&gt;

&lt;p&gt;Before the users come into the picture, the client app will communicate with the authorization server and will establish a working relationship. The authorization server will generate a client id and client secret (sometimes known as app id or app secret), which can be used in future communications.&lt;/p&gt;

&lt;p&gt;When the user interacts with the client app and selects service, they will be redirected to the authorization server with a request containing client id, redirect URI, response type and the scopes required.&lt;/p&gt;

&lt;p&gt;The authorization server will verify the user and the request. It will prompt the user to log in if the user is not logged in. The scopes requested by the client app will be presented to the user on the consent screen. This will allow the user to grant or deny permissions.&lt;/p&gt;

&lt;p&gt;Once the user grants permission to the authorization server, the user will be redirected to redirect URI along with a temporary Authorization code.&lt;/p&gt;

&lt;p&gt;The client will then contact the authorization server directly with client id, client secret, and Authorization code. The authorization server will respond with an Access token. This Access token can be used by the client in future interactions for accessing data and performing operations on behalf of user in the resource server.&lt;/p&gt;

&lt;p&gt;In this article, we have briefly looked into some concepts related to Oauth 2.0 and its workflow.&lt;/p&gt;

&lt;p&gt;I hope this article was helpful.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>authorization</category>
      <category>oauth2</category>
      <category>architecture</category>
    </item>
    <item>
      <title>Hello Git: A Beginner's Tutorial on Git and GitLab</title>
      <author>Edwin Torres</author>
      <pubDate>Sat, 01 Jan 2022 18:28:06 +0000</pubDate>
      <link>https://dev.to/realedwintorres/hello-git-a-beginners-tutorial-on-git-and-gitlab-k7i</link>
      <guid>https://dev.to/realedwintorres/hello-git-a-beginners-tutorial-on-git-and-gitlab-k7i</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;This tutorial is for beginners who are new to  &lt;a href="https://git-scm.com/"&gt;Git&lt;/a&gt;  and  &lt;a href="https://gitlab.com/"&gt;GitLab&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Git&lt;/em&gt; is a  "&lt;a href="https://git-scm.com/"&gt;free and open source distributed version control system&lt;/a&gt;  designed to handle everything from small to very large projects with speed and efficiency." Use Git locally on your computer to manage software versions.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;GitLab&lt;/em&gt; is a  &lt;a href="https://about.gitlab.com/what-is-gitlab/"&gt;DevOps platform&lt;/a&gt;. It can host your local Git repos for remote collaboration, and a whole lot more. Some other Git servers are &lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt;  and  &lt;a href="https://bitbucket.org/product"&gt;Bitbucket&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#register-with-gitlab-and-create-a-repo"&gt;
  &lt;/a&gt;
  Register with GitLab and Create a Repo
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Register for a GitLab account &lt;a href="https://gitlab.com/users/sign_up"&gt;here&lt;/a&gt; or on your private GitLab server.&lt;/li&gt;
&lt;li&gt;From a web browser, log into your GitLab account.&lt;/li&gt;
&lt;li&gt;Create a new repo:&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;Create a new project:  &lt;a href="https://gitlab.com/projects/new"&gt;https://gitlab.com/projects/new&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Click &lt;em&gt;Create blank project&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Project name: &lt;strong&gt;hello-world&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Click the &lt;em&gt;Create project&lt;/em&gt; button.&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;Your remote GitLab repo is created.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#install-git-locally"&gt;
  &lt;/a&gt;
  Install Git Locally
&lt;/h2&gt;

&lt;p&gt;Make sure that you have Git locally on your computer.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Check if you already have Git. From your local computer, open a macOS Terminal or Git Bash terminal and enter: &lt;code&gt;git --version&lt;/code&gt;. If you have Git, then continue to &lt;a href="#establish-ssh-access"&gt;Establish SSH Access&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Install Git:&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Windows&lt;/em&gt;: &lt;a href="https://git-scm.com/download/win"&gt;https://git-scm.com/download/win&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;macOS&lt;/em&gt;: From the Terminal app, enter &lt;code&gt;git --version&lt;/code&gt; and follow instructions to install &lt;em&gt;Xcode Command Line Tools&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For the remainder of this tutorial, "terminal" refers to either the &lt;em&gt;macOS Terminal&lt;/em&gt; app or &lt;em&gt;Windows Git Bash&lt;/em&gt; terminal.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#establish-ssh-access"&gt;
  &lt;/a&gt;
  Establish SSH Access
&lt;/h2&gt;

&lt;p&gt;To access your remote GitLab repos from your local computer, you must first establish SSH access. This requires uploading your public SSH key from your computer to GitLab.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Check if you already have an SSH key:&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;From the &lt;em&gt;macOS&lt;/em&gt; terminal, enter: &lt;code&gt;cat ~/.ssh/id_rsa.pub | pbcopy&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;From the &lt;em&gt;Windows Git Bash&lt;/em&gt; terminal, enter: &lt;code&gt;cat ~/.ssh/id_rsa.pub | clip&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;If the command succeeds, then your public SSH key is in the clipboard. Otherwise go to the next step.&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;Create your SSH key:&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: this step will create/overwrite these files in your home directory:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~/.ssh/id_rsa
~/.ssh/id_rsa.pub
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;From the terminal, enter the following commands, replacing &lt;code&gt;YOUREMAIL@MAIL.COM&lt;/code&gt; with your email address:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;  &lt;span class="c"&gt;# work from your home directory&lt;/span&gt;
ssh-keygen &lt;span class="nt"&gt;-o&lt;/span&gt; &lt;span class="nt"&gt;-t&lt;/span&gt; rsa &lt;span class="nt"&gt;-b&lt;/span&gt; 4096 &lt;span class="nt"&gt;-C&lt;/span&gt; &lt;span class="s2"&gt;"YOUREMAIL@MAIL.COM"&lt;/span&gt;    
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Press the &lt;code&gt;Enter&lt;/code&gt; key to accept all defaults. Do not specify a password, unless you want to enter a password each time you interact with the remote Git server.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Go back to &lt;em&gt;Step 1&lt;/em&gt; above to copy your public SSH key to the clipboard.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;Add your SSH key to your GitLab account:&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;From a web browser, log into your GitLab account.&lt;/li&gt;
&lt;li&gt;Go to SSH Keys: &lt;a href="https://gitlab.com/-/profile/keys"&gt;https://gitlab.com/-/profile/keys&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;In the &lt;em&gt;Key&lt;/em&gt; textbox, paste your public SSH key from the clipboard.&lt;/li&gt;
&lt;li&gt;Click the &lt;em&gt;Add key&lt;/em&gt; button.&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;You know have SSH access from your local computer to your remote GitLab account.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#use-git-locally-and-gitlab-remotely"&gt;
  &lt;/a&gt;
  Use Git Locally and GitLab Remotely
&lt;/h2&gt;

&lt;p&gt;Now try to use Git locally and interact with your remote repos in GitLab.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;From a web browser, log into your GitLab account.&lt;/li&gt;
&lt;li&gt;Go to your &lt;strong&gt;hello-world&lt;/strong&gt; repo, click the &lt;em&gt;Clone&lt;/em&gt; button, and copy the &lt;em&gt;Clone with SSH&lt;/em&gt; link to the clipboard.&lt;/li&gt;
&lt;li&gt;From your local computer, open a terminal and go (&lt;code&gt;cd&lt;/code&gt;) to a directory to work from.&lt;/li&gt;
&lt;li&gt;Enter the following command to &lt;em&gt;clone&lt;/em&gt; your GitLab repo locally on your computer. Paste the SSH link at the end. For example, if your GitLab username is &lt;code&gt;JohnSmith&lt;/code&gt;:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  git clone git@gitlab.com:JohnSmith/hello-world.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;There is now a &lt;code&gt;hello-world&lt;/code&gt; folder locally on your computer. From the terminal, go into the folder: &lt;code&gt;cd hello-world&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Enter &lt;code&gt;git status&lt;/code&gt; to see the current state of the repo. There are no changes.&lt;/li&gt;
&lt;li&gt;Create a few local files:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"red blue green"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; colors.txt
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"apple cherry watermelon"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; fruits.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Enter &lt;code&gt;git status&lt;/code&gt; to see the current state of the repo. Now there are local changes.&lt;/li&gt;
&lt;li&gt;Add the changes to the Git staging area:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  git add colors.txt fruits.txt  &lt;span class="c"&gt;# or simply: git add .&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Commit the changes to the local repo:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"my first Git commit"&lt;/span&gt; &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Now the two new files are part of your repo. Push your local changes to the &lt;code&gt;master&lt;/code&gt; branch of the remote GitLab repo:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  git push origin master
  git status  &lt;span class="c"&gt;# repo is clean&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;From a web browser, go to your GitLab &lt;code&gt;hello-world&lt;/code&gt; repo. Refresh the browser and verify that your local changes made it to the remote server.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Congratulations!&lt;/strong&gt; You have successfully created a GitLab account and repo, established a local Git repo, and used Git both locally and remotely. Well done! Now learn more advanced Git commands and try them both locally and remotely.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

&lt;p&gt;Follow me on Twitter &lt;a href="https://twitter.com/realEdwinTorres"&gt;&lt;code&gt;@realEdwinTorres&lt;/code&gt;&lt;/a&gt; for programming tips, software engineering content, and career advice. 😊&lt;/p&gt;

</description>
      <category>programming</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>target="_blank" is a security risk?</title>
      <author>Hassan Tahir</author>
      <pubDate>Sat, 01 Jan 2022 17:58:17 +0000</pubDate>
      <link>https://dev.to/thehassantahir/targetblank-is-a-security-risk-1ee4</link>
      <guid>https://dev.to/thehassantahir/targetblank-is-a-security-risk-1ee4</guid>
      <description>&lt;p&gt;As we all use target="_blank" to open the link into new tab of a window but everyone should know a risk inside it.&lt;/p&gt;

&lt;p&gt;When we open a new tab link &lt;code&gt;window.opener&lt;/code&gt; get triggered which made a limited access to the specific tab opened, &lt;em&gt;for example&lt;/em&gt;; you can not go back in the previous page by clicking back button from your URL bar.   &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So what is the risk here?&lt;/strong&gt;&lt;br&gt;
when the new tab link open it can alter the Link page URL from &lt;code&gt;window.opener.location&lt;/code&gt;. &lt;br&gt;
If your external link is not trusty that may cause a real problem to your website.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What can happen?&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Hacker can redirect your domain.&lt;/li&gt;
&lt;li&gt;CSRF can be performed.&lt;/li&gt;
&lt;li&gt;XML entities can be altered. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;How to prevent this?&lt;/strong&gt;&lt;br&gt;
Do not forget to add relation attribute in your link tag &lt;code&gt;rel=noopener noreferrer&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;In a Nutshell&lt;/em&gt;&lt;/strong&gt; &lt;code&gt;&amp;lt;a href="https://thehassantahir.web.app" target="_blank" rel="noopener noreferrer"&amp;gt;Thehassantahir&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/p&gt;

</description>
      <category>security</category>
      <category>html</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Install Traefik Ingress Controller in Kubernetes</title>
      <author>ZachiNachshon</author>
      <pubDate>Sat, 01 Jan 2022 17:40:01 +0000</pubDate>
      <link>https://dev.to/zachinachshon/install-traefik-ingress-controller-in-kubernetes-4g53</link>
      <guid>https://dev.to/zachinachshon/install-traefik-ingress-controller-in-kubernetes-4g53</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eBkM7hpj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o695qey4wsbgggguvjnc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eBkM7hpj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o695qey4wsbgggguvjnc.png" width="280" height="376"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;&lt;b&gt;Credits:&lt;/b&gt; Logo by &lt;a href="https://traefik.io/"&gt;traefik.io&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Provide load balancing, SSL termination and name-based virtual hosting on a Kubernetes (k3s) cluster using Traefik ingress controller.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#k8s-controller"&gt;K8s Controller&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#traefik-prepare"&gt;Prepare&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#traefik-install"&gt;Install&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#traefik-uninstall"&gt;Uninstall&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#traefik-dashboard"&gt;Traefik Dashboard&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#certificate"&gt;Certificate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dashboard-auth"&gt;Authentication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dashboard-ingress"&gt;Ingress&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#demo-app"&gt;Demo Application&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#demo-prepare"&gt;Prepare&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#demo-install"&gt;Install&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#demo-uninstall"&gt;Uninstall&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#demo-certificate"&gt;Certificate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#demo-ingress"&gt;Ingress&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#summary"&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The domain referenced in this post is MY_DOMAIN, please change accordingly. If you interested in a local-only work mode, you don’t have to pay for a new domain, just decide on a name and use it. For example, if your desired domain is homelab.com, replace MY_DOMAIN with homelab.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3 id="prerequisites"&gt;Prerequisites&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.zachinachshon.com/rpi-installation/"&gt;Setting Up a Raspberry Pi Cluster&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.zachinachshon.com/k3s-installation/"&gt;Install Rancher K3s on Raspberry Pi Cluster&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.zachinachshon.com/helm-installation/"&gt;Installing Helm, Kubernetes Package Manager&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.zachinachshon.com/cert-manager/"&gt;Install Certificate Manager Controller in Kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Z96L44l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kr5imnnmd344pfqz24b3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Z96L44l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kr5imnnmd344pfqz24b3.png" alt="traefik-overview.png" width="880" height="592"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is an Ingress Controller?&lt;/strong&gt;&lt;br&gt;
It is an API object that manages external access to a deployed service in a Kubernetes cluster, typically via HTTP/S. It provides load balancing, SSL termination and name-based virtual hosting.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why would I want to use an Ingress Controller?&lt;/strong&gt;&lt;br&gt;
These are some of the immediate benefits using an ingress controller:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Simplify the way internal services interact with each other and re-route when required by  changing only the Traefik routing rule. &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Instead of relying on an IP address that might change, simply define a hosted name e.g. &lt;code&gt;serviceA.domain.com&lt;/code&gt; to address &lt;code&gt;serviceA&lt;/code&gt; and use that on other internal services and/or from outside the cluster when in need to call &lt;code&gt;serviceA&lt;/code&gt;.&lt;br&gt;Isn't &lt;code&gt;serviceA.domain.com&lt;/code&gt; easier to remember than &lt;code&gt;192.169.200.xxx&lt;/code&gt; ?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Allows HTTPS traffic from outside the Kubernetes cluster while terminating encryption and allowing HTTP traffic between services within the cluster&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Load balance traffic between services hosted outside the Kubernetes cluster&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Traefik is using custom cluster resource definitions. These CRDs gets installed via Traefik 2 Helm Chart. For CRDs schema click &lt;a href="https://docs.traefik.io/routing/providers/kubernetes-crd/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2 id="k8s-controller"&gt;K8s Controller&lt;/h2&gt;

&lt;p&gt;Traefik is a Kubernetes controller that manage the access to cluster services by supporting the &lt;a href="https://kubernetes.io/docs/concepts/services-networking/ingress/"&gt;Ingress specification&lt;/a&gt;. It receives requests on behalf of your system and finds out which components are responsible for handling them.&lt;/p&gt;

&lt;h3 id="traefik-prepare"&gt;Prepare&lt;/h3&gt;

&lt;p&gt;We want Kubernetes to create the Traefik pod on the master node. In order to do that, we'll have to label that node and use &lt;code&gt;nodeSelector&lt;/code&gt; attribute when installing Traefik Helm chart.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Get all nodes names and labels&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl get nodes &lt;span class="nt"&gt;--show-labels&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt; &lt;/p&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Label &lt;code&gt;kmaster&lt;/code&gt; node with &lt;code&gt;node-type=master&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl label nodes kmaster node-type&lt;span class="o"&gt;=&lt;/span&gt;master
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; To remove a label, use the same command with dash after the label name e.g. &lt;code&gt;kubectl label nodes kmaster node-type-&lt;/code&gt;."&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Verify that label had been created successfully&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl get nodes &lt;span class="nt"&gt;--show-labels&lt;/span&gt; | &lt;span class="nb"&gt;grep &lt;/span&gt;node-type
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt; &lt;/p&gt;

&lt;h3 id="traefik-install"&gt;Install&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Create a &lt;code&gt;traefik&lt;/code&gt; namespace&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl create namespace traefik
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add the &lt;code&gt;containous&lt;/code&gt; Helm repository hosting the Traefik charts metadata&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;helm repo add traefik https://containous.github.io/traefik-helm-chart
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Update local Helm chart repository cache&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;helm repo update
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Search for latest &lt;code&gt;traefik/traefik&lt;/code&gt; official Helm chart version&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;helm search repo traefik

&lt;span class="c"&gt;# NAME              CHART VERSION   APP VERSION&lt;/span&gt;
&lt;span class="c"&gt;# traefik/traefik   9.1.1           2.2.8      &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install the Traefik Helm chart using the version from previous step&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;helm upgrade &lt;span class="nt"&gt;--install&lt;/span&gt; traefik &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--namespace&lt;/span&gt; traefik &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--set&lt;/span&gt; dashboard.enabled&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--set&lt;/span&gt; rbac.enabled&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--set&lt;/span&gt; nodeSelector.node-type&lt;span class="o"&gt;=&lt;/span&gt;master &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--set&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"additionalArguments={--api.dashboard=true,--log.level=INFO,--providers.kubernetesingress.ingressclass=traefik-internal,--serversTransport.insecureSkipVerify=true}"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    traefik/traefik &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--version&lt;/span&gt; 9.1.1
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Verify installation&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Make sure all traefik deployed pods are running&lt;/span&gt;
kubectl get pods &lt;span class="nt"&gt;--namespace&lt;/span&gt; traefik

&lt;span class="c"&gt;# Make sure custom resources *.traefik.containo.us were created successfully &lt;/span&gt;
kubectl get crd | &lt;span class="nb"&gt;grep &lt;/span&gt;traefik
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id="traefik-uninstall"&gt;Uninstall&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Remove &lt;code&gt;traefik&lt;/code&gt; from the cluster&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;helm uninstall traefik &lt;span class="nt"&gt;--namespace&lt;/span&gt; traefik
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clear the &lt;code&gt;traefik&lt;/code&gt; namespace&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl delete namespaces traefik
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;




&lt;h2 id="traefik-dashboard"&gt;Traefik Dashboard&lt;/h2&gt;

&lt;p&gt;Dashboard is installed but disabled by default for security reasons. We will want to avoid using the &lt;code&gt;kubectl proxy-forward&lt;/code&gt; option and allow the dashboard via HTTPS with proper TLS/Cert.&lt;/p&gt;

&lt;h3 id="certificate"&gt;Certificate&lt;/h3&gt;

&lt;p&gt;We will create a certificate using &lt;code&gt;cert-manager&lt;/code&gt; to allow accessing the Traefik dashboard via the hosted name &lt;code&gt;traefik.MY_DOMAIN.com&lt;/code&gt; within our home network. Create a self signed certificate as described in &lt;a href="https://blog.zachinachshon.com/cert-manager/#self-signed-certificate"&gt;here&lt;/a&gt; under &lt;code&gt;traefik&lt;/code&gt; namespace.&lt;/p&gt;

&lt;p&gt;Verify that a TLS secret had been created for the certificate:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl get secret MY_DOMAIN-com-cert-secret &lt;span class="nt"&gt;--namespace&lt;/span&gt; traefik
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;h3 id="dashboard-auth"&gt;Authentication&lt;/h3&gt;

&lt;p&gt;We will create a user / password basic authentication, please read &lt;a href="https://doc.traefik.io/traefik/v1.7/configuration/backends/kubernetes/#authentication"&gt;here&lt;/a&gt; if you wish to use a different method.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Generate a flat-file that stores a username and password for basic authentication&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;bash &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="sh"&gt;'&lt;/span&gt;&lt;span class="no"&gt;EOF&lt;/span&gt;&lt;span class="sh"&gt;'

# Change these credentials to your own
export TRAEFIK_UI_USER=admin
export TRAEFIK_UI_PASS=dashboard
export DESTINATION_FOLDER=&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="sh"&gt;/temp/traefik-ui-creds

# Backup credentials to local files (in case you'll forget them later on)
mkdir -p &lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DESTINATION_FOLDER&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="sh"&gt;
echo &lt;/span&gt;&lt;span class="nv"&gt;$TRAEFIK_UI_USER&lt;/span&gt;&lt;span class="sh"&gt; &amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DESTINATION_FOLDER&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="sh"&gt;/traefik-ui-user.txt
echo &lt;/span&gt;&lt;span class="nv"&gt;$TRAEFIK_UI_PASS&lt;/span&gt;&lt;span class="sh"&gt; &amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DESTINATION_FOLDER&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="sh"&gt;/traefik-ui-pass.txt

htpasswd -Bbn &lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;TRAEFIK_UI_USER&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="sh"&gt; &lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;TRAEFIK_UI_PASS&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="sh"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;&lt;span class="sh"&gt;
    &amp;gt; &lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DESTINATION_FOLDER&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="sh"&gt;/htpasswd

unset TRAEFIK_UI_USER TRAEFIK_UI_PASS DESTINATION_FOLDER
&lt;/span&gt;&lt;span class="no"&gt;
EOF
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a Kubernetes secret based on the basic authentication file&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl create secret generic traefik-dashboard-auth-secret &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--from-file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/temp/traefik-ui-creds/htpasswd &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--namespace&lt;/span&gt; traefik
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id="dashboard-ingress"&gt;Ingress&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Create an &lt;code&gt;IngressRoute&lt;/code&gt; for accessing the dashboard, make sure to replace &lt;code&gt;MY_DOMAIN&lt;/code&gt; with your domain name&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="s"&gt;cat &amp;lt;&amp;lt;EOF | kubectl apply -f -&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;traefik.containo.us/v1alpha1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;IngressRoute&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;traefik-dashboard&lt;/span&gt;
  &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;traefik&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;entryPoints&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;websecure&lt;/span&gt;
  &lt;span class="na"&gt;routes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Rule&lt;/span&gt;
      &lt;span class="na"&gt;match&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Host(\`traefik.MY_DOMAIN.com\`) &amp;amp;&amp;amp; (PathPrefix(\`/api\`) || PathPrefix(\`/dashboard\`))&lt;/span&gt;
      &lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;api@internal&lt;/span&gt;
          &lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;TraefikService&lt;/span&gt;
      &lt;span class="na"&gt;middlewares&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;traefik-dashboard-auth&lt;/span&gt; &lt;span class="c1"&gt;# Referencing the BasicAuth middleware&lt;/span&gt;
          &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;traefik&lt;/span&gt;
  &lt;span class="na"&gt;tls&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;secretName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;MY_DOMAIN-com-cert-secret&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;traefik.containo.us/v1alpha1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Middleware&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;traefik-dashboard-auth&lt;/span&gt;
  &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;traefik&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;basicAuth&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;secret&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;traefik-dashboard-auth-secret&lt;/span&gt;
&lt;span class="s"&gt;EOF&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check that resources were created successfully&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# IngressRoute&lt;/span&gt;
kubectl describe ingressroute traefik-dashboard &lt;span class="nt"&gt;--namespace&lt;/span&gt; traefik

&lt;span class="c"&gt;# Middleware&lt;/span&gt;
kubectl describe middleware traefik-dashboard-auth &lt;span class="nt"&gt;--namespace&lt;/span&gt; traefik
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check there are no error logs&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl logs &lt;span class="nt"&gt;-f&lt;/span&gt; &lt;span class="si"&gt;$(&lt;/span&gt;kubectl get pods &lt;span class="nt"&gt;--namespace&lt;/span&gt; traefik | &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="s2"&gt;"^traefik"&lt;/span&gt; | &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;'{print $1}'&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;--namespace&lt;/span&gt; traefik
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set a hosted name &lt;code&gt;traefik.MY_DOMAIN.com&lt;/code&gt; on a client machine (laptop/desktop)&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Edit the file using `sudo /etc/hosts`&lt;/span&gt;
&lt;span class="c"&gt;# Append manualy to the existing k3s hosted name &lt;/span&gt;
111.222.333.444 kmaster, traefik.MY_DOMAIN.com

&lt;span class="c"&gt;# Alternatively, add a new hosted name entry with a one-liner&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="s2"&gt;"111.222.333.444&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;traefik.MY_DOMAIN.com"&lt;/span&gt; | &lt;span class="nb"&gt;sudo tee&lt;/span&gt; &lt;span class="nt"&gt;-a&lt;/span&gt; /etc/hosts
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Replace &lt;code&gt;111.222.333.444&lt;/code&gt; with the &lt;code&gt;k3s&lt;/code&gt; master node IP address and &lt;code&gt;MY_DOMAIN&lt;/code&gt; with your domain name.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open browser at &lt;a href="https://traefik.MY_DOMAIN.com/dashboard/"&gt;https://traefik.MY_DOMAIN.com/dashboard/&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you encounter an untrusted certificate warning, please follow the cert-manager post &lt;a href="https://blog.zachinachshon.com/cert-manager#cert-trust"&gt;Trust section&lt;/a&gt; for instructions on how to trust the &lt;code&gt;traefik&lt;/code&gt; certificate.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Dashboard:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A2HMgt-b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/521pl9abudvgjuir8tj5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A2HMgt-b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/521pl9abudvgjuir8tj5.png" alt="err-dashboard-img" width="880" height="513"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;




&lt;h2 id="demo-app"&gt;Demo Application&lt;/h2&gt;

&lt;p&gt;We will deploy an example &lt;code&gt;whoami&lt;/code&gt; application that returns basic information about the client issuing the request. It'll allow us to check that Traefik was deployed successfully by addressing our demo application using &lt;code&gt;whoami.MY_DOMAIN.com&lt;/code&gt;. &lt;/p&gt;

&lt;h3 id="demo-prepare"&gt;Prepare&lt;/h3&gt;

&lt;p&gt;Before deploying our application to the Kubernetes cluster, we will have to define which node(s) are eligible of assigning pods for it. &lt;/p&gt;

&lt;p&gt;We will use the &lt;code&gt;node-type=master&lt;/code&gt; label created at the &lt;code&gt;Prepare&lt;/code&gt; step of the Traefik installation. To assign the &lt;code&gt;whoami&lt;/code&gt; pod(s) to the &lt;code&gt;kmaster&lt;/code&gt; node, we will use the &lt;code&gt;nodeSelector&lt;/code&gt; attribute on a Kubernetes resource (&lt;code&gt;Deployment&lt;/code&gt; / &lt;code&gt;Pod&lt;/code&gt;) with that label.&lt;/p&gt;

&lt;h3 id="demo-install"&gt;Install&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Create a &lt;code&gt;playground&lt;/code&gt; namespace&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl create namespace playground
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create Kubernetes &lt;code&gt;Deployment&lt;/code&gt; and &lt;code&gt;Service&lt;/code&gt; with x2 running instances of the &lt;code&gt;whoami&lt;/code&gt; application&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="s"&gt;cat &amp;lt;&amp;lt;EOF | kubectl apply -f -&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;apps/v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deployment&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;whoami&lt;/span&gt;
  &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;playground&lt;/span&gt;
  &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;containous&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;whoami&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;replicas&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;matchLabels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;containous&lt;/span&gt;
      &lt;span class="na"&gt;task&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;whoami&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;containous&lt;/span&gt;
        &lt;span class="na"&gt;task&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;whoami&lt;/span&gt;
    &lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;nodeSelector&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;node-type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;master"&lt;/span&gt;
      &lt;span class="na"&gt;containers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;containouswhoami&lt;/span&gt;
          &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;containous/whoami&lt;/span&gt;
          &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;containerPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Service&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;whoami&lt;/span&gt;
  &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;playground&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;http&lt;/span&gt;
      &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;containous&lt;/span&gt;
    &lt;span class="na"&gt;task&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;whoami&lt;/span&gt;
&lt;span class="s"&gt;EOF&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Please refer to the official docs to read more about Kubernetes &lt;a href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment/"&gt;&lt;code&gt;Deployment&lt;/code&gt;&lt;/a&gt; or &lt;a href="https://kubernetes.io/docs/concepts/services-networking/service/"&gt;&lt;code&gt;Service&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Verify both &lt;code&gt;Deployment&lt;/code&gt; and &lt;code&gt;Service&lt;/code&gt; were created successfully&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Deployment should indicate 2/2 running pods &lt;/span&gt;
kubectl get deployments &lt;span class="nt"&gt;-n&lt;/span&gt; playground

&lt;span class="c"&gt;# Service should indicate a cluster IP on port 80 without an external IP&lt;/span&gt;
kubectl get services &lt;span class="nt"&gt;-n&lt;/span&gt; playground

&lt;span class="c"&gt;# Check that there are x2 running pods on kmaster node&lt;/span&gt;
kubectl describe pods &lt;span class="nb"&gt;whoami&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; playground | &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="s2"&gt;"Status:"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id="demo-uninstall"&gt;Uninstall&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Follow the installation instructions for &lt;code&gt;Deployment&lt;/code&gt;, &lt;code&gt;Service&lt;/code&gt;, &lt;code&gt;IngressRoute&lt;/code&gt;, &lt;code&gt;Middleware&lt;/code&gt; and execute both scripts while replacing the &lt;code&gt;kubectl&lt;/code&gt; action:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Instead of using apply&lt;/span&gt;
&lt;span class="nb"&gt;cat&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="no"&gt;EOF&lt;/span&gt;&lt;span class="sh"&gt; | kubectl apply -f -  
...
&lt;/span&gt;&lt;span class="no"&gt;EOF

&lt;/span&gt;&lt;span class="c"&gt;# Replace with delete&lt;/span&gt;
&lt;span class="nb"&gt;cat&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="no"&gt;EOF&lt;/span&gt;&lt;span class="sh"&gt; | kubectl delete -f - 
...
&lt;/span&gt;&lt;span class="no"&gt;EOF
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clear the &lt;code&gt;playground&lt;/code&gt; namespace&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl delete namespaces playground
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id="demo-certificate"&gt;Certificate&lt;/h3&gt;

&lt;p&gt;We will have to create a certificate using &lt;code&gt;cert-manager&lt;/code&gt; to allow accessing the &lt;code&gt;whoami&lt;/code&gt; application using the hosted name &lt;code&gt;whoami.MY_DOMAIN.com&lt;/code&gt; within our home network. Create a self signed certificate as described in &lt;a href="https://blog.zachinachshon.com/cert-manager/#self-signed-certificate"&gt;here&lt;/a&gt; under &lt;code&gt;playground&lt;/code&gt; namespace.&lt;/p&gt;

&lt;p&gt;Verify that a TLS secret had been created for the certificate:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl get secret MY_DOMAIN-com-cert-secret &lt;span class="nt"&gt;--namespace&lt;/span&gt; playground
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;h3 id="demo-ingress"&gt;Ingress&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Create ingress entry points to allow secure communication using &lt;code&gt;HTTPS&lt;/code&gt; and allowing &lt;code&gt;HTTP&lt;/code&gt; with &lt;code&gt;HTTPS&lt;/code&gt; redirect middleware (make sure to replace &lt;code&gt;MY_DOMAIN&lt;/code&gt; with your domain name)&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="s"&gt;cat &amp;lt;&amp;lt;EOF | kubectl apply -f -&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;traefik.containo.us/v1alpha1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;IngressRoute&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;whoami-https&lt;/span&gt;
  &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;playground&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;entryPoints&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;websecure&lt;/span&gt;
  &lt;span class="na"&gt;routes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;match&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Host(\`whoami.MY_DOMAIN.com\`)&lt;/span&gt;
      &lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Rule&lt;/span&gt;
      &lt;span class="na"&gt;priority&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;
      &lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;whoami&lt;/span&gt;
          &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80&lt;/span&gt;
  &lt;span class="na"&gt;tls&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;secretName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;MY_DOMAIN-com-cert-secret&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;traefik.containo.us/v1alpha1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;IngressRoute&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;whoami&lt;/span&gt;
  &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;playground&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;entryPoints&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;web&lt;/span&gt;
  &lt;span class="na"&gt;routes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;match&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Host(\`whoami.MY_DOMAIN.com\`)&lt;/span&gt;
      &lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Rule&lt;/span&gt;
      &lt;span class="na"&gt;priority&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;
      &lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# This IngressRoute will be never called due to the redirect middleware&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;whoami&lt;/span&gt;
          &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80&lt;/span&gt;
      &lt;span class="na"&gt;middlewares&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;https-redirect&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;traefik.containo.us/v1alpha1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Middleware&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;https-redirect&lt;/span&gt;
  &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;playground&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;redirectScheme&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;scheme&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;https&lt;/span&gt;
    &lt;span class="na"&gt;permanent&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
&lt;span class="s"&gt;EOF&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Verify success status of HTTP routers and middlewares using the traefik dashboard&lt;/p&gt;

&lt;p&gt;HTTP Routers:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yMT_wG7S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uetk5uo0aq6mt1vb0cig.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yMT_wG7S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uetk5uo0aq6mt1vb0cig.png" alt="traefik-http-routers" width="880" height="305"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;HTTP Middlewares:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lBAXVZO2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ta1tcpjr8564pycp7eu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lBAXVZO2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ta1tcpjr8564pycp7eu.png" alt="traefik-http-middlewares" width="880" height="242"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set a hosted name &lt;code&gt;whoami.MY_DOMAIN.com&lt;/code&gt; on a client machine (laptop/desktop)&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Edit the file using `sudo /etc/hosts`&lt;/span&gt;
&lt;span class="c"&gt;# Append manualy to the existing k3s hosted name &lt;/span&gt;
111.222.333.444 kmaster, traefik.MY_DOMAIN.com, whoami.MY_DOMAIN.com

&lt;span class="c"&gt;# Alternatively, add a new hosted name entry with a one-liner&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="s2"&gt;"111.222.333.444&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;whoami.MY_DOMAIN.com"&lt;/span&gt; | &lt;span class="nb"&gt;sudo tee&lt;/span&gt; &lt;span class="nt"&gt;-a&lt;/span&gt; /etc/hosts
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Replace &lt;code&gt;111.222.333.444&lt;/code&gt;  with the &lt;code&gt;k3s&lt;/code&gt; master node IP address and &lt;code&gt;MY_DOMAIN&lt;/code&gt; with your domain name.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open a web-browser at &lt;a href="https://whoami.MY_DOMAIN.com"&gt;&lt;code&gt;https://whoami.MY_DOMAIN.com&lt;/code&gt;&lt;/a&gt; and check that you can get a response from the service(s)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Open &lt;a href="http://whoami.MY_DOMAIN.com"&gt;&lt;code&gt;http://whoami.MY_DOMAIN.com&lt;/code&gt;&lt;/a&gt; to check the &lt;code&gt;HTTP&lt;/code&gt; -&amp;gt; &lt;code&gt;HTTPS&lt;/code&gt; redirect.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt; &lt;/p&gt;




&lt;h3 id="summary"&gt;Summary&lt;/h3&gt;

&lt;p&gt;Congratulations on completing a major part of deploying an ingress controller on your Kubernetes cluster ! 💪&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What now?&lt;/strong&gt; Now that you are familiar with how to use Traefik as an ingress controller, you can simplify the inter-services communication within the cluster and expose applications APIs / Web-UI and such via &lt;code&gt;HTTPS&lt;/code&gt; in no time.&lt;/p&gt;

&lt;p&gt;Please leave your comment, suggestion or any other input you think is relevant to this post in the discussion below.&lt;/p&gt;




&lt;p&gt;Like this post?&lt;br&gt;
You can find more by:&lt;/p&gt;

&lt;p&gt;Checking out my blog: &lt;a href="https://blog.zachinachshon.com"&gt;https://blog.zachinachshon.com&lt;/a&gt;&lt;br&gt;
Following me on twitter: &lt;a class="mentioned-user" href="https://dev.to/zachinachshon"&gt;@zachinachshon&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading! ❤️&lt;/p&gt;

</description>
      <category>traefik</category>
      <category>kubernetes</category>
      <category>k3s</category>
      <category>ingress</category>
    </item>
    <item>
      <title>Everything you need to know about flex box. Make awesome websites</title>
      <author>Modern Web</author>
      <pubDate>Sat, 01 Jan 2022 17:38:20 +0000</pubDate>
      <link>https://dev.to/kunaal438/learn-css-css-flex-box-everything-you-need-to-make-good-websites-3gka</link>
      <guid>https://dev.to/kunaal438/learn-css-css-flex-box-everything-you-need-to-make-good-websites-3gka</guid>
      <description>&lt;p&gt;No matter you are a beginner or pro. If you want to make extraordinary Web sites. If you want make amazing UI/UX, then you must read this advance CSS series article. In this article, we’ll talk about CSS flex box. Flex box is important in CSS and with this we can make any sort of web site easily. If you follow this CSS series believe me you’ll be able to make amazing websites as I do. In today’s article, you will learn about flex box, and its use cases, and some of its properties. So let's quickly jump into it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#video-explanation"&gt;
  &lt;/a&gt;
  Video Explanation
&lt;/h1&gt;

&lt;p&gt;You can also watch the video explanation 😊&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/RXRGbPQHy9w"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#who-i-am-"&gt;
  &lt;/a&gt;
  Who I am ?
&lt;/h1&gt;

&lt;p&gt;Before we start, if you don't know me. Well, I am Kunaal from India manage Modern Web YouTube channel. I make content on web development to master your web dev skills, I made tutorials on &lt;a href="https://www.youtube.com/playlist?list=PLqm86YkewF6S45smPYeNv01aFFKWZSgYD"&gt;Fullstack Ecom website&lt;/a&gt;,&lt;a href="https://www.youtube.com/playlist?list=PLqm86YkewF6QS_knm-9-dc4tTKgbQI-zZ"&gt;Personal Portfolios&lt;/a&gt;, &lt;a href="https://www.youtube.com/playlist?list=PLqm86YkewF6RU_k6jymVX7EavJ1w9i4VW"&gt;Fullstack Blogging website&lt;/a&gt;, &lt;a href="https://www.youtube.com/playlist?list=PLqm86YkewF6TEYXEoyVUdDmmIEJ1TzORZ"&gt;Amazing Headers Animations&lt;/a&gt; and much more. If that excites you, you can visit my &lt;a href="https://www.youtube.com/channel/UCoygqHsdILWZFlfI5RMC-dw/"&gt;channel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let's start now.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-flex-box-amp-why-we-need-it"&gt;
  &lt;/a&gt;
  What is Flex box &amp;amp; Why we need it.
&lt;/h1&gt;

&lt;p&gt;Well before we see how we can use flex box. I guess its important that we see why we need it. In my perspective this is the best way to learn.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uQAnuZ90--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/48a95zt8s9mhn7jhliac.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uQAnuZ90--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/48a95zt8s9mhn7jhliac.png" alt="CSS Flex Box" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see the above illustration, in that you can clearly see even though my H1 element is covering the blue part only, but still it has full width and covering the whole space the red part. And because of that the &lt;code&gt;p&lt;/code&gt; element is coming below the &lt;code&gt;h1&lt;/code&gt;. Well this is happening because, in HTML almost every elements are considered as a HTML block. And because of it they have full width. &lt;/p&gt;

&lt;p&gt;But what if, I want to make the elements side by side. Well I said all the elements are like a block, so can't we make them side by side. Well for exactly this purpose, we have &lt;code&gt;flex box&lt;/code&gt; in CSS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZQ-cT2JX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ucth5lyb6ukfc4zx1771.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZQ-cT2JX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ucth5lyb6ukfc4zx1771.png" alt="CSS Flex Box" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-to-use-flex-box-"&gt;
  &lt;/a&gt;
  How to use flex box ?
&lt;/h1&gt;

&lt;p&gt;So once we know when we need to use flex box. Then we can see how to use it. So in CSS, we access or use flex box using &lt;code&gt;display: flex&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Well, if you ever used &lt;code&gt;display&lt;/code&gt; property in CSS. You know we give it directly to the element. What do I mean with that ?&lt;/p&gt;

&lt;p&gt;ummm! I mean for instance, If I want to hide any element let say &lt;code&gt;h1&lt;/code&gt; element. Then I will use &lt;code&gt;display:none&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code will hide the the &lt;code&gt;h1&lt;/code&gt; element. So can we use &lt;code&gt;flex&lt;/code&gt; like this. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IIfwfy2R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iag0u2woab9i5lbyzpd9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IIfwfy2R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iag0u2woab9i5lbyzpd9.png" alt="CSS Flex Box" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Well, even though we use &lt;code&gt;flex box&lt;/code&gt; using &lt;code&gt;display&lt;/code&gt; property. We don't give this directly to the element. We give this to the nearest parent element. You can see in above illustration, both &lt;code&gt;h1&lt;/code&gt; and &lt;code&gt;p&lt;/code&gt; elements, have a common &lt;strong&gt;nearest&lt;/strong&gt; parent element which is &lt;code&gt;body&lt;/code&gt; element. So we will give &lt;code&gt;display:  flex&lt;/code&gt; to body element. I hope you understand because it is very important, most people forget this all the time that they should add &lt;code&gt;display: flex&lt;/code&gt; to the nearest parent.&lt;/p&gt;

&lt;p&gt;Now, let's see some if its properties cause without the properties, It'll not be fun to use flex box.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#justify-content"&gt;
  &lt;/a&gt;
  Justify Content
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--coaNGhCh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ms234kd6wif4ueuc5iq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--coaNGhCh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ms234kd6wif4ueuc5iq.png" alt="CSS Flex box" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Justify content property is used to align the children in &lt;code&gt;horizontal&lt;/code&gt; axis. You can refer to the above image.&lt;/p&gt;

&lt;p&gt;Let's see some of its value. And of course we give this to nearest parent element.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z_Bye-X8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/neg8xsb0ogu5ocr9dh1z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z_Bye-X8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/neg8xsb0ogu5ocr9dh1z.png" alt="Frame 3 (1)" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#align-items"&gt;
  &lt;/a&gt;
  Align Items
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hRI3Dz0k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/njyzj106wpaic4khck2a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hRI3Dz0k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/njyzj106wpaic4khck2a.png" alt="CSS Flex Box" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Well, on side justify content place children in X axis, so &lt;code&gt;align-items&lt;/code&gt; place the children in Y axis. You can refer the above image.&lt;/p&gt;

&lt;p&gt;Some of it's properties.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PRLRkIkt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eg7094aql8asnsxa5783.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PRLRkIkt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eg7094aql8asnsxa5783.png" alt="Alt Text" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#flex-wrap"&gt;
  &lt;/a&gt;
  Flex Wrap
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pZrJxkxz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8dowxq56i21nuk0m4nj4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pZrJxkxz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8dowxq56i21nuk0m4nj4.png" alt="CSS Flex Box" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The main reason of using &lt;code&gt;flex&lt;/code&gt; is responsiveness, so how can achieve that. Well &lt;code&gt;flex-wrap&lt;/code&gt; basically wraps or break the flow of flex box. making the website responsive.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MjDfgZE6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vhm0q8lcmuc26f0h1cy2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MjDfgZE6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vhm0q8lcmuc26f0h1cy2.png" alt="Frame 2 (7)" width="880" height="495"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#flex-direction"&gt;
  &lt;/a&gt;
  Flex Direction
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CjFoazMe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rkvz2rfsst737n2zgl28.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CjFoazMe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rkvz2rfsst737n2zgl28.png" alt="CSS flex Box" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, &lt;code&gt;flex-direction&lt;/code&gt; its very simple, its just change the flow of flex box. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f0YoIbQ0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cyzjpgc2m3ha9m2464tu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f0YoIbQ0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cyzjpgc2m3ha9m2464tu.png" alt="Frame 1 (2)" width="880" height="495"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#some-other-properties"&gt;
  &lt;/a&gt;
  Some other properties.
&lt;/h1&gt;

&lt;p&gt;Up until now, all the properties we saw, we give them to nearest parent. But we have some more properties which we give directly to the children or specific element.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BYnYUm8p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/356z1ouoozaxe8xnquqe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BYnYUm8p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/356z1ouoozaxe8xnquqe.png" alt="CSS Flex Box" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The above properties not use more often, that's why I am not telling you, but if you want you can check them in my other article &lt;a href="https://dev.to/kunaal438/display-flex-complete-guide-on-css-flex-box-2021-5bi2"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#wrap-up"&gt;
  &lt;/a&gt;
  Wrap up
&lt;/h1&gt;

&lt;p&gt;So, that's it. That was all about CSS Flex box. If you liked the article and found it helpful, make sure sure to follow me and you can also show your appreciation by simply subscribing my youtube channel. I make awesome web dev content though 😉&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/c/modern_web?sub_confirmation=1"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5gs5zBA7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jeitpawvax07cx7r9yoa.png" width="334" height="90"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, As I decided to make advance CSS series, then I will do it on my style. And according to me its not enough that I'll tell you how to use it. You also have to practice it. For that, I made 3 designs for you that you can make using flex box for practice. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://drive.google.com/file/d/1hyTfvacx0vMgMw-1HQ7pqR1xbRyn9chf/view?usp=sharing"&gt;Design 1&lt;/a&gt;, &lt;a href="https://drive.google.com/file/d/1pq95M4STxs2FvkYIJEhpLQCtb6g28uCV/view?usp=sharing"&gt;Design 2&lt;/a&gt;, &lt;a href="https://drive.google.com/file/d/1U8YchJTx0Yjx_8OdGrbikNAfhg8eIYNf/view?usp=sharing"&gt;Design 3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Well, make sure you code the above designs, it will motivate me to continue this CSS series. And make sure to submit it to me by tagging me on my instagram &lt;code&gt;@modern_web_channel&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you stuck anywhere, or have any doubt feel free to ask me. &lt;/p&gt;

&lt;p&gt;Thanks for reading 😊&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#articles-you-may-find-useful"&gt;
  &lt;/a&gt;
  Articles you may find Useful
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/css-the-best-css-effects-of-all-time-most-underrated-web-ux-2chj"&gt;Best CSS Effect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/quick-css-make-infinity-loading-animation-for-your-next-website-187k"&gt;Infinte CSS loader&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/how-to-create-disney-plus-clone-for-beginner-in-2021-html-css-js-m3p"&gt;Disney+ Clone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/create-working-youtube-clone-with-search-box-youtube-api-2a6e"&gt;Youtube API - Youtube Clone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/how-to-create-netflix-clone-netflix-clone-with-hmtl-css-js-989"&gt;TMDB - Netflix Clone&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Creating better user experiences with React 18 Suspense and Transitions</title>
      <author>tmns</author>
      <pubDate>Sat, 01 Jan 2022 17:13:40 +0000</pubDate>
      <link>https://dev.to/tmns/creating-better-user-experiences-with-react-18-suspense-and-transitions-3oje</link>
      <guid>https://dev.to/tmns/creating-better-user-experiences-with-react-18-suspense-and-transitions-3oje</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-are-you-talking-about"&gt;
  &lt;/a&gt;
  What are you talking about?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://reactjs.org/blog/2021/06/08/the-plan-for-react-18.html"&gt;React 18&lt;/a&gt; is &lt;a href="https://github.com/reactwg/react-18/discussions/112"&gt;around the corner&lt;/a&gt; and one of the big things coming along with it is &lt;a href="https://reactjs.org/docs/concurrent-mode-intro.html"&gt;&lt;em&gt;Concurrent Mode&lt;/em&gt;&lt;/a&gt;. The general idea is that it's going to allow for concurrent / interruptible rendering, which in turn will enable us to create more responsive and enjoyable applications for our users.&lt;/p&gt;

&lt;p&gt;This post will focus on two Concurrent Mode features in particular, &lt;a href="https://reactjs.org/docs/concurrent-mode-suspense.html"&gt;Suspense for Data Fetching&lt;/a&gt; and &lt;a href="https://reactjs.org/docs/concurrent-mode-patterns.html#transitions"&gt;Transitions&lt;/a&gt;, which will allow us to create much better loading experiences (and let's face it: we desperately need it!).&lt;/p&gt;

&lt;p&gt;Up until now, when needing to fetch data before showing some UI that depends on that data, we typically rendered a loading state in its place, for example a loading spinner or skeleton, until the request resolved with the necessary data.&lt;/p&gt;

&lt;p&gt;As an example, let's look at the following CodeSandbox:&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/v3kyj"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Every time we change tabs, the &lt;code&gt;Content&lt;/code&gt; component for said tab fetches some data. While that data is being fetched, we render a little loading component in the content's place. This isn't the worst experience and indeed it's more-or-less the standard way we see loading states implemented in apps today.&lt;/p&gt;

&lt;p&gt;Wouldn't it be nicer though if we didn't show that in-between loading state at all? What if, instead, we held on to the previous state of the UI until the data was ready? To be fair, we can technically achieve this with React 17 if we really want to but it's definitely a challenge to get right and not very straight-forward. React 18, on the other hand, makes this very simple:&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/t8yt0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Now instead of switching tabs immediately we stay on the tab we're on and continue to show its content until the new tab's content is ready. We effectively have taken complete control over how we want our loading states to behave. The result is a more seamless and less jarring experience for the user.&lt;/p&gt;

&lt;p&gt;This is now a good time to point out that the demo above is a rewrite of the awesome &lt;a href="https://www.solidjs.com/"&gt;SolidJS&lt;/a&gt; demo showcasing its &lt;a href="https://www.solidjs.com/examples/suspensetabs"&gt;implementation of Suspense and Transitions&lt;/a&gt;, which its had for a while now. In general SolidJS and its community is incredible and I highly recommend folks check it out.&lt;/p&gt;

&lt;p&gt;If you're a "just show me the code" type of person then that's it! Fork the demo and make it yours! If you want a bit more of an explanation though, continue on!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-it-work"&gt;
  &lt;/a&gt;
  How does it work?
&lt;/h2&gt;

&lt;p&gt;The magic in this demo, as hinted at in the introduction, lies in the use of Suspense for data fetching and the new &lt;code&gt;useTransition&lt;/code&gt; hook.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h3&gt;

&lt;p&gt;First though, in order to enable any of these features, we need to make a small change to how we render our root. Instead of rendering via &lt;code&gt;ReactDOM.render&lt;/code&gt;, we use the new &lt;code&gt;ReactDOM.createRoot&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createRoot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And just like that we have access to Concurrent Mode! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#suspense-for-data-fetching"&gt;
  &lt;/a&gt;
  Suspense (for data fetching)
&lt;/h3&gt;

&lt;p&gt;Now that we're up and running with the new features, we can examine in more details our use of &lt;code&gt;Suspense&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Suspense&lt;/span&gt; &lt;span class="na"&gt;fallback&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Loader&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;tab&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Content&lt;/span&gt; &lt;span class="na"&gt;page&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Uno"&lt;/span&gt; &lt;span class="na"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;resource&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;tab&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Content&lt;/span&gt; &lt;span class="na"&gt;page&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Dos"&lt;/span&gt; &lt;span class="na"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;resource&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;tab&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Content&lt;/span&gt; &lt;span class="na"&gt;page&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Tres"&lt;/span&gt; &lt;span class="na"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;resource&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Suspense&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Up until now, we've typically used &lt;code&gt;Suspense&lt;/code&gt; when lazy loading components. However in this case our components aren't lazy loaded at all! Instead of suspending on the async loading of the component itself, we're now suspending on the async loading of data within it.&lt;/p&gt;

&lt;p&gt;Checking within &lt;code&gt;Content&lt;/code&gt;, we see a peculiarly simple component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Content&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;resource&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;read&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"tab-content"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      This content is for page "&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;" after &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toFixed&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      ms.
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;CONTENT&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Normally we would expect to see a check for &lt;code&gt;time&lt;/code&gt;, which would probably be set in state, for example maybe something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTime&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setTime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
  &lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"tab-content"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      This content is for page "&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;" after &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toFixed&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      ms.
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;CONTENT&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, instead we see the &lt;code&gt;jsx&lt;/code&gt; being unconditionally returned. Further &lt;code&gt;time&lt;/code&gt; isn't set in state to trigger a rerender, rather its set to &lt;code&gt;resource.delay.read()&lt;/code&gt;. And that's the clue to how this is all working!&lt;/p&gt;

&lt;p&gt;You'll see when looking into our &lt;code&gt;fakeAPI&lt;/code&gt; file, that &lt;code&gt;resource.delay&lt;/code&gt; is actually a special kind of promise, which in our naive implementation taken from the official React examples, is essentially a simplified mock of what something a React 18 compatible data fetching library would provide (and what &lt;a href="https://relay.dev/"&gt;Relay&lt;/a&gt; already does provide!).&lt;/p&gt;

&lt;p&gt;The API itself is an implementation detail, the main take-away is that in React 18, &lt;code&gt;Suspense&lt;/code&gt; wrapped components will be able to continuously check if the async data a component is attempting to read has been resolved, throwing and continuing to render the fallback until it's ready.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#transitions"&gt;
  &lt;/a&gt;
  Transitions
&lt;/h3&gt;

&lt;p&gt;With this new use of &lt;code&gt;Suspense&lt;/code&gt;, implementing components that depend on async data is much more straight-forward. By itself though, we still can't easily control our loading states. We need the other major piece of our puzzle: the new and shiny &lt;code&gt;useTransition&lt;/code&gt; hook.&lt;/p&gt;

&lt;p&gt;Note that this hook is really all about defining some state changes as transitional rather than urgent, meaning that if some new work needs to be done during rendering of those changes, React should interrupt the rendering and perform that new work first. For a great in depth example of how this can be used to improve UX, check out &lt;a href="https://github.com/reactwg/react-18/discussions/65"&gt;this guide&lt;/a&gt; from core React team member &lt;a href="https://twitter.com/rickhanlonii"&gt;Ricky Hanlon&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In our case, we're going to use &lt;code&gt;useTransition&lt;/code&gt; to tell React that setting the new tab and setting the new resource (which in turn fetches the tab's data) are both transitional state changes and as such we want it to hold off on rendering the resulting UI.&lt;/p&gt;

&lt;p&gt;This is accomplished by wrapping both of our transitional state changes in a call to &lt;code&gt;startTransition&lt;/code&gt;, which we get from &lt;code&gt;useTransition&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isPending&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;startTransition&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useTransition&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;startTransition&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setTab&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setResource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fetchData&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will also notice that along with &lt;code&gt;startTransition&lt;/code&gt; we get another utility: &lt;code&gt;isPending&lt;/code&gt;. As you can probably guess, this returns &lt;code&gt;true&lt;/code&gt; while our transitional changes are still ongoing. This can be used to show an extra piece of loading state so the user knows something is happening in the background. &lt;/p&gt;

&lt;p&gt;In our example, that's the "loading bar" at the top, along with some styling changes to the tabs and the content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;GlobalLoader&lt;/span&gt; &lt;span class="na"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isPending&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`tab &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;isPending&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pending&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
// ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's really it! Once you get past the theory and jargon, the practical implementation is very straight-forward. It basically comes down to just wrapping transitional changes with &lt;code&gt;startTransition&lt;/code&gt; and handling other UX details with &lt;code&gt;isPending&lt;/code&gt; 🙌&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thats-all-folks"&gt;
  &lt;/a&gt;
  That's all folks
&lt;/h2&gt;

&lt;p&gt;If you can't tell, I'm super excited for React 18 and Concurrent Mode. Along with streaming server rendering, this release is going to be a complete game changer as far as React goes. I can't wait to use it in "the real world" to make applications more snappy and users more happy!&lt;/p&gt;

&lt;p&gt;Hope you got something out of this as always questions / comments are more than welcome! 🤙&lt;/p&gt;

</description>
      <category>react</category>
      <category>tutorial</category>
      <category>frontend</category>
      <category>webdev</category>
    </item>
    <item>
      <title>API Authentication types - Part 1</title>
      <author>Burhanuddin Bhopalwala</author>
      <pubDate>Sat, 01 Jan 2022 17:03:13 +0000</pubDate>
      <link>https://dev.to/burhanuddinbhopalwala/api-authentication-types-part-1-12hd</link>
      <guid>https://dev.to/burhanuddinbhopalwala/api-authentication-types-part-1-12hd</guid>
      <description>&lt;p&gt;Hey folks! In this article (part 1) and the upcoming article (part 2), I will cover and &lt;strong&gt;summarize&lt;/strong&gt; the types of mostly used authentication generally used for API/Backend development and as per &lt;a href="https://www.ietf.org/standards/rfcs/"&gt;RFC&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;## Table Of Contents&lt;br&gt;
     * &lt;a href="#chapter-1"&gt;Introduction&lt;/a&gt;&lt;br&gt;
     * &lt;a href="#chapter-2"&gt;Types of Authentication&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#what-is-authentication-amp-authorization"&gt;
  &lt;/a&gt;
  What is Authentication &amp;amp; Authorization?
&lt;/h4&gt;

&lt;p&gt;Authentication is the process of proving your identity using credentials) and Authorization is the process of granting limited access based on user role.&lt;/p&gt;

&lt;p&gt;The authentication process is primarily based on 2 things: &lt;br&gt;
** What user know (PWD) + What user have (OTP/MFA_TOKEN/API_TOKEN) **&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Notation I am using below, &lt;strong&gt;(NO, YES)&lt;/strong&gt; means a type of Authentication process that doesn't require a user to know anything (NO) but requires the User to have something (YES) respectively.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#types-of-authentication"&gt;
  &lt;/a&gt;
  Types of Authentication &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#type-0-no-auth-no-no"&gt;
  &lt;/a&gt;
  TYPE 0: No Auth (NO, NO)
&lt;/h4&gt;

&lt;p&gt;A Google search page doesn't require the User to know anything and to have anything. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#type-11-basic-authentication-yes-no"&gt;
  &lt;/a&gt;
  TYPE 1.1: Basic Authentication (YES, NO)
&lt;/h4&gt;

&lt;p&gt;A simple way of proving your identity in which a User is required to know something (PWD) but doesn't require to have anything.&lt;/p&gt;

&lt;p&gt;A general use case is a Gmail login. however, it is comparatively less secure so it's always HTTPS recommended.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#type-12-digest-authenticationyes-no"&gt;
  &lt;/a&gt;
  TYPE 1.2: Digest Authentication(YES, NO)
&lt;/h4&gt;

&lt;p&gt;A digest way of proving your identity. This is a combination of Basic Authentication along with extra security by Base64 encoding of Username &amp;amp; Password as an extra layer of encryption thus security. &lt;/p&gt;

&lt;p&gt;** This Base64 encrypted username + password combined called Digest**. This can be then supplied as an &lt;code&gt;Authentication header&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#type-21-apikey-no-yes"&gt;
  &lt;/a&gt;
  TYPE 2.1: API_KEY (NO, YES)
&lt;/h4&gt;

&lt;p&gt;This is another type of Authentication where an API_Consuemer/Client doesn't require to know anything but to have something (API_TOKEN/API_KEY) to prove the identity.&lt;/p&gt;

&lt;p&gt;Example: Accessing a webhook/service endpoints by having the API_TOKEN. This is in the context of not referencing an actual user instead of considering a Client application/consumer authentication to access a 3rd party Service. &lt;/p&gt;

&lt;p&gt;The API_TOKEN can be supplied as &lt;code&gt;x-API-key&lt;/code&gt; as Authentication header OR as a &lt;code&gt;query parameter&lt;/code&gt; also. An example of this type of Authentication is to accessing a Google Geolocation API inside of an Application Client or accessing an ML API by downstream apps.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#type-22-bearer-token-no-yes-oauth-10"&gt;
  &lt;/a&gt;
  TYPE 2.2: BEARER TOKEN (NO, YES) ~ OAuth 1.0
&lt;/h4&gt;

&lt;p&gt;Similar to the above type but consider this as a Frontend application accessing a downstream Backend application by passing a &lt;strong&gt;JSON token a.k.a Bearer Token&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This is a very popular approach if the Frontend and Backend of an application are decoupled while maintaining a   &lt;strong&gt;Stateless / Soft Authentication&lt;/strong&gt; practice for the User.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2vphs_7D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/78fb6iiws4u9i6e3wj0z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2vphs_7D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/78fb6iiws4u9i6e3wj0z.png" alt="OAuth 1.0" width="180" height="181"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#downside-of-this-type-of-authentication"&gt;
  &lt;/a&gt;
  Downside of this type of authentication:
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;The downside of this approach is that API_TOKEN can be compromised easily as a turnaround and best practice these token are encrypted using &lt;code&gt;PRIVATE_KEY&lt;/code&gt;. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Furthermore, these tokens are generated with an &lt;code&gt;expiry&lt;/code&gt; as well as an extra security check but this calls for re-authentication which hamper the user experience.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Another drawback is this can only be extended to &lt;strong&gt;Web Workflows&lt;/strong&gt; and thus does not solve the problem of Password Anti Pattern and better separation of duties/Authorization across different microservices. More on this I will cover in part 2 of this article.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The above drawbacks call out for &lt;code&gt;OAuth 2.0&lt;/code&gt; which is a complete rewrite of &lt;code&gt;OAuth 1.0&lt;/code&gt;. I will be covering this in part-2 of this article.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#type-31-two-factormultifactor-authentication-yes-yes"&gt;
  &lt;/a&gt;
  TYPE 3.1: Two Factor/Multi-Factor Authentication (YES, YES)
&lt;/h4&gt;

&lt;p&gt;The most secure way of authentication require the User to know something (PWD) and to have something (OTP or MFA code)&lt;/p&gt;

&lt;p&gt;A common use case can be found for applications that can not afford compromise on security like Banking applications etc.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#type-4-mutual-sslcertificate-based-authentication2-way-ssl2legged-authentication-all-are-same-"&gt;
  &lt;/a&gt;
  TYPE 4: Mutual SSL/Certificate based authentication/2 way SSL/2-legged authentication (all are same :))
&lt;/h4&gt;

&lt;p&gt;This is also a type of authentication which is highly a secure type of authentication. This refers to two parties authenticating each other by providing a digital certificate &lt;code&gt;cert.key&lt;/code&gt; so that both parties are assured of the other identity over L4 (Layer 4) Security.&lt;/p&gt;

&lt;p&gt;Based on the level of security this approach is also a preferred approach of authentication b/w API_consumer/client and the Server for data-sensitive applications.&lt;/p&gt;

&lt;p&gt;As there are several types of Authentication available understanding them can be overwhelming. Hope this summarization helps the &lt;code&gt;DEV Community&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Thanks for reading.&lt;br&gt;
&lt;a href="https://medium.com/@burhanuddinbhopalwala"&gt;https://medium.com/@burhanuddinbhopalwala&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>serverless</category>
      <category>microservices</category>
      <category>performance</category>
    </item>
    <item>
      <title>A beginners guide to AWS Amplify Studio</title>
      <author>Mark Ramrattan </author>
      <pubDate>Sat, 01 Jan 2022 16:46:08 +0000</pubDate>
      <link>https://dev.to/aws-builders/a-beginners-guide-to-aws-amplify-studio-391</link>
      <guid>https://dev.to/aws-builders/a-beginners-guide-to-aws-amplify-studio-391</guid>
      <description>&lt;p&gt;Are you trying to learn more about AWS Amplify Studio? If your answer is Yes, then this guide may help you get a better understanding. Hopefully it will also help you keep track of related information around this new release. There are a few different videos, blogs, tweets popping up on Amplify Studio. I needed something to connect them all together (maybe you do too). We all know how fast it changes in this space and a guide can help keep this information in one place and relevant. As I find new resources / links, i'll be updating this same guide to keep it up to date :) If you have recommended resources, please do share them and i'll add them to this guide. Probably a good time to drop that famous proverb:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you want to go fast, go alone; but if you want to go far, go together :) &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I'll be explaining and listing essential resources on Amplify Studio. We will also be taking AWS Amplify Studio for a test drive! Hopefully you will find value in this guide / blog. Even if it's just understanding concepts. Please do follow along (at your own pace) and test it out with me. If you're not aware of this new update… let's explain below (feel free to skip this if you've already gone through it):&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is AWS Amplify Studio?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/KJSD6LFErgE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;AWS Amplify Studio is a &lt;strong&gt;visual development environment&lt;/strong&gt; for building full-stack web and mobile apps. &lt;em&gt;Studio&lt;/em&gt; builds on existing backend building capabilities in AWS Amplify, allowing you to accelerate your UI development. With Studio, you can quickly build an entire web app, front-to-back, with minimal coding, while still maintaining full control over your app design and behaviour through code.&lt;/p&gt;

&lt;p&gt;I like to think of amplify as &lt;em&gt;&lt;strong&gt;a great way for you to go from idea to production ready app, fast&lt;/strong&gt;&lt;/em&gt;. I also think this shift to Amplify Studio will help bring ideas to life for non developers too. Have you got a startup idea? I would recommend trying this out! Let's have a look at what resources are available to you: &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#documentation-resources"&gt;
  &lt;/a&gt;
  Documentation Resources
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;About Amplify Studio&lt;/em&gt;: &lt;a href="https://aws.amazon.com/amplify/studio/"&gt;https://aws.amazon.com/amplify/studio/&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;General information on Amplify Studio. Great for quickly understanding what it can be used for.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Amplify Studio Docs&lt;/em&gt;: &lt;a href="https://docs.amplify.aws/console/"&gt;https://docs.amplify.aws/console/&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This website is where most of the magic happens. It explains how to setup your Amplify (Studio) environment. Key concepts are explained, helping you to turn your idea into UI design, database modelling and binding your UI to data. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Amplify UI Docs&lt;/em&gt;: &lt;a href="https://ui.docs.amplify.aws"&gt;https://ui.docs.amplify.aws&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Great website for you to learn how you can use prebuilt UI design layouts and components within your app. This is a new feature and definitely worth checking out for inspiration!   &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Understanding CSS&lt;/em&gt;: &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction/"&gt;Flex Help&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are lots of properties now with UI / CSS aspects in the development and design of components and layouts. This website will help you fill in the gaps of what can be changed regarding design.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;What's New&lt;/em&gt;: &lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/12/aws-amplify-studio/"&gt;AWS News Post on AWS Amplify Studio&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;General overview / announcement explaining region availability of Amplify Studio.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Amplify Studio features written by &lt;a class="mentioned-user" href="https://dev.to/aspittel"&gt;@aspittel&lt;/a&gt; and &lt;a class="mentioned-user" href="https://dev.to/theswaminator"&gt;@theswaminator&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/aspittel" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lsknEIX6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--stJcpewb--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/38627/77a2a5e7-603e-41b4-afcc-f7aff468ae2f.jpg" alt="aspittel"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/aspittel/8-new-features-of-amplify-studio-14gf" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;8 New Features of Amplify Studio&lt;/h2&gt;
      &lt;h3&gt;Ali Spittel ・ Dec 6 '21 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Great overview of eight new functionalities and features for Amplify Studio. &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#tutorial-resources"&gt;
  &lt;/a&gt;
  Tutorial Resources
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Launch Blog Tutorial&lt;/em&gt;: &lt;a href="https://aws.amazon.com/blogs/mobile/aws-amplify-studio-figma-to-fullstack-react-app-with-minimal-programming/"&gt;AWS Amplify Studio using Figma&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;René taking you through a tutorial from start to finish. Even if this is not aligned with your idea. Doing this tutorial will help you gain practical understanding of key concepts.   &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;AWS Amplify Studio&lt;/em&gt;: &lt;a href="https://docs.amplify.aws/console/tutorial/buildui/"&gt;Official Getting Started Tutorial &lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You should do this official tutorial, really good and probably the best place to start if you don't want to read anything and just build. Which is completely cool to do too. We all learn and build differently.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Build a Vacation Rental Site with Amplify Studio&lt;/em&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/aspittel" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lsknEIX6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--stJcpewb--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/38627/77a2a5e7-603e-41b4-afcc-f7aff468ae2f.jpg" alt="aspittel"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/aspittel/build-a-vacation-rental-site-with-amplify-studio-1n10" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Build a Vacation Rental Site with Amplify Studio&lt;/h2&gt;
      &lt;h3&gt;Ali Spittel ・ Dec 14 '21 ・ 8 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Great tutorial that helps with all those nuances that don't get explained. Lots of extra links on the different steps to help plug those gaps.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Matt's Amplify Studio Twitter Tutorial thread&lt;/em&gt;: &lt;/li&gt;
&lt;/ul&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DBYW_pXW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FF0e5coWQAcH1Yd.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--VbuxFXV3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1240358048247537665/HmY1tpB7_normal.jpg" alt="Matt Auerbach profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Matt Auerbach
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/mauerbac"&gt;@mauerbac&lt;/a&gt;
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Recovering from re:invent so spent the evening playing with the 🆕 &lt;a href="https://twitter.com/AWSAmplify"&gt;@AWSAmplify&lt;/a&gt; Studio for the first time&lt;br&gt;&lt;br&gt;It's honestly very cool and has a ton of potential. I just wish I knew how to use Figma better! &lt;br&gt;&lt;br&gt;Created a silly app to list apartments &lt;br&gt;&lt;a href="https://t.co/dQwWs5WpQp"&gt;master.d36ithr1kk4tvj.amplifyapp.com&lt;/a&gt;&lt;br&gt;&lt;br&gt;Tutorial 👇 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      06:06 AM - 05 Dec 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1467374905033437185" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1467374905033437185" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1467374905033437185" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Great for understanding the steps quickly. Definitely recommended if you want to learn via Twitter. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Anna's blog on&lt;/em&gt;: &lt;a href="https://aws.amazon.com/blogs/mobile/build-newsfeed-with-aws-amplify-studio/"&gt;Building a Newsfeed with AWS Amplify Studio&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Great to see a different use case tutorial. Brings in deeper integration of social platform you might be creating. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9HmrxOdH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/58wg3wnnhd7nbpfmpkq2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9HmrxOdH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/58wg3wnnhd7nbpfmpkq2.gif" alt="Newsfeed AWS Amplify Studio Figma" width="600" height="375"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Figma Design Integration&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;One of the new features allows you or graphic designers to develop your app design in Figma and integrate within Amplify Studio. Let's take a look at this integration. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://figma.com"&gt;Figma&lt;/a&gt; is a free, online UI tool to create, collaborate, prototype, and handoff your application design. Amplify Studio offers an integration with Figma, allowing you to generate reusable React code by importing your Figma design file. Amplify Studio automatically converts any Figma component in your Figma file to a React component that can then be used in your app. Whenever you make a change to the component in Figma you sync the changes to Amplify Studio and update your application!&lt;/p&gt;

&lt;p&gt;There are 4 introduction videos &lt;a href="https://help.figma.com/hc/en-us/sections/4405269443991-Figma-for-Beginners-tutorial"&gt;here&lt;/a&gt; on how to use Figma. If you're like me, this is all new. I'm used to graphic designers working in adobe photoshop, illustrator etc and sending it to front-end developers (me) and then I would translate that into production. Using Figma is a new way for me to improve the design -&amp;gt; development process.   &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#lets-go-amp-build-a-solution-mvp"&gt;
  &lt;/a&gt;
  Let's GO! &amp;amp; Build a Solution (MVP)
&lt;/h2&gt;

&lt;p&gt;The above is a lot of information to digest. We are not stopping there... (stick with me!) and yes we could probably split this into a series, though we have all these resources and we've got nothing tangible... We need to build something with all this knowledge! &lt;/p&gt;

&lt;p&gt;I was in the Amplify Extensibility sessions and few people commented "&lt;em&gt;is there anywhere on the web with all the amplify videos in one place?&lt;/em&gt;". I replied, "&lt;em&gt;i've not seen one and could easily create a youtube playlist to encapsulate them all&lt;/em&gt;". Though let's create a place (solution) to view all Amplify Studio videos.    &lt;/p&gt;

&lt;p&gt;Yep, we are going to build an app to hold all of our Amplify Studios videos. Yes, that sounds like inception. Building something for Amplify with Amplify. We need this solution, to give other users CRUD access to update / manage the content (Amplify Studio enables this functionality). That's enough talking, let's GO!  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1: Load up an App in Amplify Studio&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Lots of different ways to do this, i've gone via &lt;a href="https://signin.aws.amazon.com/console"&gt;AWS Management Console&lt;/a&gt;, then locate AWS Amplify and select New app -&amp;gt; Build an App. You should see the below screen, i've called my app 'Amplify Learning'. Select Confirm Deployment.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UGWmt1KG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f9y74ktm8ev7c747og09.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UGWmt1KG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f9y74ktm8ev7c747og09.png" alt="AWS Amplify Studio" width="880" height="481"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2: Launch Amplify Studio&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Once it loads, you'll see 'Launch Studio' button in the backend tab, click that button. Though check if your pop up is blocking it from opening (always happens to me, in chrome!).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AkH2BYoZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4fi5im62xuffpg62023b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AkH2BYoZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4fi5im62xuffpg62023b.png" alt="Amplify Studio" width="815" height="455"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you've been using Amplify recently, you'll notice, Amplify Studio looks exactly like Amplify Admin UI and you would be correct ;) What's better than a new service, a service that's been refined and improved over time. I digress, let's get back on it! &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3: Data modelling &amp;amp; Adding Data&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Select the Data tab on the left, we are going to do some data modelling. Mine looks like this: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xXUwYqE0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fs2ae0z2uiz6nqlndfsz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xXUwYqE0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fs2ae0z2uiz6nqlndfsz.png" alt="Amplify Studio Data tab" width="880" height="619"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you've gone through the other tutorials, this will be familiar to you. I've added fields for video url, name and type. Once you're happy with your data structure, click "Save and Deploy". This is where Amplify builds it all out for you in the background. Once done, head over to the content tab. Mine looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LaAscLsT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6rou13xs5g8as9jyqoq1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LaAscLsT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6rou13xs5g8as9jyqoq1.png" alt="Amplify Studio Content tab" width="880" height="469"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yes we can add auto generated data, though you're on route to production / being a pro, put in some real data. I've inputed some Amplify Studio videos that are essential viewing. Once done, it's time to introduce Figma (Design). Click the Home menu and select the 'Build UI' button. Or click the UI Library tab and select Get Started button. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4: Open up Figma&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Clicking the Get Started button will open up the link to: &lt;a href="https://www.figma.com/community/file/1047600760128127424"&gt;Figma - Amplify Studio Template&lt;/a&gt;. Click duplicate and select My Components. You'll see the available components. I've customised CardE. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fHnjk4Lj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/imrxliwanx35d88n4geh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fHnjk4Lj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/imrxliwanx35d88n4geh.png" alt="Amplify Studio" width="880" height="443"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Feel free to adjust your component the way you would like it. Once you're happy with the design. Click the Share button in the top right and copy the link. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jS3dI7tG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qsi9gf8voj8uyhtpn0xg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jS3dI7tG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qsi9gf8voj8uyhtpn0xg.png" alt="Figma Share Link" width="880" height="494"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 5: Sync Amplify Studio with Figma&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Once you've got your link, you need to switch back over to Amplify and paste the link in the UI Library (tab) area and click Continue. This will prompt you to sign in with Figma. Allow access and sync the files. I normally accept all, quicker. Then all your components will be available for you.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CkWKvJNQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a9s7nlqndasxqx0ggaag.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CkWKvJNQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a9s7nlqndasxqx0ggaag.png" alt="Figma Sync" width="880" height="668"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once that is done, you will see all the components loaded from Figma in you Amplify UI Library tab. Here is what mine looks like.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3z3vn7dJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mf5g2qpjbil9ffasbqoq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3z3vn7dJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mf5g2qpjbil9ffasbqoq.png" alt="UI Library Sync Figma Components" width="880" height="476"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 6: Configure &amp;amp; Bind Data to Components&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Awesome, it's looking good. Notice i've highlighted the Configure button in the above image. We now need to turn our design into a collection and bind the data to our design. Click configure and you'll now be able to do this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ipuhjHfR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d8evqsgkgfdqn0ygxpmi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ipuhjHfR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d8evqsgkgfdqn0ygxpmi.png" alt="Bind Data" width="880" height="398"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Groovy! Add in your model name in the Type. Select the top level Component (CardE) and input that in and give it a name (mines 'Info'). Go through your other elements and connect them up. The property on text is 'label' and the value would be 'Info.name'. This will be different for you, depending on what you've named your data model and component name. Once you're done connecting it up, click Create Collection and give it name. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t0rY6N8L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/omp80mx8cyed0lpuq62a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t0rY6N8L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/omp80mx8cyed0lpuq62a.png" alt="Collection Editing" width="880" height="474"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 7: Adjust Layout and Get Component Code&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here you can adjust the layout, spacing and order for your collection. On the left, i've selected 'Grid' and added 10px around each card. On the right you can adjust the order. I've added a sort via Name to be ascending. Which will keep the content displayed in a logical order. Feel free to do the same or make it your own. Coolio, that's done. We need to import this into our app locally to test it out. Click '&amp;lt;/&amp;gt; Get component code' This brings up a handy prompt of what we need to pull locally into our amplify app. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iS-eJkXE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qm7yh9esza236m2okity.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iS-eJkXE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qm7yh9esza236m2okity.png" alt="Initial Project Setup" width="880" height="791"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 8: Create App Locally &amp;amp; Sync with Amplify Studio&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Create your React app locally. You can do this with running the following command in Terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npx&lt;/span&gt; &lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="nx"&gt;amplify&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;demo&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Move into the React app that you've just created&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;cd&lt;/span&gt; &lt;span class="nx"&gt;amplify&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;demo&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Remember that section with the 'initial project setup' guide. Run those commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;aws&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;amplify&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;cli&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;aws&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;amplify&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;aws&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;amplify&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;ui&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;react&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once done, you'll need to switch to the other tab instruction and pull the Amplify Studio code into your project. Mine looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;amplify&lt;/span&gt; &lt;span class="nx"&gt;pull&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;appId&lt;/span&gt; &lt;span class="nx"&gt;d22vmom8abyhk2&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;envName&lt;/span&gt; &lt;span class="nx"&gt;staging&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In your App.js file add&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;CardECollection&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./ui-components&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Place your collection, where you would like it displayed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CardECollection&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;My App.js looks like this: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PTXdMdLf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/85sw50grqe2eq926ikno.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PTXdMdLf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/85sw50grqe2eq926ikno.png" alt="App javascript" width="880" height="601"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 9: Override &amp;amp; Extend Generated Code - React Player&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I know what you're thinking, wait a minute what happened to CardECollection in your code? Don't worry it's there, i've renamed it and it's called 'PlayerCollection' Why have I done this? Remember at the start we are trying to allow users (you and me) the ability to watch videos. There is no video component integrated (yet). When you use a default component, any changes will be overwritten when you re-sync with Figma. Take a look at this &lt;a href="https://docs.amplify.aws/console/uibuilder/override/#modify-generated-code"&gt;Modify Generated Code Override&lt;/a&gt;. Which explains how to do this change, also everything we've gone through so far is within that documentation. Take the time to explore the docs too.  &lt;/p&gt;

&lt;p&gt;I used and installed this (&lt;a href="https://github.com/CookPete/react-player"&gt;React Player&lt;/a&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;player&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then within your CardE component import the React player. Change the url to your corresponding path in your data model. Mine would be: &lt;code&gt;url={Info?.video}&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactPlayer&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-player&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Render a Video Player&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ReactPlayer&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://www.youtube.com/watch?v=ysz5S6PUM-U&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Remember that grey box in my CardE design on Figma. I've made the React Player to be the same size and it fits nicely within that area. Here's what my Player / CardE component looks like: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RjH16pCY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m3megtb8vg8wul3gx0rh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RjH16pCY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m3megtb8vg8wul3gx0rh.png" alt="Figma Component" width="880" height="608"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that's added, we should load up the React server and check what this looks like...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Mine looks like this: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6gO5DFXo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ibwtxh09jfvkogcr7z2t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6gO5DFXo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ibwtxh09jfvkogcr7z2t.png" alt="Amplify Videos" width="880" height="757"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#live-version-amplify-videos"&gt;
  &lt;/a&gt;
  Live Version - Amplify Videos
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://master.d22vmom8abyhk2.amplifyapp.com/"&gt;https://master.d22vmom8abyhk2.amplifyapp.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I really like the direction AWS Amplify (Studio) is going. If you've got a startup idea or need to develop a solution to a problem, with an AWS service, Amplify Studio is a good option. Yes, the learning curve does take time (each person is different). I would encourage you to stick with it, the rewards are exponential when you understand how it all connects. Yes, it isn't a no-code solution and it does take time to up-skill. We've seen a deeper design integration which will exponentially help us reduce the time it take to move from idea to production ready app. I hope you found any part of this guide useful. Leave a comment or tweet me &lt;a href="https://twitter.com/markramrattan"&gt;@markramrattan&lt;/a&gt; with any questions or resources you think should be added. You can also join the &lt;a href="https://discord.com/invite/amplify"&gt;Amplify Discord&lt;/a&gt; if you need help. They are superheroes…  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oPd75etf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x7sjbkqngfbrkvm70wtx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oPd75etf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x7sjbkqngfbrkvm70wtx.png" alt="Amplify Multiverse" width="880" height="586"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Clean Up&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To clean up your Amplify project, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;amplify&lt;/span&gt; &lt;span class="k"&gt;delete&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or via the Amplify Web Console, go Actions -&amp;gt; Delete app&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X8mwGsc6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/96e5w2y1ts33tvwz1rjs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X8mwGsc6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/96e5w2y1ts33tvwz1rjs.png" alt="Amplify Delete App" width="880" height="291"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wishing you a healthy and happy new year! I'm looking forward to seeing what you build in 2022.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dfv89V4J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qwvf3bm1bqyldwvwtdr.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dfv89V4J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qwvf3bm1bqyldwvwtdr.jpg" alt="Amplify Superhero" width="880" height="733"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.figma.com/file/jYj6XQ3oGOUdyNQ4C7UCme/AWS-Amplify-UI-Kit-(Community)?node-id=861%3A3635"&gt;Figma File Link&lt;/a&gt; &lt;a class="mentioned-user" href="https://dev.to/zachjonesnoel"&gt;@zachjonesnoel&lt;/a&gt; here you go. &lt;/p&gt;

</description>
      <category>beginners</category>
      <category>amplify</category>
      <category>tutorial</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
