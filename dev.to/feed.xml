<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>I just bought üë©‚Äçüíªüë®‚Äçüíª.to! </title>
      <author>InHuOfficial</author>
      <pubDate>Fri, 29 Oct 2021 14:07:26 +0000</pubDate>
      <link>https://dev.to/inhuofficial/i-own-to-2lkc</link>
      <guid>https://dev.to/inhuofficial/i-own-to-2lkc</guid>
      <description>&lt;p&gt;Yes, you read that right, I now own &lt;a href="https://%F0%9F%91%A9%E2%80%8D%F0%9F%92%BB%F0%9F%91%A8%E2%80%8D%F0%9F%92%BB.to"&gt;üë©‚Äçüíªüë®‚Äçüíª.to&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Now for a split second you may have thought I meant dev.to - of course not, I don't want a 5(6) character long domain, it is way too long! &lt;strong&gt;I want a 4(5) character domain! üòâ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;But you can copy and paste &lt;br&gt;
&lt;br&gt;&lt;br&gt;
üë©‚Äçüíªüë®‚Äçüíª.to &lt;br&gt;
&lt;br&gt;&lt;br&gt;
into the URL bar and you will end up at my DEV profile...and that is pretty weird and fun!  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-buy-an-emoji-domain"&gt;
  &lt;/a&gt;
  Why buy an Emoji domain?
&lt;/h2&gt;

&lt;p&gt;A sensible answer to that question is that you shouldn't buy an Emoji domain! &lt;/p&gt;

&lt;p&gt;They are not very useful, they end up changing to horrible sets of character codes as the domain name ("xn--qq8hb0wb.to" is the actual domain I bought!) and they are not very professional.&lt;/p&gt;

&lt;p&gt;However I don't care about such things, I want something silly and fun to play with and I like to do weird and wonderful things on the internet...so why not buy an emoji domain, something different!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-next"&gt;
  &lt;/a&gt;
  What next?
&lt;/h2&gt;

&lt;p&gt;I don't really know, it was a silly Friday thing to do, I mean...who buys emoji domains?&lt;/p&gt;

&lt;p&gt;If anyone has any good ideas for what to do with the domain then let me know!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-see-what-problems-it-causes"&gt;
  &lt;/a&gt;
  Let's see what problems it causes
&lt;/h3&gt;

&lt;p&gt;Next step is to set up an email account for the domain. &lt;/p&gt;

&lt;p&gt;I can't wait to see if I can actually set my email address to g@üë©‚Äçüíªüë®‚Äçüíª.to as that would be hilarious!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#over-to-you"&gt;
  &lt;/a&gt;
  Over to you!
&lt;/h2&gt;

&lt;p&gt;So have you ever bought an emoji domain? &lt;/p&gt;

&lt;p&gt;Can you think of a good use for my domain? &lt;/p&gt;

&lt;p&gt;Do you think emoji domains will ever catch on?&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>webdev</category>
      <category>showdev</category>
    </item>
    <item>
      <title>üöÄ10 Trending projects on GitHub for web developers - 29th October 2021</title>
      <author>Iain Freestone</author>
      <pubDate>Fri, 29 Oct 2021 13:53:58 +0000</pubDate>
      <link>https://dev.to/iainfreestone/10-trending-projects-on-github-for-web-developers-29th-october-2021-5fao</link>
      <guid>https://dev.to/iainfreestone/10-trending-projects-on-github-for-web-developers-29th-october-2021-5fao</guid>
      <description>&lt;p&gt;Trending Projects is available as a weekly newsletter please sign up at &lt;a href="https://stargazing.dev/"&gt;Stargazing.dev&lt;/a&gt; to ensure you never miss an issue.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-sucrase"&gt;
  &lt;/a&gt;
  1. Sucrase
&lt;/h3&gt;

&lt;p&gt;Sucrase is an alternative to Babel that allows super-fast development builds. Instead of compiling a large range of JS features to be able to work in Internet Explorer, Sucrase assumes that you're developing with a recent browser or recent Node.js version.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/alangpierce"&gt;
        alangpierce
      &lt;/a&gt; / &lt;a href="https://github.com/alangpierce/sucrase"&gt;
        sucrase
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Super-fast alternative to Babel for when you can target modern JS runtimes
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Sucrase&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/alangpierce/sucrase/actions"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r81JGWUG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/alangpierce/sucrase/workflows/All%2520tests/badge.svg" alt="Build Status"&gt;&lt;/a&gt;
&lt;a href="https://www.npmjs.com/package/sucrase" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/9360f5dddf9122a70204b05ee91699c6ce02895e02e4239be71f532f7d8bc3b1/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f737563726173652e737667" alt="npm version"&gt;&lt;/a&gt;
&lt;a href="https://packagephobia.now.sh/result?p=sucrase" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/57d713d129dfb30cb780b3cee094c24806df4a4dc817a78d2a181c192469a229/68747470733a2f2f7061636b61676570686f6269612e6e6f772e73682f62616467653f703d73756372617365" alt="Install Size"&gt;&lt;/a&gt;
&lt;a href="https://github.com/alangpierce/sucraseLICENSE"&gt;&lt;img src="https://camo.githubusercontent.com/7dbff64e38b71a331d5ccd52e1416f007350ce0eede615805f828a339a6ff8d8/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f6c2f657870726573732e7376673f6d61784167653d32353932303030" alt="MIT License"&gt;&lt;/a&gt;
&lt;a href="https://gitter.im/sucrasejs/Lobby" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5dbac0213da25c445bd11f168587c11a200ba153ef3014e8408e462e410169b3/68747470733a2f2f6261646765732e6769747465722e696d2f4a6f696e253230436861742e737667" alt="Join the chat at https://gitter.im/sucrasejs"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
&lt;a href="https://sucrase.io" rel="nofollow"&gt;Try it out&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Sucrase is an alternative to Babel that allows super-fast development builds
Instead of compiling a large range of JS features to be able to work in Internet
Explorer, Sucrase assumes that you're developing with a recent browser or recent
Node.js version, so it focuses on compiling non-standard language extensions
JSX, TypeScript, and Flow. Because of this smaller scope, Sucrase can get away
with an architecture that is much more performant but less extensible and
maintainable. Sucrase's parser is forked from Babel's parser (so Sucrase is
indebted to Babel and wouldn't be possible without it) and trims it down to a
focused subset of what Babel solves. If it fits your use case, hopefully Sucrase
can speed up your development experience!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sucrase has been extensively tested.&lt;/strong&gt; It can successfully build
the &lt;a href="https://benchling.com/" rel="nofollow"&gt;Benchling&lt;/a&gt; frontend code
&lt;a href="https://github.com/babel/babel"&gt;Babel&lt;/a&gt;
&lt;a href="https://github.com/facebook/react"&gt;React&lt;/a&gt;,
&lt;a href="https://github.com/palantir/tslint"&gt;TSLint&lt;/a&gt;,
&lt;a href="https://github.com/apollographql/apollo-client"&gt;Apollo client&lt;/a&gt;, and
&lt;a href="https://github.com/decaffeinate/decaffeinate"&gt;decaffeinate&lt;/a&gt;
with all‚Ä¶&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/alangpierce/sucrase"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#2-react-hooks-in-svelte"&gt;
  &lt;/a&gt;
  2. React Hooks in Svelte
&lt;/h3&gt;

&lt;p&gt;React hook examples ported to Svelte&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/joshnuss"&gt;
        joshnuss
      &lt;/a&gt; / &lt;a href="https://github.com/joshnuss/react-hooks-in-svelte"&gt;
        react-hooks-in-svelte
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      React hook examples ported to Svelte
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
React Hooks in Svelte&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://reactjs.org/docs/hooks-intro.html" rel="nofollow"&gt;React Hook&lt;/a&gt; examples ported to &lt;a href="https://svelte.dev" rel="nofollow"&gt;Svelte&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;
useState&lt;/h1&gt;
&lt;p&gt;In Svelte, &lt;code&gt;const [varName, set] = useState(initialValue)&lt;/code&gt; becomes &lt;code&gt;let varName = initialValue&lt;/code&gt;. The setter function is replaced with JavaScript's assignment operator &lt;code&gt;=&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/joshnuss/react-hooks-in-svelte/use-state/react/src/Counter.js"&gt;React example&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/joshnuss/react-hooks-in-svelte/use-state/svelte/src/Counter.svelte"&gt;Svelte example&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/joshnuss/react-hooks-in-svelte/images/useState.jpeg?raw=true"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b2py0iGy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/joshnuss/react-hooks-in-svelte/images/useState.jpeg%3Fraw%3Dtrue" alt="Diff of useState"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
useEffect&lt;/h1&gt;
&lt;p&gt;In React, there are 3 ways to &lt;code&gt;useEffect()&lt;/code&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;With &lt;code&gt;null&lt;/code&gt; dependencies: &lt;code&gt;useEffect(fn)&lt;/code&gt;. This runs on every render.&lt;/li&gt;
&lt;li&gt;With an empty array as dependencies: &lt;code&gt;useEffect(fn, [])&lt;/code&gt;. This runs during mount, and cleanup function runs on unmount.&lt;/li&gt;
&lt;li&gt;With a list of dependency vars: &lt;code&gt;useEffect(fn, [a, b, c])&lt;/code&gt;. This reavaulates whenever a dependency changes. The cleanup runs whenever dependencies change and during unmount.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is an example of #2, where the callback runs when component is mounted and cleanup runs when unmounted.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/joshnuss/react-hooks-in-svelte/use-effect/react/src/Timer.js"&gt;React example&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/joshnuss/react-hooks-in-svelte/use-effect/svelte/src/Timer.svelte"&gt;Svelte example&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/joshnuss/react-hooks-in-svelte/images/useEffect.png?raw=true"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wjEhqmGj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/joshnuss/react-hooks-in-svelte/images/useEffect.png%3Fraw%3Dtrue" alt="Diff of useEffect"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
useMemo&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/joshnuss/react-hooks-in-svelte/use-memo/react/src/Fibonacci.js"&gt;React example&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/joshnuss/react-hooks-in-svelte/use-memo/svelte/src/Fibonacci.svelte"&gt;Svelte example&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In Svelte, all reactive statements are memoized. Instead of &lt;code&gt;const var = useMemo(() =&amp;gt; expression, dependencies)&lt;/code&gt;‚Ä¶&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/joshnuss/react-hooks-in-svelte"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#3-hiring-without-whiteboards"&gt;
  &lt;/a&gt;
  3. Hiring Without Whiteboards
&lt;/h3&gt;

&lt;p&gt;A list of companies (or teams) that don't do "whiteboard" interviews. "Whiteboards" is used as a metaphor, and is a symbol for the kinds of CS trivia questions that are associated with bad interview practices.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/poteto"&gt;
        poteto
      &lt;/a&gt; / &lt;a href="https://github.com/poteto/hiring-without-whiteboards"&gt;
        hiring-without-whiteboards
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      ‚≠êÔ∏è  Companies that don't have a broken hiring process
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Hiring Without Whiteboards&lt;/h1&gt;
&lt;p&gt;A list of companies (or teams) that don't do "whiteboard" interviews. "Whiteboards" is used as a metaphor, and is a &lt;em&gt;symbol&lt;/em&gt; for the kinds of CS trivia questions that are associated with bad interview practices. Whiteboards are not bad ‚Äì CS trivia questions are. Using sites like HackerRank/LeetCode &lt;em&gt;probably&lt;/em&gt; fall into a similar category.&lt;/p&gt;
&lt;p&gt;The companies and teams listed here use interview techniques and questions that resemble day-to-day work. For example, pairing on a real world problem or a paid/unpaid take home exercise. Read (and contribute to) &lt;a href="https://github.com/poteto/hiring-without-whiteboardsRECOMMENDATIONS.md"&gt;our recommendations&lt;/a&gt; for ways to conduct better interviews.&lt;/p&gt;
&lt;h3&gt;
tl;dr&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Discussing a real world problem (with or without whiteboard) is üëç
&lt;/li&gt;
&lt;li&gt;Solving CS trivia, technical puzzles, riddles, brainteasers (with or without whiteboard) is üëé
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://twitter.com/dhh/status/834146806594433025?lang=en" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/53ef818d50ab6a1d1f01206bfd31fd09733aa0a12589cee581435baa8d2fc2c5/68747470733a2f2f692e696d6775722e636f6d2f784a56366346342e706e67" width="500"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Please open a &lt;a href="https://github.com/poteto/hiring-without-whiteboards/pull/new/master"&gt;PR&lt;/a&gt; to be added.&lt;/p&gt;
&lt;h3&gt;
Duds&lt;/h3&gt;
&lt;p&gt;If you've been through an interview with one of these companies recently, and your experience suggests otherwise from their‚Ä¶&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/poteto/hiring-without-whiteboards"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#4-fragstore"&gt;
  &lt;/a&gt;
  4. Fragstore
&lt;/h3&gt;

&lt;p&gt;Tiny (~800 B), easy and simple library to manage your React state. After a store update -&amp;gt; only components that use the updated property are rendered.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/aralroca"&gt;
        aralroca
      &lt;/a&gt; / &lt;a href="https://github.com/aralroca/fragstore"&gt;
        fragstore
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Tiny (~800 B), easy and simple library to manage your React state.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Fragstore
&lt;/h1&gt;
&lt;p&gt;
    &lt;a rel="noopener noreferrer" href="https://github.com/aralroca/fragstorelogo.svg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XtSuGO82--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/aralroca/fragstorelogo.svg" width="200" alt="Fragstore"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
    Tiny (~800 B), easy and simple (P)React &lt;b&gt;state management library&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
    After a store update -&amp;gt; &lt;b&gt;only&lt;/b&gt; components that use the &lt;b&gt;updated property&lt;/b&gt; are rendered
&lt;/p&gt;

&lt;div&gt;
&lt;p&gt;&lt;a href="https://badge.fury.io/js/fragstore" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/934ba99378bb76f571ad6b35379154feebf92ab966f1a10f9cfa60a83d6ea75e/68747470733a2f2f62616467652e667572792e696f2f6a732f6672616773746f72652e737667" alt="npm version"&gt;&lt;/a&gt;
&lt;a href="http://makeapullrequest.com" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/0ff11ed110cfa69f703ef0dcca3cee6141c0a8ef465e8237221ae245de3deb3d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5052732d77656c636f6d652d627269676874677265656e2e7376673f7374796c653d666c61742d737175617265" alt="PRs Welcome"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/aralroca/fragstore#contributors-"&gt;&lt;img src="https://camo.githubusercontent.com/3f29481ce9ea7caed48cceaa0255584ec5519f38b00fec3f5aaf7d9aff3cb5c8/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f616c6c5f636f6e7472696275746f72732d342d6f72616e67652e7376673f7374796c653d666c61742d737175617265" alt="All Contributors"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;a href="https://twitter.com/intent/follow?screen_name=aralroca" rel="nofollow"&gt;
&lt;img src="https://camo.githubusercontent.com/ad08569dece2b4c4a3968cadc1e70cd32f370ac07741ac403decf4eaf5ae4121/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f666f6c6c6f772f6172616c726f63613f7374796c653d736f6369616c266c6f676f3d74776974746572" alt="follow me on Twitter"&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;h2&gt;
Getting started:&lt;/h2&gt;

&lt;p&gt;Install it with Yarn:&lt;/p&gt;

&lt;div class="snippet-clipboard-content position-relative overflow-auto"&gt;&lt;pre&gt;&lt;code&gt;yarn add fragstore
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or install it with Npm:&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative overflow-auto"&gt;&lt;pre&gt;&lt;code&gt;npm install fragstore --save
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;
Usage:&lt;/h2&gt;
&lt;h3&gt;
Store&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;Store&lt;/code&gt; is an optional component where you can send the same parameters than the &lt;code&gt;createStore&lt;/code&gt;. Sometimes can be useful, for example, when the initial store is defined by an API, or also if you want to change some component state (not store) after some callback.&lt;/p&gt;
&lt;div class="highlight highlight-source-js position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-s1"&gt;createStore&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;"fragstore"&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;

&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt; Store &lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;createStore&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;

&lt;span class="pl-k"&gt;function&lt;/span&gt; &lt;span class="pl-v"&gt;App&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt;
  &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-kos"&gt;(&lt;/span&gt;
    &lt;span class="pl-c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;Store&lt;/span&gt; &lt;span class="pl-c1"&gt;store&lt;/span&gt;&lt;span class="pl-c1"&gt;=&lt;/span&gt;&lt;span class="pl-kos"&gt;{&lt;/span&gt;&lt;span class="pl-kos"&gt;{&lt;/span&gt; 
      &lt;span class="pl-c1"&gt;username&lt;/span&gt;: &lt;span class="pl-s"&gt;"Aral"&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
      &lt;span class="pl-c1"&gt;age&lt;/span&gt;: &lt;span class="pl-c1"&gt;31&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
    &lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="pl-kos"&gt;{&lt;/span&gt;&lt;span class="pl-c"&gt;/* rest */&lt;/span&gt;&lt;span class="pl-kos"&gt;}&lt;/span&gt; 
    &lt;span class="pl-c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-c1"&gt;/&lt;/span&gt;&lt;span class="pl-ent"&gt;Store&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
&lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
Fragmented store (meaning of Fragstore)&lt;/h3&gt;
&lt;p&gt;The power of‚Ä¶&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/aralroca/fragstore"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#5-frontendcollection"&gt;
  &lt;/a&gt;
  5. FrontEndCollection
&lt;/h3&gt;

&lt;p&gt;Notes for Front-end Software Engineers. Covers common data structure and algorithms, basic web concepts, HTML &amp;amp; CSS &amp;amp; Javascript.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/cheatsheet1999"&gt;
        cheatsheet1999
      &lt;/a&gt; / &lt;a href="https://github.com/cheatsheet1999/FrontEndCollection"&gt;
        FrontEndCollection
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Notes for Front-end Software Engineers. Covers common data structure and algorithms, basic web concepts, HTML &amp;amp; CSS &amp;amp; Javascript.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
FrontEndCollection (Keep updating, hopefully...)&lt;/h1&gt;
&lt;h2&gt;
Web Development Basics&lt;/h2&gt;
&lt;h3&gt;
HTML&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/cheatsheet1999/FrontEndCollection/issues/2"&gt;1. What happens when you type in a URL&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/cheatsheet1999/FrontEndCollection/issues/4"&gt;2. GET vs POST&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/cheatsheet1999/FrontEndCollection/issues/5"&gt;3. What can we do to improve a website's performance?&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/cheatsheet1999/FrontEndCollection/issues/6"&gt;4. HTML5 offline storage mechanism&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/cheatsheet1999/FrontEndCollection/issues/9"&gt;5. Common time and space-complexity&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/cheatsheet1999/FrontEndCollection/issues/11"&gt;6. What has been deprecated, and what is new on HTML5?&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/cheatsheet1999/FrontEndCollection/issues/18"&gt;7. How the DOM really works?&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/cheatsheet1999/FrontEndCollection/issues/27"&gt;8. Inline elements, Block elements, and what are the differences?&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/cheatsheet1999/FrontEndCollection/issues/28"&gt;9. Several ways to call a function&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/cheatsheet1999/FrontEndCollection/issues/29"&gt;10. A brief introduction of the differences between "src" and "href"&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/cheatsheet1999/FrontEndCollection/issues/30"&gt;11. A brief introduction of Call, Apply, Bind&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/cheatsheet1999/FrontEndCollection/issues/9"&gt;12. Time and space complexity for common sorting algorithm&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
CSS&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/cheatsheet1999/FrontEndCollection/issues/37"&gt;1. What is the difference between display:none and visibility:hidden style?&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/cheatsheet1999/FrontEndCollection/issues/38"&gt;2. What is BFC(Block Formatting Context)&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Demo&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/cheatsheet1999/FrontEndCollection/issues/17"&gt;1. Accordion ü™ó&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/cheatsheet1999/FrontEndCollection/issues/23"&gt;2. ModalBox üí¨&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/cheatsheet1999/FrontEndCollection/tree/main/JS-Day/DrumKit"&gt;3. Drum Kit ü•Å&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/cheatsheet1999/FrontEndCollection/tree/main/JS-Day/Mini%20Clock"&gt;4. Mini Clock üïë&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/siyuan25/FrontEndCollection/tree/main/JS-Day/Playing%20with%20Variables"&gt;5. Playing with Variables üé©&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Deep Dive in Javascript&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://bigfrontend.dev/" rel="nofollow"&gt;&lt;em&gt;Learn More on BFE.dev&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/cheatsheet1999/FrontEndCollection/issues/33"&gt;1. Implement Curry()&lt;/a&gt;‚Ä¶&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/cheatsheet1999/FrontEndCollection"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#6-ml5"&gt;
  &lt;/a&gt;
  6. ml5
&lt;/h3&gt;

&lt;p&gt;ml5.js aims to make machine learning approachable for a broad audience of artists, creative coders, and students. The library provides access to machine learning algorithms and models in the browser, building on top of TensorFlow.js.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ml5js"&gt;
        ml5js
      &lt;/a&gt; / &lt;a href="https://github.com/ml5js/ml5-library"&gt;
        ml5-library
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Friendly machine learning for the web! ü§ñ 
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;strong&gt;Read our &lt;a href="https://github.com/ml5js/Code-of-Conduct"&gt;ml5.js Code of Conduct and software licence&lt;/a&gt; here!&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;
&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/10605821/41332516-2ee26714-6eac-11e8-83e4-a40b8761e764.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2SOuEvMi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/10605821/41332516-2ee26714-6eac-11e8-83e4-a40b8761e764.png" alt="ml5"&gt;&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/ml5js/ml5-library#contributors"&gt;&lt;img src="https://camo.githubusercontent.com/3318f00ef918cb0690e1e56bf673adb63a7fbe293d9096a4c5d07d3a95394e36/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f616c6c5f636f6e7472696275746f72732d38362d6f72616e67652e7376673f7374796c653d666c61742d737175617265" alt="All Contributors"&gt;&lt;/a&gt; &lt;a href="https://automate.browserstack.com/public-build/eEtiK0lGeGpGZ2svSGd0WWJnclo3SGtxdEZ5anFmOE4zaFRyOUJkTFhHbz0tLWo1eUNzd0hpQUZjR2Rya0hIQjhIUHc9PQ==--45955c1082b17348f534b62689f945967b4e459e" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e17d620795a5d302b883b42bf60bf27f1d8312b7b444aa4ed9f3f48bac14269d/68747470733a2f2f6175746f6d6174652e62726f77736572737461636b2e636f6d2f62616467652e7376673f62616467655f6b65793d654574694b306c47654770475a3273765347643057574a6e636c6f335347747864455a35616e466d4f45347a614652794f554a6b54466848627a30744c576f3165554e7a6430687051555a6a5232527961306849516a68495548633950513d3d2d2d34353935356331303832623137333438663533346236323638396639343539363762346534353965" alt="BrowserStack Status"&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/ml5" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/10da8104277e42a78fcee01c4ac107e6ccf9d9eee622b80572c2f39731e9a5dc/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f6d6c352e7376673f7374796c653d666c61742d737175617265" alt="Version"&gt;&lt;/a&gt;
&lt;a href="https://twitter.com/ml5js" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/f19fd2bc29150331a184d6d06fd4d8aa8070424e1b9849d7bb2087546d861029/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f666f6c6c6f772f657370616472696e652e7376673f7374796c653d736f6369616c266c6162656c3d466f6c6c6f77" alt="Twitter Follow"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;This project is currently in development.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;
Friendly machine learning for the web!&lt;/h2&gt;
&lt;p&gt;ml5.js aims to make machine learning approachable for a broad audience of artists, creative coders, and students. The library provides access to machine learning algorithms and models in the browser, building on top of &lt;a href="https://js.tensorflow.org/" rel="nofollow"&gt;TensorFlow.js&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The library is supported by code examples, tutorials, and sample data sets with an emphasis on ethical computing. Bias in data, stereotypical harms, and responsible crowdsourcing are part of the documentation around data collection and usage.&lt;/p&gt;
&lt;p&gt;ml5.js is heavily inspired by &lt;a href="https://processing.org/" rel="nofollow"&gt;Processing&lt;/a&gt; and &lt;a href="https://p5js.org/" rel="nofollow"&gt;p5.js&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Please read our &lt;a href="https://github.com/ml5js/Code-of-Conduct"&gt;Code of Conduct&lt;/a&gt;, which establishes our commitment to make ml5.js a friendly and welcoming environment.&lt;/p&gt;
&lt;h2&gt;
Usage&lt;/h2&gt;
&lt;p&gt;Before getting started with ml5.js, review our &lt;a href="https://github.com/ml5js/Code-of-Conduct"&gt;Code of Conduct&lt;/a&gt;. There are several ways you can use the ml5.js library:&lt;/p&gt;


&lt;ul&gt;
&lt;li&gt;You can use the latest version‚Ä¶&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/ml5js/ml5-library"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#7-typescript-boilerplate-for-2021"&gt;
  &lt;/a&gt;
  7. TypeScript Boilerplate for 2021
&lt;/h3&gt;

&lt;p&gt;A modern TypeScript project setup, for Node.js and browsers (using esbuild).&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/metachris"&gt;
        metachris
      &lt;/a&gt; / &lt;a href="https://github.com/metachris/typescript-boilerplate"&gt;
        typescript-boilerplate
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A modern TypeScript project setup, for Node.js and browsers (using esbuild).
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
TypeScript Boilerplate for 2021&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/metachris/typescript-boilerplate/actions?query=workflow%3A%22Build+and+test%22"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bn5iR8ya--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/metachris/typescript-boilerplate/workflows/Lint%2520and%2520test/badge.svg" alt="Build and test status"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;TypeScript project boilerplate with modern tooling, for Node.js programs, libraries and browser modules. Get started quickly and right-footed üöÄ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.typescriptlang.org/" rel="nofollow"&gt;TypeScript 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Optionally &lt;a href="https://esbuild.github.io/" rel="nofollow"&gt;esbuild&lt;/a&gt; to bundle for browsers (and Node.js)&lt;/li&gt;
&lt;li&gt;Linting with &lt;a href="https://github.com/typescript-eslint/typescript-eslint"&gt;typescript-eslint&lt;/a&gt; (&lt;a href="https://palantir.github.io/tslint/" rel="nofollow"&gt;tslint&lt;/a&gt; is deprecated)&lt;/li&gt;
&lt;li&gt;Testing with &lt;a href="https://jestjs.io/docs/getting-started" rel="nofollow"&gt;Jest&lt;/a&gt; (and &lt;a href="https://www.npmjs.com/package/ts-jest" rel="nofollow"&gt;ts-jest&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Publishing to npm&lt;/li&gt;
&lt;li&gt;Continuous integration (&lt;a href="https://docs.github.com/en/actions"&gt;GitHub Actions&lt;/a&gt; / &lt;a href="https://docs.gitlab.com/ee/ci/" rel="nofollow"&gt;GitLab CI&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Automatic API documentation with &lt;a href="https://typedoc.org/guides/doccomments/" rel="nofollow"&gt;TypeDoc&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See also the introduction blog post: &lt;strong&gt;&lt;a href="https://www.metachris.com/2021/03/bootstrapping-a-typescript-node.js-project/" rel="nofollow"&gt;Starting a TypeScript Project in 2021&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
Getting Started&lt;/h2&gt;

&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Clone the repository (you can also click "Use this template")&lt;/span&gt;
git clone https://github.com/metachris/typescript-boilerplate.git your_project_name
&lt;span class="pl-c1"&gt;cd&lt;/span&gt; your_project_name

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Edit `package.json` and `tsconfig.json` to your liking&lt;/span&gt;
...

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Install dependencies&lt;/span&gt;
yarn install

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Now you can run various yarn commands:&lt;/span&gt;
yarn cli
yarn lint
yarn &lt;span class="pl-c1"&gt;test&lt;/span&gt;
yarn build-all
yarn ts-node &lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;filename&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;
yarn esbuild-browser
...&lt;/pre&gt;

&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Take a look at all the scripts in &lt;a href="https://github.com/metachris/typescript-boilerplate/blob/master/package.json"&gt;&lt;code&gt;package.json&lt;/code&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;For publishing to npm, use &lt;code&gt;yarn publish&lt;/code&gt; (or‚Ä¶&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/metachris/typescript-boilerplate"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#8-react-hooks-for-material-ui"&gt;
  &lt;/a&gt;
  8. React hooks for Material UI
&lt;/h3&gt;

&lt;p&gt;React hooks for Material UI. For each state, each hook accepts an optional default state and returns a state-setting utility function.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/CharlesStover"&gt;
        CharlesStover
      &lt;/a&gt; / &lt;a href="https://github.com/CharlesStover/use-mui"&gt;
        use-mui
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      React hooks for Material UI
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
React hooks for Material UI&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://www.npmjs.com/package/use-mui" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/272e5b0e36242613686c90b9984a9187bd58825c0220844f40261ba8a2f15991/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f7573652d6d75692e737667" alt="version"&gt;&lt;/a&gt;
&lt;a href="https://www.npmjs.com/package/use-mui" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/61d657292cb6ab580a6017c26c7191259491f07ff7cdfc3c66d239ed43a8f2f4/68747470733a2f2f696d672e736869656c64732e696f2f62756e646c6570686f6269612f6d696e7a69702f7573652d6d75692e737667" alt="minzipped size"&gt;&lt;/a&gt;
&lt;a href="https://www.npmjs.com/package/use-mui" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/81d3c64d029dd3674b0a12dc62ab5c0acc98eb0f1d400d97a094df66ffe74440/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f64742f7573652d6d75692e737667" alt="downloads"&gt;&lt;/a&gt;
&lt;a href="https://github.com/CharlesStover/use-mui/actions/workflows/push.yml"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EeLWczbZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/CharlesStover/use-mui/actions/workflows/push.yml/badge.svg" alt="GitHub Action: Push"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Install&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;npm install use-mui&lt;/code&gt; or&lt;/li&gt;
&lt;li&gt;&lt;code&gt;yarn add use-mui&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Supported components&lt;/h2&gt;
&lt;p&gt;For each state, each hook accepts an optional default state and returns a
state-setting utility function (that you should not need but is available to fit
any edge cases your may have). For example: a component with a &lt;code&gt;value&lt;/code&gt; prop will
have an accompanying hook with an optional &lt;code&gt;defaultValue&lt;/code&gt; parameter property and
&lt;code&gt;setValue&lt;/code&gt; state property; a component with an &lt;code&gt;open&lt;/code&gt; prop will have an
accompanying hook with an optional &lt;code&gt;defaultOpen&lt;/code&gt; parameter property and
&lt;code&gt;setOpen&lt;/code&gt; state property.&lt;/p&gt;
&lt;div class="highlight highlight-source-js position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;function&lt;/span&gt; &lt;span class="pl-v"&gt;MyTextField&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt;
  &lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt; handleChange&lt;span class="pl-kos"&gt;,&lt;/span&gt; setValue&lt;span class="pl-kos"&gt;,&lt;/span&gt; value &lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;useTextField&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;{&lt;/span&gt;
    &lt;span class="pl-c1"&gt;defaultValue&lt;/span&gt;: &lt;span class="pl-s"&gt;'Loading...'&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
  &lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
  &lt;span class="pl-en"&gt;useEffect&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt; &lt;span class="pl-c1"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt;
    &lt;span class="pl-en"&gt;getAsyncValue&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;
      &lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;then&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;asyncValue&lt;/span&gt; &lt;span class="pl-c1"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt;
        &lt;span class="pl-en"&gt;setValue&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;asyncValue&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
      &lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;
      &lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;catch&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt; &lt;span class="pl-c1"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt;
        &lt;span class="pl-en"&gt;setValue&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;''&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
      &lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;/pre&gt;‚Ä¶
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/CharlesStover/use-mui"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#9-animated-emojis"&gt;
  &lt;/a&gt;
  9. Animated Emojis
&lt;/h3&gt;

&lt;p&gt;Library with animated emojis.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/beerose"&gt;
        beerose
      &lt;/a&gt; / &lt;a href="https://github.com/beerose/animated-emojis"&gt;
        animated-emojis
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Animated emojis üò¢üíóüò°üò®üòä
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Animated Emojis&lt;/h1&gt;
&lt;p&gt;Library with animated emojis.&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/beerose/animated-emojis./assets/e.gif"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A0W4qqbk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/beerose/animated-emojis./assets/e.gif" alt="gif"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Docs&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://animated-emojis.netlify.com/" rel="nofollow"&gt;https://animated-emojis.netlify.com/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Install&lt;/h2&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;yarn add animated-emojis &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; npm i animated-emojis&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
API&lt;/h2&gt;
&lt;div class="snippet-clipboard-content position-relative overflow-auto"&gt;&lt;pre&gt;&lt;code&gt;size: Number | undefined
animate: Boolean | undefined
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;
Setup&lt;/h2&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;yarn &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; npm i&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Run docs&lt;/h2&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;yarn docz:dev &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; npm run docz:dev&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Build lib&lt;/h2&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;yarn build &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; npm run build&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/beerose/animated-emojis"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;





&lt;h3&gt;
  &lt;a href="#10-checka11ycss"&gt;
  &lt;/a&gt;
  10. Checka11y.css
&lt;/h3&gt;

&lt;p&gt;A CSS stylesheet to quickly highlight a11y concerns.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/jackdomleo7"&gt;
        jackdomleo7
      &lt;/a&gt; / &lt;a href="https://github.com/jackdomleo7/Checka11y.css"&gt;
        Checka11y.css
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A CSS stylesheet to quickly highlight a11y concerns.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;div&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/jackdomleo7/Checka11y.csslogo/checka11y1.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VUIb5DYQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/jackdomleo7/Checka11y.csslogo/checka11y1.png" alt="Checka11y.css logo"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/jackdomleo7" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/cd9a722712fec4278ef95ff114b458897a37a52ef8129b6c833efcf8c66e2211/68747470733a2f2f63646e2e6275796d6561636f666665652e636f6d2f627574746f6e732f76322f64656661756c742d6f72616e67652e706e67" alt="Buy Me A Coffee" height="50" width="190"&gt;&lt;/a&gt; &lt;a href="https://www.producthunt.com/posts/checka11y-css?utm_source=badge-featured&amp;amp;utm_medium=badge&amp;amp;utm_souce=badge-checka11y-css" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/01b3c883c2e38b9f8a0b7fb3adb02e6839f848f0c99960539969b89c4a387951/68747470733a2f2f6170692e70726f6475637468756e742e636f6d2f776964676574732f656d6265642d696d6167652f76312f66656174757265642e7376673f706f73745f69643d323639383636267468656d653d6c69676874" alt="Checka11y.css - A CSS stylesheet to quickly highlight a11y concerns. | Product Hunt"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/jackdomleo7/Checka11y.css/actions/workflows/pipeline.yml"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2zA14IAL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/jackdomleo7/Checka11y.css/actions/workflows/pipeline.yml/badge.svg%3Fbranch%3Dmaster" alt=".github/workflows/pipeline.yml"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/d8c687d86fbfb6d127a4208b3ba8a442121ad2eec12743f351714b01e243806b/68747470733a2f2f696d672e736869656c64732e696f2f6d61696e74656e616e63652f7965732f32303231"&gt;&lt;img src="https://camo.githubusercontent.com/d8c687d86fbfb6d127a4208b3ba8a442121ad2eec12743f351714b01e243806b/68747470733a2f2f696d672e736869656c64732e696f2f6d61696e74656e616e63652f7965732f32303231" alt="Maintenance"&gt;&lt;/a&gt; &lt;a href="https://github.com/jackdomleo7/Checka11y.css/blob/master/LICENSE"&gt;&lt;img src="https://camo.githubusercontent.com/33d56315bd259999723bffc2fb998d171b8db2dcf7a7523b415070eec8bedc5a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d696d706f7274616e74" alt="MIT License"&gt;&lt;/a&gt; &lt;a href="https://github.com/jackdomleo7/Checka11y.css/blob/master/checka11y.css"&gt;&lt;img src="https://camo.githubusercontent.com/3a4676adbecb39b1b68334434df24201100692f8dfa9908bb4d4b35f7538daca/68747470733a2f2f62616467656e2e6e65742f626164676573697a652f62726f746c692f6a61636b646f6d6c656f372f436865636b613131792e6373732f6d61737465722f636865636b613131792e637373" alt="Brotli size"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/jackdomleo7/Checka11y.css/stargazers"&gt;&lt;img src="https://camo.githubusercontent.com/3a63f38c63a2e2f9442cfd68de29154e23075b9c3d0ea3e096487931ce99119b/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f6a61636b646f6d6c656f372f436865636b613131792e6373733f7374796c653d736f6369616c" alt="GitHub stars"&gt;&lt;/a&gt; &lt;a href="https://github.com/jackdomleo7/Checka11y.css/releases"&gt;&lt;img src="https://camo.githubusercontent.com/82356437e62e95d83d28170a474b4563ad19632af2dd3a1c6f6a78f0fd30023b/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f72656c656173652f6a61636b646f6d6c656f372f436865636b613131792e6373733f7374796c653d736f6369616c" alt="GitHub release (latest by date)"&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/checka11y-css" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/113804f31ecad604ad1770d4d65117408db46e91e313a0e0c44145c32363f89f/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f64742f636865636b613131792d6373733f6c6f676f3d6e706d267374796c653d736f6369616c" alt="npm"&gt;&lt;/a&gt; &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/528222f830e2e26a0c8416b9ed23379fea724437ef01b506c8b0c16464f9c691/68747470733a2f2f696d672e736869656c64732e696f2f6a7364656c6976722f6e706d2f686d2f636865636b613131792d6373733f6c6162656c3d4a7344656c697672266c6f676f3d6a7364656c697672267374796c653d736f6369616c"&gt;&lt;img src="https://camo.githubusercontent.com/528222f830e2e26a0c8416b9ed23379fea724437ef01b506c8b0c16464f9c691/68747470733a2f2f696d672e736869656c64732e696f2f6a7364656c6976722f6e706d2f686d2f636865636b613131792d6373733f6c6162656c3d4a7344656c697672266c6f676f3d6a7364656c697672267374796c653d736f6369616c" alt="jsDelivr hits (npm)"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://chrome.google.com/webstore/detail/checka11ycss/npkoehgjmnffjdaelommnfjkflenbfaa" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/d0eae8a95587e38dacd92e14770bbfa961567759f74c86e16c0bdccb1cca9570/68747470733a2f2f696d672e736869656c64732e696f2f6368726f6d652d7765622d73746f72652f75736572732f6e706b6f6568676a6d6e66666a6461656c6f6d6d6e666a6b666c656e626661613f6c6162656c3d4368726f6d6525323057656225323053746f72652532307573657273266c6f676f3d676f6f676c652d6368726f6d65267374796c653d736f6369616c" alt="Chrome Web Store"&gt;&lt;/a&gt; &lt;a href="https://addons.mozilla.org/en-GB/firefox/addon/checka11y-css" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8295102a34fdd8ef0301814645d75e3a070d58a29ae539dabc1445fed0a810c6/68747470733a2f2f696d672e736869656c64732e696f2f616d6f2f75736572732f636865636b613131792d6373733f6c6162656c3d46697265666f782532304164642d6f6e2532307573657273266c6f676f3d66697265666f78267374796c653d736f6369616c" alt="Mozilla Add-on"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h1&gt;
Checka11y.css&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;A CSS stylesheet to quickly highlight a11y concerns.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Lightweight&lt;/em&gt; ‚Ä¢ &lt;em&gt;Modern&lt;/em&gt; ‚Ä¢ &lt;em&gt;Accessibile&lt;/em&gt; ‚Ä¢ &lt;em&gt;Customisable&lt;/em&gt; ‚Ä¢ &lt;em&gt;Simple&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The first line of defence for testing accessibility.&lt;/p&gt;
&lt;p&gt;Designed to quickly highlight some common accessibility errors and warnings that can be easily and quickly rectified.&lt;/p&gt;
&lt;p&gt;Recommended before turning to automation tools and scanners such as Lighthouse on Chrome.&lt;/p&gt;
&lt;p&gt;Remember not to push this to production!&lt;/p&gt;
&lt;p&gt;A great tool for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Websites and web applications to begin improving their accessibility.&lt;/li&gt;
&lt;li&gt;Developers and testers/QA to learn more about accessibility and creating accessible websites and applications.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
Features&lt;/h2&gt;
&lt;p&gt;Our features are always checked against the W3C accessibility guidelines.&lt;/p&gt;
&lt;p&gt;A list of some common a11y concerns Checka11y.css will check for and highlight :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Check for invalid HTML elements nested inside of &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Check for missing &lt;code&gt;alt&lt;/code&gt; attributes on images&lt;/li&gt;
&lt;li&gt;Check for media that is set to &lt;code&gt;autoplay&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Check &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; is the &lt;strong&gt;only&lt;/strong&gt; direct child of &lt;code&gt;&amp;lt;ol&amp;gt;&lt;/code&gt;‚Ä¶&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/jackdomleo7/Checka11y.css"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#stargazing"&gt;
  &lt;/a&gt;
  Stargazing üìà
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#top-risers-over-last-7-days"&gt;
  &lt;/a&gt;
  &lt;a href="https://stargazing.dev/?owner=&amp;amp;order=weeklyStarChange&amp;amp;minimumStars=0&amp;amp;search=&amp;amp;reverseOrder=false&amp;amp;moreFilters=false"&gt;Top risers over last 7 days&lt;/a&gt;üîó
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/trekhleb/javascript-algorithms"&gt;JavaScript Algorithms&lt;/a&gt; +1,625 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/jwasham/coding-interview-university"&gt;Coding Interview University&lt;/a&gt; +860 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/KilledByAPixel/LittleJS"&gt;LittleJS&lt;/a&gt; +823 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/EbookFoundation/free-programming-books"&gt;Free Programming Books&lt;/a&gt; +686 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/awesome"&gt;Awesome&lt;/a&gt; +648 stars&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#top-growth-over-last-7-days"&gt;
  &lt;/a&gt;
  &lt;a href="https://stargazing.dev/?owner=&amp;amp;order=weeklyStarChangePercent&amp;amp;minimumStars=0&amp;amp;search=&amp;amp;reverseOrder=false&amp;amp;moreFilters=false"&gt;Top growth(%) over last 7 days&lt;/a&gt;üîó
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/KilledByAPixel/LittleJS"&gt;LittleJS&lt;/a&gt; +39%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/CromwellCMS/Cromwell"&gt;Cromwell CMS&lt;/a&gt; +32%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/peppercornstudio/pollen"&gt;Pollen&lt;/a&gt; +28%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/handtracking-io/yoha"&gt;Yoha&lt;/a&gt; +25%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/RajvirSingh1313/Elecrue"&gt;Elecrue&lt;/a&gt; +24%&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#top-risers-over-last-30-days"&gt;
  &lt;/a&gt;
  &lt;a href="https://stargazing.dev/?owner=&amp;amp;order=monthlyStarChange&amp;amp;minimumStars=0&amp;amp;search=&amp;amp;reverseOrder=false&amp;amp;moreFilters=false"&gt;Top risers over last 30 days&lt;/a&gt;üîó
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/public-apis/public-apis"&gt;Public APIs&lt;/a&gt; +5,167 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/louislam/uptime-kuma"&gt;Uptime Kuma&lt;/a&gt; +4,986 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/trekhleb/javascript-algorithms"&gt;JavaScript Algorithms&lt;/a&gt; +4,793 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/awesome"&gt;Awesome&lt;/a&gt; +3,461 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/EbookFoundation/free-programming-books"&gt;Free Programming Books&lt;/a&gt; +2,649 stars&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#top-growth-over-last-30-days"&gt;
  &lt;/a&gt;
  &lt;a href="https://stargazing.dev/?owner=&amp;amp;order=monthlyStarChangePercent&amp;amp;minimumStars=0&amp;amp;search=&amp;amp;reverseOrder=false&amp;amp;moreFilters=false"&gt;Top growth(%) over last 30 days&lt;/a&gt;üîó
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/csswizardry/ct"&gt;ct&lt;/a&gt; +171%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/louislam/uptime-kuma"&gt;Uptime Kuma&lt;/a&gt; +136%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/pankod/refine"&gt;Refine&lt;/a&gt; +136%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/NitzanHen/agrippa"&gt;Agrippa&lt;/a&gt; +131%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/eBay/nice-modal-react"&gt;Nice Modal React&lt;/a&gt; +99%&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For all for the latest rankings please checkout &lt;a href="https://stargazing.dev"&gt;Stargazing.dev&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Trending Projects is available as a weekly newsletter please sign up at &lt;a href="https://stargazing.dev/"&gt;Stargazing.dev&lt;/a&gt; to ensure you never miss an issue.&lt;/p&gt;

&lt;p&gt;If you enjoyed this article you can &lt;a href="https://twitter.com/stargazing_dev"&gt;follow me&lt;/a&gt; on Twitter where I regularly post about HTML, CSS and JavaScript.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Spark is lit once¬†again</title>
      <author>Mindaugas</author>
      <pubDate>Fri, 29 Oct 2021 13:30:23 +0000</pubDate>
      <link>https://dev.to/exacaster/spark-is-lit-once-again-41p7</link>
      <guid>https://dev.to/exacaster/spark-is-lit-once-again-41p7</guid>
      <description>&lt;p&gt;&lt;em&gt;&lt;a class="mentioned-user" href="https://dev.to/pdambrauskas"&gt;@pdambrauskas&lt;/a&gt;
 and I are marking hactoberfest by releasing our little in-house project...&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lighter-running-spark-applications-on-kubernetes"&gt;
  &lt;/a&gt;
  Lighter - Running Spark applications on Kubernetes
&lt;/h2&gt;

&lt;p&gt;Here at &lt;a href="https://exacaster.com"&gt;Exacaster&lt;/a&gt; &lt;a href="https://spark.apache.org/"&gt;Spark&lt;/a&gt; applications have been used extensively for years. We started using them on our &lt;a href="https://hadoop.apache.org/"&gt;Hadoop&lt;/a&gt; clusters with &lt;a href="https://hadoop.apache.org/docs/stable/hadoop-yarn/hadoop-yarn-site/YARN.html"&gt;YARN&lt;/a&gt; as an application manager. However, with our recent product, we started moving towards a Cloud-based solution and decided to use Kubernetes for our infrastructure needs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#livy"&gt;
  &lt;/a&gt;
  Livy
&lt;/h3&gt;

&lt;p&gt;When running Spark applications on YARN, you can submit jobs using:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Spark client&lt;/li&gt;
&lt;li&gt;Apache &lt;a href="https://github.com/apache/incubator-livy/"&gt;Livy&lt;/a&gt; - an open-source REST API for interacting with Apache Spark from anywhere.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Latter was a go-to solution at the time when we were only using Spark on YARN. Sadly Apache Livy is not maintained anymore: it has no K8s support, Spark client is more and more outdated with every passing day. For some time we used &lt;a href="https://github.com/jahstreet/incubator-livy/tree/kubernetes-support-initial"&gt;@jahstreet's fork&lt;/a&gt; which had K8s available. But then we saw that the Livy project hadn't received any updates and we decided to implement our own solution - &lt;a href="https://github.com/exacaster/lighter"&gt;Exacaster Lighter&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lighter"&gt;
  &lt;/a&gt;
  Lighter
&lt;/h3&gt;

&lt;p&gt;Exacaster Lighter is heavily inspired by Apache Livy. The Idea is the same: hide Spark application client under the REST API. However, we are focusing on running those applications on the K8s cluster. YARN mode is also supported. We designed our application to be extendible with different execution backends.&lt;/p&gt;

&lt;p&gt;Lighter has lightweight, React based UI written in TS and back-end written in Java with minor Python integration points.&lt;/p&gt;

&lt;p&gt;Simplified illustration of the architecture:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;                                              ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
                                              ‚îÇ Lighter                                                                    ‚îÇ
                                              ‚îÇ     ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê     ‚îÇ
                                              ‚îÇ     ‚îÇ                                                                ‚îÇ     ‚îÇ
                                              ‚îÇ     ‚îÇ                         Internal storage                       ‚îÇ     ‚îÇ
                                              ‚îÇ     ‚îÇ                                                                ‚îÇ     ‚îÇ
                                              ‚îÇ     ‚îÇ                                                                ‚îÇ     ‚îÇ
                                              ‚îÇ     ‚îî‚ñ≤‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ≤‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò     ‚îÇ
                                              ‚îÇ      ‚îÇ        ‚îÇ                    ‚îÇ                         ‚îÇ             ‚îÇ
                                              ‚îÇ  store app    ‚îÇ                 get‚îÇnew apps            sync status        ‚îÇ
                                              ‚îÇ      ‚îÇ     check status            ‚îÇ                         ‚îÇ             ‚îÇ
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê                    ‚îå‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê           ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê      ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îÇ
‚îÇ                    ‚îÇ                    ‚îÇ                     ‚îÇ           ‚îÇ                ‚îÇ      ‚îÇ                 ‚îÇ    ‚îÇ
‚îÇ                    ‚îÇ  Submit            ‚îÇ                     ‚îÇ           ‚îÇ                ‚îÇ      ‚îÇ                 ‚îÇ    ‚îÇ
‚îÇ                    ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ∫                     ‚îÇ           ‚îÇ                ‚îÇ      ‚îÇ                 ‚îÇ    ‚îÇ
‚îÇ      Client        ‚îÇ                    ‚îÇ       REST api      ‚îÇ           ‚îÇ  App executor  ‚îÇ      ‚îÇ Status tracker  ‚îÇ    ‚îÇ
‚îÇ                    ‚îÇ  Check status      ‚îÇ                     ‚îÇ           ‚îÇ                ‚îÇ      ‚îÇ                 ‚îÇ    ‚îÇ
‚îÇ                    ‚óÑ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§                     ‚îÇ           ‚îÇ                ‚îÇ      ‚îÇ                 ‚îÇ    ‚îÇ
‚îÇ                    ‚îÇ                    ‚îÇ                     ‚îÇ           ‚îÇ                ‚îÇ      ‚îÇ                 ‚îÇ    ‚îÇ
‚îÇ                    ‚îÇ                    ‚îÇ                     ‚îÇ           ‚îÇ                ‚îÇ      ‚îÇ                 ‚îÇ    ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò                    ‚îî‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò           ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò      ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îÇ
                                              ‚îÇ                                      ‚îÇ                       ‚îÇ             ‚îÇ
                                              ‚îÇ                                   execute               get status         ‚îÇ
                                              ‚îÇ                                      ‚îÇ                       ‚îÇ             ‚îÇ
                                              ‚îÇ                              ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê      ‚îÇ
                                              ‚îÇ                              ‚îÇ                                      ‚îÇ      ‚îÇ
                                              ‚îÇ                              ‚îÇ                                      ‚îÇ      ‚îÇ
                                              ‚îÇ                              ‚îÇ                Backend               ‚îÇ      ‚îÇ
                                              ‚îÇ                              ‚îÇ               (YARN/K8s)             ‚îÇ      ‚îÇ
                                              ‚îÇ                              ‚îÇ                                      ‚îÇ      ‚îÇ
                                              ‚îÇ                              ‚îÇ                                      ‚îÇ      ‚îÇ
                                              ‚îÇ                              ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò      ‚îÇ
                                              ‚îÇ                                                                            ‚îÇ
                                              ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;More information can be found on our &lt;a href="https://github.com/exacaster/lighter/edit/master/docs/"&gt;documentation&lt;/a&gt; page.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ui"&gt;
  &lt;/a&gt;
  UI
&lt;/h3&gt;

&lt;p&gt;This is the job list view:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L2P34NJn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0l13dnf409vje3ych64k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L2P34NJn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0l13dnf409vje3ych64k.png" alt="Job list" width="880" height="185"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;You can see the configuration of the submitted job inside:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RBnU8T2R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rnthv9qjcm3t7ego932o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RBnU8T2R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rnthv9qjcm3t7ego932o.png" alt="Job configurations" width="880" height="244"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Driver logs are also available for each job:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O9WAfXz3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ojcy9jesy0il7bldj2jm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O9WAfXz3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ojcy9jesy0il7bldj2jm.png" alt="Job logs" width="880" height="364"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works?
&lt;/h3&gt;

&lt;p&gt;Glad you asked. It is quite simple. Lighter uses &lt;a href="https://spark.apache.org/docs/latest/api/java/org/apache/spark/launcher/SparkLauncher.html"&gt;Spark Launcher&lt;/a&gt; to launch Spark applications on Kubernetes cluster. The launcher takes care of creating all Pods needed for the Spark application to run. When launching applications we tag them with a unique identifier by setting config property &lt;code&gt;spark.kubernetes.driver.label.spark-app-tag&lt;/code&gt;. Then we use that identifier to check application status and retrieve application logs by calling pods API with &lt;code&gt;labelSelector&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;Things get a bit more complicated on interactive sessions. We've created &lt;a href="https://github.com/jupyter-incubator/sparkmagic"&gt;Sparkmagic&lt;/a&gt; compatible REST API so that Sparkmagic kernel could communicate with Lighter the same way as it does with Apache Livy. When a user creates an interactive session Lighter server submits a custom PySpark application which contains an infinite loop which constantly checks for new commands to be executed. Each Sparkmagic command is saved on Java collection, retrieved by the PySpark application through Py4J Gateway and executed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#uscases"&gt;
  &lt;/a&gt;
  Uscases
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#spark-on-k8s"&gt;
  &lt;/a&gt;
  Spark on K8s
&lt;/h4&gt;

&lt;p&gt;Since Apache Spark 2.4, applications can be executed on the &lt;a href="https://spark.apache.org/docs/latest/running-on-kubernetes.html"&gt;K8s cluster&lt;/a&gt;. When you submit your Spark application, driver and executor pods are created for your application and removed after the application completes. But if you want to track application status and report them to end-users in a nice manner it gets complicated. Haha.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#spark-on-yarn"&gt;
  &lt;/a&gt;
  Spark on YARN
&lt;/h4&gt;

&lt;p&gt;In the early days of the Big Data era when K8s hasn't even been born yet, the common open source go-to solution was the Hadoop stack. We have written several old-fashioned Map-Reduce jobs, scripts using &lt;a href="https://pig.apache.org/"&gt;Pig&lt;/a&gt; until we came across Spark. Since then Spark has became one of the most popular data processing engines. It is very easy to start using Lighter on YARN deployments. Just run a &lt;a href="https://github.com/exacaster/lighter/blob/master/docs/docker.md"&gt;docker&lt;/a&gt; with proper configuration and mount necessary configurations in all the default paths.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#jupyterlab"&gt;
  &lt;/a&gt;
  Jupyterlab
&lt;/h4&gt;

&lt;p&gt;For ad-hoc data analysis &lt;a href="https://jupyter.org/"&gt;Jupyterlab&lt;/a&gt; on top of Spark is an elegant solution. Between themselves, however, these two great tools cannot communicate so Lighter together with &lt;a href="https://github.com/jupyter-incubator/sparkmagic"&gt;SparkMagic&lt;/a&gt; acts as a bridge. You only need to provide the correct &lt;a href="https://github.com/exacaster/lighter/blob/master/docs/sparkmagic.md"&gt;configuration&lt;/a&gt; to SparkMagic to have it working.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-remarks"&gt;
  &lt;/a&gt;
  Closing remarks
&lt;/h2&gt;

&lt;p&gt;Lighter is a freshly baked tool and open-sourced for everyone to use. Since we developed it to the use-cases that are familiar to us, feel free to contribute if you see any opportunities to make it better. &lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>opensource</category>
      <category>hacktoberfest</category>
      <category>spark</category>
    </item>
    <item>
      <title>Getting Started with Appwrite in NestJS</title>
      <author>qwe123coder</author>
      <pubDate>Fri, 29 Oct 2021 13:29:34 +0000</pubDate>
      <link>https://dev.to/qwe123coder/getting-started-with-appwrite-in-nestjs-22gk</link>
      <guid>https://dev.to/qwe123coder/getting-started-with-appwrite-in-nestjs-22gk</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Appwrite is a self-hosted solution that provides developers with  a set of easy-to-use and integrate REST APIs to manage their core  backend needs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Some key features :&lt;br&gt;
...&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Database&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Store, query and manage access control to your app documents&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Storage&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Upload, download and preview your app and users files and media&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Users&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Authenticate, confirm and manage your users using multiple &lt;br&gt;
  signin methods&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;GEO &amp;amp; Localization&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Detect your users location, locale and fetch GEO related data&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Run your backend code in a secure and isolated environment to &lt;br&gt;
 customize your app&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Console&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Track your backend API usage and manage your project resources &lt;br&gt;
 from a modern UI&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Privacy&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Track your backend API usage and manage your project resources &lt;br&gt;
 from a modern UI&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Security&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Built in end to end security for your backend API both in transit &lt;br&gt;
 and at rest&lt;/p&gt;

&lt;p&gt;So now, without any further delay let's get started! üòÉ&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#installing-appwrite-"&gt;
  &lt;/a&gt;
  Installing Appwrite :
&lt;/h2&gt;

&lt;p&gt;Before installing please make sure your systems meets the minimum requirement of 1 CPU core and 2GB of RAM, and an operating system that supports Docker&lt;/p&gt;

&lt;p&gt;In this tutorial we'll be using Docker to install Appwrite.&lt;br&gt;
So before moving forward please make sure you've docker &lt;a href="https://www.docker.com/products/docker-desktop"&gt;installed Install Docker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The easiest way to start running your Appwrite server is by running our Docker installer tool from your terminal.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#unix-"&gt;
  &lt;/a&gt;
  Unix :
&lt;/h1&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker run &lt;span class="nt"&gt;-it&lt;/span&gt; &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--volume&lt;/span&gt; /var/run/docker.sock:/var/run/docker.sock &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--volume&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;/appwrite:/usr/src/code/appwrite:rw &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--entrypoint&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"install"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    appwrite/appwrite:0.11.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h1&gt;
  &lt;a href="#windows-"&gt;
  &lt;/a&gt;
  Windows :
&lt;/h1&gt;

&lt;p&gt;CMD :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker run &lt;span class="nt"&gt;-it&lt;/span&gt; &lt;span class="nt"&gt;--rm&lt;/span&gt; ^
    &lt;span class="nt"&gt;--volume&lt;/span&gt; //var/run/docker.sock:/var/run/docker.sock ^
    &lt;span class="nt"&gt;--volume&lt;/span&gt; &lt;span class="s2"&gt;"%cd%"&lt;/span&gt;/appwrite:/usr/src/code/appwrite:rw ^
    &lt;span class="nt"&gt;--entrypoint&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"install"&lt;/span&gt; ^
    appwrite/appwrite:0.11.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Powershell :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker run &lt;span class="nt"&gt;-it&lt;/span&gt; &lt;span class="nt"&gt;--rm&lt;/span&gt; ,
    &lt;span class="nt"&gt;--volume&lt;/span&gt; /var/run/docker.sock:/var/run/docker.sock ,
    &lt;span class="nt"&gt;--volume&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;pwd&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;/appwrite:/usr/src/code/appwrite:rw ,
    &lt;span class="nt"&gt;--entrypoint&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"install"&lt;/span&gt; ,
    appwrite/appwrite:0.11.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;‚úÖSetting Up Appwrite :&lt;br&gt;
Once you've appwrite installed and running on your local machine, go ahead open up &lt;a href="http://localhost:3000/"&gt;http://localhost:3000/&lt;/a&gt; in your favourite Browsers and you should see this :&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1wiXg1He--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c3ahv264641hsmdplm7i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1wiXg1He--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c3ahv264641hsmdplm7i.png" alt="Image description" width="880" height="454"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Go ahead and create your account, and login to you appwrite account.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MDAq5a3u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/52g93pj8udu1p9k6zf8w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MDAq5a3u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/52g93pj8udu1p9k6zf8w.png" alt="Image description" width="880" height="432"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then click on create project and Enter your project's Name&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mijSNLrc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4l0lilb8o6nwekf4vo6d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mijSNLrc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4l0lilb8o6nwekf4vo6d.png" alt="Image description" width="716" height="480"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LV35J87D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/80ohxebpkhy6svzqtxuf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LV35J87D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/80ohxebpkhy6svzqtxuf.png" alt="Image description" width="880" height="429"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you see a console like this üëÜ . Congratulations you've just successfully setup your first App with Appwrite!ü•≥&lt;/p&gt;

&lt;p&gt;Hold on we're not done yet!üòÖ&lt;/p&gt;

&lt;p&gt;Let's move on to creating a complete authentication with Appwrite.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Under platforms tab Click on Add Platform and select New Web App Then name your web app and set your hostname to localhost (If you're hosting your appwrite somewhere else then feel free to enter domain of that address.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As you hit register you'll find your platform added :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VK9iNXDH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ptjyewxa83nn3hh2k8xd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VK9iNXDH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ptjyewxa83nn3hh2k8xd.png" alt="Image description" width="880" height="314"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚úÖGetting Started with our Login App :&lt;br&gt;
Navigate to Users Tab :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ecxKmAbg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ez3jnc10nb5nnkqlo1l5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ecxKmAbg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ez3jnc10nb5nnkqlo1l5.png" alt="Image description" width="880" height="432"&gt;&lt;/a&gt;&lt;br&gt;
And make sure that Email/Password Auth is enabled.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xmF_SZ2A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iwc1k8pcai6sy50di5f0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xmF_SZ2A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iwc1k8pcai6sy50di5f0.png" alt="Image description" width="880" height="303"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;now lets set up are NestJS app&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#setting-up-nestjs-project-"&gt;
  &lt;/a&gt;
  Setting up NestJS project :
&lt;/h1&gt;

&lt;p&gt;Before moving on Make sure you've installed npm or yarn.&lt;br&gt;
To create NestJS  app, create a new folder in your directory and open terminal in that folder then simply run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-next-app@latest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn create next-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then open that folder in your code editor.&lt;/p&gt;

&lt;p&gt;To start your development server, run :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;in your terminal. Once your development server starts open up &lt;a href="http://localhost:3000/"&gt;http://localhost:3000/&lt;/a&gt; in your browser .&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#installing-required-packagesdependencies-"&gt;
  &lt;/a&gt;
  ‚úÖInstalling Required Packages/Dependencies :
&lt;/h1&gt;

&lt;p&gt;To move forward we'll first install all the packages that we're going to need while developing our app.&lt;/p&gt;

&lt;p&gt;Installing Appwrite :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install appwrite
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add appwrite
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;‚úÖLet's start building! :&lt;br&gt;
Now, we have completely setup our Next Application. Let's start with building our App :&lt;br&gt;
Open up your NestJS project in your code-editor and navigate to pages/index.js&lt;br&gt;
You should see default code :&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0B1eQtJa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d8bg5fty5xtprz36wpdg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0B1eQtJa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d8bg5fty5xtprz36wpdg.png" alt="Image description" width="874" height="570"&gt;&lt;/a&gt;&lt;br&gt;
Clear all the code in this file and we'll first start by import statements and setting up Home Class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Head&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/head&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Image&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/image&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../styles/Home.module.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="nx"&gt;World&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And you should see Hello world Printed in your browser.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We'll not be using Routing or Hooks in this tutorial just for the sake of simplicity, we'll keep this tutorial beginner friendly.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;‚úÖCreating and designing Signin and Signup Page:&lt;br&gt;
We'll begin by creating a new file for our sign and signup page src/SignInAndSignUp.jsx&lt;br&gt;
we'll import basic files in here and setup this file :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Head&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/head&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Image&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/image&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./SignInAndSignUp.styles.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;;&lt;/span&gt;



&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SignInAndSignUpPage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sign-in-and-sign-up&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;SignInAndSignUpPage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's create Sign In and SignUp components :&lt;br&gt;
Create a new directory in src name it Components src/Components&lt;/p&gt;

&lt;p&gt;inside components create a new file with name SignIn.component.jsx&lt;br&gt;
and SignIn.styles.css&lt;/p&gt;

&lt;p&gt;src/Component/SignIn.component.jsx&lt;br&gt;
src/Component/SignIn.styles.css&lt;/p&gt;

&lt;p&gt;Now, In SignIn.component.jsx we'll create our form for SignIn.&lt;br&gt;
Before that to keep our app well styled let's create our custom buttons and Form Inputs&lt;/p&gt;

&lt;p&gt;In /src/ create a new folder called Utils/ Then a new file&lt;/p&gt;

&lt;p&gt;src/Utils/FormInput.jsx and&lt;br&gt;
src/Utils/FormInput.styles.css&lt;/p&gt;

&lt;p&gt;and two files for custom buttons :&lt;br&gt;
src/Utils/CustomButton.jsx and&lt;br&gt;
src/Utils/CustomButton.styles.css&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Why these many files? It is usually the best practise in code is  to modularise our code in such a way that its easily&lt;br&gt;
manageable and scalable.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;
  &lt;a href="#custombuttonjsx"&gt;
  &lt;/a&gt;
  CustomButton.jsx
&lt;/h1&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Head&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/head&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Image&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/image&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./custom-button.styles.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;


&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CustomButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isGoogleSignIn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;otherProps&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;isGoogleSignIn&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;google-sign-in&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; custom-button`&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;otherProps&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;CustomButton&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h1&gt;
  &lt;a href="#forminputjsx"&gt;
  &lt;/a&gt;
  FormInput.jsx
&lt;/h1&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Head&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/head&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Image&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/image&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./CustomButton.styles.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;


&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CustomButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isGoogleSignIn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;otherProps&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;isGoogleSignIn&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;google-sign-in&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; custom-button`&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;otherProps&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;CustomButton&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;Now Navigate back to SignIn.component.jsx file and we'll start building our signin page.&lt;br&gt;
Firstly we'll import all the required files and packages&lt;br&gt;
and then create SignIn Class Component with state that contians relevant fields :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Head&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/head&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Image&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/image&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;CustomButton&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../Utils/CustomButton&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;FormInput&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../Utils/FormInput&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SignIn&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;email&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;password&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now Let's render our form through this :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import Head from 'next/head'
import Image from 'next/image'

import CustomButton from '../Utils/CustomButton';
import FormInput from '../Utils/FormInput';

class SignIn  {
    constructor(props) {
        super(props);
        this.state = {
            email : '',
            password : ''
        }
    }

    handleSubmit = async event=&amp;gt;{
        console.log('Form Submitted')

    }

    handleChange  = event=&amp;gt;{
        console.log('Input value changed')
    }

    render() {
        return(
            &amp;lt;div className= 'sign-in'&amp;gt;
                &amp;lt;h2&amp;gt;I already have an account&amp;lt;/h2&amp;gt;
                &amp;lt;span&amp;gt;Sign in with email and password&amp;lt;/span&amp;gt;

                &amp;lt;form onSubmit={this.handleSubmit}&amp;gt;
                    &amp;lt;FormInput type="email" name="email" label = "Email" value = {this.state.email}
                        onChange = {this.handleChange} required

                    /&amp;gt;
                    &amp;lt;FormInput type="password" name="password" value = {this.state.password}
                     onChange = {this.handleChange} label="Password"
                     required /&amp;gt;

                     &amp;lt;div className="buttons"&amp;gt;
                    &amp;lt;CustomButton type="submit"&amp;gt;Sign In &amp;lt;/CustomButton&amp;gt;
                    &amp;lt;CustomButton onClick={this.handleSubmit} isGoogleSignIn&amp;gt;
                        {''}
                        Sign in with google {''}
                    &amp;lt;/CustomButton&amp;gt;
                    &amp;lt;/div&amp;gt;     

                &amp;lt;/form&amp;gt;
            &amp;lt;/div&amp;gt;
        )
    }
}

export default SignIn;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For now we're not doing anything with handle Submit or handle Change, we'll add functionalities to those function as we integrate our appwrite.&lt;/p&gt;

&lt;p&gt;Now Let's add our SignIn Component to our SignIn and SignIn Page :&lt;br&gt;
Navigate to src/SignInAndSignUp.jsx and import SignIn component and add it to the return statement&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Head&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/head&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Image&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/image&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;SignIn&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Component/SignIn.component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./SignInAndSignUp.styles.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;



&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SignInAndSignUpPage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sign-in-and-sign-up&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SignIn&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/SignIn&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;SignInAndSignUpPage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
js&lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;Let's see how our app looks so far, render the SignInAndSignUp Page from index.js&lt;br&gt;
Navigate to src/index.js and import SignInAndSignUpPage and call it in the render function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SignInAndSignUpPage&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/SignInAndSignUpPage&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now Let's move on to SignUp Page&lt;br&gt;
In components directory create two new files SignUp.component.jsx and SignUp.styles.css&lt;/p&gt;

&lt;p&gt;Steps to understand the below Code :&lt;/p&gt;

&lt;p&gt;Import all required files and packages&lt;br&gt;
Define State with relevant fields.&lt;br&gt;
Then We'll design our form using our FormInput components and Custom Buttons.&lt;br&gt;
On Submission we'll trigger the function handle change which doesn't do anything for now, we'll assign it the functionality as we integrate appwrite.&lt;br&gt;
Export the class Component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Head&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/head&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Image&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/image&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;CustomButton&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../Utils/CustomButton&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;FormInput&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../Utils/FormInput&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./SignUp.styles.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;


&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SignUp&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;displayName&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;email&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;password&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;confirmPassword&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;handleSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;handleChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;


    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;confirmPassword&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sign-up&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="nx"&gt;not&lt;/span&gt; &lt;span class="nx"&gt;have&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Sign&lt;/span&gt; &lt;span class="nx"&gt;Up&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;your&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sign-up-form&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;FormInput&lt;/span&gt;
                    &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
                    &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;displayName&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
                    &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Display Name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
                    &lt;span class="nx"&gt;required&lt;/span&gt;
                &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;FormInput&lt;/span&gt;
                    &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
                    &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
                    &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
                &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;FormInput&lt;/span&gt;
                    &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
                    &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
                    &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Password&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
                &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;FormInput&lt;/span&gt;
                    &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
                    &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;confirmPassword&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
                    &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;confirmPassword&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Confirm Password&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
                &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CustomButton&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;SIGN&lt;/span&gt; &lt;span class="nx"&gt;UP&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/CustomButton&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;SignUp&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now Let's Import our SignUp Component in SignInAndSignUpPage.jsx file&lt;/p&gt;

&lt;p&gt;import &lt;code&gt;SignUp from './Components/SignUp.component&lt;/code&gt;&lt;br&gt;
and then include that in return statement as well&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SignInAndSignUpPage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sign-in-and-sign-up&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SignIn&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/SignIn&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SignUp&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/SignUp&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, without extending this tutorial any longer, we'll integrate Appwrite to our app in part 2.&lt;/p&gt;

&lt;p&gt;About Appwrite Community :&lt;br&gt;
I hope you enjoyed this tutorial so far, and you must be excited to use appwrite in your future projects. And If you need any help then join appwrite's community of developers : &lt;a href="https://discord.com/invite/GSeTUeA"&gt;Discord&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Other links and resources :&lt;br&gt;
&lt;a href="https://appwrite.io/docs"&gt;Appwrite Docs&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/appwrite"&gt;Appwrite Community&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy Appwriting! ‚ô•&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>beginners</category>
      <category>hacktoberfest</category>
      <category>appwrite</category>
    </item>
    <item>
      <title>Responsive Personal Portfolio Website with HTML CSS JS - Part 1</title>
      <author>Sadee</author>
      <pubDate>Fri, 29 Oct 2021 13:16:43 +0000</pubDate>
      <link>https://dev.to/codewithsadee/responsive-personal-portfolio-website-with-html-css-js-part-1-3dlg</link>
      <guid>https://dev.to/codewithsadee/responsive-personal-portfolio-website-with-html-css-js-part-1-3dlg</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/6A5Kpjx5lz8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Responsive personal portfolio website with html css js&lt;/p&gt;

&lt;p&gt;In this video series, &lt;br&gt;
I will show you how to build a Complete Responsive Personal Portfolio Website using HTML CSS JavaScript. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#website-features"&gt;
  &lt;/a&gt;
  üåü Website features
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;5+ pages&lt;/li&gt;
&lt;li&gt;Fully Responsive and mobile friendly&lt;/li&gt;
&lt;li&gt;Awesome Page Navigation&lt;/li&gt;
&lt;li&gt;Filterable item showcase&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;HI üëã&lt;br&gt;
I'm Sadee (webdev)&lt;br&gt;
In this channel I make videos about Complete Responsive website.&lt;br&gt;
You can checkout my channel üëá&lt;/p&gt;

&lt;p&gt;üì∫ My Channel : &lt;a href="https://www.youtube.com/channel/UC1PZHWV6VvICTL1LgFUZq6g"&gt;codewithsadee&lt;/a&gt;&lt;br&gt;
üîî Subscribe : &lt;a href="https://www.youtube.com/channel/UC1PZHWV6VvICTL1LgFUZq6g?sub_confirmation=1"&gt;subscribe now&lt;/a&gt;&lt;br&gt;
üïê New videos Every Friday &amp;amp; Tuesday&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#essential-links"&gt;
  &lt;/a&gt;
  üîó Essential links
&lt;/h2&gt;

&lt;p&gt;Images : &lt;a href="https://drive.google.com/file/d/1CZZcnaOEVDDneSve6qpSUoyAfEBuPrqD/view"&gt;image.zip&lt;/a&gt;&lt;br&gt;
Font : &lt;a href="https://fonts.google.com/specimen/Poppins?query=poppins"&gt;Poppins&lt;/a&gt;&lt;br&gt;
Ionicon : &lt;a href="https://ionic.io/ionicons"&gt;https://ionic.io/ionicons&lt;/a&gt;&lt;br&gt;
How to use ionicon : &lt;a href="https://youtu.be/TTrYjLOJeKs"&gt;https://youtu.be/TTrYjLOJeKs&lt;/a&gt;&lt;br&gt;
Source Code : &lt;a href="https://www.patreon.com/codewithsadee"&gt;https://www.patreon.com/codewithsadee&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#timestamp"&gt;
  &lt;/a&gt;
  ‚è±Ô∏è Timestamp
&lt;/h2&gt;

&lt;p&gt;0:00 - Demo&lt;br&gt;
1:12 - File Structure&lt;br&gt;
1:28 - Initial html setup&lt;br&gt;
2:09 - CSS variables&lt;br&gt;
2:47 - Custom scrollbar&lt;br&gt;
3:15 - Reset and default style&lt;br&gt;
5:15 - Mobile navbar&lt;br&gt;
8:15 - Sidebar&lt;br&gt;
14:15 - Hero&lt;br&gt;
18:15 - Service&lt;br&gt;
21:25 - Testimonials&lt;br&gt;
25:50 - Client&lt;br&gt;
27:52 - Media queries&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#like-follow-amp-subscribe-me"&gt;
  &lt;/a&gt;
  üë§ Like - Follow &amp;amp; Subscribe Me
&lt;/h2&gt;

&lt;p&gt;Twitter : &lt;a href="https://twitter.com/codewithsadee"&gt;https://twitter.com/codewithsadee&lt;/a&gt;&lt;br&gt;
Github : &lt;a href="https://github.com/codewithsadee"&gt;https://github.com/codewithsadee&lt;/a&gt;&lt;br&gt;
YouTube : &lt;a href="https://www.youtube.com/channel/UC1PZHWV6VvICTL1LgFUZq6g"&gt;codewithsadee&lt;/a&gt;&lt;br&gt;
Buy Me A Coffee : &lt;a href="https://www.buymeacoffee.com/codewithsadee"&gt;https://www.buymeacoffee.com/codewithsadee&lt;/a&gt;&lt;br&gt;
Patreon : &lt;a href="https://www.patreon.com/codewithsadee"&gt;https://www.patreon.com/codewithsadee&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/codewithsadee"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qhS87mRW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9kn6vwn4mulhsx6o69is.png" alt="Buy Me A Coffee" width="225" height="51"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Custom styling similar to Android for iOS</title>
      <author>Fernando Alvarez Ude</author>
      <pubDate>Fri, 29 Oct 2021 12:33:41 +0000</pubDate>
      <link>https://dev.to/ude/custom-styling-similar-to-android-for-ios-4ddf</link>
      <guid>https://dev.to/ude/custom-styling-similar-to-android-for-ios-4ddf</guid>
      <description>&lt;h3&gt;
  &lt;a href="#motivation"&gt;
  &lt;/a&gt;
  Motivation
&lt;/h3&gt;

&lt;p&gt;When deciding the architecture for Playtomic mobile apps we took the approach of creating shared architecture with native apps (you can read more about it &lt;a href="https://dev.to/playtomic/playtomics-shared-architecture-using-swift-and-kotlin-320b"&gt;here&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;But this doesn't only apply to code or architecture. Creating a common structure in the way styles and resources are organized not only help developers, but also helps to make Android and iOS code look similar.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-did-we-achieve-that"&gt;
  &lt;/a&gt;
  How did we achieve that?
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#styles-in-android"&gt;
  &lt;/a&gt;
  Styles in Android
&lt;/h4&gt;

&lt;p&gt;Styles are a set of attributes that could be set to a view. In android these styles are defined inside an XML file in the resources folder. &lt;/p&gt;

&lt;p&gt;We can encapsulate some attributes in a style...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;    &lt;span class="nt"&gt;&amp;lt;style&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"custom_style"&lt;/span&gt; &lt;span class="na"&gt;parent=&lt;/span&gt;&lt;span class="s"&gt;"@style/Widget.AppCompat.Button.Borderless"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;item&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"android:layout_height"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;60dp&lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;item&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"android:paddingStart"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;@dimen/small_horizontal&lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;item&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"android:paddingEnd"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;@dimen/small_horizontal&lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;item&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"android:textSize"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;14sp&lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;item&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"android:fontFamily"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;@font/playtomic_semibold&lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;item&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"android:gravity"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;center&lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;item&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"android:textColor"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;@drawable/button_main_text_color&lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;item&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"android:background"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;@drawable/button_primary_background&lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;... apply the style to the view ...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;    &lt;span class="nt"&gt;&amp;lt;Button&lt;/span&gt;
        &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;"@+id/social_profile_follow_button"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"160dp"&lt;/span&gt;
        &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"@style/social_button_primary"&lt;/span&gt;
        &lt;span class="na"&gt;android:text=&lt;/span&gt;&lt;span class="s"&gt;"STYLED BUTTON"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KLTRsN9m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ou9faibh6cr3u07lmng.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KLTRsN9m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ou9faibh6cr3u07lmng.png" alt="Image description" width="516" height="104"&gt;&lt;/a&gt;&lt;br&gt;
... and get a customized component:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BAMW6s0E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gc1yqvxcfrbds9b2ybvf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BAMW6s0E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gc1yqvxcfrbds9b2ybvf.png" alt="Image description" width="300" height="126"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Styles are a good way to reuse resources and keep visual coherence inside the app. They also help to keep clean the layout files.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#r-class-in-ios"&gt;
  &lt;/a&gt;
  R class in iOS
&lt;/h4&gt;

&lt;p&gt;All resources in Android are referenced in a static class called R, so accessing to individual resources is pretty easy using &lt;code&gt;R.[typeOfResource].resourceName&lt;/code&gt;.&lt;br&gt;
For iOS we use a library that does something similar, is called &lt;a href="https://github.com/mac-cain13/R.swift"&gt;R.swift&lt;/a&gt;&lt;br&gt;
With that we can access resources in iOS using an 'Android like' sintax&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Instead of &lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;icon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;UIImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;named&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"settings-icon"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;font&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;UIFont&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"San Francisco"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;UIColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;named&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"indicator highlight"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;//R.swift allows us to use&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;icon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;R&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;settingsIcon&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;font&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;R&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;font&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;sanFrancisco&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;R&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;indicatorHighlight&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#creating-android-styles-in-ios"&gt;
  &lt;/a&gt;
  Creating Android Styles in iOS
&lt;/h4&gt;

&lt;p&gt;To achieve something similar as the Android styles in iOS we need to create a structure containing the possible attributes for a view, then use an &lt;code&gt;@IBInspectable&lt;/code&gt; for being able to set the style in the storyboard and, last but not least, apply the style to the view.&lt;/p&gt;

&lt;p&gt;So, for the style, we create an structure like this one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;Style&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;font&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UIFont&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;textColors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;UIControl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;State&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UIColor&lt;/span&gt;&lt;span class="p"&gt;]?&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;textAlignment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;NSTextAlignment&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;alphaLevel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;CGFloat&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;images&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;UIControl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;State&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UIImage&lt;/span&gt;&lt;span class="p"&gt;]?&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UIColor&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;backgroundImages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;UIControl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;State&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UIImage&lt;/span&gt;&lt;span class="p"&gt;]?&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;tintColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UIColor&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;capitalize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;cornerRadius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;CGFloat&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;borderColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UIColor&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;CGFloat&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;drawableStart&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UIImage&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;
&lt;span class="c1"&gt;//...&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Some caveats here:&lt;br&gt;
&lt;em&gt;&lt;code&gt;parent&lt;/code&gt;&lt;/em&gt;: In Android one style can inherit properties from another, in iOS we will use this parent to be able to do that.&lt;br&gt;
&lt;em&gt;&lt;code&gt;textColors&lt;/code&gt;&lt;/em&gt;, &lt;em&gt;&lt;code&gt;images&lt;/code&gt;&lt;/em&gt; and &lt;em&gt;&lt;code&gt;backgroundimages&lt;/code&gt;&lt;/em&gt; are arrays because in Android they can be selectors (have a different value based on the state of the view). &lt;/p&gt;

&lt;p&gt;To keep it in the Android style, we create a extension to the R class created by R.swift to store the styles:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;extension&lt;/span&gt; &lt;span class="kt"&gt;R&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;style&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;extension&lt;/span&gt; &lt;span class="kt"&gt;R&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;style&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;appStyles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Style&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s"&gt;"custom_style"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Style&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nv"&gt;font&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;R&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;font&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;playtomicSemibold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="nv"&gt;textColors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;R&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;playtomicSocial&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;socialWhite&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;highlighted&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;R&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;playtomicSocial&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;socialWhite&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;selected&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;R&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;playtomicSocial&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;socialWhite&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;disabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;R&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;playtomicSocial&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;socialWhite&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;withAlphaComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="nv"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UIColor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nv"&gt;backgroundImages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;R&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socialColor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;social_primary&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;highlighted&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;R&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socialColor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;social_primary_pressed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;selected&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;R&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socialColor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;social_primary_pressed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;disabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;R&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socialColor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;social_primary_disabled&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="nv"&gt;cornerRadius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nv"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;180&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this we have the style defined. Now we need to link styles and views. &lt;br&gt;
To do that &lt;em&gt;magic&lt;/em&gt; we create an &lt;a href="https://docs.swift.org/swift-book/LanguageGuide/Extensions.html"&gt;extension&lt;/a&gt; to View containing an &lt;code&gt;@IBInspectable&lt;/code&gt; that is going to be used to get the style name from the Interface Builder.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--du2h0FMn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/txuycw8psfxnz3c7zsgt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--du2h0FMn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/txuycw8psfxnz3c7zsgt.png" alt="Image description" width="868" height="399"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then we will look for that style in the previous defined map and apply it to the view. &lt;br&gt;
How?&lt;/p&gt;

&lt;p&gt;First, let's see the extension:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;extension&lt;/span&gt; &lt;span class="kt"&gt;UIView&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;@IBInspectable&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;styleName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;get&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;guard&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;newValue&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nf"&gt;applyStyle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;applyStyle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Style&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nf"&gt;applyStyle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;view&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt; &lt;span class="k"&gt;as?&lt;/span&gt; &lt;span class="kt"&gt;UIView&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nf"&gt;applyStyle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;view&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt; &lt;span class="k"&gt;as?&lt;/span&gt; &lt;span class="kt"&gt;UILabel&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nf"&gt;applyStyle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt; &lt;span class="k"&gt;as?&lt;/span&gt; &lt;span class="kt"&gt;UIButton&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nf"&gt;applyStyle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;button&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;//... &lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What are we doing there?&lt;br&gt;
After setting the value in the storyboard we apply the style to the view and then, based on the view type, we set the style attributes to each concrete type of view:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="c1"&gt;//We set the attributes that are common to all the views&lt;/span&gt;
&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;applyStyle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Style&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;view&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UIView&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;backgroundColor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;backgroundColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$0&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cornerRadius&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cornerRadius&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$0&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;alphaLevel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;alphaLevel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$0&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//And then, the particular attributes to each kind of view:&lt;/span&gt;
    &lt;span class="c1"&gt;//UILabel&lt;/span&gt;
&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;applyStyle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Style&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UILabel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;font&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;font&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$0&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;capitalize&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;capitalize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$0&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;//UIButton&lt;/span&gt;
&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;applyStyle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Style&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;button&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UIButton&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buttonType&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;custom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Button type for '&lt;/span&gt;&lt;span class="se"&gt;\(&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;titleLabel&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="s"&gt;' is not custom"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;font&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;titleLabel&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;font&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$0&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;textColors&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;forEach&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
        &lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setTitleColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;for&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;images&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;forEach&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
        &lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;for&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;backgroundImages&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;forEach&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
        &lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setBackgroundImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;for&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;capitalize&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;titleLabel&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;capitalize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$0&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#result"&gt;
  &lt;/a&gt;
  Result
&lt;/h4&gt;

&lt;p&gt;What do we get?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HRx7hqjr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sw8q1zrartw43wvuqe9q.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HRx7hqjr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sw8q1zrartw43wvuqe9q.jpg" alt="Image description" width="281" height="114"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A beautiful and fully customized button!&lt;br&gt;
But not only that, &lt;strong&gt;now we also have a place where we can set app styles that could be easily applied to the views and a style structure that resembles Android and makes styling apps easier&lt;/strong&gt;.&lt;/p&gt;

</description>
      <category>ios</category>
    </item>
    <item>
      <title>JavaScript Jungle: Who is the Proxy </title>
      <author>Vikas yadav</author>
      <pubDate>Fri, 29 Oct 2021 12:27:39 +0000</pubDate>
      <link>https://dev.to/xenoxdev/javascript-jungle-who-is-the-proxy-3a3b</link>
      <guid>https://dev.to/xenoxdev/javascript-jungle-who-is-the-proxy-3a3b</guid>
      <description>&lt;p&gt;I remember one of my interview few years ago. I was asked: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Given an object and how can we track when some property is accessed or updated on that object. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Example that was given by interviewer was as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Rick&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;planet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Earth&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="cm"&gt;/**
* Case 1: Reading property:  
* Whenever I read any property
* it should print 
* GETTING value for &amp;lt;property_name&amp;gt; 
*/&lt;/span&gt;

&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// GETTING value for name&lt;/span&gt;

&lt;span class="cm"&gt;/**
* Case 2: Setting property:  
* Whenever I set any property
* it should print 
* SETTING &amp;lt;property_name&amp;gt; = &amp;lt;new_value&amp;gt;
*/&lt;/span&gt;

 &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;planet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mars&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; 
&lt;span class="c1"&gt;// SETTING planet = Mars &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;I was like what!!! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m0GC_n42--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/scdw7irz7gg46r74e2y2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m0GC_n42--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/scdw7irz7gg46r74e2y2.gif" alt="Confused" width="220" height="190"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But any how I said to my self: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Let's pass this object into a function
&lt;/li&gt;
&lt;li&gt;Function somehow enhance this object and return it. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So I wrote:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;enhance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// do something with obj to enhance&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Interviewer asked me about my thought process on this? After thinking and remembering a lot ü§∑üèº‚Äç‚ôÇÔ∏è I said, I know we have to some how intercept the &lt;code&gt;read&lt;/code&gt; and &lt;code&gt;write&lt;/code&gt; operation on the &lt;code&gt;object&lt;/code&gt;, but I am not sure how to do it on the fly. I know when we define properties using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty"&gt;Object.defineProperty&lt;/a&gt;, we have some control on how that property will behave but the object is already defined so I am not sure. Deep inside I was still not sure üòÇ I was still thinking üôáüèª‚Äç‚ôÇÔ∏è: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jDEzntCk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xlmphfmkkkg3gj4pbcio.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jDEzntCk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xlmphfmkkkg3gj4pbcio.gif" alt="Still thinking" width="220" height="220"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Interviewer dropped me a hint that if I am using &lt;code&gt;Object.defineProperty&lt;/code&gt; then I need to redefine the properties on the object. Then after some hit and trial I came up with this: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ag7hzQyE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4s4fh9y5nbgzlty43ulg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ag7hzQyE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4s4fh9y5nbgzlty43ulg.gif" alt="Tada" width="220" height="124"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;enhance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;plainObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;keys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;plainObject&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;storedObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

  &lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;storedObject&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;plainObject&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defineProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;plainObject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`GETTING value for  [&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;]`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;storedObject&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;set&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`SETTING &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; = &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;storedObject&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;plainObject&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rick&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;planet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;earth&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;enhancedObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;enhance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;enhancedObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// GETTING value for  [name] &lt;/span&gt;
&lt;span class="c1"&gt;// rick &lt;/span&gt;
&lt;span class="nx"&gt;enhancedObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;planet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Mars&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// SETTING planet = Mars &lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  üå¥ Explanation:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;As we know, we have to redefine the properties again. First thing we need to do is to stored all the existing keys in &lt;code&gt;keys&lt;/code&gt; variable. &lt;/li&gt;
&lt;li&gt;Defined a new object &lt;code&gt;storedObject&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Then for each key we copied everything form &lt;code&gt;plainObject&lt;/code&gt; to &lt;code&gt;storedObject&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;Next we defined all the properties on &lt;code&gt;plainObject&lt;/code&gt; again but this time we used &lt;code&gt;Object.defineProperty&lt;/code&gt; to defined it. &lt;/li&gt;
&lt;li&gt;WE have overwritten the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty#description"&gt;get&lt;/a&gt;  which is called when we &lt;code&gt;read&lt;/code&gt; property of an object and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty#description"&gt;set&lt;/a&gt; which is called when we set a value to a property of an object.&lt;/li&gt;
&lt;li&gt;We put the appropriate log there. &lt;/li&gt;
&lt;li&gt;Also whenever &lt;code&gt;set&lt;/code&gt; is called we will store that value in &lt;code&gt;storedObject&lt;/code&gt; and return from &lt;code&gt;storedObject&lt;/code&gt; when &lt;code&gt;get&lt;/code&gt; is called. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;During this time I was explaining my thought process to interviewer and I did a lot of hit and trial as it was hard for me to remember methods on &lt;code&gt;Object&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;My solution has issues some issues:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wIpNVlfz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/47i85p1az08mblcyc3qc.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wIpNVlfz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/47i85p1az08mblcyc3qc.gif" alt="Still Thinking" width="220" height="138"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If we add a new property on &lt;code&gt;enhancedObject&lt;/code&gt; it will not be &lt;code&gt;track&lt;/code&gt;ed. By the way, interviewer asked me this question as well üòÜ. But I could not come up with any solution back then. üòÖ
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="p"&gt;....&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rick&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="na"&gt;planet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;earth&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; 
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;enhancedObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;enhance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// this will not be tracked&lt;/span&gt;
&lt;span class="nx"&gt;enhancedObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;I was completely unaware that there is a better solution in &lt;code&gt;ES6&lt;/code&gt;. After coming home when I researched, I found out a solution which is so much easy to implement as well as to understand. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Sle274-x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bwtmu9my5sqi8w1v3x0d.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sle274-x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bwtmu9my5sqi8w1v3x0d.gif" alt="Solution gif" width="220" height="266"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before we jump into our solution, let's learn a bit about JavaScript Specification of &lt;code&gt;Object&lt;/code&gt;. &lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#internal-methods"&gt;
  &lt;/a&gt;
  üå≥ Internal Methods
&lt;/h2&gt;

&lt;p&gt;JavaScript &lt;a href="https://tc39.es/ecma262/#sec-object-internal-methods-and-internal-slots"&gt;specification&lt;/a&gt; describes some lower level internal methods on &lt;code&gt;Object&lt;/code&gt; like &lt;code&gt;[[Get]]&lt;/code&gt;, &lt;code&gt;[[SET]]&lt;/code&gt;, &lt;code&gt;[[VALUE]]&lt;/code&gt;, &lt;code&gt;[[Writable]]&lt;/code&gt;, &lt;code&gt;[[Enumerable]]&lt;/code&gt; and &lt;code&gt;[[Configurable]]&lt;/code&gt;. As per the specifications: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Each object in an &lt;code&gt;ECMAScript&lt;/code&gt; engine is associated with a set of &lt;code&gt;internal methods&lt;/code&gt; that defines its &lt;code&gt;runtime behaviour&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Point to note:&lt;/strong&gt; It defines &lt;code&gt;runtime behaviour&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;But we cannot directly modify the behaviour of the &lt;code&gt;Object&lt;/code&gt; at runtime using this so called &lt;code&gt;Internal Methods&lt;/code&gt; as we cannot access it directly. As per the specifications: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;These internal methods are not part of the ECMAScript language. They are defined by this specification purely for expository purposes. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are some other internal methods as well. You can checkout full list &lt;a href="https://tc39.es/ecma262/#table-essential-internal-methods"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But in &lt;code&gt;ES6&lt;/code&gt; we have a way to tap into these &lt;code&gt;Internal methods&lt;/code&gt; at runtime.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#introducing-proxy"&gt;
  &lt;/a&gt;
  üå≥ Introducing Proxy
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Proxy&lt;/strong&gt; is a &lt;code&gt;middleman&lt;/code&gt;. It does following: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It &lt;code&gt;wraps&lt;/code&gt; another object.&lt;/li&gt;
&lt;li&gt;It &lt;code&gt;intercepts&lt;/code&gt; all the operations related to &lt;code&gt;Internal Methods&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;It can handle these operations by its own or it can
forward these operation to the &lt;code&gt;wrapped object&lt;/code&gt;. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aswaL6yS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aczp3vboitss5dxpuo9g.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aswaL6yS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aczp3vboitss5dxpuo9g.jpeg" alt="Proxy Image" width="880" height="580"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#anatomy-of-proxy"&gt;
  &lt;/a&gt;
  üå¥ Anatomy of Proxy
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;proxy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Proxy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;code&gt;Proxy&lt;/code&gt; is an inbuilt object that take two arguments: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;target&lt;/strong&gt;: An object that we need to wrap&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;handler&lt;/strong&gt;: An object that defines various methods corresponding to &lt;code&gt;Internal Methods&lt;/code&gt; that we need to intercept at run time. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Handler methods are often refer to as &lt;code&gt;traps&lt;/code&gt; because it traps or intercept the &lt;code&gt;Internal method&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PDA_MJfR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2m1z9k8h8e2hh4ue82md.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PDA_MJfR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2m1z9k8h8e2hh4ue82md.jpeg" alt="Proxy relation" width="880" height="911"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;character&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Rick&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;planet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Earth&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;proxy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Proxy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;character&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;

&lt;span class="c1"&gt;// update name &lt;/span&gt;

&lt;span class="nx"&gt;proxy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;morty&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;character&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// morty&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;üëæ &lt;strong&gt;GOTCHA&lt;/strong&gt; üëæ : If you do not define any handler function. &lt;code&gt;Proxy&lt;/code&gt; will pass the all the operations to wrapped object as if it is not there at all.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#handler-methods"&gt;
  &lt;/a&gt;
  üå¥ Handler methods
&lt;/h3&gt;

&lt;p&gt;For each of the &lt;code&gt;Internal Method&lt;/code&gt; there is a handler method defined on the Proxy object. Some of them are: &lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Internal Method&lt;/th&gt;
&lt;th&gt;Handler Method&lt;/th&gt;
&lt;th&gt;Triggered On&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;[[Get]]&lt;/td&gt;
&lt;td&gt;get&lt;/td&gt;
&lt;td&gt;When reading a property&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[[Set]]&lt;/td&gt;
&lt;td&gt;set&lt;/td&gt;
&lt;td&gt;When writing a value to a property&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[[HasProperty]]&lt;/td&gt;
&lt;td&gt;has&lt;/td&gt;
&lt;td&gt;When used with &lt;code&gt;in&lt;/code&gt; operator&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[[Delete]]&lt;/td&gt;
&lt;td&gt;deleteProperty&lt;/td&gt;
&lt;td&gt;When deleting a property with &lt;code&gt;delete&lt;/code&gt; operator&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[[Call]]&lt;/td&gt;
&lt;td&gt;apply&lt;/td&gt;
&lt;td&gt;When we do a &lt;code&gt;function&lt;/code&gt; call&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;You can refer to full list on &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy#handler_functions"&gt;MDN Docs&lt;/a&gt; and &lt;a href="https://tc39.es/ecma262/#table-proxy-handler-methods"&gt;TC39 docs&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#invariants"&gt;
  &lt;/a&gt;
  üå¥ Invariants
&lt;/h3&gt;

&lt;p&gt;There are certain condition attached to each of the handle methods. These condition must be fulfilled by the trap or handler methods. These are often referred as &lt;code&gt;Invariants&lt;/code&gt;. You can read more on this in note section &lt;a href="https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;As an example for &lt;strong&gt;[[SET]]&lt;/strong&gt; Operation these are the invariants as per &lt;code&gt;TC39&lt;/code&gt; docs: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The result of [[Set]] is a Boolean value.&lt;/li&gt;
&lt;li&gt;Cannot change the value of a property to be different from the value of the corresponding target object property if the corresponding target object property is a non-writable, non-configurable own data property.&lt;/li&gt;
&lt;li&gt;Cannot set the value of a property if the corresponding target object property is a non-configurable own accessor property that has undefined as its [[Set]] attribute.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#set-trap"&gt;
  &lt;/a&gt;
  üå¥ [[SET]] Trap
&lt;/h3&gt;

&lt;p&gt;If we set a trap for &lt;code&gt;[[SET]]&lt;/code&gt; operation and then we can modify the input before setting on original object &lt;code&gt;name&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;character&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Rick&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;planet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Earth&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;proxy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Proxy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;character&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="cm"&gt;/**
* [[SET]] trap
* target: original object 
*         that has been wrapped
* prop: Property that has been set
* value: value to set to the property
*/&lt;/span&gt;
  &lt;span class="na"&gt;set&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// modifying the value &lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;capitalName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="c1"&gt;// setting the value to target&lt;/span&gt;
    &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;capitalName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// update name&lt;/span&gt;

&lt;span class="nx"&gt;proxy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;morty&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="c1"&gt;// Log is MORTY instead of morty&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;character&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// MORTY&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#get-trap"&gt;
  &lt;/a&gt;
  üå¥ [[GET]] Trap
&lt;/h3&gt;

&lt;p&gt;Same as &lt;code&gt;[[SET]]&lt;/code&gt; trap we can set the &lt;code&gt;[[GET]]&lt;/code&gt; trap. Suppose when we access a property we want to print the log &lt;code&gt;Getting &amp;lt;property_name&amp;gt;&lt;/code&gt;. We can achieve that by using &lt;code&gt;[[GET]]&lt;/code&gt; trap like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;character&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Rick&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;planet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Earth&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;proxy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Proxy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;character&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="cm"&gt;/**
* [[GET]] trap
* target: original object 
*         that has been wrapped
* property: Property name 
*/&lt;/span&gt;

  &lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// printing the log before setting value&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Getting: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; `&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;characterName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;proxy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;characterName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 

&lt;span class="c1"&gt;// Getting: name  &lt;/span&gt;
&lt;span class="c1"&gt;// Rick &lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#reflect"&gt;
  &lt;/a&gt;
  üå≥ Reflect
&lt;/h2&gt;

&lt;p&gt;Before I jump to &lt;code&gt;Proxy&lt;/code&gt; solution of the problem. There is also a sister object of &lt;code&gt;Proxy&lt;/code&gt;, which is known as &lt;code&gt;Reflect&lt;/code&gt;. As per &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect"&gt;MDN docs&lt;/a&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Reflect is a built-in object that provides methods for interceptable JavaScript operations. The methods are the same as those of proxy handlers. Reflect is not a function object, so it's not constructible.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Point to note here is &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It has methods same as Proxy &lt;/li&gt;
&lt;li&gt;It is not a function&lt;/li&gt;
&lt;li&gt;It is not constructible i.e you &lt;code&gt;cannot&lt;/code&gt; use it like &lt;code&gt;new Reflect&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All the methods on Reflect are &lt;code&gt;static&lt;/code&gt; so you can directly call them like &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reflect.get(...)&lt;/li&gt;
&lt;li&gt;Reflect.set(...)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#relationship-between-reflect-and-proxy"&gt;
  &lt;/a&gt;
  üå¥ Relationship between Reflect and Proxy:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;All the methods that you can define on the &lt;code&gt;Proxy&lt;/code&gt;, &lt;code&gt;Reflect&lt;/code&gt; has a &lt;code&gt;same method&lt;/code&gt; with &lt;code&gt;same argument&lt;/code&gt;. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reflect can invoke the &lt;code&gt;Internal Method&lt;/code&gt; by using the methods defined on it. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Proxy method&lt;/th&gt;
&lt;th&gt;Reflect call&lt;/th&gt;
&lt;th&gt;Internal method&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;get(target, property, receiver)&lt;/td&gt;
&lt;td&gt;Reflect.get(target, property, receiver)&lt;/td&gt;
&lt;td&gt;[[Get]]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;set(target, property, value, receiver)&lt;/td&gt;
&lt;td&gt;Reflect.set(target, property, value, receiver)&lt;/td&gt;
&lt;td&gt;[[Set]]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;delete(target, property)&lt;/td&gt;
&lt;td&gt;Reflect.deleteProperty(target, property))&lt;/td&gt;
&lt;td&gt;[[Delete]]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;You can check other methods of Reflect on &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect#static_methods"&gt;MDN Reflect Docs&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-do-we-need-reflect-for"&gt;
  &lt;/a&gt;
  üå¥ What do we need Reflect for
&lt;/h3&gt;

&lt;p&gt;We know there are a lot of &lt;code&gt;Invariants&lt;/code&gt; that we need to deal with when we trap some operation in Proxy and forward it to the original wrapped object. Remembering every rule can be hard. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We can simply use &lt;code&gt;Reflect&lt;/code&gt; to forward any operation on original object and it will take care of all the Invariants&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So now our &lt;code&gt;[[SET]]&lt;/code&gt; and &lt;code&gt;[[GET]]&lt;/code&gt; trap will change like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;character&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Rick&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;planet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Earth&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;proxy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Proxy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;character&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;set&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;receiver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;capitalName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Reflect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;capitalName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;receiver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;

  &lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;receiver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Getting: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; `&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Reflect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;receiver&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#solution-to-original-problem"&gt;
  &lt;/a&gt;
  üå≥ Solution to original Problem:
&lt;/h2&gt;

&lt;p&gt;With &lt;code&gt;Proxy&lt;/code&gt; and &lt;code&gt;Reflect&lt;/code&gt; now we can build our solution like this: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ICHUewJ---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ki3frtx4natt6zu3a32.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ICHUewJ---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ki3frtx4natt6zu3a32.gif" alt="finally" width="220" height="303"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;proxyObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Proxy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;set&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;receiver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`SETTING &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; = &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Reflect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;receiver&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;receiver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`GETTING value for  [&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;]`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Reflect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;receiver&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;


&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;character&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;morty&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;planet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;earth&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;character&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;proxyObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;character&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;



&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;character&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// GETTING value for  [name] &lt;/span&gt;
&lt;span class="c1"&gt;// morty &lt;/span&gt;
&lt;span class="nx"&gt;character&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;planet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Mars&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// SETTING planet = Mars &lt;/span&gt;


&lt;span class="cm"&gt;/**
* ES5 solution does not work if we set new properties
* ES6 Proxy will work for new properties as well and 
* print our log
*/&lt;/span&gt;

&lt;span class="nx"&gt;charter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;grandParent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Rick&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// SETTING grandParent = Rick &lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#browser-support-for-proxy"&gt;
  &lt;/a&gt;
  üçÉ Browser Support for Proxy
&lt;/h2&gt;

&lt;p&gt;As you can see most of latest browsers already support &lt;code&gt;Proxy&lt;/code&gt; except IE, Baidu and Opera. So if you do not care about these three, you can use it like a breeze. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---KJI_S0L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/awzwsc50718pczyiv1q9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---KJI_S0L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/awzwsc50718pczyiv1q9.png" alt="Proxy browser support" width="880" height="198"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#practical-usage"&gt;
  &lt;/a&gt;
  ü¶æ Practical Usage
&lt;/h2&gt;

&lt;p&gt;You might be thinking, hmmmmm... this ok but what is the practical usage of this. During my research for this article I came across an example of a JavaScript framework that is utilising the powers of Proxy and that frameworkkkkkk isssss....&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://v3.vuejs.org/"&gt;Vue 3&lt;/a&gt; : &lt;code&gt;Vue 3&lt;/code&gt; uses Proxy to be reactive and yes you got it right, &lt;code&gt;Vue 3&lt;/code&gt; does not support IE üòù. Vue 3 uses &lt;code&gt;Proxy&lt;/code&gt; for change detection and firing side effects. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are not tired after reading my blog I will highly recommend you watch this &lt;a href="https://www.vuemastery.com/courses/vue-3-reactivity/vue3-reactivity"&gt;free video&lt;/a&gt; to see &lt;strong&gt;full potential&lt;/strong&gt; of &lt;code&gt;Proxy&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can play with my solution here&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/javascript-proxy-fork-wocuf"&gt;
&lt;/iframe&gt;
&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#what-to-read-next"&gt;
  &lt;/a&gt;
  üå≥ What to read next
&lt;/h2&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/xenoxdev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OSZxqWeB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--mzanQ_AW--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/394/1fb4ce27-fef4-4628-b261-f4c3d9423bbe.png" alt="XenoX" width="150" height="150"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wm_65veT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--mcpvb5VC--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/703887/1be62957-866d-47e6-8e7d-22401cf8966c.jpeg" alt="" width="150" height="150"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/xenoxdev/curious-case-of-sparse-array-in-js-38h7" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;JavaScript Jungle: Curious case of sparse array in JS&lt;/h2&gt;
      &lt;h3&gt;Vikas yadav for XenoX „Éª Sep 19 „Éª 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#development&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;




&lt;div class="ltag__link"&gt;
  &lt;a href="/xenoxdev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OSZxqWeB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--mzanQ_AW--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/394/1fb4ce27-fef4-4628-b261-f4c3d9423bbe.png" alt="XenoX" width="150" height="150"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wm_65veT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--mcpvb5VC--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/703887/1be62957-866d-47e6-8e7d-22401cf8966c.jpeg" alt="" width="150" height="150"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/xenoxdev/javascript-jungle-convert-any-object-to-iterable-40l6" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;JavaScript Jungle: Convert any object to Iterable&lt;/h2&gt;
      &lt;h3&gt;Vikas yadav for XenoX „Éª Oct 4 „Éª 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Thank you for reading. &lt;/p&gt;

&lt;p&gt;Follow me on &lt;a href="https://twitter.com/VikasYadav_Dev"&gt;twitter&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  üññüèº References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tc39.es/ecma262/#table-proxy-handler-methods"&gt;T39 Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy"&gt;MDN Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://indepth.dev/posts/1361/getting-started-with-modern-javascript-proxy"&gt;Getting Started with Modern JavaScript‚Ää‚Äî‚ÄäProxy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://humanwhocodes.com/blog/2014/04/29/creating-type-safe-properties-with-ecmascript-6-proxies/"&gt;Human who codes article&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://v3.vuejs.org/guide/reactivity.html#what-is-reactivity"&gt;Vue3 Reactivity docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>SCSS, a more advanced and powerful weapon for page styling </title>
      <author>sankha</author>
      <pubDate>Fri, 29 Oct 2021 12:13:29 +0000</pubDate>
      <link>https://dev.to/jsankha/scss-a-more-advance-and-powerful-weapon-for-page-styling-ajb</link>
      <guid>https://dev.to/jsankha/scss-a-more-advance-and-powerful-weapon-for-page-styling-ajb</guid>
      <description>&lt;p&gt;
    For styling a web page, a web designer‚Äôs first and the most preferred choice is CSS (Cascading Style Sheet), along with that we often encounter with another kind of style sheet rules, an advanced and evolved version of vanilla CSS, SASS also is known as the SCSS (Syntactically Awesome Style Sheets). Both CSS and SCSS are a type of scripting language that we use to style a web page to make it aesthetically more enhanced.  Widely used in combination with JavaScript, jQuery and HTML, CSS and SCSS are now most powerful component for the web.  
    &lt;br&gt;&lt;br&gt;

One of the most major differences between SCSS and CSS is SCSS is a pre-processor language, whichthat means we need an interpreter or compiler to convert the advanced SCSS tag to simple browser readable CSS rules. Through the pre-processor, SCSS syntax are getting parsed inI the server and returned to the browser as normal CSS format. As SCSS is a more powerful and advanced form of CSS it‚Äôs a bit more complex than normal CSS where we can just play around with pseudo- class and ID, but in SCSS we have few programming languages like features such as declaring variables, functions, operators, parameter passing, import and &lt;a class="mentioned-user" href="https://dev.to/include"&gt;@include&lt;/a&gt;
 directives.  We can also do simple mathematical calculations like calculatingto calculate a padding or margin based on a given parameter.  It is worth mentioning here that we can also write simple CSS style rules in the .scss file (.scss is the file extension of a .SCSS language. 


    &lt;br&gt;

    &lt;b&gt;Mixin&lt;/b&gt; is another strong feature that makes a big difference between SCSS and vanilla CSS. Mixin is a group of CSS declarations that we import with @import directive and reuse throughout the style sheet.  For declaring a Mixin in SCSS we have to create a mixin like this
&lt;/p&gt;

&lt;pre&gt;
  
@mixin  mixinName {
    /* CSS Codes */
}
  
&lt;/pre&gt;

&lt;p&gt;For example&lt;/p&gt;

&lt;pre&gt;
  
@mixin button {
    padding:0.50rem 2.5rem;
    font-size:$font14p;
    border:none;
    box-shadow: none;   
    font-family: $siteFont;
} 
  
&lt;/pre&gt;

&lt;p&gt;Here we have a &lt;b&gt;mixin&lt;/b&gt; called button, and now we can to call this button mixin within any other class selector with the &lt;b&gt;&lt;a class="mentioned-user" href="https://dev.to/include"&gt;@include&lt;/a&gt;
&lt;/b&gt; directive. The CSS rules specified within the button Mixin now are a part of btnCommon class.&lt;/p&gt;

&lt;pre&gt;
 .btnCommon {
    &lt;a class="mentioned-user" href="https://dev.to/include"&gt;@include&lt;/a&gt;
 btnprimary;
} 
  
&lt;/pre&gt;

&lt;p&gt;
    &lt;b&gt;Nesting&lt;/b&gt; is also another important feature of SASS / SCSS. SASS,which allows us to write SCSS code in a nested hierarchy, just like HTML, XML.  It means we can place or wrap the child selector code inside of parent selector and it gives us a spiral kind of chain effect, here how it is works
&lt;/p&gt;

&lt;pre&gt;
  
        body {
            padding:0px;
            margin:0px;
            font-family: $siteFont;
            background: $secondaryBgColor;
        
            header {
                background: $header-bg-color;
                padding: 1rem;
                width: 700px;
                margin:0 auto;
        
                .header-top {
                    position: fixed;
                    width: 100%;
                    left:0;
                    right: 0;
                    top:0;
                    padding: 0.5rem 1.25rem;
                }
            }
  
&lt;/pre&gt;

&lt;p&gt;
  .header-top class is nested inside the header selector and header selector is nested within the body tag. As the body object is the parent DOM element so this nested hierarchy must be present inside the &lt;/p&gt; element of HTML code structure.



&lt;pre&gt;
&amp;lt;body&amp;gt;

&amp;lt;header&amp;gt;
    &amp;lt;div class="header-top"&amp;gt;
            &amp;lt;p&amp;gt;This is header&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
    
&amp;lt;/header&amp;gt;

&amp;lt;/body&amp;gt;
     
&lt;/pre&gt;

&lt;p&gt;

 &lt;b&gt;Declaring a SCSS variable&lt;/b&gt;&lt;br&gt;&lt;br&gt;
Consider we are using two main colors throughout the web site to match the branding perspective of a company. Now, If we need to change those colors at some point, we‚Äôll need to change it in all those places in all the .css (.css is the file extension of CSS language) file where we call the color value, but if we define color values as a variable in a single place then we can call the variable throughout our stylesheet and multiple CSS file too. If we need to change the color value later, we just change the color value of the variable and it will reflect that change throughout the entire stylesheet.
&lt;/p&gt;

&lt;p&gt;Syntax&lt;/p&gt;

&lt;pre&gt;
   $variable_name: value;
  
&lt;/pre&gt;

&lt;p&gt;example&lt;/p&gt;

&lt;pre&gt;
$primaryColor:#000
&lt;/pre&gt;

&lt;p&gt;
    In the above example we have declared a variable called &lt;b&gt;‚Äú$primaryColor‚Äù&lt;/b&gt; whose value is the color black. Now if we call this variable into the &amp;lt;body&amp;gt; tag, then the default font color will be black for the entire site. Just refer the name of the variable wherever we need to implement the style.
&lt;/p&gt;

&lt;p&gt;example&lt;/p&gt;

&lt;pre&gt;
  
        body {
            color: $primaryColor;
            }    
        
  
&lt;/pre&gt;

&lt;p&gt;
&lt;b&gt;SASS/SCSS function&lt;/b&gt; &lt;br&gt;&lt;br&gt;
Functions are blocks of code that accomplish a specific goal. Like other programming language SCSS functions also have some specific tasks to perform.
&lt;/p&gt;

&lt;p&gt;Syntax&lt;/p&gt;

&lt;pre&gt;
  
        @function DoSqrRoot($int) {
            @return $int * $int;
        } 
  
&lt;/pre&gt;

&lt;p&gt;Example&lt;/p&gt;

&lt;pre&gt;
  
        body {
            font-size: DoSqrRoot(4);
        }
  
&lt;/pre&gt;

&lt;p&gt;This will return font-size as &lt;b&gt;16px&lt;/b&gt; in the body tag.
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;SASS import&lt;/b&gt;&lt;br&gt;&lt;br&gt;
To import a .scss file into another .scss file we use @import directive. This is basically calling an external file within another file; say we are importing two .scss files ‚Äòvariables‚Äô and ‚Äòmixin‚Äô into a common.scss file. 

&lt;/p&gt;

&lt;pre&gt;
  
        @import 'variable.scss';
        @import 'mixin.scss'; 
        
  
&lt;/pre&gt;



&lt;p&gt;Normally we cannot parse SCSS from our pc, like we can write and test HTML, CSS from the browser, but If we have node.js installed we can convert SCSS to CSS with following command from the Command Prompt(CMD)&lt;/p&gt;

&lt;pre&gt;
  
        sass --watch scss:css
  
&lt;/pre&gt;

&lt;p&gt;once sass is running it will show you a message like this &lt;/p&gt;

&lt;pre&gt;
  
        sass is watching for changes. Press Ctrl+C to stop
  
&lt;/pre&gt;

&lt;p&gt;Please remember you should run this command inside a folder where both SCSS and CSS folders are present, otherwise the command will fail. We can also parse a single file from a folder with following command
&lt;/p&gt;

&lt;pre&gt;
  
        sass --watch common.scss common.css
  
&lt;/pre&gt;

&lt;p&gt;a &lt;b&gt;.map&lt;/b&gt; file will be created inside the css folder which done the mapping job between two files i.e. SCSS and CSS&lt;/p&gt;

&lt;p&gt;
    Moreover, SASS is very vast and interesting, more you dig into the subject more you find out its beauty and charm. With the help of variables, nesting, mixin and other features, we can create a clean,easy maintainable code that provides a better result than CSS. The reusability of SCSS helps us get rid of writing the same piece of code again and again.
&lt;/p&gt;

</description>
      <category>css</category>
      <category>scss</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Facebook's Virtual Reality Future: The Metaverse</title>
      <author>Rohit</author>
      <pubDate>Fri, 29 Oct 2021 12:03:53 +0000</pubDate>
      <link>https://dev.to/rohitcodes/facebooks-virtual-reality-future-the-metaverse-l6h</link>
      <guid>https://dev.to/rohitcodes/facebooks-virtual-reality-future-the-metaverse-l6h</guid>
      <description>&lt;p&gt;Today Mark zuckerberg introduced metaverse at facebookConnect2021&lt;/p&gt;

&lt;p&gt;Section 1: What is metaverse?&lt;/p&gt;

&lt;p&gt;In the concept of Metaverse, virtual reality and augmented reality converge and merge, creating an immersive world that's fun and explorable.&lt;/p&gt;

&lt;p&gt;But first, what is Metaverse?&lt;/p&gt;

&lt;p&gt;Metaverse is an online space that emulates a real world. People use it to make virtual avatars, interact with each other, and find entertainment. People create Metaverse by opening portals and expanding existing virtual spaces using the technology of the future, and its social network, facebook.com.&lt;/p&gt;

&lt;p&gt;Note that this article is part of The Facebook 10, a series of articles looking at key players in Facebook‚Äôs 10 year road map. This is the first of two articles on Facebook‚Äôs Virtual Reality future. You can find the second here.&lt;/p&gt;

&lt;p&gt;Here‚Äôs a hint: you don‚Äôt need a VR headset to participate.&lt;/p&gt;

&lt;p&gt;What does the future hold for facebook's virtual reality?&lt;/p&gt;

&lt;p&gt;Mark Zuckerberg had just three words to describe the state of virtual reality today in his closing remarks at Connect2021:&lt;/p&gt;

&lt;p&gt;Space exploration:&lt;/p&gt;

&lt;p&gt;Ariel asks:&lt;/p&gt;

&lt;p&gt;Space exploration&lt;/p&gt;

&lt;p&gt;Mark has put a lot of emphasis on VR as being the future of virtual reality. The community was excited to get a glimpse of how much progress was being made, and it has been so excited that we have been asked to discuss it in detail on the final day of the Connect conference.&lt;/p&gt;

&lt;p&gt;It may seem contradictory for our community to ask us to talk about the future of something that isn't here, but hear me out.&lt;/p&gt;

&lt;p&gt;Mark Zuckerberg is betting the social network on virtual reality (VR). It's Facebook's best bet for the future of social interaction. VR will forever change the way we interact.&lt;/p&gt;

&lt;p&gt;How does technology shape our world?&lt;/p&gt;

&lt;p&gt;Will we get to live in virtual worlds like we lived in the gaming world? How do we feel about that?&lt;/p&gt;

&lt;p&gt;Come and listen to panellists talk about what virtual worlds really are and what it means to be part of such a world.&lt;/p&gt;

&lt;p&gt;Since virtual reality is the hot technology at the moment, everyone is talking about it. One of the most prominent examples is Facebook's Facebook's Oculus team recently opening up the Oculus store, allowing users to create a VR experience.&lt;/p&gt;

&lt;p&gt;Why should you listen to this video?&lt;/p&gt;

&lt;p&gt;If you're serious about developing for virtual worlds like Minecraft, this video is for you. Panellists will talk about the evolving nature of virtual worlds, hardware and app development.&lt;/p&gt;

&lt;p&gt;The future of interconnectivity&lt;/p&gt;

&lt;p&gt;In 2014 Mark Zuckerberg put together a manifesto outlining the future of connectivity which was a game changer.&lt;/p&gt;

&lt;p&gt;Last year he announced Facebook's aim to connect everyone on the planet and introduced an initiative called "Connectivity for the rest of the world".&lt;/p&gt;

&lt;p&gt;In its effort to achieve this goal Facebook will be using the above infrastructure which includes the use of solar panels and wind turbines. This will be a tough challenge as the post-oil world in the 1950's is already well and truly over. In fact in some places the distance between people is closer than ever and we don't even need technology.&lt;/p&gt;

&lt;p&gt;About 800 million people have no internet connection at all, while millions more are restricted to mobile connections which are typically slow and expensive.&lt;/p&gt;

&lt;p&gt;Conclusion&lt;/p&gt;

&lt;p&gt;Facebook believes that user experience is a gateway to communication, media consumption and learning. What could we learn from their vision for future Facebook? We learn that they believe that virtual reality will replace television, game consoles and Facebook as we know it. I do not think the future of Facebook will be in a different way than the future of television was in our grandparents time. What we have to do as designers is to keep the user experience unchanged and work on the interactions to improve user experience and keep them engaged for longer.&lt;/p&gt;

</description>
      <category>ai</category>
      <category>machinelearning</category>
      <category>facebookmetaverse</category>
      <category>programming</category>
    </item>
    <item>
      <title>Contact Form with Emailjs - Plain JavaScript</title>
      <author>NJOKU SAMSON EBERE</author>
      <pubDate>Fri, 29 Oct 2021 12:01:48 +0000</pubDate>
      <link>https://dev.to/ebereplenty/contact-form-with-emailjs-plain-javascript-365l</link>
      <guid>https://dev.to/ebereplenty/contact-form-with-emailjs-plain-javascript-365l</guid>
      <description>&lt;p&gt;Contact forms are essential part of every website especially portfolio websites. This is how one gets contacted. &lt;/p&gt;

&lt;p&gt;However, we have many portfolios flying around without a contact form or at least, a working contact form. The reason is usually that the frontend person do not know how to create the backend functionality of the contact form. That is understandable. This is part of the reasons &lt;a href="https://www.emailjs.com/"&gt;Emailjs&lt;/a&gt; was created. &lt;strong&gt;It is also free.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.emailjs.com/"&gt;Emailjs&lt;/a&gt; is a free tool that allows you to Send Email Directly From frontend with No server code. You can send and receive up to 200 emails using the free package. This is reasonable if you ask me. You can also &lt;a href="https://www.emailjs.com/pricing/"&gt;upgrade with just a little token&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this tutorial, I will walk you through building a contact form that sends email directly to your email address. We will build it in plain JavaScript. We will also look at React in the next tutorial. Let's get to it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/CjmvTCZf2U3p09Cn0h/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/CjmvTCZf2U3p09Cn0h/giphy.gif" alt="Let's Get Started" width="480" height="452"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-and-setup-a-free-account"&gt;
  &lt;/a&gt;
  Create and Setup a free Account
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Go to the &lt;a href="https://dashboard.emailjs.com/sign-up"&gt;signup page&lt;/a&gt; and create an account.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;You should now be in your dashboard like so:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fvtdWmUK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qrhfz8m9pbx77szqi8hc.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fvtdWmUK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qrhfz8m9pbx77szqi8hc.JPG" alt="emailjs dashboard" width="880" height="537"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#add-a-new-email-service"&gt;
  &lt;/a&gt;
  Add a new Email Service
&lt;/h3&gt;

&lt;p&gt;Email Service could be &lt;strong&gt;Personal&lt;/strong&gt; or &lt;strong&gt;Transactional&lt;/strong&gt;. You can read more on that &lt;a href="https://www.emailjs.com/docs/tutorial/adding-email-service/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Since we just need to receive personal emails sent to us via our website, we will stick to the &lt;strong&gt;Personal&lt;/strong&gt; Email Service.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;On the side menu, click on &lt;strong&gt;Email Services&lt;/strong&gt;:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--64_CpBTO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8t5nh4k9ybz7lts6n5iu.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--64_CpBTO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8t5nh4k9ybz7lts6n5iu.JPG" alt="Email Services" width="880" height="537"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click on &lt;strong&gt;Add Email Service&lt;/strong&gt;:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B6MkVzwt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q4keqe8pb4eocv2j7g0u.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B6MkVzwt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q4keqe8pb4eocv2j7g0u.JPG" alt="Add Email Service" width="880" height="537"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select &lt;strong&gt;Gmail&lt;/strong&gt; from the dialogue box:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J3csaspI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ukp1vgjvzhhu0y3qfyz.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J3csaspI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ukp1vgjvzhhu0y3qfyz.JPG" alt="Gmail" width="754" height="649"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can now see your &lt;strong&gt;Service ID&lt;/strong&gt; in the screen that follows&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click on &lt;strong&gt;Connect Account&lt;/strong&gt; just below the &lt;strong&gt;Service ID&lt;/strong&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FtdK3NAt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8bl5clrmjflyek2xqcmv.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FtdK3NAt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8bl5clrmjflyek2xqcmv.JPG" alt="Connect Account" width="607" height="530"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Do not uncheck &lt;em&gt;Send test email to verify configuration&lt;/em&gt; if you want to receive a test email confirming your connection&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You should now have the gmail authorization screen. Please select the email you want to use&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JNrFG6ka--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ihhr431cuqbljfj29bcz.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JNrFG6ka--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ihhr431cuqbljfj29bcz.JPG" alt="gmail authorization screen" width="605" height="664"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Check all boxes and &lt;strong&gt;Continue&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WmXReu_Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cwjf4zgqwcm178jy5wdk.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WmXReu_Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cwjf4zgqwcm178jy5wdk.JPG" alt="Check all boxes" width="602" height="725"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When the connection is successful, you should now be back to this screen with a confirmation message: &lt;em&gt;Connected as &lt;/em&gt; like the screen below&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VJyNUuFW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iqh59dn1zovoibzv1oj5.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VJyNUuFW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iqh59dn1zovoibzv1oj5.JPG" alt="connection is successful with confirmation message" width="604" height="580"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You can always come back here to disconnect&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I also got an email to confirm my connection to Emailjs:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XFBiJPyH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xjxa3ruy17fmyydhlp8t.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XFBiJPyH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xjxa3ruy17fmyydhlp8t.JPG" alt="email to confirm my connection to Emailjs" width="741" height="526"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Finally, click on &lt;strong&gt;Create Service&lt;/strong&gt; to complete Email Service creation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6GaWxyDt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/411qufwa4by9ys3xwb2h.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6GaWxyDt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/411qufwa4by9ys3xwb2h.JPG" alt="Create Service Button" width="605" height="580"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You should now have a new service added like so:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZA_kB8pL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/191kcqdlrd254twq03hd.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZA_kB8pL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/191kcqdlrd254twq03hd.JPG" alt="a new service added" width="696" height="359"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Nice one!!! Do keep the Service ID because you will be needing it shortly.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#create-your-email-template"&gt;
  &lt;/a&gt;
  Create Your Email Template
&lt;/h3&gt;

&lt;p&gt;The Email Templates is used to design how we want the emails sent to us will look. So to do that, go to the side menu in the dashboard and click the &lt;strong&gt;Email Templates&lt;/strong&gt; link&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bKxB_bhN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mmk94hczxykdkbui3ptg.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bKxB_bhN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mmk94hczxykdkbui3ptg.JPG" alt="Email Templates Link" width="880" height="579"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Click on &lt;strong&gt;Create New Template&lt;/strong&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vEhxjDXG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g0rs3ycb2cuxegvk5nlz.JPG" alt="Create New Template" width="880" height="579"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You will now have the template screen like so:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V3yXpHH2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/73ypzik9xvmx4b9thgng.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V3yXpHH2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/73ypzik9xvmx4b9thgng.JPG" alt="template screen" width="880" height="518"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You will notice that the screen looks just like you are about to create a new email.&lt;/p&gt;

&lt;p&gt;For every field, you can fill in a default text you will like to get. However, any text in side double curly braces, becomes a variable. For example, in the email body, &lt;code&gt;{{message}}&lt;/code&gt; is a variable. When you create a form, the input box with the name: &lt;em&gt;message&lt;/em&gt;, is to collect the text that will be rendered in the email body where &lt;code&gt;{{message}}&lt;/code&gt; is situated.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I hope that makes sense. You will understand more as we proceed anyways.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Let's now change the email content a little. For the &lt;strong&gt;subject&lt;/strong&gt; field, just enter &lt;code&gt;{{subject}}&lt;/code&gt; and for the &lt;strong&gt;email body&lt;/strong&gt;, enter the following:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;

&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;My screen now looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BgDNlhrz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/832u6rsds39jn05c3ze8.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BgDNlhrz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/832u6rsds39jn05c3ze8.JPG" alt="email content" width="880" height="584"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on &lt;strong&gt;Save&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t2iy7S3g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mvhki2vhm0xtdb3gwyyg.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t2iy7S3g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mvhki2vhm0xtdb3gwyyg.JPG" alt="Click on Save" width="880" height="516"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You may choose to test it by clicking the &lt;strong&gt;Test It&lt;/strong&gt; Button next to the &lt;strong&gt;Save&lt;/strong&gt; Button. It's pretty straight forward.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This time for us to build our JavaScript application has now arrived.&lt;br&gt;
&lt;a href="https://i.giphy.com/media/8Yam7VjgXfG77Pkebq/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/8Yam7VjgXfG77Pkebq/giphy.gif" alt="Moving On To The Next" width="480" height="480"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  JavaScript
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#starter-project"&gt;
  &lt;/a&gt;
  Starter Project
&lt;/h3&gt;

&lt;p&gt;Get the starter code &lt;a href="https://github.com/EBEREGIT/js-emailjs/tree/starter-code"&gt;here&lt;/a&gt; or just create a project with a file: &lt;em&gt;index.html&lt;/em&gt; and add the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;
&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="c"&gt;&amp;lt;!-- bootstrap CSS --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt;
      &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;
      &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css"&lt;/span&gt;
      &lt;span class="na"&gt;integrity=&lt;/span&gt;&lt;span class="s"&gt;"sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2"&lt;/span&gt;
      &lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;"anonymous"&lt;/span&gt;
    &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;JavaScript Emailjs&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"row"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"col align-self-center"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-center"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Email - JavaScript Contact Form&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
          &lt;span class="c"&gt;&amp;lt;!-- contact form --&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"myForm"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="c"&gt;&amp;lt;!-- name --&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-group"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Name&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt;
                &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;
                &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;
                &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-control"&lt;/span&gt;
                &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;
                &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"enter your name"&lt;/span&gt;
              &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

            &lt;span class="c"&gt;&amp;lt;!-- email --&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-group"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Email address&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt;
                &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt;
                &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt;
                &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-control"&lt;/span&gt;
                &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt;
                &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"enter your email"&lt;/span&gt;
              &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

            &lt;span class="c"&gt;&amp;lt;!-- subject --&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-group"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"subject"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Subject&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt;
                &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;
                &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"subject"&lt;/span&gt;
                &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-control"&lt;/span&gt;
                &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"subject"&lt;/span&gt;
                &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"enter email subject"&lt;/span&gt;
              &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-group"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"message"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Message&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;textarea&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-control"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"message"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"message"&lt;/span&gt; &lt;span class="na"&gt;rows=&lt;/span&gt;&lt;span class="s"&gt;"5"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/textarea&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

            &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-primary"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Submit&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class="c"&gt;&amp;lt;!-- bootstrap js --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script
      &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://code.jquery.com/jquery-3.5.1.slim.min.js"&lt;/span&gt;
      &lt;span class="na"&gt;integrity=&lt;/span&gt;&lt;span class="s"&gt;"sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj"&lt;/span&gt;
      &lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;"anonymous"&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script
      &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.bundle.min.js"&lt;/span&gt;
      &lt;span class="na"&gt;integrity=&lt;/span&gt;&lt;span class="s"&gt;"sha384-ho+j7jyWK8fNQe+A12Hb8AhRq26LrZ/JpcUGGOn+Y7RsweNrtN/tE3MoK7ZeZDyx"&lt;/span&gt;
      &lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;"anonymous"&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After setting it up in your local machine, you should have the following screen:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XHfRHurI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1p2bjy53253y11ln8nym.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XHfRHurI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1p2bjy53253y11ln8nym.JPG" alt="Starter Project Screen" width="758" height="645"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In the code, the &lt;strong&gt;Message&lt;/strong&gt; field name is &lt;code&gt;message&lt;/code&gt;. That was initially omitted &lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Install EmailJs by adding the following script at the bottom
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;
      &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text/javascript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://cdn.jsdelivr.net/npm/emailjs-com@3/dist/email.min.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text/javascript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;emailjs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;YOUR_USER_ID&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;})();&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;*&lt;em&gt;Do not forget to put &lt;code&gt;YOUR_USER_ID&lt;/code&gt; to your own user id *&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To get your USER_ID, go to your dashboard and click on the &lt;strong&gt;Integrations&lt;/strong&gt; link on the side menu. You should be on a page like this:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B5jDSao1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1rbbfhxp5gbeiefh0q1w.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B5jDSao1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1rbbfhxp5gbeiefh0q1w.JPG" alt="Image description" width="880" height="543"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your USER_ID is down below under the &lt;strong&gt;API Keys&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now, back to our code, start another script below with the following code inside:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;emailjs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;YOUR_SERVICE_ID&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;YOUR_TEMPLATE_ID&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#myForm&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The line of code you see is all you need to send messages from your form to your email address through EmailJS. You will need to change "YOUR_SERVICE_ID" and "YOUR_TEMPLATE_ID" to your actual values. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To get YOUR_SERVICE_ID, click on the Email Services link in your dashboard's side menu&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q73euTMi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fn0w746c5fmsdokjabr7.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q73euTMi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fn0w746c5fmsdokjabr7.JPG" alt="YOUR_SERVICE_ID" width="696" height="359"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To get YOUR_TEMPLATE_ID, click on the Email Templates link in your dashboard's side menu and go to the settings tab like so:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BxftVbqm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dw3cr4xy0gwdbl9h5fsr.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BxftVbqm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dw3cr4xy0gwdbl9h5fsr.JPG" alt="YOUR_TEMPLATE_ID" width="880" height="582"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Add an &lt;code&gt;id&lt;/code&gt; to the &lt;code&gt;form&lt;/code&gt; with the name: &lt;strong&gt;myForm&lt;/strong&gt; tag like so &lt;code&gt;&amp;lt;form id="myForm"&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;All good!!!&lt;/p&gt;

&lt;p&gt;Now when you click on the &lt;strong&gt;Submit&lt;/strong&gt; button of your form, it works! But we will just get an empty email and we do not know if it actually worked or not from our website.&lt;/p&gt;

&lt;p&gt;To do that we will need to add a &lt;code&gt;then...catch...&lt;/code&gt; block. So instead of&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;emailjs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;YOUR_SERVICE_ID&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;YOUR_TEMPLATE_ID&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#myForm&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;we will have this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="c1"&gt;// listen to the form submission&lt;/span&gt;
      &lt;span class="nb"&gt;document&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;myForm&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;serviceID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;service_b4qmiqc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;templateID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;template_fv38whr&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

          &lt;span class="c1"&gt;// send the email here&lt;/span&gt;
          &lt;span class="nx"&gt;emailjs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;serviceID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;templateID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;SUCCESS!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
              &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;SUCCESS!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;FAILED...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
              &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;FAILED...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the code above, we just listen to when the form is submited and call the &lt;code&gt;emailjs.sendForm()&lt;/code&gt; function. We now get a feedback message in our console and an alert feedback too.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It been a lot of work, let's test our hard work.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#testing"&gt;
  &lt;/a&gt;
  Testing
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#emailjs-in-action-gif"&gt;
  &lt;/a&gt;
  EmailJs In Action (GIF)
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XFP8YrI0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2kpt0wp64576d13e1vyj.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XFP8YrI0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2kpt0wp64576d13e1vyj.gif" alt="EmailJs In Action" width="600" height="254"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#emailjs-in-action-jpeg"&gt;
  &lt;/a&gt;
  EmailJs In Action (JPEG)
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EuCQY1Nw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sygcj06upqiknt7bmvvz.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EuCQY1Nw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sygcj06upqiknt7bmvvz.JPG" alt="Image description" width="880" height="398"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#email-received"&gt;
  &lt;/a&gt;
  Email Received
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y-CUdNSZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3lzhdtjmv4pzjdmpqsdp.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y-CUdNSZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3lzhdtjmv4pzjdmpqsdp.JPG" alt="Email Received" width="880" height="629"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;YAAAhhhh, It works!!!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/zBhZiVNNQjfTG/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/zBhZiVNNQjfTG/giphy.gif" alt="Victory" width="425" height="239"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Congratulations on your reaching this feet!!!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The purpose of this tutorial was to introduce EmailJs to you especially if you are a frontend developer with no backend knowledge in handling emails, you are looking for an easier way to be contactable via your website or you are just starting out in web development.&lt;/p&gt;

&lt;p&gt;So we looked at a general overview of EmailJS, how to setup an account, create Email Services and templetes. Finally, we saw how to integrate it into your code if it is written on plain JavaScript. In the end, it was successful. I hope you had fun!&lt;/p&gt;

&lt;p&gt;All Code Are &lt;a href="https://github.com/EBEREGIT/js-emailjs"&gt;Here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, I will be showing those who use &lt;strong&gt;React&lt;/strong&gt; how this can be implemented. Until then, feel free to keep in touch.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>email</category>
      <category>contact</category>
    </item>
    <item>
      <title>Day 21 of 100 Days of Code &amp; Scrum: Grinding for XP, Scrum, and Next.js (Free E-Book)</title>
      <author>Rammina</author>
      <pubDate>Fri, 29 Oct 2021 12:01:18 +0000</pubDate>
      <link>https://dev.to/rammina/day-21-of-100-days-of-code-scrum-grinding-for-xp-scrum-and-nextjs-free-e-book-3fpo</link>
      <guid>https://dev.to/rammina/day-21-of-100-days-of-code-scrum-grinding-for-xp-scrum-and-nextjs-free-e-book-3fpo</guid>
      <description>&lt;p&gt;Happy Friday, everyone!&lt;/p&gt;

&lt;p&gt;Today was a grind, but I learned a lot. Firstly, I read &lt;a href="https://www.infoq.com/minibooks/scrum-xp-from-the-trenches-2/"&gt;Scrum and XP from the Trenches&lt;/a&gt; for an hour or so. After that, I worked out because sitting down and staring at the screen for too long can be draining. I spent the rest of the day learning and reviewing Next.js.&lt;/p&gt;

&lt;p&gt;An interesting fact I didn't know before was that Next.js implements lazy loading for images, so images are loaded only as you scroll down to them. This is very efficient for websites!&lt;/p&gt;

&lt;p&gt;Anyway, moving on to my daily report!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#yesterday"&gt;
  &lt;/a&gt;
  Yesterday
&lt;/h2&gt;

&lt;p&gt;I found a really fun resource for Scrum, which was a Scrum Comic. Also, I learned about misconceptions revolving around the Product Owner role and how large businesses fail to implement scrum properly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#today"&gt;
  &lt;/a&gt;
  Today
&lt;/h2&gt;

&lt;p&gt;Here are the things I learned and worked on today:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scrum"&gt;
  &lt;/a&gt;
  Scrum
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6iATxvUw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oikj9cfyl97ieq7wk9xv.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6iATxvUw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oikj9cfyl97ieq7wk9xv.jpeg" alt="Product Backlog" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I read &lt;a href="https://www.infoq.com/minibooks/scrum-xp-from-the-trenches-2/"&gt;Scrum and XP from the Trenches&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I learned a lot about Product Backlog management.&lt;/li&gt;
&lt;li&gt;Product Backlog Items (and User Stories) ideally should have:

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;ID&lt;/code&gt; - unique identifier to keep track of an item in case it is renamed&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Name&lt;/code&gt; - a short descriptive name.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Importance&lt;/code&gt; - a Product Owner's importance rating.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Initial Estimate&lt;/code&gt; - the Development Team's initial estimate about how much work is needed to implement this story. T-shirt sizes are great ways to estimate.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;How to Demo&lt;/code&gt; - high-level description of how it will be demonstrated in the Sprint Demo.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Notes&lt;/code&gt; - brief info or clarification&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;learned about the differences between external and internal quality&lt;/li&gt;
&lt;li&gt;while it is tempting to immediately create a visible output that the clients would appreciate (external quality), internal quality is more important and is nonnegotiable (cannot be compromised).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#nextjs"&gt;
  &lt;/a&gt;
  Next.js
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I followed the &lt;a href="https://nextjs.org/learn/basics/create-nextjs-app?utm_source=next-site&amp;amp;utm_medium=nav-cta&amp;amp;utm_campaign=next-website"&gt;official Next.js tutorial&lt;/a&gt; to review Next.js.&lt;/li&gt;
&lt;li&gt;learned about lazy loading for images in Next.js&lt;/li&gt;
&lt;li&gt;reviewed the difference in Routing between vanilla React and Next.js.&lt;/li&gt;
&lt;li&gt;reviewed &lt;code&gt;css-modules&lt;/code&gt; and its syntax&lt;/li&gt;
&lt;li&gt;reviewed about &lt;code&gt;&amp;lt;Head&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;Layout&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;phew&lt;/em&gt; That's a lot of learning!&lt;/p&gt;

&lt;p&gt;Have a great Friday, everyone!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2CLp2LPL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5pgwtu5tynvb7upwhyar.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2CLp2LPL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5pgwtu5tynvb7upwhyar.png" alt="Thank You Banner" width="880" height="293"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resourcesrecommended-readings"&gt;
  &lt;/a&gt;
  Resources/Recommended Readings
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://scrumguides.org/scrum-guide.html"&gt;The 2020 Scrum Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mlapshin.com/index.php/scrum-quizzes/"&gt;Mikhail Lapshin's Scrum Quizzes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.visual-paradigm.com/scrum/3c-and-invest-guide/"&gt;Effective User Stories&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.infoq.com/minibooks/scrum-xp-from-the-trenches-2/"&gt;Scrum and XP from the Trenches&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nextjs.org/learn/basics/create-nextjs-app?utm_source=next-site&amp;amp;utm_medium=nav-cta&amp;amp;utm_campaign=next-website"&gt;Official Next.js tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#free-ebook"&gt;
  &lt;/a&gt;
  Free E-Book
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://flaviocopes.com/page/nextjs-handbook/"&gt;The Next.js Handbook&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://seattlescrum.com/downloads/Why-Scrum-Isnt-Making-Your-Company-Very-Agile-v2.pdf"&gt;Cover Photo&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  DISCLAIMER
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;This is not a guide&lt;/strong&gt;, it is just me sharing my experiences and learnings. This post only expresses my thoughts and opinions (based on my limited knowledge) and is in no way a substitute for actual references. If I ever make a mistake or if you disagree, I would appreciate corrections in the comments!&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>beginners</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>KISS</title>
      <author>nicolasteofilo</author>
      <pubDate>Fri, 29 Oct 2021 11:34:55 +0000</pubDate>
      <link>https://dev.to/nicolasteofilo/kiss-519e</link>
      <guid>https://dev.to/nicolasteofilo/kiss-519e</guid>
      <description>&lt;p&gt;Este √© um conceito que pode te salvar de muito sofrimento!üòÄ&lt;/p&gt;


&lt;p&gt;&lt;br&gt;
KISS -  &lt;strong&gt;Keep It Simple, Stupid!&lt;/strong&gt;&lt;br&gt;
Traduzindo para o portugu√™s voc√™ pode pensar que este principio fala: "Mantenha simples, estupido" e n√£o, ele n√£o est√° te chamando de est√∫pido kkk üòÇ.&lt;br&gt;
O entendimento que voc√™ teve ter sobre este conceitos √©: "Mantenha simples e est√∫pido"&lt;br&gt;
&lt;/p&gt;





&lt;h4&gt;
  &lt;a href="#agora-vamos-descobrir-a-ponto-principal-que-%C3%A9-aplicar-no-diaadia"&gt;
  &lt;/a&gt;
  Agora vamos descobrir a ponto principal, que √© aplicar no dia-a-dia!
&lt;/h4&gt;


&lt;p&gt;Um dos ponto principais √© saber como aplicar no dia-a-dia, porque n√£o adianta nada voc√™ s√≥ saber o conceito e n√£o aplicar nada! Ent√£o vamos aplicar, basicamente esse conceito te diz que voc√™ deve manter o seu c√≥digo simples...&lt;br&gt;
&lt;strong&gt;Primeiramente&lt;/strong&gt;, ele n√£o est√° falando para voc√™ deixar o seu c√≥digo o menor poss√≠vel.&lt;br&gt;
Mas o que √© para voc√™ fazer ent√£o?&lt;br&gt;
O conceito te prop√µe que voc√™ deixei o seu c√≥digo o mais leg√≠vel poss√≠vel, o mais simples poss√≠vel e entend√≠vel para qualquer DEV que tiver que ler e dar manuten√ß√£o naquele seu c√≥digo, independente se o outro desenvolvedor for j√∫nior, pleno, ou s√™nior!&lt;br&gt;
&lt;/p&gt;





&lt;h4&gt;
  &lt;a href="#exemplo"&gt;
  &lt;/a&gt;
  Exemplo
&lt;/h4&gt;


&lt;p&gt;√â muito comum pelos Dev's javascript criar uma fun√ß√£o qualquer e passar par√¢metros, agora vamos ver o jeito errado(de acordo com o conceito KISS) e o jeito certo de se criar essa mesma fun√ß√£o!&lt;/p&gt;

&lt;br&gt;
Ent√£o vamos supor que n√≥s estamos precisando criar uma fun√ß√£o que recebe como par√¢metro uma lista de √∫suarios! E a partir disso, vai fazer um &lt;code&gt;.map&lt;/code&gt; e vai retornar o nome e idade de cada √∫suario! Uma coisa bem simples para quem meche com javascript em geral!


&lt;h5&gt;
  &lt;a href="#errado"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Errado!&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;infos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;infos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
     &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;u&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;u&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;
    &lt;span class="p"&gt;}))&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Primeiramente, eu nomeei a fun√ß√£o como &lt;code&gt;getInfo&lt;/code&gt;, se eu for nesse c√≥digo daqui a v√°rios meses, eu vou saber o que a fun√ß√£o faz somente pelo nome, acredito que n√£o!&lt;br&gt;
O parametro que eu passe &lt;code&gt;info&lt;/code&gt;, ser√° que daqui a um tempo sem ver esse c√≥digo eu vou saber que √© uma lista de usu√°rios que eu tenho que passar ali, acredito que tamb√©m n√£o!&lt;br&gt;
E ali no meu &lt;code&gt;.map&lt;/code&gt; eu declarei &lt;code&gt;u&lt;/code&gt;, o que que √© esse &lt;strong&gt;u&lt;/strong&gt;, nunca que eu vou saber kkk üòÇüòÇ!&lt;/p&gt;




&lt;h5&gt;
  &lt;a href="#certo"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Certo!&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getUserNameAndAge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
     &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;
    &lt;span class="p"&gt;}))&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora sim, est√° bem mais f√°cil de saber o que cada coisa faz, come√ßando pelo nome da fun√ß√£o que j√° me diz claramente o que ela faz, pegar o nome e a idade do usu√°rio!No par√¢metro posso ver claramente que eu vou passar &lt;code&gt;users&lt;/code&gt;, que como est√° no plural, remete a v√°rios usu√°rios!&lt;br&gt;
E no &lt;code&gt;.map&lt;/code&gt; eu deixo explicito que eu estou retornando um usu√°rio e que desse usu√°rio eu retorno o nome e a idade!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#conclus%C3%A3o"&gt;
  &lt;/a&gt;
  Conclus√£o
&lt;/h3&gt;

&lt;p&gt;Voc√™ pode ver que eu dei um exemplo bem simples, mas que pode ocorrer muito no dia-a-dia de um desenvolvedor e isso se aplica a qualquer linguagem ou ferramente que voc√™ use, eu espero que voc√™ tenha compreendido o sentido do conceito &lt;strong&gt;KISS&lt;/strong&gt;, at√© mais üòÄ&lt;/p&gt;




&lt;p&gt;Estou deixando alguns link onde compartilho mais conte√∫do al√©m do blog aqui !&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://instagram.com/onicolasteofilo"&gt;Instagram&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/nicolasteofilo/"&gt;Linkedin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
  </channel>
</rss>
