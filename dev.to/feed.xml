<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to install Figma on Linux</title>
      <author>Anish De</author>
      <pubDate>Wed, 15 Sep 2021 16:08:12 +0000</pubDate>
      <link>https://dev.to/anishde12020/how-to-install-figma-on-linux-127f</link>
      <guid>https://dev.to/anishde12020/how-to-install-figma-on-linux-127f</guid>
      <description>&lt;p&gt;&lt;a href="https://www.figma.com/"&gt;Figma&lt;/a&gt; is a great UI/UX tool with a quite generous free tier. This means many developers use Figma to prototype their application or website designs (including me). Many of us developers tend to use Linux but that is where a problem arises, the Figma app is not available for Linux!!!&lt;/p&gt;

&lt;p&gt;Now, to be fair, Figma has a web version which is almost exactly what the desktop version is but the desktop version is still preferred by most. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-do-we-get-the-figma-app-on-linux"&gt;
  &lt;/a&gt;
  How do we get the Figma app on Linux?
&lt;/h1&gt;

&lt;p&gt;Well, a great developer thought of solving this issue by making an unofficial version of Figma for Linux and the best part is that it is open source. See the GitHub Repository &lt;a href="https://github.com/Figma-Linux/figma-linux"&gt;here&lt;/a&gt;. The app is extremely similar to the Windows version of Figma. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-is-the-desktop-app-different-from-the-web-version"&gt;
  &lt;/a&gt;
  How is the desktop app different from the web version?
&lt;/h1&gt;

&lt;p&gt;The desktop app is built on electron (both, the official version for Windows and macOS as well as the unofficial version for Linux). The main advantages are better font support, in-app tabs (which is extremely useful for me), and extension development.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#one-small-problem-which-can-be-fixed"&gt;
  &lt;/a&gt;
  One Small Problem which can be fixed
&lt;/h1&gt;

&lt;p&gt;When you are installing Figma Linux on Ubuntu, you might use the PPA repository way. This way seems to have issues and Figma won't launch. If you ever try to launch it from the terminal, you will see this error -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;figma-linux: error while loading shared libraries: libffmpeg.so: cannot open shared object file: No such file or directory
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So what is the fix? &lt;br&gt;
Don't use the PPA!!!&lt;br&gt;
Get the &lt;code&gt;.deb&lt;/code&gt; package from the &lt;a href="https://github.com/Figma-Linux/figma-linux/releases"&gt;releases page&lt;/a&gt;&lt;br&gt;
If you have already downloaded from the PPA, you can simply overwrite it by installing the .deb (It might ask you to downgrade, doing that will also work). We also need to hold it off &lt;code&gt;apt upgrade&lt;/code&gt; or else it will automatically update and cause the issue again.&lt;/p&gt;

&lt;p&gt;To do this run the following command -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-mark hold figma-linux
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that is it!!! The issue is fixed and I hope Figma Linux works well for you. If you have any doubts, you can leave down a comment below. For bugs, submit a GitHub issue &lt;a href="https://github.com/Figma-Linux/figma-linux/issues"&gt;here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>linux</category>
      <category>ubuntu</category>
    </item>
    <item>
      <title>New functions extending the functionality of useRefHistory in VueUse library</title>
      <author>Roman Harmyder</author>
      <pubDate>Wed, 15 Sep 2021 15:58:42 +0000</pubDate>
      <link>https://dev.to/harmyderoman/new-functions-extending-the-functionality-of-userefhistory-in-vueuse-library-520c</link>
      <guid>https://dev.to/harmyderoman/new-functions-extending-the-functionality-of-userefhistory-in-vueuse-library-520c</guid>
      <description>&lt;p&gt;I would like to share with you my little joy. My suggestion for expanding the function &lt;code&gt;useRefHistory&lt;/code&gt; by adding the delay effect to history snapshots was accepted by maintainers of VueUse. I wrote a pull request, that was merged. New features are already available in the latest version of VueUse (&amp;gt; v6.3.3). But first things first.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adventure-story"&gt;
  &lt;/a&gt;
  Adventure story
&lt;/h2&gt;

&lt;p&gt;In my &lt;a href="https://dev.to/harmyderoman/vueuse-as-must-have-library-for-vue-3-5o2"&gt;last article&lt;/a&gt;, I wrote about &lt;code&gt;useRefHistory&lt;/code&gt;, and how to implement it in your application. While using this function, I noticed that the result of its work is a little impractical and not convenient for the user of the application. The function takes a snapshot of the data every time it notices the slightest change, even if it's just one letter. If you are writing a long text or a to-do list, make a mistake, and want to revert the changes, it is very inconvenient to press Undo for each letter. It is more convenient to configure this function so that it saves changes with a time delay.&lt;/p&gt;

&lt;p&gt;I started looking for a solution. It seems that it lies on the surface - you just need to add &lt;code&gt;setTimeOut&lt;/code&gt; to the &lt;code&gt;watch&lt;/code&gt;, which monitors data changes, but it turned out that this was not enough. &lt;code&gt;watch&lt;/code&gt; also need to skip changes that the &lt;code&gt;undo&lt;/code&gt; and &lt;code&gt;redo&lt;/code&gt; methods do to data, otherwise, this creates complete chaos!!!&lt;/p&gt;

&lt;p&gt;Looking for a solution led me to the source code of the VueUse library itself. It turned out that the basis for that was already laid by the authors.&lt;/p&gt;

&lt;p&gt;I opened a &lt;a href="https://github.com/vueuse/vueuse/issues/732"&gt;issue&lt;/a&gt; in the VueUse repository with a suggestion to add a new feature. The guys &lt;a href="https://github.com/antfu"&gt;antfu&lt;/a&gt; and &lt;a href="https://github.com/patak-js"&gt;patak-js&lt;/a&gt; turned out to be very nice people and real professionals. They supported my idea and entrusted me to write a pull request. We came up with a solution and they suggested to me how to implement it in the best way without breaking the style of the library.&lt;/p&gt;

&lt;p&gt;After the code review and some edits, the pull request was accepted and now new functions are available to you. I will tell you how to use them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usedebouncedrefhistory"&gt;
  &lt;/a&gt;
  &lt;a href="https://vueuse.org/core/useDebouncedRefHistory/"&gt;useDebouncedRefHistory&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The main change I made in the &lt;code&gt;useRefHistory&lt;/code&gt; functions is that now you can pass the &lt;code&gt;eventFilter&lt;/code&gt; property in the options object to change the behavior of the function. Filters are internal auxiliary structures of the library that you don't really need to learn. Unless you decide to write the code for VueUse yourself. Therefore, let's go straight to the practical.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;useDebouncedRefHistory&lt;/code&gt; records the history of data changes with a specified delay. The delay is set in milliseconds and is passed to the options object. It can be wrapped in a ref object, then the delay will become reactive.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"ts"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;defineComponent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useDebouncedRefHistory&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@vueuse/core&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;defineComponent&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;note&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;

      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;undo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;redo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;canUndo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;canRedo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;clear&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useDebouncedRefHistory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;note&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;deep&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;clone&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;debounce&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;note&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;undo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;redo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;canUndo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;canRedo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;clear&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#usethrottledrefhistory"&gt;
  &lt;/a&gt;
  &lt;a href="https://vueuse.org/core/useThrottledRefHistory/"&gt;useThrottledRefHistory&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This function is similar to the previous one, only with a throttle effect. This means that the history will be saved at the moment of data change, and the next time after the delay time passed. If the user doesn't stop making changes, they will be recorded every 1000 milliseconds. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- setup in script - some syntactic sugar that will make your life easier--&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;setup&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useThrottledRefHistory&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@vueuse/core&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;delay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;history&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;undo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;redo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;canUndo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;canRedo&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useThrottledRefHistory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;throttle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;delay&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As you can see, the changes are not so big in the codebase and logic, but they significantly improve the user experience. Use it wisely.&lt;/p&gt;

&lt;p&gt;I am very glad to contribute code that will be used all around the world. I find it very important to contribute code to open source because we all use someone else's work. In addition, I confirm that it is a good feeling to know that your code will be used by thousands of developers.&lt;/p&gt;

</description>
      <category>vue</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>vueuse</category>
    </item>
    <item>
      <title>Build Pixel Perfect Skeleton Loader Using CSS 🚀</title>
      <author>Ram Maheshwari 💚</author>
      <pubDate>Wed, 15 Sep 2021 15:55:52 +0000</pubDate>
      <link>https://dev.to/rammcodes/build-pixel-perfect-skeleton-loader-using-css-5692</link>
      <guid>https://dev.to/rammcodes/build-pixel-perfect-skeleton-loader-using-css-5692</guid>
      <description>&lt;p&gt;&lt;strong&gt;Skeleton Loaders&lt;/strong&gt; are used very commonly in &lt;strong&gt;Modern&lt;/strong&gt; Websites/Apps to indicate loading of data instead of using the traditional loaders, spinners, etc. which are boring and can lead to Poor User Experience 😵‍💫&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;I created this tutorial to share my knowledge of how to create a Perfect Skeleton Screen that looks like the exact replica of the original element 😉&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;We are going to convert the &lt;strong&gt;Food Blog Card&lt;/strong&gt; to it's own &lt;strong&gt;Skeleton loader&lt;/strong&gt; as shown in the GIF below 🖼️&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VeNPyPU---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.ibb.co/j54R1gC/Copy-of-Copy-of-Dopefolio-Open-Source-Portfolio-Template-for-Developers-2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VeNPyPU---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.ibb.co/j54R1gC/Copy-of-Copy-of-Dopefolio-Open-Source-Portfolio-Template-for-Developers-2.gif" alt="Skeleton Loader Preview Demo"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#there-are-3-steps-to-creating-a-perfect-skeleton-screen"&gt;
  &lt;/a&gt;
  There are &lt;strong&gt;3 Steps&lt;/strong&gt; to creating a perfect Skeleton Screen 🤘
&lt;/h3&gt;




&lt;h2&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Step 1&lt;/strong&gt;:
&lt;/h2&gt;

&lt;p&gt;Make sure you already have implemented the HTML and CSS for the Original Element. In our case, I have included the code for the &lt;strong&gt;Food Blog Card&lt;/strong&gt; below.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#html-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;HTML Code ⬇️&lt;/strong&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt;
      &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@400;600;700;900&amp;amp;display=swap"&lt;/span&gt;
      &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;
    &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"img-cont"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt;
            &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"img"&lt;/span&gt;
            &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://images.unsplash.com/photo-1594398028856-f253a046f417?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;amp;ixlib=rb-1.2.1&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1189&amp;amp;q=80"&lt;/span&gt;
            &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"Food image"&lt;/span&gt;
          &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"user-info"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"user-avatar-cont"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt;
              &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://i.ibb.co/JzNYHV9/image-1.jpg"&lt;/span&gt;
              &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"User Image"&lt;/span&gt;
              &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"user-avatar-img"&lt;/span&gt;
            &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"user-details"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"user-name"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;span&amp;gt;&lt;/span&gt;Natalia Rodrigues&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"user-profession"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;span&amp;gt;&lt;/span&gt;Food Blogger&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#css-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;CSS Code ⬇️&lt;/strong&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;      &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nt"&gt;html&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;62.5%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'Source Sans Pro'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#eee&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nc"&gt;.card&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;45rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nc"&gt;.img-cont&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nc"&gt;.img&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;object-fit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cover&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nc"&gt;.user-info&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nc"&gt;.user-avatar-cont&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;6rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;6rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nc"&gt;.user-avatar-img&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;object-fit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cover&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nc"&gt;.user-details&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;flex-grow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;space-between&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nc"&gt;.user-name&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2.2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#444&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;letter-spacing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nc"&gt;.user-profession&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.3rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#999&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;letter-spacing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#result"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Result ⬇️&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--inFJm8nL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/yQwJKPm/Fire-Shot-Capture-078-127-0-0-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--inFJm8nL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/yQwJKPm/Fire-Shot-Capture-078-127-0-0-1.png" alt="Food Blog Result Demo"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Step 2&lt;/strong&gt;:
&lt;/h2&gt;

&lt;p&gt;Now we have to convert the card into its own Skeleton Version. To do that, I will add an extra class called &lt;strong&gt;card--skeleton&lt;/strong&gt; on the HTML div with the class called &lt;strong&gt;card&lt;/strong&gt; as shown below so we can target the elements inside the card.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card card--skeleton"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we have &lt;strong&gt;2 Images&lt;/strong&gt; inside the card, the &lt;strong&gt;1st image&lt;/strong&gt; is the image of the Pizza and the &lt;strong&gt;2nd Image&lt;/strong&gt; is the image of the Person. Both of these images are wrapped inside their own container and those containers have their specific height.&lt;/p&gt;

&lt;p&gt;Now, we will remove both of these images.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"img-cont"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="c"&gt;&amp;lt;!-- Removed Image --&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"user-info"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"user-avatar-cont"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="c"&gt;&amp;lt;!-- Removed Image --&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"user-details"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"user-name"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;span&amp;gt;&lt;/span&gt;Natalia Rodrigues&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"user-profession"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;span&amp;gt;&lt;/span&gt;Food Blogger&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we will add a background color to the image containers as shown below using the &lt;strong&gt;skeleton class&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.card--skeleton&lt;/span&gt; &lt;span class="nc"&gt;.img-cont&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#eee&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.card--skeleton&lt;/span&gt; &lt;span class="nc"&gt;.user-avatar-cont&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#eee&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So the end result will look like this ⬇️&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c2hzdbl5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/KqzQCMW/Fire-Shot-Capture-079-127-0-0-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c2hzdbl5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/KqzQCMW/Fire-Shot-Capture-079-127-0-0-1.png" alt="Skeleton Loader Preview Demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will do the same thing with &lt;strong&gt;User Name&lt;/strong&gt; and &lt;strong&gt;User Profession&lt;/strong&gt; elements. We will change the background color of both of these elements along with the text color inside it. The background color and the text color will be the same.&lt;br&gt;
I have also added some border-radius which is optional.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.card--skeleton&lt;/span&gt; &lt;span class="nc"&gt;.user-name&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;.card--skeleton&lt;/span&gt; &lt;span class="nc"&gt;.user-profession&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#eee&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#eee&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, the end result will look like this ⬇️&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LO5Lfdks--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/Yy1Pqqb/Fire-Shot-Capture-080-127-0-0-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LO5Lfdks--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/Yy1Pqqb/Fire-Shot-Capture-080-127-0-0-1.png" alt="Skeleton Loader Preview Demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Looking cool, right? 😉&lt;/p&gt;

&lt;p&gt;So, now we can move on to the &lt;strong&gt;3rd Step&lt;/strong&gt; where we will add the shining effect animation ⚡&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#step-3"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Step 3&lt;/strong&gt;:
&lt;/h2&gt;

&lt;p&gt;In this step, we will add the &lt;strong&gt;Shining Effect Animation&lt;/strong&gt; on the entire Skeleton Card.&lt;/p&gt;

&lt;p&gt;To implement that, we will target the &lt;strong&gt;before&lt;/strong&gt; sudo class of &lt;strong&gt;card--skeleton&lt;/strong&gt; as shown below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;      &lt;span class="nc"&gt;.card--skeleton&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="m"&gt;90deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.9&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
          &lt;span class="nb"&gt;transparent&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, we have added the &lt;strong&gt;before&lt;/strong&gt; sudo element which is &lt;strong&gt;absolutely positioned&lt;/strong&gt; and has the same height as the &lt;strong&gt;card--skeleton&lt;/strong&gt; and has 50% &lt;strong&gt;width&lt;/strong&gt; of the &lt;strong&gt;class--skeleton&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We also added &lt;strong&gt;linear-gradient&lt;/strong&gt; as the background with 3 colors ( transparent color, white color, transparent color ) in the right direction. &lt;/p&gt;

&lt;p&gt;So, it will make our &lt;strong&gt;card--skeleton&lt;/strong&gt; look this ⬇️&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XY8MAv7Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/TLvRkwx/Fire-Shot-Capture-081-127-0-0-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XY8MAv7Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/TLvRkwx/Fire-Shot-Capture-081-127-0-0-1.png" alt="Skeleton Loader Preview Demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we will use CSS &lt;strong&gt;keyframes&lt;/strong&gt; to move the gradient from the left side to the right side. Inside &lt;strong&gt;keyframes&lt;/strong&gt;, we will target the &lt;strong&gt;transform&lt;/strong&gt; property to &lt;strong&gt;skew&lt;/strong&gt; the element and to &lt;strong&gt;translate&lt;/strong&gt; it in the X-direction.&lt;/p&gt;

&lt;p&gt;I have already added the &lt;strong&gt;overflow: hidden&lt;/strong&gt; value to the &lt;strong&gt;card&lt;/strong&gt; element so when the &lt;strong&gt;before&lt;/strong&gt; element goes outside of the &lt;strong&gt;card&lt;/strong&gt; boundaries because of the &lt;strong&gt;keyframes&lt;/strong&gt; transform, it's not going to be visible outside of the boundaries of &lt;strong&gt;card&lt;/strong&gt; which is what we need.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;      &lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;loading&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;skewX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-10deg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;translateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-100%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;skewX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-10deg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;translateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;200%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nc"&gt;.card--skeleton&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;...&lt;/span&gt;
        &lt;span class="c"&gt;/* Refer the Keyframe inside the Animation */&lt;/span&gt;
        &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;loading&lt;/span&gt; &lt;span class="m"&gt;0.6s&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, the end result will finally look this ⬇️&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9nTYgQJR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.ibb.co/7g21tVH/ezgif-com-gif-maker-6.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9nTYgQJR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.ibb.co/7g21tVH/ezgif-com-gif-maker-6.gif" alt="Skeleton Loader Preview Demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and that's what we wanted 🥳🤘&lt;br&gt;
I hope you find this post to be helpful and thanks for reading it 😇&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#important"&gt;
  &lt;/a&gt;
  Important 😸
&lt;/h2&gt;

&lt;p&gt;I regularly post useful content related to &lt;strong&gt;Web Development and Programming&lt;/strong&gt; on &lt;strong&gt;Linkedin&lt;/strong&gt;. You should consider &lt;strong&gt;Connecting with me or Following&lt;/strong&gt; me on &lt;strong&gt;Linkedin&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Linkedin Profile&lt;/strong&gt;: &lt;a href="https://linkedin.com/in/rammcodes"&gt;https://linkedin.com/in/rammcodes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also connect with me on &lt;strong&gt;Twitter&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Twitter Profile&lt;/strong&gt;: &lt;a href="https://twitter.com/rammcodes"&gt;https://twitter.com/rammcodes&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;You know, it takes time to create such content so it will be very helpful if you show some love to this post by &lt;strong&gt;Reacting&lt;/strong&gt; with ❤️ + 🦄 + 🔖 &lt;/p&gt;

&lt;p&gt;Share your feedback by &lt;strong&gt;Commenting&lt;/strong&gt; below 💬&lt;/p&gt;

&lt;p&gt;Drop me a &lt;strong&gt;Follow&lt;/strong&gt; for more &lt;strong&gt;Awesome&lt;/strong&gt; content related to &lt;strong&gt;Web Development&lt;/strong&gt; and &lt;strong&gt;Programming&lt;/strong&gt; 🙌&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-your-support"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Thank you for your support&lt;/strong&gt; ❤️
&lt;/h3&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>javascript</category>
      <category>react</category>
    </item>
    <item>
      <title>REST APIs and Architecture - 101</title>
      <author>Uzair</author>
      <pubDate>Wed, 15 Sep 2021 15:44:32 +0000</pubDate>
      <link>https://dev.to/uzairali10/rest-apis-and-architecture-101-236f</link>
      <guid>https://dev.to/uzairali10/rest-apis-and-architecture-101-236f</guid>
      <description>&lt;h3&gt;
  &lt;a href="#what-the-heck-is-rest"&gt;
  &lt;/a&gt;
  What the Heck is REST??? 🤔
&lt;/h3&gt;

&lt;p&gt;REST stands for Representational State Transfer. It is nothing but some set of rules or constraints to make a web service in other words we can say its a standard way of defining a architecture.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#some-constrains-that-must-be-followed-by-every-restful-service"&gt;
  &lt;/a&gt;
  Some Constrains that must be followed by every REST-ful Service ✅
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Client-Server Architecture&lt;/strong&gt;: REST is composed of Client, Server and Resources (data). Request-Response is handled by HTTP requests and response, but in REST client and server must be completely independent of each other. The server shouldn't be able to modify the client application and vice-versa sever only does the job of providing a requested resource.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Statelessness&lt;/strong&gt;: As already said that the client must not be aware of the logic that resides in server and vice-versa. So the message sent to server from the client must contain all the necessary info about the request (Eg: Which URI is requested, Method used, etc) And thus each request data packet can be understood in isolation by the server.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Cacheablity&lt;/strong&gt;: Client must be able to cache server's response, this minimises the client-server request response cycle and helps to scale up the application.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Layered Architecture&lt;/strong&gt;: The client and server need not to connected directly there can be multiple services connecting them such as load balancer, proxies, Security Layers etc&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Code On Demand&lt;/strong&gt;: This is an &lt;strong&gt;optional&lt;/strong&gt; rule to be followed in this client has the ability to execute some code consisting of business logic which is provided by server.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;API Rules&lt;/strong&gt;: There are some rules which should be followed while creating endpoint for API

&lt;ol&gt;
&lt;li&gt;an HTTP verb, which defines what kind of operation to perform&lt;/li&gt;
&lt;li&gt;a header, which allows the client to pass along information about the request&lt;/li&gt;
&lt;li&gt;an optional message body containing data&lt;/li&gt;
&lt;li&gt;Send a proper HTTP code to indicate a success or error status.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If any API or Service violates any of the above constraints it is not considered to be a RESTful Service 🚫&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#http-verbs"&gt;
  &lt;/a&gt;
  HTTP Verbs 👩‍🏭
&lt;/h3&gt;

&lt;p&gt;Mostly 4 Basic HTTP verbs are used while interacting with REST Resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;GET&lt;/strong&gt; : To retrieve a specific resource&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;POST&lt;/strong&gt; : To Create a new resource&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;PUT&lt;/strong&gt; : To modify an a specific resource&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;DELETE&lt;/strong&gt; : To delete a specific resource&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The resource can be delivered to the client in a variety of formats including HTML, plain text, or Javascript object notation (JSON).&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;URI&lt;/th&gt;
&lt;th&gt;HTTP verb&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;api/users&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GET&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Get all users&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;api/users/new&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GET&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Show form for adding new user&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;api/users&lt;/td&gt;
&lt;td&gt;&lt;code&gt;POST&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Adds a new User&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;api/users/1&lt;/td&gt;
&lt;td&gt;&lt;code&gt;PUT&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Update a user whose id is 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;api/users/1/edit&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GET&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Show edit form for user with id = 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;api/users/1&lt;/td&gt;
&lt;td&gt;&lt;code&gt;DELETE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Delete a user with id = 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;api/users/1&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GET&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Get a user with id = 1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#how-restful-apis-work"&gt;
  &lt;/a&gt;
  How RESTful APIs work ⚙️
&lt;/h3&gt;

&lt;p&gt;Let's take an example. We want to build a simple application that connects to a server and provides the functionality of creating, reading, updating, and deleting resources (also known as CRUD) within the database&lt;/p&gt;

&lt;p&gt;A RESTful API is built and used to connect and provide communication between our client-facing front end to the back end server and database.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YrNotr4b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1k2pemud4diklvykcudj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YrNotr4b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1k2pemud4diklvykcudj.png" alt="IcYxwQfeV"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;When users of our application make client requests on the front end to retrieve a resource from within the database, the RESTful API is called, it makes a GET request to retrieve the resource,&lt;/li&gt;
&lt;li&gt;To create a resource within the database the RESTful API makes a POST request.&lt;/li&gt;
&lt;li&gt;To update a resource the RESTful API makes a PATCH request&lt;/li&gt;
&lt;li&gt;To delete a resource from within the database, the RESTful API makes a DELETE request to the Server&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>codenewbie</category>
      <category>node</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>DEVCommunity, if you want to stay accountable, learn alongside, hit me up. Let's learn, grow and create projects together😊💪</title>
      <author>Madhavi Swamy</author>
      <pubDate>Wed, 15 Sep 2021 15:33:58 +0000</pubDate>
      <link>https://dev.to/madhaviswamy/devcommunity-if-you-want-to-stay-accountable-learn-alongside-hit-me-up-let-s-learn-grow-and-create-projects-together-3b7m</link>
      <guid>https://dev.to/madhaviswamy/devcommunity-if-you-want-to-stay-accountable-learn-alongside-hit-me-up-let-s-learn-grow-and-create-projects-together-3b7m</guid>
      <description>&lt;p&gt;Hey #DEVCommunity, I've been learning and documenting my journey of learning webdev on (@thematsci_gal) twitter. If you want to stay accountable and learn alongside, hit me up. Let's learn, grow and create projects together😊💪&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>shecoded</category>
      <category>programming</category>
    </item>
    <item>
      <title>Why is Shopify using a "Dead Programming Language" to build its $3 billion dollar e-commerce business?</title>
      <author>Sameer Kumar</author>
      <pubDate>Wed, 15 Sep 2021 15:25:08 +0000</pubDate>
      <link>https://dev.to/sameer1612/why-is-shopify-using-a-dead-programming-language-to-build-its-3-billion-dollar-e-commerce-business-4a52</link>
      <guid>https://dev.to/sameer1612/why-is-shopify-using-a-dead-programming-language-to-build-its-3-billion-dollar-e-commerce-business-4a52</guid>
      <description>&lt;p&gt;It would be an understatement to say Shopify is the unicorn of the eCommerce business. Shopify is used by millions of merchants all over the world to build their online presence and market their products. Started by 3 Canadians in 2004, inspired by their poor online shopping experience, Shopify has been significantly gaining new ground every day. According to research reports, its global e-commerce is forecasted to be $4.95 trillion by 2022- an almost 400% increase in eight years.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is Shopify?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Shopify is the present-day example of a well-structured, complex, and user-friendly eCommerce website built using Ruby on Rails. It is basically a Software-as-a-Service platform that gives entrepreneurs and intrapreneurs the opportunity to create a secure online store with wider features and choices to select their best payment gateways out of hundreds of possible options. For the advanced user, there is an option to edit the ready-made design templates. Even at the scale of processing millions of requests per minute (RPM), Shopify offers a lot more than an e-commerce sales platform. And, this is amazing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why does Shopify use Ruby on Rails?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For the uninitiated, Ruby on Rails is very much prevalent in the present day. It is forming a niche because of its vast usage among millions of websites. Ruby on Rails is no longer a one advantage wonder web development framework. What makes it different is its effective development time, super-fast deployment, user-friendliness, etc.&lt;/p&gt;

&lt;p&gt;When Shopify was launched, at that time RoR was very popular. It was a promising framework and it is now. RoR helped Shopify to grow relatively at the same time as its number of users increased. This scalability feature of ruby on rails made it a favorite for the founders as it perfectly answers the rising demands of the new client, product additions, feature releases, and much more. The RoR architecture was famous for its modularity which means that the system can be divided into modules and gems. It was suitable for the twelve-factor app principles, which allowed it to be scaled in a natural way.&lt;/p&gt;

&lt;p&gt;The main idea was to create a platform where the tool merchants can build their own online store and sell their products easily. Bringing such a powerful platform requires overcoming a lot of technical challenges such as a secure infrastructure for proper user data handling, larger database sets, API creation, third-party integration, and availability issues. This is where RoR saves the bill.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Ruby on rails is known as a mature, and stable technology. It means when hundreds of merchants use Shopify they feel the ease of app operation and significant efficiency in the performance of the platform by removing any lags that occur. The framework uses the best coding principles like DRY (Don’t Repeat Yourself) and KISS (Keep It Simple, Stupid) that guide the developers in keeping the code clean.&lt;/li&gt;
&lt;li&gt;  RoR is agile and supports quick application development. It takes very little time to write and maintain the apps as compared to other programming languages. Its open-source library, 150k+ Gems, and undying support of the RoR community have been helping in improving the development workflow and allowing quick development of almost any idea. Using RoR, a merchant can reduce their store build time by 25–45% and reduce their time to go live in the market drastically.&lt;/li&gt;
&lt;li&gt;  RoR provides out-of-the-box security. They have default security headers that defend applications from clickjacking. Like, XSS is protected by default. Its SQL injection is managed by the default Rails object-relational mapper (ORM), Active Record. All the string text is escaped before being sent to the browser.&lt;/li&gt;
&lt;li&gt;  The configurations, practices can change from one developer to another based on their personal choices. RoR uses a software engineering principle called Convention over Configuration (CoC) which is hugely followed by developers all around the world. When working in a team, it is hard to review and keep track of one another’s code. But, through CoC, one can know how to connect URL paths to application logic, and database tables and columns.&lt;/li&gt;
&lt;li&gt;  Also, RoR uses MVC architecture. This allows the extensibility and modularity of apps in the Shopify platform. Therefore, no matter its complexity, a merchant can easily add new features to their online store in Shopify taking the help of a developer.&lt;/li&gt;
&lt;li&gt;  When building an online store, there is always scope for integrating more functionality. Having few custom apps can validate a variety of merchant needs. For example, reading and writing the data in response to user input or an event, adding any new functionality to the existing components of Shopify admin, and/or changing how the store shows information.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Final Thoughts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the present day, e-commerce with Ruby on Rails is more relevant than ever. As the companies face imminent losses due to unseen circumstances, geographical preferences, customer needs, and much more, the companies aim to save more money, while reaching more customers. And, having a mobile eCommerce platform with RoR can reduce that operational burden by half.&lt;/p&gt;

&lt;p&gt;Name it and RoR has it all: payment gateways, campaign platforms, merchant helpdesks, etc. If you are planning to build an online shop, RoR has one of the best development frameworks as it includes many gems built particularly for e-commerce. Unique merchants deserve unique solutions. If you need to cover an extra mile for mature technology and a competent app development partner, that technology is Ruby on Rails and the partner is &lt;a href="https://railsfactory.com/"&gt;RailsFactory&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Do follow for more Ruby on Rails posts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#to-connect"&gt;
  &lt;/a&gt;
  To Connect
&lt;/h2&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;🏠 Website: &lt;a href="https://hi-sameer.web.app"&gt;https://hi-sameer.web.app&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🏭 LinkedIn: &lt;a href="https://www.linkedin.com/in/sameerkumar1612/"&gt;https://www.linkedin.com/in/sameerkumar1612/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>ruby</category>
      <category>rails</category>
    </item>
    <item>
      <title>Hyper-Text Transfer
Protocol - HTTP 101</title>
      <author>Uzair</author>
      <pubDate>Wed, 15 Sep 2021 15:18:31 +0000</pubDate>
      <link>https://dev.to/uzairali10/hyper-text-transfer-protocol-http-101-4jp4</link>
      <guid>https://dev.to/uzairali10/hyper-text-transfer-protocol-http-101-4jp4</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-on-earth-is-http"&gt;
  &lt;/a&gt;
  What On Earth is HTTP 🤔
&lt;/h2&gt;

&lt;p&gt;HTTP is a request response protocol that define some sets of rules through which client and server communicate over an already established TCP connection.&lt;/p&gt;

&lt;p&gt;Once an TCP connection has been established between client and server, HTTP defines rules for transferring data such as images, text, multimedia etc.&lt;/p&gt;

&lt;p&gt;HTTP is not a connection protocol it relies on TCP to establish connection between client and server. Once the server receives HTTP request message sent by client over an opened TCP connection, the server analyses and sends an HTTP response to the client after which TCP connection is closed&lt;/p&gt;

&lt;p&gt;And there is no relation or link between two or more HTTP request message sent consecutively over a same TCP connection.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#establishing-an-http-connection"&gt;
  &lt;/a&gt;
  Establishing an HTTP connection 🏗️
&lt;/h2&gt;

&lt;p&gt;When a client initiates an request-response cycle it performs the following steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An TCP connection is established&lt;/li&gt;
&lt;li&gt;Once TCP connection is established the client sends an HTTP request message to the server and server responds to that message&lt;/li&gt;
&lt;li&gt;TCP connection is closed&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#http-messages"&gt;
  &lt;/a&gt;
  HTTP Messages ✉️
&lt;/h2&gt;

&lt;p&gt;There are two types of HTTP message HTTP request msg and HTTP response message&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#http-request-message"&gt;
  &lt;/a&gt;
  HTTP Request Message
&lt;/h3&gt;

&lt;p&gt;An HTTP request message consist of the following &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FCfEc9SV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rseefmgcm61wieh4v3j4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FCfEc9SV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rseefmgcm61wieh4v3j4.png" alt="Fhk3an1Va"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;HTTP Method&lt;/strong&gt;: These define the nature of request in the above case the method is a &lt;code&gt;GET&lt;/code&gt; request&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Request URI&lt;/strong&gt;: This identifies the resource upon which HTTP method is to be applied. In the above case its &lt;code&gt;/explore&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;HTTP Version&lt;/strong&gt;: In the above case its &lt;code&gt;HTTP/1.1&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;HTTP Request Headers&lt;/strong&gt;: Then Comes the request headers which convey some additional info to the server about the request and client. In the above case we have the following request headers

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Host&lt;/strong&gt;: It contains the IP and Port number of the server where website or resource is stored. In this case its &lt;code&gt;[hashnode.com](http://hashnode.com)&lt;/code&gt; and default port number for HTTP is 80 and for HTTPS its 443&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Accept-Language&lt;/strong&gt;: This specifies the language in which client wish to communicate in the above case it &lt;code&gt;en&lt;/code&gt; (English)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;HTTP Request Body&lt;/strong&gt;: This is an optional feild that contains info being sent for storage, mainly used in POST, PATCH request etc&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#http-response-message"&gt;
  &lt;/a&gt;
  HTTP Response Message
&lt;/h3&gt;

&lt;p&gt;An HTTP response message consist of the following&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yXQG-3lv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zufchlb61vol2ao4dlya.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yXQG-3lv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zufchlb61vol2ao4dlya.png" alt="1Unf9vpWu"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;HTTP Version&lt;/strong&gt;: In the above case its &lt;code&gt;HTTP/1.1&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Status Code&lt;/strong&gt;: Determines the result of request, in this case its 200&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;HTTP Response Headers&lt;/strong&gt;: Conveys additional info about the response and server to the client, in this case we are having the following headers

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Accept Ranges&lt;/strong&gt;: It is used by the server to show its support for partial requests&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Server&lt;/strong&gt;: This tells about the nature of server which process the response, In this case its Apache&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Content-Type&lt;/strong&gt;: This indicates the file type of resource, In this case its a html or a txt file&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;E-Tag&lt;/strong&gt;: it identifies the specific resource version&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;HTTP Response Body&lt;/strong&gt;: This is an optional field that contains info sent from server to client mainly in requests like GET request&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#http-methods"&gt;
  &lt;/a&gt;
  HTTP Methods:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;GET&lt;/strong&gt; - This method retrieves the resource specified in the request-URI. If successful the resource is returned as an entity in the response message along with the status code 200 (Success).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;POST&lt;/strong&gt; - This method is used to modify data in server if successful the server responds by sending a response message containing the status code 201 (Created), along with the location of the posted entity or data.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;PUT&lt;/strong&gt; - Update data in server&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;DELETE&lt;/strong&gt; - Delete data in server&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#http-status-codes"&gt;
  &lt;/a&gt;
  HTTP Status Codes:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UJS64z93--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ox9ep0mwyz3va973mwbd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UJS64z93--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ox9ep0mwyz3va973mwbd.png" alt="Common-HTTP-error-Blog-Post-Image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ktWw7xJb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/09wa7f5h9x06x1afvqbs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ktWw7xJb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/09wa7f5h9x06x1afvqbs.png" alt="httpStatusCode_de_en"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#read-more-over-here"&gt;
  &lt;/a&gt;
  Read More Over here:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.khanacademy.org/computing/computers-and-internet/xcae6f4a7ff015e7d:the-internet/xcae6f4a7ff015e7d:web-protocols/a/hypertext-transfer-protocol-http"&gt;HTTP: Hypertext Transfer Protocol (article) | Khan Academy&lt;/a&gt;&lt;/p&gt;

</description>
      <category>node</category>
      <category>codenewbie</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Svelte: derived stores based on an arbitrary array of stores</title>
      <author>Addie B</author>
      <pubDate>Wed, 15 Sep 2021 15:07:55 +0000</pubDate>
      <link>https://dev.to/addiebarron/svelte-derived-stores-based-on-an-arbitrary-array-of-stores-j72</link>
      <guid>https://dev.to/addiebarron/svelte-derived-stores-based-on-an-arbitrary-array-of-stores-j72</guid>
      <description>&lt;p&gt;Say you have an array of stores, the length of which is not necessarily known. You want to create a &lt;code&gt;derived&lt;/code&gt; store that updates its value when any of these array values changes. The derived store syntax is a bit obtuse on how this can be done, but it is possible. Here's an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;writable&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;svelte/store&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;storeArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;writable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;writable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;writable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;derivedStore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;derived&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;storeArray&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;([...&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Do stuff with your array of stores&lt;/span&gt;
  &lt;span class="c1"&gt;// e.g., this code will set the derived store's value to true whenever all the stores are greater than 10:&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;every&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;...&lt;/code&gt; spread syntax here allows any number of stores to be passed into the &lt;code&gt;derived&lt;/code&gt; constructor's callback function.&lt;/p&gt;

&lt;p&gt;A caveat - the derived store won't be notified if new items are added to the store array, or the array itself is redeclared. For that, you could consider making the array itself a store, and use &lt;code&gt;set&lt;/code&gt; and &lt;code&gt;update&lt;/code&gt; whenever you want to change it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;storeArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;writable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;storeArray&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;derivedStore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;derived&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;storeArray&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;storeArray&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; 
  &lt;span class="p"&gt;([...&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// arr[0] is the array itself, and arr.slice(1) contains the contents&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>svelte</category>
    </item>
    <item>
      <title>TricetAtOps: the new DevOps frontier</title>
      <author>Daniele Fontani</author>
      <pubDate>Wed, 15 Sep 2021 15:07:37 +0000</pubDate>
      <link>https://dev.to/zeppaman/tricetatops-the-new-devops-frontier-4oi3</link>
      <guid>https://dev.to/zeppaman/tricetatops-the-new-devops-frontier-4oi3</guid>
      <description>&lt;p&gt;&lt;strong&gt;DevOps&lt;/strong&gt; is always evolving and every day a new trend comes out... Waiting for having &lt;strong&gt;TricerAtOps&lt;/strong&gt; as a skill, I tried to focus on the things that really matter and describe how to go ahead with a DevOps culture that goes beyond the labels.&lt;/p&gt;

&lt;p&gt;Joking aside, we can start talking about DevOps. In this article, I want to explain the most important buzzword and try to find out what is the fundamental lesson to take home. The title and the fun story were just an excuse to start an analysis of the most spread DevOps buzzwords.&lt;br&gt;
PS: you will discover where the terms TricerAtOps come out form.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://betterprogramming.pub/triceratops-why-devops-is-not-only-an-acronym-2177f1cf6bc2"&gt;Link to the full article&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Project Management with GitLab</title>
      <author>Status Hero Editorial Staff</author>
      <pubDate>Wed, 15 Sep 2021 14:59:41 +0000</pubDate>
      <link>https://dev.to/statushero/project-management-with-gitlab-f7l</link>
      <guid>https://dev.to/statushero/project-management-with-gitlab-f7l</guid>
      <description>&lt;p&gt;GitLab is a complete DevOps platform that provides end-to-end capabilities for each stage of the software development lifecycle. It helps teams reduce cycle time and increase productivity, creating value for customers as a result. More recently, GitLab’s use cases are evolving.&lt;/p&gt;

&lt;p&gt;GitLab started as an open-source project to help teams collaborate on software development through source code management, CI/CD, and monitoring. Now, it offers useful project management features for teams too.&lt;/p&gt;

&lt;p&gt;This article explores the tools GitLab offers for project management, and how to get the most out of them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#gitlab-project-management"&gt;
  &lt;/a&gt;
  GitLab Project Management
&lt;/h2&gt;

&lt;p&gt;GitLab enables an integrated project management environment tailored to you, irrespective of which formal &lt;a href="https://statushero.com/blog/comparing-scrum-kanban-lean/"&gt;Agile framework&lt;/a&gt; you’re using: Scrum, Kanban, Lean—or your own alternative.&lt;/p&gt;

&lt;p&gt;In GitLab, you can manage issues, visualize the status of work across your cycles, and track effort and resolution priority just like you would with dedicated project management applications.&lt;/p&gt;

&lt;p&gt;Let’s break down some of the key project management features GitLab offers:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#projects"&gt;
  &lt;/a&gt;
  Projects
&lt;/h3&gt;

&lt;p&gt;GitLab projects are used to organize your work and host your codebase. You can create a project to track issues, plan work, collaborate on code, and continuously build, test, and use built-in CI/CD to deploy your app. Projects can be made available publicly, internally, or privately, with no limit on the number of private projects that can be created.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#groups"&gt;
  &lt;/a&gt;
  Groups
&lt;/h3&gt;

&lt;p&gt;A GitLab group is a collection of several projects, essentially functioning like a folder. You can also use groups to manage permissions for your projects. If someone has access to a particular group, they can access all of the projects within it. Plus, you can view all of the issues and merge requests for the projects in a particular group, and access analytics that show group activity. Groups allow you to communicate with all group members at once, and subgroups can be created for larger organizations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#boards"&gt;
  &lt;/a&gt;
  Boards
&lt;/h3&gt;

&lt;p&gt;A GitLab board allows you to organize a workflow your team can use to easily manage their work. Boards show you the issues being worked on, who is assigned to each issue, and where issues are in the workflow. On your board, issues appear as cards in vertical lists which teams can move across lanes to reflect where work currently is in the workflow. Boards work seamlessly with Scrum and Kanban methodologies, and multiple boards can be created within the same project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z7vTAA_t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/9VVPJ8O.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z7vTAA_t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/9VVPJ8O.png" alt="A diagram showing a GitLab board"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#issues"&gt;
  &lt;/a&gt;
  Issues
&lt;/h3&gt;

&lt;p&gt;GitLab issues are a fundamental artifact of its project management tool; they allow you to define a single feature that delivers value to users. Your team can then use a created issue to collaborate on ideas, solve problems, and plan work. Issues are always created on a specific project and can be shared and collaborated on with people outside your organization. &lt;/p&gt;

&lt;p&gt;GitLab recommends some different use cases for issues:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Discussing the implementation of an idea&lt;/li&gt;
&lt;li&gt;  Tracking tasks and work status&lt;/li&gt;
&lt;li&gt;  Accepting feature proposals, questions, support requests, or bug reports&lt;/li&gt;
&lt;li&gt;  Elaborating on code implementations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Issues can be assigned to indicate who is working on them—each issue can have multiple assignees.&lt;/p&gt;

&lt;p&gt;When creating an issue you can set its due dates, importance, confidentiality, dependencies on other issues, link it to another issue, and add task lists.&lt;/p&gt;

&lt;p&gt;You can also create issues via email to receive issue tickets from people without access to your GitLab instance.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CrgXANDu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/jl5k3hD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CrgXANDu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/jl5k3hD.png" alt="A diagram showing a GitLab board"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#epics"&gt;
  &lt;/a&gt;
  Epics
&lt;/h3&gt;

&lt;p&gt;GitLab epics allow you to group issues that share a common theme across projects and milestones; this enables you to manage your portfolio of projects more efficiently. Example epics could include Security, GraphQL upgrades, or User Onboarding.&lt;/p&gt;

&lt;p&gt;GitLab recommends using epics for the following scenarios:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  When your team is working on a large feature involving multiple discussions in different issues on different projects in a group.
&lt;/li&gt;
&lt;li&gt;  To track when work for a group of issues is targeted to begin and end.&lt;/li&gt;
&lt;li&gt;  To discuss and collaborate on feature ideas and scope at a high level.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#labels"&gt;
  &lt;/a&gt;
  Labels
&lt;/h3&gt;

&lt;p&gt;GitLab labels make it easier to keep track of your issues and projects within GitLab, especially as your organization grows and you use GitLab for longer. Labels allow you to tag your work in a flexible way, which allows you to easily track and find items you’re interested in. &lt;/p&gt;

&lt;p&gt;GitLab recommends these use cases for labels:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Categorize epics, issues, and merge requests using colors and descriptive titles like bug, feature request, or docs.
&lt;/li&gt;
&lt;li&gt;  Dynamically filter and manage epics, issues, and merge requests.&lt;/li&gt;
&lt;li&gt;  Search lists of issues, merge requests, and epics—as well as issue boards.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_pdPjA6c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/E6T6t2r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_pdPjA6c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/E6T6t2r.png" alt="A diagram showing a GitLab board"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#burndown-charts"&gt;
  &lt;/a&gt;
  Burndown Charts
&lt;/h3&gt;

&lt;p&gt;GitLab burndown charts allow you to see your completion progress of a milestone. GitLab plots this for you in a clear and well-presented chart. You will be able to track your work in real-time and identify any risk of delays much earlier.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M8IwaAfU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/sTQqfiu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M8IwaAfU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/sTQqfiu.png" alt="A diagram showing a GitLab board"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#milestones"&gt;
  &lt;/a&gt;
  Milestones
&lt;/h3&gt;

&lt;p&gt;GitLab milestones allow you to create a cycle and set timeframes of when work will begin and end. GitLab tracks issues and merge requests to achieve this. In practice, you give a milestone a title, with an optional start date and optional due date. Milestones can be used to track Agile sprints or releases.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dbfxnfXM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/QfLc82m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dbfxnfXM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/QfLc82m.png" alt="A diagram showing a GitLab roadmap"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#roadmaps"&gt;
  &lt;/a&gt;
  Roadmaps
&lt;/h3&gt;

&lt;p&gt;A roadmap visualizes upcoming work in your product development workflow. They allow everyone to have the same understanding and improve communication for projects currently in progress. &lt;/p&gt;

&lt;p&gt;Teams use roadmaps to outline future product functionality, as well as the release of new features. GitLab’s roadmap displays epics and milestones in a group containing a start date or due date—visualized in the form of a timeline. On each epic in the roadmap, you can view the epic’s title, start date, due date, and completed weight percentage.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--grock1DY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/BJZiY8M.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--grock1DY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/BJZiY8M.png" alt="A diagram showing a GitLab roadmap"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wikis"&gt;
  &lt;/a&gt;
  Wikis
&lt;/h3&gt;

&lt;p&gt;GitLab’s wiki is a documentation tool that allows you to keep documentation in the same project as your codebase. Each GitLab project has its own wiki. Every wiki is a separate Git repository, so you can create wiki pages in the web interface, or locally using Git. Agile teams can also use a wiki to store their cycle’s retrospective meetings history.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#traceability"&gt;
  &lt;/a&gt;
  Traceability
&lt;/h3&gt;

&lt;p&gt;GitLab provides automated linking of issues to the current state of your code through merge requests where developers implement and deliver the code changes. This is a powerful project management feature for visibility. &lt;/p&gt;

&lt;p&gt;In the description of a merge request, developers can link to an issue using its ID. They can then use helpers that let GitLab know the merge request is part of the work for the issue. Alternatively, it could be the final piece of work required and the issue will automatically close once the merge request is released. This automated project management ensures boards are always reflecting work progress accurately.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q-uVz9YH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/HNbyLP4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q-uVz9YH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/HNbyLP4.png" alt="A diagram showing a GitLab board"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#larger-organizations"&gt;
  &lt;/a&gt;
  Larger Organizations
&lt;/h3&gt;

&lt;p&gt;GitLab’s project management tools support large organizations too; they can organize multiple Agile teams to achieve enterprise Agile scalability. Scaled Agile methodologies that large organizations might be using include: &lt;a href="https://www.scaledagileframework.com/"&gt;Scaled Agile Framework (SAFe)&lt;/a&gt;, &lt;a href="https://www.atlassian.com/agile/agile-at-scale/spotify"&gt;Spotify&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Disciplined_agile_delivery"&gt;Disciplined Agile Delivery&lt;/a&gt;, and more. All of these can be supported with GitLab’s project management solutions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tools-you-can-use"&gt;
  &lt;/a&gt;
  Tools You Can Use
&lt;/h2&gt;

&lt;p&gt;GitLab project management gets a lot easier once you connect it to a project management tool that organizes data inside GitLab. Let’s explore some of the tools you can use:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#slack"&gt;
  &lt;/a&gt;
  Slack
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://slack.com/"&gt;Slack&lt;/a&gt; is a workplace communication platform that provides a single place for messaging, tools, and files. &lt;/p&gt;

&lt;p&gt;GitLab allows you to easily add a Slack notification service to your project. This makes use of webhooks, notifying your team whenever a new issue or merge request is opened or closed. &lt;/p&gt;

&lt;p&gt;You can also configure Slack to control GitLab directly inside your chat client using slash commands. This can be useful if you want to trigger any actions on your GitLab quickly through your chat application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#status-hero"&gt;
  &lt;/a&gt;
  Status Hero
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://statushero.com/"&gt;Status Hero&lt;/a&gt; is a work communication tool that turns asynchronous check-ins and project management data into concise, insightful reports. It eliminates time-consuming meetings, shoulder taps, digging for data, and other interruptions so you can focus on your core responsibilities.&lt;/p&gt;

&lt;p&gt;When you connect your Status Hero team and GitLab repos, Status Hero will automatically include team members’ commits and merge request updates with their check-ins. You and your team can also view, filter, and cross-reference real-time pushes and merge requests.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KLkeOcDw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Dy8lVUg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KLkeOcDw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Dy8lVUg.png" alt="Status Hero and GitLab"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Development teams continue to accelerate value delivery with iterative, incremental, and lean project methodologies like Scrum, Kanban, and Extreme Programming (XP).&lt;/p&gt;

&lt;p&gt;This article has shown you how GitLab can provide more value than source code management, CI/CD, and monitoring. GitLab is now a powerful project management platform, irrespective of which methodology is being used by your team. This allows teams to have everything they need—all in one place.&lt;/p&gt;

&lt;p&gt;Using GitLab for project management results in way less process compared to an Agile project management application. As a result, it's easier for developers and project managers to manage their projects, freeing up time to allocate elsewhere.&lt;/p&gt;

&lt;p&gt;To optimize your project management process, supportive tools like Status Hero can integrate with GitLab to further boost your team’s capabilities.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;By Tanaka Mutakwa. Tanaka is a technology leader who is driven to help software engineers have fulfilling careers. He has a passion for technology, leadership, and building high-performing teams.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>gitlab</category>
      <category>git</category>
      <category>projectmanagement</category>
    </item>
    <item>
      <title>Mastering Flutter: Animations Part 2</title>
      <author>TheOtherDev/s</author>
      <pubDate>Wed, 15 Sep 2021 14:58:42 +0000</pubDate>
      <link>https://dev.to/theotherdevs/mastering-flutter-animations-part-2-46fk</link>
      <guid>https://dev.to/theotherdevs/mastering-flutter-animations-part-2-46fk</guid>
      <description>&lt;p&gt;This is the second part of a series of tutorials to build animations with Flutter. In this pat we will learn how to use the &lt;code&gt;Animations&lt;/code&gt; and &lt;code&gt;AnimationControllers&lt;/code&gt;, to build more precise animations.&lt;/p&gt;

&lt;p&gt;The final result will be like this video, you can find the asset of the image that we've used here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zqJ-6aHL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/voc5lebyjf4vzwokao8h.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zqJ-6aHL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/voc5lebyjf4vzwokao8h.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first thing that we need to do is to create our Ghost Widget that we will use to build the animation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:flutter/material.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Ghost&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;StatelessWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Ghost&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;key:&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Container&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;width:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="nl"&gt;height:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;asset&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;'images/ghost.png'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;fit:&lt;/span&gt; &lt;span class="n"&gt;BoxFit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;contain&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, let's create a Stateful Widget that will represent our Scaffold, with the Ghost in the center of the screen.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:flutter/material.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'ghost.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AnimationsScaffold&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;StatefulWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;AnimationsScaffold&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;key:&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;_AnimationsScaffoldState&lt;/span&gt; &lt;span class="n"&gt;createState&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_AnimationsScaffoldState&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;_AnimationsScaffoldState&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;AnimationsScaffold&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Scaffold&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;appBar:&lt;/span&gt; &lt;span class="n"&gt;AppBar&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;title:&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Animations'&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="nl"&gt;body:&lt;/span&gt; &lt;span class="n"&gt;Center&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Ghost&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="nl"&gt;floatingActionButton:&lt;/span&gt; &lt;span class="n"&gt;FloatingActionButton&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Start'&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="nl"&gt;onPressed:&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{},&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you analyze the final result that we want to obtain you can see that we have 2 animations.&lt;br&gt;
We need to change the position and the scale of our ghost, together.&lt;br&gt;
So we will need 2 animations and one animation controller to control them.&lt;br&gt;
Let's define and initialize them in our state.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;_AnimationsScaffoldState&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;AnimationsScaffold&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;TickerProviderStateMixin&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;late&lt;/span&gt; &lt;span class="n"&gt;AnimationController&lt;/span&gt; &lt;span class="n"&gt;_animationController&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;late&lt;/span&gt; &lt;span class="n"&gt;Animation&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_positionAnimation&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;late&lt;/span&gt; &lt;span class="n"&gt;Animation&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_scaleAnimation&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;initState&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;totalAnimationDuration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;_animationController&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AnimationController&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;vsync:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="nl"&gt;duration:&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Duration&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;seconds:&lt;/span&gt; &lt;span class="n"&gt;totalAnimationDuration&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;_positionAnimation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Tween&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="nl"&gt;begin:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nl"&gt;end:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;animate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="n"&gt;CurvedAnimation&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;parent:&lt;/span&gt; &lt;span class="n"&gt;_animationController&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;curve:&lt;/span&gt; &lt;span class="n"&gt;Interval&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="mf"&gt;0.35&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="nl"&gt;curve:&lt;/span&gt; &lt;span class="n"&gt;Curves&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;linear&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;_scaleAnimation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TweenSequence&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;(&lt;/span&gt;
      &lt;span class="o"&gt;[&lt;/span&gt;
        &lt;span class="n"&gt;TweenSequenceItem&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;tween:&lt;/span&gt; &lt;span class="n"&gt;Tween&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;begin:&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nl"&gt;end:&lt;/span&gt; &lt;span class="mf"&gt;1.25&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="nl"&gt;weight:&lt;/span&gt; &lt;span class="mf"&gt;35.0&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;TweenSequenceItem&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;tween:&lt;/span&gt; &lt;span class="n"&gt;Tween&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;begin:&lt;/span&gt; &lt;span class="mf"&gt;1.25&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nl"&gt;end:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="nl"&gt;weight:&lt;/span&gt; &lt;span class="mf"&gt;65.0&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="o"&gt;],&lt;/span&gt;
    &lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;animate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="n"&gt;CurvedAnimation&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;parent:&lt;/span&gt; &lt;span class="n"&gt;_animationController&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;curve:&lt;/span&gt; &lt;span class="n"&gt;Curves&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;linear&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;_animationController&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;forward&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;initState&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;dispose&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;_animationController&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;dispose&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;dispose&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see the &lt;code&gt;AnimationController&lt;/code&gt; object needs a async property with is an object that conforms to &lt;code&gt;TickerProvider&lt;/code&gt;, we can use our state object declaring the &lt;code&gt;TickerProviderStateMixin&lt;/code&gt; mixin.&lt;br&gt;
We've defined the position animation that goes from 0 to 1 in the first 35% part of the duration of the whole animation. &lt;br&gt;
Then we've defined the scale animation that goes from 0 to 1.25 in the first 35% part of the animation (using the weight parameter) and then it scales back from 1.25 to 1.0 in the rest 65%.&lt;br&gt;
Note that we need to dispose the animation controller in the dispose method of our widget.&lt;/p&gt;

&lt;p&gt;Now let's use those animations in our build method, using an &lt;code&gt;AnimatedBuilder&lt;/code&gt;. The &lt;code&gt;AnimatedBuilder&lt;/code&gt; takes the animation object as a parameter (we're using the animation controller) and a builder that will be called when the values of the animations are updated.&lt;br&gt;
It has also a &lt;code&gt;child&lt;/code&gt; parameter, that will be passed in the builder function, to prevent unnecessary builds, we're using the &lt;code&gt;Ghost&lt;/code&gt; widget here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="o"&gt;...&lt;/span&gt;
      &lt;span class="nl"&gt;body:&lt;/span&gt; &lt;span class="n"&gt;Stack&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;children:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;
          &lt;span class="n"&gt;AnimatedBuilder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="nl"&gt;animation:&lt;/span&gt; &lt;span class="n"&gt;_animationController&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="nl"&gt;builder:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
              &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;initialPositionY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;cardSize&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
              &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;finalPositionY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
                  &lt;span class="n"&gt;MediaQuery&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;height&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;cardSize&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
              &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Positioned&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                &lt;span class="nl"&gt;bottom:&lt;/span&gt; &lt;span class="n"&gt;initialPositionY&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                    &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;finalPositionY&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;initialPositionY&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
                        &lt;span class="n"&gt;_positionAnimation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                &lt;span class="nl"&gt;left:&lt;/span&gt; &lt;span class="n"&gt;MediaQuery&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;width&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;cardSize&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Transform&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;scale&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                  &lt;span class="nl"&gt;scale:&lt;/span&gt; &lt;span class="n"&gt;_scaleAnimation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                  &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                &lt;span class="o"&gt;),&lt;/span&gt;
              &lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="o"&gt;},&lt;/span&gt;
            &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Ghost&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
          &lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="o"&gt;],&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We're done! 🎉&lt;br&gt;
We have our animation that starts when the Widget is created.&lt;br&gt;
The only little piece that's missing is to connect the floating action button to restart the animation. There's nothing as easy as this: you just need to call the reset function of the animation controller and then the forward function to start the animation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;      &lt;span class="nl"&gt;floatingActionButton:&lt;/span&gt; &lt;span class="n"&gt;FloatingActionButton&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Start'&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="nl"&gt;onPressed:&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
          &lt;span class="n"&gt;_animationController&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;reset&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
          &lt;span class="n"&gt;_animationController&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;forward&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;},&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Want to check new Flutter tutorials every week? Look at &lt;a href="https://theotherdevs.com/mastering-flutter/"&gt;our site&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>dart</category>
      <category>flutter</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Released an app to train facial expressions: Multilingual in Next.js, dynamic OGP, facial expression recognition in face-api.js</title>
      <author>Yuiko Ito</author>
      <pubDate>Wed, 15 Sep 2021 14:39:33 +0000</pubDate>
      <link>https://dev.to/yuikoito/released-an-app-to-train-facial-expressions-multilingual-in-next-js-dynamic-ogp-facial-expression-recognition-in-face-api-js-58ie</link>
      <guid>https://dev.to/yuikoito/released-an-app-to-train-facial-expressions-multilingual-in-next-js-dynamic-ogp-facial-expression-recognition-in-face-api-js-58ie</guid>
      <description>&lt;p&gt;Hi guys, I wrote &lt;a href="https://dev.to/yuikoito/developed-the-app-which-trains-your-facial-expressions-face-api-js-next-js-typescript-1ghb"&gt;Developed the app which trains your facial expressions: face-api.js + Next.js + TypeScript&lt;/a&gt; last week, and this week I updated the app, which you can train your face expressions and released it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6OiXCrZV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m044e0u1bfwyukwpy7uy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6OiXCrZV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m044e0u1bfwyukwpy7uy.gif" alt="Videotogif (1)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The main updates are as follows&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Support for multiple languages&lt;/li&gt;
&lt;li&gt;Added the ability to select the difficulty level&lt;/li&gt;
&lt;li&gt;Dynamic OGP support&lt;/li&gt;
&lt;li&gt;Allowing users to move on if they succeed&lt;/li&gt;
&lt;li&gt;Overall design update&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The entire code is below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/yuikoito/face-expression-challenge"&gt;https://github.com/yuikoito/face-expression-challenge&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;URL: &lt;a href="https://face-expression-challenge.vercel.app/"&gt;https://face-expression-challenge.vercel.app/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enable-to-select-the-difficulty-level"&gt;
  &lt;/a&gt;
  Enable to select the difficulty level.
&lt;/h2&gt;

&lt;p&gt;I thought it would be undesirable to have the same difficulty level every time, so I made it possible to choose the difficulty level.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q-jy8Cfu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z2s6rlqzft6zigiof4uy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q-jy8Cfu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z2s6rlqzft6zigiof4uy.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can choose between &lt;strong&gt;easy&lt;/strong&gt;, &lt;strong&gt;normal&lt;/strong&gt;, &lt;strong&gt;hard&lt;/strong&gt;, and &lt;strong&gt;devil&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In addition to changing the time for each difficulty, I also changed the threshold value to make the judgment itself tougher.&lt;/p&gt;

&lt;p&gt;In the part where the expression is obtained, the threshold is used as shown below. (I used detectSingleFace from now on)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;detectionsWithExpression&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;faceapi&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;detectSingleFace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;faceapi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TinyFaceDetectorOptions&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;withFaceExpressions&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;detectionsWithExpression&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;detectionsWithExpression&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expressions&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;scoresArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;expressionsArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;scoresArray&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;scoresArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findIndex&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;score&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;score&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;expression&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;expressionsArray&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="nx"&gt;expression&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;subject&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
          &lt;span class="c1"&gt;// Don't make a decision unless it's above the specified threshold here.&lt;/span&gt;
          &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nx"&gt;levelConfig&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;level&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;threshold&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;clearInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;intervalHandler&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="nx"&gt;setIsMatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="nx"&gt;setStage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;result&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#when-succeeded-move-on-to-next-subject"&gt;
  &lt;/a&gt;
  When succeeded, move on to next subject.
&lt;/h2&gt;

&lt;p&gt;Originally, I gave the subject for 1.5 seconds and then judged it after 1.5 seconds, but I decided to make users move on to next subject when succeeded.&lt;/p&gt;

&lt;p&gt;So, after 1.5 seconds of presentation, I added a 3-second time limit, and if the facial expressions matched well within that time, you can move on to the next topic.&lt;/p&gt;

&lt;p&gt;Even if no match is found, if no match can be made within 3 seconds, the next step is taken.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dynamic-ogp-support"&gt;
  &lt;/a&gt;
  Dynamic OGP Support
&lt;/h2&gt;

&lt;p&gt;The results are now dynamic OGP, which makes it easier to understand when they are shared.&lt;/p&gt;

&lt;p&gt;It's a simple structure with a background image and text.&lt;br&gt;
To display the background image, I imported and used &lt;strong&gt;loadImage&lt;/strong&gt; from within canvas.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;backgroundImage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;loadImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./images/background.jpg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;drawImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;backgroundImage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;WIDTH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;HEIGHT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#multilingual-support"&gt;
  &lt;/a&gt;
  Multilingual support
&lt;/h2&gt;

&lt;p&gt;Next.js has i18n built-in since v10, so it can be multilingualized without importing anything.&lt;/p&gt;

&lt;p&gt;The dictionary files are prepared as a TypeScript file, and the files called useTranslate.ts in which it is determined which one to load depending on the language.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next/router&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;JaTexts&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../locales/ja&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;EnTexts&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../locales/en&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useTranlate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;locale&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;locale&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ja&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;JaTexts&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;EnTexts&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;useTranlate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then don't forget to set the following settings in next.config.js.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;  &lt;span class="nx"&gt;i18n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;locales&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;en&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ja&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nx"&gt;defaultLocale&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;en&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the first time I noticed that only the top page is automatically rolled back to the file in that language...&lt;/p&gt;

&lt;p&gt;I wanted to make the OGP part multilingual as well, depending on whether the share URL is in English or Japanese, so I made it so that when you share, the locale parameter is left in the share URL. (If the URL is in Japanese, the share URL will be &lt;code&gt;/ja/share...&lt;/code&gt;) )&lt;/p&gt;

&lt;p&gt;After that, the overall design was improved and released.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thats-it"&gt;
  &lt;/a&gt;
  That's it!
&lt;/h2&gt;

&lt;p&gt;This article is the 17th week of trying to write at least one article every week.&lt;/p&gt;

&lt;p&gt;If you'd like, please take a look at my previous weekly posts!&lt;br&gt;
See you soon!&lt;/p&gt;

&lt;p&gt;🍎🍎🍎🍎🍎🍎&lt;/p&gt;

&lt;p&gt;Please send me a message if you need.&lt;/p&gt;

&lt;p&gt;&lt;a href="mailto:yuiko.dev@gmail.com"&gt;yuiko.dev@gmail.com&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/yui_active"&gt;https://twitter.com/yui_active&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🍎🍎🍎🍎🍎🍎&lt;/p&gt;

</description>
      <category>tensorflowjs</category>
      <category>nextjs</category>
      <category>typescript</category>
    </item>
  </channel>
</rss>
