<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Anatomy of  a Flutter App</title>
      <author>Praveen Varma</author>
      <pubDate>Mon, 26 Jul 2021 04:22:23 +0000</pubDate>
      <link>https://dev.to/geekyprawins/anatomy-of-a-flutter-app-56g7</link>
      <guid>https://dev.to/geekyprawins/anatomy-of-a-flutter-app-56g7</guid>
      <description>&lt;h2&gt;
  &lt;a href="#widgets-widgets-and-widgets"&gt;
  &lt;/a&gt;
  Widgets, widgets and widgets!
&lt;/h2&gt;

&lt;p&gt;So, as I mentioned before, everything inside a &lt;strong&gt;Flutter&lt;/strong&gt; app is a &lt;em&gt;&lt;a href="https://flutter.dev/docs/development/ui/widgets-intro"&gt;widget&lt;/a&gt;&lt;/em&gt;. And you build widgets upon widgets just like Lego blocks on Lego blocks in order to create your app.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--czph8SdM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uyiacr5px1qcfiu9ffuk.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--czph8SdM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uyiacr5px1qcfiu9ffuk.jpg" alt="lego-blocks"&gt;&lt;/a&gt;&lt;br&gt;
So let's say that we decided to create a brand new app.&lt;/p&gt;

&lt;p&gt;The first thing we might do is we might create a &lt;em&gt;&lt;a href="https://api.flutter.dev/flutter/material/Scaffold-class.html"&gt;Scaffold&lt;/a&gt;&lt;/em&gt;. And this is just a blank screen for our app. And inside the scaffold, we're going to add an app bar at the top. And this is a pre-built widget that simply looks like an app bar and acts like an app bar. And it's also super easy to create.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--agIOr8Xp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n9bnzyhkvc9yjhd9rm08.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--agIOr8Xp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n9bnzyhkvc9yjhd9rm08.png" alt="flutter-appbar-layout"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, the other thing I'm going to put into my scaffold is a container. And this container is just a box and it's going to contain the content of my app. Now, the container is going to have a column. So this is a column. And so now we can put widgets inside the column that stack vertically.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JjBGT4jp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b7kj4tpi4uad58f87e1x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JjBGT4jp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b7kj4tpi4uad58f87e1x.png" alt="flutter-container"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, for example, the first thing I might put into my column - at the top - is a row. And the second thing is - I might put in - a piece of text. So now I have a column with two items - with two widgets: a row at the top and some text at the bottom. Now I can go deeper into my widget tree. And in my row, I'm going to add some text and an icon.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yPZjIhtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gs88debfocogruxizmuf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yPZjIhtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gs88debfocogruxizmuf.png" alt="phone"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So when I want widgets to be positioned vertically - one on top of the other - then I'll use a column to lay them out. If I want widgets to be side by side horizontally, then I'll use a row. And if I wanted to add in a piece of text, then I would use a text widget. If I wanted to add an icon, then I would use an icon widget. If I want to add an image, then I would use an image widget.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sZW9YYg_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wejuwm9psttfnhchij0l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sZW9YYg_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wejuwm9psttfnhchij0l.png" alt="0_7hLwrQ9PjkOa_hFQ"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So you get the point.&lt;/p&gt;

&lt;p&gt;And by the end of building our app, we end up with a widget tree like what you see on the right here&lt;br&gt;
Now, our widget tree is just a whole bunch of widgets that are nested within each other.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KnhBWprc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e1v5kwucqtzxxzrv86vk.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KnhBWprc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e1v5kwucqtzxxzrv86vk.PNG" alt="widgets"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for the read,&lt;br&gt;
Praveen Varma :)&lt;br&gt;
More Flutter repos can be found &lt;a href="https://github.com/geekyprawins"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>android</category>
      <category>ios</category>
      <category>dart</category>
    </item>
    <item>
      <title>Top 5 coolest VsCode Themes you should try.</title>
      <author>Dhruv Bansal</author>
      <pubDate>Mon, 26 Jul 2021 03:50:24 +0000</pubDate>
      <link>https://dev.to/thesmartdeveloper/top-5-coolest-vscode-themes-you-should-try-3031</link>
      <guid>https://dev.to/thesmartdeveloper/top-5-coolest-vscode-themes-you-should-try-3031</guid>
      <description>&lt;h2&gt;
  &lt;a href="#1-shades-of-purple"&gt;
  &lt;/a&gt;
  1) Shades of Purple
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x4HtnrTr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nnxu6bw1se7i7jrzrgba.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x4HtnrTr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nnxu6bw1se7i7jrzrgba.gif" alt="Shades of Purple"&gt;&lt;/a&gt;&lt;br&gt;
If you are a fan of purple, you are absolutely gonna love this theme. It was one of the first 'Shades of X' themes. Nowadays, you can find shades of orange, blue, pink, etc very easily in the Cs Code marketplace. Even if you are not a purple fan, this theme is worth giving a try.&lt;br&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=ahmadawais.shades-of-purple"&gt;Check it out here.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-synthwave-84"&gt;
  &lt;/a&gt;
  2) SynthWave 84
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UsxMes5t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nlm27ew1lx55wt3uedl7.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UsxMes5t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nlm27ew1lx55wt3uedl7.jpeg" alt="SynthWave"&gt;&lt;/a&gt;&lt;br&gt;
If you ever dreamt about neon themes in Vs Code, congrats, because your dreams just came true. This is the neon theme for VS Code, for all the Neon lovers. It can be customized as well as the neon glow can be turned on or off. &lt;br&gt;
According to me(and apparently a lot of other devs), this is the coolest VS Code theme ever developed.&lt;br&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=RobbOwen.synthwave-vscode"&gt;Check it out here.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-cyberpunk-2077-themes"&gt;
  &lt;/a&gt;
  3) Cyberpunk 2077 themes
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zcIK4l2q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cx5rcdkp6saq3o4yifgz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zcIK4l2q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cx5rcdkp6saq3o4yifgz.png" alt="Cyberpunk"&gt;&lt;/a&gt;&lt;br&gt;
This, as the name indicates, is inspired from the Cyberpunk 2077 game which was launched in 2020 last year. It looks super cool and will make you code even more and inspire you every day. It is worth a try.&lt;br&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=max-SS.cyberpunk"&gt;Check it out here.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-material-themes"&gt;
  &lt;/a&gt;
  4) Material Themes
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7BWSnjAC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ve72c4g7u3g3gg79uom.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7BWSnjAC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ve72c4g7u3g3gg79uom.jpeg" alt="Material"&gt;&lt;/a&gt;&lt;br&gt;
This is just a must have, and if you only want to install one theme from all the 5 i am telling about, this would be it. This theme is a collection of several themes flavoured to different styles like material oceanic, material palenight, etc. It merges well with the code and the syntax highlighting looks good.&lt;br&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=Equinusocio.vsc-material-theme"&gt;Check it out here.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-bearded-themes"&gt;
  &lt;/a&gt;
  5) Bearded Themes
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CwIsp3Zq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p4066vpgmy5krxvqyoud.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CwIsp3Zq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p4066vpgmy5krxvqyoud.png" alt="Bearded"&gt;&lt;/a&gt;&lt;br&gt;
Don't get fooled by its fancy name, this theme is a collection of 20 themes for different people and for different needs. It support syntax highlighting well and works well and is quite a  fast one.&lt;br&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=BeardedBear.beardedtheme"&gt;Check it out here.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;There are 1000s of other themes available out there. But i thought these to be the most interesting ones and significantly different ones. So go ahead try out few themes and then go with the ones you love.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CZQgKI9---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/52mnl0jtmx08rt6tztao.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CZQgKI9---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/52mnl0jtmx08rt6tztao.gif" alt="That's a wrap"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#comment-your-favorite-vs-code-themes-below-and-let-me-as-well-as-others-know"&gt;
  &lt;/a&gt;
  Comment your favorite VS Code themes below and let me as well as others know.
&lt;/h2&gt;

&lt;p&gt;ThankYou.&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>themes</category>
      <category>productivity</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>5 Easy Ways To Make Money As A Developer</title>
      <author>Suhail Kakar</author>
      <pubDate>Mon, 26 Jul 2021 03:43:53 +0000</pubDate>
      <link>https://dev.to/suhailkakar/5-easy-ways-to-make-money-as-a-developer-na8</link>
      <guid>https://dev.to/suhailkakar/5-easy-ways-to-make-money-as-a-developer-na8</guid>
      <description>&lt;p&gt;In this article, I’ll show you 5 easy ways to make money as a developer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-freelancing"&gt;
  &lt;/a&gt;
  1. Freelancing
&lt;/h3&gt;

&lt;p&gt;For many developers, freelancing is profitable source of income.  Some people take it as a full-time job, while others do it as a part-time job to earn additional cash. Some platforms like Fiverr, Upwork, and many more offer a great opportunity for anyone to start freelancing, but there is a lot of competition there, so be sure to stand out among them &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--siwkWih---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627268254795/dKcE2b7c5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--siwkWih---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627268254795/dKcE2b7c5.png" alt="image (1).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-sell-an-ebook"&gt;
  &lt;/a&gt;
  2. Sell an Ebook
&lt;/h3&gt;

&lt;p&gt;Writing an ebook is one of those things that may pay off for a long time. You can write a highly useful ebook as a developer that covers a certain topic of software development. Alternatively, you may opt to describe a programming language in such a way that your readers will have a better understanding of it.&lt;/p&gt;

&lt;p&gt;Writing books is also a wonderful method to build your brand and demonstrate your expertise in the area. Once you have completed writing you Ebook, You can start selling it online &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uSTZF7UT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627268654011/BMjFw9Uhx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uSTZF7UT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627268654011/BMjFw9Uhx.png" alt="image (2).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-teach-people"&gt;
  &lt;/a&gt;
  3. Teach People
&lt;/h3&gt;

&lt;p&gt;Teaching other people how to code is the greatest and possibly easiest method to generate money as a developer. You may accomplish this in a variety of ways. The first is to develop and market online course.You may offer courses on your own website or on sites like Udemy and Pluralsight. You can also teach people individually, that can be online or in person. If you teach people in this way, you’ll earn a lot more money. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F5kVkHKA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627269072235/khc8cftxE.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F5kVkHKA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627269072235/khc8cftxE.png" alt="image (3).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-sell-templates"&gt;
  &lt;/a&gt;
  4. Sell Templates
&lt;/h3&gt;

&lt;p&gt;Selling templates is another way to generate money. You may accomplish this by visiting websites such as Themeforest, where anybody can sell their designs for a nominal charge each transaction. Selling online courses is quite similar to this.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Na49H6vO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627269268065/bJsXxylG1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Na49H6vO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627269268065/bJsXxylG1.png" alt="image (4).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-application-development"&gt;
  &lt;/a&gt;
  5. Application Development
&lt;/h3&gt;

&lt;p&gt;As a developer, you may put your coding abilities to use by creating and selling computer and mobile applications. With a solid understanding of Swift, JavaScript Objective-C, you can quickly create a useful iOS application.&lt;/p&gt;

&lt;p&gt;You may profit from it by releasing it on the app store for anybody to download and purchase.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h6Zxt6HE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627269801175/UMHT_PPlmP.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h6Zxt6HE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627269801175/UMHT_PPlmP.png" alt="image (5).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;These are many other ways that you can use to make money as a developer. These are not all the ways that exist, but these are the most easiest ones.&lt;/p&gt;

&lt;p&gt;I hope you found this articles helpful. If you need any help please let me know at comment section&lt;/p&gt;

&lt;p&gt;Let's connect on  &lt;a href="https://twitter.com/suhailkakar"&gt;Twitter&lt;/a&gt;  and  &lt;a href="https://www.linkedin.com/in/suhailkakar/"&gt;LinkedIn&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;👋 Thanks for reading, See you next time&lt;/p&gt;

</description>
      <category>programming</category>
      <category>datascience</category>
      <category>javascript</category>
      <category>python</category>
    </item>
    <item>
      <title>Drop CAP effect / Changing the style of the first letter in a paragraph using CSS.</title>
      <author>Kritika</author>
      <pubDate>Mon, 26 Jul 2021 02:32:23 +0000</pubDate>
      <link>https://dev.to/kritikapattalam/drop-cap-effect-changing-the-style-of-the-first-letter-in-a-paragraph-using-css-4dl3</link>
      <guid>https://dev.to/kritikapattalam/drop-cap-effect-changing-the-style-of-the-first-letter-in-a-paragraph-using-css-4dl3</guid>
      <description>&lt;p&gt;As part of this blog, we are going to see how we can style the first letter of a paragraph different from the remaining words or letter. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-style-the-first-letter-in-a-paragraph"&gt;
  &lt;/a&gt;
  How to style the first letter in a paragraph
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;::first letter is a pseudo element which will apply styles just to the first letter of the first line of any block level element.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;p&amp;gt;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.&amp;lt;/p&amp;gt;
&amp;lt;style&amp;gt;
    p::first-letter {
       font-size: 40px;
       color: orange;
    }
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above piece of code, paragraph tag is a block level element. To the first letter of the paragraph tag which is "L" font-size 40px and color orange would be applied.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gNwm6-ee--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sws4byxpu1az9tgj6cf4.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gNwm6-ee--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sws4byxpu1az9tgj6cf4.jpeg" alt="FIRST-LETTER"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let's see how we can make  a dropcap effect i.e the same first letter big enough such that it as long as three or so lines, and the remaining content just flows around it. This can be done in two ways.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Using CSS initial-letter property&lt;/li&gt;
&lt;li&gt;Adding some customization to the first-letter by adding float, adjusting the line-height and font-size of the letter.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#1-css-initialletter"&gt;
  &lt;/a&gt;
  1. CSS initial-letter
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Using css initial-letter property - you can produce a drop cap effect i.e make the letter occupy specified number of lines in a paragraph.&lt;/li&gt;
&lt;li&gt;This accepts only a positive integer. Eg: In the below snippet, letter "L" will span/sink four lines.&lt;/li&gt;
&lt;li&gt;Note - This is only supported by safari at the moment.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;p::first-letter {
   -webkit-initial-letter: 4;
   initial-letter: 4;
   font-size: 40px;
   color: orange;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qRZ1_JdP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l1rnt048mkzxb6365lmv.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qRZ1_JdP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l1rnt048mkzxb6365lmv.jpeg" alt="initial-letter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-customize-the-font-of-the-firstletter"&gt;
  &lt;/a&gt;
  2. Customize the font of the first-letter
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;p::first-letter {
   float: left;
   font-size: 75px;
   line-height: 60px;
   padding: 3px;
   color: orange;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above piece of code, to the first letter of the paragraph increase the font-size, line-height and float it in such a way that it spans to the number of lines you required. And by adding padding you can adjust the spacing of the first-letter as well.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H1uYs8UC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hwugmfhxnb7kl6t6iare.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H1uYs8UC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hwugmfhxnb7kl6t6iare.jpeg" alt="first-letter-customized"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#are-you-more-of-a-twitter-person-then-you-can-read-the-same-thing-in-the-below-thread"&gt;
  &lt;/a&gt;
  Are you more of a Twitter person?. Then you can read the same thing in the below thread
&lt;/h4&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PokxJe4v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E5ZaYJFX0AgQNYk.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ekBt-sq0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1404918039922057218/ECiKGVPB_normal.jpg" alt="Kritika profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Kritika
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/kritikapattalam"&gt;@kritikapattalam&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      How to style first letter in a paragraph using CSS?.&lt;br&gt;Thread (Thread). &lt;br&gt;&lt;br&gt;&lt;a href="https://twitter.com/hashtag/CSS"&gt;#CSS&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/DEVCommunity"&gt;#DEVCommunity&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/WomenWhoCode"&gt;#WomenWhoCode&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      20:08 PM - 03 Jul 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1411416678827704328" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1411416678827704328" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1411416678827704328" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Now you should know how to &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add styles to just the first letter of a paragraph&lt;/li&gt;
&lt;li&gt;Add a drop cap effect to the first letter using CSS initial property or by customizing the fonts of the first letter.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For browser compatability , check  &lt;a href="https://caniuse.com/"&gt;canisuse.com&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/::first-letter"&gt;first letter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/initial-letter"&gt;initial letter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Follow me on  &lt;a href="https://twitter.com/KritikaPattalam"&gt;Twitter&lt;/a&gt;  | &lt;a href="https://www.linkedin.com/in/kritika-p-296739155/"&gt;LinkedIn&lt;/a&gt; for more web development related tips and posts.&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>html</category>
    </item>
    <item>
      <title>✨🥞 Rust Visualized: The Stack, the Heap, and Pointers</title>
      <author>ender minyard</author>
      <pubDate>Mon, 26 Jul 2021 02:14:12 +0000</pubDate>
      <link>https://dev.to/ender_minyard/rust-visualized-the-stack-the-heap-and-pointers-a5c</link>
      <guid>https://dev.to/ender_minyard/rust-visualized-the-stack-the-heap-and-pointers-a5c</guid>
      <description>&lt;p&gt;The part of your operating system that allocates memory for a program as well as loading its code and data into memory is called a &lt;strong&gt;loader&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;The loader defines four different areas of memory for a program: &lt;em&gt;code&lt;/em&gt;, &lt;em&gt;static&lt;/em&gt;, &lt;em&gt;stack&lt;/em&gt;, and &lt;em&gt;heap&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The static segment contains global variables, the code segment contains machine code, and the stack segment contains local variables that are defined inside functions. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iskBa56y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/htsmaows5pttp2mr9lrp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iskBa56y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/htsmaows5pttp2mr9lrp.png" alt="code snippet"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When the function &lt;code&gt;foo&lt;/code&gt; goes on the call stack, its stack frame must store &lt;code&gt;foo&lt;/code&gt;'s arguments, local variables, and return address. &lt;/p&gt;

&lt;p&gt;The memory layout of a stack frame is fixed, so the size of variables needs to be known at compile time. The size of variables on the stack cannot grow or shrink. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dYOmzcRQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bzvuitthesm20123ejb2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dYOmzcRQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bzvuitthesm20123ejb2.png" alt="memory structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Stacks are a simple but common data structure. Like a pile of pancakes, the last pancakes that go on a stack are the first pancakes to leave the stack. When you add to a stack, you always add to the top.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a2pWihHn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vjsnto1av1q9kacbf7e8.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a2pWihHn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vjsnto1av1q9kacbf7e8.gif" alt="stack frames"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The call stack consists of stack frames, which contain arguments, local variables, and return addresses. Let's look inside the stack frame on the call stack when &lt;code&gt;main&lt;/code&gt; is called.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Sqy7sysM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rm35u7t5w1cbrkgesbgc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sqy7sysM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rm35u7t5w1cbrkgesbgc.png" alt="1o"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we look inside the stack frames on the call stack when &lt;code&gt;foo(y)&lt;/code&gt; is called, we notice that the arguments, local variables, and variable addresses of &lt;code&gt;foo&lt;/code&gt; have been added to the top of the stack. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FY_NV0X4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n8zwdgb0atp0tucqh852.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FY_NV0X4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n8zwdgb0atp0tucqh852.png" alt="2o"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The heap is dedicated to variables whose size is not known at compile time. You have a lot more freedom with variables stored on the heap, but you lose speed. You can control the lifetime of variables on the heap as well as assign them an arbitrary size. &lt;/p&gt;

&lt;p&gt;In Rust, you can allocate memory on the heap using types like &lt;a href="https://doc.rust-lang.org/rust-by-example/std/box.html"&gt;Box&lt;/a&gt; or &lt;a href="https://doc.rust-lang.org/book/vectors.html"&gt;Vec&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;A &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; stores a pointer to heap data on the stack. The type of this Box is type &lt;code&gt;T&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Pointers are an important concept, because we often reference variables in Rust using &lt;code&gt;&amp;amp;&lt;/code&gt; syntax. When you reference a variable, you are pointing to that variable's location in memory.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VNmY-ARK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n90xu57sqmzka0gx9ipt.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VNmY-ARK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n90xu57sqmzka0gx9ipt.gif" alt="borrowing in rust"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>rust</category>
      <category>beginners</category>
      <category>computerscience</category>
      <category>programming</category>
    </item>
    <item>
      <title>Best Nodejs Project For Beginners | Every Beginners should try</title>
      <author>coders</author>
      <pubDate>Mon, 26 Jul 2021 02:10:54 +0000</pubDate>
      <link>https://dev.to/coderzway/best-nodejs-project-for-beginners-every-beginners-should-try-35l3</link>
      <guid>https://dev.to/coderzway/best-nodejs-project-for-beginners-every-beginners-should-try-35l3</guid>
      <description>&lt;p&gt; Node.js&lt;span&gt; is an open-source framework for building real-world server-side and networking applications. It not only allows you to create a dynamic website as it is built on chrome’s JavaScript Runtime. Node.js is widely used to make large scale with rapid development widely used in backend programming. It uses a driven model to allow the creation of highly scalable and lightweight web apps. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;If you’d like to build an impressive portfolio and hone your Node.js skills, we are sharing some project ideas on Node.js focused on beginners that would likely help you get hired.&lt;/p&gt;
&lt;p&gt;Before getting started with coding or building your first project, create a repository for each project, which will be useful as a future reference. Learning some additional frameworks, like Express.js, Nest.js, Socket.io, etc. can make Node.js development more comfortable and faster. &lt;/p&gt;
&lt;p&gt;Here are some of the exciting Node.js project ideas that you can practice to enhance your development skills. &lt;/p&gt;
&lt;p&gt;&lt;b&gt;Please visit originally Published site to read More&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Originally Published&lt;/b&gt;: &lt;b&gt;&lt;span&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/best-nodejs-projects-for-beginners/&amp;amp;ved=2ahUKEwil1-DB0__xAhWB73MBHZ14DNMQFjAJegQIGxAC&amp;amp;usg=AOvVaw3RB4VpwDtt1caJIyiSk34S&amp;amp;cshid=1627265362788"&gt;Node Js Project For Beginners&lt;/a&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;











</description>
      <category>javascript</category>
    </item>
    <item>
      <title>Host your static site in AWS</title>
      <author>Paschal Maximillian</author>
      <pubDate>Mon, 26 Jul 2021 01:56:32 +0000</pubDate>
      <link>https://dev.to/pascal488/host-your-static-site-in-aws-272b</link>
      <guid>https://dev.to/pascal488/host-your-static-site-in-aws-272b</guid>
      <description>&lt;p&gt;REQUIREMENTS&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An AWS account&lt;/li&gt;
&lt;li&gt;Your smile face :)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#so-you-are-going-to-host-your-site-to-a-service-know-as-aws-s3"&gt;
  &lt;/a&gt;
  So you are going to host your site to a service know as AWS S3
&lt;/h4&gt;

&lt;p&gt;What is AWS S3?&lt;br&gt;
S3 stand for {Simple storage solution}&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So S3 is&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A place that you can store objects&lt;br&gt;
The service simply store stuffs,more specifically objects&lt;br&gt;
Object can be things like images files,Html documents files,Css files and javascript files&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#how-to-work-with-s3-management-console"&gt;
  &lt;/a&gt;
  How to work with S3 management console
&lt;/h4&gt;

&lt;p&gt;1.In search bar type the word (S3)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mYPupEgy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wchgo413hk8vou67lyrc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mYPupEgy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wchgo413hk8vou67lyrc.png" alt="As shown here"&gt;&lt;/a&gt;&lt;br&gt;
Select the first S3 shown and click to it hopefully you should see now the S3 management console..as a below picture&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z6LoLmsY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7fn5fwrb2f50uibig9vi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z6LoLmsY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7fn5fwrb2f50uibig9vi.png" alt="As it here"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.Now you already navigate to a S3 management console you can see a button says create bucket&lt;br&gt;
&lt;strong&gt;S3 is composed of buckets&lt;/strong&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;S3 bucket is basically a container where we put in files.&lt;br&gt;
Think a bucket as a drive in a computer&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Click on create bucket&lt;/li&gt;
&lt;li&gt;Then enter a unique name for your bucket (nospaceallowed)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;After inputting a unique name for a bucket now scroll down to the section named as PUBLIC ACCESS SETTING then UNCHECK the checkbox named block all public access and then further down CHECK to the acknowledge the warning box that will appear..&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Click a create button at a bottom,if your name was unique then boom you just made a AWS S3 bucket&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;3.Back to S3 console management and navigate to your created bucket then click to it&lt;br&gt;
&lt;em&gt;Now you are going to upload actual files in your S3 buckets&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Click to an upload button&lt;/li&gt;
&lt;li&gt;Select the needed files/Folder&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Scroll down to the section called Permissions as shown in a picture below and click to it you need to custom some permissions.&lt;br&gt;
Again to a section &lt;strong&gt;Everyone (public access)&lt;/strong&gt; check to  read checkboxs&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8rB-rfPv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mr7hw4zhmg7ss7vklhno.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8rB-rfPv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mr7hw4zhmg7ss7vklhno.png" alt="Permissions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also check to the acknowledge the warning box that will appear..&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bGigjGFS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6t2n9c3yswjaslm2174e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bGigjGFS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6t2n9c3yswjaslm2174e.png" alt="Warning"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Scroll down the rest of way and click the apload button&lt;/p&gt;

&lt;p&gt;After successfully upload some files back to S3  console management and select a your bucket then you will see as a picture show below..&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UoyCUyf0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8sr0hegstyjxh9ys6z6t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UoyCUyf0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8sr0hegstyjxh9ys6z6t.png" alt="Below"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Click on Properties tab&lt;/li&gt;
&lt;li&gt;Scroll down untill you find a section 'Static web hosting'&lt;/li&gt;
&lt;li&gt;Enable static web hosting and enter required input that will show up&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dkCpcHQ0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sebgdro1tq7jgygu6ovh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dkCpcHQ0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sebgdro1tq7jgygu6ovh.png" alt="Star"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After successfully enable hosting scroll again to 'Static web hosting'&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Then you will find out a link as a picture below&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7s8LjUaD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yxsruzy4s1v7y3bb96p6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7s8LjUaD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yxsruzy4s1v7y3bb96p6.png" alt="Below"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hopefully your site now is deployed to AWS &lt;a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/WebsiteHosting.html"&gt;Learn more here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thanks-if-you-reach-out-to-the-end"&gt;
  &lt;/a&gt;
  Thanks if you reach out to the end
&lt;/h3&gt;

&lt;p&gt;Lets connect here is my &lt;a href="https://www.linkedin.com/in/paschal-maximillian-00b558196/"&gt;linkedin profile&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>You Complete Guide To Set Object In Javascript</title>
      <author>Aya Bouchiha</author>
      <pubDate>Mon, 26 Jul 2021 01:18:12 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/you-complete-guide-to-set-object-in-javascript-12gc</link>
      <guid>https://dev.to/ayabouchiha/you-complete-guide-to-set-object-in-javascript-12gc</guid>
      <description>&lt;p&gt;Hi everybody, I'm &lt;a href="https://t.me/AyaBouchiha"&gt;Aya Bouchiha&lt;/a&gt;, on this amazing day, we will talk about &lt;strong&gt;all Set Methods and Properities&lt;/strong&gt; like &lt;em&gt;has()&lt;/em&gt;, &lt;em&gt;add()&lt;/em&gt;, &lt;em&gt;size&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#definition-of-a-set"&gt;
  &lt;/a&gt;
  Definition of a Set
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Set&lt;/strong&gt;: is a collection of items and a built-in object, which stores only unique values.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#set-constructor"&gt;
  &lt;/a&gt;
  Set Constructor
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hIRR3pX_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6wddlmk7kgu77jifzunh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hIRR3pX_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6wddlmk7kgu77jifzunh.png" alt="Aya Bouchiha Set Constructor"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#iteration-over-a-set-using-for-of-loop"&gt;
  &lt;/a&gt;
  Iteration over a Set using For of loop
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uAEnGVys--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c2k2itodcxq3dd0p38xr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uAEnGVys--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c2k2itodcxq3dd0p38xr.png" alt="Aya Bouchiha Set in Javascript"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#size-property"&gt;
  &lt;/a&gt;
  Size Property
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;size&lt;/strong&gt;: is a set property that returns the length of the unique items in a specified set.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hQli8Wzo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xmaq7e43w4l4rh50slxq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hQli8Wzo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xmaq7e43w4l4rh50slxq.png" alt="Aya Bouchiha Size properity"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#set-methods"&gt;
  &lt;/a&gt;
  Set Methods
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#setprototypeadd"&gt;
  &lt;/a&gt;
  Set.prototype.add()
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;add(valueToAdd)&lt;/strong&gt;: is a set method that lets you add a new element to the specified Set.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IX0P4_08--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j3cx51i841zsk18zc0ll.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IX0P4_08--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j3cx51i841zsk18zc0ll.png" alt="Aya Bouchiha Set Methods"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setprototypedelete"&gt;
  &lt;/a&gt;
  Set.prototype.delete()
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;delete(valueToDelete)&lt;/strong&gt;: is a set method that lets you  remove an element in a specified Set.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PcNBlDBq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4yzm7d5w0hruuj8ow56y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PcNBlDBq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4yzm7d5w0hruuj8ow56y.png" alt="Aya Bouchiha Set Methods (33)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setprototypeclear"&gt;
  &lt;/a&gt;
  Set.prototype.clear()
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;clear()&lt;/strong&gt;: means deleting all set elements.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SvzG97Ws--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1lzwmpuo4vv00te29853.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SvzG97Ws--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1lzwmpuo4vv00te29853.png" alt="Aya Bouchiha Set Methods"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setprototypehas"&gt;
  &lt;/a&gt;
  Set.prototype.has()
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;has(valueToCheck)&lt;/strong&gt;: cheks if the given value exists in a set.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G5gIqnF_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b38xh55k4c8zwjwia28p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G5gIqnF_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b38xh55k4c8zwjwia28p.png" alt="Aya Bouchiha Set Methods"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setprototypeentries"&gt;
  &lt;/a&gt;
  Set.prototype.entries()
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;entries()&lt;/strong&gt;: returns an array(&lt;em&gt;iterator&lt;/em&gt;) [val, val] for each item in the specified Set.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ON0mXnUR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r8xkvndshzfjj250v2i0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ON0mXnUR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r8xkvndshzfjj250v2i0.png" alt="Aya Bouchiha Set Methods"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setprototypevalues"&gt;
  &lt;/a&gt;
  Set.prototype.values()
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;values()&lt;/strong&gt;: like &lt;em&gt;keys()&lt;/em&gt;, It returns a new iterator object which contains the values for each element in the specified Set.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5SmU53RF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jle52cfa0s37vri3scwi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5SmU53RF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jle52cfa0s37vri3scwi.png" alt="Aya Bouchiha Set Methods"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setprototypeforeach"&gt;
  &lt;/a&gt;
  Set.prototype.forEach()
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;forEach(callback)&lt;/strong&gt;: this Set method invokes a callback for each element in the specified Set.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---0YxJQ80--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sexbcdpx5m9jnet7yok9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---0YxJQ80--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sexbcdpx5m9jnet7yok9.png" alt="Aya Bouchiha Set Methods"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;size&lt;/strong&gt;:returns the length of the unique items in a specified set.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;add(valueToAdd)&lt;/strong&gt;: lets you to add a new element to the specified Set.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;delete(valueToDelete)&lt;/strong&gt;:lets you  remove an element in a specified Set.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;clear()&lt;/strong&gt;: delete all Set elements.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;has(valueToCheck)&lt;/strong&gt;: cheks if the given value exists in a set.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;entries()&lt;/strong&gt;: returns an array(&lt;em&gt;iterator&lt;/em&gt;) [val, val] for each item in the specified Set.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;values()&lt;/strong&gt;: returns a new iterator object which contains the values for each element in the specified Set.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;forEach(callback)&lt;/strong&gt;: invokes a callback for each element in the specified Set.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Have a great day!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;email: &lt;a href="mailto:developer.aya.b@gmail.com"&gt;developer.aya.b@gmail.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;telegram: &lt;a href="https://t.me/AyaBouchiha"&gt;Aya Bouchiha&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Why typeof(null) is "object"?</title>
      <author>Sourav Debnath</author>
      <pubDate>Mon, 26 Jul 2021 00:11:21 +0000</pubDate>
      <link>https://dev.to/_ravo_lution/why-typeof-null-is-object-181</link>
      <guid>https://dev.to/_ravo_lution/why-typeof-null-is-object-181</guid>
      <description>&lt;h1&gt;
  &lt;a href="#context"&gt;
  &lt;/a&gt;
  Context👀
&lt;/h1&gt;

&lt;p&gt;If you are a developer dealing with `JavaScript` on a daily basis then it is very likely to assume that you have at least heard about the typeof operator. As we know the syntax of the `typeof` operator is followed by it's `operand` which is an expression representing the `object` or `primitive` whose type is to be returned.&lt;/p&gt;

&lt;p&gt;Following that definition, `typeof(ANY_PRIMITIVE_TYPE)` should return that primitive type as a string and anything else apart from the primitive types should be treated as type "object".&lt;/p&gt;

&lt;p&gt;As of date, JavaScript has 7 primitive data types available in the language: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/String"&gt;string&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Number"&gt;number&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/BigInt"&gt;bigint&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Boolean"&gt;boolean&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Undefined"&gt;undefined&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Symbol"&gt;symbol&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Null"&gt;null&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; Let us run the following code in console and see what each of them returns for `Primitive` types:&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;typeof "Sourav"    // "string"
typeof 1    // "number"
typeof 1n    // "bigint"
typeof true    // "boolean"
typeof undefined    // "undefined"
typeof Symbol('Debnath')    // "symbol"
typeof null    // "object"

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Wait a minute....what?? Why &lt;code&gt;null&lt;/code&gt; is of type "object" when it should be of type "null"? What happened to the definition which we were considering 'holy' and as the single source of truth? &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5XFJVMi_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627256711813/d4FV_NtKb.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5XFJVMi_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627256711813/d4FV_NtKb.jpeg" alt="typeof-5 (2).jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Well, this is what this blog is all about! We will explore the reason together, let us
begin!&lt;/p&gt;


&lt;h1&gt;
  &lt;a href="#why-the-raw-null-endraw-did-you-even-do-that"&gt;
  &lt;/a&gt;
  Why the &lt;code&gt;null&lt;/code&gt; did you even do that? 🤷‍♂️
&lt;/h1&gt;

&lt;p&gt;Obviously, this might be the first question which most of you would have been thinking!&lt;/p&gt;

&lt;p&gt;Did the JavaScript God (Yes,  [Brendan Eich](https://disqus.com/by/brendaneich/)  🙏) himself did this intentionally? Well of course not, we couldn't have asked more given the time period he had in hand (10 days) to design a new language!&lt;/p&gt;

&lt;p&gt;When you perform tasks or deliver your deliverables in a hurry, it is expected that your code might be shipped with bug(s). In modern days, we follow a model for Software Development where we have a dedicated phase for QA which was not the case in 1995-1996 in Netscape Communications. 

It was not called JavaScript either, it was  [LiveScript](https://www.youtube.com/watch?v=v2ifWcnQs6M) - that's a discussion for another day!.&lt;/p&gt;


&lt;h1&gt;
  &lt;a href="#the-source-code-of-the-very-early-version-of-javascript-engine-and-introduction-of-the-necessary-evil"&gt;
  &lt;/a&gt;
  The source code of the very early version of JavaScript Engine and introduction of the "necessary evil" 😈
&lt;/h1&gt;

&lt;p&gt;In the early version, values were stored in 32-bit units, which consisted of a small type tag (1–3 bits) and the actual data of the value. The type tags were stored in the lower bits of the units. There were five of them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;000: object. The data is a reference to an object.&lt;/li&gt;
&lt;li&gt;1: int. The data is a 31 bit signed integer.&lt;/li&gt;
&lt;li&gt;010: double. The data is a reference to a double floating point number.&lt;/li&gt;
&lt;li&gt;100: string. The data is a reference to a string.&lt;/li&gt;
&lt;li&gt;110: boolean. The data is a boolean.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That is, the lowest bit was either one, then the type tag was only one bit long. Or it was zero, then the type tag was three bits in length, providing two additional bits, for four types.&lt;/p&gt;

&lt;p&gt;There was a special value:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;null&lt;/strong&gt; (JSVAL_NULL) was the machine code NULL pointer. Or: an object type tag plus a reference that is zero.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;**Let's look at the classic JavaScript Source code used in the '96 in SpiderMonkey courtesy: @evilpies: https://twitter.com/evilpies/&lt;/p&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    JS_PUBLIC_API(JSType)
    JS_TypeOfValue(JSContext *cx, jsval v)
    {
        JSType type = JSTYPE_VOID;
        JSObject *obj;
        JSObjectOps *ops;
        JSClass *clasp;

        CHECK_REQUEST(cx);
        if (JSVAL_IS_VOID(v)) {  // (1)
            type = JSTYPE_VOID;
        } else if (JSVAL_IS_OBJECT(v)) {  // (2)
            obj = JSVAL_TO_OBJECT(v);
            if (obj &amp;amp;&amp;amp;
                (ops = obj-&amp;gt;map-&amp;gt;ops,
                 ops == &amp;amp;js_ObjectOps
                 ? (clasp = OBJ_GET_CLASS(cx, obj),
                    clasp-&amp;gt;call || clasp == &amp;amp;js_FunctionClass) // (3,4)
                 : ops-&amp;gt;call != 0)) {  // (3)
                type = JSTYPE_FUNCTION;
            } else {
                type = JSTYPE_OBJECT;
            }
        } else if (JSVAL_IS_NUMBER(v)) {
            type = JSTYPE_NUMBER;
        } else if (JSVAL_IS_STRING(v)) {
            type = JSTYPE_STRING;
        } else if (JSVAL_IS_BOOLEAN(v)) {
            type = JSTYPE_BOOLEAN;
        }
        return type;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;The first check here (1) in this code is a &lt;code&gt;VOID (undefined)&lt;/code&gt; check which is performed by a C macro:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#define JSVAL_IS_VOID(v)  ((v) == JSVAL_VOID)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The next check (2) is whether the value has an &lt;code&gt;object&lt;/code&gt; tag. Now for &lt;code&gt;null&lt;/code&gt;, It examined its type tag and the type tag said “object” and it went inside the &lt;code&gt;else if&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If it additionally is either callable (3) or its internal property [[Class]] marks it as a function (4) then v is a function. Otherwise, it is an object. &lt;strong&gt;This is the result that is produced by typeof null.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;On top of that, we do not even have a separate check for type &lt;code&gt;null&lt;/code&gt;, which was easy to implement by a C macro similar to &lt;code&gt;VOID&lt;/code&gt; but as I described above,&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;When you perform tasks or deliver your deliverables in a hurry, it is expected that your code might be shipped with bug(s).&lt;/p&gt;
&lt;/blockquote&gt;


&lt;h1&gt;
  &lt;a href="#it-is-just-another-raw-else-if-endraw-lets-fix-that"&gt;
  &lt;/a&gt;
  It is just another &lt;code&gt;else if&lt;/code&gt;, let's fix that 🚒
&lt;/h1&gt;

&lt;p&gt;**You can, but you should not!**&lt;/p&gt;


&lt;p&gt; A proposal was given In ES5.1 to fix the &lt;code&gt;typeof&lt;/code&gt; operator and it was implemented under the  &lt;a href="https://web.archive.org/web/20160331031419/http://wiki.ecmascript.org:80/doku.php?id=harmony:typeof_null"&gt;harmony version&lt;/a&gt; in V8 but it ended up breaking a lot of existing sites and this proposal had been rejected, described as,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In the spirit of One JavaScript this is not feasible.&lt;/p&gt;
&lt;/blockquote&gt;


&lt;h1&gt;
  &lt;a href="#whats-present-today-under-the-hood"&gt;
  &lt;/a&gt;
  What's present today under the hood 🕵️
&lt;/h1&gt;

&lt;p&gt;Things have moved to &lt;code&gt;CPP&lt;/code&gt; and the code present today is pretty straight forward with the known bug of &lt;code&gt;typeof null&lt;/code&gt;; as Mr. JavaScript said in one of the proposal discussions,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"I think it is too late to fix typeof. The change proposed for typeof null will break existing code."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's look at the implementation of &lt;code&gt;typeof&lt;/code&gt; in the CPP Interpreter in Mozilla from  &lt;a href="https://searchfox.org/mozilla-central/source/js/src/vm/Interpreter.cpp#834"&gt;searchfox&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;JSType js::TypeOfValue(const Value&amp;amp; v) {
  switch (v.type()) {
    case ValueType::Double:
    case ValueType::Int32:
      return JSTYPE_NUMBER;
    case ValueType::String:
      return JSTYPE_STRING;
    case ValueType::Null: // 😈 😈 😈
      return JSTYPE_OBJECT; // 😈 😈 😈
    case ValueType::Undefined:
      return JSTYPE_UNDEFINED;
    case ValueType::Object:
      return TypeOfObject(&amp;amp;v.toObject());
    case ValueType::Boolean:
      return JSTYPE_BOOLEAN;
    case ValueType::BigInt:
      return JSTYPE_BIGINT;
    case ValueType::Symbol:
      return JSTYPE_SYMBOL;
    case ValueType::Magic:
    case ValueType::PrivateGCThing:
      break;
  }

  ReportBadValueTypeAndCrash(v);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Where &lt;code&gt;JSTYPE_OBJECT&lt;/code&gt; is a cpp Enum which could be observed  &lt;a href="https://searchfox.org/mozilla-central/source/js/src/jspubtd.h#36"&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt; :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/* Result of typeof operator enumeration. */
enum JSType {
  JSTYPE_UNDEFINED, /* undefined */
  JSTYPE_OBJECT,    /* object */
  JSTYPE_FUNCTION,  /* function */
  JSTYPE_STRING,    /* string */
  JSTYPE_NUMBER,    /* number */
  JSTYPE_BOOLEAN,   /* boolean */
  JSTYPE_NULL,      /* null */
  JSTYPE_SYMBOL,    /* symbol */
  JSTYPE_BIGINT,    /* BigInt */
  JSTYPE_LIMIT
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  CONCLUSION ✏️
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Below the surface of the machine, the program moves. Without effort, it expands and contracts. In great harmony, electrons scatter and regroup. The forms on the monitor are but ripples on the water. The essence stays invisibly below."                                - Master Yuan-Ma, The Book of Programming&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We deal with a lot of stuff daily while developing a feature or a product but we might not actually explore those lines we write in detail to find why something happens. This blog is just a theoretical exploration of one such kind😇&lt;/p&gt;

&lt;p&gt;Now, after all the C and CPP, let's bring our thoughts down to JS! You might ask, isn’t &lt;code&gt;typeof([]) === "object"&lt;/code&gt; a bug?&lt;/p&gt;

&lt;p&gt;The answer is: No, it is not a bug.&lt;/p&gt;

&lt;p&gt;Arrays aren’t primitive, so they are objects! So are dates, and everything not on the "primitive list".&lt;/p&gt;

&lt;p&gt;Unlike null, they’re telling the truth!&lt;/p&gt;

</description>
    </item>
    <item>
      <title> El primo del Array: ¿Que es un Set?</title>
      <author>Franco Cuarterolo</author>
      <pubDate>Sun, 25 Jul 2021 23:53:20 +0000</pubDate>
      <link>https://dev.to/cuarte4/el-primo-del-array-que-es-un-set-imi</link>
      <guid>https://dev.to/cuarte4/el-primo-del-array-que-es-un-set-imi</guid>
      <description>&lt;p&gt;Un set es un tipo de objeto incluido en ES2015 que tiene semejanzas con un array:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Contiene una lista de datos de cualquier tipo&lt;/li&gt;
&lt;li&gt;  Es iterable&lt;/li&gt;
&lt;li&gt;  Permite el uso del operador spread&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pero también diferencias:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Sus datos no se repiten&lt;/li&gt;
&lt;li&gt;  No cuenta con los métodos de Array (map, some, filter)&lt;/li&gt;
&lt;li&gt;  Es un poco más performante&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#c%C3%B3mo-crear-un-set"&gt;
  &lt;/a&gt;
  ¿Cómo crear un Set?
&lt;/h2&gt;

&lt;p&gt;Un Set es un tipo de objeto, por lo que su sintaxis es la misma que la de un constructor:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;unSetVacío&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Si queremos inicializar nuestro Set con valores, deberemos pasar como argumento un array&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;redesSociales&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Facebook&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Twitter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fotolog&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#qu%C3%A9-m%C3%A9todos-tiene-un-set"&gt;
  &lt;/a&gt;
  ¿Qué métodos tiene un Set?
&lt;/h2&gt;

&lt;p&gt;El objeto Set tiene metodos propios para agregar, borrar y comprobar datos&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#agregar-datos-a-un-set"&gt;
  &lt;/a&gt;
  Agregar datos a un Set
&lt;/h3&gt;

&lt;p&gt;Para agregar datos a un Set, contamos con el método &lt;code&gt;.add()&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;redesSociales&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Instagram&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;redesSociales&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;MySpace&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;redesSociales&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Set ['Facebook', 'Twitter', 'Fotolog', 'Instagram', 'MySpace']&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;¿Qué pasa si por error duplicamos un dato? ¡Absolutamente nada! Los Set solo permiten valores únicos&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;redesSociales&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Facebook&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;redesSociales&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Set ['Facebook', 'Twitter', 'Fotolog', 'Instagram', 'MySpace']&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#eliminar-datos-de-un-set"&gt;
  &lt;/a&gt;
  Eliminar datos de un Set
&lt;/h3&gt;

&lt;p&gt;Para eliminar datos de un Set, contamos con el método &lt;code&gt;.delete()&lt;/code&gt;. Si retornamos o hacemos &lt;code&gt;console.log&lt;/code&gt; al usar este metodo, nos retornará un valor booleano para avisarnos de que pudo borrar el dato que le dijimos&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// RIP Fotolog y MySpace&lt;/span&gt;
&lt;span class="nx"&gt;redesSociales&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fotolog&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;redesSociales&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;MySpace&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;redesSociales&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Set ['Facebook', 'Twitter', 'Instagram']&lt;/span&gt;

&lt;span class="c1"&gt;//Intentemos borrarlos otra vez, nos retornará false ya que no existen más&lt;/span&gt;
&lt;span class="nx"&gt;redesSociales&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fotolog&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;redesSociales&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;MySpace&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#comprobar-si-un-set-contiene-un-dato"&gt;
  &lt;/a&gt;
  Comprobar si un Set contiene un dato
&lt;/h3&gt;

&lt;p&gt;Para comprobar si existe un dato dentro de un Set, usaremos el método &lt;code&gt;.has()&lt;/code&gt; que nos retornará un valor booleano&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;redesSociales&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Instagram&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;redesSociales&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fotolog&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;redesSociales&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;LinkedIn&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#comprobar-el-tama%C3%B1o-de-un-set"&gt;
  &lt;/a&gt;
  Comprobar el tamaño de un Set
&lt;/h3&gt;

&lt;p&gt;Para saber qué tamaño tiene un Set, contamos con la propiedad &lt;code&gt;.size&lt;/code&gt; (¡¿Por qué no le pusieron &lt;code&gt;.length&lt;/code&gt; como a los Arrays?!)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;redesSociales&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#c%C3%B3mo-iterar-un-set"&gt;
  &lt;/a&gt;
  ¿Cómo iterar un Set?
&lt;/h2&gt;

&lt;p&gt;Un Set puede ser iterable casi como cualquier objeto, por ejemplo, con un &lt;code&gt;for..of&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;redSocial&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;redesSociales&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;redSocial&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;También podemos hacer uso de los métodos &lt;code&gt;.values()&lt;/code&gt; o &lt;code&gt;.keys()&lt;/code&gt; que retornan un nuevo objeto iterable con los datos del Set (Sí, ambos métodos hacen lo mismo).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#c%C3%B3mo-vuelvo-al-modo-array"&gt;
  &lt;/a&gt;
  ¡¿Cómo vuelvo al modo Array?!
&lt;/h2&gt;

&lt;p&gt;Si tenes necesidad de transformar tu Set en un Array, podemos usar dos métodos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Usar el metodo &lt;code&gt;.from()&lt;/code&gt; del objeto &lt;code&gt;Array&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;redesSocialesArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;redesSociales&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;  La vieja confiable: el spread operator
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;redesSocialesSpread&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;redesSociales&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusi%C3%B3n"&gt;
  &lt;/a&gt;
  Conclusión
&lt;/h2&gt;

&lt;p&gt;Hoy aprendimos qué es un Set, cómo modificarlo y cómo convertirlo en Array. Hay más métodos que no te conté para no hacerla muy larga. Al final te voy a dejar la documentación que utilicé para poder escribir esto. Te invito a que la leas, investigues, juegues y practiques.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#gracias-por-llegar-hasta-ac%C3%A1"&gt;
  &lt;/a&gt;
  ¡Gracias por llegar hasta acá!
&lt;/h2&gt;

&lt;p&gt;Fuentes:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set"&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set&lt;/a&gt;&lt;br&gt;
&lt;a href="https://javascript.info/map-set"&gt;https://javascript.info/map-set&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>spanish</category>
      <category>ecmascript</category>
      <category>foundamentals</category>
    </item>
    <item>
      <title>Difference Between useState and useRef in React</title>
      <author>Mehdi Aoussiad</author>
      <pubDate>Sun, 25 Jul 2021 22:25:32 +0000</pubDate>
      <link>https://dev.to/aoussiadmehdi/difference-between-usestate-and-useref-in-react-1eab</link>
      <guid>https://dev.to/aoussiadmehdi/difference-between-usestate-and-useref-in-react-1eab</guid>
      <description>&lt;p&gt;This article is originally published at  &lt;a href="https://webdevidea.com/blog/difference-between-usestate-and-useref-in-react/"&gt;WebDevIdea&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;React is an extremely popular JavaScript library for building user interfaces. A lot of developers prefer this library because it’s all based on components and has a lot of cool packages that we can use. In addition to that, now we have React hooks which came to save us from the complexity of class components.&lt;/p&gt;

&lt;p&gt;React Hooks are very powerful and allow us to use state in functional components. They also give us the ability to create logic and functionality inside stateless functional components. Many developers now prefer to use hooks and functional components rather than class components because the class syntax is a little hard to write. There are a lot of useful hooks that you can use in your React code to create logic and add features to your components.&lt;/p&gt;

&lt;p&gt;That’s why in this article, we will learn about both the hooks useState and useRef by covering the differences between them. So let’s get started&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-usestate-hook"&gt;
  &lt;/a&gt;
  The useState hook
&lt;/h2&gt;

&lt;p&gt;The hook useState is just a function that accepts one argument(initial state) and returns two things:&lt;/p&gt;

&lt;p&gt;The current state(the value of our state).&lt;br&gt;
A function that allows us to update that current state.&lt;br&gt;
The hook useState allows us to have state in functional components and we can use it to create a lot of cool things in React. With useState, we can for example change the text after clicking a button, or create a counter, and so on. There is a lot you can do with this important hook in React.&lt;/p&gt;

&lt;p&gt;So if you want to start using useState in React, you will have to import it first from the react package.&lt;/p&gt;

&lt;p&gt;Here is an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now after importing it from the react package, you can use the hook inside functional components without any problems.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h3&gt;

&lt;p&gt;In the example below, we will use the hook useState to create text and update it after clicking a button:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//import useState.&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Using useState.&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mehdi&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;//JSX.&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Change&lt;/span&gt; &lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see above, the hook useState allowed us to update the state after clicking the button. We passed a string name as an argument for the hook function, you can pass it anything such as an array, number, boolean, all that depends on what type of state you’re dealing with.&lt;/p&gt;

&lt;p&gt;Also, notice that we used ES6 array destructuring to specify the initial state and the updater function. The value name refers to the initial state "Mehdi" and the value setName refers to the function that will allow up to update the state. We also called the updater function setName in the click event in order to update the name state from "Mehdi" to "John". As a result, the value name inside the heading h1 gets updated after clicking the button.&lt;/p&gt;

&lt;p&gt;So the hook useState is very useful as it allows us to use state and update it inside functional components without having to use class syntax.&lt;/p&gt;

&lt;p&gt;Here is another example of a counter that allows us to increment the number by 1 after clicking a button:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//import useState.&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Using useState.&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCounter&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;//JSX.&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setCounter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Increment&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example, we set the initial state to 0 number as a parameter for the hook function. That’s because we are dealing with numbers and we need to increment the number by 1 each time we click the button. The updater function setCounter allows us to update the state to the current state plus 1. As a result, we can increment the counter by 1 after each click.&lt;/p&gt;

&lt;p&gt;You can also check out a live demo on  &lt;a href="https://react-7mzbjb.stackblitz.io/"&gt;Stackblitz &lt;/a&gt; if you want.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-useref-hook"&gt;
  &lt;/a&gt;
  The useRef hook
&lt;/h2&gt;

&lt;p&gt;The hook useRef is a bit similar to useState , it returns an object that has a property current inside which we can access using object dot notation. That property current takes the value of the argument that we pass to the function useRef().&lt;/p&gt;

&lt;p&gt;So the hook useRef also accepts one argument(the initial value for the property current). Also, keep in mind that the returned object will persist for the full lifetime of the component.&lt;/p&gt;

&lt;p&gt;Again, to start using the hook, you have to import it from React first. Then you can use it without any problems.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s try the hook in the console to see how it works:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//using useRef and giving it 0 as a parameter.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ourRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ourRef&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;//{ current: 0 }&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ourRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, useRef returns an object containing a property that has the value of the parameter we passed. We can access that value using object dot notation.&lt;/p&gt;

&lt;p&gt;useRef is powerful because it’s persisted between renders. Unlike useState, useRef doesn’t cause a component to re-render when the value or state changes.&lt;/p&gt;

&lt;p&gt;To make things more clear, let’s look at a practical example. We will show you the same example of the incrementing counter that we did above with useState, but now using useRef.&lt;/p&gt;

&lt;p&gt;Here is the example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//import useRef.&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Using useRef.&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ourRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;//JSX.&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ourRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;ourRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ourRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Increment&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, we set the initial value to 0 and we accessed the property current in the returned object to increment our counter by 1. Now the problem is that the number 0 doesn’t increment even though if we click the button. That’s because the hook useRef doesn’t cause the component to re-render. The component needs to render in order to update the UI.&lt;/p&gt;

&lt;p&gt;If you printed the value of the current property in the console, you will realize that when you click the button the value actually increments by 1. But it doesn’t show up in the UI because the component doesn’t get re-rendered. So useRef is not a good option for creating a counter. You can check out a live demo on Stackblitz if you want.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#useref-usecases"&gt;
  &lt;/a&gt;
  UseRef usecases
&lt;/h2&gt;

&lt;p&gt;One of the main use cases of using the hook useRef is to reference DOM elements in React. Every element in the DOM has an attribute called ref which we can set our ref to. Here is an example that allows us to access an input element and focus on it after clicking a button:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Mycomponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;inputRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;inputFocus&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;inputRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;focus&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;inputRef&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;inputFocus&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Focus&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;Input&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another use case of useRef is for the storage that is persisted across component renders. The hook useRef allows us to store the previous value of a state. You can learn more about that if you’re interested.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usestate-vs-useref"&gt;
  &lt;/a&gt;
  useState VS useRef
&lt;/h2&gt;

&lt;p&gt;For useState:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Allows functional components to have their own state.&lt;/li&gt;
&lt;li&gt;Allows us to update the state inside components.&lt;/li&gt;
&lt;li&gt;It causes components to re-render after state updates.&lt;/li&gt;
&lt;li&gt;Returns the current state.&lt;/li&gt;
&lt;li&gt;Has an updater function that updates the state.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For useRef:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Returns an object with a property containing the initial value.&lt;/li&gt;
&lt;li&gt;Doesn’t cause a component to re-render when the value or state changes.&lt;/li&gt;
&lt;li&gt;Data is persisted between renders.&lt;/li&gt;
&lt;li&gt;Allows to reference DOM elements.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So these are the differences between these two extremely useful React hooks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As you can see, both the hooks useState and useRef are a bit similar. The difference is that useState returns the current state and has an updater function that updates the state. While useRef returns an object, doesn’t cause components to re-render, and it’s used to reference DOM elements.&lt;/p&gt;

&lt;p&gt;Thank you for reading this article.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>coding</category>
    </item>
    <item>
      <title>Import &amp; Test a Popular NFT Smart Contract with Hardhat &amp; Ethers</title>
      <author>Jacob E. Dawson</author>
      <pubDate>Sun, 25 Jul 2021 22:06:17 +0000</pubDate>
      <link>https://dev.to/jacobedawson/import-test-a-popular-nft-smart-contract-with-hardhat-ethers-12i5</link>
      <guid>https://dev.to/jacobedawson/import-test-a-popular-nft-smart-contract-with-hardhat-ethers-12i5</guid>
      <description>&lt;p&gt;Today we're going to learn how to use the very cool &lt;a href="https://hardhat.org/"&gt;smart-contract development framework Hardhat&lt;/a&gt; to locally import &amp;amp; test a publicly deployed smart contract. To make things fun &amp;amp; relevant, we'll be using the &lt;a href="https://boredapeyachtclub.com/"&gt;Bored Ape Yacht Club&lt;/a&gt; NFT smart contract in our example. Using a well-known project's smart contract should make it clear how open the Ethereum ecosystem is, and how many opportunities there are to get started in Dapp and smart contract development!&lt;/p&gt;

&lt;p&gt;By the end of this tutorial you will know the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to find smart contract code for specific projects&lt;/li&gt;
&lt;li&gt;How to add that code to a local development environment&lt;/li&gt;
&lt;li&gt;How to install &amp;amp; set-up a simple Hardhat development environment&lt;/li&gt;
&lt;li&gt;How to compile a contract and write tests for it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This tutorial won't involve any front-end development, but if you're interested in understanding how to get started with Web3 dapp development, feel free to check out my previous tutorials here on dev.to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/jacobedawson/build-a-web3-dapp-in-react-login-with-metamask-4chp"&gt;Build a Web3 Dapp in React &amp;amp; Login with MetaMask&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/jacobedawson/send-react-web3-dapp-transactions-via-metamask-2b8n"&gt;Send React Web3 Transactions via MetaMask with useDapp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#step-1-finding-the-smart-contract-code"&gt;
  &lt;/a&gt;
  Step 1: Finding the Smart Contract Code
&lt;/h3&gt;

&lt;p&gt;To begin with, we're going to start by choosing a project (Bored Ape Yacht Club), and then tracking down the smart contract code. Personally the first thing I'd do in this case is quickly check out the website of the project in question to see if they have a link to their contracts. In this case, &lt;a href="https://boredapeyachtclub.com/"&gt;https://boredapeyachtclub.com/&lt;/a&gt; only contains social links, so we'll have to look elsewhere. &lt;/p&gt;

&lt;p&gt;Since Bored Ape Yacht Club is an Ethereum-based NFT project, our next port of call will be &lt;a href="https://etherscan.io/"&gt;Etherscan&lt;/a&gt;, the Ethereum blockchain explorer. Since I know that Bored Ape Yacht Club uses the symbol BAYC, I can just search for that symbol using Etherscan (why, yes, I use dark mode on everything, how could you tell?):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Upq6jmnu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o6wz8nqernbmpadnfi0q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Upq6jmnu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o6wz8nqernbmpadnfi0q.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And there we go - we can see that this is a verified ERC-721 token contract with the name we're looking for! If we click on the search result we'll go through to the page for the BoredApeYachtClub token, with the Etherscan address: &lt;a href="https://etherscan.io/token/0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d"&gt;https://etherscan.io/token/0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's great, we're getting closer - in the top right hand section of the token page, called "Profile Summary", we will see a "Contract" address with a link:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Sbboz9Hp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/va8pqml5d2wxrxr11ciw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sbboz9Hp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/va8pqml5d2wxrxr11ciw.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we click that we'll arrive at the "Contract" page on Etherscan - this is what we're looking for! Click on the "Contract" tab:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6H_DDmp6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rihi89wfk1rr33vtrqi0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6H_DDmp6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rihi89wfk1rr33vtrqi0.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And there we have it - the verified contract source code for the contract named BoredApeYachtClub. Here's the Etherscan link to that specific section: &lt;a href="https://etherscan.io/address/0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d#code"&gt;https://etherscan.io/address/0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d#code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, at this point you might be wondering if there's a way to programmatically retrieve the contract code, given that we know the contract name, symbol and address. The answer is: of course :) But let's do it the manual way for now, I'll leave it to you to devise some more efficient ways to grab the contract using code ;)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nlfhRO9O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hmlr5ow7oyuvdna1fdki.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nlfhRO9O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hmlr5ow7oyuvdna1fdki.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;We've almost finished step 1 - we can copy the contract code and save it somewhere - for now you can just put it in a note pad or save it in a file somewhere, we're going to come back to this file later on in the tutorial. Next up, we'll set up our Hardhat environment..&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-setting-up-our-hardhat-project"&gt;
  &lt;/a&gt;
  Step 2: Setting up our Hardhat Project
&lt;/h3&gt;

&lt;p&gt;Tooling for Ethereum development hasn't had very long to evolve - the initial release of Ethereum was in July, 2015 - as of the writing of this article it has been only 6 years (which is hard to believe considering how far the Ethereum ecosystem has come during that time). Thanks to the efforts of the Ethereum community, we've progressed from rudimentary development environments that were only intuitive for experienced developers, through to 2021, where we've been blessed with finely-crafted frameworks, tools &amp;amp; libraries that make developing for the Ethereum ecosystem a breeze.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FsjkCbMW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dtbm0mil8a1ex0agp4ua.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FsjkCbMW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dtbm0mil8a1ex0agp4ua.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;The folks over at Nomic Labs have had their heads down building what has quickly become the gold-standard in Ethereum development environments: &lt;a href="https://hardhat.org/"&gt;Hardhat&lt;/a&gt;. It encompasses test running, compilation, deployment, a rich plugin-system and a local network to run everything against. When combined with other great tools like &lt;a href="https://docs.ethers.io/v5/"&gt;Ethers&lt;/a&gt;, &lt;a href="https://getwaffle.io/"&gt;Waffle&lt;/a&gt;, and &lt;a href="https://www.chaijs.com/"&gt;Chai&lt;/a&gt;, Hardhat puts an entire control panel in front of you to take an Ethereum project all the way from idea to &lt;a href="https://hackernoon.com/what-is-ido-the-new-alternative-to-ieo-and-ico-70l34zf"&gt;IDO&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;NOTE: The instructions for this section can also be found in more detail here: &lt;a href="https://hardhat.org/getting-started/#overview"&gt;https://hardhat.org/getting-started/#overview&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's start by creating a new folder in your local environment:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir hardhat-tutorial
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Move into that new folder, run &lt;code&gt;npm init -Y&lt;/code&gt;, and then install hardhat:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i -D hardhat
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now run &lt;code&gt;npx hardhat&lt;/code&gt; and select "Create an empty hardhat.config.js":&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---9JzCr0W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/316a9tftmd3jx60dglun.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---9JzCr0W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/316a9tftmd3jx60dglun.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;That will add a hardhat.config.js file for us, which we'll have a look at soon. We're also going to install some other tools, including the Waffle test suite and Ethers. So run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i -D @nomiclabs/hardhat-waffle ethereum-waffle chai @nomiclabs/hardhat-ethers ethers
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's go all the way and make our &lt;a href="https://hardhat.org/guides/typescript.html"&gt;Hardhat project TypeScript ready&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;First, install TypeScript and some types:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i -D ts-node typescript @types/node @types/chai @types/mocha
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we'll rename our &lt;code&gt;hardhat.config.js&lt;/code&gt; file to be &lt;code&gt;hardhat.config.ts&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mv hardhat.config.js hardhat.config.ts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We now need to make a change to our &lt;code&gt;hardhat.config.ts&lt;/code&gt; file, since with a Hardhat TypeScript project plugins need to be loaded with &lt;code&gt;import&lt;/code&gt; instead of &lt;code&gt;require&lt;/code&gt;, and functions must be explictly imported:&lt;/p&gt;

&lt;p&gt;Change this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// hardhat.config.ts&lt;/span&gt;
&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@nomiclabs/hardhat-waffle&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;accounts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Prints the list of accounts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;taskArgs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;hre&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;accounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;hre&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ethers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getSigners&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;account&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * @type import('hardhat/config').HardhatUserConfig
 */&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;solidity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0.7.3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Into this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// hardhat.config.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;task&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hardhat/config&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// import function&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@nomiclabs/hardhat-waffle&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// change require to import&lt;/span&gt;

&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;accounts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Prints the list of accounts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;taskArgs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;hre&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;accounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;hre&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ethers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getSigners&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;account&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;solidity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0.7.3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Sweet - we're setup with TypeScript. Now if you run &lt;code&gt;npx hardhat&lt;/code&gt; again you should see some help instructions in your console:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UfC3Uaz9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3l32vplkvko7vk2rbguh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UfC3Uaz9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3l32vplkvko7vk2rbguh.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Great! If you've made it this far we have a Hardhat project configured with TypeScript and our required tools are installed. &lt;/p&gt;

&lt;p&gt;Notice in the screenshot above that there is a section called "Available Tasks" - this is a list of built-in tasks that are provided by the Hardhat team, enabling us to run important tasks from the get-go. Hardhat is extremely malleable, and works with 3rd party plugins that help us to adapt our project to our specific needs. We've already installed hardhat-waffle and hardhat-ethers - you can find an extensive list of plugins here: &lt;a href="https://hardhat.org/plugins/"&gt;https://hardhat.org/plugins/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can also create our own tasks. If you open &lt;code&gt;hardhat.config.ts&lt;/code&gt; you'll see the sample "accounts" task definition. The task definition function takes 3 arguments - a name, a description, and a callback function that carries out the task. If you change the description of the "accounts" task, to "Hello, world!", then run &lt;code&gt;npx hardhat&lt;/code&gt; in your console, you'll see that the "accounts" task now has the description "Hello, world!".&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// hardhat.config.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;task&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hardhat/config&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@nomiclabs/hardhat-waffle&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;accounts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello, world!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;taskArgs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;hre&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;accounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;hre&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ethers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getSigners&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;account&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * @type import('hardhat/config').HardhatUserConfig
 */&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;solidity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0.7.3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0rZJ_vMT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ppslyd1vdj4xl6bpaf7v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0rZJ_vMT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ppslyd1vdj4xl6bpaf7v.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now our simple Hardhat project is all set up, let's move on to importing &amp;amp; compiling our Bored Ape contract...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-importing-amp-compiling-our-contract"&gt;
  &lt;/a&gt;
  Step 3: Importing &amp;amp; Compiling our Contract
&lt;/h3&gt;

&lt;p&gt;Let's start by creating a new folder called &lt;code&gt;contracts&lt;/code&gt; in our root directory (Hardhat uses the "contracts" folder as the source folder by default - if you want to change that name, you'll need to configure it within the &lt;code&gt;hardhat.config.ts&lt;/code&gt; file):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mdkir contracts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a new file called &lt;code&gt;bored-ape.sol&lt;/code&gt; in the contracts folder, then paste the contract code that we copied from Etherscan earlier. &lt;/p&gt;

&lt;p&gt;NOTE: The .sol extension is the Solidity file extension. To add syntax highlighting and type hints for Solidity files, there is a great VSCode extension made by &lt;a href="https://marketplace.visualstudio.com/items?itemName=JuanBlanco.solidity"&gt;Juan Blanco called "solidity"&lt;/a&gt; - I recommend installing it to make developing Solidity easier:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hF14pbnX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hdlme4tjzpe9cc7k35kd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hF14pbnX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hdlme4tjzpe9cc7k35kd.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also use a VSCode extension called &lt;a href="https://marketplace.visualstudio.com/items?itemName=tintinweb.solidity-visual-auditor"&gt;"Solidity Visual Developer"&lt;/a&gt;, and you'll find many more in the VSCode marketplace. &lt;/p&gt;

&lt;p&gt;Now that we have a &lt;code&gt;contracts&lt;/code&gt; folder with the &lt;code&gt;bored-ape.sol&lt;/code&gt; contract inside it, we are ready to compile the contract. We can use a built-in &lt;code&gt;compile&lt;/code&gt; task to do this - all we need to do is run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx hardhat compile
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we compile a contract with Hardhat, two files will be generated for each contract and placed into an &lt;code&gt;artifacts/&amp;lt;CONTRACT NAME&amp;gt;&lt;/code&gt; folder. Note that these two files (an "artifact" .json file and a debug "dbg" .json file) will be generated for &lt;em&gt;each contract&lt;/em&gt; - the Bored Ape contract code that we copied from Etherscan actually contains multiple "contracts". &lt;/p&gt;

&lt;p&gt;If you view the original &lt;code&gt;contracts/bored-ape.sol&lt;/code&gt; file you can see that the "contract" keyword is used 15 times in total, and each instance has its own contract name - therefore, after compiling the &lt;code&gt;bored-ape.sol&lt;/code&gt; file we will end up with 30 files in the &lt;code&gt;artifacts/contracts/bored-ape.sol/&lt;/code&gt; folder. &lt;/p&gt;

&lt;p&gt;That's ok though - since Solidity contracts are essentially object-oriented classes, we need only be concerned with the &lt;code&gt;BoredApeYachtClub.json&lt;/code&gt; artifact - this is the file that contains the "BoredApeYachtClub" ABI (the &lt;a href="https://docs.soliditylang.org/en/latest/abi-spec.html#abi-json"&gt;Application Binary Interface&lt;/a&gt;, a JSON representation of the contract's variables &amp;amp; functions), and  is exactly what we need to import into Ethers in order to create a contract instance.&lt;/p&gt;

&lt;p&gt;We've now achieved 3 out of our 4 objectives - our last objective for this tutorial is to write a test file so that we can run tests against our imported contract.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-4-writing-tests-for-our-contract"&gt;
  &lt;/a&gt;
  Step 4: Writing Tests for our Contract
&lt;/h3&gt;

&lt;p&gt;Testing is a deep and complex subject, so we're going to keep this simple, so that you understand the general process and can dive deeper into the subject at your own pace. Our goal for this step will be to setup and write some tests for the "BoredApeYachtClub" contract.&lt;/p&gt;

&lt;p&gt;We've already installed "hardhat-ethers", which is a Hardhat plugin that will give us access to the "Ethers" library, and enable us to interact with our smart contract. &lt;/p&gt;

&lt;p&gt;NOTE: If you have a JavaScript / Hardhat project, all of the properties of the Hardhat Runtime Environment are automatically injected into the global scope. When using TypeScript, however, nothing is available in the global scope, so we have to import instances explicitly.&lt;/p&gt;

&lt;p&gt;Let's create a new test in the &lt;code&gt;test&lt;/code&gt; folder in the root directory, and call it &lt;code&gt;bored-ape.test.ts&lt;/code&gt;. Now we'll write a test, and I'll explain what we're doing in the code comments:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// bored-ape.test.ts&lt;/span&gt;
&lt;span class="c1"&gt;// We are using TypeScript, so will use "import" syntax&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ethers&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hardhat&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Import the Ethers library&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;expect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;chai&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Import the "expect" function from the Chai assertion library, we'll use this in our test&lt;/span&gt;

&lt;span class="c1"&gt;// "describe" is used to group tests &amp;amp; enhance readability&lt;/span&gt;
&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Bored Ape&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// "it" is a single test case - give it a descriptive name&lt;/span&gt;
  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Should initialize Bored Ape contract&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// We can refer to the contract by the contract name in &lt;/span&gt;
    &lt;span class="c1"&gt;// `artifacts/contracts/bored-ape.sol/BoredApeYachtClub.json`&lt;/span&gt;
    &lt;span class="c1"&gt;// initialize the contract factory: https://docs.ethers.io/v5/api/contract/contract-factory/&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;BoredApeFactory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;ethers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getContractFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;BoredApeYachtClub&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// create an instance of the contract, giving us access to all&lt;/span&gt;
    &lt;span class="c1"&gt;// functions &amp;amp; variables&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;boredApeContract&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;BoredApeFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Bored Ape Yacht Club&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;BAYC&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// use the "expect" assertion, and read the MAX_APES variable&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;boredApeContract&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MAX_APES&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's a fair bit of code! Essentially we are creating a Contract Factory, which contains additional information necessary to deploy a contract. Once we have the Contract Factory, we can use the &lt;code&gt;.deploy()&lt;/code&gt; method, passing in variables that are required by the contract constructor. Here is the original contract constructor:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="c1"&gt;//bored-ape.sol&lt;/span&gt;
    &lt;span class="n"&gt;constructor&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;memory&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;memory&lt;/span&gt; &lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;maxNftSupply&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;saleStart&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="no"&gt;ERC721&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="no"&gt;MAX_APES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;maxNftSupply&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="no"&gt;REVEAL_TIMESTAMP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;saleStart&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;86400&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The constructor takes 4 arguments, each with type definitions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;name, a string&lt;/li&gt;
&lt;li&gt;symbol, a string&lt;/li&gt;
&lt;li&gt;maxNftSupply, a number&lt;/li&gt;
&lt;li&gt;saleStart, a number&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ok - now comes the moment of truth - let's run our test with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx hardhat test
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see something like this: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--90AWA7DQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2bgksduuxlg8tjzqtmpt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--90AWA7DQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2bgksduuxlg8tjzqtmpt.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But hang on - why is it failing? Well, we can see under 1) Bored Ape &lt;code&gt;AssertionError: Expected "10000" to be equal 5000&lt;/code&gt;. This is nothing to worry about - I've deliberately added a test case that will fail on the first run - this is good practice, to help remove false positives. If we don't add a failing case to begin with, we can't be certain that we aren't accidentally writing a test that will always return true. A more thorough version of this method would actually begin with writing the test first and then gradually writing code to make it pass, but since it's not the focus of this tutorial we'll gloss over that. If you're interested in learning more about this style of writing tests and then implementing code to make it pass, here are couple of good introductions:  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.codecademy.com/articles/tdd-red-green-refactor"&gt;https://www.codecademy.com/articles/tdd-red-green-refactor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.cleancoder.com/uncle-bob/2014/12/17/TheCyclesOfTDD.html"&gt;http://blog.cleancoder.com/uncle-bob/2014/12/17/TheCyclesOfTDD.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@tunkhine126/red-green-refactor-42b5b643b506"&gt;https://medium.com/@tunkhine126/red-green-refactor-42b5b643b506&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To make our test pass, edit this line to include 10000:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;expect(await boredApeContract.MAX_APES()).to.equal(10000);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---bEolRJ2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/svlex3607kmajgjpu0ph.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---bEolRJ2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/svlex3607kmajgjpu0ph.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nice! We now have a passing test case :) Let's write a few more tests to flex our muscles. &lt;/p&gt;

&lt;p&gt;Before we do that though, we're going to use a helper function called &lt;code&gt;beforeEach&lt;/code&gt; that will simplify the set up for each test, and allow us to reuse variables for each test. We'll move our contract deployment code into the &lt;code&gt;beforeEach&lt;/code&gt; function, and as you can see, we can use the &lt;code&gt;boredApeContract&lt;/code&gt; instance in our "initialize" test:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// bored-ape.test.ts
import { expect } from "chai";
import { ethers } from "hardhat";
import { beforeEach } from "mocha";
import { Contract } from "ethers";
import { SignerWithAddress } from "@nomiclabs/hardhat-ethers/signers";

describe("Bored Ape", () =&amp;gt; {
  let boredApeContract: Contract;
  let owner: SignerWithAddress;
  let address1: SignerWithAddress;

  beforeEach(async () =&amp;gt; {
    const BoredApeFactory = await ethers.getContractFactory(
      "BoredApeYachtClub"
    );
    [owner, address1] = await ethers.getSigners();
    boredApeContract = await BoredApeFactory.deploy(
      "Bored Ape Yacht Club",
      "BAYC",
      10000,
      1
    );
  });

  it("Should initialize the Bored Ape contract", async () =&amp;gt; {
    expect(await boredApeContract.MAX_APES()).to.equal(10000);
  });

  it("Should set the right owner", async () =&amp;gt; {
    expect(await boredApeContract.owner()).to.equal(await owner.address);
  });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since we're using TypeScript, we've imported types for our variables in "beforeEach", and have added an "owner" and "address1" variable that can be used in test cases that require addresses. We've made use of the owner variable by adding another test "Should set the right owner" - this checks that the owner of the contract is the same one returned when we deployed the contract. &lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;bored-ape.sol&lt;/code&gt; file, notice that there is a function called &lt;code&gt;mintApe&lt;/code&gt; which takes in both a number of tokens (representing Bored Ape NFTs), and also expects to receive some ETH. Let's write a test for that function, which will let us try out payments, and force us to make use of some other methods in the contract to make the test pass. &lt;/p&gt;

&lt;p&gt;We'll start by defining the test:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;bored&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;ape&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ts&lt;/span&gt;
  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Should mint an ape&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;boredApeContract&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mintApe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;boredApeContract&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Transfer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since the &lt;code&gt;mintApe&lt;/code&gt; method doesn't return a value, we are going to listen for an event called "Transfer" - we can trace the &lt;code&gt;mintApe&lt;/code&gt; function's inheritance and see that ultimately it calls the &lt;code&gt;_mint&lt;/code&gt; function of an ERC-721 token and emits a { Transfer } event:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hm-o1ujT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xtqzs2uj42dm2yxb5fyp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hm-o1ujT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xtqzs2uj42dm2yxb5fyp.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At the moment it doesn't matter that we listen for the "Transfer" event - this test is going to fail since &lt;code&gt;mintApe&lt;/code&gt; contains a number of conditions that we haven't fulfilled:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mSxWDSGO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3nynbhcek8zd74pos4gy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mSxWDSGO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3nynbhcek8zd74pos4gy.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can see that "Sale must be active to mint Ape", so it looks like first we have to call the contract method &lt;code&gt;flipSaleState&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;boredApeContract&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;flipSaleState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run &lt;code&gt;npx hardhat test&lt;/code&gt; and...we're still failing - but with a different error! A different error is actually great news, because it means we're making progress :) Looks like "Ether value sent is not correct" - which makes sense, since we didn't send any ETH along with our contract call. Notice that the &lt;code&gt;mintApe&lt;/code&gt; method signature contains the keyword "payable":&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;mintApe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;uint&lt;/span&gt; &lt;span class="nx"&gt;numberOfTokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;payable&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That means that this method can (and expects to) receive ETH. We can also retrieve the cost of a Bored Ape first by calling the &lt;code&gt;apePrice&lt;/code&gt; getter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;uint256&lt;/span&gt; &lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;constant&lt;/span&gt; &lt;span class="nx"&gt;apePrice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;80000000000000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//0.08 ETH&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So finally, we need to import some more functions, use &lt;code&gt;apePrice&lt;/code&gt; as our value and send it through as ETH with our call to &lt;code&gt;mintApe&lt;/code&gt;. We'll also chain another method called &lt;code&gt;withArgs&lt;/code&gt; to our &lt;code&gt;emit&lt;/code&gt; call, which will give us the ability to listen to the arguments emitted by the "Transfer" event:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// bored-ape.test.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;chai&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;chai&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;solidity&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ethereum-waffle&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;chai&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;solidity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Should mint an ape&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;boredApeContract&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;flipSaleState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;apePrice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;boredApeContract&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apePrice&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tokenId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;boredApeContract&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;totalSupply&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;boredApeContract&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mintApe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;apePrice&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;boredApeContract&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Transfer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;withArgs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ethers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;constants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;AddressZero&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tokenId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We're using what are referred to as "overrides" (&lt;a href="https://docs.ethers.io/ethers.js/html/api-contract.html#overrides"&gt;https://docs.ethers.io/ethers.js/html/api-contract.html#overrides&lt;/a&gt;) to add additional data to our method call - in this case, a value property that will be received by the contract's &lt;code&gt;mintApe&lt;/code&gt; method as &lt;code&gt;msg.value&lt;/code&gt;, ensuring that we now satisfy the condition of the "Ether value sent is not correct" requirement:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;require(apePrice.mul(numberOfTokens) &amp;lt;= msg.value, "Ether value sent is not correct");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We've import &lt;code&gt;chai&lt;/code&gt; into our test file so that we can use chai "matchers" - which we combine with the "solidity" matcher imported from "ethereum-waffle": &lt;a href="https://ethereum-waffle.readthedocs.io/en/latest/matchers.html"&gt;https://ethereum-waffle.readthedocs.io/en/latest/matchers.html&lt;/a&gt; - now we are able to specify the exact arguments that we expect to receive from the "Transfer" event, and we can ensure that the test is actually passing as expected. &lt;/p&gt;

&lt;p&gt;If you're wondering how we determined the arguments we expect to receive, I'll explain. First, we can inspect the &lt;code&gt;_mint&lt;/code&gt; method in &lt;code&gt;bored-ape.sol&lt;/code&gt; and see that &lt;code&gt;Transfer&lt;/code&gt; emits 3 arguments.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// bored-ape.sol
emit Transfer(address(0), to, tokenId);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first argument is the "Zero account": &lt;a href="https://ethereum.stackexchange.com/questions/13523/what-is-the-zero-account-as-described-by-the-solidity-docs"&gt;https://ethereum.stackexchange.com/questions/13523/what-is-the-zero-account-as-described-by-the-solidity-docs&lt;/a&gt; - also known as "AddressZero". The second argument "to" is the address that sent the &lt;code&gt;mintApe&lt;/code&gt; transaction - in this case we're just using the owner's address. Lastly, the tokenId is defined within a for-loop in the &lt;code&gt;mintApe&lt;/code&gt; method, and is set as equal to the return value of calling &lt;code&gt;tokenSupply&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Once we know what these values are, we can input them into our &lt;code&gt;withArgs&lt;/code&gt; method, including a handy constant provided by the ethers library called &lt;code&gt;AddressZero&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;withArgs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ethers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;constants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;AddressZero&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tokenId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's it - we can run &lt;code&gt;npx hardhat test&lt;/code&gt; and we'll get a passing test. If you change any of the values in &lt;code&gt;withArgs&lt;/code&gt; you'll get a failing test - exactly what we expect! We've also covered all of our objectives for this tutorial: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to find smart contract code for specific projects&lt;/li&gt;
&lt;li&gt;How to add that code to a local development environment&lt;/li&gt;
&lt;li&gt;How to install &amp;amp; set-up a simple Hardhat development environment&lt;/li&gt;
&lt;li&gt;How to compile a contract and write tests for it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hopefully this has given you some insight into the process of importing and testing contracts with Hardhat, Ethers, Chai &amp;amp; Mocha. The same processes can be followed when you write your own Solidity contracts, and when combined with a front-end repo you have the power of a complete development suite with really intuitive processes &amp;amp; thorough documentation.&lt;/p&gt;

&lt;p&gt;If you'd like to view the source code for this tutorial, you can find it here: &lt;a href="https://github.com/jacobedawson/import-test-contracts-hardhat"&gt;https://github.com/jacobedawson/import-test-contracts-hardhat&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for playing ;)&lt;/p&gt;

&lt;p&gt;Follow me on Twitter: &lt;a href="https://twitter.com/jacobedawson"&gt;https://twitter.com/jacobedawson&lt;/a&gt;&lt;/p&gt;

</description>
      <category>web3</category>
      <category>ethereum</category>
      <category>dapps</category>
      <category>hardhat</category>
    </item>
  </channel>
</rss>
