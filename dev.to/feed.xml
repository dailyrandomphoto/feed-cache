<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>GN Tours and Services!</title>
      <author>Gaurav Singh</author>
      <pubDate>Wed, 07 Apr 2021 10:30:05 +0000</pubDate>
      <link>https://dev.to/gauravsingh9356/gn-tours-and-services-22o2</link>
      <guid>https://dev.to/gauravsingh9356/gn-tours-and-services-22o2</guid>
      <description>&lt;p&gt;Finally, I have completed our project. This was my first Java project on this scale. Seriously, I had no idea about how far I will make it after I decided on this idea to implement. But at last, I am happy to share that I implemented more utilities than I initially thought!&lt;/p&gt;

&lt;p&gt;𝓖𝓝 𝓣𝓸𝓾𝓻𝓼 𝓪𝓷𝓭 𝓢𝓮𝓻𝓿𝓲𝓬𝓮𝓼&lt;/p&gt;

&lt;p&gt;𝐅𝐮𝐥𝐥𝐲 𝐋𝐨𝐚𝐝𝐞𝐝 𝐑𝐞𝐚𝐥 𝐖𝐨𝐫𝐥𝐝 𝐀𝐩𝐩𝐥𝐢𝐜𝐚𝐭𝐢𝐨𝐧 𝐭𝐨 𝐝𝐞𝐯𝐞𝐥𝐨𝐩 𝐚 𝐬𝐲𝐬𝐭𝐞𝐦 𝐭𝐡𝐚𝐭 𝐚𝐮𝐭𝐨𝐦𝐚𝐭𝐞𝐬 𝐭𝐡𝐞 𝐩𝐫𝐨𝐜𝐞𝐬𝐬𝐞𝐬 𝐚𝐧𝐝 𝐚𝐜𝐭𝐢𝐯𝐢𝐭𝐢𝐞𝐬 𝐨𝐟 𝐚 𝐭𝐫𝐚𝐯𝐞𝐥.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#functionalities" class="anchor"&gt;
  &lt;/a&gt;
  Functionalities:
&lt;/h2&gt;


&lt;li&gt;Fully Secured Authentication i.e. SignUp, Login, logout,Forget Password utilities. Encryption and Decryption of user passwords&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Loading Welcome Screen to user&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Registration&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;OTP Email Sending utility.&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Confimation Email Sending utility after successfull registration&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Update Details if user wants to update&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;View User Details&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Different Packages with different prices and offerings&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;View Hotels&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Book Package Utility&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Dynamic Hotels Integration with Database&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Book Hotel Utility&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;View booked Package and Hotel&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;No of person, AC/Non AC room, food/No food etc all utilities offerings and then dynamically calculation of prices&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;View Destination&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Payment with Stripe&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Chat Bot for answering FAQs&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Review Us utility includes user rating out of 5 and their comments about our services&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;About Us&lt;/li&gt;
&lt;h2&gt;
  &lt;a href="#used-tech" class="anchor"&gt;
  &lt;/a&gt;
  Used Tech:
&lt;/h2&gt;


&lt;li&gt;Java Swing for UI&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;MySQL for Database&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;AES Algorithm for encryption/decryption of passwords&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;JavaMail for sending email OTP&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Stripe API Payment Gateway &lt;/li&gt;
&lt;h2&gt;
  &lt;a href="#database-records" class="anchor"&gt;
  &lt;/a&gt;
  Database Records
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#database-travel" class="anchor"&gt;
  &lt;/a&gt;
  Database == Travel
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#tables" class="anchor"&gt;
  &lt;/a&gt;
  Tables:
&lt;/h4&gt;


&lt;li&gt;account for auth&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;customer for registration&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;bookpackage for booking of package&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;hotel for adding hotels in table and dynamically fetching them in UI&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;bookhotel for booking hotels&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;review for reviewing our services&lt;/li&gt;
&lt;h2&gt;
  &lt;a href="#some-glimpses" class="anchor"&gt;
  &lt;/a&gt;
  Some Glimpses
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8bC0hDkI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cwpjvguogaittqq21oc9.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8bC0hDkI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cwpjvguogaittqq21oc9.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qW1liKEz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cf1ktkmsaoqkaf3sgew2.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qW1liKEz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cf1ktkmsaoqkaf3sgew2.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xUUts0dX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wt3vet5901a84dhclzs7.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xUUts0dX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wt3vet5901a84dhclzs7.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3SbkIwMk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7jhsj7k40pwq2490z33h.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3SbkIwMk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7jhsj7k40pwq2490z33h.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fqU5IF1B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vig1tk4b0e6k762j7kax.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fqU5IF1B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vig1tk4b0e6k762j7kax.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/GauravSingh9356/GN_Tours_Services/tree/master"&gt;Link to GitHub &lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#if-liked-feel-free-to-star-it-starstruck" class="anchor"&gt;
  &lt;/a&gt;
  If liked, feel free to star it! 🤩
&lt;/h4&gt;

</description>
      <category>java</category>
      <category>github</category>
      <category>devops</category>
      <category>programming</category>
    </item>
    <item>
      <title>Is Medium still a good platform for new writers in 2021? Discussing the pros and cons</title>
      <author>Nityesh Agarwal</author>
      <pubDate>Wed, 07 Apr 2021 10:02:20 +0000</pubDate>
      <link>https://dev.to/nityeshaga/is-medium-still-a-good-platform-for-new-writers-in-2021-discussing-the-pros-and-cons-559e</link>
      <guid>https://dev.to/nityeshaga/is-medium-still-a-good-platform-for-new-writers-in-2021-discussing-the-pros-and-cons-559e</guid>
      <description>&lt;p&gt;In the past 4 years, I have published 13 articles on Medium and have got to &lt;a href="https://medium.com/@nityeshagarwal"&gt;3k+ followers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here are the key lessons and tips I've learnt:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-medium-is-great-place-for-early-writers-to-reach-more-people" class="anchor"&gt;
  &lt;/a&gt;
  1. Medium is great place for early writers to reach more people.
&lt;/h3&gt;

&lt;p&gt;I was a nobody on the Internet. And Medium still boosted my articles, allowing me to reach hundreds of thousands of readers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-this-is-especially-true-if-you-publish-with-a-popular-medium-publication" class="anchor"&gt;
  &lt;/a&gt;
  2. This is especially true if you publish with a popular Medium publication.
&lt;/h3&gt;

&lt;p&gt;A lot of pubs accept articles from new writers and share it with their followers. &lt;/p&gt;

&lt;p&gt;I started by publishing with 3 large programming-focused publications and they were a large part of my early success.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-but-it-has-a-big-con-you-dont-own-your-audience-you-are-at-the-whims-of-the-medium-platform" class="anchor"&gt;
  &lt;/a&gt;
  3. But it has a big con - you don't own your audience. You are at the whims of the Medium platform.
&lt;/h3&gt;

&lt;p&gt;In the past 2 yrs, they've decided to clamp down the distribution of non-paywalled articles. &lt;/p&gt;

&lt;p&gt;This has made my 3k followers worth ~nothing for me. I have no way to reach them.&lt;/p&gt;

&lt;p&gt;This is also the reason why some of Medium's biggest publications have exited the platform in the past couple of yrs:&lt;/p&gt;

&lt;p&gt;• Signal v. Noise&lt;br&gt;
• FreeCodeCamp&lt;br&gt;
• HackerNoon&lt;/p&gt;

&lt;p&gt;(Read: &lt;a href="https://medium.com/signal-v-noise/signal-v-noise-exits-medium-56c483d827fc"&gt;Signal v. Noise exits Medium&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-you-should-also-beware-of-publishing-for-a-publication" class="anchor"&gt;
  &lt;/a&gt;
  4. You should also beware of publishing for a publication.
&lt;/h3&gt;

&lt;p&gt;When one of the publications that I had published with, decided to leave the Medium platform, they took my most popular articles (and all their SEO value) to their new website - leaving me high and dry.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-but-there-is-a-way-to-capture-the-upside-mediums-distribution-while-securing-yourself-from-the-downside-mediums-whims" class="anchor"&gt;
  &lt;/a&gt;
  5. But there is a way to capture the upside (Medium's distribution) while securing yourself from the downside (Medium's whims):
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Publish articles on your domain on your own website&lt;/li&gt;
&lt;li&gt;Republish them on Medium by &lt;a href="https://help.medium.com/hc/en-us/articles/360033930293-Set-a-canonical-link"&gt;setting a canonical URL&lt;/a&gt; to your version&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Search engines use canonical links to determine and prioritize the ultimate source of content, removing confusion when there are multiple copies of the same document in different locations. Sites that publish an overabundance of duplicate content without indicating a canonical link may be penalized in search engine rankings.&lt;/p&gt;




&lt;p&gt;I now publish articles on my own website under my domain - &lt;a href="https://www.nityesh.com/"&gt;nityesh.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But then, I also also republish them on Medium by adding a canonical URL pointing to my website's version of the article.&lt;/p&gt;

</description>
      <category>career</category>
      <category>beginners</category>
      <category>productivity</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Lessons from the Gilded Rose refactoring Kata</title>
      <author>Alexandre Ruban</author>
      <pubDate>Wed, 07 Apr 2021 09:59:56 +0000</pubDate>
      <link>https://dev.to/alexandreruban/lessons-from-the-gilded-rose-refactoring-kata-pgh</link>
      <guid>https://dev.to/alexandreruban/lessons-from-the-gilded-rose-refactoring-kata-pgh</guid>
      <description>&lt;p&gt;The &lt;a href="https://github.com/emilybache/GildedRose-Refactoring-Kata"&gt;Gilded Rose refactoring Kata&lt;/a&gt; is a famous exercise used to teach some principles of Object Oriented design. In addition to finding this Kata really fun, I think it illustrates perfectly 3 very important aspects of real world software development: the &lt;strong&gt;need for a robust test suite&lt;/strong&gt;, &lt;strong&gt;when to refactor your code&lt;/strong&gt; and &lt;strong&gt;how to refactor your code&lt;/strong&gt;. Are you ready? Let's dive in!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-requirements-of-the-gilded-rose-kata" class="anchor"&gt;
  &lt;/a&gt;
  The requirements of the Gilded Rose Kata
&lt;/h2&gt;

&lt;p&gt;The owner of the Gilded Rose inn, Allison, sells some of the finest goods (aged bries, backstage passes, sulfuras and normal goods). Those goods have 3 attributes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The name of the good&lt;/li&gt;
&lt;li&gt;A quality integer which denotes how valuable the good is&lt;/li&gt;
&lt;li&gt;A sell in integer which represents the number of days before the sell by date&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unfortunately, the goods are constantly degrading in quality as they approach their sell by date and of course, the rules of the quality changes per day are different for each type of good.&lt;/p&gt;

&lt;p&gt;To keep track of her inventory, Allison uses a legacy software that is in charge of keeping track of the quality and number of days before the sell by date. She was really happy with it until now, because she needs a new feature. She hires you as a developer to add a new type of "conjured" goods to her inventory management tool.&lt;/p&gt;

&lt;p&gt;If you want to read the full description of the Kata, you will find the &lt;a href="https://github.com/emilybache/GildedRose-Refactoring-Kata/blob/main/GildedRoseRequirements.txt"&gt;complete set of requirements here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-need-a-robust-test-suite" class="anchor"&gt;
  &lt;/a&gt;
  You need a robust test suite
&lt;/h2&gt;

&lt;p&gt;Well there are 2 things you should know about Allison's inventory management tool:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The application is almost only composed of a &lt;a href="https://github.com/emilybache/GildedRose-Refactoring-Kata/blob/main/ruby/gilded_rose.rb#L7"&gt;single 46 lines method&lt;/a&gt; full of conditionals&lt;/li&gt;
&lt;li&gt;There are no tests&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now I want you to have a look at this method and imagine having to add a new set of rules for a new good here. How does it make you feel? The answer is probably terrified of breaking everything without even knowing it and you are right! The first part if you want to solve this Kata is to write good tests.&lt;/p&gt;

&lt;p&gt;In real applications, the complexity naturally grows just like in the Gilded Rose Kata. Without a robust test suite, you will inevitably break things, get a lot of errors in production and frustrate your users.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-should-not-refactor-your-code-when-it-doesnt-have-to-change" class="anchor"&gt;
  &lt;/a&gt;
  You should not refactor your code when it doesn't have to change
&lt;/h2&gt;

&lt;p&gt;Before she needed this new feature, Allison was really happy with her inventory management tool. Refactoring was not needed, in fact, there was no need to change anything before the new requirement. At this point, you should not refactor your code because you only risk making things worse by breaking a tool Allison is happy working with. If you as the developer are not working on this part of the application, all you need to do is safely ignore this ugly code even if you could "improve" it.&lt;/p&gt;

&lt;p&gt;The new requirement however changes everything. Should you start by a refactoring or should you add the new feature while keeping the old "architecture"? Here, you really have two ways to go. You &lt;em&gt;could&lt;/em&gt;, as Kent Beck said "make the change easy then make the easy change" and refactor the code first or you &lt;em&gt;could&lt;/em&gt; just add the new feature in a quick and dirty way. &lt;/p&gt;

&lt;p&gt;There are no absolute rules here. &lt;/p&gt;

&lt;p&gt;What is the cost of refactoring? Maybe it's not worth your time if the code almost never changes. Maybe the code isn't that clean but still manageable. What is the cost of not refactoring? Will I lose even more time trying to add my new feature in poorly designed code than refactoring and then adding the new feature? What is the long term impact of not refactoring? Am I likely to pay a small cost frequently that will compound and become much bigger than to refactor now?&lt;/p&gt;

&lt;p&gt;In our Gilded Rose Kata however the answer is obvious. You will really struggle to add the new feature in this untangled mess of conditionals. It will be even longer than to add a reliable test suite, make the change easy by applying refactoring techniques to the legacy code and only then make the easy change.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-refactor" class="anchor"&gt;
  &lt;/a&gt;
  How to refactor?
&lt;/h2&gt;

&lt;p&gt;The main ideas in Object Oriented design are always the same. You want to have small objects with a single responsibility that knows as little as possible about one another. The refactoring technique you should use here is called &lt;a href="https://www.refactoring.com/catalog/replaceConditionalWithPolymorphism.html"&gt;replace conditional with polymorphism&lt;/a&gt;. The main idea here is that instead of having conditionals everywhere, you will have one factory method centralizing the conditions and in charge of generating an instance of the right type of good, where each type of good has its own class implementing the same interface.&lt;/p&gt;

&lt;p&gt;If you want to learn more about refactoring techniques, here is the link to the &lt;a href="https://www.youtube.com/watch?v=8bZh5LMaSmE&amp;amp;t=593s"&gt;amazing talk of Sandi Metz&lt;/a&gt; during RailsConf 2014 that inspired this article. If you like this kind of refactoring Katas, you should definitely check her great book &lt;a href="https://sandimetz.com/99bottles"&gt;99 bottles of OOP&lt;/a&gt;, it is almost the same exercise and it's really fun to read!&lt;/p&gt;

&lt;p&gt;Thanks for reading! If you liked this article, you can &lt;a href="https://world.hey.com/alexandre"&gt;subscribe to my newsletter&lt;/a&gt;, I try to write an article once a month!&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>testing</category>
      <category>codequality</category>
      <category>programming</category>
    </item>
    <item>
      <title>Bitwise &amp; Bitshift in Java</title>
      <author>Simon Aust</author>
      <pubDate>Wed, 07 Apr 2021 09:56:46 +0000</pubDate>
      <link>https://dev.to/siaust/bitwise-bitshift-in-java-4cjb</link>
      <guid>https://dev.to/siaust/bitwise-bitshift-in-java-4cjb</guid>
      <description>&lt;p&gt;In programming we use control flow statements to change the execution of our code. If &lt;em&gt;this&lt;/em&gt; then &lt;em&gt;that&lt;/em&gt;, sort of thing. I'm sure we all know the standard keywords, &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt;, &lt;code&gt;else if&lt;/code&gt;. When we use &lt;code&gt;if&lt;/code&gt; or &lt;code&gt;else if&lt;/code&gt; we put a condition in the parenthesis, which will return a boolean, essentially a yes do this, or a no skip this bit of code and move on. &lt;/p&gt;

&lt;p&gt;Here's a (simple) example -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (1 &amp;lt; 2) {
    System.out.println("One is less than two, well played.");
} else {
    System.out.println("Why am I here? No one listens to me.");
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conditional-relational-equality-operators" class="anchor"&gt;
  &lt;/a&gt;
  Conditional, Relational, Equality Operators
&lt;/h2&gt;

&lt;p&gt;In the snippet of code above you can see the &lt;strong&gt;less than&lt;/strong&gt; operator &lt;code&gt;&amp;lt;&lt;/code&gt; evaluating the two operands. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;An operand is a object which the operator provides a function&lt;br&gt;
on. In our example above, &lt;code&gt;1 &amp;lt; 2&lt;/code&gt;, 1 and 2 would be operands.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Other operators we know and love are -&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#relatioinal" class="anchor"&gt;
  &lt;/a&gt;
  Relatioinal
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;=&lt;/code&gt; less than or equal to&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;gt;&lt;/code&gt; greater than, &lt;code&gt;&amp;gt;=&lt;/code&gt; greater than or equal to&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#equality" class="anchor"&gt;
  &lt;/a&gt;
  Equality
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;==&lt;/code&gt; equal to&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;!=&lt;/code&gt; not equal to&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#conditional" class="anchor"&gt;
  &lt;/a&gt;
  Conditional
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;||&lt;/code&gt; or&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The last two are interesting, have you ever seen them on their own, like &lt;code&gt;|&lt;/code&gt; or &lt;code&gt;&amp;amp;&lt;/code&gt;? Well these are the bitwise version of those conditional operators, bitwise &lt;strong&gt;or&lt;/strong&gt; and bitwise &lt;strong&gt;and&lt;/strong&gt;. The difference being conditional operators work by evaluating two boolean values, while bitwise operators can evaluate two booleans, or two integer types (whole numbers) by evaluating the binary representation. Lets explore them in more depth.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Integral types in Java are &lt;code&gt;byte&lt;/code&gt;, &lt;code&gt;short&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt; and &lt;br&gt;
&lt;code&gt;char&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#bitwise-operators" class="anchor"&gt;
  &lt;/a&gt;
  Bitwise Operators
&lt;/h2&gt;

&lt;p&gt;Firstly lets have a little look at what an integer looks like in binary. We can use the handy static method &lt;code&gt;Integer.toBinaryString(int)&lt;/code&gt; and output to console.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;int twenty = 20;
System.out.println(Integer.toBinaryString(twenty)); // 10100

// the bits are one in position 2^2 (which equals 4) and 2^4 (16)
// 10100
// ^ ^ 
// 16 + 4 = 20
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Important note: &lt;code&gt;Integer.toBinaryString()&lt;/code&gt; does not return &lt;br&gt;
extra leading zeroes. An &lt;code&gt;int&lt;/code&gt; is 32 bits, but only the largest&lt;br&gt;
bit of the value to smallest bit is shown in the returned &lt;br&gt;
string. &lt;/p&gt;
&lt;/blockquote&gt;




&lt;h3&gt;
  &lt;a href="#-raw-endraw-inclusive-or" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;|&lt;/code&gt; inclusive OR
&lt;/h3&gt;

&lt;p&gt;The inclusive &lt;strong&gt;or&lt;/strong&gt; operator will check the binary digits of two integer types, one column at a time, if either is binary 1, then the result is binary 1. Here's an example -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;int five = 5;  // 0101
int nine = 9;  // 1001
System.out.println(Integer.toBinaryString(five | nine)); // 1101
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What is happening here? Lets break it down -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// each bit in each column is compared, from left to right -
// 0 or 1, 1 or 0, 0 or 0 and finally 1 or 1

// 0101
// 1001
// ----
// 1101 == decimal 13
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So you could say when a smaller integer is being compared with a bitwise &lt;strong&gt;or&lt;/strong&gt; statement with a larger integer, the result will always at least the value of the bigger number.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#-raw-amp-endraw-and" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;amp;&lt;/code&gt; AND
&lt;/h3&gt;

&lt;p&gt;The &lt;strong&gt;and&lt;/strong&gt; operator will only result in binary one when both bits are binary one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;int three = 3; // 011
int five = 5; //  101
System.out.println(Integer.toBinaryString(three &amp;amp; five)); // 1 

// from right to left, 0 &amp;amp; 1 = 0, 1 &amp;amp; 0 = 0, 1 &amp;amp; 1 = 1
// 011
// 101
// ---
// 001
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can use &lt;code&gt;&amp;amp;&lt;/code&gt; to discover whether a number is odd or even. As &lt;br&gt;
the only odd digit in a binary pattern is 

&lt;span class="katex-element"&gt;
  &lt;span class="katex"&gt;&lt;span class="katex-mathml"&gt;202^0&lt;/span&gt;&lt;span class="katex-html"&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord"&gt;2&lt;/span&gt;&lt;span class="msupsub"&gt;&lt;span class="vlist-t"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mtight"&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;
 , the rightmost bit, we can &lt;br&gt;
use a bit mask to return the first bit, 1 or 0, odd or even, when comparing a number.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;int nine = 9; // 1001
int six = 6; //  0110
//                  ^ rightmost bit
int bitMask = 1; // 0001
System.out.println(1 == (six &amp;amp; bitMask) ? "Odd" : "Even"); // Odd
System.out.println(1 == (nine &amp;amp; bitMask) ? "Odd" : "Even");// Even
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;A bitmask is a binary pattern which will allow us to use bitwise&lt;br&gt;
operators to choose which bits of another pattern to operate on&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A common way to check if a number is odd or even is using the modulus operator &lt;code&gt;%&lt;/code&gt;, which will return the remainder between two numbers. When using modulus 2, any even number will return zero, any odd number one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;System.out.println(11 % 2); // 1, we know it's odd
System.out.println(10 % 2); // 0, we know it's even
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#-raw-endraw-exclusive-or-xor" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;^&lt;/code&gt; exclusive or XOR
&lt;/h3&gt;

&lt;p&gt;When evaluating two bits it will return 1 only when a single operand is 1.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;int five = 5; // 101
int six = 6; // 110
System.out.println(Integer.toBinaryString(five ^ six)); // 11
// 101 
// 110 
// ----
// 011, decimal 3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#-raw-endraw-unary-complement-not" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;~&lt;/code&gt; unary complement / NOT
&lt;/h3&gt;

&lt;p&gt;Inverts all binary one bits to zero, and all binary zero bits to one. In essence &lt;code&gt;NOT 1 == 0&lt;/code&gt;, &lt;code&gt;NOT 0 == 1&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;int five = 5; // 101b
System.out.println(~five); //  
// 101
// --- NOT
// 11111111111111111111111111111010 == -6
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hold on, why is &lt;code&gt;~5&lt;/code&gt;, &lt;code&gt;101&lt;/code&gt; in binary, inverted with a bitwise NOT &lt;code&gt;~&lt;/code&gt;, &lt;em&gt;not&lt;/em&gt; &lt;code&gt;010&lt;/code&gt;, i.e. decimal 2? Well, computers use binary to represent numbers, both positive &lt;em&gt;and&lt;/em&gt; negative. One way to represent negative numbers is a numbering scheme called &lt;strong&gt;twos complement&lt;/strong&gt;. What this means is the leftmost bit in a binary pattern, or the most significant bit (as it's the largest number), is used to signify whether the number is positive or negative, &lt;code&gt;1&lt;/code&gt; is for a negative number, &lt;code&gt;0&lt;/code&gt;positive. As we are using a integer primitive with our bitwise NOT here, an int is 32 bit, or 4 bytes, in size. As mentioned earlier, the method &lt;code&gt;Integer.toBinaryString()&lt;/code&gt; omits preceeding zeroes in a pattern by default, but the rest of the int is infact filled with zeroes to the MSB on the left. &lt;/p&gt;

&lt;p&gt;So, all those zeroes have now been inverted to ones, but how does that calculate to negative six? Binary is a summation of all bit values which are 1.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// 0111
// ^^^^
// ||||_ 2^0 == 1
// |||_ 2^1 == 2
// ||_ 2^2 == 4
// |_ 2^3 == 8
// 
// So summing the bits which are 1 gives us, 4 + 2 + 1 == 7
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As the MSB is negative if it is 1, and remember our NOT operator inverted it to 1, that value is our base value before we sum the rest of the binary digits from left to right.&lt;/p&gt;

&lt;p&gt;Lets do a example with a smaller integer type, &lt;code&gt;byte&lt;/code&gt; which is 8 bits or, not surprisingly, one byte.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;byte five = 5;
// 0x00FF is a bitmask in hexadecimal, it means we only see 8 
// bits, representing our byte primitive
System.out.println(Integer.toBinaryString(0x00FF &amp;amp; ~five));
// 11111010
// ||||| |
// ||||| |_ 2^1 == 2
// ||||| 
// |||||_ 2^3 == 8
// ||||_ 2^4 == 16
// |||_ 2^5 == 32
// ||_ 2^6 == 64 
// |_ -2^7 == -128 (Most significant bit)

// Doing the sum;
// -256 + 64 + 32 + 16 + 8 + 2 == -6
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I hope that helps you understand quickly how we got to negative six as our bitwise NOT result, but do please check &lt;a href="https://www.bbc.co.uk/bitesize/guides/zjfgjxs/revision/5"&gt;this BBC guide on twos complement&lt;/a&gt; for some more help if you need it as I won't go into it any deeper.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Unary means the operator works on only one &lt;br&gt;
operand. For example as seen in &lt;code&gt;for&lt;/code&gt; loops frequently, &lt;code&gt;i++&lt;/code&gt; &lt;br&gt;
unary postfix operator, increments &lt;code&gt;i&lt;/code&gt; by one.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#bitshift" class="anchor"&gt;
  &lt;/a&gt;
  Bitshift
&lt;/h2&gt;

&lt;p&gt;There is also some other operators known as bitshift. These move the bits left or right in a binary pattern.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#-raw-ltlt-endraw-left-shift" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; left shift
&lt;/h3&gt;

&lt;p&gt;Moves the bits in a binary pattern to &lt;em&gt;n&lt;/em&gt; times to the left. It is represented as &lt;code&gt;number &amp;lt;&amp;lt; placesToShift&lt;/code&gt;, for example &lt;code&gt;1 &amp;lt;&amp;lt; 2&lt;/code&gt;, moves the bits in integer one two places to the left. The effect of moving the bits multiplies the number by 
&lt;span class="katex-element"&gt;
  &lt;span class="katex"&gt;&lt;span class="katex-mathml"&gt;2n2^n&lt;/span&gt;&lt;span class="katex-html"&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord"&gt;2&lt;/span&gt;&lt;span class="msupsub"&gt;&lt;span class="vlist-t"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mathdefault mtight"&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;
. That is to say, one left shift will multiply the number by 
&lt;span class="katex-element"&gt;
  &lt;span class="katex"&gt;&lt;span class="katex-mathml"&gt;21=22^1 = 2&lt;/span&gt;&lt;span class="katex-html"&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord"&gt;2&lt;/span&gt;&lt;span class="msupsub"&gt;&lt;span class="vlist-t"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mtight"&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mrel"&gt;=&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord"&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;
. A shift two places left would be the number multiplied by 
&lt;span class="katex-element"&gt;
  &lt;span class="katex"&gt;&lt;span class="katex-mathml"&gt;22=42^2 = 4&lt;/span&gt;&lt;span class="katex-html"&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord"&gt;2&lt;/span&gt;&lt;span class="msupsub"&gt;&lt;span class="vlist-t"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mtight"&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mrel"&gt;=&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord"&gt;4&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;
.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;System.out.println(2 &amp;lt;&amp;lt; 1); // 4
// 0010 == decimal 2
// 0010 &amp;lt;&amp;lt; 1 == 0100 == 4
                 ^- 
System.out.println(2 &amp;lt;&amp;lt; 2) // 8
// 0010 &amp;lt;&amp;lt; 2 == 1000 == 8
                ^--  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#-raw-gtgt-endraw-right-shift" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; right shift
&lt;/h3&gt;

&lt;p&gt;As above, the right shift uses the format &lt;code&gt;number &amp;gt;&amp;gt; timesToShift&lt;/code&gt;, but it shifts the bits to the right. In effect dividing the number by 
&lt;span class="katex-element"&gt;
  &lt;span class="katex"&gt;&lt;span class="katex-mathml"&gt;2n2^n&lt;/span&gt;&lt;span class="katex-html"&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord"&gt;2&lt;/span&gt;&lt;span class="msupsub"&gt;&lt;span class="vlist-t"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mathdefault mtight"&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;
.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;int eight = 8; // 1000 
System.out.println(8 &amp;gt;&amp;gt; 1); // 2^1 == 2. 8 / 2 == 4
// 1000 &amp;gt;&amp;gt; 1 == 0100 == 4
System.out.println(8 &amp;gt;&amp;gt; 2); // 2^2 == 4. 8 / 4 == 2
// 1000 &amp;gt;&amp;gt; 2 == 0010 == 2
System.out.println(8 &amp;gt;&amp;gt; 3); // 2^3 == 8. 8 / 8 == 1
// 1000 &amp;gt;&amp;gt; 4 == 0001 == 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you've read this blog you can do this quick trick to impress your coding friends, to divide any number in half &lt;code&gt;integer &amp;gt;&amp;gt; 1&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;With negative numbers things get a little more interesting. Remember twos compliment uses the most significant bit to declare the number positive or negative, for a positive number bits will be filled with zeroes, for a negative number bits will be filled with ones. The same method applies from the bitwise NOT example above, the binary is summed to find the resulting number.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;byte negativeFour = -4;
System.out.println(Integer.toBinaryString(0x00FF &amp;amp; 
    negativeFour));      // 11111100
System.out.println(Integer.toBinaryString(0x00FF &amp;amp; 
    negativeFour &amp;gt;&amp;gt; 1)); // 11111110
//                          ^ 1 filled to the left
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#-raw-gtgtgt-endraw-unsigned-right-shift" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; unsigned right shift
&lt;/h3&gt;

&lt;p&gt;Twos complement is a signed representation of a number in binary form. That is to say it can represent positive and negative numbers. An unsigned number has no bit that declares it one or the other, so they are always positive. In the case of the unsigned right shift, space after a shift is filled with zeroes, so any negative number will become a positive number as the MSB will no longer be 1.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;int negativeFour = -4;
System.out.println(Integer.toBinaryString(negativeFour));
System.out.println(Integer.toBinaryString(negativeFour &amp;gt;&amp;gt;&amp;gt; 2));
System.out.println(negativeFour &amp;gt;&amp;gt;&amp;gt; 2);

// Output
// 11111111111111111111111111111100
// ^ MSB is 1, the number is negative
// 00111111111111111111111111111111*
// ^^ shifted two places right and filled with zeroes 
// The final output is the sum of the resulting binary,
// without a sign bit it is a positive number
// 1073741823
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;* I had to amend the zeroes here for example purposes. The actual output will be without the zeroes.&lt;/p&gt;

&lt;p&gt;I hope that is clear for you, it's a little tricky to calculate these long binary patterns just looking at them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example-use-case-of-bitshift-with-booleans" class="anchor"&gt;
  &lt;/a&gt;
  Example use case of bitshift with booleans
&lt;/h2&gt;

&lt;p&gt;There is really only one bitwise operator which isn't directly translatable with a single conditional operator and that is XOR, exclusive &lt;strong&gt;or&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Say you are have a staff rota application. It has employee objects, with a method that returns if they are scheduled to be at work for a given shift. You only need one worker per shift, so you have a method which checks that only one worker is scheduled on a shift at a time, using the &lt;code&gt;^&lt;/code&gt; operator.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// atWork(Date) returns true if employee scheduled for work on 
// that date. Both employees are scheduled for work today.
LocalDate today = LocalDate.now();
if(emplyee1.atWork(today) ^ employee2.atWork(today) {
    // we save the rota if only one employee is working
    workRota.save();
} else {
   // reschedule one of the employees, amend the rota
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can make the same statement with conditional operators but it is a bit more long winded -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (!employee.atWork(today) &amp;amp;&amp;amp; employee.atWork(today) 
   || employee.atWork(today) &amp;amp;&amp;amp; !employee.atWork(today))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It may be a convoluted example that you probably won't have to put in to practice yourself, but it's another tool for your toolbelt, which is never a bad thing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Bitwise and bitshift can be confusing at first, possibly you've not seen them often, and you may wonder why you would use them. In fact they can be very useful in algorithms, where manipulating binary bits efficiently is very important. Mainly though, it's good that if you see these in someone else's code you can understand what is happening.&lt;/p&gt;




&lt;p&gt;Cover image by &lt;a href="https://pixabay.com/users/geralt-9301/?utm_source=link-attribution&amp;amp;utm_medium=referral&amp;amp;utm_campaign=image&amp;amp;utm_content=5180477"&gt;Gerd Altmann&lt;/a&gt; from &lt;a href="https://pixabay.com/?utm_source=link-attribution&amp;amp;utm_medium=referral&amp;amp;utm_campaign=image&amp;amp;utm_content=5180477"&gt;Pixabay&lt;/a&gt;&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>java</category>
      <category>beginners</category>
      <category>binary</category>
    </item>
    <item>
      <title>Removing sensitive data from your Git history with BFG</title>
      <author>Touré Holder</author>
      <pubDate>Wed, 07 Apr 2021 09:55:20 +0000</pubDate>
      <link>https://dev.to/toureholder/removing-sensitive-data-from-your-git-history-with-bfg-4ni4</link>
      <guid>https://dev.to/toureholder/removing-sensitive-data-from-your-git-history-with-bfg-4ni4</guid>
      <description>&lt;p&gt;Here's how to remove sensitive data, like certificate files or passwords in your files, from your git repo and history with &lt;a href="https://rtyley.github.io/bfg-repo-cleaner/"&gt;BFG Repo-Cleaner&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-remove-the-sensitive-files-and-secrets-from-your-code-and-commit-changes" class="anchor"&gt;
  &lt;/a&gt;
  1. Remove the sensitive files and secrets from your code and commit changes
&lt;/h2&gt;

&lt;p&gt;Note that, by default, BFG doesn't modify the contents of your latest commit. So, remove the sensitive files and secrets from your code, commit the changes and ensure that your latest commit is clean with none of the undesired data in it before proceeding. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-install-bfg" class="anchor"&gt;
  &lt;/a&gt;
  2. Install BFG
&lt;/h2&gt;

&lt;p&gt;You can download a JAR from the &lt;a href="https://rtyley.github.io/bfg-repo-cleaner/"&gt;site&lt;/a&gt;. If you're on Mac, &lt;code&gt;brew install bfg&lt;/code&gt; should suffice.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-clone-a-fresh-copy-of-your-repo-using-the-mirror-flag" class="anchor"&gt;
  &lt;/a&gt;
  3. Clone a fresh copy of your repo, using the --mirror flag:
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Example&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git clone &lt;span class="nt"&gt;--mirror&lt;/span&gt; git://example.com/my-repo.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-clean-sensitive-files" class="anchor"&gt;
  &lt;/a&gt;
  4. Clean sensitive files
&lt;/h2&gt;

&lt;p&gt;Use &lt;code&gt;--delete-files&lt;/code&gt; to nuke files in your repo history.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Examples&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;bfg &lt;span class="nt"&gt;--delete-files&lt;/span&gt; certificate.p12 my-repo.git
&lt;span class="nv"&gt;$ &lt;/span&gt;bfg &lt;span class="nt"&gt;--delete-files&lt;/span&gt; keystore.jks my-repo.git
&lt;span class="nv"&gt;$ &lt;/span&gt;bfg &lt;span class="nt"&gt;--delete-files&lt;/span&gt; id_&lt;span class="o"&gt;{&lt;/span&gt;dsa,rsa&lt;span class="o"&gt;}&lt;/span&gt; my-repo.git
&lt;span class="nv"&gt;$ &lt;/span&gt;bfg &lt;span class="nt"&gt;--delete-files&lt;/span&gt; &lt;span class="k"&gt;*&lt;/span&gt;.&lt;span class="o"&gt;{&lt;/span&gt;txt,log&lt;span class="o"&gt;}&lt;/span&gt; my-repo.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that the specified name matches on file name, not on path within repo. So &lt;code&gt;$ bfg --delete-files path/to/certificate.p12 my-repo.git&lt;/code&gt; won't work.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-clean-sensitive-strings" class="anchor"&gt;
  &lt;/a&gt;
  5. Clean sensitive strings
&lt;/h2&gt;

&lt;p&gt;Use &lt;code&gt;--replace-text&lt;/code&gt; to clean strings from your repo history. Each string will be rewritten as "***REMOVED***" by default. This is a two-step process.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#51-create-a-file-with-a-new-line-for-each-string-you-want-to-remove" class="anchor"&gt;
  &lt;/a&gt;
  5.1 Create a file with a new line for each string you want to remove
&lt;/h3&gt;

&lt;p&gt;Create a simple text file however you'd like.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Example&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"password123"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; passwords.txt
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"123password"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; passwords.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#52-run-the-command" class="anchor"&gt;
  &lt;/a&gt;
  5.2 Run the command
&lt;/h3&gt;

&lt;p&gt;Run &lt;code&gt;bfg --replace-text&lt;/code&gt; referencing the file you just created.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Example&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;bfg &lt;span class="nt"&gt;--replace-text&lt;/span&gt; passwords.txt my-repo.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#6-take-a-look-at-your-new-history" class="anchor"&gt;
  &lt;/a&gt;
  6. Take a look at your new history
&lt;/h2&gt;

&lt;p&gt;Enter the folder of the git repo and make sure your history has been updated.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Example&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;my-repo.git

&lt;span class="c"&gt;# Use git commands to examine the history&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git log
&lt;span class="nv"&gt;$ &lt;/span&gt;git show HEAD
&lt;span class="nv"&gt;$ &lt;/span&gt;git show HEAD~1
&lt;span class="nv"&gt;$ &lt;/span&gt;git show d89bb58
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(You won't see the physical files of your working tree if you list files in this directory, since we did a bare/mirror clone, in case you were wondering.)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-strip-out-the-unwanted-dirty-data" class="anchor"&gt;
  &lt;/a&gt;
  7. Strip out the unwanted dirty data
&lt;/h2&gt;

&lt;p&gt;Once satisfied with the state of the history, clean up those sensitive files, which git now considers unnecessary.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git reflog expire &lt;span class="nt"&gt;--expire&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;now &lt;span class="nt"&gt;--all&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git gc &lt;span class="nt"&gt;--prune&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;now &lt;span class="nt"&gt;--aggressive&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#8-push" class="anchor"&gt;
  &lt;/a&gt;
  8. Push
&lt;/h2&gt;

&lt;p&gt;Finally, once you're happy with the updated state of your repo, push it back up and you're done!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you're with a team have everyone ditch their old copies of the repo and do fresh clones.&lt;/p&gt;

&lt;p&gt;Thanks for following along. Cheers!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Show off your Workspace 👩🏻‍💻💯</title>
      <author>Sarthak Sharma</author>
      <pubDate>Wed, 07 Apr 2021 08:57:16 +0000</pubDate>
      <link>https://dev.to/sarthology/show-off-your-workspace-2iol</link>
      <guid>https://dev.to/sarthology/show-off-your-workspace-2iol</guid>
      <description>&lt;p&gt;After launching a beta version of my new side hustle, &lt;strong&gt;&lt;em&gt;&lt;a href="https://prototion.com/"&gt;Prototion&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;, a marketplace for Template makers to sell their Notion Templates, I decided to leave my office and go remote for few weeks.  &lt;/p&gt;

&lt;p&gt;So I selected my favourite place on earth, Himalayas, to work from the hills 🏔. Found a decent hostel in Mcleodganj, Himachal and cafe with high-speed internet, where one can sit and work. Here is a glance at my workspace for time being.&lt;br&gt;
&lt;/p&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wuP9LcGA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/EyW7wVUUcAIc85c.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--DLARNBwr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1357550397120868352/C0-T9dBU_normal.jpg" alt="𝙎𝙖𝙧𝙩𝙝𝙖𝙠 𝙎𝙝𝙖𝙧𝙢𝙖 🚀 profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        𝙎𝙖𝙧𝙩𝙝𝙖𝙠 𝙎𝙝𝙖𝙧𝙢𝙖 🚀
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="comment-mentioned-user" href="https://dev.to/sarthology"&gt;@sarthology&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Travel and hustle, perks of being in tech. &lt;br&gt;&lt;br&gt;My workspace for this week. 💯✨👨🏻‍💻🔥&lt;br&gt;&lt;br&gt;&lt;a href="https://twitter.com/hashtag/DEVCommunity"&gt;#DEVCommunity&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/remotework"&gt;#remotework&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/digitalnomad"&gt;#digitalnomad&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      08:39 AM - 07 Apr 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1379715348547522560" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1379715348547522560" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1379715348547522560" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;making new friends as well 😅&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q7f1U2UZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/EyW8cH0VcAQ_lUT.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--DLARNBwr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1357550397120868352/C0-T9dBU_normal.jpg" alt="𝙎𝙖𝙧𝙩𝙝𝙖𝙠 𝙎𝙝𝙖𝙧𝙢𝙖 🚀 profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        𝙎𝙖𝙧𝙩𝙝𝙖𝙠 𝙎𝙝𝙖𝙧𝙢𝙖 🚀
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="comment-mentioned-user" href="https://dev.to/sarthology"&gt;@sarthology&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Sharing with a friend 😅🤷🏻‍♂️ 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      08:42 AM - 07 Apr 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1379716100414304256" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1379716100414304256" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1379716100414304256" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Enough of my stuff. I'm excited to see your workspaces. What changes have you made?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/qAkvnjpXqpIUvkxpG0/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/qAkvnjpXqpIUvkxpG0/giphy.gif" alt=""&gt;&lt;/a&gt; &lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>discuss</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Solution: Determine if String Halves Are Alike</title>
      <author>seanpgallivan</author>
      <pubDate>Wed, 07 Apr 2021 08:36:37 +0000</pubDate>
      <link>https://dev.to/seanpgallivan/solution-determine-if-string-halves-are-alike-pid</link>
      <guid>https://dev.to/seanpgallivan/solution-determine-if-string-halves-are-alike-pid</guid>
      <description>&lt;p&gt;&lt;em&gt;This is part of a series of Leetcode solution explanations (&lt;a href="https://dev.to/seanpgallivan/leetcode-solutions-index-57fl"&gt;index&lt;/a&gt;). If you liked this solution or found it useful,&lt;/em&gt; &lt;strong&gt;&lt;em&gt;please like&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;this post and/or&lt;/em&gt; &lt;strong&gt;&lt;em&gt;upvote&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;&lt;a href="https://leetcode.com/problems/determine-if-string-halves-are-alike/discuss/1146651"&gt;my solution post on Leetcode's forums&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#leetcode-problem-1704-easy-determine-if-string-halves-are-alike" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://leetcode.com/problems/determine-if-string-halves-are-alike/"&gt;Leetcode Problem #1704 (&lt;em&gt;Easy&lt;/em&gt;): Determine if String Halves Are Alike&lt;/a&gt;
&lt;/h4&gt;




&lt;h4&gt;
  &lt;a href="#description" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Description:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You are given a string &lt;code&gt;s&lt;/code&gt; of even length. Split this string into two halves of equal lengths, and let &lt;code&gt;a&lt;/code&gt; be the first half and &lt;code&gt;b&lt;/code&gt; be the second half.&lt;/p&gt;

&lt;p&gt;Two strings are &lt;strong&gt;alike&lt;/strong&gt; if they have the same number of vowels (&lt;code&gt;'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'&lt;/code&gt;). Notice that &lt;code&gt;s&lt;/code&gt; contains uppercase and lowercase letters.&lt;/p&gt;

&lt;p&gt;Return &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are &lt;strong&gt;alike&lt;/strong&gt;. Otherwise, return &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#examples" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Examples:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 1:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;s = "book"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;a = "bo" and b = "ok". a has 1 vowel and b has 1 vowel. Therefore, they are alike.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 2:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;s = "textbook"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;a = "text" and b = "book". a has 1 vowel whereas b has 2. Therefore, they are not alike.&lt;br&gt;Notice that the vowel o is counted twice.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 3:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;s = "MerryChristmas"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 4:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;s = "AbCdEfGh"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#constraints" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Constraints:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;2 &amp;lt;= s.length &amp;lt;= 1000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;s.length&lt;/code&gt; is even.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;s&lt;/code&gt; consists of &lt;strong&gt;uppercase and lowercase&lt;/strong&gt; letters.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#idea" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Idea:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;This problem is pretty straightforward. The first issue is being able to identify vowels. There are obviously many ways to do this, but this seems like a good place to use some kind of vowel lookup data structure (&lt;strong&gt;vowels&lt;/strong&gt;). Depending on the language, it can be a string, a dictionary, a map, a set, etc.&lt;/p&gt;

&lt;p&gt;Then we just need to keep a balance counter (&lt;strong&gt;ans&lt;/strong&gt;) and iterate through both halves of the input string (&lt;strong&gt;S&lt;/strong&gt;) and increment &lt;strong&gt;ans&lt;/strong&gt; whenever the first half has a vowel and decrement &lt;strong&gt;ans&lt;/strong&gt; whenever the second half has a vowel.&lt;/p&gt;

&lt;p&gt;Once we're done, we can just &lt;strong&gt;return ans == 0&lt;/strong&gt; to determine if the two string halves are balanced.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#javascript-code" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Javascript Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;vowels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;aeiouAEIOU&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;halvesAreAlike&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;vowels&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;vowels&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#python-code" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Python Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;vowels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"aeiouAEIOU"&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;halvesAreAlike&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;vowels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;vowels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#java-code" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Java Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;vowels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"aeiouAEIOU"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;halvesAreAlike&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="no"&gt;S&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;S&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vowels&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;indexOf&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="no"&gt;S&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;charAt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vowels&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;indexOf&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="no"&gt;S&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;charAt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;--;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#c-code" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;C++ Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;vowels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"aeiouAEIOU"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;halvesAreAlike&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;vowels&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;vowels&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>algorithms</category>
      <category>javascript</category>
      <category>java</category>
      <category>python</category>
    </item>
    <item>
      <title>How to create a Personal Access Token - Azure DevOps</title>
      <author>Davide Benvegnù</author>
      <pubDate>Wed, 07 Apr 2021 07:55:21 +0000</pubDate>
      <link>https://dev.to/n3wt0n/how-to-create-a-personal-access-token-azure-devops-2fm7</link>
      <guid>https://dev.to/n3wt0n/how-to-create-a-personal-access-token-azure-devops-2fm7</guid>
      <description>&lt;p&gt;Today I'm going to show you exactly what to do to create a &lt;strong&gt;Personal Access Token in Azure DevOps&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;After the &lt;a href="https://dev.to/n3wt0n/how-to-create-a-personal-access-token-pg7"&gt;article&lt;/a&gt; and the &lt;a href="https://youtu.be/SzrETQdGzBM"&gt;video&lt;/a&gt; of a couple of weeks ago about the creation of Personal Access Tokens in GitHub, today I have for you a step by step guide on how to &lt;strong&gt;create a PAT in Azure DevOps&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#intro" class="anchor"&gt;
  &lt;/a&gt;
  Intro
&lt;/h3&gt;

&lt;p&gt;As we have seen in the other article and video I've mentioned before, Personal access tokens (PATs) are an alternative to using passwords for authentication when using APIs or the command line, or if we want to integrate with any 3rd party system.&lt;/p&gt;

&lt;p&gt;Let's see how we can create a PAT in Azure DevOps&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#video" class="anchor"&gt;
  &lt;/a&gt;
  Video
&lt;/h3&gt;

&lt;p&gt;To see how to &lt;strong&gt;create a PAT&lt;/strong&gt; on your Azure DevOps, and how to properly scope it, I've created a video in which I explain &lt;strong&gt;step by step&lt;/strong&gt; what you need to do.&lt;/p&gt;

&lt;p&gt;Here you have it, enjoy the watch!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/o1rrrVKzc-o"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/o1rrrVKzc-o"&gt;Link to the video: https://youtu.be/o1rrrVKzc-o&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusions" class="anchor"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h3&gt;

&lt;p&gt;As you have seen, creating a PAT in Azure DevOps is slightly faster than doing it in GitHub, but the process is anyway very similar.&lt;/p&gt;

&lt;p&gt;Let me know in the comment section below if you have any question about PATs in Azure DevOps.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; 🚀 for more content:&lt;/p&gt;

&lt;p&gt;📽 &lt;a href="https://www.youtube.com/CoderDave"&gt;YouTube&lt;/a&gt;&lt;br&gt;
☕ &lt;a href="https://buymeacoffee.com/CoderDave"&gt;Buy me a coffee&lt;/a&gt;&lt;br&gt;
💖 &lt;a href="https://patreon.com/CoderDave"&gt;Patreon&lt;/a&gt;&lt;br&gt;
👕 &lt;a href="https://geni.us/cdmerch"&gt;Merch&lt;/a&gt;&lt;br&gt;
👦🏻 &lt;a href="https://www.facebook.com/CoderDaveYT"&gt;Facebook page&lt;/a&gt;&lt;br&gt;
🐱‍💻 &lt;a href="https://github.com/n3wt0n"&gt;GitHub&lt;/a&gt;&lt;br&gt;
👲🏻 &lt;a href="https://www.twitter.com/davide.benvegnu"&gt;Twitter&lt;/a&gt;&lt;br&gt;
👴🏻 &lt;a href="https://www.linkedin.com/in/davidebenvegnu/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
🔉 &lt;a href="https://geni.us/cdpodcast"&gt;Podcast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/o1rrrVKzc-o"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>azuredevops</category>
      <category>devops</category>
      <category>pat</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>I built a website using the DEV API!</title>
      <author>Devin Ford</author>
      <pubDate>Wed, 07 Apr 2021 07:54:46 +0000</pubDate>
      <link>https://dev.to/devindford/consuming-the-dev-api-with-next-and-react-query-3000</link>
      <guid>https://dev.to/devindford/consuming-the-dev-api-with-next-and-react-query-3000</guid>
      <description>&lt;p&gt;I've been looking for a reason to try out React Query and Tailwind for a while, but nothing really stuck out as a good way to try them in a fun way. That was until I discovered that DEV had a consumable &lt;a href="https://docs.forem.com/api/"&gt;API&lt;/a&gt;, and inspiration struck! I wanted to use their "rising" parameter to display the recent articles on the rise from DEV!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Disclaimer: This is not a full tutorial, more of an overview. Let me know in the comments if you want a full breakdown of how I set this project up&lt;/em&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#things-i-wanted-to-accomplish" class="anchor"&gt;
  &lt;/a&gt;
  Things I wanted to accomplish:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Spin up a Next app with TypeScript&lt;/li&gt;
&lt;li&gt;Try Tailwind for the first time&lt;/li&gt;
&lt;li&gt;Try React Query for the first time&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#setup" class="anchor"&gt;
  &lt;/a&gt;
  Setup:
&lt;/h3&gt;

&lt;p&gt;I began with your standard next app using:&lt;br&gt;
&lt;code&gt;npx create-next-app or yarn create next-app&lt;/code&gt; depending on which you prefer. Once I had my base next app, I installed all the following dependencies I was going to use in the project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; "dependencies": {
    "next": "10.0.9",
    "react": "17.0.2",
    "react-dom": "17.0.2",
    "react-loading": "^2.0.3",
    "react-query": "^3.13.0",
    "uuid": "^8.3.2"
  },
  "devDependencies": {
    "@types/next": "^9.0.0",
    "@types/node": "^14.14.36",
    "@types/react": "^17.0.3",
    "@types/uuid": "^8.3.0",
    "autoprefixer": "^10.2.5",
    "postcss": "^8.2.8",
    "postcss-flexbugs-fixes": "^5.0.2",
    "postcss-preset-env": "^6.7.0",
    "react-ga": "^3.3.0",
    "tailwindcss": "^2.0.4",
    "typescript": "^4.2.3"
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that all the pesky install stuff was out of the way, I created my tsconfig.json file and converted all the &lt;code&gt;.js&lt;/code&gt; and &lt;code&gt;.jsx&lt;/code&gt; files to &lt;code&gt;.ts&lt;/code&gt; and &lt;code&gt;.tsx&lt;/code&gt; to utilize TypeScript. Next makes this process seamless.&lt;/p&gt;

&lt;p&gt;I followed the documentation from &lt;a href="https://tailwindcss.com/"&gt;Tailwind&lt;/a&gt; to get everything up and running for that.&lt;/p&gt;

&lt;p&gt;React Query has great documentation but got a little hairy for me at some points. The base setup is fairly straight forward, don't forget if you're going to use the &lt;code&gt;useQuery()&lt;/code&gt; hook, amateur tip 😂: don't forget to add the option &lt;code&gt;{staleTime: Infinity,}&lt;/code&gt; to the end of the function to avoid a re-render every time the page becomes focused or a link is clicked.&lt;/p&gt;

&lt;p&gt;I was off to the races, I was pulling in data from the DEV API using &lt;code&gt;https://dev.to/api/articles?state=rising&amp;amp;per_page=30&lt;/code&gt; to get 30 rising articles, and now I needed a way to display them.&lt;/p&gt;




&lt;p&gt;Now it was time to set up some components and render out cards that included some of the information being returned from the API. I pulled the following information from the API:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;User Name&lt;/li&gt;
&lt;li&gt;Social Image for the article&lt;/li&gt;
&lt;li&gt;The article URL and Title&lt;/li&gt;
&lt;li&gt;Twitter username and URL&lt;/li&gt;
&lt;li&gt;GitHub username and URL&lt;/li&gt;
&lt;li&gt;Users profile picture&lt;/li&gt;
&lt;li&gt;Tag list for each article&lt;/li&gt;
&lt;li&gt;Comment and Reaction counts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once we had all that information, we needed to map over the returned array of articles and put that information into a consumable card. I displayed the social image with the article title (as a link to said article) under it. Then followed those with the author's user name, their profile image, and links if they had them. Then we wrapped it up with the article's tags, and lastly, the comment and reaction count, as you can see below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YvsZ6wjx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/90ahgarf14j0drw8bm2w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YvsZ6wjx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/90ahgarf14j0drw8bm2w.png" alt="Article card with the mapped information displayed in order"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;I then deep dove into the docs for tailwind and started styling the cards and the rest of the site. I found it super intuitive to pass something like &lt;code&gt;className='rounded-full w-12'&lt;/code&gt; to the profile images to make an easy round avatar. The entire site has no actual CSS written. Everything was formatted using className and tailwind classes. It took a little getting used to, but once I got the hang of it, tailwind cut down a lot of time. Plus, making changes on the fly is super useful. Be sure to pass &lt;code&gt;purge: ["./pages/**/*.{js,ts,jsx,tsx}", "./components/**/*.{js,ts,jsx,tsx}"],&lt;/code&gt; pointing to your directories of course. This will remove any repeated or unnecessary CSS classNames that have been passed.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#add-on-features" class="anchor"&gt;
  &lt;/a&gt;
  Add on features:
&lt;/h3&gt;

&lt;p&gt;Over the course of the next week, after getting the initial app up and running, I began to add some features. First was article sorting, and you can now sort articles in ascending and descending order based on the number of reactions to an article.&lt;/p&gt;

&lt;p&gt;Next, I added the ability to search articles by tag names. You can type any tag name, and the app will automatically filter the articles that match that tag and return them as you change your input. As a challenge to myself, I think I will in the future set up a multi-select dropdown that allows you to filter for multiple tags at once.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion:
&lt;/h3&gt;

&lt;p&gt;I had a lot of fun getting this up and running. It was a great way to learn. DEV's documentation on their API was awesome, as was the documentation for all the technologies used to build dev.to rising! I have plans to add more and more features as time goes on. I will be using this site as my sandbox to try different things. &lt;/p&gt;

&lt;p&gt;If you'd like to check out the site, it is live here: &lt;a href="https://devtorising.com"&gt;dev.to Rising&lt;/a&gt; and you can view the source code here on &lt;a href="https://github.com/devindford/devto_rising"&gt;GitHub&lt;/a&gt;. Feel free to raise any issues or put anything you'd like to see added to the site! I appreciate you all checking out the site, and I hope you enjoy a fun, easy way to find rising articles from the DEV community!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>nextjs</category>
      <category>tailwindcss</category>
      <category>api</category>
    </item>
    <item>
      <title>The pain points of C# source generators</title>
      <author>James Turner</author>
      <pubDate>Wed, 07 Apr 2021 07:37:38 +0000</pubDate>
      <link>https://dev.to/turnerj/the-pain-points-of-c-source-generators-lb0</link>
      <guid>https://dev.to/turnerj/the-pain-points-of-c-source-generators-lb0</guid>
      <description>&lt;p&gt;I've recently completed my first foray into writing a &lt;a href="https://devblogs.microsoft.com/dotnet/introducing-c-source-generators/"&gt;C# source generator&lt;/a&gt; for &lt;a href="https://github.com/RehanSaeed/Schema.NET"&gt;Schema.NET&lt;/a&gt;. There is a lot to like about source generators however there are a few things I wish I understood more before diving into it.&lt;/p&gt;

&lt;p&gt;For those that are unaware, source generators are a new feature added to C# whereby one can analyse existing source code and generate new source code all from C# itself. One area where this is of interest is serialization - being able to generate an ideal serializer at compile time prevents the need of using reflection at runtime.&lt;/p&gt;

&lt;p&gt;In Schema.NET, we had hundreds of classes and interfaces that mapped to &lt;a href="https://schema.org"&gt;Schema.org&lt;/a&gt; types. While we had our own tool to generate these, the generated files sat in our Git repository creating a lot of noise when trying to change our tooling behaviour. Source generators would allow us to remove these files and have them exist only as part of the compiled binary. The move to source generators was also a good time to refactor the generating logic itself, making it easier to add new features later.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pain-point-1-debugging-source-generators" class="anchor"&gt;
  &lt;/a&gt;
  Pain Point 1: Debugging Source Generators
&lt;/h2&gt;

&lt;p&gt;Honestly I expected the debugging process to be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Put a breakpoint in the source generator code&lt;/li&gt;
&lt;li&gt;Press the "Debug" button in Visual Studio&lt;/li&gt;
&lt;li&gt;Code stops at the breakpoint&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unfortunately, it isn't that simple. The source generator runs during compilation however the debugging experience starts after meaning our break point would never be hit. After some research, it seems there are two different methods suggested.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#invoke-the-debugger-from-the-source-generator" class="anchor"&gt;
  &lt;/a&gt;
  Invoke the debugger from the source generator
&lt;/h3&gt;

&lt;p&gt;Found this solution from &lt;a href="https://nicksnettravels.builttoroam.com/debug-code-gen/"&gt;Nick's .NET Travels&lt;/a&gt;. Inside our source generator, likely in the "Initialize" method, we can invoke the debugger to attach to the current process with the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#if DEBUG
&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;Debugger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsAttached&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Debugger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Launch&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cp"&gt;#endif
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What we are doing here is using the &lt;a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/preprocessor-directives"&gt;preprocessor directive&lt;/a&gt; &lt;code&gt;#if&lt;/code&gt; to conditionally include this code if the build configuration is "Debug". When we are in the "Debug" configuration, we check if the debugger is already attached and if not, attach it via &lt;a href="https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.debugger.launch?view=netstandard-2.0"&gt;&lt;code&gt;Debugger.Launch()&lt;/code&gt;&lt;/a&gt;. After the debugger launches, it comes up with a prompt about where to debug it (I chose a new instance of Visual Studio). From here, the code will be paused on the &lt;code&gt;Debugger.Launch()&lt;/code&gt; line and this new instance of Visual Studio will listen for any breakpoints you may add.&lt;/p&gt;

&lt;p&gt;I probably spent a good few hours using this method and while it works, it is not a great experience. For starters, the prompt I mention, it was appearing multiple times during a debugging session. I'm not sure if the issue related to different target frameworks building simultaneously or maybe some timeout logic being handled by the build process. Additionally I had Visual Studio crash a few times in either instance of Visual Studio I had open.&lt;/p&gt;

&lt;p&gt;Don't take my word for it, &lt;a href="https://github.com/dotnet/roslyn/discussions/50123"&gt;others have had&lt;/a&gt; similar &lt;a href="https://github.com/dotnet/roslyn/discussions/50606"&gt;difficulties&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#run-the-source-generator-manually" class="anchor"&gt;
  &lt;/a&gt;
  Run the source generator manually
&lt;/h3&gt;

&lt;p&gt;A source generator itself is effectively like any other class - we can instantiate and call the initialization methods ourselves.&lt;br&gt;
There is a &lt;a href="https://github.com/dotnet/roslyn/blob/9dad013b7a3fabeb1b4f36e260ed9c6e3344548e/docs/features/source-generators.cookbook.md"&gt;detailed document in the Roslyn repo&lt;/a&gt; that covers all sorts of things with regards to source generators. One of the sections specifically covers &lt;a href="https://github.com/dotnet/roslyn/blob/9dad013b7a3fabeb1b4f36e260ed9c6e3344548e/docs/features/source-generators.cookbook.md#unit-testing-of-generators"&gt;testing source generators&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is a modified version of their example that shows the general gist:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;Compilation&lt;/span&gt; &lt;span class="n"&gt;inputCompilation&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;CreateCompilation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@"
namespace MyCode
{
    public class Program
    {
        public static void Main(string[] args)
        {
        }
    }
}
"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;CustomGenerator&lt;/span&gt; &lt;span class="n"&gt;generator&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;CustomGenerator&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// Create the driver that will control the generation, passing in our generator&lt;/span&gt;
&lt;span class="n"&gt;GeneratorDriver&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CSharpGeneratorDriver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;generator&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Run the generation pass&lt;/span&gt;
&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;RunGeneratorsAndUpdateCompilation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputCompilation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;out&lt;/span&gt; &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;outputCompilation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;out&lt;/span&gt; &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;diagnostics&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Compilation&lt;/span&gt; &lt;span class="nf"&gt;CreateCompilation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;CSharpCompilation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"compilation"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;CSharpSyntaxTree&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ParseText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;MetadataReference&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CreateFromFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Binder&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;GetTypeInfo&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Assembly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Location&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;CSharpCompilationOptions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OutputKind&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConsoleApplication&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Basically this creates a compilation that the source generator can run against. This method can be quite verbose as, depending on your source generator itself, you may require a lot of boilerplate source code for your generator to work upon.&lt;/p&gt;

&lt;p&gt;In my case with Schema.NET, I'm generating hundreds of classes based on some JSON so I have minimal boilerplate. I could have gone this route however I decided on a more direct approach:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;generator&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;SchemaSourceGenerator&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;generator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Microsoft&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CodeAnalysis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GeneratorInitializationContext&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="n"&gt;generator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Microsoft&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CodeAnalysis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GeneratorExecutionContext&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;My generator didn't care about any existing syntax tree - its job was to just pump out new classes and interfaces.&lt;br&gt;
This method does have a bit of a fatal flaw in that calling most (any?) of the methods on &lt;code&gt;GeneratorInitializationContext&lt;/code&gt; or &lt;code&gt;GeneratorExecutionContext&lt;/code&gt; may fail. These types are not instantiated with their different properties correctly configured which is something that more verbose way above did. For my &lt;code&gt;SchemaSourceGenerator&lt;/code&gt;, I needed to comment out &lt;code&gt;context.AddSource(sourceName, sourceText)&lt;/code&gt; so it wouldn't throw an exception.&lt;/p&gt;

&lt;p&gt;My recommendation is for anyone working on a source generator, either have a separate console application to debug your source generator or create a special unit test. Do it properly though and have the more verbose compilation code as shown in the earlier example so you don't need to modify your source generator to run it.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#pain-point-2-no-asyncawait" class="anchor"&gt;
  &lt;/a&gt;
  Pain Point 2: No Async/Await
&lt;/h2&gt;

&lt;p&gt;The methods exposed by source generators (&lt;code&gt;Initialize&lt;/code&gt; and &lt;code&gt;Execute&lt;/code&gt;) do not return tasks so you can't invoke async APIs.&lt;br&gt;
According to the Roslyn team &lt;a href="https://github.com/dotnet/roslyn/issues/44045"&gt;this is by design&lt;/a&gt; as the IO for reading/writing files is handled by the compiler.&lt;/p&gt;

&lt;p&gt;For Schema.NET, we do a HTTP request to get the JSON we need to build. There are reasons this isn't a good idea but this is what we do and it works well for us. The &lt;code&gt;HttpClient&lt;/code&gt; has only had async APIs for a long while and while &lt;a href="https://github.com/dotnet/runtime/issues/32125"&gt;that is changing&lt;/a&gt;, source generators must target .NET Standard 2.0 so we can't leverage that change.&lt;/p&gt;

&lt;p&gt;My first iteration of getting the source generator to work was effectively wrapping my code in a &lt;code&gt;Task.Run()&lt;/code&gt; call:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GeneratorInitializationContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;

    &lt;span class="n"&gt;SchemaObjects&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;schemaService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetObjectsAsync&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nf"&gt;GetAwaiter&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;GetResult&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This admittedly did work but I really didn't like it - it felt like such a kludge solution. There is a lot of information available about when and where you should be using &lt;code&gt;Task.Run()&lt;/code&gt; - Stephen Cleary has a &lt;a href="https://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-using.html"&gt;good blog post&lt;/a&gt; or &lt;a href="https://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html"&gt;two&lt;/a&gt; about it.&lt;br&gt;
While a source generator is likely a new special case where &lt;em&gt;it depends&lt;/em&gt;, I still decided to change it. I ended up with calling &lt;code&gt;.GetAwaiter().GetResult()&lt;/code&gt; directly on the method of mine that was async instead.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GeneratorInitializationContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;

    &lt;span class="n"&gt;SchemaObjects&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;schemaService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetObjectsAsync&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;GetAwaiter&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;GetResult&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I'll be honest - I don't know if this is technically &lt;em&gt;better&lt;/em&gt; in this scenario but I know it works.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pain-point-3-transient-dependencies" class="anchor"&gt;
  &lt;/a&gt;
  Pain Point 3: Transient Dependencies
&lt;/h2&gt;

&lt;p&gt;An issue with dependencies was something I wasn't expecting at all when I started with my source generator - why should it be?&lt;br&gt;
Every other library and application I've written in C# in the last few years follows a fairly predictable pattern of using a &lt;code&gt;&amp;lt;PackageReference&amp;gt;&lt;/code&gt; to define which package and version. The basics of including a package reference like that for source generators is still the same, it is just all the other bits it now also requires.&lt;/p&gt;

&lt;p&gt;For Schema.NET, our source generator was parsing JSON so we needed a serializer. We were previously using &lt;code&gt;Newtonsoft.Json&lt;/code&gt; for our tool however in this refactor, we were also moving to using &lt;code&gt;System.Text.Json&lt;/code&gt; for the parsing of the initial schema data from Schema.org. This dependency needs to only exist for the generator, not the library the generator is creating classes etc for. Normally you can just specify &lt;code&gt;PrivateAssets="all"&lt;/code&gt; on the package reference and that's it but for source generators, you need to specify a few more things:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ItemGroup&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"System.Text.Json"&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"5.0.1"&lt;/span&gt; &lt;span class="na"&gt;GeneratePathProperty=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt; &lt;span class="na"&gt;PrivateAssets=&lt;/span&gt;&lt;span class="s"&gt;"all"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ItemGroup&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;GetTargetPathDependsOn&amp;gt;&lt;/span&gt;$(GetTargetPathDependsOn);GetDependencyTargetPaths&lt;span class="nt"&gt;&amp;lt;/GetTargetPathDependsOn&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/PropertyGroup&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;Target&lt;/span&gt; &lt;span class="na"&gt;Name=&lt;/span&gt;&lt;span class="s"&gt;"GetDependencyTargetPaths"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ItemGroup&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;TargetPathWithTargetPlatformMoniker&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"$(PKGSystem_Text_Json)\lib\netstandard2.0\System.Text.Json.dll"&lt;/span&gt; &lt;span class="na"&gt;IncludeRuntimeDependency=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/ItemGroup&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/Target&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Not too bad right? Well, what if I told you that you needed to do this for all dependencies. By that I mean &lt;em&gt;every dependency in the dependency tree&lt;/em&gt; which for us was:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Microsoft.Bcl.AsyncInterfaces, 5.0.0&lt;/li&gt;
&lt;li&gt;System.Buffers, 4.5.1&lt;/li&gt;
&lt;li&gt;System.Memory, 4.5.4

&lt;ul&gt;
&lt;li&gt;System.Numerics.Vectors, 4.4.0&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;System.Numerics.Vectors, 4.5.0&lt;/li&gt;
&lt;li&gt;System.Runtime.CompilerServices.Unsafe, 5.0.0&lt;/li&gt;
&lt;li&gt;System.Text.Encodings.Web, 5.0.0&lt;/li&gt;
&lt;li&gt;System.Threading.Tasks.Extensions, 4.5.4&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our example would look more like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ItemGroup&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"System.Text.Json"&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"5.0.1"&lt;/span&gt; &lt;span class="na"&gt;GeneratePathProperty=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt; &lt;span class="na"&gt;PrivateAssets=&lt;/span&gt;&lt;span class="s"&gt;"all"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"Microsoft.Bcl.AsyncInterfaces"&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"5.0.0"&lt;/span&gt; &lt;span class="na"&gt;GeneratePathProperty=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt; &lt;span class="na"&gt;PrivateAssets=&lt;/span&gt;&lt;span class="s"&gt;"all"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"System.Runtime.CompilerServices.Unsafe"&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"5.0.0"&lt;/span&gt; &lt;span class="na"&gt;GeneratePathProperty=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt; &lt;span class="na"&gt;PrivateAssets=&lt;/span&gt;&lt;span class="s"&gt;"all"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"System.Threading.Tasks.Extensions"&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"4.5.4"&lt;/span&gt; &lt;span class="na"&gt;GeneratePathProperty=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt; &lt;span class="na"&gt;PrivateAssets=&lt;/span&gt;&lt;span class="s"&gt;"all"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"System.Text.Encodings.Web"&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"5.0.1"&lt;/span&gt; &lt;span class="na"&gt;GeneratePathProperty=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt; &lt;span class="na"&gt;PrivateAssets=&lt;/span&gt;&lt;span class="s"&gt;"all"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"System.Buffers"&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"4.5.1"&lt;/span&gt; &lt;span class="na"&gt;GeneratePathProperty=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt; &lt;span class="na"&gt;PrivateAssets=&lt;/span&gt;&lt;span class="s"&gt;"all"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"System.Memory"&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"4.5.4"&lt;/span&gt; &lt;span class="na"&gt;GeneratePathProperty=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt; &lt;span class="na"&gt;PrivateAssets=&lt;/span&gt;&lt;span class="s"&gt;"all"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"System.Numerics.Vectors"&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"4.4.0"&lt;/span&gt; &lt;span class="na"&gt;GeneratePathProperty=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt; &lt;span class="na"&gt;PrivateAssets=&lt;/span&gt;&lt;span class="s"&gt;"all"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ItemGroup&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;GetTargetPathDependsOn&amp;gt;&lt;/span&gt;$(GetTargetPathDependsOn);GetDependencyTargetPaths&lt;span class="nt"&gt;&amp;lt;/GetTargetPathDependsOn&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/PropertyGroup&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;Target&lt;/span&gt; &lt;span class="na"&gt;Name=&lt;/span&gt;&lt;span class="s"&gt;"GetDependencyTargetPaths"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ItemGroup&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;TargetPathWithTargetPlatformMoniker&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"$(PKGSystem_Text_Json)\lib\netstandard2.0\*.dll"&lt;/span&gt; &lt;span class="na"&gt;IncludeRuntimeDependency=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;TargetPathWithTargetPlatformMoniker&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"$(PKGMicrosoft_Bcl_AsyncInterfaces)\lib\netstandard2.0\*.dll"&lt;/span&gt; &lt;span class="na"&gt;IncludeRuntimeDependency=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;TargetPathWithTargetPlatformMoniker&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"$(PKGSystem_Runtime_CompilerServices_Unsafe)\lib\netstandard2.0\*.dll"&lt;/span&gt; &lt;span class="na"&gt;IncludeRuntimeDependency=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;TargetPathWithTargetPlatformMoniker&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"$(PKGSystem_Threading_Tasks_Extensions)\lib\netstandard2.0\*.dll"&lt;/span&gt; &lt;span class="na"&gt;IncludeRuntimeDependency=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;TargetPathWithTargetPlatformMoniker&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"$(PKGSystem_Buffers)\lib\netstandard2.0\*.dll"&lt;/span&gt; &lt;span class="na"&gt;IncludeRuntimeDependency=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;TargetPathWithTargetPlatformMoniker&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"$(PKGSystem_Memory)\lib\netstandard2.0\*.dll"&lt;/span&gt; &lt;span class="na"&gt;IncludeRuntimeDependency=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;TargetPathWithTargetPlatformMoniker&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"$(PKGSystem_Numerics_Vectors)\lib\netstandard2.0\*.dll"&lt;/span&gt; &lt;span class="na"&gt;IncludeRuntimeDependency=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;TargetPathWithTargetPlatformMoniker&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"$(PKGSystem_Text_Encodings_Web)\lib\netstandard2.0\*.dll"&lt;/span&gt; &lt;span class="na"&gt;IncludeRuntimeDependency=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/ItemGroup&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/Target&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If any of these dependencies pick up any new dependencies themselves, they need to be included too - this can happen with patch version changes like between &lt;code&gt;System.Text.Encodings.Web&lt;/code&gt; going from &lt;a href="https://www.nuget.org/packages/System.Text.Encodings.Web/5.0.0"&gt;5.0.0&lt;/a&gt; to &lt;a href="https://www.nuget.org/packages/System.Text.Encodings.Web/5.0.1"&gt;5.0.1&lt;/a&gt; where it picked up a few new dependencies.&lt;/p&gt;

&lt;p&gt;Currently for Schema.NET, I'm only specifying &lt;code&gt;System.Text.Json&lt;/code&gt; and &lt;code&gt;System.Text.Encodings.Web&lt;/code&gt; directly which allows our builds to work on our CI but Visual Studio complains during the build.&lt;br&gt;
I &lt;a href="https://github.com/dotnet/roslyn/issues/52017"&gt;raised an issue with the Roslyn team&lt;/a&gt; about this extra weird behaviour though it seems to amount for a difference between builds triggered by .NET Framework (Visual Studio and MSBuild) and .NET Core (&lt;code&gt;dotnet build&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;My biggest gripe here though is: &lt;em&gt;Why doesn't the compiler just do this for us?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The compiler knows all our dependencies so with some sort of flag to indicate that this is a source generator, the compiler should do all this work for us. The burden to make sure we keep track of all transient dependencies when any dependency gets an update is something I don't want to do.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#potential-transient-dependency-workaround" class="anchor"&gt;
  &lt;/a&gt;
  Potential Transient Dependency Workaround
&lt;/h3&gt;

&lt;p&gt;While not a perfect solution, if you are like me and really don't like specifying every package reference in the dependency tree like that, you can automate it somewhat with a custom MSBuild target.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ItemGroup&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"System.Text.Json"&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"5.0.1"&lt;/span&gt; &lt;span class="na"&gt;PrivateAssets=&lt;/span&gt;&lt;span class="s"&gt;"all"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ItemGroup&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;GetTargetPathDependsOn&amp;gt;&lt;/span&gt;$(GetTargetPathDependsOn);GetDependencyTargetPaths&lt;span class="nt"&gt;&amp;lt;/GetTargetPathDependsOn&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/PropertyGroup&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;Target&lt;/span&gt; &lt;span class="na"&gt;Name=&lt;/span&gt;&lt;span class="s"&gt;"GetDependencyTargetPaths"&lt;/span&gt; &lt;span class="na"&gt;AfterTargets=&lt;/span&gt;&lt;span class="s"&gt;"ResolvePackageDependenciesForBuild"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ItemGroup&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;TargetPathWithTargetPlatformMoniker&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"@(ResolvedCompileFileDefinitions)"&lt;/span&gt; &lt;span class="na"&gt;IncludeRuntimeDependency=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/ItemGroup&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/Target&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This "works" in the sense that &lt;code&gt;ResolveCompileFileDefinitions&lt;/code&gt; does contain a list of our transient dependencies so everything that needs to be passed in is passed in. The problem with this solution is that &lt;code&gt;ResolveCompileFileDefinitions&lt;/code&gt; contains &lt;em&gt;more&lt;/em&gt; than the specific dependencies we are wanting and could have undesired behaviour.&lt;/p&gt;

&lt;p&gt;Ideally I'd like &lt;em&gt;something like this&lt;/em&gt; to be an automatic target for source generator projects but perfected to target only private dependencies so they are bundled correctly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion-was-migrating-to-source-generators-worth-it" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion: Was migrating to source generators worth it?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Yes.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Switching to source generators, combined with my refactor, added 700 lines of code while &lt;strong&gt;removing 69,203 lines of code&lt;/strong&gt;. &lt;a href="https://github.com/RehanSaeed/Schema.NET/pull/252"&gt;My pull request&lt;/a&gt; affected 765 files, the vast majority being generated classes and interfaces that no longer need to sit in the repository.&lt;/p&gt;

&lt;p&gt;The refactor of our generation code also sets us up nicely for the future where we can support pending Schema.org types (&lt;a href="https://github.com/RehanSaeed/Schema.NET/issues/203"&gt;something that has been requested by a few people&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;While these pain points are annoying, source generators are a great feature that I hope getting tool updates to improve the developer experience.&lt;/p&gt;

</description>
      <category>csharp</category>
      <category>dotnet</category>
    </item>
    <item>
      <title>How to set up a Base Fragment Class with ViewBinding and ViewModel on Android</title>
      <author>Enya Emmanuel</author>
      <pubDate>Wed, 07 Apr 2021 07:32:54 +0000</pubDate>
      <link>https://dev.to/enyason/how-to-set-up-a-base-fragment-class-with-viewbinding-and-viewmodel-on-android-57g1</link>
      <guid>https://dev.to/enyason/how-to-set-up-a-base-fragment-class-with-viewbinding-and-viewmodel-on-android-57g1</guid>
      <description>&lt;p&gt;Hey guys! This is my first article on dev.to, and I am super excited about writing again after a long while. Quickly, let's get into the subject at hand.&lt;/p&gt;

&lt;p&gt;Building native Android apps require you have a fair knowledge of object-oriented programming. This forms the basis for this article because we will leverage the concepts of  Inheritance to set up a base class. In addition to this, you’ll learn about generics, with practical examples.&lt;/p&gt;

&lt;p&gt;One may be curious as to why we would want to add another layer of inheritance to our fragment class? This question is usually common with beginner programmers yet to realize the benefits of inheritance.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-inheritance-in-objectoriented-programming-oop" class="anchor"&gt;
  &lt;/a&gt;
  What is Inheritance in Object-Oriented Programming (OOP)?
&lt;/h3&gt;

&lt;p&gt;Inheritance is a feature in which a class inherits all the features of another class. The class from which the features are inherited is known as the base class, superclass, or parent class, and the class that inherits the features is known as a derived class, subclass, or child class.&lt;/p&gt;

&lt;p&gt;E.g. If Class D extends A, it is inheriting the features of A.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-generics" class="anchor"&gt;
  &lt;/a&gt;
  What are Generics?
&lt;/h3&gt;

&lt;p&gt;Generics are simply parameterized types. The idea is to allow type (Integer, String, … etc, and user-defined types) to be a parameter to methods, classes, and interfaces. Using Generics, it is possible to create classes that work with different data types.&lt;/p&gt;

&lt;p&gt;Enough theory, let's get started on creating a base fragment class.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1" class="anchor"&gt;
  &lt;/a&gt;
  STEP 1:
&lt;/h3&gt;

&lt;p&gt;Create a class BaseFragment that extends a Fragment&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BaseFragment&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;VBinding&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;ViewBinding&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;ViewModel&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;BaseViewModel&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Fragment&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;useSharedViewModel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Boolean&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;

    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;lateinit&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;viewModel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;ViewModel&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;getViewModelClass&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nc"&gt;Class&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ViewModel&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;lateinit&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;VBinding&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;getViewBinding&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nc"&gt;VBinding&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;disposableContainer&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;CompositeDisposable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Bundle&lt;/span&gt;&lt;span class="p"&gt;?)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onCreateView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;inflater&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;LayoutInflater&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;ViewGroup&lt;/span&gt;&lt;span class="p"&gt;?,&lt;/span&gt;
        &lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Bundle&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;View&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onViewCreated&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;View&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Bundle&lt;/span&gt;&lt;span class="p"&gt;?)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;onViewCreated&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;setUpViews&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nf"&gt;observeData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;setUpViews&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;observeView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;observeData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;binding&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;getViewBinding&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;viewModel&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;useSharedViewModel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nc"&gt;ViewModelProvider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;requireActivity&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="nf"&gt;getViewModelClass&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nc"&gt;ViewModelProvider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;getViewModelClass&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nc"&gt;Disposable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;addToContainer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;disposableContainer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onDestroyView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;disposableContainer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;onDestroyView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;abstract class BaseFragment&amp;lt;VBinding : ViewBinding, ViewModel : BaseViewModel&amp;gt; : Fragment()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Basically what we've done here is create a &lt;code&gt;BaseFragment&lt;/code&gt; which accepts two types, that is a ViewBinding and a ViewModel. With this class, we move common logic and set up to one place, thereby reducing duplicate codes (boilerplates).&lt;/p&gt;

&lt;p&gt;The ViewModel class and the ViewBinding object specified as fields in the base class will be provided by the subclass when &lt;code&gt;getViewModelClass()&lt;/code&gt; and &lt;code&gt;getViewBinding()&lt;/code&gt; are invoked, respectively.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;open fun setUpViews() {}&lt;/code&gt; and &lt;code&gt;open fun observeData() {}&lt;/code&gt; are methods with a default empty implementation. This makes it optional for its sub-classes to override. The subclasses are not forced to override these methods.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2" class="anchor"&gt;
  &lt;/a&gt;
  STEP 2:
&lt;/h3&gt;

&lt;p&gt;With the base class set up, we'll use it by creating another fragment class that extends BaseFragment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;
&lt;span class="nd"&gt;@AndroidEntryPoint&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserListFragment&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;BaseFragment&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FragmentUserListBinding&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;UserViewModel&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;useSharedViewModel&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;getViewModelClass&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;UserViewModel&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;getViewBinding&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;FragmentUserListBinding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;inflate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;layoutInflater&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;setUpViews&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;// set up recycler view and bind data to UI&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From the code block above, we have been able to achieve a simple and readable fragment class, using the concepts of inheritance and generics.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#in-summary" class="anchor"&gt;
  &lt;/a&gt;
  In summary,
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Using a base fragment helps you avoid code and pattern repetition.&lt;/li&gt;
&lt;li&gt;You achieve a clean and readable code with the concepts discussed in this article.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That is it for this article. Please share your thoughts on this subject.&lt;/p&gt;

</description>
      <category>android</category>
      <category>kotlin</category>
      <category>programming</category>
    </item>
    <item>
      <title>Testing React Query</title>
      <author>Dominik D</author>
      <pubDate>Wed, 07 Apr 2021 07:06:28 +0000</pubDate>
      <link>https://dev.to/tkdodo/testing-react-query-14cb</link>
      <guid>https://dev.to/tkdodo/testing-react-query-14cb</guid>
      <description>&lt;p&gt;Questions around the testing topic come up quite often together with React Query, so I'll try to answer some of them here. I think one reason for that is that testing "smart" components (also called &lt;a href="https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0"&gt;container components&lt;/a&gt;) is not the easiest thing to do. With the rise of hooks, this split has been largely deprecated. It is now encouraged to consume hooks directly where you need them rather than doing a mostly arbitrary split and drill props down.&lt;/p&gt;

&lt;p&gt;I think this is generally a very good improvement for colocation and code readability, but we now have more components that consume dependencies outside of "just props".&lt;/p&gt;

&lt;p&gt;They might &lt;em&gt;useContext&lt;/em&gt;. They might &lt;em&gt;useSelector&lt;/em&gt;. Or they might &lt;em&gt;useQuery&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Those components are technically no longer pure, because calling them in different environments leads to different results. When testing them, you need to carefully setup those surrounding environments to get things working.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#mocking-network-requests" class="anchor"&gt;
  &lt;/a&gt;
  Mocking network requests
&lt;/h1&gt;

&lt;p&gt;Since React Query is an async server state management library, your components will likely make requests to a backend. When testing, this backend is not available to actually deliver data, and even if, you likely don't want to make your tests dependent on that.&lt;/p&gt;

&lt;p&gt;There are tons of articles out there on how to mock data with jest. You can mock your api client if you have one. You can mock fetch or axios directly. I can only second what Kent C. Dodds has written in his article &lt;a href="https://kentcdodds.com/blog/stop-mocking-fetch"&gt;Stop mocking fetch&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;Use &lt;a href="https://mswjs.io/"&gt;mock service worker&lt;/a&gt; by &lt;a href="https://twitter.com/ApiMocking"&gt;@ApiMocking&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It can be your single source of truth when it comes to mocking your apis:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  works in node for testing&lt;/li&gt;
&lt;li&gt;  supports REST and GraphQL&lt;/li&gt;
&lt;li&gt;  has a &lt;a href="https://storybook.js.org/addons/msw-storybook-addon"&gt;storybook addon&lt;/a&gt; so you can write stories for your components that &lt;em&gt;useQuery&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;  works in the browser for development purposes, and you'll still see the requests going out in the browser devtools&lt;/li&gt;
&lt;li&gt;  works with cypress, similar to fixtures&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;With our network layer being taken care of, we can start talking about React Query specific things to keep an eye on:&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#queryclientprovider" class="anchor"&gt;
  &lt;/a&gt;
  QueryClientProvider
&lt;/h1&gt;

&lt;p&gt;Whenever you use React Query, you need a QueryClientProvider and give it a queryClient - a vessel which holds the &lt;em&gt;QueryCache&lt;/em&gt;. The cache will in turn hold the data of your queries.&lt;/p&gt;

&lt;p&gt;I prefer to give each test its own QueryClientProvider and create a &lt;em&gt;new QueryClient&lt;/em&gt; for each test. That way, tests are completely isolated from each other. A different approach might be to clear the cache after each test, but I like to keep shared state between tests as minimal as possible. Otherwise, you might get unexpected and flaky results if you run your tests in parallel.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#for-custom-hooks" class="anchor"&gt;
  &lt;/a&gt;
  For custom hooks
&lt;/h2&gt;

&lt;p&gt;If you are testing custom hooks, I'm quite certain you're using &lt;a href="https://react-hooks-testing-library.com/"&gt;react-hooks-testing-library&lt;/a&gt;. It's the easiest thing there is to test hooks. With that library, we can wrap our hook in a &lt;a href="https://react-hooks-testing-library.com/reference/api#wrapper"&gt;wrapper&lt;/a&gt;, which is a React component to wrap the test component in when rendering. I think this is the perfect place to create the QueryClient, because it will be executed once per test:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createWrapper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ✅ creates a new QueryClient for each test&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;queryClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;QueryClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;QueryClientProvider&lt;/span&gt; &lt;span class="na"&gt;client&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;QueryClientProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;my first test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;renderHook&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;useCustomHook&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;createWrapper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#for-components" class="anchor"&gt;
  &lt;/a&gt;
  For components
&lt;/h2&gt;

&lt;p&gt;If you want to test a Component that uses a &lt;em&gt;useQuery&lt;/em&gt; hook, you also need to wrap that Component in QueryClientProvider. A small wrapper around &lt;em&gt;render&lt;/em&gt; from &lt;a href="https://testing-library.com/docs/react-testing-library/intro/"&gt;react-testing-library&lt;/a&gt; seems like a good choice. Have a look at how React Query does it &lt;a href="https://github.com/tannerlinsley/react-query/blob/ead2e5dd5237f3d004b66316b5f36af718286d2d/src/react/tests/utils.tsx#L6-L17"&gt;internally for their tests&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#turn-off-retries" class="anchor"&gt;
  &lt;/a&gt;
  Turn off retries
&lt;/h1&gt;

&lt;p&gt;It's one of the most common "gotchas" with React Query and testing: The library defaults to three retries with exponential backoff, which means that your tests are likely to timeout if you want to test an erroneous query. The easiest way to turn retries off is, again, via the &lt;em&gt;QueryClientProvider&lt;/em&gt;. Let's extend the above example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createWrapper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;queryClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;QueryClient&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;defaultOptions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;queries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// ✅ turns retries off&lt;/span&gt;
                &lt;span class="na"&gt;retry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;QueryClientProvider&lt;/span&gt; &lt;span class="na"&gt;client&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;QueryClientProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;my first test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;renderHook&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;useCustomHook&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;createWrapper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will set the defaults for all queries in the component tree to "no retries". It is important to know that this will only work if your actual &lt;em&gt;useQuery&lt;/em&gt; has no explicit retries set. If you have a query that wants 5 retries, this will still take precedence, because defaults are only taken as a fallback.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setquerydefaults" class="anchor"&gt;
  &lt;/a&gt;
  setQueryDefaults
&lt;/h2&gt;

&lt;p&gt;The best advice I can give you for this problem is: Don't set these options on &lt;em&gt;useQuery&lt;/em&gt; directly. Try to use and override the defaults as much as possible, and if you really need to change something for specific queries, use &lt;a href="https://react-query.tanstack.com/reference/QueryClient#queryclientsetquerydefaults"&gt;queryClient.setQueryDefaults&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So for example, instead of setting retry on &lt;em&gt;useQuery&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;queryClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;QueryClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;QueryClientProvider&lt;/span&gt; &lt;span class="na"&gt;client&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Example&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;QueryClientProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// 🚨 you cannot override this setting for tests!&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;queryInfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;todos&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fetchTodos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;retry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Set it like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;queryClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;QueryClient&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;defaultOptions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;queries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;retry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// ✅ only todos will retry 5 times&lt;/span&gt;
&lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setQueryDefaults&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;todos&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;retry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;QueryClientProvider&lt;/span&gt; &lt;span class="na"&gt;client&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Example&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;QueryClientProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, all queries will retry two times, only &lt;em&gt;todos&lt;/em&gt; will retry five times, and I still have the option to turn it off for all queries in my tests 🙌.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reactqueryconfigprovider" class="anchor"&gt;
  &lt;/a&gt;
  ReactQueryConfigProvider
&lt;/h2&gt;

&lt;p&gt;Of course, this only works for known query keys. Sometimes, you really want to set some configs on a subset of your component tree. In v2, React Query had a &lt;a href="https://react-query-v2.tanstack.com/docs/api#reactqueryconfigprovider"&gt;ReactQueryConfigProvider&lt;/a&gt; for that exact use-case. You can achieve the same thing in v3 with a couple of lines of codes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ReactQueryConfigProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;defaultOptions&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useQueryClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;newClient&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;QueryClient&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                &lt;span class="na"&gt;queryCache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getQueryCache&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                &lt;span class="na"&gt;muationCache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMutationCache&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                &lt;span class="nx"&gt;defaultOptions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;QueryClientProvider&lt;/span&gt; &lt;span class="na"&gt;client&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;newClient&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;QueryClientProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see this in action in this &lt;a href="https://codesandbox.io/s/react-query-config-provider-v3-lt00f"&gt;codesandbox example&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#always-await-the-query" class="anchor"&gt;
  &lt;/a&gt;
  Always await the query
&lt;/h1&gt;

&lt;p&gt;Since React Query is async by nature, when running the hook, you won't immediately get a result. It usually will be in loading state and without data to check. The &lt;a href="https://react-hooks-testing-library.com/reference/api#async-utilities"&gt;async utilities&lt;/a&gt; from react-hooks-testing-library offer a lot of ways to solve this problem. For the simplest case, we can just wait until the query has transitioned to success state:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createWrapper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;queryClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;QueryClient&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;defaultOptions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;queries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;retry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;QueryClientProvider&lt;/span&gt; &lt;span class="na"&gt;client&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;QueryClientProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;my first test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;waitFor&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;renderHook&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;useCustomHook&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;createWrapper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="c1"&gt;// ✅ wait until the query has transitioned to success state&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;waitFor&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isSuccess&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBeDefined&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#silence-the-error-console" class="anchor"&gt;
  &lt;/a&gt;
  Silence the error console
&lt;/h1&gt;

&lt;p&gt;Per default, React Query prints errors to the console. I think this is quite disturbing during testing, because you'll see 🔴 in the console even though all tests are 🟢. React Query allows overwriting that default behaviour by &lt;a href="https://react-query.tanstack.com/reference/setLogger"&gt;setting a logger&lt;/a&gt;, so that's what I'm usually doing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;setLogger&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-query&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;setLogger&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;log&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;// ✅ no more errors on the console&lt;/span&gt;
    &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#putting-it-all-together" class="anchor"&gt;
  &lt;/a&gt;
  Putting it all together
&lt;/h1&gt;

&lt;p&gt;I've setup a quick repository where all of this comes nicely together: mock-service-worker, react-testing-library and the mentioned wrapper. It contains four tests - basic failure and success tests for custom hooks and components. Have a look here: &lt;a href="https://github.com/TkDodo/testing-react-query"&gt;https://github.com/TkDodo/testing-react-query&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;That's it for today. Feel free to reach out to me on &lt;a href="https://twitter.com/tkdodo"&gt;twitter&lt;/a&gt;&lt;br&gt;
if you have any questions, or just leave a comment below ⬇️&lt;/p&gt;

</description>
      <category>react</category>
      <category>typescript</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
