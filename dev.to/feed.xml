<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>x86 vs x64 systems for roadrunners</title>
      <author>Tharun Shiv</author>
      <pubDate>Sun, 17 Oct 2021 03:59:17 +0000</pubDate>
      <link>https://dev.to/developertharun/x86-vs-x64-systems-for-roadrunners-1nle</link>
      <guid>https://dev.to/developertharun/x86-vs-x64-systems-for-roadrunners-1nle</guid>
      <description>&lt;h2&gt;
  &lt;a href="#x86-systems"&gt;
  &lt;/a&gt;
  x86 Systems
&lt;/h2&gt;

&lt;p&gt;x86 is a generic name that is used to refer to all Intel processors that were released after the original 8086 or 8088 variant of Intel processors. The variants like 80286, 80386, 80486 so on.. were named using the convention x86, where the 80 is implicit, and x can be replaced with a number conveniently. These are backward compatible systems.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;8086 or 8088 are the various names that are used to Identify the microprocessors of Intel that were released in the 1970s.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#registers-used-in-the-early-x86-systems"&gt;
  &lt;/a&gt;
  Registers used in the early x86 systems
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;A Register is a tiny memory holding electronic device that is used by the processor to either store instructions, data or address. These are fundamental units that are used when executing a computer instruction to perform a task.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;x86 systems ranged from 8-bit, 16-bit and then 32bit. What do these bits refer to? They are the highest number of bits in a single register that exists in the system.&lt;br&gt;
Maximum memory limit&lt;/p&gt;

&lt;p&gt;When we say 32-bit, the number will contain 32 digits with each of them being either 0 or 1. The number system used here is Binary System ( power 2 ). Hence, the maximum possible value here will be 2³², which is 42,94,967,295. These are the maximum number of memory locations that a 32-bit register can access. We can only attach that memory device which the register can completely make use of.&lt;/p&gt;

&lt;p&gt;Thus, a 32-bit register can cater a maximum of 4GB of RAM. This is because, if each memory location that the register points to can hold 1 byte of data, then 42,94,967,295 bytes = 4.29 G. Although this is theoretical, the actual RAM that can be used will be less than around 3.5G, because of certain parts of the register being used to store other types of data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#x64-systems"&gt;
  &lt;/a&gt;
  x64 Systems
&lt;/h2&gt;

&lt;p&gt;For the systems that evolved to use 64-bit registers, they initially named it x86–64, but since this sounds longer, the naming was changed to x64 systems. x64 is a generic name that is used to refer to all Intel processors that are 64-bit processors.&lt;/p&gt;

&lt;p&gt;The x64 systems as mentioned above contains registers that are even capable of storing 64bits in a single register.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#theoretical-maximum-memory-limit"&gt;
  &lt;/a&gt;
  Theoretical Maximum memory limit
&lt;/h3&gt;

&lt;p&gt;When we say 64-bit, the number will contain 64 digits with each of them being either 0 or 1. The number system used here will be Binary system just like the 32-bit family. Hence, the maximum possible value here will be 2⁶⁴.&lt;/p&gt;

&lt;p&gt;Thus each 64-bit register can cater a maximum of around 18 Quintillion bytes of memory. ( One Quintillion is 10¹⁸ ). Therefore it will be able to handle the usual RAM that we come across everyday effortlessly, including enterprise production servers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#processing-power-of-x64-systems"&gt;
  &lt;/a&gt;
  Processing power of x64 systems
&lt;/h3&gt;

&lt;p&gt;x64 systems come with configurations like dual core, quad core, octa core and so on, which depicts the number of processors that work simultaneously in an integrated circuit. This enables the Operating system to perform tasks parallely. While dual-core has two cores than one single core, every task that it does need not be twice as fast as a single core machine. This is because, even the operating systems and programs that is using the processors should be able to perform parallely using multi processors.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#current-generation"&gt;
  &lt;/a&gt;
  Current generation
&lt;/h2&gt;

&lt;p&gt;Currently the popular architecture is to use the 64-bit system.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Roadrunners is a series that is aimed at delivering concepts as precise as possible. Here, a roadrunner is referred to a person who does things super fast &amp;amp; efficient. Are you a roadrunner?&lt;/em&gt;&lt;/p&gt;

</description>
      <category>systems</category>
      <category>computerscience</category>
      <category>architecture</category>
      <category>processor</category>
    </item>
    <item>
      <title>Advanced Front End Developer , Interview Essentials - Part 2</title>
      <author>Goutham JM</author>
      <pubDate>Sun, 17 Oct 2021 03:31:00 +0000</pubDate>
      <link>https://dev.to/gouthamjm/advanced-front-end-developer-interview-essentials-part-2-41gm</link>
      <guid>https://dev.to/gouthamjm/advanced-front-end-developer-interview-essentials-part-2-41gm</guid>
      <description>&lt;p&gt;This post is a continuation of &lt;a href="https://dev.to/gouthamjm/advanced-fe-dev-interview-essentials-1-45ho"&gt;Advanced Front End Developer , Interview Essentials - Part 1&lt;/a&gt; ,if you haven't read it I strongly recommend you to go through the post where I have explained the CRP in detail&lt;/p&gt;

&lt;p&gt;Optimizing the Critical Rendering Path is very essential for performance of a site , and always keep in mind the below rule&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You cannot optimize something that you cannot measure&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#1dom-optimization"&gt;
  &lt;/a&gt;
  1.DOM Optimization
&lt;/h2&gt;

&lt;p&gt;You should stream HTML as fast as you can ,we can achieve that by these step's minification,compression and caching the HTML.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In which stage of CRP, Do you think will the page be rendered ?&lt;/strong&gt; &lt;br&gt;
It will be rendered when the render tree is constructed ,i.e. just after CSSOM has been constructed, and it will be the render blocking step , so it becomes crucial to optimize CSSOM&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#2cssom-optimization"&gt;
  &lt;/a&gt;
  2.CSSOM Optimization
&lt;/h2&gt;

&lt;p&gt;As CSS is a render blocking resource,always keep your CSS lean, deliver it as quickly as possible, and we can use media types and queries to unblock rendering&lt;/p&gt;

&lt;p&gt;If we have some CSS styles that are only used under certain conditions, for example, when the page is being printed or being projected onto a large monitor,but you are viewing in a mobile ,then we can block rendering on the resources that are not used.&lt;/p&gt;

&lt;p&gt;CSS &lt;code&gt;media types&lt;/code&gt; and &lt;code&gt;media queries&lt;/code&gt; allow us to address these use cases,in the below example if we maintain a separate style sheet for different use cases , &lt;em&gt;Example&lt;/em&gt; : we may need to apply certain styling for print or in responsive site we can mention a specific width during which case only the style sheet must be imported&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"print.css"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"print"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"other.css"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"(min-width: 40em)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When declaring your style sheet assets, pay close attention to the media type and queries; they greatly impact critical rendering path performance&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt;    &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt;    &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"all"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"portrait.css"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"orientation:portrait"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"print.css"&lt;/span&gt;    &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"print"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The first declaration is render blocking and matches in all conditions.&lt;/li&gt;
&lt;li&gt;The second declaration is also render blocking: "all" is the default type, so if you don’t specify any type, it’s implicitly set to "all". Hence, the first and second declarations are actually equivalent.&lt;/li&gt;
&lt;li&gt;The third declaration has a dynamic media query, which is evaluated when the page is loaded. Depending on the orientation of the device while the page is loading, portrait.css may or may not be render blocking.&lt;/li&gt;
&lt;li&gt;The last declaration is only applied when the page is being printed, so it is not render blocking when the page is first loaded in the browser.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#avoid-css-imports"&gt;
  &lt;/a&gt;
  Avoid CSS imports
&lt;/h3&gt;

&lt;p&gt;The CSS import (&lt;code&gt;@import&lt;/code&gt;) directive enables one stylesheet to import rules from another stylesheet file. However, avoid these directives because they introduce additional roundtrips into the critical path: the imported CSS resources are discovered only after the CSS stylesheet with the &lt;code&gt;@import&lt;/code&gt; rule itself is received and parsed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#put-css-in-the-document-head"&gt;
  &lt;/a&gt;
  Put CSS in the document head
&lt;/h3&gt;

&lt;p&gt;Specify all CSS resources as early as possible within the HTML document so that the browser can discover the &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; tags and dispatch the request for the CSS as soon as possible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-js-optimization"&gt;
  &lt;/a&gt;
  3. JS Optimization
&lt;/h2&gt;

&lt;p&gt;JavaScript allows us to modify just about every aspect of the page: content, styling, and its response to user interaction . JavaScript can also block DOM construction and delay when the page is rendered. To deliver optimal performance, make your JavaScript async and eliminate any unnecessary JavaScript from the critical rendering path&lt;/p&gt;

&lt;p&gt;By default, JavaScript execution is "parser blocking": when the browser encounters a script in the document it must pause DOM construction, hand over control to the JavaScript runtime, and let the script execute before proceeding with DOM construction.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Problem:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's take the below example where there is a style sheet as well as script that modify the  &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tag , so will the text be rendered black or red , the answer to this lies in the order of the execution &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Page requests for HTML, and it will start building the DOM&lt;/li&gt;
&lt;li&gt;Then it will encounter style and request for CSS resources ,during this time CSS doesn't know whether the script will modify the CSS, so it will wait for  CSSOM to be constructed&lt;/li&gt;
&lt;li&gt;After CSSOM is constructed, then JS will be executed and will build the Render Tree&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;CSS blocks script as well as rendering page, so it becomes crucial  to optimize the CSS&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e3pEZRCf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ofq4xmg7o9zfdbyjf6n1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e3pEZRCf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ofq4xmg7o9zfdbyjf6n1.png" alt="JS Optimization"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution :&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;1.All JS code might not modify the DOM in such cases one way we can optimize JS it to load it after DOM has been loaded ,like below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      function loadFunction() &lt;span class="si"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Window is loaded&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="si"&gt;}&lt;/span&gt;
      window.onload = loadFunction();
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2.Another way to solve this is to add &lt;code&gt;async&lt;/code&gt; attribute to the  &lt;code&gt;script&lt;/code&gt; tag , it does two things - it doesn't block DOM construction, and CSSOM construction , so basically what it does is it will allow JS not to block CRP &lt;br&gt;
3.There is also a &lt;code&gt;defer&lt;/code&gt; attribute that you can add to the script tag that tells the parser that the script should wait to execute until after the document is loaded&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary:
&lt;/h2&gt;

&lt;p&gt;So let's see what all the options we have to optimize the CRP&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Minification,Compression and Caching - HTML,CSS and JS&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reduce critical resources  - CSS media query ,avoid imports and use critical inline CSS , JS - with async or defer attribute&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Shorten CRP length , i.e. reduce the number of round trips for fetching resources , there are a ton of ways to optimize it based on different communication protocol,You can refer it &lt;a href="https://hpbn.co/"&gt;here&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Optimize the order in which the remaining critical resources are loaded: download all critical assets as early as possible to shorten the critical path length.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are other methods of optimizing a site ,in my next post I will discuss on how to achieve Fast Load time for your site&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;References:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path"&gt;https://developers.google.com/web/fundamentals/performance/critical-rendering-path&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://classroom.udacity.com/courses/ud884"&gt;https://classroom.udacity.com/courses/ud884&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Difference between Methods and functions in Javascript </title>
      <author>Amran AL Ketara</author>
      <pubDate>Sun, 17 Oct 2021 03:30:05 +0000</pubDate>
      <link>https://dev.to/amk/difference-between-methods-and-functions-in-javascript-53f5</link>
      <guid>https://dev.to/amk/difference-between-methods-and-functions-in-javascript-53f5</guid>
      <description>&lt;p&gt;In this article I'm explaining what is the difference between functions and methods in Javascript.&lt;br&gt;
&lt;a href="https://amkblog.com/javascript/methods-and-functions/"&gt;https://amkblog.com/javascript/methods-and-functions/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Creating a personal image gallery with VueJS, Auth0 and Cloudinary.</title>
      <author>TemitopeAsama</author>
      <pubDate>Sun, 17 Oct 2021 03:08:43 +0000</pubDate>
      <link>https://dev.to/hackmamba/creating-a-personal-image-gallery-with-vuejs-auth0-and-cloudinary-56pf</link>
      <guid>https://dev.to/hackmamba/creating-a-personal-image-gallery-with-vuejs-auth0-and-cloudinary-56pf</guid>
      <description>&lt;p&gt;In this article, you will be learning how to create a personal image gallery using VueJS, Auth0 and Cloudinary API. With this application, users will be able to sign in using the authorization and authentication features of Auth0, create a profile and upload and download images with the help of Cloudinary.&lt;/p&gt;

&lt;p&gt;You might be looking for the complete code. I've created a &lt;a href="https://github.com/TemitopeAsama/Hackmamba-Repository/tree/master/ackmamba_jamstack_hackathon_video_collection--master"&gt;GitHub repo&lt;/a&gt; where you can find the complete code for the app.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-up-auth0"&gt;
  &lt;/a&gt;
  Setting up Auth0
&lt;/h3&gt;

&lt;p&gt;Auth0 is a flexible, drop-in solution to add authentication and authorization services to your applications. You are able to avoid the cost, time, and risk that come with building your own solution to authenticate and authorize users.&lt;/p&gt;

&lt;p&gt;To set up Auth0, the first thing you will be needing is an Application in Auth0, so head on over to their website and &lt;a href="https://auth0.com/"&gt;create an account&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After setting up your account, the next thing you want to do is create your first application. You can do that by clicking the applications item on the menu on the left side and click “Create Application”.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JYh6CL6J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jgqq0qsk9ss4bm4us5d9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JYh6CL6J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jgqq0qsk9ss4bm4us5d9.png" alt="Image1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From the image above, we see what that dropdown looks like;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The first arrow points to the name box; here you can enter the name for your app and in this example, we’ll be calling it &lt;strong&gt;“My App”&lt;/strong&gt;. &lt;/li&gt;
&lt;li&gt;The second arrow points to the application type options available, and for this project we’ll be using the &lt;strong&gt;“Single Page Web Applications”&lt;/strong&gt; option, because just like the description says, we’ll be building a JavaScript front-end app that uses an API. &lt;/li&gt;
&lt;li&gt;When that’s done, click &lt;strong&gt;“Create”&lt;/strong&gt;. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This sets up the application with default configuration for a Single Page Web Application. This configuration can be tweaked or changed later if you need or want to.&lt;/p&gt;

&lt;p&gt;In the settings, add &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt; to the Allowed Callback URLs, Allowed Logout URLs, Allowed Web Origins and Allowed Origins (CORS) fields. This is due to the fact that the sample client will be running on &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt; you'll need to add the appropriate values if you're running on a server or a different port or on a host that isn't localhost&lt;/p&gt;

&lt;p&gt;The rest of the defaults can be left as is.&lt;/p&gt;

&lt;p&gt;From the image above, we see what that dropdown looks like;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The first arrow points to the name box; here you can enter the name for your app and in this example, we’ll be calling it “My App”. &lt;/li&gt;
&lt;li&gt;The second arrow points to the application type options available, and for this project we’ll be using the “Single Page Web Applications” option, because just like the description says, we’ll be building a JavaScript front-end app that uses an API. &lt;/li&gt;
&lt;li&gt;When that’s done, click “Create”. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This sets up the application with default configuration for a Single Page Web Application. This configuration can be tweaked or changed later if you need or want to.&lt;/p&gt;

&lt;p&gt;In the settings, add &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt; to the Allowed Callback URLs, Allowed Logout URLs, Allowed Web Origins and Allowed Origins (CORS) fields. This is due to the fact that the sample client will be running on &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt; you'll need to add the appropriate values if you're running on a server or a different port or on a host that isn't localhost&lt;/p&gt;

&lt;p&gt;The rest of the defaults can be left as is.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-up-cloudinary"&gt;
  &lt;/a&gt;
  Setting up Cloudinary
&lt;/h3&gt;

&lt;p&gt;Cloudinary is a media management platform for web and mobile developers. Cloudinary is an end-to-end image- and video-management solution for websites and mobile apps, covering everything from image and video uploads, storage, manipulations, optimizations to delivery.&lt;/p&gt;

&lt;p&gt;First, just like we did with Auth0, we have to &lt;a href="https://cloudinary.com/"&gt;create an account on Cloudinary&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cr8fGcZ5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ylkbvjxnahlhi6h7308v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cr8fGcZ5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ylkbvjxnahlhi6h7308v.png" alt="Image2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When creating an account on Cloudinary, it’s important to choose the option that best describes your use for it. Here, we’ll be making use of their API to manipulate media on our project, so it’s only appropriate that we select the option “Programmable Media for image and video API”. When that’s over and done, you can then proceed to creating your account.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rj_whZyF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7yizge1vuy0k3r8jahwr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rj_whZyF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7yizge1vuy0k3r8jahwr.png" alt="Image11"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When your account is created and fully functional, you should see your dashboard, just like the one above.&lt;/p&gt;

&lt;p&gt;Log into your Cloudinary account and set up an upload preset that will be handling the images being uploaded. Before setting up an upload preset, you’ll first have to create a media library folder that will hold the images being uploaded. You can do this using the following steps;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go to the media library.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T5KpuFyf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zrd7ym522xk703yfjpas.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T5KpuFyf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zrd7ym522xk703yfjpas.png" alt="Image3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a new folder. we’ll be calling our folder “My images”.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WHCJ97K9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r7jjsuj3tgw2v7qglyb1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WHCJ97K9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r7jjsuj3tgw2v7qglyb1.png" alt="Image4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, Cloudinary gives developers a tool that allows us integrate it in VueJS applications, called the VueJS SDK. The Cloudinary Vue.js SDK serves as a layer on top of Cloudinary's JavaScript (Cloudinary-core) library.&lt;/p&gt;

&lt;p&gt;We can install the SDK by running the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install cloudinary-vue

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we can proceed with creating the upload preset.&lt;br&gt;
Go to the Settings option and click Upload (tab)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VlFQRD2x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7klexvx7lmneh3ylk0zs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VlFQRD2x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7klexvx7lmneh3ylk0zs.png" alt="Image5"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Scroll down to and click on add upload preset.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hMqDABg2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xrqs0mnnnohww2goqp6p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hMqDABg2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xrqs0mnnnohww2goqp6p.png" alt="Image6"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Set the Upload preset name, select the Unsigned signing mode and input the name of the folder that you created above. In this case, &lt;strong&gt;“my images”&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uSaI935P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1v6dm01beucnq10qq4zt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uSaI935P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1v6dm01beucnq10qq4zt.png" alt="Image7"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Set the Upload preset name, select the Unsigned signing mode and input the name of the folder that you created above. In this case, “my images”&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jO021Cnf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_CD896DC971CCB47C6D3C431710AC6C2AE63CC9D657F228DAF13FC2AF20E55F45_1633502628689_ab.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jO021Cnf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_CD896DC971CCB47C6D3C431710AC6C2AE63CC9D657F228DAF13FC2AF20E55F45_1633502628689_ab.png" alt="img8"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s important to note that &lt;strong&gt;Unsigned upload presets are used when implementing upload capabilities from client-side apps i.e. allowing uploads straight from the browser&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Go to Upload control and switch the return delete token on if you’d like to be able to delete uploaded images.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BWmxeS9d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6dzz50utgbr2cno317vs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BWmxeS9d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6dzz50utgbr2cno317vs.png" alt="Image9"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You can only use the delete token to delete an uploaded file within a span of ten minutes after uploading it.&lt;/p&gt;

&lt;p&gt;Set up the rest of the settings to your preferences and click on 'save' to save this new upload preset.&lt;br&gt;
Back on the settings page and upload tab the new upload preset will be listed amongst the existing presets.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BweHGbta--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8c10nfd3aot68xkdenlm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BweHGbta--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8c10nfd3aot68xkdenlm.png" alt="Image10"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note: You can only use the delete token to delete an uploaded file within a span of ten minutes after uploading it.&lt;/p&gt;

&lt;p&gt;Set up the rest of the settings to your preferences and click on 'save' to save this new upload preset.&lt;br&gt;
Back on the settings page and upload tab the new upload preset will be listed amongst the existing presets.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mSpf_3LS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--YuIjlk3S--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_66%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/t4cp1pbkhac8gxrwjefx.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mSpf_3LS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--YuIjlk3S--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_66%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/t4cp1pbkhac8gxrwjefx.gif" alt="Credit: James Sinkala"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-vue-component"&gt;
  &lt;/a&gt;
  The Vue Component
&lt;/h3&gt;

&lt;p&gt;So to create the Vue Component that will allow users upload images to Cloudinary through the created upload preset.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-template"&gt;
  &lt;/a&gt;
  The Template
&lt;/h2&gt;

&lt;p&gt;The template below contains the file upload button that will trigger the uploader modal. We can put in a &lt;code&gt;Main.vue&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
&amp;lt;template&amp;gt;
&amp;lt;div&amp;gt;
    &amp;lt;Header/&amp;gt;
  &amp;lt;v-card&amp;gt;
    &amp;lt;div class="helldo"&amp;gt;
      &amp;lt;input type="file" @change="onFileSelected"&amp;gt; 
      &amp;lt;v-btn v-if="displayUploadBtn" outlined @click="uploadFile"&amp;gt; Upload &amp;lt;/v-btn &amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;v-tabs
      color="deep-purple accent-4"
      right
    &amp;gt;
      &amp;lt;v-tab&amp;gt;Landscape&amp;lt;/v-tab&amp;gt;
      &amp;lt;v-tab&amp;gt;City&amp;lt;/v-tab&amp;gt;
      &amp;lt;v-tab&amp;gt;Abstract&amp;lt;/v-tab&amp;gt;
      &amp;lt;v-tab-item
        v-for="n in 3"
        :key="n"
      &amp;gt;
        &amp;lt;v-container fluid&amp;gt;
          &amp;lt;v-row&amp;gt;
            &amp;lt;v-col
              v-for="i in 6"
              :key="i"
              cols="12"
              md="4"
            &amp;gt;
              &amp;lt;v-img
                :src="`https://picsum.photos/500/300?image=${i * n * 5 + 10}`"
                :lazy-src="`https://picsum.photos/10/6?image=${i * n * 5 + 10}`"
                aspect-ratio="1"
              &amp;gt;&amp;lt;/v-img&amp;gt;
            &amp;lt;/v-col&amp;gt;
          &amp;lt;/v-row&amp;gt;
        &amp;lt;/v-container&amp;gt;
      &amp;lt;/v-tab-item&amp;gt;
    &amp;lt;/v-tabs&amp;gt;
  &amp;lt;/v-card&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;strong&gt;:src&lt;/strong&gt; attributes on line 35 and 36 serves to generate random images from &lt;a href="https://picsum.photos/500/300?image="&gt;Picsum&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-axios"&gt;
  &lt;/a&gt;
  Installing Axios
&lt;/h3&gt;

&lt;p&gt;To make promise-based HTTP requests, I’d be installing &lt;a href="https://www.npmjs.com/package/axios"&gt;Axios&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#install axios
npm i axios
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After installing Axios, I can then use it to make request to the Cloudinary API.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
import axios from "axios"
import Header from '../Header/Main.vue'

export default {
    name: "home",
    data: () =&amp;gt; ({
    displayUploadBtn: false,
    selectedFile: null,
    CLOUDINARY_URL: "https://api.cloudinary.com/v1_1/yungscript/upload",
    CLOUDINARY_PRESET: "hk7esqdc" //your Cloudinary preset
}),

components: {
  Header
  },
    methods: {
    onFileSelected(event) {
    this.selectedFile = event.target.files[0]
    this.displayUploadBtn = true
},

uploadFile() {

let file = this.selectedFile
let formData = new FormData()

console.log(file);

formData.append("file", file)
formData.append("upload_preset", this.CLOUDINARY_PRESET)

axios({
  url: this.CLOUDINARY_URL,
  method: "POST",
  headers: {
  "Content-Type": "application/x-www-form-urlencoded"
},
data: formData
})
.then((res) =&amp;gt; {
console.log(res);
})
.catch((err) =&amp;gt; {
console.log(err);
})
}
}
};
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the CLOUDINARY_URL is the URL that contains the images uploaded by the user.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#integrating-auth0"&gt;
  &lt;/a&gt;
  Integrating Auth0
&lt;/h3&gt;

&lt;p&gt;From the account you created above, you’d be given a domain name and a client ID. Your domain is the base URL that you will use to access the Auth0 APIs and the URL where you'll redirect users to log in, while the client ID is an alphanumeric string, and it's the unique identifier for your application.  You cannot modify the Client ID. You will use the Client ID to identify the Auth0 Application to which the Auth0 SPA SDK needs to connect.&lt;/p&gt;

&lt;p&gt;Now, you’ll create an &lt;strong&gt;auth_config.json&lt;/strong&gt; file and add both your client ID and Domain.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
{
    "domain": "YOUR_AUTH0_DOMAIN",
  "clientId": "YOUR_AUTH0_CLIENT_ID"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, Execute the following command to install the Auth0 SPA SDK:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install @auth0/auth0-spa-js

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create an auth directory within the src directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir src/auth
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create an index.js file within the src/auth directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;touch src/auth/index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Populate index.js with the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
/**
 *  External Modules
 */

import Vue from 'vue';
import createAuth0Client from '@auth0/auth0-spa-js';

/**
 *  Vue.js Instance Definition
 */

let instance;

export const getInstance = () =&amp;gt; instance;

/**
 *  Vue.js Instance Initialization
 */

export const useAuth0 = ({
  onRedirectCallback = () =&amp;gt;
    window.history.replaceState({}, document.title, window.location.pathname),
  redirectUri = window.location.origin,
  ...pluginOptions
}) =&amp;gt; {
  if (instance) return instance;

  instance = new Vue({
    data() {
      return {
        auth0Client: null,
        isLoading: true,
        isAuthenticated: false,
        user: {},
        error: null,
      };
    },
    methods: {

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now to handle the callback when logging in using a redirect.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
/** Handles the callback when logging in using a redirect */
      async handleRedirectCallback() {
        this.isLoading = true;
        try {
          await this.auth0Client.handleRedirectCallback();
          this.user = await this.auth0Client.getUser();
          this.isAuthenticated = true;
        } catch (error) {
          this.error = error;
        } finally {
          this.isLoading = false;
        }
      },

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In cases where the user forget the password or token and might have to retrieve or renew it, we can then use the following to allow for token retrieval and redirect the user back to the login page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
/** Authenticates the user using the redirect method */
      loginWithRedirect(options) {
        return this.auth0Client.loginWithRedirect(options);
      },
/** Returns the access token. If the token is invalid or missing, a new one is retrieved */
      logout(options) {
        return this.auth0Client.logout(options);
      },
/** Returns the access token. If the token is invalid or missing, a new one is retrieved */
      getTokenSilently(o) {
        return this.auth0Client.getTokenSilently(o);
      },
    },

/** Use this lifecycle method to instantiate the SDK client */
    async created() {
      this.auth0Client = await createAuth0Client({
        ...pluginOptions,
        domain: pluginOptions.domain,
        client_id: pluginOptions.clientId,
        audience: pluginOptions.audience,
        redirect_uri: redirectUri,
      });

      try {
// If the user is returning to the app after authentication..
        if (
          window.location.search.includes('code=') &amp;amp;&amp;amp;
          window.location.search.includes('state=')
        ) {
          const { appState } = await this.auth0Client.handleRedirectCallback();

 // Notify subscribers that the redirect callback has happened, passing the appState
                    // (useful for retrieving any pre-authentication state)
          onRedirectCallback(appState);
        }
      } catch (error) {
        this.error = error;
      } finally {
 // Initialize our internal authentication state
        this.isAuthenticated = await this.auth0Client.isAuthenticated();
        this.user = await this.auth0Client.getUser();
        this.isLoading = false;
      }
    },
  });

  return instance;
};

/**
 *  Vue.js Plugin Definition
 */
// Create a simple Vue plugin to expose the wrapper object throughout the application
export const Auth0Plugin = {
  install(Vue, options) {
    Vue.prototype.$auth = useAuth0(options);
  },
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#routing"&gt;
  &lt;/a&gt;
  Routing
&lt;/h3&gt;

&lt;p&gt;The following block of code serves to tell the browser what page to load. From the four components created, I can import and reference them as below;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
import Vue from 'vue'
import VueRouter from 'vue-router'
// import Home from '../views/Home.vue'
// import Profile from "../components/Profile/Profile.vue";
const Home = () =&amp;gt; import(/* webpackChunkName: "about" */ '../components/Home/Main.vue') //imports the Home Component
const About = () =&amp;gt; import(/* webpackChunkName: "about" */ '../components/About/Main.vue') //imports the About Component
const Profile = () =&amp;gt; import(/* webpackChunkName: "about" */ '../components/Profile/Main.vue') //imports the Profile Component
const Media = () =&amp;gt; import(/* webpackChunkName: "about" */ '../components/Media/Main.vue') //imports the Media component
import { authGuard } from "../auth/authGuard";

Vue.use(VueRouter)
const routes = [
  {
    path: '/',
    name: 'Home',
    // redirect: "/home",
    component: Home
  },
  {
    path: '/about',
    name: 'About', //go to About Page
    component: About
  },
  {
    path: "/profile",
    name: "Profile", // go to Profile Page
    component: Profile,
    beforeEnter: authGuard //before user goes to profile page, it checks if user is logged in. If not, it redirects the user to the login page.
  },
  {
    path: "/media",
    name: "Media", // go to Profile Page
    component: Media
  }
]
const router = new VueRouter({
  mode: 'history',
  base: process.env.BASE_URL,
  routes
})
export default router

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#plugins"&gt;
  &lt;/a&gt;
  Plugins
&lt;/h3&gt;

&lt;p&gt;I added the Vuetify package to style the project but feel free to use what you like. Bootstrap works just fine as well. Install Vuetify in your Vue app after creating your Vue project using Vue CLI like this;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;vue add vuetify
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Import Vue into your project as such:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
import Vue from 'vue';
import Vuetify from 'vuetify/lib/framework';
Vue.use(Vuetify);
export default new Vuetify({
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Voila, you’ve successfully integrated Cloudinary and Auth0 into your VueJS project.&lt;/p&gt;

&lt;p&gt;Content created for the &lt;a href="https://content.hackmamba.io/"&gt;Hackmamba&lt;/a&gt; Jamstack Content Hackathon with &lt;a href="https://auth0.com/"&gt;Auth0&lt;/a&gt; and &lt;a href="https://cloudinary.com/"&gt;Cloudinary&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>vue</category>
      <category>cloudinary</category>
    </item>
    <item>
      <title>How to setup Postcss, Tailwind, React, and Webpack from Scratch</title>
      <author>ynwd</author>
      <pubDate>Sun, 17 Oct 2021 02:03:53 +0000</pubDate>
      <link>https://dev.to/ynwd/how-to-setup-postcss-tailwind-react-and-webpack-from-scratch-2o6c</link>
      <guid>https://dev.to/ynwd/how-to-setup-postcss-tailwind-react-and-webpack-from-scratch-2o6c</guid>
      <description>&lt;p&gt;I want to create a shared react component for a monorepo with tailwindcss. However, while reading the document, it was found that tailwind uses craco. Meanwhile I want to use webpack. And it definitely doesn't suit my needs. So I searched everywhere, to find setting everything up from scratch.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.
├── babel.config.js
├── package.json
├── postcss.config.js
├── src
│   ├── App.js
│   ├── index.css
│   ├── index.html
│   └── index.js
├── tailwind.config.js
└── webpack.config.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The following are some of my notes. I hope this helps people with similar needs to mine.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/ynwd/how-to-integrate-postcss-and-webpack-ed5"&gt;How to integrate postcss and webpack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ynwd/how-to-integrate-tailwind-and-webpack-525d"&gt;How to integrate tailwind and webpack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ynwd/how-to-integrate-tailwind-react-and-webpack-2gdf"&gt;How to integrate tailwind, react and webpack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webpack</category>
      <category>react</category>
      <category>tailwindcss</category>
      <category>postcss</category>
    </item>
    <item>
      <title>How to Create a Bot that Automates Website Clicks Without Coding</title>
      <author>Stefan Smiljkovic</author>
      <pubDate>Sun, 17 Oct 2021 02:00:46 +0000</pubDate>
      <link>https://dev.to/shtefcs/how-to-create-a-bot-that-automates-website-clicks-without-coding-11dk</link>
      <guid>https://dev.to/shtefcs/how-to-create-a-bot-that-automates-website-clicks-without-coding-11dk</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MW2jUBVJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3840/0%2ApyTXt1hbixBWi1xi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MW2jUBVJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3840/0%2ApyTXt1hbixBWi1xi.png" alt="how to make bot that click"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Originally published on &lt;a href="https://automatio.co/blog/how-to-automate-website-clicks/"&gt;Automatio Blog&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you are looking for a way to automate browser website clicks, you came to the right place.&lt;/p&gt;

&lt;p&gt;In this article, you will learn how to build a bot that will click on websites, links, buttons, or anything clickable, without the need for technical knowledge or writing a single line of code.&lt;/p&gt;

&lt;p&gt;Below are examples of what click actions you could automate:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Automate clicking on buttons&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Automate filling forms&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Automate clicking on links&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Creating bot website traffic/visitors&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Automate clicking on follow/like button on social media&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Automate collecting points on rewards websites&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;And many more&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#lets-get-started"&gt;
  &lt;/a&gt;
  Let’s get started
&lt;/h2&gt;

&lt;p&gt;To create our click bot, we are going to use our tool &lt;a href="https://automatio.co/"&gt;Automatio&lt;/a&gt;. It’s no-code web automation and data extraction tool, that gives you the ability to create all kinds of simple or complex bots without writing any code.&lt;/p&gt;

&lt;p&gt;If you are already registered on Automatio and have the Chrome Extension installed, then you can proceed, if not, click here to &lt;a href="https://app.automatio.co/register"&gt;sign up&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-bot-that-clicks-on-vote-buttons-voting-bot"&gt;
  &lt;/a&gt;
  A bot that clicks on vote buttons (voting bot)
&lt;/h2&gt;

&lt;p&gt;In this scenario, we are going to create a simple bot that goes on a specific website, which in our example is basically a list of popular links/articles, and  clicks on the vote-up buttons .&lt;/p&gt;

&lt;p&gt;Open the Automatio Chrome Extension and select the  Click action  from the extension sidebar. Check the screenshot below 👇.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v_ek9okH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3840/0%2AF7U9l8a-lqA3IqyW.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v_ek9okH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3840/0%2AF7U9l8a-lqA3IqyW.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you have the Click action selected, click on the three dots dropdown to reveal more options and select  Repeat click . By default, the Click action can click only on a single element. With the Repeat click option, we can select multiple elements and Automatio will execute those clicks in sequence. In this case, clicking on the upvotes buttons one by one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5YCf3UEH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2Ad-Dx6zSF6YLJve7L.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5YCf3UEH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2Ad-Dx6zSF6YLJve7L.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we need to select the elements which we want to be clicked. In this example, we’ll be selecting the upvote buttons. To do that, you will see the &lt;code&gt;Eyedroper&lt;/code&gt; icon on the top right of the Click action. By clicking on it, you will instantly be in selection mode. Now you can select the elements Automatio will click on.&lt;/p&gt;

&lt;p&gt;Also pay attention to how I am unselecting (rejecting) the unwanted elements, the downvote buttons. Check this short clip below 👇.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pEBribJF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/io54ifp2nc713doa53q5.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pEBribJF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/io54ifp2nc713doa53q5.gif" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see on the screenshot below, now you have ‘17’ selected elements, shown on the Click action where you saw the (&lt;em&gt;Eyedropper icon previously&lt;/em&gt;). If you hover over the Click action, the selected and rejected elements will be highlighted.&lt;/p&gt;

&lt;p&gt;Green 🟩 means the original selection (the one you clicked to select), red 🟥 means the element you rejected, and the blue 🟦 ones are auto-selected / suggested elements by the Automatio selector engine algorithm.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R1oeySG5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3348/0%2AlfEsZBKMDrZxZknG.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R1oeySG5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3348/0%2AlfEsZBKMDrZxZknG.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we start this bot that we created using the Chrome extension right now, Automatio will run from a cloud server and execute (click) on those upvote buttons we selected, one by one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--unR5ccey--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w49049nzy06d244majaw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--unR5ccey--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w49049nzy06d244majaw.gif" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As we can see from the logs, the Click actions are happening in real-time. But how can we be sure if Automatio really clicked it? The best way to know is to use  Screenshot action,  which will be our “eyes” in Automatio. So, let’s add it.&lt;/p&gt;

&lt;p&gt;We’ll use  Toolbox -&amp;gt; Screenshot  action for that. I’m also going to add a  Toolbox -&amp;gt; Wait  action before Screenshot, to give a bit of time for events to happen on the page (e.g loading all elements properly). The default wait time in Wait action is 2,500 milliseconds or 2.5 seconds. Since there will be nothing special to load between each of the clicks on upvote buttons, I’m going to decrease the wait time to 1 second (1000 ms).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5EnifQkW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q2qf490kq7ukr57gdgd8.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5EnifQkW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q2qf490kq7ukr57gdgd8.gif" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see from the clip above, I dragged and dropped the  Wait action  inside of the  Click action , to nest it. You are probably wondering “What is  Nested action?”  Well, those are actions that will be executed for every loop we have. In this case, Click repeat is a  loop  as it has 17 upvotes buttons to click. So for each upvote click, we want to execute all nested actions we have, which are Screenshot and Wait in this case.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---xPeeiNV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2046/0%2AzXI-UDrKFWe-U2bh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---xPeeiNV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2046/0%2AzXI-UDrKFWe-U2bh.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-words"&gt;
  &lt;/a&gt;
  Final words
&lt;/h2&gt;

&lt;p&gt;And that’s it. We just easily created a bot that will click on each upvote button, without writing a single line of code. Now we could extend this bot with various functionality. It could extract data, fill the form, solve the captcha or just run by itself every X minutes, hours, or days and repeat the same process again. We’ll cover that in the next tutorials. Till then, stay tuned and peace ✌.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#video-version"&gt;
  &lt;/a&gt;
  🎬 Video version
&lt;/h2&gt;

&lt;p&gt;By the way, here is the short video that covers this whole tutorial.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/z4n4M_z-KMk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>webscraping</category>
      <category>scraper</category>
      <category>automation</category>
      <category>dataextraction</category>
    </item>
    <item>
      <title>Introspecting Python Parameter Values via Argument Binding</title>
      <author>Daniel Starner</author>
      <pubDate>Sun, 17 Oct 2021 01:23:07 +0000</pubDate>
      <link>https://dev.to/dstarner/introspecting-python-parameter-values-via-argument-binding-1cok</link>
      <guid>https://dev.to/dstarner/introspecting-python-parameter-values-via-argument-binding-1cok</guid>
      <description>&lt;p&gt;Sometimes it is important to map function arguments with their parameter values. Python offers basic &lt;strong&gt;keyword arguments&lt;/strong&gt; - which will be discussed below - but if arguments are passed either positionally, or are handled by "catch-alls", such as &lt;code&gt;*args&lt;/code&gt; or &lt;code&gt;**kwargs&lt;/code&gt;, then it quickly can become more difficult to deterministically map parameter names to their associated values in a function call.&lt;/p&gt;

&lt;p&gt;Some situations where this may be mapping may be desired include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Observability tools and call stack tracing&lt;/strong&gt; - Seeing what functions were called with what methods helps to determine how efficiently a program is running, or can help debug it when things go wrong.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Determining function/task ownership for audit purposes&lt;/strong&gt; - If you system is a product used by organizations and users, it is important to have an easy, low-overhead way to determine what resources are being affected by a function call and who requested the change.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Argument modification&lt;/strong&gt; - Sometimes a function's arguments need to be validated or modified before being used, and creating a decorator that can handle any arbituary parameter definitions may be useful.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this post, we will dive into some more magical Python libraries and utilities that allow us to wrap and perform certain operations against arbituary function parameters. I will start with some Python basics - feel free to skip those sections as needed - before diving into some of the &lt;code&gt;Signature&lt;/code&gt; magic and it's real world use cases.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#functions-review"&gt;
  &lt;/a&gt;
  Functions Review
&lt;/h2&gt;

&lt;p&gt;Python, like most other programming languages, has the ability to define &lt;strong&gt;functions&lt;/strong&gt;. These functions usually define input &lt;strong&gt;parameters&lt;/strong&gt; and they output return values. &lt;strong&gt;Argument&lt;/strong&gt; values can then be provided to the function, which will perform some work and return a value. &lt;strong&gt;Note that I will try to use Python annotations where possible to make parameter types more clear.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;"""Adds and returns the two arguments
    """&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;num_1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;num_2&lt;/span&gt;

&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# returns 12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Quick note: Parameters are the &lt;em&gt;definitions&lt;/em&gt; of what variables a function defines, and &lt;em&gt;arguments&lt;/em&gt; are the actual runtime values that satisfy those parameters. In the example above, &lt;code&gt;num_1&lt;/code&gt; and &lt;code&gt;num_2&lt;/code&gt; are the parameter definitions, and the values of &lt;code&gt;5&lt;/code&gt; and &lt;code&gt;7&lt;/code&gt; are the arguments passed to the function.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Functions in Python can define arguments in two common ways: as &lt;strong&gt;positional arguments&lt;/strong&gt; and &lt;strong&gt;keyword arguments&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#positional-arguments"&gt;
  &lt;/a&gt;
  Positional Arguments
&lt;/h3&gt;

&lt;p&gt;Positional arguments are defined at the beginning of the parameter list, they are matched with their parameters &lt;em&gt;based on the order they are provided&lt;/em&gt;, and they have no default values. A positional argument &lt;em&gt;must&lt;/em&gt; be provided to the function when called.&lt;/p&gt;

&lt;p&gt;In the example above, since the function defines &lt;code&gt;num_1&lt;/code&gt; &lt;em&gt;and then&lt;/em&gt; &lt;code&gt;num_2&lt;/code&gt;, it means that the first argument passed (&lt;code&gt;5&lt;/code&gt;) will be saved to &lt;code&gt;num_1&lt;/code&gt; and the second argument passed (&lt;code&gt;7&lt;/code&gt;) will be saved to &lt;code&gt;num_2&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#keyword-arguments"&gt;
  &lt;/a&gt;
  Keyword Arguments
&lt;/h3&gt;

&lt;p&gt;Keyword arguments are defined after positional arguments, and they can provide default values in the parameter definition, meaning that a matching argument does not need to be provided when the function is called. These arguments are provided using the parameter &lt;strong&gt;identifier&lt;/strong&gt;, which is the variable name given to the parameter. If they are given positionally, without the identifier, then they act in the same was a positional arguments.&lt;/p&gt;

&lt;p&gt;We could call &lt;code&gt;add&lt;/code&gt; using keyword arguments:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# returns 18
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice how we have &lt;code&gt;&amp;lt;identifier&amp;gt;=&amp;lt;value&amp;gt;&lt;/code&gt;. We are now using keyword arguments to set &lt;code&gt;num_1&lt;/code&gt; and &lt;code&gt;num_2&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#default-keyword-arguments"&gt;
  &lt;/a&gt;
  Default Keyword Arguments
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;add&lt;/code&gt; doesn't require keyword arguments by default, so lets consider the following function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;exponential&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;power&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="n"&gt;power&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;power&lt;/code&gt; parameter above is defined as a keyword argument by default, where if its not provided, it will be given a default argument value of &lt;code&gt;2&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;exponential&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;           &lt;span class="c1"&gt;# returns 4
&lt;/span&gt;&lt;span class="n"&gt;exponential&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;        &lt;span class="c1"&gt;# returns 8
&lt;/span&gt;&lt;span class="n"&gt;exponential&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;power&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# returns 8 as well
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#problem-statement"&gt;
  &lt;/a&gt;
  Problem Statement
&lt;/h3&gt;

&lt;p&gt;Knowing how arguments and parameters work in Python, what if we want to write a program that prints out what arguments are given to a function, lining up positional and keyword arguments to a &lt;code&gt;dict&lt;/code&gt;ionary mapping. We will create a &lt;a href="https://pythonbasics.org/decorators/"&gt;decorator&lt;/a&gt; that accomplishes this.&lt;/p&gt;

&lt;p&gt;We are going to write the &lt;code&gt;log_function_call&lt;/code&gt; decorator function that will print out the arguments and return value of any function wrapped by the decorator.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;log_function_call&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;power&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="n"&gt;power&lt;/span&gt;

&lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# -&amp;gt; "pow was called with { num: 5, power: 2 }"
# -&amp;gt; 25
&lt;/span&gt;
&lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# -&amp;gt; "pow was called with { num: 5, power: 3 }"
# -&amp;gt; 125
&lt;/span&gt;
&lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;power&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# -&amp;gt; "pow was called with { num: 2, power: 4 }"
# -&amp;gt; 16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To create this, we will need to solve the problem of determining what arguments given line up with the parameter definition in the function, so that we can print it out. In a more general sense:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How can we intercept and determine what values are passed for a Python callable?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this case, a &lt;strong&gt;callable&lt;/strong&gt; is anything that can take arguments and return a value, such as a function, method, or even a &lt;a href="https://www.w3schools.com/python/python_lambda.asp"&gt;&lt;code&gt;lambda&lt;/code&gt; function&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pythons-signature-class"&gt;
  &lt;/a&gt;
  Python's Signature Class
&lt;/h2&gt;

&lt;p&gt;Python has a built in &lt;code&gt;inspect&lt;/code&gt; module that provides many different utility functions and classes which allow the caller to get information and metadata about runtime variables during a program's execution. We can leverage this module and it's &lt;a href="https://docs.python.org/3/library/inspect.html#introspecting-callables-with-the-signature-object"&gt;&lt;code&gt;Signature&lt;/code&gt; class&lt;/a&gt; to introspect a function's arguments to create a mapping of parameter names back to their values, &lt;em&gt;even if they are passed as position arguments&lt;/em&gt;!&lt;/p&gt;

&lt;p&gt;Without the &lt;code&gt;Signature&lt;/code&gt; class, only &lt;a href="https://docs.python.org/3/glossary.html#term-argument"&gt;keyword arguments&lt;/a&gt; can be easily converted into a &lt;code&gt;dict&lt;/code&gt; map, which limits the amount of introspection that can be performed. By using the  &lt;code&gt;Signature&lt;/code&gt; class, a generic decorator, such as &lt;code&gt;log_function_call&lt;/code&gt;, can convert &lt;em&gt;any&lt;/em&gt; arguments given to a function into a map of their parameter names and values. This is powerful as it allows us to create a more powerful decorator that can perform extra actions using a function's arguments, whether passed positionally or as keywords.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quick-look-at-decorators"&gt;
  &lt;/a&gt;
  Quick Look at Decorators
&lt;/h3&gt;

&lt;p&gt;Before diving into how the &lt;code&gt;Signature&lt;/code&gt; class can help us with the &lt;code&gt;log_function_call&lt;/code&gt; decorator, lets start setting up the decorator itself so that we can understand &lt;em&gt;that&lt;/em&gt; code before going further. While I assume some basic knowledge of Python decorators, I will briefly explain the code in what the decorator block would look like.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;log_function_call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
       &lt;span class="s"&gt;"""
       Wrap the original function call to print the arguments before
       calling the intended function
       """&lt;/span&gt;
       &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"TODO: Print the arguments here!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By wrapping a function with this &lt;code&gt;log_function_call&lt;/code&gt; above, we will emit a print line before the function actually gets called. The only issue is that we are printing an unhelpful line instead of our actual argument values.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#signatures-and-binding"&gt;
  &lt;/a&gt;
  Signatures and Binding
&lt;/h3&gt;

&lt;p&gt;So we have a decorator that is intercepting the function call with access to the arbitrary positional argument - as a list represented as &lt;code&gt;*args&lt;/code&gt; - and keyword arguments - represented as the &lt;code&gt;**kwargs&lt;/code&gt; map. By generating a &lt;em&gt;signature&lt;/em&gt; of the arbitrarily wrapped function - &lt;code&gt;func&lt;/code&gt; in the example - we can merge these two generic argument objects into a single, declarative map of&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;parameter name&amp;gt;: &amp;lt;arg value&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;which can then be acted upon easily to perform different operations, such as printing out the function call and arguments for auditing sake!&lt;/p&gt;

&lt;p&gt;In the following code, we are continuing off the previous decorator block with the addition of our introspection code; we are generating a signature of the wrapped function and then &lt;em&gt;binding&lt;/em&gt; the given arguments to the functions parameters, which returns a dictionary of parameter names to their passed values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;inspect&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;signature&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;log_function_call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s"&gt;"""
        Wrap the original function call to print the arguments before
        calling the intended function
        """&lt;/span&gt;
        &lt;span class="n"&gt;func_sig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;signature&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Create the argument binding so we can determine what
&lt;/span&gt;        &lt;span class="c1"&gt;# parameters are given what values
&lt;/span&gt;        &lt;span class="n"&gt;argument_binding&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;argument_map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;argument_binding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arguments&lt;/span&gt;

        &lt;span class="c1"&gt;# Perform the print so that it shows the function name
&lt;/span&gt;        &lt;span class="c1"&gt;# and arguments as a dictionary
&lt;/span&gt;        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; was called with &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;argument_map&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#real-world-example"&gt;
  &lt;/a&gt;
  Real World Example
&lt;/h2&gt;

&lt;p&gt;So when can this actually be used? Well, for our project, we have a &lt;a href="https://www.djangoproject.com/"&gt;Django web application&lt;/a&gt; project that implements &lt;a href="https://docs.celeryproject.org/en/stable/index.html"&gt;Celery Asynchronous Tasks&lt;/a&gt;. We can schedule these tasks to be run by a background worker, but we require an audit log to determine &lt;em&gt;who&lt;/em&gt; started a task and &lt;em&gt;what organization&lt;/em&gt; the task is tied back to. &lt;/p&gt;

&lt;p&gt;For instance, if we have a task such as &lt;code&gt;resolve_membership&lt;/code&gt; that ensures the right members have the proper permissions, it may take in a &lt;code&gt;organization_id&lt;/code&gt; parameter of the organization to resolve membership for.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;celery&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;


&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# &amp;lt;-- Fanciness that just denotes the function as an async task
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;resolve_membership&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;TaskResult&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;organization_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;org&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Originization&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;organization_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;do_something_with_the_org&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# arbituary code being run
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While this task is created, scheduled, started, and competed, it's current state and result (&lt;code&gt;SUCCESS&lt;/code&gt;, &lt;code&gt;FAILED&lt;/code&gt;, &lt;code&gt;QUEUED&lt;/code&gt;, ...) will be stored in the database by Celery automatically. This gives us a queriable audit log of all &lt;code&gt;resolve_membership&lt;/code&gt; tasks that have been run, but it doesn't easily actually allow us to see which tasks correspond to which organizations. As a part of task scheduling, we wanted to create an audit log of these tasks and draw a relationship to what organizations they were affecting, and what - if any - user scheduled the tasks.&lt;/p&gt;

&lt;p&gt;We &lt;em&gt;could&lt;/em&gt; have performed this audit log creation explicitly in every task, like the following code example, but it would have gotten more difficult to manage as more tasks were created, or if any changes were made to the custom &lt;code&gt;TaskResult&lt;/code&gt; class. This would quickly become too cumbersome and would not result in a &lt;a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself"&gt;DRY program structure&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;celery&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;


&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# &amp;lt;-- Fanciness that just denotes the function as an async task
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;resolve_membership&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;TaskResult&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;organization_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;org&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Originization&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;organization_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Assign the organization to the task for audit logging purposes
&lt;/span&gt;    &lt;span class="c1"&gt;#   NOTE: this would need to be done on EVERY task
&lt;/span&gt;    &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;organization&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;

    &lt;span class="c1"&gt;# Perform the actual task needed
&lt;/span&gt;    &lt;span class="n"&gt;do_something_with_the_org&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# arbituary code being run
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using a wrapping decorator like the &lt;code&gt;log_function_call&lt;/code&gt; above, we were able to create a single &lt;code&gt;assign_ownership&lt;/code&gt; decorator that would wrap each task execution. This decorator would inspect the task arguments and provided some static arguments to the decorator itself, it would be able to create the same ownership relationship without needing to copy anything more than just the decorator name itself. This made it much easier to create the task audit log without having to worry about &lt;em&gt;how&lt;/em&gt; the ownership was actually being created. It reduced all of our individual implementations across tasks to a single function block that was much easier to manage.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;celery&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;audit_ownership&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;org_param&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'organization_id'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;resolve_membership&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;TaskResult&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;organization_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;org&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Originization&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;organization_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Perform the actual task needed
&lt;/span&gt;    &lt;span class="n"&gt;do_something_with_the_org&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# arbituary code being run
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The following code block is a paraphrased version of the decorator. Notice how we are using the &lt;code&gt;Signature&lt;/code&gt; class to load the value of a given parameter no matter how it was passed as a function; whether as a positional or keyword argument. Note that the following code is a bit advanced and does require some knowledge of how to define decorators in Python.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;inspect&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;signature&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;audit_ownership&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;org_param&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;task_param&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'task'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;"""
    Wrapping a celery task, this will attempt to create an audit log
    tying the task execution back to an organization using passed arguments

    : org_param:  str  : function parameter that denotes the organization ID
    : task_param: str  : function parameter that denotes the task instance
    """&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s"&gt;"""
        This is the actual task decorator, but nested to allow for parameters
        to be passed on the decorator definition
        """&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="s"&gt;"""
            The wrapper replaces the actual function call and performs the
            needed extra auditing work before calling the original function
            """&lt;/span&gt;

            &lt;span class="c1"&gt;# create a function signature to introspect the call
&lt;/span&gt;            &lt;span class="n"&gt;sig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;signature&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     
            &lt;span class="c1"&gt;# Create the argument binding so we can determine what
&lt;/span&gt;            &lt;span class="c1"&gt;# parameters are given what values
&lt;/span&gt;            &lt;span class="n"&gt;argument_binding&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;argument_map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;argument_binding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arguments&lt;/span&gt;

            &lt;span class="c1"&gt;# Using the argument binding and decorator arguments, we can
&lt;/span&gt;            &lt;span class="c1"&gt;# fetch the task and organization, no matter how the function
&lt;/span&gt;            &lt;span class="c1"&gt;# was invoked. The power of argument introspection!!
&lt;/span&gt;            &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;argument_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;task_param&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;organization_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;argument_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;org_param&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;organization&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Organization&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;organization&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="c1"&gt;# The actual logic is abstracted out to be more readable
&lt;/span&gt;            &lt;span class="c1"&gt;# Assume this function creates the relationship between the
&lt;/span&gt;            &lt;span class="c1"&gt;# task result instance and the organization instance
&lt;/span&gt;            &lt;span class="n"&gt;assign_ownership_to_task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;organization&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;            &lt;span class="c1"&gt;# this calls the original function
&lt;/span&gt;                                             &lt;span class="c1"&gt;# as it was original intended  
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As an extra bonus, we made the &lt;code&gt;org_param&lt;/code&gt; decorator parameter also be a &lt;code&gt;callable&lt;/code&gt;, instead of being a &lt;code&gt;str&lt;/code&gt;, so that we could dynamically fetch the associated value. This was useful in situations where organization-owned resources were passed to the task instead of the organization itself, so we could have the callable load the child object and return a reference to its parent's organization.&lt;/p&gt;




&lt;p&gt;Python decorators that modify and perform operations using the provided arguments can rely on function signatures and argument bindings to determine parameter values as a part of their operations. This allows programs to utilize generalized decorators that can be reused across an application to perform operations such as debugging or audit-logging. Have some more examples of where this could be useful? Post them below!&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>django</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Working with Files in Linux 💻</title>
      <author>Seb </author>
      <pubDate>Sun, 17 Oct 2021 00:06:23 +0000</pubDate>
      <link>https://dev.to/linuxseb/working-with-files-in-linux-51af</link>
      <guid>https://dev.to/linuxseb/working-with-files-in-linux-51af</guid>
      <description>&lt;p&gt;Hey Dev community! 😆&lt;/p&gt;

&lt;p&gt;After weeks of exams and dealing with imposter syndrome, I am back with another short article on 'file commands' in Linux. These are pretty useful so take a look. 🤠&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-cd"&gt;
  &lt;/a&gt;
  1. cd 💻
&lt;/h4&gt;

&lt;p&gt;The 'cd' command moves you into any directory you want. For example, if I have files located in the 'Documents' directory, this is the command I would run:&lt;/p&gt;

&lt;p&gt;cd Documents&lt;/p&gt;

&lt;p&gt;and this would move me to that directory.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cEv_B8Kl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/98r18ml9og4ru73mml07.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cEv_B8Kl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/98r18ml9og4ru73mml07.png" alt="cd"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-ls"&gt;
  &lt;/a&gt;
  2. ls 💻
&lt;/h4&gt;

&lt;p&gt;The 'ls' command lists everything that is in that directory. To list everything in the directory, run this command:&lt;/p&gt;

&lt;p&gt;ls -l&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jzEMI5hP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7340cz89e2545iodjlq4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jzEMI5hP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7340cz89e2545iodjlq4.png" alt="ls"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-cat"&gt;
  &lt;/a&gt;
  3. cat 💻
&lt;/h4&gt;

&lt;p&gt;the 'cat' commands displays what is inside a file. Simply run this command:&lt;/p&gt;

&lt;p&gt;cat (name of file)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UvN-TJz1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3v1oagw8sn0o4c6pp7jh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UvN-TJz1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3v1oagw8sn0o4c6pp7jh.png" alt="cat"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The cat command also can do other things. 👇&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#cat-gt-filename"&gt;
  &lt;/a&gt;
  🎯 cat &amp;gt; filename
&lt;/h4&gt;

&lt;p&gt;Using this command, you can also create a file.&lt;/p&gt;

&lt;p&gt;What I did below was I created the file, typed out what I needed to, then viewed the file which displayed the text I had previously written.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R7MV5Qb9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dvti4qpxtwnnut56qb0y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R7MV5Qb9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dvti4qpxtwnnut56qb0y.png" alt="cat"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#cat-testfile1-testfile2gttestfile4"&gt;
  &lt;/a&gt;
  🎯 cat testfile1 testfile2&amp;gt;testfile4
&lt;/h4&gt;

&lt;p&gt;Using this command, you can also create 1 new file by putting two together by doing this command:&lt;/p&gt;

&lt;p&gt;What I did was I used test1, and test2, and merged that into a new file called test4.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y6gD1c3t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w5cosys5retwn31zd9xx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y6gD1c3t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w5cosys5retwn31zd9xx.png" alt="cat"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#4-cp"&gt;
  &lt;/a&gt;
  4. cp 💻
&lt;/h4&gt;

&lt;p&gt;The 'cp' commands copies files from one directory to another&lt;/p&gt;

&lt;p&gt;What I did below was I copied the Goku image from the pictures directory to the example directory, used 'cd' to move into the example directory, and did ls -l to view if the picture successfully copied.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--anOQ7ocC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p6oaejal36x4cq84linr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--anOQ7ocC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p6oaejal36x4cq84linr.png" alt="cp"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#5-mv"&gt;
  &lt;/a&gt;
  5. mv 💻
&lt;/h4&gt;

&lt;p&gt;The 'mv' command is typically for moving files but it can also be used to rename files as well.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#mv-to-move"&gt;
  &lt;/a&gt;
  🎯 mv (to move)
&lt;/h4&gt;

&lt;p&gt;To move a file into a directory, run this command:&lt;/p&gt;

&lt;p&gt;mv (filename) (directory)&lt;/p&gt;

&lt;p&gt;What I did below was I moved test1 from Documents to example1, I went to example1, and then listed the files to confirm if it successfully moved.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dq_q9rst--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pdvx9gicfyd27abmdrjx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dq_q9rst--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pdvx9gicfyd27abmdrjx.png" alt="mv"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#mv-to-rename"&gt;
  &lt;/a&gt;
  🎯 mv (to rename)
&lt;/h4&gt;

&lt;p&gt;To rename a file, run this command:&lt;/p&gt;

&lt;p&gt;mv (filename) (newfilename)&lt;/p&gt;

&lt;p&gt;Staying in the example1 directory, I changed the name to 'newname' and then listed the files to confirm it's been changed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6BmGU2Hi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w16tyq06pm42a4tkwtnr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6BmGU2Hi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w16tyq06pm42a4tkwtnr.png" alt="mv"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#6-mdkir"&gt;
  &lt;/a&gt;
  6. mdkir 💻
&lt;/h4&gt;

&lt;p&gt;The 'mkdir' command is what you will use almost daily. This command is used to make directories.&lt;/p&gt;

&lt;p&gt;💻&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#7-grep"&gt;
  &lt;/a&gt;
  7. grep 💻
&lt;/h4&gt;

&lt;p&gt;'grep' is used to search for certain words in a text. To do this, run the command&lt;/p&gt;

&lt;p&gt;grep (word) (file name)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FGoglcHD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nx8oaoc81in6ypuojz9s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FGoglcHD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nx8oaoc81in6ypuojz9s.png" alt="grep"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#8-touch"&gt;
  &lt;/a&gt;
  8. touch 💻
&lt;/h4&gt;

&lt;p&gt;'touch' is another command you can use to create a file. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z_KxSoEE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fptxz5dzov09zies9cwn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z_KxSoEE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fptxz5dzov09zies9cwn.png" alt="touch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#9-rm"&gt;
  &lt;/a&gt;
  9. rm
&lt;/h4&gt;

&lt;p&gt;'rm' is used to delete directories or anything within them. Always be careful with this command because there is no going back once you remove something. To delete, run this command:&lt;/p&gt;

&lt;p&gt;rm -r (name of directory or file)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dDtV89QZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qsk9goi5jyhvamfkf6b3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dDtV89QZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qsk9goi5jyhvamfkf6b3.png" alt="rm"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#10-head"&gt;
  &lt;/a&gt;
  10. head
&lt;/h4&gt;

&lt;p&gt;'head' is used to view the first lines of a text file. You can change how many lines you want to view as well. &lt;/p&gt;

&lt;p&gt;head -n (# of lines) (filename)&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#and-that-is-it-for-todays-article"&gt;
  &lt;/a&gt;
  and that is it for today's article
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sjwGc_Wg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yhqkdyakxcmtrf527ouf.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sjwGc_Wg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yhqkdyakxcmtrf527ouf.gif" alt="yayme"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you for reading it 🥳 For future Linux content, give me a follow here or follow my twitter, &lt;a class="mentioned-user" href="https://dev.to/linuxseb"&gt;@linuxseb&lt;/a&gt;
&lt;/p&gt;

</description>
      <category>linux</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>opensource</category>
    </item>
    <item>
      <title>My top resources for interviewing</title>
      <author>Scott</author>
      <pubDate>Sun, 17 Oct 2021 00:01:25 +0000</pubDate>
      <link>https://dev.to/scottstern06/my-top-resources-for-interviewing-33o4</link>
      <guid>https://dev.to/scottstern06/my-top-resources-for-interviewing-33o4</guid>
      <description>&lt;p&gt;This week I finally got my shid together and sat down to compile a list of things I thought were valuable when interviewing.&lt;/p&gt;

&lt;p&gt;Resources and some mindset stuff...like how to get yo'self unstuck in an interview, should you apply to engineer or developer roles, etc etc&lt;/p&gt;

&lt;p&gt;So, my gift to you...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://engjobresources.carrd.co/"&gt;&amp;gt;&amp;gt;&amp;gt; LINK HERE&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Talk soon&lt;/p&gt;

&lt;p&gt;Scott&lt;/p&gt;

</description>
      <category>career</category>
      <category>javascript</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>String.prototype .toUpperCase() vs String. prototype.toLocaleUpperCase()</title>
      <author>maha0134</author>
      <pubDate>Sat, 16 Oct 2021 23:58:05 +0000</pubDate>
      <link>https://dev.to/maha0134/stringprototype-touppercase-vs-string-prototypetolocaleuppercase-36ma</link>
      <guid>https://dev.to/maha0134/stringprototype-touppercase-vs-string-prototypetolocaleuppercase-36ma</guid>
      <description>&lt;h2&gt;
  &lt;a href="#understanding-stringtouppercase"&gt;
  &lt;/a&gt;
  Understanding String.toUpperCase()
&lt;/h2&gt;

&lt;p&gt;The string.toUpperCase() method is used to convert a string into upper case letters. So, if we pass the string &lt;code&gt;hello, my name is john doe&lt;/code&gt; through the string.toUpperCase method, it should return &lt;code&gt;HELLO, MY NAME IS JOHN DOE&lt;/code&gt; as the output.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The method simply returns the string in upper case letters but doesn't change the original string. Our example shall make this clear.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;string.toUpperCase()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;

&lt;p&gt;Let's check with our string &lt;code&gt;hello my name is john doe&lt;/code&gt; how this works.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let sentence = 'hello my name is john doe'; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;we assigned our string to a variable called &lt;strong&gt;sentence&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let upperCase = sentence.toUpperCase();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;we declared a new variable &lt;strong&gt;upperCase&lt;/strong&gt; and assigned the return value of the method to it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now let's print this to the console and see the result.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(upperCase);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;The output comes as expected,&lt;br&gt;
&lt;br&gt;
 &lt;code&gt;HELLO MY NAME IS JOHN DOE&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We can simply output the result without the need for declaring a new variable too, check the code below in case you need to simply output a given string into &lt;code&gt;UPPERCASE&lt;/code&gt; letters.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let sentence = "hello my name is john doe";
console.log(sentence.toUpperCase());
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;The output is still the same,&lt;br&gt;
&lt;br&gt;
 &lt;code&gt;HELLO MY NAME IS JOHN DOE&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's try to see if this method affects our original string variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let sentence = "hello my name is john doe";
let upperCase = sentence.toUpperCase();
console.log(upperCase, sentence);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;The output comes to&lt;br&gt;
&lt;br&gt;
 &lt;code&gt;HELLO MY NAME IS JOHN DOE hello my name is john doe&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As is clear from the above example, this method simply returns a value but doesn't alter the string in question.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#exceptions-for-stringtouppercase-method"&gt;
  &lt;/a&gt;
  Exceptions for String.toUpperCase() method
&lt;/h3&gt;

&lt;p&gt;This method shall work on all &lt;code&gt;strings&lt;/code&gt; but what if the input is not &lt;code&gt;string&lt;/code&gt;. If we try this method with, let's say a &lt;code&gt;number&lt;/code&gt; or a &lt;code&gt;boolean&lt;/code&gt; value like &lt;strong&gt;&lt;em&gt;true&lt;/em&gt;&lt;/strong&gt; or if we simply used an &lt;code&gt;undefined&lt;/code&gt; variable, it shall give a &lt;strong&gt;&lt;em&gt;type error&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Clearly, the uses for this method are countless. If we are dealing with strings, we could use this method and get our inputs converted into &lt;code&gt;UPPERCASE&lt;/code&gt; letters with ease. This method can work in conjunction with a &lt;code&gt;for&lt;/code&gt; loop and we can even convert the string elements of an array into UPPERCASE letters. &lt;/p&gt;

&lt;p&gt;Check the code below and try it in your browsers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const sampleArray = ['newyork', 'ottawa', 'toronto', 'washington dc']
sampleArray.forEach(element =&amp;gt; console.log(element.toUpperCase()));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#understanding-stringtolocaleuppercase"&gt;
  &lt;/a&gt;
  Understanding String.toLocaleUpperCase()
&lt;/h2&gt;

&lt;p&gt;The String.toLocaleUpperCase() method returns a string input after converting it to either a default or a specified locale.&lt;/p&gt;

&lt;p&gt;Let's first try to understand what &lt;strong&gt;&lt;em&gt;Locale&lt;/em&gt;&lt;/strong&gt; means. &lt;/p&gt;

&lt;p&gt;The &lt;a href="https://www.merriam-webster.com/dictionary/locale"&gt;Merriam-Webster&lt;/a&gt; dictionary defines locale as '&lt;em&gt;a place or locality especially when viewed in relation to a particular event or characteristic&lt;/em&gt;'. So, in Javascript that would translate to the locale/locality of the host server by default or any other user-defined locale (like "en-US", "en-CA"). &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;String.toLocaleUpperCase()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h3&gt;

&lt;p&gt;Let's look at a few examples to see how String.toLocaleUpperCase() method works.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let language = 'turkish';//#1
console.log(language.toLocaleUpperCase());//#2
console.log(language.toLocaleUpperCase('en-CA'));//#3
console.log(language.toLocaleUpperCase('TR'));//#4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Before we look at the output of this code, let's try to understand what it does. &lt;br&gt;
&lt;strong&gt;&lt;em&gt;#1&lt;/em&gt;&lt;/strong&gt; assigns the &lt;code&gt;string&lt;/code&gt; value '&lt;em&gt;turkish&lt;/em&gt;' to the variable &lt;strong&gt;&lt;em&gt;language&lt;/em&gt;&lt;/strong&gt;.&lt;br&gt;
&lt;strong&gt;&lt;em&gt;#2&lt;/em&gt;&lt;/strong&gt; prints out the &lt;code&gt;uppercase&lt;/code&gt; version of '&lt;em&gt;turkish&lt;/em&gt;' in the locale of the host server(let's assume we are working in the US, so the locale is "en-US" or American English).&lt;br&gt;
&lt;strong&gt;&lt;em&gt;#3&lt;/em&gt;&lt;/strong&gt; prints out the &lt;code&gt;uppercase&lt;/code&gt; version of '&lt;em&gt;turkish&lt;/em&gt;' in the user-specified Canadian English locale.&lt;br&gt;
&lt;strong&gt;&lt;em&gt;#4&lt;/em&gt;&lt;/strong&gt; prints out the &lt;code&gt;uppercase&lt;/code&gt; version of '&lt;em&gt;turkish&lt;/em&gt;' in the user-specified Turkish locale.  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The output shall look like this&lt;br&gt;
&lt;br&gt;
&lt;code&gt;TURKISH TURKISH TURKİSH&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;


&lt;/blockquote&gt;

&lt;p&gt;Notice something different with the output of &lt;strong&gt;&lt;em&gt;#4&lt;/em&gt;&lt;/strong&gt;? The dot on the &lt;strong&gt;&lt;em&gt;I&lt;/em&gt;&lt;/strong&gt; is due to the fact that we selected to convert the string into the Turkish locale and the capital I in Turkish is written as &lt;code&gt;İ&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can also pass an array of locales through this method and it shall use the &lt;a href="https://tc39.es/ecma402/#sec-bestavailablelocale"&gt;best available locale&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#exceptions-for-stringtolocaleuppercase-method"&gt;
  &lt;/a&gt;
  Exceptions for String.toLocaleUpperCase() method
&lt;/h3&gt;

&lt;p&gt;This method just like the String.toUpperCase() method shall work on all &lt;code&gt;strings&lt;/code&gt; but if the input is &lt;code&gt;number&lt;/code&gt;, &lt;code&gt;boolean&lt;/code&gt; or an &lt;code&gt;undefined&lt;/code&gt; variable, it shall give a &lt;strong&gt;&lt;em&gt;type error&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stringtouppercase-vs-stringtolocaleuppercase"&gt;
  &lt;/a&gt;
  String.toUpperCase() vs String.toLocaleUpperCase()
&lt;/h2&gt;

&lt;p&gt;Now that we saw the usage of both the String.toUpperCase() as well as the String.toLocaleUpperCase() methods, let's look at the differences in between them.&lt;br&gt;
The String.toUpperCase() is not locale specific, so it does not expect any input for the locale. However, even though by default the String.toLocaleUpperCase() method doesn't demand a value to be passed, it is still working and converting letters as per a locale.&lt;/p&gt;

&lt;p&gt;So, practically, for a user using a locale that has all the UPPERCASE alphabets looking like the english alphabets, both these methods shall give the same output and the user can use these methods interchangeably.&lt;/p&gt;

&lt;p&gt;However, if we are working on a language like Turkish or any other language that has characters looking like 'GESÄSS', we will need to use the String.toLocaleUpperCase() method.&lt;/p&gt;

&lt;p&gt;For detailed information on these methods, please refer the MDN Web Docs for &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase"&gt;String.prototype.toUpperCase()&lt;/a&gt; and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleUpperCase"&gt;String.prototype.toLocaleUpperCase()&lt;/a&gt; methods.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>A boring product can succeed too</title>
      <author>Jason Leow ~ golifelog.com</author>
      <pubDate>Sat, 16 Oct 2021 23:42:26 +0000</pubDate>
      <link>https://dev.to/jasonleowsg/a-boring-product-can-succeed-too-1o88</link>
      <guid>https://dev.to/jasonleowsg/a-boring-product-can-succeed-too-1o88</guid>
      <description>&lt;p&gt;One of the indie maker folks on Twitter whom I look up to - &lt;a class="mentioned-user" href="https://dev.to/yongfook"&gt;@yongfook&lt;/a&gt;
 - wrote an &lt;a href="https://www.mojosaas.com/articles/micro-saas-evaluation-criteria/"&gt;article&lt;/a&gt; about making products as a solo developer/entrepreneur. I loved it and thought they were super useful tips for anyone solo starting out on your product. Paraphrasing them here and adding my own thoughts and applications to it:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#make-a-refreshingly-yet-familiar-product"&gt;
  &lt;/a&gt;
  Make a refreshingly (yet) familiar product.
&lt;/h3&gt;

&lt;p&gt;You don’t have to aim to be some disruptive, world-changing, curve-jumping, octagonal-thinking, ground-breaking, trail-blazing innovation to succeed. Yes it helps, but if you’re a solo maker whose ambition and definition of success is to work on something you love and have it pay the bills, you don’t need to go for the bleeding edge every time. For me, this really resonated because it goes against the grain of what’s often conventional wisdom in the tech startup scene, but I seldom ever questioned if the context of that advice is relevant to a lifestyle business by a company of one, which I’m aiming for. Though deep down, this was what I wanted intuitively and so this piece of advice brought it up and made it clear to me that that’s what I want to do instead. That I can just make something mostly familiar to customers, yet adding a refreshing spin to it, like what &lt;a class="mentioned-user" href="https://dev.to/yongfook"&gt;@yongfook&lt;/a&gt;
 said:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;repackaging an existing idea for a different target customer&lt;/li&gt;
&lt;li&gt;recycling an old idea for today’s market&lt;/li&gt;
&lt;li&gt;making a 10x simpler version of an existing idea&lt;/li&gt;
&lt;li&gt;making an unexciting but clear solution to a well-known problem&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#easy-to-grasp-in-plain-language"&gt;
  &lt;/a&gt;
  Easy to grasp in plain language
&lt;/h3&gt;

&lt;p&gt;Another thing that I love about this point - the simplicity. It’s tempting to try to do too much for too many different types of customers. As makers ourselves, we get excited with our baby and feature creep ensues. Making is what we know and we just keep making more and more features. Before you know it, the products becomes too complex to understand and use. For me, this is definitely something I need to watch out for. Being simple and easy to understand in plain language also helps with word of mouth marketing, and just plain usability. If customers don’t understand your product, they won’t use it! Plain words to me also means authenticity -don’t use “we”, use “me”. Act small, not corporate. Be intentionally tiny, but human.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#know-where-your-first-10-customers-are-before-even-starting"&gt;
  &lt;/a&gt;
  Know where your first 10 customers are before even starting
&lt;/h3&gt;

&lt;p&gt;The key point here is “BEFORE even starting”. I would often dive into making a product because it scratches my own itch, or it’s a problem space I’m familiar with and excited about. But I don’t often think about where these initial few customers are BEFORE starting. In my head, marketing and selling are things you do post-launch. Now I see now how risky that is. I do care about monetization as well - my 2 criteria in making products are enjoyability and profitability. So this was so on point, and a hard reminder that I do need to look into getting my first 10 customers EVEN WHILE I’m coding my product right now. At least &lt;strong&gt;one&lt;/strong&gt; customer, to start off.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#set-amp-forgetlow-support-is-ideal"&gt;
  &lt;/a&gt;
  Set &amp;amp; forget”/low support is ideal
&lt;/h3&gt;

&lt;p&gt;I wrote about this before, that I want to start a calm, not crazy, business. One of the principles I want to adopt is self-help by default as much as possible, and automate the rest of the support (if ever). As a company of one, I don’t have unlimited bandwidth to do well in everything, and personality-wise, I prefer to interact as little as possible with customers in terms of support. That means creating stuff that makes that happen. Software products tend to allow for that. I was particularly inspired by Tyler Tringas’ story of &lt;a href="https://tylertringas.com/storemapper/"&gt;Storemapper&lt;/a&gt; - it was the perfect set and forget product that helps websites set up a store locator feature. He grew it to $18k MRR and eventually sold the business. If anything, that’s a clear success story in my book.&lt;/p&gt;

&lt;p&gt;So, my lesson here? &lt;/p&gt;

&lt;p&gt;You don’t necessarily need to be spectacular to succeed.&lt;br&gt;
A ‘boring’ product, in stupid plain English that has 10 potential customers before launch, and mostly self-help, can also be a definition of success as a solo indie maker.&lt;/p&gt;

&lt;p&gt;So get out there and succeed.&lt;/p&gt;




&lt;p&gt;Follow my daily writings on &lt;a href="https://golifelog.com/goals/30"&gt;Lifelog&lt;/a&gt;, where I write about learning to code, goals, productivity, indie hacking and tech for good.&lt;/p&gt;

</description>
      <category>indiehackers</category>
      <category>entrepreneurship</category>
      <category>products</category>
    </item>
    <item>
      <title>How to automatically add dark mode to your site in 3 lines</title>
      <author>𝐍𝐚𝐭𝐚𝐥𝐢𝐞 𝐝𝐞 𝐖𝐞𝐞𝐫𝐝</author>
      <pubDate>Sat, 16 Oct 2021 23:32:59 +0000</pubDate>
      <link>https://dev.to/nataliedeweerd/how-to-automatically-add-dark-mode-to-your-site-in-3-lines-j40</link>
      <guid>https://dev.to/nataliedeweerd/how-to-automatically-add-dark-mode-to-your-site-in-3-lines-j40</guid>
      <description>&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefers-color-scheme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dark&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;invert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The result won't be perfect (in fact, it'll probably look downright awful), but it gives you a great starting point to then pull out individual colours and rebuild the CSS how you want!&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;@media (prefers-color-scheme:dark){ ... }&lt;/code&gt; is all you need to automatically trigger dark mode styling on your site if the user has set their browser to dark mode.&lt;/p&gt;

&lt;p&gt;This is how I created the new dark mode on my blog. Started with the &lt;code&gt;filter:invert(1);&lt;/code&gt; trick, picked out the colours manually in the inspector that worked, and slowly tweaked the rest. You can see the final result here: &lt;a href="https://flipsphere.net/"&gt;https://flipsphere.net/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>darkmode</category>
      <category>quicktips</category>
    </item>
  </channel>
</rss>
