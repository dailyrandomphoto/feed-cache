<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How much can you earn on UpWork before you give up?</title>
      <author>Max</author>
      <pubDate>Thu, 16 Sep 2021 20:00:05 +0000</pubDate>
      <link>https://dev.to/rimutaka/how-much-can-you-earn-on-upwork-before-you-give-up-3mha</link>
      <guid>https://dev.to/rimutaka/how-much-can-you-earn-on-upwork-before-you-give-up-3mha</guid>
      <description>&lt;h4&gt;
  &lt;a href="#a-brief-analysis-of-actual-upwork-earnings-for-software-developers"&gt;
  &lt;/a&gt;
  A brief analysis of actual UpWork earnings for software developers
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;TL;DR; The sooner you give up, the more you earn elsewhere.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;In case you don't know what &lt;a href="https://www.upwork.com"&gt;UpWork&lt;/a&gt; is, it is a leading freelance marketplace. They are a publicly listed company with $338M revenue in 2020. Anyone can post a job there, and most professionals can offer their services at the cost of 20% of their earnings. The platform provides no vetting for employers and minimal vetting for freelancers leaving it to the feedback system to weed out bad players. It is one of the better ones out there.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I used to hire on UpWork for our startup. It was an easy way to get things done on a shoestring budget. The results were a mixed bag. Most of the work was either a complete throw-away or prototype-level quality.&lt;br&gt;
We got what we paid for, but there were a few outliers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#highquality-freelancers-are-outliers"&gt;
  &lt;/a&gt;
  High-quality freelancers are outliers
&lt;/h2&gt;

&lt;p&gt;Despite considering bids only from freelancers with excellent feedback and &lt;a href="https://support.upwork.com/hc/en-us/articles/211068358"&gt;90%+ Job Success Score&lt;/a&gt; our hit rate was about 1 in 10 for "acceptable" and 1 in 20 for "great". We were lucky to hire some really good freelancers from remote (to us) places like Moldova, Macedonia and Turkey. They were up and coming, had reasonable rates and appreciated the constant stream of work we were sending them. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#paying-more-doesnt-get-you-more-quality"&gt;
  &lt;/a&gt;
  Paying more doesn't get you more quality
&lt;/h2&gt;

&lt;p&gt;There seemed to be a pretty low ceiling on the quality of the workforce there. Assuming that our job ads were well-written, simply offering more money didn't bring better quality bids. None of the higher-cost freelancers we tried ended up on our regulars list.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#freelancers-lifetime-value"&gt;
  &lt;/a&gt;
  Freelancer's lifetime value
&lt;/h2&gt;

&lt;p&gt;I recently got in touch with 11 out of 13 UpWork freelancers we hired on a regular basis. To my surprise, none of them was still using UpWork or any other freelance marketplace. Only 3 continued with casual contract work mostly through referrals from past clients.&lt;/p&gt;

&lt;p&gt;They all had a different story to tell, but the common theme was that the jobs on UpWork were hard to get, many employers had no idea what they were doing and the pay was below the market rate.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So how much do freelancers make before they move off the platform?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I looked at the total earnings of 100 freelancers in &lt;a href="https://www.upwork.com/ab/profiles/search/?category_uid=531770282580668418&amp;amp;page=1&amp;amp;q=rust"&gt;search results for Rust&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pWtI9cKJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/rimutaka/posts/master/upwork-earnings/upwork-earnings-breakdown-2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pWtI9cKJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/rimutaka/posts/master/upwork-earnings/upwork-earnings-breakdown-2.png" alt="UpWork earnings breakdown"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Assuming &lt;a href="https://www.reddit.com/r/Upwork/comments/plwc3u/im_just_tired_of_bidding_for_work_with_no/"&gt;you don't give up before landing that very first job&lt;/a&gt;, the chances are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1/3 quits before earning $1,000&lt;/li&gt;
&lt;li&gt;1/4 quits before earning $10,000&lt;/li&gt;
&lt;li&gt;1/3 quits before reaching $100,000&lt;/li&gt;
&lt;li&gt;the rest stays for a long haul and makes UpWork a significant source of their income&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#highearner-list"&gt;
  &lt;/a&gt;
  High-earner list
&lt;/h2&gt;

&lt;p&gt;It's not all doom and gloom. You can make a decent living in some categories.&lt;/p&gt;

&lt;p&gt;9 out of 100 freelancers in my search for a Rust engineer had over $100k of total earnings.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.upwork.com/freelancers/~017778f12a2565f8f4"&gt;$185,288&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.upwork.com/freelancers/~0147f8ce8730c3d633"&gt;$210,023&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.upwork.com/freelancers/~01f24fb7d3fa638cfa"&gt;$277,418&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.upwork.com/freelancers/~010ba56ab4bc5aba48"&gt;$281,584&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.upwork.com/freelancers/~0144b974ba8a3d287f"&gt;$295,363&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.upwork.com/freelancers/~010f4e6ae0c1778aae"&gt;$425,345&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.upwork.com/freelancers/~01aa1b7467b4eb49bc"&gt;$673,153&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.upwork.com/freelancers/~01364b7feb73f1d7ae"&gt;$921,241&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.upwork.com/freelancers/~01d95397aacaef6e88"&gt;$1,000,000&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#1000000-club-do-you-want-to-be-a-member"&gt;
  &lt;/a&gt;
  $1,000,000 club - do you want to be a member?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.upwork.com/freelancers/~01d95397aacaef6e88"&gt;Evgeniy T. from Catalonia&lt;/a&gt; tops our list with $1M+ of lifetime earnings. We don't know exactly how much he earned, but let's assume it is a million.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--70YrUbeM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/rimutaka/posts/master/upwork-earnings/one-million-dollars-club.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--70YrUbeM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/rimutaka/posts/master/upwork-earnings/one-million-dollars-club.png" alt="One Million Dollar Club"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Earning one million dollars sounds very inspirational. Who doesn't want to be a millionaire! Let's break it down:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$1,000,000 / 18,076 hrs worked = $55 per hour&lt;/li&gt;
&lt;li&gt;period over 10 years (started in 2011)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;$117k per year&lt;/strong&gt; if adjusted for inflation and UpWork fees&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If we disregard the intangible values such as freedom this type of work brings, &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;$117k per year for someone with 10 years of full-stack experience is a rather low figure in today's world.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The same high-earners list doesn't look as impressive on an annual basis, except maybe entry #3:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.upwork.com/freelancers/api/v1/freelancer/profile/~017778f12a2565f8f4/details"&gt;$185,288&lt;/a&gt; / 5 years&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.upwork.com/freelancers/api/v1/freelancer/profile/~0147f8ce8730c3d633/details"&gt;$210,023&lt;/a&gt; / 12 years&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.upwork.com/freelancers/api/v1/freelancer/profile/~01f24fb7d3fa638cfa/details"&gt;$277,418&lt;/a&gt; / 2 years&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.upwork.com/freelancers/api/v1/freelancer/profile/~010ba56ab4bc5aba48/details"&gt;$281,584&lt;/a&gt; / 12 years&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.upwork.com/freelancers/api/v1/freelancer/profile/~0144b974ba8a3d287f/details"&gt;$295,363&lt;/a&gt; / 6 years&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.upwork.com/freelancers/api/v1/freelancer/profile/~010f4e6ae0c1778aae/details"&gt;$425,345&lt;/a&gt; / 11 years&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.upwork.com/freelancers/api/v1/freelancer/profile/~01aa1b7467b4eb49bc/details"&gt;$673,153&lt;/a&gt; / 12 years&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.upwork.com/freelancers/api/v1/freelancer/profile/~01364b7feb73f1d7ae/details"&gt;$921,241&lt;/a&gt; / 9 years&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.upwork.com/freelancers/api/v1/freelancer/profile/~01d95397aacaef6e88/details"&gt;$1,000,000&lt;/a&gt; / 10 years &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the end, UpWork is no better or worse than any other career path. It does a good job of putting you in front of employers. If you are good and want to be poached, you most likely will be, &lt;a href="https://www.upwork.com/legal#OPTINGOUT"&gt;despite what the Terms and Conditions&lt;/a&gt; say.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#hey-are-you-open-to-offers-of-better-employment-or-more-contract-work"&gt;
  &lt;/a&gt;
  Hey, are you open to offers of better employment or more contract work?
&lt;/h2&gt;

&lt;p&gt;I am building a &lt;a href="https://stackmuncher.com"&gt;software engineer search engine&lt;/a&gt; for devs like you and me to be discovered by employers looking for our skills. It is a community-first and fully open-source project that takes no commission or charges placement fees. Head to &lt;a href="https://stackmuncher.com/about/developers/"&gt;https://stackmuncher.com/about/developers/&lt;/a&gt; and let interesting and well-paid work find you &lt;/p&gt;

</description>
      <category>career</category>
      <category>beginners</category>
      <category>freelance</category>
    </item>
    <item>
      <title>Understanding docker - playing with ruby containers</title>
      <author>Ana Nunes da Silva</author>
      <pubDate>Thu, 16 Sep 2021 19:49:35 +0000</pubDate>
      <link>https://dev.to/anakbns/understanding-docker-playing-with-ruby-containers-4gle</link>
      <guid>https://dev.to/anakbns/understanding-docker-playing-with-ruby-containers-4gle</guid>
      <description>&lt;h3&gt;
  &lt;a href="#understanding-the-basics-of-docker-and-docker-commands-is-the-first-step-into-app-containerization"&gt;
  &lt;/a&gt;
  Understanding the basics of docker and docker commands is the first step into app containerization.
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Docker&lt;/code&gt;, &lt;code&gt;Dockerfile&lt;/code&gt;, &lt;code&gt;docker-compose&lt;/code&gt;... When you first get into the docker world it can be a bit daunting to understand how all of these tools work and relate to each other. &lt;/p&gt;

&lt;p&gt;In this post, I'll be playing around with a simple ruby container just using docker commands. No &lt;code&gt;Dockerfile&lt;/code&gt; nor &lt;code&gt;docker-compose&lt;/code&gt; for now. Just the basic docker commands. &lt;/p&gt;

&lt;p&gt;It sure helped me really grasp the basic concepts behind images and containers in isolation before moving into more complex concepts.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#images-vs-containers"&gt;
  &lt;/a&gt;
  Images vs Containers
&lt;/h1&gt;

&lt;p&gt;In docker, it all begins with an image. The image sets the minimum base for a container to run. An image is an immutable file that will serve as a snapshot for the container, and the container will be the actual process on which you can work. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It might help to look at it with a programming mindset - think of an image as a class and the container as an instance of that class. A container is an instance of an image.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For the purpose of this exercise, I want to run a simple ruby sandbox with &lt;code&gt;irb&lt;/code&gt;. This sandbox will be available in a container but for this container to run I'll need its snapshot - the ruby image. &lt;/p&gt;

&lt;p&gt;Luckily, we don't have to build the ruby image ourselves. There are plenty of ready-made images available on &lt;a href="https://hub.docker.com/"&gt;Docker hub&lt;/a&gt; that you can use. If you search for &lt;code&gt;ruby&lt;/code&gt; you'll find the official ruby image in different versions. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-raw-docker-run-endraw-command"&gt;
  &lt;/a&gt;
  The &lt;code&gt;docker run&lt;/code&gt; command
&lt;/h1&gt;

&lt;p&gt;The command that starts a container process from an image is &lt;code&gt;docker run&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's understand how the command works by starting a ruby container. &lt;/p&gt;

&lt;p&gt;If you run &lt;code&gt;docker run ruby&lt;/code&gt; for the first time, it will first fetch the ruby image in its latest version from the docker hub and download it into your local docker. &lt;/p&gt;

&lt;p&gt;You'll get an output similar to this one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Unable to find image &lt;span class="s1"&gt;'ruby:latest'&lt;/span&gt; locally
latest: Pulling from library/ruby
4c25b3090c26: Pull &lt;span class="nb"&gt;complete 
&lt;/span&gt;1acf565088aa: Pull &lt;span class="nb"&gt;complete 
&lt;/span&gt;b95c0dd0dc0d: Pull &lt;span class="nb"&gt;complete 
&lt;/span&gt;5cf06daf6561: Pull &lt;span class="nb"&gt;complete 
&lt;/span&gt;942374d5c114: Pull &lt;span class="nb"&gt;complete 
&lt;/span&gt;420c5b579440: Pull &lt;span class="nb"&gt;complete 
&lt;/span&gt;cdfe7730cd5c: Pull &lt;span class="nb"&gt;complete 
&lt;/span&gt;bfeceb400e58: Pull &lt;span class="nb"&gt;complete 
&lt;/span&gt;Digest: sha256:8849efdb1f006c5d7b26980f3aeb15f00fa2b5428cfbef8761aef5fc87491b89
Status: Downloaded newer image &lt;span class="k"&gt;for &lt;/span&gt;ruby:3.0.2
Switch to inspect mode.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ok, it looks like nothing happened yet but it does say that it downloaded the ruby image successfully. How can I confirm that? &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-raw-docker-images-endraw-command"&gt;
  &lt;/a&gt;
  The &lt;code&gt;docker images&lt;/code&gt; command
&lt;/h1&gt;

&lt;p&gt;If you run &lt;code&gt;docker images&lt;/code&gt; you will see that you'll have the ruby with the &lt;code&gt;latest&lt;/code&gt; tag available for you. You should see something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;REPOSITORY     TAG       IMAGE ID       CREATED        SIZE
ruby           latest    b28f54b6ce55   3 days ago    881MB
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that the created timestamp you see in the docker images list is the date that the image was added to the docker library and not the date of the download to your local docker. &lt;/p&gt;

&lt;p&gt;Going back to our command, it should have also started a container based on this image but where is it?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-raw-docker-ps-endraw-command"&gt;
  &lt;/a&gt;
  The &lt;code&gt;docker ps&lt;/code&gt; command
&lt;/h1&gt;

&lt;p&gt;Run &lt;code&gt;docker ps&lt;/code&gt; to list all the running containers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The list is empty. Why? The run command should have started a new container process.&lt;/p&gt;

&lt;p&gt;If you run &lt;code&gt;docker ps -a&lt;/code&gt; where &lt;code&gt;-a&lt;/code&gt; is the flag to show all containers (running and exited), your container will be there.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;CONTAINER ID   IMAGE                    COMMAND                  CREATED          STATUS                        PORTS     NAMES                
948b3179783a   ruby:latest              &lt;span class="s2"&gt;"irb"&lt;/span&gt;                    10 seconds ago   Exited &lt;span class="o"&gt;(&lt;/span&gt;0&lt;span class="o"&gt;)&lt;/span&gt; 5 seconds ago                eager_snyder  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Look at the Status column. It reads &lt;code&gt;Exited (0) 5 seconds ago&lt;/code&gt;. But why was this container exited? &lt;/p&gt;

&lt;p&gt;You may not have noticed, amongst the printed download messages, but there was an error message at the end. Let's see that message again by re-running the docker run command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;-&amp;gt; docker run ruby
Switch to inspect mode.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is because the ruby image by default sends &lt;code&gt;irb&lt;/code&gt; as a command to the container. Once the container process is opened the &lt;code&gt;irb&lt;/code&gt; command should run. But the container cannot run &lt;code&gt;irb&lt;/code&gt; unless we tell it to run in the interactive terminal mode. &lt;/p&gt;

&lt;p&gt;In summary: the process was opened, the container ran &lt;code&gt;irb&lt;/code&gt;, got the error message, the process was closed right after it, exiting the container with it.  &lt;/p&gt;

&lt;p&gt;We can run any command with the interactive terminal mode using the &lt;code&gt;-it&lt;/code&gt; flag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;-&amp;gt; docker run &lt;span class="nt"&gt;-it&lt;/span&gt; ruby
irb&lt;span class="o"&gt;(&lt;/span&gt;main&lt;span class="o"&gt;)&lt;/span&gt;:001:0&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yeah, our sandbox is running!  🎉&lt;/p&gt;

&lt;p&gt;Go ahead and play with ruby a bit.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;irb&lt;span class="o"&gt;(&lt;/span&gt;main&lt;span class="o"&gt;)&lt;/span&gt;:001:0&amp;gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'hello'&lt;/span&gt;, &lt;span class="s1"&gt;'world'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;.join&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;', '&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;.capitalize
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"Hello, world"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Before you exit &lt;code&gt;irb&lt;/code&gt;,  open another terminal window and run &lt;code&gt;docker ps&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;CONTAINER ID   IMAGE         COMMAND   CREATED         STATUS         PORTS     NAMES
2ef882ad2b5b   ruby:latest   &lt;span class="s2"&gt;"irb"&lt;/span&gt;     4 minutes ago   Up 4 minutes             elated_satoshi
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There it is! We have a running container! &lt;/p&gt;

&lt;p&gt;Now exit &lt;code&gt;irb&lt;/code&gt; and run &lt;code&gt;docker ps&lt;/code&gt; again. It's empty. If you run &lt;code&gt;docker ps -a&lt;/code&gt; you should see your container there. It has an exited status again.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;CONTAINER ID   IMAGE                    COMMAND                  CREATED          STATUS                      PORTS     NAMES
2ef882ad2b5b   ruby:latest              &lt;span class="s2"&gt;"irb"&lt;/span&gt;                    6 minutes ago    Exited &lt;span class="o"&gt;(&lt;/span&gt;0&lt;span class="o"&gt;)&lt;/span&gt; 47 seconds ago             elated_satoshi
948b3179783a   ruby:latest              &lt;span class="s2"&gt;"irb"&lt;/span&gt;                    15 minutes ago   Exited &lt;span class="o"&gt;(&lt;/span&gt;0&lt;span class="o"&gt;)&lt;/span&gt; 15 minutes ago             eager_snyder
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We've just learned another essential aspect of containers. &lt;strong&gt;The container has one main process. If that process stops, the container stops.&lt;/strong&gt; When we left &lt;code&gt;irb&lt;/code&gt;, the process stopped and the container was exited. &lt;/p&gt;

&lt;p&gt;Note also that we have two stopped containers. The first container with the random name &lt;code&gt;elated_satoshi&lt;/code&gt; is the one we've just opened and closed after playing with &lt;code&gt;irb&lt;/code&gt;, and the last one &lt;code&gt;eager_snyder&lt;/code&gt; is the container that was created when we ran the command without the interactive terminal flag. &lt;/p&gt;

&lt;p&gt;So, &lt;strong&gt;every time you run the ruby image, you're creating a different container.&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#passing-other-commands-to-the-container"&gt;
  &lt;/a&gt;
  Passing other commands to the container
&lt;/h1&gt;

&lt;p&gt;We've seen that running &lt;code&gt;docker run -it ruby&lt;/code&gt; is the same as running  &lt;code&gt;docker -it ruby irb&lt;/code&gt;. We omit it because that's the default for ruby, but we can pass other commands for the container to run once it's opened. &lt;/p&gt;

&lt;p&gt;For instance, if we run &lt;code&gt;docker run -it ruby bash&lt;/code&gt; we will create an interactive bash shell in the container.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker run &lt;span class="nt"&gt;-it&lt;/span&gt; ruby bash
root@b1c73a63eef9:/# &lt;span class="nb"&gt;ls
&lt;/span&gt;bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var
root@b1c73a63eef9:/# ruby &lt;span class="nt"&gt;-v&lt;/span&gt;
ruby 3.0.2p107 &lt;span class="o"&gt;(&lt;/span&gt;2021-07-07 revision 0db68f0233&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;x86_64-linux]
root@b1c73a63eef9:/# 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#stopping-and-removing-containers"&gt;
  &lt;/a&gt;
  Stopping and removing containers
&lt;/h1&gt;

&lt;p&gt;As we saw earlier, every time you run the &lt;code&gt;docker run&lt;/code&gt; command a new container will be created. This means that with time you'll get a big list of stopped containers: &lt;/p&gt;

&lt;p&gt;If you'd like to remove stopped containers, you can just run &lt;code&gt;docker rm &amp;lt;container id&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If the container is still running you might have to use the &lt;code&gt;stop&lt;/code&gt; or &lt;code&gt;kill&lt;/code&gt; command before removing it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker stop &amp;lt;container &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
docker &lt;span class="nb"&gt;rm&lt;/span&gt; &amp;lt;container &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you'd like to avoid exited containers to be kept after the process is closed there's a useful flag you can use with &lt;code&gt;docker run&lt;/code&gt;, the &lt;code&gt;-rm&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker run &lt;span class="nt"&gt;-rm&lt;/span&gt; &lt;span class="nt"&gt;-ti&lt;/span&gt; ruby
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#keeping-container-processes-open"&gt;
  &lt;/a&gt;
  Keeping container processes open
&lt;/h1&gt;

&lt;p&gt;Remember that every time we left &lt;code&gt;irb&lt;/code&gt; or &lt;code&gt;bash&lt;/code&gt; in the previous exercises, we closed the process and the container. &lt;/p&gt;

&lt;p&gt;But there's a way you can exit yourself from the process without closing it. If you use &lt;code&gt;ctrl+p&lt;/code&gt; + &lt;code&gt;ctrl+q&lt;/code&gt;, you will no longer see the process but it will still be running in the background. If you run &lt;code&gt;docker ps -l&lt;/code&gt;, where the &lt;code&gt;-l&lt;/code&gt; flag will get the latest container, you'll see your container there. &lt;/p&gt;

&lt;p&gt;If you want to start a new container in the detached mode you can pass the detach flag, &lt;code&gt;-d&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;-&amp;gt; docker run &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="nt"&gt;-ti&lt;/span&gt; ruby
e68f13762ee83ea315b3d0a679432dd1963f276deb387aa3bdce9b4801f21979
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It prints out the &lt;code&gt;container id&lt;/code&gt; for you, but again, you can also confirm that there's a new process running with &lt;code&gt;docker ps&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;CONTAINER ID   IMAGE        COMMAND   CREATED         STATUS         PORTS     NAMES
e68f13762ee8   ruby:latest  &lt;span class="s2"&gt;"irb"&lt;/span&gt;     4 seconds ago   Up 3 seconds             crazy_varahamihira
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to jump in the process again, you can run the &lt;code&gt;docker attach &amp;lt;container id&amp;gt;&lt;/code&gt; command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;-&amp;gt; docker attach e68f13762ee8
irb&lt;span class="o"&gt;(&lt;/span&gt;main&lt;span class="o"&gt;)&lt;/span&gt;:001:0&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also add a new process to the same container, with the &lt;code&gt;exec&lt;/code&gt; command. Imagine you have &lt;code&gt;irb&lt;/code&gt; running in the background but you want to jump in the bash:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker &lt;span class="nb"&gt;exec&lt;/span&gt; &lt;span class="nt"&gt;-it&lt;/span&gt; e68f13762ee8 bash
root@e68f13762ee8:/#
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#naming-containers"&gt;
  &lt;/a&gt;
  Naming containers
&lt;/h1&gt;

&lt;p&gt;As we noticed earlier, a container has a name but if you don't give it one, a random one will be assigned to it. &lt;/p&gt;

&lt;p&gt;If you want to give it a name, you can pass it in a &lt;code&gt;--name&lt;/code&gt; flag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker run &lt;span class="nt"&gt;--name&lt;/span&gt; ruby-sandbox &lt;span class="nt"&gt;-ti&lt;/span&gt; ruby&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now run &lt;code&gt;docker ps&lt;/code&gt; to make sure there's a container with that name:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;CONTAINER ID   IMAGE                    COMMAND                  CREATED          STATUS                   PORTS     NAMES                
aee3cd98a190   ruby:latest              &lt;span class="s2"&gt;"irb"&lt;/span&gt;                    10 seconds ago   Up 9 seconds                       ruby-sandbox  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#first-master-the-fundamentals"&gt;
  &lt;/a&gt;
  First master the fundamentals!
&lt;/h1&gt;

&lt;p&gt;A lot of commands were covered in this article but I believe that there is only a handful of fundamental concepts in docker. The goal of this article was to share a bit of the process and exercises I've gone through to understand what docker really is. It's a compilation of stuff I was first taught by my colleague &lt;a href="https://leandronsp.com/"&gt;Leandro&lt;/a&gt; (he has great content on this topic, go check him out) and that I also got from basic docker courses. Have fun! 🐳&lt;/p&gt;

</description>
      <category>docker</category>
      <category>ruby</category>
    </item>
    <item>
      <title>Sass Crash Course in a Book</title>
      <author>Programming with Shahan</author>
      <pubDate>Thu, 16 Sep 2021 19:43:13 +0000</pubDate>
      <link>https://dev.to/codewithshahan/sass-crash-course-in-a-book-3kg2</link>
      <guid>https://dev.to/codewithshahan/sass-crash-course-in-a-book-3kg2</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-sass"&gt;
  &lt;/a&gt;
  🤷‍♀️What is Sass
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Sass (which stands for Syntactically Awesome Style Sheets) is an extension of CSS that enables you to use things like variables, nested rules, inline imports, and more. It also helps to keep things organized and allows you to create style sheets faster. The benefit of using Sass is that sass is compatible with all versions of CSS.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Before continue, I encourage you to read this full article and then watch my sass crash course video which is only 15 minutes. This way your  Sass memory will remain much longer than usual.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--abp_T4br--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6s8wyvwxl2sgjjb6uzc0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--abp_T4br--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6s8wyvwxl2sgjjb6uzc0.png" alt="Sass course in a book by shahan"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#01-store-data-with-sass-variables"&gt;
  &lt;/a&gt;
  01. 📦Store Data with Sass Variables
&lt;/h2&gt;

&lt;p&gt;One feature of &lt;strong&gt;Sass&lt;/strong&gt; that's different than &lt;strong&gt;CSS&lt;/strong&gt; is it uses &lt;strong&gt;variables&lt;/strong&gt;. They can be declared and set to &lt;em&gt;store data&lt;/em&gt; as &lt;strong&gt;variables&lt;/strong&gt; similar to &lt;strong&gt;JavaScript.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In JavaScript, variables are declared using &lt;strong&gt;let&lt;/strong&gt; and &lt;strong&gt;const&lt;/strong&gt; &lt;em&gt;keywords.&lt;/em&gt; In &lt;strong&gt;Sass&lt;/strong&gt;, variables start with a &lt;strong&gt;$&lt;/strong&gt; followed by the &lt;strong&gt;&lt;em&gt;variable name&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#here-is-a-real-example"&gt;
  &lt;/a&gt;
  Here is a real example🔻
&lt;/h3&gt;

&lt;p&gt;Let's say we need to use the success color '&lt;strong&gt;green&lt;/strong&gt;' in different places without repeating its name. So, we need to write code like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nv"&gt;$success-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;green&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we use this global variable in different places like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sass"&gt;&lt;code&gt;&lt;span class="nc"&gt;.success&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$sucess-color&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;h3&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$success-color&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One example where variables are useful is when a number of elements need to be the same color. If that color is changed, the only place to edit the code is the variable value👌.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#02-nest-css-with-sass"&gt;
  &lt;/a&gt;
  02. 🤏Nest CSS with Sass
&lt;/h2&gt;

&lt;p&gt;Sass will let you &lt;strong&gt;nest&lt;/strong&gt; your &lt;strong&gt;CSS selectors&lt;/strong&gt; in a way that follows the same visual hierarchy of your &lt;strong&gt;HTML&lt;/strong&gt; which is a useful way of organizing a style sheet.&lt;/p&gt;

&lt;p&gt;Normally, each element is targeted on a different line to style it, like so👇&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Without Nesting:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sass"&gt;&lt;code&gt;&lt;span class="nt"&gt;footer&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#000&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;footer&lt;/span&gt; &lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;list-style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;footer&lt;/span&gt; &lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;After Nesting:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sass"&gt;&lt;code&gt;&lt;span class="nt"&gt;footer&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#000&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;

  &lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;list-style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;

   &lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
   &lt;span class="err"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is where nesting can help organize your code by placing &lt;strong&gt;&lt;em&gt;child style rules&lt;/em&gt;&lt;/strong&gt; within the respective &lt;strong&gt;parent elements&lt;/strong&gt;:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#03-create-reusable-css-with-mixins"&gt;
  &lt;/a&gt;
  03. 🧣Create Reusable CSS with Mixins
&lt;/h2&gt;

&lt;p&gt;In &lt;strong&gt;Sass&lt;/strong&gt;, a &lt;strong&gt;&lt;em&gt;mixin&lt;/em&gt;&lt;/strong&gt; is a &lt;em&gt;group of CSS declarations&lt;/em&gt;. So we can &lt;strong&gt;reuse&lt;/strong&gt; them in our &lt;em&gt;style sheet.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As you know newer CSS features take time before they are fully compatible with all browsers. As features are adopted to browsers, &lt;strong&gt;CSS&lt;/strong&gt; rules using them may need &lt;strong&gt;vendor prefixes&lt;/strong&gt;. As an example b*&lt;em&gt;ox-shadow&lt;/em&gt;* &lt;em&gt;property&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Without Mixins:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sass"&gt;&lt;code&gt;&lt;span class="nc"&gt;.card&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;-webkit-box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt; &lt;span class="mh"&gt;#fff&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
  &lt;span class="na"&gt;-moz-box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt; &lt;span class="mh"&gt;#fff&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
  &lt;span class="na"&gt;-ms-box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt; &lt;span class="mh"&gt;#fff&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
   &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt; &lt;span class="mh"&gt;#fff&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Imagine, we have different types of cards on our website with different effects of box-shadow. It's a lot of typing to re-write this rule to support all browsers.&lt;/p&gt;

&lt;p&gt;This is where Mixins come in. Mixins are like JavaScript &lt;strong&gt;functions&lt;/strong&gt; for &lt;strong&gt;CSS&lt;/strong&gt;. Here is how to write one:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;With Mixins:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sass"&gt;&lt;code&gt;&lt;span class="k"&gt;@mixin&lt;/span&gt; &lt;span class="nf"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$y&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$blur&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;-webkit-box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$x&lt;/span&gt; &lt;span class="nv"&gt;$y&lt;/span&gt; &lt;span class="nv"&gt;$blur&lt;/span&gt; &lt;span class="nv"&gt;$c&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
  &lt;span class="na"&gt;-moz-box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$x&lt;/span&gt; &lt;span class="nv"&gt;$y&lt;/span&gt; &lt;span class="nv"&gt;$blur&lt;/span&gt; &lt;span class="nv"&gt;$c&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
  &lt;span class="na"&gt;-ms-box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$x&lt;/span&gt; &lt;span class="nv"&gt;$y&lt;/span&gt; &lt;span class="nv"&gt;$blur&lt;/span&gt; &lt;span class="nv"&gt;$c&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
   &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$x&lt;/span&gt; &lt;span class="nv"&gt;$y&lt;/span&gt; &lt;span class="nv"&gt;$blur&lt;/span&gt; &lt;span class="nv"&gt;$c&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The definition starts with @mixin followed by a &lt;strong&gt;&lt;em&gt;custom name&lt;/em&gt;&lt;/strong&gt;. The parameters (the &lt;strong&gt;&lt;em&gt;$x, $y, $blur&lt;/em&gt;&lt;/strong&gt;, and &lt;strong&gt;&lt;em&gt;$c&lt;/em&gt;&lt;/strong&gt; in the example above) are optional. Now any time a &lt;strong&gt;box-shadow&lt;/strong&gt; rule is needed, only a single line calling the mixin replaces having to type all the &lt;em&gt;vendor prefixes&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;We need to &lt;strong&gt;call @mixin&lt;/strong&gt; with the &lt;strong&gt;&lt;a class="mentioned-user" href="https://dev.to/include"&gt;@include&lt;/a&gt;
&lt;/strong&gt; directive. Have a look👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sass"&gt;&lt;code&gt;&lt;span class="nc"&gt;.card&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;@include&lt;/span&gt; &lt;span class="nd"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0px&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.popup-card&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;@include&lt;/span&gt; &lt;span class="nd"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2px&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#04-use-if-and-else-to-add-logic-to-your-styles"&gt;
  &lt;/a&gt;
  04. 🔍Use @if and &lt;a class="mentioned-user" href="https://dev.to/else"&gt;@else&lt;/a&gt;
 to Add Logic To Your Styles
&lt;/h2&gt;

&lt;p&gt;In Sass, @if &lt;a class="mentioned-user" href="https://dev.to/else"&gt;@else&lt;/a&gt;
 statement is similar to JavaScript. It is very useful in Sass when we search for a specific condition before applying any styles. like so,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sass"&gt;&lt;code&gt;&lt;span class="k"&gt;@mixin&lt;/span&gt; &lt;span class="nf"&gt;text-color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;@if&lt;/span&gt; &lt;span class="nv"&gt;$val&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;danger&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
  &lt;span class="err"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;@else&lt;/span&gt; &lt;span class="n"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;$val&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;success&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;green&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
  &lt;span class="err"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;@else&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
  &lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then this is how we need to apply this mixin in different places:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sass"&gt;&lt;code&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;@include&lt;/span&gt; &lt;span class="nd"&gt;text-color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;danger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;We&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;additional&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.sucess-text&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;@include&lt;/span&gt; &lt;span class="nd"&gt;text-color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;success&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bold&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;We&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;additional&lt;/span&gt; &lt;span class="n"&gt;CSS&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#05-sass-loop"&gt;
  &lt;/a&gt;
  05. ➰Sass @Loop
&lt;/h2&gt;

&lt;p&gt;Sass has several loop options, much like other programming languages. They include the &lt;strong&gt;&lt;em&gt;@for loop, @each loop, and @while loop&lt;/em&gt;&lt;/strong&gt;. These loops are an incredibly powerful tool for generating &lt;strong&gt;CSS&lt;/strong&gt; code because you can defer code generation into an &lt;strong&gt;&lt;em&gt;iterable&lt;/em&gt;&lt;/strong&gt; task.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%E2%99%BEuse-for-to-create-a-sass-loop"&gt;
  &lt;/a&gt;
  ♾Use @for to Create a Sass Loop:
&lt;/h3&gt;

&lt;p&gt;In &lt;strong&gt;Sass&lt;/strong&gt;, @for is used in two ways: "&lt;strong&gt;&lt;em&gt;start through end&lt;/em&gt;&lt;/strong&gt;" or "&lt;strong&gt;&lt;em&gt;start to end&lt;/em&gt;&lt;/strong&gt;". The main difference between these two methods is that the &lt;strong&gt;"start to end"&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;excludes&lt;/em&gt;&lt;/strong&gt; the &lt;em&gt;end&lt;/em&gt; numbers as part of the &lt;em&gt;count&lt;/em&gt;, and &lt;strong&gt;"start through end"&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;includes&lt;/em&gt;&lt;/strong&gt; the &lt;em&gt;end&lt;/em&gt; number as part of the &lt;em&gt;count&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Here is a **start through end&lt;/em&gt;* example:🔻*&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sass"&gt;&lt;code&gt;&lt;span class="k"&gt;@for&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="ow"&gt;from&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;through&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;text-&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="err"&gt; { &lt;/span&gt;&lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt; &lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;strong&gt;&lt;em&gt;#{$i}&lt;/em&gt;&lt;/strong&gt; part is the syntax to combine a variable ( &lt;strong&gt;&lt;em&gt;i&lt;/em&gt;&lt;/strong&gt; ) with text to make a &lt;strong&gt;string&lt;/strong&gt;. So, when this Sass file is &lt;strong&gt;converted&lt;/strong&gt; to &lt;strong&gt;CSS&lt;/strong&gt;, it will looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sass"&gt;&lt;code&gt;&lt;span class="nc"&gt;.text-1&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.text-2&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.text-3&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.text-4&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.text-5&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is why @for is a powerful way to create a very long &lt;strong&gt;grid&lt;/strong&gt; layout or any &lt;strong&gt;HTML&lt;/strong&gt; elements with just one line of code. Now you have 5 different text sizes for your website available as &lt;strong&gt;CSS classes&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;"start to end"&lt;/strong&gt; is the same as &lt;strong&gt;"start through end"&lt;/strong&gt;. Just remember &lt;strong&gt;"start to end"&lt;/strong&gt; &lt;em&gt;excludes&lt;/em&gt; the end number as part of the &lt;em&gt;count&lt;/em&gt;, like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sass"&gt;&lt;code&gt;&lt;span class="k"&gt;@for&lt;/span&gt; &lt;span class="nv"&gt;$j&lt;/span&gt; &lt;span class="ow"&gt;from&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;to&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;text-&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nv"&gt;$j&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="err"&gt; {&lt;/span&gt;&lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;$j&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//The result will look like this:&lt;/span&gt;
&lt;span class="nc"&gt;.text-1&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.text-2&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.text-3&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.text-4&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.text-5&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;Here you can see the last count (6) is not included in this loop.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-each-to-map-over-items-in-a-list"&gt;
  &lt;/a&gt;
  🏹Use @each to Map Over Items in a List
&lt;/h3&gt;

&lt;p&gt;The &lt;strong&gt;@each&lt;/strong&gt; rule makes it easy to emit styles or evaluate code for each element of a list or each pair in a map. Once each iteration, the variable gets assigned to the &lt;strong&gt;current value&lt;/strong&gt; from the &lt;strong&gt;list or map.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Have a look without map:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sass"&gt;&lt;code&gt;&lt;span class="k"&gt;@each&lt;/span&gt; &lt;span class="nv"&gt;$color&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="no"&gt;green&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="no"&gt;yellow&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nv"&gt;$color&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="na"&gt;-text&lt;/span&gt;&lt;span class="err"&gt; {&lt;/span&gt;&lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$color&lt;/span&gt;&lt;span class="err"&gt;;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Have a look with Map:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sass"&gt;&lt;code&gt;&lt;span class="nv"&gt;$colors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;color1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="no"&gt;green&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color3&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="no"&gt;yellow&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;@each&lt;/span&gt; &lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$color&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;$colors&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nv"&gt;$color&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="na"&gt;-text&lt;/span&gt;&lt;span class="err"&gt; {&lt;/span&gt;&lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$color&lt;/span&gt;&lt;span class="err"&gt;;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see, the map has slightly different syntax just like JavaScript. So, here the &lt;strong&gt;$key&lt;/strong&gt; variable is needed to reference the keys in the map. If you don't supply &lt;strong&gt;$key&lt;/strong&gt;, the compiled CSS would have color1, color2... and will never touch the actual value.&lt;/p&gt;

&lt;p&gt;Both of the above code examples are converted into the following CSS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sass"&gt;&lt;code&gt;&lt;span class="nc"&gt;.red-text&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.green-text&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;green&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.yellow-text&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;yellow&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#use-while-until-a-condition-is-met-to-apply-a-style"&gt;
  &lt;/a&gt;
  🔐Use @while Until a Condition is Met to Apply a Style:
&lt;/h3&gt;

&lt;p&gt;In &lt;strong&gt;Sass&lt;/strong&gt;, there is no difference with the &lt;strong&gt;@while&lt;/strong&gt; directive compare to JavaScript. It creates &lt;strong&gt;CSS rules until a condition is met&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Earlier, we use the &lt;strong&gt;@for&lt;/strong&gt; directive to create repeated tasks without duplication. It can be done with &lt;strong&gt;@while.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Have a look:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sass"&gt;&lt;code&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@while&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;text-&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="err"&gt; { &lt;/span&gt;&lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="err"&gt;;}&lt;/span&gt;
   &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, first, we take a variable and set it to 1. Next, we check the condition with the &lt;strong&gt;@while&lt;/strong&gt; directive to create different sizes of text while $i is less than 6.  Make sure to &lt;strong&gt;increment&lt;/strong&gt; $i by &lt;strong&gt;1&lt;/strong&gt; to avoid an infinite loop &lt;strong&gt;after setting the CSS rule&lt;/strong&gt;.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#06-%F0%9F%97%B3use-partial-to-split-your-styles-into-smaller-chunks"&gt;
  &lt;/a&gt;
  06. 🗳Use _Partial to Split Your Styles into Smaller Chunks
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;A partial is a Sass file named with a leading underscore, i.e: _partial. scss . The underscore lets Sass know that the specific file is partial and will not be generated into a CSS file. Sass partials are meant to be used with the @import directive. This is a great way to group similar code into a module to it organized.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For example, if all your text color is saved in a separate sass file called "&lt;strong&gt;_textColor.scss&lt;/strong&gt;", and you want them in the &lt;strong&gt;main.scss&lt;/strong&gt; module, this is how to use them in the main Sass file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sass"&gt;&lt;code&gt;&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s"&gt;'textColor'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; that you don't need to specify the underscore and file extension in the import statement. Because Sass understands it is a partial. Once a partial is imported into a file, all text color, mixins, and other bunch of code are available to use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#07-extends-one-set-of-css-styles-to-another-element"&gt;
  &lt;/a&gt;
  07. 💱Extends One Set of CSS Styles to Another Element
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;@extend is a feature of Sass that allows classes to share a set of properties with one another.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;For example, the below block of CSS rules style .card class. it has some properties like background color, width, height.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sass"&gt;&lt;code&gt;&lt;span class="nc"&gt;.card&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#fff&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;150px&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt; 
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you want another card called &lt;strong&gt;".popup-card&lt;/strong&gt;". It has the same properties just like the base &lt;strong&gt;".card"&lt;/strong&gt; class. But we need additional property in the &lt;strong&gt;popup card&lt;/strong&gt;. It is possible to &lt;em&gt;copy&lt;/em&gt; and &lt;em&gt;paste&lt;/em&gt; from the base card to the target class. But there is a much better way to do it with the &lt;strong&gt;@extend&lt;/strong&gt; directive.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Have a look:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sass"&gt;&lt;code&gt;&lt;span class="nc"&gt;.popup-card&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;@extend&lt;/span&gt; &lt;span class="nc"&gt;.card&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#349db&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, we can &lt;strong&gt;&lt;em&gt;overwrite&lt;/em&gt;&lt;/strong&gt; styles in the &lt;strong&gt;base&lt;/strong&gt; class to the &lt;strong&gt;target&lt;/strong&gt; class by &lt;strong&gt;&lt;em&gt;reassigning&lt;/em&gt;&lt;/strong&gt; the values. Otherwise, we will have the same properties as base &lt;strong&gt;".card"&lt;/strong&gt; as well as our &lt;strong&gt;&lt;em&gt;additional styles&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#sass-crash-course-in-a-book-in-15-minutes"&gt;
  &lt;/a&gt;
  Sass Crash Course In a Book in 15 Minutes:
&lt;/h1&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/kE0T7WFIR7k"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you like my article and explanation video, make sure to subscribe my &lt;a href="https://www.youtube.com/c/ProgrammingwithShahan/videos"&gt;YouTube channel&lt;/a&gt; to help me make more content like this. &lt;/p&gt;

&lt;p&gt;Feel free to leave a comment and follow me on:&lt;br&gt;
&lt;a href="https://twitter.com/codewithshahan"&gt;Twitter 🦅&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.instagram.com/codewithshahan/"&gt;Insta 📷&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>javascript</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>How to improve the performance of a machine learning (ML) model</title>
      <author>Mage</author>
      <pubDate>Thu, 16 Sep 2021 19:21:07 +0000</pubDate>
      <link>https://dev.to/mage_ai/how-to-improve-the-performance-of-a-machine-learning-ml-model-2a1j</link>
      <guid>https://dev.to/mage_ai/how-to-improve-the-performance-of-a-machine-learning-ml-model-2a1j</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TLDR
&lt;/h2&gt;

&lt;p&gt;Without good performance, machine learning (ML) models won’t provide much value in real life. We’ll introduce some common strategies to improve model performance including selecting the best algorithm, tuning model settings, and adding new features (aka feature engineering).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#outline"&gt;
  &lt;/a&gt;
  Outline
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Introduction&lt;/li&gt;
&lt;li&gt;Is the model good or bad?&lt;/li&gt;
&lt;li&gt;Strategies for improving the model&lt;/li&gt;
&lt;li&gt;When to stop improving the model&lt;/li&gt;
&lt;li&gt;Conclusion&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;With the right developer education (e.g. &lt;a href="https://api.slack.com/messaging/webhooks"&gt;Building your first machine learning model&lt;/a&gt;, it’s easy to start training machine learning models. However, it’s difficult to get great results on the first try that meets your product goals. After training the model, it can take a long time to tune the model and improve performance (we’ll use tuning model and improving model performance interchangeably in this article). Different types of models have different tuning strategies. In this article, we’ll introduce common strategies for model tuning.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#is-the-model-good-or-bad"&gt;
  &lt;/a&gt;
  Is the model good or bad?
&lt;/h2&gt;

&lt;p&gt;Before tuning the model, we first need to know whether the model performance is good or bad. If you don’t know how to measure a model’s performance, you can check our previous blog articles: &lt;a href="https://www.mage.ai/blog/definitive-guide-to-accuracy-precision-recall-for-product-developers"&gt;The definitive guide to Accuracy, Precision, and Recall for product developers&lt;/a&gt; and &lt;a href="https://www.mage.ai/blog/product-developers-guide-to-ml-regression-model-metrics"&gt;A product developer’s guide to ML regression model metrics&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Each model has baseline metrics. As introduced in our previous &lt;a href="https://www.mage.ai/blog/definitive-guide-to-accuracy-precision-recall-for-product-developers"&gt;article&lt;/a&gt;, we can use “mode category” as the baseline metric for classification models. If your model’s performance is better than the baseline metric, then congratulations, your model isn’t bad and you’re off to a good start. If the model’s performance metrics are worse than the baseline metrics, it means the model doesn’t find valuable insights from the data. Then, there’ll be a lot to do in order to improve the performance.&lt;/p&gt;

&lt;p&gt;Another scenario is when the model performs “too good”, e.g. 99% precision and 99% recall. This isn’t a good sign and probably indicates some issues in your model. The possible reason is “data leakage”. We’ll talk about how to solve this problem in the “Remove data leakage features” section.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#strategies-for-improving-the-model"&gt;
  &lt;/a&gt;
  Strategies for improving the model
&lt;/h2&gt;

&lt;p&gt;Generally, there are 3 directions for model tuning: select a better algorithm, tune model parameters, and improve data.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#compare-multiple-algorithms"&gt;
  &lt;/a&gt;
  Compare multiple algorithms
&lt;/h3&gt;

&lt;p&gt;Comparing multiple algorithms is a straightforward idea to improve the model performance. Different algorithms are better suited for different types of datasets. We can train them all together and find the one with the best performance. For example, for classification models, we can try &lt;a href="https://en.wikipedia.org/wiki/Logistic_regression"&gt;Logistic Regression&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Support-vector_machine"&gt;Support Vector Machine&lt;/a&gt;, &lt;a href="https://xgboost.readthedocs.io/en/latest/"&gt;XGBoost&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Artificial_neural_network"&gt;Neural Network&lt;/a&gt;, etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AZc-ZDjB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jvf0jfqo3s8fknbhvkw8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AZc-ZDjB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jvf0jfqo3s8fknbhvkw8.png" alt="0_4CEJ3J6P0yQor8EK"&gt;&lt;/a&gt; &lt;em&gt;(Source: &lt;a href="https://scikit-learn.org/stable/tutorial/machine_learning_map/index.html"&gt;https://scikit-learn.org/stable/tutorial/machine_learning_map/index.html&lt;/a&gt;)&lt;/em&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hyperparameter-tuning"&gt;
  &lt;/a&gt;
  Hyperparameter tuning
&lt;/h3&gt;

&lt;p&gt;Hyperparameter tuning is a common approach to tune models. In machine learning models, there are some parameters chosen before the learning process starts, which are called hyperparameters. Some examples are the maximum depth allowed for &lt;a href="https://en.wikipedia.org/wiki/Decision_tree"&gt;decision tree&lt;/a&gt;, and the number of trees included in &lt;a href="https://en.wikipedia.org/wiki/Random_forest"&gt;random forest&lt;/a&gt;. Hyperparameters will influence the outcome of the learning process. Hyperparameter tuning is choosing the optimal set of parameters so that we can get optimal outcomes from the learning process.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cqgzPZ9c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/53gp7mry206ms2iz8rxo.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cqgzPZ9c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/53gp7mry206ms2iz8rxo.jpg" alt="0_C5QGL3maM_eBrSV-"&gt;&lt;/a&gt;&lt;em&gt;(Source: &lt;a href="https://image.slidesharecdn.com/sparkfornlp4x3-160521214311/95/data-by-the-bay-2016-may-17-2016-20-638.jpg?cb=1463867059%5D"&gt;Slideshare&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We recommend using publicly available libraries to help with hyperparameter tuning, e.g. &lt;a href="https://optuna.org/"&gt;optuna&lt;/a&gt;. We’ll have a separate article for hyperparameter tuning in the future.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#trade-precision-with-recall"&gt;
  &lt;/a&gt;
  Trade precision with recall
&lt;/h3&gt;

&lt;p&gt;For classification models, we usually measure the model performance with 2 metrics: precision and recall. Depending on the problem, you may want to optimize for either precision or recall. There’s a quick way to tune models to make a trade-off between the 2 metrics. Classification model predicts the probability of a label class. We can simply increase or decrease the probability threshold to get higher precision or recall.&lt;/p&gt;

&lt;p&gt;For example, if we build a model to predict whether a passenger survives in the Titanic disaster, the model can predict the probability of the passenger living or dying. If the probability is above 50%, the model will predict that the passenger will survive. Otherwise, the model will predict the passenger won’t survive. If we want a higher precision, we can increase the probability threshold. Then, the model will predict fewer passengers surviving but will be more precise. If we want to increase recall and cover more passengers that’ll possibly survive, we can decrease the probability threshold.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1Ft6NmgD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wo530do6cziws7z21dcx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1Ft6NmgD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wo530do6cziws7z21dcx.png" alt="0_tPxHSM4l8C5XFsRy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#feature-engineering"&gt;
  &lt;/a&gt;
  Feature engineering
&lt;/h3&gt;

&lt;p&gt;Besides selecting the best algorithm and tuning parameters, we can generate more features from existing data, which is called feature engineering.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#create-new-features"&gt;
  &lt;/a&gt;
  Create new features
&lt;/h4&gt;

&lt;p&gt;Creating new features requires some domain knowledge and creativity. Here are some examples of newly created features:&lt;/p&gt;

&lt;p&gt;Create a feature for counting the number of letters in the text.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a feature counting the number of words in a text.&lt;/li&gt;
&lt;li&gt;Create a feature that understands the meaning of the text (e.g. word embeddings).&lt;/li&gt;
&lt;li&gt;Aggregate user event count over the past 7 days, 30 days, or 90 days.&lt;/li&gt;
&lt;li&gt;Extract “day”, “month”, “year”, and “days since holiday” features from a date or timestamp feature.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#enrich-training-data-with-public-datasets"&gt;
  &lt;/a&gt;
  Enrich training data with public datasets
&lt;/h4&gt;

&lt;p&gt;When you exhaust your ideas of generating new features from existing datasets, another idea is to get features from public datasets. For example, you want to build a model to predict whether a user will convert to membership but you don’t have too much user information in your datasets. However, you find the dataset contains ‘email’ and ‘company’ columns. Then you can get user and company data from a third-party, including user location, user age, company size, etc. This data can be used to enrich your training data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OZQIhhlJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7efky34ogdmlfn72s2i0.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OZQIhhlJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7efky34ogdmlfn72s2i0.gif" alt="0_LkmNxIBycT9ApxcS"&gt;&lt;/a&gt;&lt;em&gt;Third-party, but I guess enriched data is worth celebrating. (Source: &lt;a href="https://c.tenor.com/_nFK_VtPnykAAAAC/olympics-nbc.gif"&gt;Tenor&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#feature-selection"&gt;
  &lt;/a&gt;
  Feature selection
&lt;/h4&gt;

&lt;p&gt;It’s not always good to add more features. Removing irrelevant and noisy features could help reduce model training time and improve model performance. There are multiple &lt;a href="https://scikit-learn.org/stable/modules/feature_selection.html#feature-selection"&gt;feature selection&lt;/a&gt; methods in scikit-learn that can be used to get rid of irrelevant features.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#remove-data-leakage-features"&gt;
  &lt;/a&gt;
  Remove data leakage features
&lt;/h4&gt;

&lt;p&gt;As we mentioned earlier, 1 scenario is that the model’s performance is “too good”. However, when you deploy the model and use it in production, you get very poor performance. The possible reason for this issue is “data leakage”, which is a common pitfall for model training. Data leakage means we use some features that happen after the target variable and contain the information of the target variable. In real life, we won’t have those data leakage features when we make predictions.&lt;/p&gt;

&lt;p&gt;For example, you want to predict whether or not a user will open an email but your features include whether or not the user clicked on the email. A user can only click the email if they opened it. If the model sees that a user clicked it, then it will 100% predict they will open it. The problem is in a real life scenario, we can’t know whether someone will click an email before they open the email.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--itQh9sCf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/68q26vqk9wmqdtq9e1l2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--itQh9sCf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/68q26vqk9wmqdtq9e1l2.gif" alt="0_k1D3UMoFEHEW-TLF"&gt;&lt;/a&gt;&lt;em&gt;Remove data leakage! (Source: &lt;a href="https://c.tenor.com/u8ukYJDixewAAAAC/leaking-water-leaking.gif"&gt;Tenor&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We can debug the data leakage issue with &lt;a href="https://www.mage.ai/blog/how-to-interpret-explain-machine-learning-models-using-shap-values"&gt;SHAP values&lt;/a&gt;. With the &lt;a href="https://shap.readthedocs.io/en/latest/index.html"&gt;SHAP&lt;/a&gt; library, we can plot the chart to show features with the most impact and how they impact the model’s output directionally. If the top features are highly correlated with the target variable and have very high weights, they’re potentially data leakage features and we can remove them from the training data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vi-NPZ4B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7czf25xryghho4eb0d16.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vi-NPZ4B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7czf25xryghho4eb0d16.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#more-data"&gt;
  &lt;/a&gt;
  More data
&lt;/h3&gt;

&lt;p&gt;Last but not least, getting more training data is an obvious and efficient way to improve model performance. More training data enables the model to find more insights and get better accuracy.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cQ6OCxVw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cfkhmow3wmaqhnv5t2lw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cQ6OCxVw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cfkhmow3wmaqhnv5t2lw.png" alt="image"&gt;&lt;/a&gt;&lt;em&gt;More data! (Source: &lt;a href="https://media.giphy.com/media/lrc1TZHRYxj7lGM3Vg/giphy.gif?cid=ecf05e47aoqjaushyaf8xrt1si85acq050hrb3os40a7iheh&amp;amp;rid=giphy.gif&amp;amp;ct=g"&gt;Giphy&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-to-stop-improving-the-model"&gt;
  &lt;/a&gt;
  When to stop improving the model
&lt;/h2&gt;

&lt;p&gt;Knowing when to stop is a tough question with no perfect answer. There’s no hard stopping point for model tuning. &lt;br&gt;
There could always be new ideas to bring on new data, create new features, or tune algorithms. The bare minimum criteria is that the model performance should at least be better than baseline metrics. Once we meet the minimum criteria, this is the process we recommend for improving models and deciding when to stop:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Try all the strategies to improve models.&lt;/li&gt;
&lt;li&gt;Compare the model performance with some other metrics you have to verify whether the model metrics make sense.&lt;/li&gt;
&lt;li&gt;After doing several rounds of model tuning, evaluate whether it’s worth spending time trying new ideas with the improvements you get.&lt;/li&gt;
&lt;li&gt;If the model performs well and you can barely get improvements after trying out a handful of ideas, deploy the model to production and measure the performance in production.&lt;/li&gt;
&lt;li&gt;If the performance is similar between production and training, then your model is good to go. If the production performance is worse than the performance in training, that indicates some issues in the training. The issues could be the model is &lt;a href="https://en.wikipedia.org/wiki/Overfitting"&gt;overfitting&lt;/a&gt; the training data, or the model has data leakage issues. You’ll need to go back and further tune the model.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Model tuning is a lengthy and repetitive process to test new ideas, retrain the model, evaluate the model, and compare the metrics. If you wonder how this process can be simplified, stay tuned for future articles about how &lt;a href="https://www.mage.ai/"&gt;Mage&lt;/a&gt; can help you improve models.&lt;/p&gt;

</description>
      <category>ai</category>
      <category>machinelearning</category>
      <category>datascience</category>
      <category>modeltuning</category>
    </item>
    <item>
      <title>AzureFunBytes Episode 57 - Securing @Azure with @shehackspurple</title>
      <author>Jay Gordon</author>
      <pubDate>Thu, 16 Sep 2021 19:17:34 +0000</pubDate>
      <link>https://dev.to/azure/azurefunbytes-episode-57-securing-azure-with-shehackspurple-23k2</link>
      <guid>https://dev.to/azure/azurefunbytes-episode-57-securing-azure-with-shehackspurple-23k2</guid>
      <description>&lt;p&gt;AzureFunBytes is a weekly opportunity to learn more about the fundamentals and foundations that make up Azure. It's a chance for me to understand more about what people across the Azure organization do and how they do it. Every week we get together at 11 AM Pacific on &lt;a href="https://cda.ms/226"&gt;Microsoft LearnTV&lt;/a&gt; and learn more about Azure.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DJzmXQeR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Z7BxBMz1--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_66%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j2xzw2g664tj31jij13t.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DJzmXQeR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Z7BxBMz1--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_66%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j2xzw2g664tj31jij13t.gif" alt="AzureFunBytes animation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On this week's AzureFunBytes Episode 57, Securing Azure, I welcome &lt;a href="https://twitter.com/shehackspurple"&gt;Tanya Janca&lt;/a&gt; from &lt;a href="https://wehackpurple.com/"&gt;We Hack Purple&lt;/a&gt; to give an overview of security basics within Azure!&lt;/p&gt;

&lt;p&gt;Tanya Janca, also known as SheHacksPurple, is the best-selling author of ‘&lt;a href="https://AliceandBobLearn.com"&gt;Alice and Bob Learn Application Security&lt;/a&gt;’. She is also the founder of We Hack Purple, an online learning academy, community and podcast that revolves around teaching everyone to create secure software. Tanya has been coding and working in IT for over twenty years, won countless awards, and has been everywhere from startups to public service to tech giants (Microsoft, Adobe, &amp;amp; Nokia). She has worn many hats; startup founder, pentester, CISO, AppSec Engineer, and software developer. She is an award-winning public speaker, active blogger &amp;amp; streamer and has delivered hundreds of talks and trainings on 6 continents. She values diversity, inclusion and kindness, which shines through in her countless initiatives. &lt;/p&gt;

&lt;p&gt;Our agenda:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tanya made an Azure course&lt;/li&gt;
&lt;li&gt;Why it’s important to secure your Azure instance&lt;/li&gt;
&lt;li&gt;Let’s investigate a security incident&lt;/li&gt;
&lt;li&gt;How could we have prevented this?&lt;/li&gt;
&lt;li&gt;Security center overview&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/CLdCauszCt4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/CLdCauszCt4"&gt;00:00:00 - Opening&lt;/a&gt; &lt;br&gt;
&lt;a href="https://youtu.be/CLdCauszCt4?t=323"&gt;00:05:23 - Let's meet Tanya&lt;/a&gt;&lt;br&gt;
&lt;a href="https://youtu.be/CLdCauszCt4?t=940"&gt;00:15:40 - We Hack Purple&lt;/a&gt;&lt;br&gt;
&lt;a href="https://youtu.be/CLdCauszCt4?t=1700"&gt;00:28:28 - Azure Security Center&lt;/a&gt;&lt;br&gt;
&lt;a href="https://youtu.be/CLdCauszCt4?t=2207"&gt;00:36:47 - Looking at a security alert&lt;/a&gt;&lt;br&gt;
&lt;a href="https://youtu.be/CLdCauszCt4?t=2411"&gt;00:40:11 - Secure score&lt;/a&gt;&lt;br&gt;
&lt;a href="https://youtu.be/CLdCauszCt4?t=2744"&gt;00:45:44 - Azure Bastion&lt;/a&gt;&lt;br&gt;
&lt;a href="https://youtu.be/CLdCauszCt4?t=2744"&gt;00:54:28 - Can you customize recommendations to fit your own baselines?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Useful Docs:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cda.ms/2Fs"&gt;Azure security fundamentals documentation&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cda.ms/2Ft"&gt;Introduction to Azure security&lt;/a&gt; &lt;br&gt;
&lt;a href="https://cda.ms/2FL"&gt;Azure Security Center&lt;/a&gt; &lt;br&gt;
&lt;a href="https://cda.ms/2FM"&gt;Azure Bastion&lt;/a&gt;&lt;br&gt;
&lt;a href="https://aka.ms/WHPSec"&gt;Learn Azure Security with Tanya Janca&lt;/a&gt; - &lt;br&gt;
&lt;a href="https://cda.ms/2Fr"&gt;Security services and technologies available on Azure&lt;/a&gt;&lt;br&gt;
&lt;a href="https://wehackpurple.com/"&gt;We Hack Purple Academy&lt;/a&gt;&lt;br&gt;
&lt;a href="https://AliceandBobLearn.com"&gt;Alice and Bob Learn Application Security&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cda.ms/2Fq"&gt;Azure security best practices and patterns&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/shehackspurple"&gt;Tanya on Twitter&lt;/a&gt; &lt;br&gt;
&lt;a href="https://shehackspurple.ca"&gt;SheHacksPurple&lt;/a&gt; &lt;br&gt;
&lt;a href="https://www.youtube.com/shehackspurple"&gt;Tanya on YouTube&lt;/a&gt;&lt;br&gt;
&lt;a href="https://newsletter.shehackspurple.ca"&gt;Newsletter&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.linkedin.com/in/tanya-janca"&gt;Tanya on LinkedIn&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.facebook.com/tanya.janca/"&gt;Tanya on Facebook&lt;/a&gt;&lt;br&gt;
&lt;a href="https://community.wehackpurple.com"&gt;Free Community at We Hack Purple&lt;/a&gt;&lt;/p&gt;

</description>
      <category>infosec</category>
      <category>security</category>
      <category>azure</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Using Recoil instead of Redux For State Management In React Applications</title>
      <author>OpenReplay Tech Blog</author>
      <pubDate>Thu, 16 Sep 2021 18:50:42 +0000</pubDate>
      <link>https://dev.to/asayerio_techblog/using-recoil-instead-of-redux-for-state-management-in-react-applications-58c3</link>
      <guid>https://dev.to/asayerio_techblog/using-recoil-instead-of-redux-for-state-management-in-react-applications-58c3</guid>
      <description>&lt;p&gt;&lt;em&gt;by author &lt;a href="https://blog.openreplay.com/authors/origho-precious"&gt;Origho Precious&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Among all the state management libraries available for use in React apps, &lt;a href="https://redux.js.org/"&gt;Redux&lt;/a&gt; is the most popular even ahead of React’s &lt;a href="https://reactjs.org/docs/context.html"&gt;Context APIs&lt;/a&gt;. There are also other awesome state management libraries used in React apps one of which is &lt;a href="https://recoiljs.org/"&gt;Recoil&lt;/a&gt;. &lt;strong&gt;Recoil&lt;/strong&gt; unlike Redux is very easy to set up, even easier to set up than the new &lt;a href="https://redux-toolkit.js.org/"&gt;Redux toolkit&lt;/a&gt; library. &lt;br&gt;
In this article, we will learn how to use Recoil to manage states in React apps instead of Redux.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#what-is-recoil"&gt;
  &lt;/a&gt;
  What is Recoil?
&lt;/h1&gt;

&lt;p&gt;According to &lt;a href="https://recoiljs.org/"&gt;documentation&lt;/a&gt;, &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Recoil is a state management library for React applications. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Recoil&lt;/strong&gt; is an open-source state management library with more than 14k stars on &lt;a href="https://github.com/facebookexperimental/Recoil"&gt;Github&lt;/a&gt;, it was invented by Dave McCabe, a Software Engineer at Facebook. It provides a global state so all components in a React application can share states easily and it is minimal compared to Redux with no boilerplate code setup needed.&lt;/p&gt;

&lt;p&gt;Recoil provides a &lt;strong&gt;data-graph&lt;/strong&gt; that flows from shared states into React components. The two core concepts of Recoil according to the official &lt;a href="https://recoiljs.org/docs/introduction/core-concepts"&gt;documentation&lt;/a&gt; are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://recoiljs.org/docs/introduction/core-concepts#atoms"&gt;&lt;strong&gt;Atoms&lt;/strong&gt;&lt;/a&gt;, which are units of the global state provided by Recoil, components can access and subscribe to changes made to them. &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://recoiljs.org/docs/introduction/core-concepts#selectors"&gt;&lt;strong&gt;Selectors&lt;/strong&gt;&lt;/a&gt; with which we can transform states either synchronously or asynchronously, and components can also access and subscribe to.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#why-use-recoil"&gt;
  &lt;/a&gt;
  Why Use Recoil?
&lt;/h2&gt;

&lt;p&gt;Considering that we have many other state management libraries out there and also React’s Context API and component state, why then should we use Recoil in our React apps?. Let’s highlight some of the reasons below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Recoil just like Redux provides a &lt;strong&gt;global state&lt;/strong&gt;. With Recoil, we won’t have to pass states as props down to children components in order to share them between components (a concept known as &lt;strong&gt;prop drilling&lt;/strong&gt;).&lt;/li&gt;
&lt;li&gt;Once we hook up a component to any &lt;strong&gt;Atom&lt;/strong&gt; or &lt;strong&gt;Selector,&lt;/strong&gt; they are subscribed to it, so any update made to that piece of state will be reflected across the app to wherever it’s being used.&lt;/li&gt;
&lt;li&gt;With Recoil &lt;strong&gt;Selectors,&lt;/strong&gt; we can transform a state synchronously or asynchronously and use the derived state anywhere in our app.&lt;/li&gt;
&lt;li&gt;Recoil is &lt;strong&gt;minimal&lt;/strong&gt; and requires no boilerplate code to get started. Redux is very popular but many developers still frown at it because of the amount of code they need to write to set it up.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;
  &lt;a href="#building-a-react-app-with-recoil"&gt;
  &lt;/a&gt;
  Building a React App with Recoil
&lt;/h1&gt;

&lt;p&gt;We have now gone over what Recoil is, its core concepts, and why you should consider using it. &lt;br&gt;
In this section, we will build an &lt;code&gt;anime-quote-generator&lt;/code&gt;, this app will fetch quotes from an external &lt;a href="https://animechan.vercel.app"&gt;API&lt;/a&gt; based on selected animes. &lt;/p&gt;

&lt;p&gt;Let’s get started by generating a new React app with the command below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-react-app anime-quote-generator
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, open it in your favorite code editor.&lt;/p&gt;

&lt;p&gt;Next, we will install Recoil and get started building our app components. Run the command below to install Recoil.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add recoil
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;OR&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install recoil
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s configure our app to use Recoil. Navigate to &lt;code&gt;src/index.js&lt;/code&gt;, here, we only need to wrap our entire app with &lt;code&gt;RecoilRoot&lt;/code&gt;; a Recoil component. Let’s do that below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;RecoilRoot&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;recoil&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./index.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;RecoilRoot&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/RecoilRoot&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;,
&lt;/span&gt;  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have successfully set up Recoil in our React app just by wrapping all our app’s components with it. You see how easy the setup is, to do this using Redux we will have to write some lines of code to create a store before wrapping our app with the React-Redux Provider component that will contain the store. &lt;/p&gt;

&lt;p&gt;Now that we have set up Recoil in our app, let’s start building components, pages, and sharing states with Recoil.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-animepill-component"&gt;
  &lt;/a&gt;
  Building AnimePill Component
&lt;/h2&gt;

&lt;p&gt;This component will render the title of an anime passed to it, and when clicked, it will route us to a page where we’ll see quotes from that anime. First, we need to install &lt;a href="https://reactrouter.com/web/guides/quick-start"&gt;react-router-dom&lt;/a&gt; for routing between pages in our app and &lt;a href="https://styled-components.com/"&gt;styled-components&lt;/a&gt; for styling. Let’s do that with the command below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add react-router-dom styled-components
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;OR&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install react-router-dom styled-components
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, let’s create a folder in the &lt;code&gt;src&lt;/code&gt; folder, called &lt;code&gt;components&lt;/code&gt;. In the &lt;code&gt;components&lt;/code&gt; folder, create a folder called &lt;code&gt;AnimePills&lt;/code&gt; and a file called &lt;code&gt;AnimePills.jsx&lt;/code&gt; inside that folder. The path to this file from &lt;code&gt;src&lt;/code&gt; should be &lt;code&gt;src/components/AnimePills/AnimePills.jsx&lt;/code&gt;, now add the code below to that file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AnimePill&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;anime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;StyledPill&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`/anime/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;anime&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;anime&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Link&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/StyledPill&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;StyledPill&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
  border-radius: 999px;
  &amp;amp; a {
    display: block;
    text-decoration: none;
    color: #333;
    padding: 1rem 2rem;
  }
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;AnimePill&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above, we just created a component called &lt;code&gt;AnimePills&lt;/code&gt;. This component takes in 2 props; &lt;code&gt;anime&lt;/code&gt; and &lt;code&gt;color&lt;/code&gt;, with the anime we will construct a link using the &lt;code&gt;Link&lt;/code&gt; component from &lt;code&gt;react-router-dom&lt;/code&gt; and we will use the color as a background-color. We then style the component with &lt;code&gt;styled-components&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-quote-and-smallquote-components"&gt;
  &lt;/a&gt;
  Building Quote and SmallQuote components
&lt;/h2&gt;

&lt;p&gt;We will be building 2 components in this section. Let’s start with the &lt;code&gt;Quote&lt;/code&gt; component. Inside our &lt;code&gt;components&lt;/code&gt; folder, create a new folder called &lt;code&gt;Quote&lt;/code&gt; and a file &lt;code&gt;Quote.jsx&lt;/code&gt; inside it. In this component, we will simply render a quote from Naruto and style the component with &lt;code&gt;styled-components&lt;/code&gt;. Add the code below to the file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Quote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;quote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;anime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Naruto&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;character&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Pain&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Because of the existence of love - sacrifice is born. As well as hate. Then one comprehends... one knows PAIN.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;StyledQuote&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;{quote.quote}&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h4&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;character&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;character&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&amp;gt; &amp;lt;em&amp;gt;in&amp;lt;/&lt;/span&gt;&lt;span class="nx"&gt;em&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;anime&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;anime&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h4&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/StyledQuote&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;StyledQuote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
  background: #dbece5;
  padding: 3rem 5rem;
  display: flex;
  flex-direction: column;
  align-items: center;
  &amp;amp; &amp;gt; p {
    font-size: 2rem;
    letter-spacing: 2px;
    text-align: center;
    font-style: italic;
    margin-bottom: 3rem;
    background: #fff;
    border-radius: 0.5rem;
    padding: 3rem;
  }
  &amp;amp; &amp;gt; h4 {
    font-size: 1.5rem;
    font-weight: 500;
    letter-spacing: 2px;
    span {
      padding: 5px 10px;
    }
    em {
      font-size: 1.2rem;
    }
    &amp;amp; &amp;gt; .character {
      background: #b8dace;
    }
    &amp;amp; &amp;gt; .anime {
      background: #f5e7e4;
    }
  }
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Quote&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, let’s create the &lt;code&gt;SmallQuote&lt;/code&gt; component. This component expects 3 props (anime, character and quote), we will render these props, and style the component with &lt;code&gt;styled-components&lt;/code&gt;. To do this, create a folder inside &lt;code&gt;src/components&lt;/code&gt; called &lt;code&gt;SmallQuote&lt;/code&gt;, inside it create a file &lt;code&gt;SmallQuote.jsx&lt;/code&gt; and add the code below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SmallQuote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;character&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;anime&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;StyledQuote&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;{quote}&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h4&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;character&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;character&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&amp;gt; &amp;lt;em&amp;gt;in&amp;lt;/&lt;/span&gt;&lt;span class="nx"&gt;em&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;anime&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;anime&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h4&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/StyledQuote&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;StyledQuote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
  background: #dbece5;
  padding: 1.5rem 2.5rem;
  display: flex;
  flex-direction: column;
  align-items: center;
  &amp;amp; &amp;gt; p {
    font-size: 1rem;
    letter-spacing: 2px;
    text-align: center;
    font-style: italic;
    background: #fff;
    border-radius: 0.5rem;
    padding: 1.5rem;
    margin-bottom: 1.5rem;
  }
  &amp;amp; &amp;gt; h4 {
    font-size: 1rem;
    font-weight: 500;
    letter-spacing: 2px;
    span {
      padding: 3px 5px;
    }
    em {
      font-size: 1rem;
    }
    &amp;amp; &amp;gt; .character {
      background: #b8dace;
    }
    &amp;amp; &amp;gt; .anime {
      background: #f5e7e4;
    }
  }
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;SmallQuote&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above, we just built a component called &lt;code&gt;SmallQuote&lt;/code&gt; and styled it with &lt;code&gt;styled-components&lt;/code&gt;. It is very similar to &lt;code&gt;Quote&lt;/code&gt; component, the purpose of splitting them is to make the code easier to understand. So if you want to make the &lt;code&gt;Quote&lt;/code&gt; component reusable to include features of the &lt;code&gt;SmallQuote&lt;/code&gt;  component, feel free to do that.&lt;/p&gt;

&lt;p&gt;Next, we will be building our app &lt;strong&gt;atoms&lt;/strong&gt; and &lt;strong&gt;selector.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-our-app-global-state-atoms-and-selector"&gt;
  &lt;/a&gt;
  Building Our App Global State (Atoms and Selector).
&lt;/h2&gt;

&lt;p&gt;To get started, navigate into our &lt;code&gt;src&lt;/code&gt; folder and create a folder called &lt;code&gt;store&lt;/code&gt;, inside this folder create a file called &lt;code&gt;index.js&lt;/code&gt;. In this file, we will build all the atoms we need and also a selector to modify one of the atoms. Let’s start with the first atom, &lt;code&gt;animeTitles&lt;/code&gt;. Add the code below to create our first atom.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;atom&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;recoil&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;animeTitles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;atom&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;animeTitleList&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above, we created an Atom by importing &lt;code&gt;atom&lt;/code&gt; from recoil and called it &lt;code&gt;animeTitles&lt;/code&gt;. We then defined the required properties of an atom, which are&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;key&lt;/code&gt; - this should be a unique ID among other atoms and selectors we will create in the app.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;default&lt;/code&gt; - this is the default value of the atom.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Doing this with Redux, we will have to create an &lt;a href="https://redux.js.org/tutorials/fundamentals/part-7-standard-patterns#action-creators"&gt;action creator&lt;/a&gt; with a specific type, the action creator will return the type and a payload passed to it, and also we will create a &lt;a href="https://redux.js.org/understanding/thinking-in-redux/glossary#reducer"&gt;reducer&lt;/a&gt; to update our redux store. but with Recoil we don’t need to handle all of that, with the &lt;code&gt;key&lt;/code&gt; prop, Recoil knows the part of the global state to update so when we pass data to update the state it does it correctly and we won’t need to compare action types as we would do in Redux.&lt;/p&gt;

&lt;p&gt;Following the same pattern, let’s create another atom called &lt;code&gt;animePageNum&lt;/code&gt;. we will use this atom to hold page number, this will help us properly handle pagination in this app. Add the code below to this file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;animeListPageNum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;atom&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;animeListPageNum&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next let’s create a selector to mutate the array of data we will have in the &lt;code&gt;animeTitles&lt;/code&gt; atom by slicing the array to return only 50 items at a time based on the page number which we will get from &lt;code&gt;animePageNum&lt;/code&gt; atom.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;slicedAnimeTitles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;slicedAnimeTitles&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;animes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animeTitles&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pageNum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animeListPageNum&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newAnimeList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;animes&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arrIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pageNum&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;pageNum&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;newAnimeList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arrIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above, we created a selector called &lt;code&gt;slicedAnimeTitles&lt;/code&gt;, we defined a &lt;code&gt;key&lt;/code&gt; property just like we did in the atoms we created above, and here we have a new property &lt;code&gt;get&lt;/code&gt; whose value is a function, this is only available in selectors, this function has 2 parameters but here we are using just one of them that is &lt;code&gt;get&lt;/code&gt; with which we can access the value of an atom or selector. Inside this function, with the &lt;code&gt;get&lt;/code&gt; method, we saved the &lt;code&gt;animeTitles&lt;/code&gt; and &lt;code&gt;animeListPageNum&lt;/code&gt; atoms into 2 variables &lt;code&gt;animes&lt;/code&gt; and &lt;code&gt;pageNum&lt;/code&gt; respectively, and with the &lt;code&gt;pageNum&lt;/code&gt; we specified the index to start slicing from and then returned a new array of just 50 items.&lt;/p&gt;

&lt;p&gt;We have now successfully created all the shared states we will be using in this app. Next. Let’s create a pagination component, to handle user click and update the animeListPageNum state (atom) so we can update the list of animes we are returning from the selector we just created.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-pagination-component"&gt;
  &lt;/a&gt;
  Building Pagination Component
&lt;/h2&gt;

&lt;p&gt;To begin, navigate to &lt;code&gt;src/components&lt;/code&gt; and create a new folder &lt;code&gt;Pagination&lt;/code&gt;, inside it create a file &lt;code&gt;Pagination.jsx&lt;/code&gt;, paste the code below into this file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRecoilState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;recoil&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;animeListPageNum&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../store&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Pagination&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;listLength&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;pageNum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setPageNum&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRecoilState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animeListPageNum&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;numsArr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setNumsArr&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above, we created a new component &lt;code&gt;Pagination&lt;/code&gt;. This component has a prop &lt;code&gt;listLength&lt;/code&gt;; this will help us determine the page numbers to render. We then imported &lt;code&gt;[useRecoilState](https://recoiljs.org/docs/api-reference/core/useRecoilState)&lt;/code&gt;, which accepts a state as an argument just like React’s useState hook, This also works similar to &lt;code&gt;useSelector&lt;/code&gt;  in Redux But here we can update the state directly and not have to dispatch an action. We can access the value of the state passed to &lt;code&gt;useRecoilState&lt;/code&gt; and also update the state, We also created a component state with &lt;code&gt;useState&lt;/code&gt; hook to hold an array of numbers, these will be the page numbers to render in this component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;paginationNums&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;listLength&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;setNumsArr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nx"&gt;paginationNums&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;listLength&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;StyledPagination&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;numsArr&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;
        &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;numsArr&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;
              &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;pageNum&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;active&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
              &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setPageNum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
              &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/StyledPagination&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the useEffect we imported above, we created an array of numbers with the &lt;code&gt;listLength&lt;/code&gt; prop, and updated the &lt;code&gt;numArr&lt;/code&gt; state with the array we created and then we looped through the array of nums and rendered them in buttons, each button will update the &lt;code&gt;animeListPageNum&lt;/code&gt; when clicked. Let’s complete this component by adding  the code below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;StyledPagination&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
  display: flex;
  align-items: center;
  border-width: 2px 2px 2px 0;
  border-style: solid;
  width: max-content;
  &amp;amp; button {
    outline: none;
    background: transparent;
    border: none;
    border-left: 2px solid;
    width: 35px;
    height: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
    &amp;amp;:hover,
    &amp;amp;.active {
      background: #fae1da;
    }
  }
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Pagination&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the &lt;code&gt;Pagination&lt;/code&gt; component done, we can now build our app pages and complete the app.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-homepage-component"&gt;
  &lt;/a&gt;
  Building Homepage Component
&lt;/h2&gt;

&lt;p&gt;In this section, we will build our &lt;code&gt;homepage&lt;/code&gt; component, this page will render a static quote and also a list of animes using the &lt;code&gt;AnimePill&lt;/code&gt; component we created earlier and also the &lt;code&gt;Pagination&lt;/code&gt; component for pagination. To do this, in our &lt;code&gt;src&lt;/code&gt; folder let’s create a folder called &lt;code&gt;pages&lt;/code&gt;, in this folder create a folder called &lt;code&gt;home&lt;/code&gt; and a file inside it called &lt;code&gt;index.jsx&lt;/code&gt;, folder path should &lt;code&gt;src/pages/home/index.jsx&lt;/code&gt;. Add the code below to this file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRecoilValue&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;recoil&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;AnimePill&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../components/AnimePill/AnimePill&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Pagination&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../components/Pagination/Pagination&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Quote&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../components/Quote/Quote&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;slicedAnimeTitles&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;animeTitles&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../store&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Homepage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;animes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRecoilValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animeTitles&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;slicedAnimes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRecoilValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slicedAnimeTitles&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;colors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#FAE1DA&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#E8C6AD&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#F2E2ED&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#D6EBE4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#BFDCD0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;generateColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;randNum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;randNum&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;StyledHomePage&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;header&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Anime&lt;/span&gt; &lt;span class="nx"&gt;Quote&lt;/span&gt; &lt;span class="nx"&gt;Generator&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/header&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Quote&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;animes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;All&lt;/span&gt; &lt;span class="nx"&gt;Animes&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h3&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;animes&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Click&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt; &lt;span class="nx"&gt;anime&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;see&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;quote&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;flex&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;animes&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
              &lt;span class="nx"&gt;slicedAnimes&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;anime&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;anime&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;  &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0 1.3rem 1.3rem 0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;AnimePill&lt;/span&gt; &lt;span class="nx"&gt;anime&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;anime&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;generateColor&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;              &lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;nodata&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;No&lt;/span&gt; &lt;span class="nx"&gt;anime&lt;/span&gt; &lt;span class="nx"&gt;found&lt;/span&gt; &lt;span class="err"&gt;😞&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="p"&gt;)}&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;animes&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pagination&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Pagination&lt;/span&gt; &lt;span class="nx"&gt;listLength&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;animes&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/main&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/StyledHomePage&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;StyledHomePage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
  max-width: 80%;
  margin: 2rem auto;
  &amp;amp; header {
    margin-bottom: 3rem;
    &amp;amp; &amp;gt; h2 {
      font-weight: 400;
      letter-spacing: 3px;
      text-align: center;
    }
  }
  &amp;amp; .animes {
    margin-top: 4rem;
    &amp;amp; &amp;gt; h3 {
      font-weight: 400;
      font-size: 1.4rem;
      background: #ece4f1;
      width: max-content;
      padding: 0.3rem 1rem;
    }
    &amp;amp; &amp;gt; p {
      margin: 1.2rem 0;
    }
    &amp;amp; &amp;gt; .flex {
      display: flex;
      justify-content: center;
      flex-wrap: wrap;
      &amp;amp; &amp;gt; .nodata {
        margin: 2rem 0 4rem;
        font-size: 1.3rem;
      }
    }
    &amp;amp; .pagination {
      display: flex;
      flex-direction: column;
      align-items: center;
      margin: 2rem 0 4rem;
    }
  }
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Homepage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above, we imported: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;useRecoilValue&lt;/code&gt; from the Recoil library to get the state values,&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;styled&lt;/code&gt; from &lt;code&gt;styled-components&lt;/code&gt; to style the &lt;code&gt;Homepage&lt;/code&gt; component, &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;AnimePill&lt;/code&gt; to render anime title, &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Pagination&lt;/code&gt; to handle pagination, &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Quote&lt;/code&gt;  to display a static anime quote,&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;SlicedAnimeTitles&lt;/code&gt; is the selector we created earlier. We will be its return value on this page, and &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;animeTitles&lt;/code&gt; which is the first atom we created to hold the list of animes. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, we created a function component called &lt;code&gt;Homepage&lt;/code&gt; inside this component, we accessed the &lt;code&gt;animeTitles&lt;/code&gt; and the &lt;code&gt;slicedAnimeTitles&lt;/code&gt; state using &lt;code&gt;useRecoilvalue&lt;/code&gt; and also we created an array of colors (we will pass these colors to the &lt;code&gt;AnimePill&lt;/code&gt; component at random). We then created a function &lt;code&gt;generateColor&lt;/code&gt;, this component returns a random color from the colors array. After that, we returned the component body styled with &lt;code&gt;styled-components&lt;/code&gt;, a header, the &lt;code&gt;Quote&lt;/code&gt;  component, and a little notice telling a user what to do, then if we have &lt;code&gt;animes&lt;/code&gt;, we will loop through the &lt;code&gt;slicedAnimes&lt;/code&gt; and render each of them with the &lt;code&gt;AnimePill&lt;/code&gt; component by passing the anime to the component and also a color prop from the &lt;code&gt;generateColor&lt;/code&gt; function and if there’s none we render a ‘no data’ state.&lt;br&gt;&lt;br&gt;
Next, we are checking to see if the length of the &lt;code&gt;animes&lt;/code&gt; state is more than 50, if true we render the &lt;code&gt;Pagination&lt;/code&gt; component. and finally, we added a block of &lt;code&gt;styled-component&lt;/code&gt; styles&lt;/p&gt;

&lt;p&gt;We’ve now successfully created our &lt;code&gt;Homepage&lt;/code&gt; component, in the next section let’s create a page we will be routed to when we click on any &lt;code&gt;AnimePill&lt;/code&gt;. In that component, we will make an API call to the external API and fetch all quotes from the selected anime and render the quotes.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#building-animepage-component"&gt;
  &lt;/a&gt;
  Building Animepage Component
&lt;/h2&gt;

&lt;p&gt;Let’s get started by navigating to our &lt;code&gt;pages&lt;/code&gt; folder, inside create a folder called &lt;code&gt;anime&lt;/code&gt; and a file inside it called &lt;code&gt;index.jsx&lt;/code&gt;. Add the code below to the file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useParams&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;SmallQuote&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../components/SmallQuote/SmallQuote&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Animepage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;param&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useParams&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;quotes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setQuotes&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;param&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetchAnimeQuotes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;`https://animechan.vercel.app/api/quotes/anime?title=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;param&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
          &lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="nx"&gt;setQuotes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
      &lt;span class="nx"&gt;fetchAnimeQuotes&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;param&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;StyledAnimePage&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Quotes&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;param&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Go&lt;/span&gt; &lt;span class="nx"&gt;back&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Link&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;grid&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Loading&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;quotes&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="nx"&gt;quotes&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;quote&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;anime&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SmallQuote&lt;/span&gt;
                &lt;span class="nx"&gt;anime&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;anime&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="nx"&gt;character&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;character&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="nx"&gt;quote&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
              &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;nodata&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;No&lt;/span&gt; &lt;span class="nx"&gt;Quote&lt;/span&gt; &lt;span class="nx"&gt;found&lt;/span&gt; &lt;span class="err"&gt;😞&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;)}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/StyledAnimePage&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;StyledAnimePage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
  max-width: 80%;
  margin: 2rem auto;
  position: relative;
  &amp;amp; &amp;gt; a {
    position: absolute;
    top: 1rem;
    text-decoration: none;
  }
  &amp;amp; &amp;gt; h2 {
    font-weight: 400;
    letter-spacing: 3px;
    text-align: center;
    margin-bottom: 2rem;
  }
  &amp;amp; &amp;gt; .grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    grid-template-rows: max-content;
    &amp;amp; .anime {
      margin: 1rem;
      height: max-content;
    }
    &amp;amp; &amp;gt; p {
      margin: 2rem 0 4rem;
      font-size: 1.3rem;
      text-align: center;
    }
  }
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Animepage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above, we imported all the components and hooks we will be using. We also initialized the &lt;code&gt;[useParams](https://reactrouter.com/web/api/Hooks/useparams.)&lt;/code&gt; hook, to get an anime title from our browser URL as a param based on the route we’ll define for this page. Next, we created 2 component states using &lt;code&gt;useState&lt;/code&gt; hook, one to hold the quotes we will fetch from the API and the other for a loading, And in a &lt;code&gt;useEffect&lt;/code&gt;, we are fetching the quotes based on the anime name gotten from the URL and setting the &lt;code&gt;quotes&lt;/code&gt; state with it. We then returned a block of jsx styled with &lt;code&gt;styled-components&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Above, you’ll notice that we didn’t use Recoil, instead, we saved the response we got from the API request in a &lt;code&gt;useState&lt;/code&gt;, this is because the states will only be used in this component.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#open-source-session-replay"&gt;
  &lt;/a&gt;
  Open Source Session Replay
&lt;/h2&gt;

&lt;p&gt;Debugging a web application in production may be challenging and time-consuming. &lt;a href="https://github.com/openreplay/openreplay"&gt;OpenReplay&lt;/a&gt; is an Open-source alternative to FullStory, LogRocket and Hotjar. It allows you to monitor and replay everything your users do and shows how your app behaves for every issue. &lt;br&gt;
It’s like having your browser’s inspector open while looking over your user’s shoulder.&lt;br&gt;
OpenReplay is the only open-source alternative currently available.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MvoFt7Qf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/openreplay/openreplay/main/static/replayer.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MvoFt7Qf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/openreplay/openreplay/main/static/replayer.png" alt="OpenReplay"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy debugging, for modern frontend teams - &lt;a href="https://github.com/openreplay/openreplay"&gt;Start monitoring your web app for free&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-app-routes-and-fetching-animes"&gt;
  &lt;/a&gt;
  Creating App Routes and Fetching Animes
&lt;/h2&gt;

&lt;p&gt;To complete this app, Let’s navigate to &lt;code&gt;src/App.js&lt;/code&gt;. Here, we will be doing 2 things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Fetch a list of animes from the external API and updating the &lt;code&gt;animeTitles&lt;/code&gt;  atom we created earlier with it.&lt;/li&gt;
&lt;li&gt;Define our app routes with &lt;code&gt;react-router-dom&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let’s get started. Go to  &lt;code&gt;src/App.js&lt;/code&gt; and &lt;strong&gt;replace&lt;/strong&gt; what we have there with the code below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserRouter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Switch&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useSetRecoilState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;recoil&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;animeTitles&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./store&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Homepage&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./pages/home&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Animepage&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./pages/anime&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above, We imported&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;useEffect&lt;/code&gt; - We will be making our API call inside it, so that we can fetch the array of anime once the page is rendered.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;BrowserRouter&lt;/code&gt;, &lt;code&gt;Route&lt;/code&gt;, and &lt;code&gt;Switch&lt;/code&gt; from &lt;code&gt;react-router-dom&lt;/code&gt;  - We will create our routes with them.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;[useSetRecoilState](https://recoiljs.org/docs/api-reference/core/useSetRecoilState)&lt;/code&gt; from &lt;code&gt;recoil&lt;/code&gt; - with this, we will update the &lt;code&gt;animeTitles&lt;/code&gt; atom just by passing the atom to it as an argument, and&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;axios&lt;/code&gt; - for fetching data from the external API&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, we will create the App component and fetch the animes inside. To do that add the code below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;setTitles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSetRecoilState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animeTitles&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetchAnimes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://animechan.vercel.app/api/available/anime&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;setTitles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fetchAnimes&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above, we created the App component, and inside we created a variable &lt;code&gt;setTitles&lt;/code&gt; with which we will update our &lt;code&gt;animeTitles&lt;/code&gt; atom (state). Next, we created an async function called &lt;code&gt;fetchAnimes&lt;/code&gt;, inside it, we fetched the animes from the external API using axios and updated our &lt;code&gt;animeTitles&lt;/code&gt; state with it while using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch"&gt;try-catch&lt;/a&gt; for error handling. After that we called the &lt;code&gt;fetchAnimes&lt;/code&gt; inside the &lt;code&gt;useEffect&lt;/code&gt; we imported so this function runs once the page is rendered.&lt;/p&gt;

&lt;p&gt;Let’s finish up the &lt;code&gt;App&lt;/code&gt; component by adding routes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;BrowserRouter&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;exact&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Homepage&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;exact&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/anime/:name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Animepage&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Switch&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/BrowserRouter&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have now completed our app. let’s start our dev server to see how it works. &lt;br&gt;
Run the command below in your terminal&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;OR&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you followed along correctly, you should see these pages. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---2SqUsnQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k34w48hyexsdxibknznp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---2SqUsnQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k34w48hyexsdxibknznp.png" alt="localhost:3000 - homepage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on any anime and see a page like this. I will click on Naruto.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aK_dpsFL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vxod82djlyt81jhzx7tr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aK_dpsFL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vxod82djlyt81jhzx7tr.png" alt="anime page showing quotes from Naruto"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;In this article, we learned what Recoil is, why use it, and how to use it instead of Redux by building an anime-quote-generator app using Recoil for state management. We also compared how to do certain things in Recoil to Redux, and we saw how easy it is to use Recoil. You can learn more about Recoil from the official docs. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Origho-precious/anime-quote-generator"&gt;Github repository for tutorial project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://recoiljs.org/"&gt;Recoil Official documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://redux.js.org/"&gt;Redux Official documention&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://openbase.com/categories/js/best-react-state-management-libraries"&gt;List of Some React State Management libraries&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>redux</category>
      <category>react</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Batemos a meta do NPS! Como foi?</title>
      <author>Anderson Poli</author>
      <pubDate>Thu, 16 Sep 2021 18:34:01 +0000</pubDate>
      <link>https://dev.to/convenia/batemos-a-meta-do-nps-e-agora-4cnk</link>
      <guid>https://dev.to/convenia/batemos-a-meta-do-nps-e-agora-4cnk</guid>
      <description>&lt;p&gt;&lt;strong&gt;Antes de mais nada o que é NPS?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;O Net Promoter Score (NPS) é uma métrica de lealdade do cliente criada por Fred Heichheld, com o objetivo de medir o grau de lealdade dos clientes das empresas de qualquer segmento, trazendo reflexos da experiência e satisfação dos clientes.&lt;/p&gt;

&lt;p&gt;Resumidamente é uma pesquisa feita com os clientes perguntando de 0 a 10 qual seria a probabilidade deles recomendarem o seu produto para outras pessoas.&lt;/p&gt;

&lt;p&gt;As notas são divididas da seguinte maneira.&lt;/p&gt;

&lt;p&gt;0 - 6: Detratores&lt;br&gt;
7 - 8: Neutros&lt;br&gt;
9 - 10: Promotores&lt;/p&gt;

&lt;p&gt;Imaginem um grupo de amigos em uma mesa de bar, quando o assunto do momento é relacionado a algum produto que resolva determinado problema, e o seu produto é levantado como opção.&lt;/p&gt;

&lt;p&gt;Detratores são aqueles que não irão recomendar por N motivos, ou por um pequeno motivo mas que para ele é importante.&lt;/p&gt;

&lt;p&gt;Neutros ficarão em cima do muro.&lt;/p&gt;

&lt;p&gt;Promotores recomendarão fortemente o produto, dando exemplos de problemas solucionados.&lt;/p&gt;

&lt;p&gt;Acho NPS uma forma de medir muito ingrata, a conta para saber se você está em uma zona de excelência não é ter mais promotores do que detratores somente. Um detrator pesa bem mais que um promotor.&lt;/p&gt;

&lt;p&gt;Por exemplo: em uma pesquisa com 50 pessoas respostas, 25 deram notas 9 e 10 (promotores), 20 deram notas 7 ou 8 (neutros) e 5 deram notas de 0 a 6 (detratores). O cálculo de NPS deve ser: 25 (promotores) – 5 (detratores) ÷ 50 (número total de pessoas que responderam) = 40%&lt;/p&gt;

&lt;p&gt;Seu produto só começa a entrar na zona de excelência após ultrapassar a barreira de 50.&lt;/p&gt;

&lt;p&gt;E aqui começa o nosso post =)&lt;/p&gt;

&lt;p&gt;Aqui na Convenia, alinhamos como meta do time de produto atingir o NPS acima da zona de excelência. E sabíamos que não seria tarefa fácil, por ser um SAAS, com diversos tipos de clientes, setores etc..&lt;/p&gt;

&lt;p&gt;Pelo título do post, já temos um spoiler que conseguimos alcançar nosso objetivo durante o ano, mas o que quero passar aqui é, quais foram as principais ações para que isso se tornasse realidade.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1 - Alinhamento com time de vendas&lt;/strong&gt;&lt;br&gt;
Sabemos que um vendedor quer vender a qualquer custo, não está errado, mas uma mudança clara foi saber vender a qualquer custo sabendo das limitações e das qualidades do produto. Normal em um time em crescimento ter desalinhamento em relação ao que o produto é capaz de fazer. Por conta disso foi importantíssimo reuniões de alinhamento com o time de vendas e produto constantes, para sanar dúvidas ou sugerir evoluções.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2 - Alinhamento com o time de CS&lt;/strong&gt;&lt;br&gt;
CS tem papel fundamental de fazer com que o cliente chegue no sucesso esperado utilizando o sistema. E como fazer isso? &lt;br&gt;
Pensando fora da caixa, e porque não sugerir melhorias no produto, seja no processo de implantação para reduzir tempo gasto em alguma tarefa entregando valor mais rápido, ajudando a realizar pesquisas com clientes para entender quais são as principais dúvidas e demandas. Afinal CS é quem mais passa o tempo se relacionando com os clientes. Ter um time de CS integrado com o time de produto foi essencial, onde cada um entendeu a limitação de cada área.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3 - Produto atacando o que realmente importa&lt;/strong&gt;&lt;br&gt;
Aqui na Convenia temos um processo bem definido de priorização, escrevi sobre o tema a um tempo atrás: &lt;a href="//onsole.aws.amazon.com/ec2autoscaling/home?region=us-east-1#/"&gt;https://dev.to/convenia/o-que-atacar-em-produto-user-impact-score-pode-te-ajudar-a-comecar-5a8j&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tendo um processo alinhado com a estratégia da empresa, o que precisa ser feito é executar!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;No momento que adiciono como tag do post a palavra alinhamento&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Por que esse foi o principal motivo da chegada a meta.&lt;/p&gt;

&lt;p&gt;Time de design pensando na melhor usabilidade, como resolver um problema da maneira mais fácil e ágil possível. &lt;/p&gt;

&lt;p&gt;Time de engenharia focado em entregar valor rápido, não menosprezando qualidade e segurança.&lt;/p&gt;

&lt;p&gt;Mais e ai, qual foi o NPS alcançado?&lt;br&gt;
Durante todo o ano batíamos na trave, 45, 48, 43, até 49, lembra quando falei que NPS era ingrato, teve um mês que no último dia o sonho foi postergado, o time sofreu! E isso é muito legal, fomos mais fortes para a próxima rodada, até que alcançamos o 62.2. BOOOM!&lt;/p&gt;

&lt;p&gt;Foi hora de comemorar, e entender que o trabalho apenas começou, pois chegar é difícil, se manter é muito mais. Sabemos que no próximo mês o resultado pode não ser tão bom, mas confiar no processo é essencial para isso se tornar um padrão.&lt;/p&gt;

</description>
      <category>saas</category>
      <category>startup</category>
      <category>nps</category>
      <category>alinhamento</category>
    </item>
    <item>
      <title>A powerful full-text search in PostgreSQL in less than 20 lines</title>
      <author>Leandro Proença</author>
      <pubDate>Thu, 16 Sep 2021 18:15:57 +0000</pubDate>
      <link>https://dev.to/leandronsp/a-powerful-full-text-search-in-postgresql-in-less-than-20-lines-5c0d</link>
      <guid>https://dev.to/leandronsp/a-powerful-full-text-search-in-postgresql-in-less-than-20-lines-5c0d</guid>
      <description>&lt;p&gt;This blogpost will guide you to understand the fundamental pieces needed to implement a &lt;strong&gt;good enough&lt;/strong&gt; &lt;a href="https://en.wikipedia.org/wiki/Full-text_search"&gt;full-text search&lt;/a&gt; using &lt;a href="https://www.postgresql.org/docs/13/textsearch-intro.html"&gt;PostgreSQL&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Spoiler alert&lt;/strong&gt;: for those curious people looking for a "okay, just show me a full-text search with ranking and fuzzy search in Postgres in less than 20 lines", so here you go:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; 
    &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;rank_title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;rank_description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;similarity&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; 
    &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;to_tsvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;to_tsquery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'sales'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;NULLIF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ts_rank&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_tsvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;rank_title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;NULLIF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ts_rank&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_tsvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;rank_description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;SIMILARITY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'sales'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;similarity&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;@@&lt;/span&gt; &lt;span class="n"&gt;document&lt;/span&gt; &lt;span class="k"&gt;OR&lt;/span&gt; &lt;span class="n"&gt;similarity&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;rank_title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rank_description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;similarity&lt;/span&gt; &lt;span class="k"&gt;DESC&lt;/span&gt; &lt;span class="n"&gt;NULLS&lt;/span&gt; &lt;span class="k"&gt;LAST&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But if you need to understand what the heck is the above SQL statement doing, let me explain you a bit of context and FTS (Full-text search) fundamentals in PostgreSQL.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#context-matters"&gt;
  &lt;/a&gt;
  Context matters
&lt;/h3&gt;

&lt;p&gt;A bunch of years ago I read &lt;a href="http://rachbelaid.com/postgres-full-text-search-is-good-enough/"&gt;this awesome blogpost&lt;/a&gt; called "Postgres full-text search is good enough". It's really worth reading, I could get many insights, since I was already using PostgreSQL as my standard database. &lt;/p&gt;

&lt;p&gt;By the time, I was comfortable using ElasticSearch for text searching (and if we go even before that back to 2009, I have experience using Apache Lucene, from which ElasticSearch is based on). &lt;/p&gt;

&lt;p&gt;However, managing ElasticSearch deployment &lt;a href="https://qbox.io/blog/memory-considerations-in-elasticsearch-deployment/"&gt;is not easy&lt;/a&gt;. It requires a lot of patience and memory 🍪.&lt;/p&gt;

&lt;p&gt;Then back to 2014 I wrote &lt;a href="https://medium.com/@leandronsp/a-practical-look-at-postgresql-text-search-part-i-aee3f65e3b79#.qza7vxlet"&gt;this article&lt;/a&gt; explaining the reasons why I decided to experiment on PG text search as well as showing a practical example in a Ruby application. &lt;/p&gt;

&lt;p&gt;In this guide, I'll focus on a simpler yet powerful example using only SQL, so if you want to follow me in this adventure, make sure you have &lt;a href="https://www.postgresqltutorial.com/postgresql-getting-started/"&gt;PostgreSQL installed&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That's the only requirement. No more tools to install or setup. Postgres solely. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#seeding-data"&gt;
  &lt;/a&gt;
  Seeding data
&lt;/h3&gt;

&lt;p&gt;In order to explain further the fundamentals of textual search, relevance and results ranking, we have to seed our database with real data and compare different search strategies.&lt;/p&gt;

&lt;p&gt;Let's create a table called &lt;code&gt;courses&lt;/code&gt; containing only a &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;description&lt;/code&gt; columns. Those columns will be our "searchable" columns in which we will perform a text search against:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;courses&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="nb"&gt;SERIAL&lt;/span&gt; &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="nb"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="nb"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we will populate the table with some dummy data:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;courses&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;VALUES&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Improve your sales skills'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'A complete course that will help you to improve your sales skills'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Intro to Computer Science'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Understant how computers work'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Law 101'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Have you ever wondered doing some Law?'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Natural Sciences the easy way'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Your guide to understand the world'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Mathematics: a gentle introduction'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Numbers are easy'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'The crash course of Data Science'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Be a data scientist in 5 weeks'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Sales crash course'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Yet another course on Sales'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Java in a nutshell'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Learn Java in 21 days'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Ruby programming language'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'DDH sales Ruby, but could you buy it?'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Sales matter'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Really?'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'History in 3 pages'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Can you learn history in 3 pages?'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Mastering Git'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Git history will no longer bother you'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Cooking like a boss'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Be the next master chef'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Master Chef 3.0'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Cooking revisited'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Functional Programming in a nutshell'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Learn FP in 4 days'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check the data was properly created:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eVkfMoxl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631802829883/tVvB-a46n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eVkfMoxl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631802829883/tVvB-a46n.png" alt="Screenshot 2021-09-16 at 15.32.50.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cool. Now, before going to "full-text search", let's perform a simple textual search as used in many SQL systems: &lt;a href="https://www.postgresql.org/docs/12/functions-matching.html"&gt;pattern matching&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#textual-search-using-like-and-ilike"&gt;
  &lt;/a&gt;
  Textual search using LIKE and ILIKE
&lt;/h3&gt;

&lt;p&gt;Textual search using LIKE is pretty straightforward as doing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; 
    &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; 
    &lt;span class="n"&gt;courses&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt;  
    &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="k"&gt;LIKE&lt;/span&gt; &lt;span class="s1"&gt;'%java%'&lt;/span&gt; &lt;span class="k"&gt;OR&lt;/span&gt; &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="k"&gt;LIKE&lt;/span&gt; &lt;span class="s1"&gt;'%java%'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But it returned no results, since the &lt;code&gt;LIKE&lt;/code&gt; is &lt;strong&gt;case-sensitive&lt;/strong&gt;, which means we have to specify the upcase letter as saved in the table:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="k"&gt;LIKE&lt;/span&gt; &lt;span class="s1"&gt;'%Java%'&lt;/span&gt; &lt;span class="k"&gt;OR&lt;/span&gt; &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="k"&gt;LIKE&lt;/span&gt; &lt;span class="s1"&gt;'%Java%'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;8   "Java in a nutshell"    "Learn Java in 21 days"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are lucky today, then let's use the &lt;code&gt;ILIKE&lt;/code&gt; which is &lt;strong&gt;case-insensitive&lt;/strong&gt;, so there's no need to upcase as it will perform pattern matching on either capital and non-capital letters:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="k"&gt;ILIKE&lt;/span&gt; &lt;span class="s1"&gt;'%java%'&lt;/span&gt; &lt;span class="k"&gt;OR&lt;/span&gt; &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="k"&gt;ILIKE&lt;/span&gt; &lt;span class="s1"&gt;'%java%'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;8   "Java in a nutshell"    "Learn Java in 21 days"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#considerations-on-likeilike"&gt;
  &lt;/a&gt;
  Considerations on LIKE/ILIKE
&lt;/h4&gt;

&lt;p&gt;Many systems use the &lt;em&gt;pattern matching&lt;/em&gt; feature to implement very simple text searches. It can be enough for many scenarios but the more the platform grows in demanding users, the more search needs to return &lt;strong&gt;better&lt;/strong&gt; results, with a more accurate relevance and ranking. &lt;/p&gt;

&lt;p&gt;According to the &lt;a href="https://www.postgresql.org/docs/13/textsearch-intro.html"&gt;official Postgres documentation&lt;/a&gt;, the pattern matching &lt;code&gt;LIKE | ILIKE&lt;/code&gt; lacks essential properties required by modern systems:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;They provide no ordering (ranking) of search results, which makes them ineffective when thousands of matching documents are found.&lt;/p&gt;

&lt;p&gt;They tend to be slow because there is no index support, so they must process all documents for every search.&lt;/p&gt;

&lt;p&gt;There is no linguistic support, even for English. Regular expressions are not sufficient because they cannot easily handle derived words...&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For a more practical example, and being that we give more relevance for the &lt;em&gt;title over description&lt;/em&gt;, let's see in action the &lt;code&gt;ILIKE&lt;/code&gt; lacking such a requirement:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;courses&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="k"&gt;ILIKE&lt;/span&gt; &lt;span class="s1"&gt;'%sales%'&lt;/span&gt; &lt;span class="k"&gt;OR&lt;/span&gt; &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="k"&gt;ILIKE&lt;/span&gt; &lt;span class="s1"&gt;'%sales%'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qXKqanP6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631806733291/r_xe-29yG.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qXKqanP6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631806733291/r_xe-29yG.png" alt="Screenshot 2021-09-16 at 16.38.31.png"&gt;&lt;/a&gt;&lt;br&gt;
Not good. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;We want the course 10, which contains the word "Sales" in its title, to appear before the course 9, which holds the word in its description.&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;Furthermore, which would be our &lt;strong&gt;order criteria&lt;/strong&gt;? How about ordering by a "score" so we can build a rank of our results?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Full-text search for the rescue&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#fulltext-search-in-postgresql"&gt;
  &lt;/a&gt;
  Full-text search in PostgreSQL
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Full-text searching&lt;/strong&gt; (FTS) allows documents to be preprocessed and an index saved for later rapid searching and ranking. Please refer to the &lt;a href="https://www.postgresql.org/docs/13/textsearch-intro.html"&gt;official documentation&lt;/a&gt; which is quite complete and provides all the information needed to understand and implement a FTS. &lt;/p&gt;

&lt;p&gt;The main building blocks for FTS in PG (Postgres) are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;tsvector&lt;/code&gt;, which represents a searchable &lt;strong&gt;document&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;tsquery&lt;/code&gt;, which is the &lt;strong&gt;search query&lt;/strong&gt; to perform against a document&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#tsvector"&gt;
  &lt;/a&gt;
  tsvector
&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;to_tsvector&lt;/code&gt; function parses an input text and converts it to the search type that represents a searchable document. For instance:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;to_tsvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Java in a nutshell'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...will give the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"'java':1 'nutshel':4"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;the result is a list of lexemes ready to be searched&lt;/li&gt;
&lt;li&gt;stop words ("in", "a", "the", etc) were removed&lt;/li&gt;
&lt;li&gt;the numbers are the position of the lexemes in the document: &lt;code&gt;java:1&lt;/code&gt; starts at the 1st position whereas &lt;code&gt;nutshell:4&lt;/code&gt; starts at the 4th position&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#tsquery"&gt;
  &lt;/a&gt;
  tsquery
&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;to_tsquery&lt;/code&gt; function parses an input text and converts it to the search type that represents a query. For instance, the user wants to search "java in a nutshell":&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;to_tsquery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'java &amp;amp; in &amp;amp; a &amp;amp; nutshell'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...will give the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"'java' &amp;amp; 'nutshel'"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;the result is a list of tokens ready to be queried&lt;/li&gt;
&lt;li&gt;stop words ("in", "a", "the", etc) were removed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, how to match a query against a document? &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-operator"&gt;
  &lt;/a&gt;
  The @@ operator
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;@@&lt;/code&gt;  operator allows to match a query against a document and returns true or false. Simple as that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* true */&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;to_tsquery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'java &amp;amp; in &amp;amp; a &amp;amp; nutshell'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;@@&lt;/span&gt; &lt;span class="n"&gt;to_tsvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Java in a nutshell'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 

&lt;span class="cm"&gt;/* true */&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;to_tsquery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'java'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;@@&lt;/span&gt; &lt;span class="n"&gt;to_tsvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Java in a nutshell'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 

&lt;span class="cm"&gt;/* true */&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;to_tsquery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'nutshell'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;@@&lt;/span&gt; &lt;span class="n"&gt;to_tsvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Java in a nutshell'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 

&lt;span class="cm"&gt;/* false */&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;to_tsquery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'batatas'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;@@&lt;/span&gt; &lt;span class="n"&gt;to_tsvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Java in a nutshell'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yay! As for now, we have the essential requirements to implement FTS on our courses table. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#search-against-courses"&gt;
  &lt;/a&gt;
  Search against courses
&lt;/h3&gt;

&lt;p&gt;Let's perform the basic full-text search, looking for courses containing "java" in their titles:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; 
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;courses&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;to_tsquery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'java'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;@@&lt;/span&gt; &lt;span class="n"&gt;to_tsvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;8   "Java in a nutshell"    "Learn Java in 21 days"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great. Let's perform the search "sales" against the title and description as well:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; 
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;courses&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;to_tsquery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'sales'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;@@&lt;/span&gt; &lt;span class="n"&gt;to_tsvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; 
&lt;span class="k"&gt;FROM&lt;/span&gt; 
    &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;to_tsvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;document&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;to_tsquery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'sales'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;@@&lt;/span&gt; &lt;span class="n"&gt;document&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0JIfTu2g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631807292499/XK_VPsV6H.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0JIfTu2g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631807292499/XK_VPsV6H.png" alt="Screenshot 2021-09-16 at 16.38.31.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At this moment, the results are similar to our &lt;code&gt;ILIKE&lt;/code&gt; version. Let's see where the FTS really shines. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#tsrank"&gt;
  &lt;/a&gt;
  ts_rank
&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;ts_rank&lt;/code&gt; function takes the document and query as arguments attempts to measure &lt;strong&gt;how relevant are documents to a particular query&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;
    &lt;span class="n"&gt;ts_rank&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;to_tsvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Java in a nutshell'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;to_tsquery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'java'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"0.06079271"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Checking multiple variations:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* 0.06079271 */&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;ts_rank&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_tsvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Java in a nutshell'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;to_tsquery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'nutshell'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; 

&lt;span class="cm"&gt;/* 0 */&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;ts_rank&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_tsvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Java in a nutshell'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;to_tsquery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'batatas'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A more sophisticated simulating a rank of potential titles and descriptions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;
    &lt;span class="n"&gt;ts_rank&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;to_tsvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Java in a nutshell'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;to_tsquery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'java'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;rank_title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;ts_rank&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;to_tsvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Learn in 21 days'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;to_tsquery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'java'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;rank_description&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yk8bDgmN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631808567146/d36sLDZap.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yk8bDgmN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631808567146/d36sLDZap.png" alt="Screenshot 2021-09-16 at 17.09.11.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Great! Now we have all the needed to implement a better textual search with proper ranking against our courses.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#search-courses-with-ranking"&gt;
  &lt;/a&gt;
  Search courses with ranking
&lt;/h3&gt;

&lt;p&gt;Ranking results means that we have to split the document in different rankings so we can perform &lt;strong&gt;ordering&lt;/strong&gt; accordingly. &lt;/p&gt;

&lt;p&gt;We basically need to export the ranking fields:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;ts_rank&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_tsvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;rank_title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;ts_rank&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_tsvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;rank_description&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...and perform the query against the whole document containing either title and description:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt; 
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;to_tsvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;to_tsquery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'sales'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;@@&lt;/span&gt; &lt;span class="n"&gt;document&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we are ready to perform the correct ordering:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;rank_description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rank_title&lt;/span&gt; &lt;span class="k"&gt;DESC&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-implementation-with-ranking"&gt;
  &lt;/a&gt;
  The implementation with ranking
&lt;/h3&gt;

&lt;p&gt;So here we have a implementation of a &lt;strong&gt;full-text search with ranking in PostgreSQL&lt;/strong&gt; in just 12 lines of SQL code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; 
    &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;ts_rank&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_tsvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;rank_title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;ts_rank&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_tsvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;rank_description&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; 
    &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;to_tsvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;to_tsquery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'sales'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;@@&lt;/span&gt; &lt;span class="n"&gt;document&lt;/span&gt;
&lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;rank_description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rank_title&lt;/span&gt; &lt;span class="k"&gt;DESC&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K6cx5LGM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631809230312/sihdXAjU-.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K6cx5LGM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631809230312/sihdXAjU-.png" alt="Screenshot 2021-09-16 at 17.20.19.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#is-it-fast"&gt;
  &lt;/a&gt;
  Is it fast?
&lt;/h3&gt;

&lt;p&gt;Depending on the amount of data, such a query may face performance issues, since it needs to convert data to searchable documents &lt;strong&gt;on the fly&lt;/strong&gt;. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#index-for-the-rescue"&gt;
  &lt;/a&gt;
  Index for the rescue
&lt;/h4&gt;

&lt;p&gt;Creating the &lt;a href="https://www.postgresql.org/docs/13/textsearch-indexes.html"&gt;proper index&lt;/a&gt; (a GIN index for text search), it can improve the performance by orders of magnitude. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/leandronsp/yacs"&gt;In this project&lt;/a&gt; I made a proof of concept in which 12 millions of cities could be searched in just a &lt;strong&gt;few milliseconds&lt;/strong&gt;. GIN index only. No materialized view needed. &lt;/p&gt;

&lt;p&gt;Let's see how a GIN index could be created for our courses table:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;INDEX&lt;/span&gt; &lt;span class="n"&gt;courses_search_idx&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="n"&gt;courses&lt;/span&gt; &lt;span class="k"&gt;USING&lt;/span&gt; &lt;span class="n"&gt;GIN&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_tsvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we are good. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Just sit down, relax and enjoy a search across millions of courses with no performance issues.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-about-fuzzy-searching"&gt;
  &lt;/a&gt;
  How about fuzzy searching?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Approximate_string_matching"&gt;Fuzzy search&lt;/a&gt;, or "string approximation matching", is the technique used to calculate the approximation of two strings. It's commonly used to anticipate mispellings on the queries and so on.&lt;/p&gt;

&lt;p&gt;Unfortunately, the Postgres built-in FTS doesn't support fuzzy searching, however, by using an extension, we can combine full-text search and fuzzy search in the same SQL query.&lt;/p&gt;

&lt;p&gt;Let's create the extension:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="n"&gt;EXTENSION&lt;/span&gt; &lt;span class="n"&gt;pg_trgm&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can see the differences in action:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; 
    &lt;span class="n"&gt;to_tsquery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'jova'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;@@&lt;/span&gt; &lt;span class="n"&gt;to_tsvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Java in a nutshell'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="k"&gt;search&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;SIMILARITY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'jova'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Java in a nutshell'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;similarity&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dk8WraIR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631810732379/g20lyQ171.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dk8WraIR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631810732379/g20lyQ171.png" alt="Screenshot 2021-09-16 at 17.45.23.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note that searching for "jova" against a a text "Java in a nutshell", the full-text search match operator returns false whilst the &lt;code&gt;SIMILARITY&lt;/code&gt; function, provided by the &lt;code&gt;pg_trgm&lt;/code&gt; extension, returns a value &lt;code&gt;0.09&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;*&lt;em&gt;In a scale from 0 to 1, similar strings tend to be close to 1. *&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-final-implementation-using-ranking-and-fuzzy-search"&gt;
  &lt;/a&gt;
  The final implementation, using ranking and fuzzy search
&lt;/h3&gt;

&lt;p&gt;So here we have a implementation of a &lt;strong&gt;full-text search with ranking and fuzzy search in PostgreSQL&lt;/strong&gt; in just 16 lines of SQL code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; 
    &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;rank_title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;rank_description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;similarity&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; 
    &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;to_tsvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;to_tsquery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'curse'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;NULLIF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ts_rank&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_tsvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;rank_title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;NULLIF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ts_rank&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_tsvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;rank_description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;SIMILARITY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'curse'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;similarity&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;@@&lt;/span&gt; &lt;span class="n"&gt;document&lt;/span&gt; &lt;span class="k"&gt;OR&lt;/span&gt; &lt;span class="n"&gt;similarity&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;rank_title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rank_description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;similarity&lt;/span&gt; &lt;span class="k"&gt;DESC&lt;/span&gt; &lt;span class="n"&gt;NULLS&lt;/span&gt; &lt;span class="k"&gt;LAST&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Highlights:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;we apply the similarity function against the title and description&lt;/li&gt;
&lt;li&gt;when the search has no match, we filter the results which have a similarity above 0&lt;/li&gt;
&lt;li&gt;added the &lt;code&gt;NULLIF&lt;/code&gt; function so when the &lt;code&gt;rank_*&lt;/code&gt; is zero, we cast the value to &lt;code&gt;NULL&lt;/code&gt; so the &lt;strong&gt;ordering&lt;/strong&gt; can consider NULL values to be the last in ranking results&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This guide was quite heavy but it covered only the very basics of full-text search in Postgres. In the official documentation you can see much more features and capabilities, such as &lt;em&gt;highlight documents, weights, query tree, query rewrite, dictionaries, triggers&lt;/em&gt; and so on. &lt;/p&gt;

&lt;p&gt;It's reliable and fast, which means that it can be used in a wide range of requirements, from simple search systems to complex ones. In case you already have PostgreSQL in your stack, it's worth considering to experiment on it before going to an external/expensive alternative which will demand more attention to operations complexity. &lt;/p&gt;

&lt;p&gt;I hope you could enjoy this ride of implementing FTS in PostgreSQL. &lt;em&gt;Happy searching!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>postgres</category>
    </item>
    <item>
      <title>Basic TypeScript {Day - 28}</title>
      <author>Al Siam</author>
      <pubDate>Thu, 16 Sep 2021 17:58:47 +0000</pubDate>
      <link>https://dev.to/alsiamworld/basic-typescript-day-28-1f80</link>
      <guid>https://dev.to/alsiamworld/basic-typescript-day-28-1f80</guid>
      <description>&lt;h1&gt;
  &lt;a href="#100daysofcode-day-28"&gt;
  &lt;/a&gt;
  100daysofcode {Day - 28}
&lt;/h1&gt;

&lt;p&gt;Gaining basic knowledge about TypeScript...!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KmtgSDxB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k64o60tsrwwv9diu6kf3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KmtgSDxB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k64o60tsrwwv9diu6kf3.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>javascript</category>
    </item>
    <item>
      <title>8 Things I've Learned Working in a Legacy Codebase</title>
      <author>Abbey Perini</author>
      <pubDate>Thu, 16 Sep 2021 17:51:33 +0000</pubDate>
      <link>https://dev.to/abbeyperini/8-things-i-ve-learned-working-in-a-legacy-codebase-4h6c</link>
      <guid>https://dev.to/abbeyperini/8-things-i-ve-learned-working-in-a-legacy-codebase-4h6c</guid>
      <description>&lt;p&gt;My first dev job threw me into a huge legacy codebase. My last big ticket involved getting a modern library to work within the deprecated UI framework it uses. After that journey, I wanted to share some tips I've learned along the way.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#1-learn-the-codebase-by-fixing-bugs"&gt;
  &lt;/a&gt;
  (1) Learn the codebase by fixing bugs.
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yTQL8rSf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/8Tr3SyO82lkAAAAM/bug-eating.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yTQL8rSf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/8Tr3SyO82lkAAAAM/bug-eating.gif" alt="A cockroach sits at a table in the Krusty Krab, happily eating a Krabby Patty"&gt;&lt;/a&gt;&lt;br&gt;
Ideally your company will have good documentation, but often legacy codebases are the ones that used to be maintained by that one developer who left. Reading through the entire codebase to get up to speed may be nigh impossible. I've found fixing bugs is a great way to get to know your app's "personality" while getting more familiar with its workflows. Even just reading backlog tickets gives you an idea of the company's priorities, abbreviations, and what the users want fixed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-tutorials-and-reference-materials-may-be-hard-to-find"&gt;
  &lt;/a&gt;
  (2) Tutorials and reference materials may be hard to find.
&lt;/h3&gt;

&lt;p&gt;This is especially true if any of the packages, libraries, or tools in the codebase have been deprecated. Get familiar with the versions of what you have installed. Include the version in your Googling. Even if you can find tutorials, your app may be written in a different design pattern. Plus, a lot of tutorials act like the app is built around the tool they're demonstrating. Getting something to work inside an established, opinionated app is a whole new ballgame. Don't be afraid to try literally any idea that occurs to you.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-youll-want-to-lean-on-people-who-have-more-experience-with-the-app"&gt;
  &lt;/a&gt;
  (3) You'll want to lean on people who have more experience with the app.
&lt;/h3&gt;

&lt;p&gt;This doesn't just mean other devs. QA, data science, and project managers who have worked on the app for years will know things that will help you immensely. When I get stuck trying to find where a bug is coming from, I'll often ask them "Is there a workflow that could affect this that I'm missing?" Sometimes, knowing how a feature was implemented will give you an idea of why a bug has only started happening now, was just reported, or not a priority to fix.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-always-check-to-see-if-someone-has-solved-the-problem-previously-before-writing-a-whole-new-way-to-solve-it"&gt;
  &lt;/a&gt;
  (4) Always check to see if someone has solved the problem previously before writing a whole new way to solve it.
&lt;/h3&gt;

&lt;p&gt;Lean on utilities and code previously written. If you're not adding in a new type of data, the interactions with the database you're trying to implement probably already exist. Don't forget to look at workflows outside of the one you're currently trying to fix. Previous developers were only looking at their tickets not yours.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-try-not-to-ever-duplicate-code"&gt;
  &lt;/a&gt;
  (5) Try not to ever duplicate code.
&lt;/h3&gt;

&lt;p&gt;Get familiar with your codebase's utilities and import methods so you can use the already written code you need anywhere in the codebase. No need to add complexity or have to change things in multiple places. A legacy codebase that has already had plenty of developers on it probably has more than one example of both. Plus, they may have known about a quirk in the system you don't.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-on-the-flip-side-lots-of-utilities-means-lots-of-abstraction"&gt;
  &lt;/a&gt;
  (6) On the flip side, lots of utilities means lots of abstraction.
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8PozYIzq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/88u7xuipr0mj1kxlwkn5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8PozYIzq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/88u7xuipr0mj1kxlwkn5.png" alt="A seagull and crab discuss the crab's mysterious journey in a small row boat, ending with &amp;quot;any details will remain a mystery.&amp;quot;"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Source: &lt;a href="http://www.poorlydrawnlines.com/comic/your-story/"&gt;http://www.poorlydrawnlines.com/comic/your-story/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Functions that rely on the established utilities can become very dense to read from start to finish. It's ok to only have a high level understanding of what a utility does. If you ever need to implement it in another place or something has gone horribly wrong within it, that's the time to dig deep into how it works. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-if-you-dont-have-an-answer-for-how-youd-improve-it-dont-complain-about-it"&gt;
  &lt;/a&gt;
  (7) If you don't have an answer for how you'd improve it, don't complain about it.
&lt;/h3&gt;

&lt;p&gt;You don't know the time constraints that developer was under or if they were told to go in a direction they didn't personally agree with. If you do have an answer, discuss with your team whether that's a priority you can dedicate time to. If it's a small ticket or something you can break into small tickets, you can use those passion projects as rewards for completing the bugs that really challenged you or didn't challenge you at all.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-lets-limit-the-scope-of-this-is-your-new-motto"&gt;
  &lt;/a&gt;
  (8) "Let's limit the scope of this." is your new motto.
&lt;/h3&gt;

&lt;p&gt;You want to try to affect as few workflows as possible. A legacy codebase is usually pretty stable and something people are counting on to work. Sweeping reform is tempting, but often your job is just to patch up the small holes.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>lessons</category>
      <category>todayilearned</category>
    </item>
    <item>
      <title>Guide to an Effective Code Review</title>
      <author>Mrinalini Sugosh (Mrina)</author>
      <pubDate>Thu, 16 Sep 2021 17:29:18 +0000</pubDate>
      <link>https://dev.to/mrinasugosh/guide-to-an-effective-code-review-p15</link>
      <guid>https://dev.to/mrinasugosh/guide-to-an-effective-code-review-p15</guid>
      <description>&lt;p&gt;Sometimes, a code review can leave both the author and the reviewer with a great deal of frustration. But it doesn’t have to be that way.&lt;/p&gt;

&lt;p&gt;In this blog, I’ll share some of the things that I’ve learned over the years reviewing code as a developer. Although I’ll touch on some things that affect the author of the code, I’m writing mainly from a code reviewer’s perspective.&lt;/p&gt;

&lt;p&gt;But before I begin, let me tell you a story…&lt;br&gt;
As a developer at one of my previous teams, I regularly performed code reviews on my coworkers’ pull requests. When I was asked to mentor a team of interns, I had one intern in particular who, whenever I made any comments on their pull requests, just couldn’t take constructive criticism … or so I thought.&lt;/p&gt;

&lt;p&gt;It turns out that I wasn’t very good at giving constructive criticism. I thought all I had to do was point out the issues in a cold, to-the-point way. That works fine for some people, but not for others.&lt;/p&gt;

&lt;p&gt;Something had to be done, and it got me thinking about how to perform an effective code review.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#critique-dont-criticize"&gt;
  &lt;/a&gt;
  Critique, don’t criticize
&lt;/h2&gt;

&lt;p&gt;All too often I hear developers say, “I don’t want to be the one who criticizes another person’s code.” The word “criticize” comes from the same root word as “critical” and “critique.” To critique something is not a bad thing. So the next time you do a code review, try not to think of it as criticizing; think of it as an honest and helpful critique of someone’s work.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cri·tique /kriˈtēk/

an analysis or assessment of something, typically art, literature, or music
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#be-kind"&gt;
  &lt;/a&gt;
  Be kind
&lt;/h2&gt;

&lt;p&gt;Choose your words wisely. Use suggestive, collaborative and encouraging words instead of demanding something.&lt;/p&gt;

&lt;p&gt;For example, instead of commenting:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;“Change this to use a temporary variable.”
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You might want to say instead:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;“This might be more readable if we changed this to use a temporary variable like `let`.”
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See how this changed the tone of the discussion? It brings the author into the conversation. Who knows, the simple gesture of asking may even spark a better alternative solution.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#its-everyones-code"&gt;
  &lt;/a&gt;
  It’s everyone’s code
&lt;/h2&gt;

&lt;p&gt;When you work on a team, the responsibility of gating dirty code from getting into the code repository is shared by everyone. Some of the most valuable advice I give new developers is to treat the source code not as your code, or their code, but as "our" code.&lt;/p&gt;

&lt;p&gt;At some point down the road, you may find yourself working on code that another developer is checking in today. It’s not only your right, but your obligation, to make sure that the code is of the highest quality.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#let-your-tools-be-the-bad-guy"&gt;
  &lt;/a&gt;
  Let your tools be the "bad" guy
&lt;/h2&gt;

&lt;p&gt;The last thing that you want to do as a code reviewer is to comment that the author forgot a semi-colon, or a space before a parenthesis. It is a waste of your time. You will most likely have more helpful, substantive, and encouraging things to say in your review. Leave the rest to automated services.&lt;/p&gt;

&lt;p&gt;The modern software development world has many tools to automate what used to be a manual process of reviewing code. There are a number of commercial and free services (like TravisCI and CircleCI) that can perform unit tests before a human ever needs to get involved.&lt;/p&gt;

&lt;p&gt;If your organization has rules about code style, let an automated linter do the complaining (ie ESLint for JS projects). Most of these services are free for personal or open source use. Use them!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-be-afraid-to-be-wrong"&gt;
  &lt;/a&gt;
  Don’t be afraid to be wrong
&lt;/h2&gt;

&lt;p&gt;If you see something in the code that doesn’t look right, but you’re not quite sure, go ahead and ask. It’s OK to be wrong. Just leave a comment and ask.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;“Are you sure that this shouldn’t return a PENDING status instead?”
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It causes the author to recheck their work. They are, after all, the subject matter expert for the PR. You may get a reply like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;“Yes, I’m sure. LOADED is the correct return value here.”
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that’s fine. In fact, you just learned something. But who knows – you may get a reply such as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;“You’re right. This should return PENDING. Good catch!”
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Congratulations. In this scenario, you just caught a possible production bug!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#never-just-rubberstamp-it"&gt;
  &lt;/a&gt;
  Never just rubber-stamp it!
&lt;/h2&gt;

&lt;p&gt;Here’s a scenario for you. You’ve been asked to do a code review for a highly respected senior developer on the team. You go to this person all the time for help and advice. “Their code can’t possibly be wrong,” you say to yourself. “I should just approve it.”&lt;/p&gt;

&lt;p&gt;Here’s another scenario. A fellow intern or co-worker just did you a favor last week. Now they are under pressure to get their latest feature out the door, so they come to you and say: “This pull request is pretty minor. I refactored a few things and added a few files. No big deal. Just approve it for me, will ya?”&lt;/p&gt;

&lt;p&gt;The answer to both situations above is: No! Neither the skill level of the author nor the urgency of the situation matter. You should approach each code review with the same level of commitment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#give-helpful-suggestions"&gt;
  &lt;/a&gt;
  Give helpful suggestions
&lt;/h2&gt;

&lt;p&gt;If you are suggesting a change, please don’t just describe your issues, or say something like, “This is all wrong.” Try to give practical code samples or links to supporting documentation where applicable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#teamwork-makes-the-code-work"&gt;
  &lt;/a&gt;
  Teamwork makes the code work
&lt;/h2&gt;

&lt;p&gt;Too often, developers fail to remember that coding is a partnership. You should give the author every opportunity to succeed. Don’t make them guess what you are thinking. You should always treat the developer with as much respect as you do the code, and vice versa. Writing code in an organization is a team sport.&lt;/p&gt;

&lt;p&gt;Remember… There is no “I” in “CODE.”&lt;/p&gt;

&lt;p&gt;==== Follow me on Social Media(&lt;code&gt;@mrinasugosh&lt;/code&gt;) ====&lt;br&gt;
Dev.to: &lt;a class="mentioned-user" href="https://dev.to/mrinasugosh"&gt;@mrinasugosh&lt;/a&gt;
 &lt;br&gt;
Github: &lt;a href="https://github.com/mrinasugosh"&gt;@mrinasugosh&lt;/a&gt;&lt;br&gt;
Twitter: &lt;a href="https://twitter.com/mrinasugosh"&gt;@mrinasugosh&lt;/a&gt;&lt;br&gt;
LinkedIn: &lt;a href="https://www.linkedin.com/in/mrinasugosh/"&gt;@mrinasugosh&lt;/a&gt;&lt;/p&gt;

</description>
      <category>codereview</category>
      <category>codenewbie</category>
      <category>codequality</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Standard Banking Demo: Discovering Entando CMS Components</title>
      <author>Anthony Viard 🥑</author>
      <pubDate>Thu, 16 Sep 2021 16:53:02 +0000</pubDate>
      <link>https://dev.to/entando/standard-banking-demo-discovering-entando-cms-components-4o9j</link>
      <guid>https://dev.to/entando/standard-banking-demo-discovering-entando-cms-components-4o9j</guid>
      <description>&lt;p&gt;Hey my fellow developers,&lt;/p&gt;

&lt;p&gt;Here’s the last blog post in the Standard Banking Demo series. After a deep dive into the microservices and micro frontends, we are now discovering the CMS components that make up this banking application and how we can manage our content to provide a great user experience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#content-management-the-standard-demo-banner"&gt;
  &lt;/a&gt;
  Content Management: The Standard Demo Banner
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#compose-components-to-display-a-banner"&gt;
  &lt;/a&gt;
  Compose Components to Display a Banner
&lt;/h3&gt;

&lt;p&gt;In the Standard Banking Demo, banners are defined to display pieces of content in pages rendered in a modern website style.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pElTIBLS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g6fk7vuc1rwecgecxo1z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pElTIBLS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g6fk7vuc1rwecgecxo1z.png" alt="image4_2_d0"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will use this content type to explain how an Entando application leverages CMS components to build composable applications.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cms-component-architecture"&gt;
  &lt;/a&gt;
  CMS component architecture
&lt;/h3&gt;

&lt;p&gt;To manage content, we need to know how to define it (the Type), how to display it (the Model), and how to create a new instance (the Content).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ccpJcVoH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lmaq2o61jrqah5lcvw89.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ccpJcVoH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lmaq2o61jrqah5lcvw89.png" alt="image2_2_d0"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Content Type&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The ContentType defines the attributes available when adding a new instance of content. The type is defined by a name and a code and defines fields and rules to apply.&lt;/p&gt;

&lt;p&gt;Each attribute has a code, a name, and a type. Attributes can be mandatory and be used to filter content. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Content Template&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Content Template defines how a ContentType is displayed. A ContentType can be displayed in different ways by creating additional Content Templates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Content&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Content refers to a piece (or instance) of content and is based on a ContentType. The Content defines the values of the attributes for a ContentType.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Assets&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A collection of assets you can use in a piece of content and share across multiple content entries, e.g. an image.&lt;/p&gt;

&lt;p&gt;When a page is designed, the Content widget is configured to render a piece of content based on the Content Template.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#compose-components-in-the-app-builder"&gt;
  &lt;/a&gt;
  Compose components in the App Builder
&lt;/h3&gt;

&lt;p&gt;In the Page Designer, this content is placed in a frame as a “Content” widget. Here in red, the Content widget is used to display the main banner on the homepage.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qF6CAgv1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2xnr2m93k8xcr8gja73k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qF6CAgv1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2xnr2m93k8xcr8gja73k.png" alt="image5_2_d0"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;This widget is configured to display the content you want to display along with the desired content template.&lt;/p&gt;

&lt;p&gt;In this case, the Home SD page contains multiple Content widgets that all use the same content type (SDB).&lt;/p&gt;

&lt;p&gt;Although the Content Type is the same, each section is rendered differently by choosing different Content Templates. There is a content template for displaying the main banner, another for displaying a light background, and another to render an accordion inside the banner.&lt;/p&gt;

&lt;p&gt;The content to display can be selected from the Settings menu in the kebab menu.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VHrFAf7z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5vci0hfte2d2jvx9padf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VHrFAf7z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5vci0hfte2d2jvx9padf.png" alt="image1_2_d0"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then we can select the content we want to display (displayed below in blue) and the template we want to use for this instance of content (in orange).&lt;/p&gt;

&lt;p&gt;Only a template linked to the same content type can be used.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W5qZqT3m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/59lv6ew3owhix9pywz21.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W5qZqT3m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/59lv6ew3owhix9pywz21.png" alt="image3_2_d0"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All of the CMS components are defined as code in the Standard Banking Demo.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cms-components-as-code"&gt;
  &lt;/a&gt;
  CMS Components as Code
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#the-standard-demo-banner-content-type"&gt;
  &lt;/a&gt;
  The Standard Demo Banner: Content Type
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;SDB&lt;/span&gt;
&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Standard Demo Banners&lt;/span&gt;
&lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;0'&lt;/span&gt;
&lt;span class="na"&gt;attributes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
 &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;title&lt;/span&gt;
   &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Text&lt;/span&gt;
   &lt;span class="na"&gt;names&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
     &lt;span class="na"&gt;en&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;title&lt;/span&gt;
   &lt;span class="na"&gt;roles&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[]&lt;/span&gt;
   &lt;span class="na"&gt;disablingCodes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[]&lt;/span&gt;
   &lt;span class="na"&gt;mandatory&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
   &lt;span class="na"&gt;listFilter&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
   &lt;span class="na"&gt;indexable&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
   &lt;span class="na"&gt;validationRules&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
     &lt;span class="na"&gt;minLength&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;null&lt;/span&gt;
     &lt;span class="na"&gt;maxLength&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;null&lt;/span&gt;
     &lt;span class="na"&gt;regex&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;null&lt;/span&gt;
     &lt;span class="na"&gt;rangeStartString&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;null&lt;/span&gt;
     &lt;span class="na"&gt;rangeEndString&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;null&lt;/span&gt;
     &lt;span class="na"&gt;rangeStartStringAttribute&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;null&lt;/span&gt;
     &lt;span class="na"&gt;rangeEndStringAttribute&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;null&lt;/span&gt;
     &lt;span class="na"&gt;equalString&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;null&lt;/span&gt;
     &lt;span class="na"&gt;equalStringAttribute&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;null&lt;/span&gt;
     &lt;span class="na"&gt;rangeStartDate&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;null&lt;/span&gt;
     &lt;span class="na"&gt;rangeEndDate&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;null&lt;/span&gt;
     &lt;span class="na"&gt;rangeStartDateAttribute&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;null&lt;/span&gt;
     &lt;span class="na"&gt;rangeEndDateAttribute&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;null&lt;/span&gt;
     &lt;span class="na"&gt;equalDate&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;null&lt;/span&gt;
     &lt;span class="na"&gt;equalDateAttribute&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;null&lt;/span&gt;
     &lt;span class="na"&gt;rangeStartNumber&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;null&lt;/span&gt;
     &lt;span class="na"&gt;rangeStartNumberAttribute&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;null&lt;/span&gt;
     &lt;span class="na"&gt;rangeEndNumber&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;null&lt;/span&gt;
     &lt;span class="na"&gt;rangeEndNumberAttribute&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;null&lt;/span&gt;
     &lt;span class="na"&gt;equalNumber&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;null&lt;/span&gt;
     &lt;span class="na"&gt;equalNumberAttribute&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;null&lt;/span&gt;
     &lt;span class="na"&gt;ognlValidation&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;null&lt;/span&gt;
     &lt;span class="s"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#the-standard-demo-banner-template"&gt;
  &lt;/a&gt;
  The Standard Demo Banner: Template
&lt;/h4&gt;

&lt;p&gt;The template references the content type through the &lt;em&gt;contentType&lt;/em&gt; field: &lt;code&gt;SDB&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;id: 1
contentType: SDB
description: Main Banner
contentShape: |-
 &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"main-banner"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"row"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"col-lg-6 col-xs-12 main-banner-center"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
             &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-wrapper"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                 &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt; $content.title.text&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
                 &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;$content.subtitle.text&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
             &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#the-standard-demo-banner-content"&gt;
  &lt;/a&gt;
  The Standard Demo Banner: Content
&lt;/h4&gt;

&lt;p&gt;The content references the content type through the &lt;em&gt;typeCode&lt;/em&gt; field: &lt;code&gt;SDB&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;SDB37&lt;/span&gt;
&lt;span class="na"&gt;typeCode&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;SDB&lt;/span&gt;
&lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;main-banner&lt;/span&gt;
&lt;span class="na"&gt;mainGroup&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;free&lt;/span&gt;
&lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;PUBLIC&lt;/span&gt;
&lt;span class="na"&gt;attributes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
 &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;title&lt;/span&gt;
   &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;null&lt;/span&gt;
   &lt;span class="na"&gt;values&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
     &lt;span class="na"&gt;en&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;A Better Way to Bank&lt;/span&gt;
   &lt;span class="na"&gt;elements&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[]&lt;/span&gt;
   &lt;span class="na"&gt;compositeelements&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[]&lt;/span&gt;
   &lt;span class="na"&gt;listelements&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;{}&lt;/span&gt;
   &lt;span class="s"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-standard-demo-homepage"&gt;
  &lt;/a&gt;
  The Standard Demo Homepage
&lt;/h3&gt;

&lt;p&gt;The page template defines the widgets on the page like the Content widget: &lt;code&gt;code: content_viewer&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The Content widget is then configured to display the top banner using the contentId &lt;code&gt;SDB37&lt;/code&gt; and the template &lt;code&gt;'modelId: 1'&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;homepagesd&lt;/span&gt;
&lt;span class="na"&gt;parentCode&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;homepage&lt;/span&gt;
&lt;span class="na"&gt;titles&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
 &lt;span class="na"&gt;en&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Home SD&lt;/span&gt;
 &lt;span class="na"&gt;it&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Home SD&lt;/span&gt;
&lt;span class="na"&gt;pageModel&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;seed_home&lt;/span&gt;
&lt;span class="na"&gt;ownerGroup&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;free&lt;/span&gt;
&lt;span class="na"&gt;joinGroups&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[]&lt;/span&gt;
&lt;span class="na"&gt;displayedInMenu&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
&lt;span class="na"&gt;seo&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
&lt;span class="na"&gt;charset&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;utf8&lt;/span&gt;
&lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;published&lt;/span&gt;
&lt;span class="na"&gt;widgets&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
 &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Brand-Logo&lt;/span&gt;
   &lt;span class="na"&gt;config&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;null&lt;/span&gt;
   &lt;span class="na"&gt;pos&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
 &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Login_buttons&lt;/span&gt;
   &lt;span class="na"&gt;config&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;null&lt;/span&gt;
   &lt;span class="na"&gt;pos&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;
 &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;content_viewer&lt;/span&gt;
   &lt;span class="na"&gt;config&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
     &lt;span class="na"&gt;contentDescription&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;main-banner&lt;/span&gt;
     &lt;span class="na"&gt;modelId&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;1'&lt;/span&gt;
     &lt;span class="na"&gt;ownerGroup&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;free&lt;/span&gt;
     &lt;span class="na"&gt;contentId&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;SDB37&lt;/span&gt;
     &lt;span class="na"&gt;joinGroups&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;[]'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This series is ending with the CMS Standard Banking Demo overview, it provides a working example of how traditional micro frontends can be composed alongside CMS components. The banner example is great to understand how a given content type can be used in multiple ways to render different content using the same attributes and improve your capacity to deliver content quickly and easily.&lt;/p&gt;

&lt;p&gt;User-editable content can also be exported using the bundle export/import feature and managed as code along with micro frontends and microservices across multiple environments or clusters.&lt;/p&gt;

&lt;p&gt;Now it’s time to play with the Standard Banking Demo. Be sure to follow our &lt;a href="https://dev.entando.org/v6.3.2/tutorials/samples/install-standard-demo.html#introduction"&gt;documentation&lt;/a&gt; and reach out on the &lt;a href="https://forum.entando.org/c/getting-started/12"&gt;Entando forum&lt;/a&gt; for feedback.&lt;/p&gt;

</description>
      <category>cms</category>
      <category>contentmanagement</category>
    </item>
  </channel>
</rss>
