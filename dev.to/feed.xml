<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Introduction To Solidity</title>
      <author>Elegberun Olugbenga</author>
      <pubDate>Mon, 07 Jun 2021 16:18:18 +0000</pubDate>
      <link>https://dev.to/gbengelebs/introduction-to-solidity-228c</link>
      <guid>https://dev.to/gbengelebs/introduction-to-solidity-228c</guid>
      <description>&lt;p&gt;In the previous article we discussed about smart contracts and tokens. In this article I will be taking a look at solidity the language for programming smart contracts. Solidity is a high-level programming language designed for implementing smart contracts. It is statically-typed object-oriented(contract-oriented) language. Solidity is highly influenced by Python, c++, and JavaScript which runs on the Ethereum Virtual Machine(EVM). In this article we will provide an introduction into the solidity language.&lt;/p&gt;

&lt;p&gt;The first thing we need is an IDE to write our solidity code. One of the most popular development environments for programming solidity is the Remix IDE and it is what we will be using in this tutorial. Luckily we can access it online &lt;a href="https://remix.ethereum.org/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sol"&gt;
  &lt;/a&gt;
  .SOL
&lt;/h2&gt;

&lt;p&gt;Solidity Files are saved with the .sol extension to indicate that it is a solidity file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pragma"&gt;
  &lt;/a&gt;
  PRAGMA
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;- The first line of a solidity file is the pragma statement. It indicates the solidity version that is being used. It helps ensure compatibility in code files.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="k"&gt;pragma&lt;/span&gt; &lt;span class="n"&gt;solidity&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#contract"&gt;
  &lt;/a&gt;
  CONTRACT
&lt;/h2&gt;

&lt;p&gt;This keyword is used to create a smart contract. By convention the name of the contract is usually the name of the solidity file. Every function and variable declaration in the file will be encapsulated within the smart contract.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="k"&gt;contract&lt;/span&gt; &lt;span class="n"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; 
 &lt;span class="n"&gt;Functions&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Data&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#variables"&gt;
  &lt;/a&gt;
  VARIABLES
&lt;/h2&gt;

&lt;p&gt;variables are reserved memory locations to store value.&lt;br&gt;
You may like to store information of various data types like character, wide character, integer, floating point, double floating point, boolean etc. Based on the data type of a variable, the operating system allocates memory and decides what can be stored in the reserved memory.&lt;br&gt;
examples of variables are-- integer,string,bool.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#address"&gt;
  &lt;/a&gt;
  ADDRESS
&lt;/h2&gt;

&lt;p&gt;This is a variable type that holds the 20 byte value representing the size of an Ethereum address.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt; &lt;span class="kt"&gt;address&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x212&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#mapping-"&gt;
  &lt;/a&gt;
  MAPPING -
&lt;/h2&gt;

&lt;p&gt;A mapping holds a reference to a value. Below is the syntax. They act as hash tables which consist of key types and corresponding value type pairs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="k"&gt;mapping&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_KeyType&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_ValueType&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;mapping&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;uint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;balances&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This maps the address variable as a key to an integer variable and assigns the mapping to a public variable called balances.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w20kkPzi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5iu42j3qxdheb02lf1m8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w20kkPzi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5iu42j3qxdheb02lf1m8.png" alt="mapping"&gt;&lt;/a&gt;&lt;/p&gt;
https://medium.com/upstate-interactive/mappings-in-solidity-explained-in-under-two-minutes-ecba88aff96e



&lt;p&gt;We can assign a value to a key adress like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="n"&gt;balances&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;keyAddress&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Solidity supports. State,local and global variables.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;State Variables − Variables whose values are permanently stored in a contract storage.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="k"&gt;contract&lt;/span&gt; &lt;span class="n"&gt;SolidityTest&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kt"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;storedData&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;      &lt;span class="c1"&gt;// State variable
&lt;/span&gt;   &lt;span class="k"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;storedData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="c1"&gt;// Using State variable
&lt;/span&gt;   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we declared an integer variable called storedData. And we assign a value to it in the constructor of the contract.This value will be available throughout the contract context.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Local Variables − Variables whose values are present only within a function.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Global Variables − Special variables exists in the global namespace used to get information about the blockchain. Common Examples are :&lt;br&gt;
block.coinbase (address payable)     which returns Current block miner's address. See the list of variables here&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5YP_J0k3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0o9s8rwyhpwzmuixp0rz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5YP_J0k3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0o9s8rwyhpwzmuixp0rz.png" alt="GlobalVariables"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
Image Source [TutorialPoint](https://www.tutorialspoint.com/solidity/solidity_variables.htm)



&lt;h2&gt;
  &lt;a href="#function"&gt;
  &lt;/a&gt;
  FUNCTION
&lt;/h2&gt;

&lt;p&gt;A function is a group of resuable code that can be used anywhere in your application. They perform a specific task. The most common way to define a function in Solidity is by using the function keyword, followed by a unique function name, a list of parameters (that might be empty), and a statement block surrounded by curly braces.&lt;/p&gt;

&lt;p&gt;Functions can be specified as being external, public, internal or private, where the default is public.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Public: Public functions are part of the contract interface and can be either called internally or via messages.&lt;/li&gt;
&lt;li&gt;Internal: Those functions and state variables can only be accessed internally (i.e. from within the current contract or contracts deriving from it).&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Private: Private functions and state variables are only visible for the contract they are defined in and not in derived contracts.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Functions can be declared &lt;em&gt;view&lt;/em&gt; in which case they promise not to modify the state. &lt;strong&gt;Read only functions&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameter&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;scope&lt;/span&gt; &lt;span class="k"&gt;returns&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;//statements
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="k"&gt;contract&lt;/span&gt; &lt;span class="n"&gt;BlogDemo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;addNumbers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;view&lt;/span&gt; &lt;span class="k"&gt;returns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
      &lt;span class="kt"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// local variable
&lt;/span&gt;      &lt;span class="kt"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kt"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example we named our function addNumbers, it is declared as public view Which means it does not modify any contract state, It just adds two numbers together.It returns an integer and it does not take in any parameters.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;function with multiple return Parameters.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="k"&gt;contract&lt;/span&gt; &lt;span class="n"&gt;BlogDemo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;addNumbers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;view&lt;/span&gt; &lt;span class="k"&gt;returns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
      &lt;span class="kt"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// local variable
&lt;/span&gt;      &lt;span class="kt"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This function will return both the product and sum.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;require keyword.
The require keyword in a Solidity function guarantees validity of conditions that cannot be detected before execution. It checks inputs, contract state variables and return values from calls to external contracts. If I wanted to execute a function only if a particular condition is met, I add the required keyword.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="k"&gt;contract&lt;/span&gt; &lt;span class="n"&gt;BlogDemo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kt"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;value1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;value2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;addNumbers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;view&lt;/span&gt; &lt;span class="k"&gt;returns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nb"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;  &lt;span class="n"&gt;value1&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;value2&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'5 is not greater than 4'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="kt"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// local variable
&lt;/span&gt;      &lt;span class="kt"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
   &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This function will only execute if value1 is greater than value 2. if the condition is not met It will return the error message ('5 is not greater than 4'). &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#modifiers"&gt;
  &lt;/a&gt;
  Modifiers
&lt;/h2&gt;

&lt;p&gt;Modifier allow control to the behaviour of a function. They can be used in a vareity of scenarios. Like for example checking who has access to a function before executing that function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="k"&gt;contract&lt;/span&gt; &lt;span class="n"&gt;Test&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;address&lt;/span&gt; &lt;span class="n"&gt;testAddress&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;testAddress&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Check if the function is called by the owner of the contract
&lt;/span&gt;  &lt;span class="k"&gt;modifier&lt;/span&gt; &lt;span class="n"&gt;onlyOwner&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;testAddress&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The function body is inserted where the special symbol "_;" appears in the definition of a modifier. So if condition of modifier is satisfied while calling this function, the function is executed and otherwise, an exception is thrown.&lt;/p&gt;

&lt;p&gt;We can then use this function modifier as a condition checker in other functions. For example to only execute the function if it is called by the sender.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;  &lt;span class="c1"&gt;// Can only be called by the owner cause I am using the onlyOwner modifier
&lt;/span&gt;  &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;onlyOwner&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#constructors"&gt;
  &lt;/a&gt;
  Constructors
&lt;/h2&gt;

&lt;p&gt;A constructor is an optional function declared with the constructor keyword which is executed only upon contract creation. Constructor functions can be either public or internal. If there is no constructor, the contract will assume the default constructor.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="n"&gt;contructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="k"&gt;contract&lt;/span&gt; &lt;span class="n"&gt;SolidityTest&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kt"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;storedData&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;      &lt;span class="c1"&gt;// State variable
&lt;/span&gt;   &lt;span class="k"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;storedData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="c1"&gt;// Using State variable
&lt;/span&gt;   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#events"&gt;
  &lt;/a&gt;
  Events.
&lt;/h2&gt;

&lt;p&gt;An event stores arguments passed to it in the transaction logs of the blockchain. If you want to store something like transfer information. You could do so using an event.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#event-syntax"&gt;
  &lt;/a&gt;
  Event Syntax
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="k"&gt;event&lt;/span&gt; &lt;span class="n"&gt;Transfer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;address&lt;/span&gt; &lt;span class="k"&gt;indexed&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;address&lt;/span&gt; &lt;span class="k"&gt;indexed&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;_value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To write to an event. You &lt;em&gt;emit&lt;/em&gt; that event. To write to event Transfer. I emit it using the following syntax.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Emit an event
&lt;/span&gt;&lt;span class="k"&gt;emit&lt;/span&gt; &lt;span class="n"&gt;Transfer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;receiverAddress&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this article we have explained some common syntax and terms in the solidity language. In the next article in the series we will be building our own smart contract using solidity and deploying to the Binance Smart Chain. &lt;/p&gt;

</description>
      <category>solidity</category>
    </item>
    <item>
      <title>Must-Have Skills for Developers in 2021</title>
      <author>Krowser Web Services </author>
      <pubDate>Mon, 07 Jun 2021 16:09:47 +0000</pubDate>
      <link>https://dev.to/krowser/must-have-skills-for-developers-in-2021-2aao</link>
      <guid>https://dev.to/krowser/must-have-skills-for-developers-in-2021-2aao</guid>
      <description>&lt;p&gt;Whether you are already an experienced developer or just starting out, if you want to become really good in this industry, you need to constantly sharpen your skills to stay relevant.&lt;/p&gt;

&lt;p&gt;Whether you are already an experienced developer or just starting out, if you want to become really good in this industry, you need to constantly sharpen your skills to stay relevant. Here are some of the most valuable skills for developers to tackle this year.&lt;/p&gt;

&lt;p&gt;Of course, you won’t need all of them and this list isn’t complete. But it should give you a good idea of what to learn next or what to improve on.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Practice Coding Every Day&lt;/strong&gt;&lt;br&gt;
Practice coding every day — even if it’s just for 30 minutes. This will help you learn the best development practices and grow your skills. It will also help you stay in top form and master new technologies.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Learn To Be a Good Communicator (Both Written and Spoken)&lt;/strong&gt;&lt;br&gt;
You don’t need to speak English like a native speaker, but you do need good enough communication skills to help clients understand what you are saying. Whether it’s in meetings, emails, or even on the phone, you don’t want to lose a client because they couldn’t understand your words. Also, writing clean code is an essential skill that will make you stand out from other developers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Practice Object-Oriented Design Principles&lt;/strong&gt;&lt;br&gt;
Even if you just started programming, learning OOP will give you many benefits over time. It will also make it much easier for you to read other people’s code, which is essential when working with other developers and your team members.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Improve Your Problem-Solving Skills&lt;/strong&gt;&lt;br&gt;
Software development is a complex field. You’ll be exposed to many different problems and tasks during your career. Make sure you can solve them effectively by learning how to think like a developer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Learn How To Use Design Tools Such As Photoshop, Sketch, and Illustrator&lt;/strong&gt;&lt;br&gt;
Good-looking websites and apps are essential if you want to create high-quality products that users love. While it’s possible to learn how to design using tutorials and YouTube videos, most of the time, you will need some formal training in this area when you start working on real projects.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Keep Learning New Technologies and Languages&lt;/strong&gt;&lt;br&gt;
Don’t get stuck on one stack! Learning new languages and frameworks will help you stay employable in this industry. If you have had the same stack for a long time, then there is a good chance that your skills will become obsolete over time. Always try to stay up to date with the newest technologies used by top developers around the world.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Learn at Least One Scripting Language (e.g. Python)&lt;/strong&gt;&lt;br&gt;
Scripting languages are useful for automating repetitive tasks. Even if you don’t want to become a full-time developer, scripting can make your life easier as a software engineer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Learn How To Write Clean and Maintainable Code&lt;/strong&gt;&lt;br&gt;
You will have to spend lots of time reading other people’s code. If the code is not clean, then it will be very hard for you to understand what’s going on. So you must write clean and readable code yourself. One way to improve your coding skills is by writing unit tests (e.g. by using JUnit). This will help you catch bugs early in the development process. Also, try to keep your methods short so it will be easier to read them later when you need to come back and fix something in the project that you wrote months ago.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Be Able To Think Ahead and Plan Out How a Feature Should Work Before You Start Developing It&lt;/strong&gt;&lt;br&gt;
It takes time to go from writing an initial idea for a feature/product/bugfix to having that feature ready on the market. You need to be able to think ahead and make sure that everything fits together properly during this whole process (and also after). This includes planning with your team members, asking users what they want, talking with stakeholders about their requirements, etc. Don’t just start coding things without thinking first!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Learn How To Implement Security Measures Properly&lt;/strong&gt;&lt;br&gt;
There is a lot of information out there about security, and it’s easy to get confused and overwhelmed. Make sure that you don’t just focus on the obvious things like “make sure your password is strong enough” and learn more about security threats and how to fix them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don’t Be Afraid To Ask Questions&lt;/strong&gt;&lt;br&gt;
Asking questions is a great way to learn. One of the biggest mistakes you can make is to assume that you know everything. Many developers tend to think that asking for help is a sign of weakness, but it’s actually a sign of strength. If you don’t understand something, ask someone who does and then try to figure it out yourself as well. This will help you gain a deeper understanding of the topic in question.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Learn How To Work With Different Environments (Mac, Linux, Windows)&lt;/strong&gt;&lt;br&gt;
You don’t have to become an expert in all platforms, but you should know how they work and what their pros and cons are. Also, knowing how different development environments work will allow you to save time when switching between them. For example, developing an Android app on Windows or Mac will force you to change your workflow since the process is quite different from using Linux or Ubuntu.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Practice Pair Programming Regularly With Your Team Members (or Others)&lt;/strong&gt;&lt;br&gt;
Pair programming means two people working together on one computer at the same time — one person sitting behind the keyboard writing code while the other person observes and gives feedback/suggestions/code reviews, etc.&lt;/p&gt;

&lt;p&gt;Pair programming has many benefits, including a better understanding of the problem domain, sharing knowledge and ideas between team members, faster debugging, etc. It also allows developers to get comfortable with each other through regular communication and helps team members build trust towards each other, which greatly improves teamwork.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Understand Design Patterns (SOLID Principles and Object-Oriented Design Patterns)&lt;/strong&gt;&lt;br&gt;
You don’t have to know every single pattern by heart, but understanding what they are will help you a lot as a software developer. Object-oriented design patterns are used repeatedly in different frameworks and technologies, so understanding them will be extremely useful for your job as a software developer.&lt;/p&gt;

&lt;p&gt;The SOLID principles guide us when writing code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Single-responsibility principle&lt;/li&gt;
&lt;li&gt;Open/closed principle&lt;/li&gt;
&lt;li&gt;Liskov substitution principle&lt;/li&gt;
&lt;li&gt;Interface segregation principle&lt;/li&gt;
&lt;li&gt;Dependency inversion principle&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Learn How To Deal With Change as a Software Developer&lt;/strong&gt;&lt;br&gt;
When working on new projects or even when working with existing code bases, things change from time to time (and not always because we want them to). You need to constantly adapt to these changes if you’re going to continue being productive in this business. If you cannot handle change well, you will eventually get stuck with outdated skills that won’t help you much anymore.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Learn How To Put Yourself in Other People’s Shoes&lt;/strong&gt;&lt;br&gt;
This is a beneficial skill in the software development industry. You need to learn how to see things through your client’s eyes and try to understand what they want or need. You need to communicate with them and make sure you deliver what they want.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Learn About Business Processes and Soft Skills&lt;/strong&gt;&lt;br&gt;
It doesn’t matter if you work for yourself or for another company. You must understand business processes and soft skills like communication, time management, problem-solving, and more. These are all crucial skills that will make you stand out from other developers who don’t know anything about this stuff.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Learn How To Deal With Deadlines&lt;/strong&gt;&lt;br&gt;
Everybody knows that projects sometimes run late and deadlines are not met. As a developer, you need to learn how to meet deadlines by setting smaller checkpoints in your projects that you can check off as you go. This will help you be more efficient and get the job done on time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Learn How To Learn New Technologies Fast&lt;/strong&gt;&lt;br&gt;
As mentioned before, developers need to stay relevant and learn new technologies quickly. This means learning new languages and learning about new frameworks or libraries that can help you solve problems more efficiently. It’s not only important that you know about the technology but also why it’s better than the others.&lt;/p&gt;

&lt;p&gt;If you don’t understand something or there is something that isn’t clear to you, ask questions! Don’t be afraid of looking stupid because if someone doesn’t understand something, they will never fully master it!&lt;/p&gt;

</description>
      <category>career</category>
      <category>javascript</category>
      <category>python</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Building an Accessible Reveal-Card</title>
      <author>Andrew Bone</author>
      <pubDate>Mon, 07 Jun 2021 16:00:38 +0000</pubDate>
      <link>https://dev.to/link2twenty/building-an-accessible-reveal-card-3c56</link>
      <guid>https://dev.to/link2twenty/building-an-accessible-reveal-card-3c56</guid>
      <description>&lt;p&gt;Recently, I found myself craving to make something interesting. So I sat down and scrolled through &lt;a href="https://dribbble.com/tags/material_design"&gt;dribbble&lt;/a&gt; to see if there was anything on there that I'd like to make. I came across a card that could be swiped to reveal some action buttons and set to work.&lt;/p&gt;

&lt;p&gt;As you've, no doubt, gathered I'll be building a reveal card, I have no idea if they have an official name, in this post but I must preface this with, I'm not an A11y expert I like to think I have some idea what I'm doing but I could well have got some of this wrong. If you notice something wrong or want to ask questions about why I've done certain things feel free to leave a comment and I'll get back to you.&lt;/p&gt;

&lt;p&gt;This is what I'll be making. It works with mouse, touch, keyboard and, I hope, screen readers read from it correctly too.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FiJW87c8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t6gu1fq7tcn8ta372uxw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FiJW87c8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t6gu1fq7tcn8ta372uxw.gif" alt="animation of reveal-card"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-structure"&gt;
  &lt;/a&gt;
  The structure
&lt;/h2&gt;

&lt;p&gt;For the structure, which we will later describe in HTML, we'll need a base that can be tabbed to, a layer for options, or buttons in our case, and the info card that sits on top of the options obscuring them until we slide them out of the way.&lt;/p&gt;

&lt;p&gt;For a11y think the base should also have &lt;a href="https://www.w3.org/WAI/GL/wiki/Using_the_WAI-ARIA_aria-expanded_state_to_mark_expandable_and_collapsible_regions"&gt;&lt;code&gt;aria-expanded&lt;/code&gt;&lt;/a&gt; to indicate the section can be expanded also the buttons should have &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-hidden_attribute"&gt;&lt;code&gt;aria-hidden&lt;/code&gt;&lt;/a&gt; on them or a wrapper to prevent screen readers from reading them.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/link2twenty/k2an8btd//embedded/html,result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;I think something like that matches my description but really doesn't look great as of yet. Which neatly leads us on to styling.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-look"&gt;
  &lt;/a&gt;
  The look
&lt;/h2&gt;

&lt;p&gt;For the look I'll be sticking to a quite material design, which means we'll use open sans fonts, buttons are transparent circles that become translucent on mouse over and we have a box shadow on the while thing. Quite simple when you explain it like that really isn't it. Here's the SCSS:&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/link2twenty/fr8waqxy//embedded/css,result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Whilst this now looks passable there are a few things to consider, the card is white but behind it needs colour too and we really should let potential users pick from a few colours, the default outline is ok but it different across browsers and doesn't really look that great and finally other than the cursor changing there's no real indication to the user that the panel slides.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-variants"&gt;
  &lt;/a&gt;
  Adding variants
&lt;/h3&gt;

&lt;p&gt;You may have noticed in the above SCSS I was using &lt;a href="http://getbem.com/"&gt;BEM&lt;/a&gt; which is just a style guide. In BEM when you add a variant you use &lt;code&gt;--&lt;/code&gt; followed by the variant name. So let's add success, info and warn as our three colour variants.&lt;/p&gt;

&lt;p&gt;Because we're using &lt;a href="https://sass-lang.com/"&gt;SCSS&lt;/a&gt; we can easily just add the variants to our &lt;code&gt;material-slide&lt;/code&gt; styles like so.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nc"&gt;.material-slide&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.8em&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="nf"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.12&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nf"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.24&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;--success&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#1B5E20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#fefefe&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;--info&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#0D47A1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#fefefe&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;--warn&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#B71C1C&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#fefefe&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I've stated the background colour and the text colour so if someone wants to add a new variant to the code they can follow the pattern and add a better contrast colour if they need one.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nice-outline"&gt;
  &lt;/a&gt;
  Nice outline
&lt;/h3&gt;

&lt;p&gt;Now this is quite an interesting topic lots of A11y purest say the default outline should be left alone and for a long time I agreed with that but over the years I've considered alternatives and I think as long as you let the user know they have focus of your element it's ok to be a little adventurous.&lt;/p&gt;

&lt;p&gt;The method I've been using for a while now is to use a box shadow in an after which has opacity 0 until the element is &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:focus-visible"&gt;&lt;code&gt;focus-visible&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Again we add this to the &lt;code&gt;material-slide&lt;/code&gt; styles.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;pointer-events&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;inset&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="mh"&gt;#fefefe&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;inset&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="mh"&gt;#01579B&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;inset&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt; &lt;span class="mh"&gt;#fefefe&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nd"&gt;:focus-visible&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The outline is made of three lines a two white ones sandwiching a blue one, this helps with keeping the outline noticeable on top of different colours.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y2q9kcbz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3jhglk5thxmrvvzcqxos.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y2q9kcbz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3jhglk5thxmrvvzcqxos.png" alt="outline example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#gesture-hints"&gt;
  &lt;/a&gt;
  Gesture hints
&lt;/h3&gt;

&lt;p&gt;Finally for the styles I don't think it's obvious when you see a card that it can be dragged even if you cursor changes to 'grab'. I had a think about this for a while and decided that if someone hovers over the card we should move it over by 5px just so show that the card moves.&lt;/p&gt;

&lt;p&gt;To do this I simply added the transform to hover inside &lt;code&gt;material-slide__info&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nd"&gt;:hover:not&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;.material-slide__options--user-control&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;translatex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-5px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'll also notice there is &lt;code&gt;material-slide__options--user-control&lt;/code&gt; this is a class we will be adding with JS so let's move on to that now.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-functionality"&gt;
  &lt;/a&gt;
  The functionality
&lt;/h2&gt;

&lt;p&gt;We've made it to the final part adding some JS to make the whole thing function. Mostly this will be event listeners with a little bit of state management. For the listeners we'll want to listen for keyboard events, mouse events and touch events.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#state-management"&gt;
  &lt;/a&gt;
  State management
&lt;/h3&gt;

&lt;p&gt;For this I will just have an object which contains all the variables I need, then I will update and check against that object as I need to.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;isActive&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;isOpen&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;isOpenLast&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;startPos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;currentPos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#event-listeners"&gt;
  &lt;/a&gt;
  Event listeners
&lt;/h3&gt;

&lt;p&gt;I'll need to listen for mouse down, move, leave and up to keep track of how far the card has been dragged. I've also decided to add double click to open an close fortunately there is a event for that. For keyboard support I'll just need to listen of key up and for touch I'll listen for touch start, move, end and cancel which are basically the same as mouse but slightly different (because of multitouch).&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/link2twenty/r0Lh3qkx//embedded/js,result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sign-off"&gt;
  &lt;/a&gt;
  Sign off
&lt;/h2&gt;

&lt;p&gt;Well there we have it we've made a cool little sliding panel that we can hide buttons behind. We've made it so a keyboard user can use it and so that a screen reader can read it.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/link2twenty/1e46tgcr//embedded/result,html,css,js//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;I was thinking I might do another part to this series where I convert this to a React component and put it on Git/NPM, would there be any interest for that?&lt;/p&gt;

&lt;p&gt;Thank you for reading to the end I hope you got something from this and as I said at the top of the article feel free to leave any comments or come shout at me over on &lt;a href="https://twitter.com/Link2Twenty"&gt;twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks again 🧠🧙‍♂️❤️🦄🧠🦄❤️🧠🧙‍♂️🧠🧙‍♂️&lt;/p&gt;

</description>
      <category>css</category>
      <category>a11y</category>
      <category>javascript</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Subtesting, skipping, and cleanup in the Go testing.T</title>
      <author>&amp;y H. Golang (he/him)</author>
      <pubDate>Mon, 07 Jun 2021 16:00:05 +0000</pubDate>
      <link>https://dev.to/salesforceeng/subtesting-skipping-and-cleanup-in-the-go-testing-t-49ea</link>
      <guid>https://dev.to/salesforceeng/subtesting-skipping-and-cleanup-in-the-go-testing-t-49ea</guid>
      <description>&lt;p&gt;In &lt;a href="https://dev.to/salesforceeng/intro-to-automated-testing-in-go-4mjl"&gt;my last tutorial&lt;/a&gt;, we looked at the basics of writing tests in Go. We saw:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;🚦 how the &lt;code&gt;testing.T&lt;/code&gt; type is used in all Go tests for managing the status of whether or not a Go test passed&lt;/li&gt;
&lt;li&gt;🐛 how we can use tests to catch a bug and fix our code to make a test pass&lt;/li&gt;
&lt;li&gt;🗄 how we can use table-testing in order to run tests cases with the same logic together&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are a good foundation to writing test coverage in Go, since any Go repository doing automated tests uses the standard library's testing package, and use the &lt;code&gt;testing.T&lt;/code&gt; type. But that's not all the tricks &lt;code&gt;testing.T&lt;/code&gt; has up its sleeve!&lt;/p&gt;

&lt;p&gt;In this tutorial, we'll look at how we can use three more methods in the &lt;code&gt;testing.T&lt;/code&gt; type in order to better organize your tests.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;💨 &lt;code&gt;t.Run&lt;/code&gt; to give your test cases subtests&lt;/li&gt;
&lt;li&gt;⏭ &lt;code&gt;t.Skip&lt;/code&gt;, for when we only want to run a test sometimes&lt;/li&gt;
&lt;li&gt;🧹 &lt;code&gt;t.Cleanup&lt;/code&gt;, for cleaning up state in between tests&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And when your tests are well-organized, that improves the quality of life for your dev team when it comes to knowing where to write your tests, and knowing how to fix a failing test. So let's dive in!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#writing-subtests-for-our-go-tests"&gt;
  &lt;/a&gt;
  💨 Writing subtests for our Go tests
&lt;/h2&gt;

&lt;p&gt;As a quick recap, in the last tutorial, we wrote test coverage for a function telling us whether a string &lt;code&gt;IsSlothful&lt;/code&gt;, which returns true if either it contains the word sloth, or it contains the hibiscus emoji but &lt;strong&gt;not&lt;/strong&gt; the race car emoji.&lt;/p&gt;

&lt;p&gt;To make it easier to table-test that function, we made this assertion helper function, which has our &lt;code&gt;testing.T&lt;/code&gt; run its &lt;code&gt;Errorf&lt;/code&gt; method, causing the test to fail, if &lt;code&gt;IsSlothful&lt;/code&gt; doesn't return the expected value for the string we're testing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;assertIsSlothful&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;IsSlothful&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%s is supposed to be slothful"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%s is not supposed to be slothful"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we ran &lt;code&gt;assertIsSlothful&lt;/code&gt; in a loop on a slice of different test cases, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;isSlothfulTestCase&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;str&lt;/span&gt;      &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="n"&gt;expected&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;isSlothfulTestCases&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;isSlothfulTestCase&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"hello, world!"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                               &lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"hello, slothful world!"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                      &lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Sloths rule!"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                &lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Nothing like an iced hibiscus tea! 🌺"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;       &lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Get your 🌺 flowers! They're going fast! 🏎️"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;TestIsSlothful&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;isSlothfulTestCases&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;assertIsSlothful&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If one of the tests errors, then we get an error message about why the string isn't slothful. Say that we forgot to make checking for the word "sloth" case-insensitive. The error we get would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;-------- FAIL: TestIsSlothful (0.00s)
    sloths_test.go:12: Sloths rule! is supposed to be slothful
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have the descriptive error message of which string we expect to be slothful. But what if our &lt;code&gt;IsSlothful&lt;/code&gt; function got a lot more complex, to capture the many nuances of laziness? It would be nice to have a better description of exactly &lt;strong&gt;what&lt;/strong&gt; part of our functionality is being tested. And if we have hundreds of strings we want to test, it would be nice to zoom in on just one, or a few, test cases.&lt;/p&gt;

&lt;p&gt;That's where you can &lt;strong&gt;subtesting&lt;/strong&gt; can help you. Since Go 1.7, if inside your Go test, you run the &lt;code&gt;t.Run(string, func(*testing.T))&lt;/code&gt; method, your &lt;code&gt;testing.T&lt;/code&gt; will make a subtest within your test.&lt;/p&gt;

&lt;p&gt;To try it out, first let's take our &lt;code&gt;isSlothfulTestCase&lt;/code&gt; and give it a new string field called &lt;code&gt;testName&lt;/code&gt;, which is intended to be a brief description of what we're testing in each scenario. Then, let's add the &lt;code&gt;testName&lt;/code&gt; to each of our test cases:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;isSlothfulTestCases&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;isSlothfulTestCase&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;
    &lt;span class="n"&gt;testName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"string with nothing slothful isn't slothful"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;      &lt;span class="s"&gt;"hello, world!"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;testName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;`string with the substring "sloth" is slothful`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;      &lt;span class="s"&gt;"hello, slothful world!"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;testName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;`checking for the word "sloth" is case-insensitive`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;      &lt;span class="s"&gt;"Sloths rule!"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;testName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"strings with the 🌺 emoji are normally slothful"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;      &lt;span class="s"&gt;"Nothing like an iced hibiscus tea! 🧊🌺"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;testName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"the 🏎️ emoji negates the 🌺 emoji's slothfulness"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;      &lt;span class="s"&gt;"Get your 🌺 flowers! They're going fast! 🏎️"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's update our main &lt;code&gt;TestIsSlothful&lt;/code&gt; testing loop to use subtesting:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;  func TestIsSlothful(t *testing.T) {
      for _, c := range isSlothfulTestCases {
&lt;span class="gd"&gt;-         assertIsSlothful(t, c.str, c.expected)
&lt;/span&gt;&lt;span class="gi"&gt;+         t.Run(c.testName, func(t *testing.T) {
+             assertIsSlothful(t, c.str, c.expected)
+         })
&lt;/span&gt;      }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;t.Run&lt;/code&gt; takes in two arguments:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The name of our subtest, which will be the description we just added in the &lt;code&gt;testName&lt;/code&gt; field&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;func(t *testing.T)&lt;/code&gt; containing the code we want to run in the subtest. In this case, we are having the subtest just wrap the call to &lt;code&gt;assertIsSlothful&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now if we run &lt;code&gt;go test -v&lt;/code&gt;, the output looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go test -v
=== RUN   TestIsSlothful
=== RUN   TestIsSlothful/string_with_nothing_slothful_isn't_slothful
=== RUN   TestIsSlothful/string_with_the_substring_"sloth"_is_slothful
=== RUN   TestIsSlothful/checking_for_the_word_"sloth"_is_case-insensitive
    sloths_test.go:12: Sloths rule! is supposed to be slothful
=== RUN   TestIsSlothful/strings_with_the_🌺_emoji_are_normally_slothful
=== RUN   TestIsSlothful/the_🏎️_emoji_negates_the_🌺_emoji's_slothfulness
-------- FAIL: TestIsSlothful (0.00s)
    --- PASS: TestIsSlothful/string_with_nothing_slothful_isn't_slothful (0.00s)
    --- PASS: TestIsSlothful/string_with_the_substring_"sloth"_is_slothful (0.00s)
    --- FAIL: TestIsSlothful/checking_for_the_word_"sloth"_is_case-insensitive (0.00s)
    --- PASS: TestIsSlothful/strings_with_the_🌺_emoji_are_normally_slothful (0.00s)
    --- PASS: TestIsSlothful/the_🏎️_emoji_negates_the_🌺_emoji's_slothfulness (0.00s)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We log output for each individual subtest now, rather than only seeing output for scenarios where the test failed. And now we see we got a failing subtest named &lt;code&gt;TestIsSlothful/checking_for_the_word_"sloth"_is_case-insensitive&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The slash in the name is used to indicate that a test being run is a subtest. And in addition to giving a name to the part of our top-level test that failed, you can even use a subtest as input to the &lt;code&gt;-run&lt;/code&gt; flag in the &lt;code&gt;go test&lt;/code&gt; command. If we have a whole lot of subtests and you want to zoom in on just one test case, like testing that checking for the word "sloth" is case-insensitive, you can run a command like &lt;code&gt;go test -v -run TestIsSlothful/case-insensitve&lt;/code&gt;, and the output will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go test -v -run "TestIsSlothful/case-insensitive"
=== RUN   TestIsSlothful
=== RUN   TestIsSlothful/checking_for_the_word_"sloth"_is_case-insensitive
    sloths_test.go:12: Sloths rule! is supposed to be slothful
-------- FAIL: TestIsSlothful (0.00s)
    --- FAIL: TestIsSlothful/checking_for_the_word_"sloth"_is_case-insensitive (0.00s)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we run &lt;code&gt;TestIsSlothful&lt;/code&gt; like before, but we skip all of its subtests that don't match the name "case-insensitive"!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%E2%8F%AD-skipping-tests-with-tskip"&gt;
  &lt;/a&gt;
  ⏭ Skipping tests with t.Skip
&lt;/h2&gt;

&lt;p&gt;One of the main benefits to writing automated tests is that you can do things like integrate them into continuous integration (CI) platforms, and you can then have rules on your team like that you only can merge changes if all of the test cases pass. Rules like that can help limit bringing in code that inadvertently breaks functionality because of unforeseen interactions between parts of the code.&lt;/p&gt;

&lt;p&gt;But you might have some complex tests that take a really long time to run, or that rely on external services where the test would fail if say, a service your code talks to is unavailable. Especially in the latter scenario, you don't want a different service's outage to bring your team's development work to a halt.&lt;/p&gt;

&lt;p&gt;You still want to run those more complex tests, but maybe only once in a while, rather than requiring the test to pass if you want to to bring in a code change. Luckily, there is a convenient workaround for this scenario: the &lt;code&gt;t.Skip&lt;/code&gt; method!&lt;/p&gt;

&lt;p&gt;To try it out, let's say we have a test for code to automate a quadcopter for feeding the lizards at a terrarium.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;TestQuadcopterDelivery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;ConnectToQuadcopter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"quadcopter-communication-info"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DeliverFood&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;"from-my-desk"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"to-terrarium"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"error delivering food: %v"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We could run this every time we do a CI test for a pull request, but that could fail if:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The quadcopter is out of batteries&lt;/li&gt;
&lt;li&gt;The quadcopter isn't turned on&lt;/li&gt;
&lt;li&gt;Your friend is borrowing the quadcopter&lt;/li&gt;
&lt;li&gt;Someone bumped into the quadcopter&lt;/li&gt;
&lt;li&gt;The lizards aren't hungry&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So the test can't reliably pass every time we push some code.&lt;/p&gt;

&lt;p&gt;But let's say we tried running it at a set time where we know the quadcopter is there and charged, no one's gonna get in the way, and the lizards want a snack. Running a build at a certain time is called a &lt;strong&gt;nightly build&lt;/strong&gt;, and you might specify you're in a nightly build with something like whether a given environment variable is present, like &lt;code&gt;NIGHTLY_BUILD&lt;/code&gt;, or more accurately in this case, &lt;code&gt;SNACKTIME_BUILD&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To only run &lt;code&gt;TestQuadcopterDelivery&lt;/code&gt; only in a nightly build, we could modify the code like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;  func TestQuadcopterDelivery(t *testing.T) {
&lt;span class="gi"&gt;+     if _, ok := os.LookupEnv("SNACKTIME_BUILD"); !ok {
+         t.Skip("only running this test on snack build")
+     }
+ 
&lt;/span&gt;      q := ConnectToQuadcopter("quadcopter-communication-info")
      if err := q.DeliverFood(
          "from-my-desk", "to-terrarium",
      ); err != nil {
          t.Errorf("error delivering food: %v", err)
      }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We check whether the &lt;code&gt;SNACKTIME_BUILD&lt;/code&gt; environment variable is present with &lt;code&gt;os.LookupEnv&lt;/code&gt;. If it returns false, we run &lt;code&gt;t.Skip&lt;/code&gt; and leave the message that we're only running that test case in a snack-time build. Otherwise, we run the test.&lt;/p&gt;

&lt;p&gt;So in our CI configuration for regular builds, we don't set that environment variable. But in our CI configuration for snack-time builds, we would set the variable. Now your dev team can efficiently build next-generation lizard-feeding! 🦎&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cleaning-up-after-your-test"&gt;
  &lt;/a&gt;
  🧹 Cleaning up after your test
&lt;/h2&gt;

&lt;p&gt;Finally, when you're writing more complicated tests, sometimes there are changes a test has to run that aren't totally contained in the test. Like changes to files, or putting data into databases. This can cause trouble when you're re-running a test, or running a test that uses a system that a different test had changed.&lt;/p&gt;

&lt;p&gt;There are different ways of addressing that, like per-test-case namespacing for your data, or mock systems like &lt;a href="https://github.com/spf13/afero"&gt;Afero memory filesystems&lt;/a&gt;, and cleaning up after each test case.&lt;/p&gt;

&lt;p&gt;For the latter of those, you can use things like &lt;a href="https://pkg.go.dev/github.com/stretchr/testify/suite"&gt;Testify Suite&lt;/a&gt; to handle cleanups, but since Go 1.14, the standard-library &lt;code&gt;testing.T&lt;/code&gt; type now has this new method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Cleanup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now when we write a test, we can specify a function that should run at the end of a test. Say we have a function that appends the gopher 🐹 (actually a hamster) emoji to a file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;addGopher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filepath&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OpenFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;O_APPEND&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;O_WRONLY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0644&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"🐹"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We might test that like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;TestAddGopher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// set up file to add a gopher to&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"test-files"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"gopher-added.txt"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Go is awesome!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;// run addGopher and test that we now have a gopher emoji&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;addGopher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;fileContents&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileContents&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s"&gt;"Go is awesome!🐹"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s"&gt;`unexpected file contents %s`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileContents&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We create a file at &lt;code&gt;./test-files/gopher-added.txt&lt;/code&gt;, write "Go is awesome!", use &lt;code&gt;addGopher&lt;/code&gt; to add the gopher emoji, and then check that the file now has the emoji.&lt;/p&gt;

&lt;p&gt;The test is correct, but what if a different test we ran later &lt;strong&gt;expected that there were no files in the &lt;code&gt;test-files&lt;/code&gt; directory&lt;/strong&gt;? That test would now fail without any of our code actually being broken, and when that happens, it can be a real pain.&lt;/p&gt;

&lt;p&gt;That's where cleanup after a test comes in. Let's give it a try:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;  func TestAddGopher(t *testing.T) {
      path := filepath.Join("test-files", "gopher-added.txt")
      f, err := os.CreateFile(path)
      if err != nil {
          t.Fatal(err)
      }

+     t.Cleanup(func() {
&lt;span class="gi"&gt;+         if err != os.Remove(path) {
+             t.Fatalf("error cleaning up %s: %v", path, err)
+         }
+     })
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, at the end of &lt;code&gt;TestAddGopher&lt;/code&gt;, we run our function to delete &lt;code&gt;test-files/gopher-added.txt&lt;/code&gt;. Now our other tests can run without having to worry about any data left over from &lt;code&gt;TestAddGopher&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;While that was just a contrived example, cleanup is important in a lot of complex tests working with interdependent systems. If you're coming from using testing systems like Jest in JavaScript, you can use &lt;code&gt;t.Cleanup&lt;/code&gt; in scenarios similar to where you would use the Jest &lt;code&gt;afterAll&lt;/code&gt; function; the Cleanup function runs &lt;strong&gt;after a test and all its subtests complete&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;As you can see, in addition to keeping track of the state of tests, the &lt;code&gt;testing.T&lt;/code&gt; type gives some great functionality for keeping your automated Go tests well-organized, and you can use that alongside techniques like table testing and CI build system setups.&lt;/p&gt;

&lt;p&gt;In my next tutorial on Go testing, we'll look at a different package in the standard library that will come in handy if you're a web developer like me: &lt;code&gt;net/http/httptest&lt;/code&gt;!&lt;/p&gt;

</description>
      <category>go</category>
      <category>testing</category>
      <category>codenewbie</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Creating/Securing a Remote Dev Environment</title>
      <author>Blake Khan</author>
      <pubDate>Mon, 07 Jun 2021 15:18:19 +0000</pubDate>
      <link>https://dev.to/blake/creating-securing-a-remote-dev-environment-3558</link>
      <guid>https://dev.to/blake/creating-securing-a-remote-dev-environment-3558</guid>
      <description>&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;A &lt;em&gt;remote development environment&lt;/em&gt; is an environment/server hosted externally (i.e. not on your local machine) that you connect to remotely to perform your development work on.&lt;/p&gt;

&lt;p&gt;Using the &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-ssh"&gt;Remote-SSH&lt;/a&gt; extension on &lt;a href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt;, you can develop on a remote machine while maintaining the feel and responsiveness of developing on your &lt;em&gt;local machine&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FuPKmRvP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://code.visualstudio.com/assets/docs/remote/ssh/architecture-ssh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FuPKmRvP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://code.visualstudio.com/assets/docs/remote/ssh/architecture-ssh.png" alt="A diagram explaining how Remote-SSH works on VS Code"&gt;&lt;/a&gt;&lt;br&gt;
Image Source: &lt;a href="https://code.visualstudio.com/docs/remote/ssh"&gt;Visual Studio Code / Microsoft&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The way this is achieved is via a SSH Tunnel. But you can secure this a step further by requiring proof of identity via an SSO Identity Provider (like Google, Github, Facebook, Active Directory, etc) by using Cloudflare Access and Cloudflare Tunnel.&lt;/p&gt;

&lt;p&gt;There are numerous benefits to using a remote environment to perform your development on. Here's just a few:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You can switch machines without losing your work. Since your work is not on your local machine, that means that you can switch from your desktop to your laptop and not lose anything.&lt;/li&gt;
&lt;li&gt;You can develop your application/system on an environment that closer replicates the environment that your product will be deployed to.&lt;/li&gt;
&lt;li&gt;There's less of a security risk if your local machine is lost/stolen. Your code/files aren't on there.&lt;/li&gt;
&lt;li&gt;Colleagues and other developers can also connect to your remote development environment to help debug or perform any other necessary work.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#goals"&gt;
  &lt;/a&gt;
  Goals
&lt;/h3&gt;

&lt;p&gt;By the end of this tutorial, you will have:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A DigitalOcean droplet setup with your development stack&lt;/li&gt;
&lt;li&gt;Visual Studio Code setup locally with the Remote-SSH extension&lt;/li&gt;
&lt;li&gt;The &lt;a href="https://developers.cloudflare.com/cloudflare-one/glossary#cloudflared"&gt;cloudflared&lt;/a&gt; &lt;em&gt;daemon&lt;/em&gt; installed both on your remote and local machines&lt;/li&gt;
&lt;li&gt;An SSH config on your local machine to easily connect to your remote machine using Cloudflare Tunnel and Cloudflare Access&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;A generated SSH Key

&lt;ul&gt;
&lt;li&gt;You will need to upload your public key to DigitalOcean&lt;/li&gt;
&lt;li&gt;You will need your private key in order to SSH into your Droplet initially&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A &lt;a href="https://blake.link/digitalocean"&gt;DigitalOcean&lt;/a&gt; account

&lt;ul&gt;
&lt;li&gt;New users can use the link above to get a $100 credit valid for 60 days when you add a payment method to your account&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A &lt;a href="https://www.cloudflare.com/"&gt;Cloudflare&lt;/a&gt; account with a domain added

&lt;ul&gt;
&lt;li&gt;This domain will be used by you to connect to the remote machine&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A &lt;a href="https://developers.cloudflare.com/cloudflare-one/setup"&gt;Cloudflare for Teams&lt;/a&gt; account already setup

&lt;ul&gt;
&lt;li&gt;A free plan is available&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A &lt;a href="https://developers.cloudflare.com/cloudflare-one/identity/idp-integration"&gt;SSO Integration&lt;/a&gt; already setup within Cloudflare for Teams

&lt;ul&gt;
&lt;li&gt;In this tutorial I'm using a GSuite integration to verify my identity&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt; installed on your local machine&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#step-1-configuring-cloudflare"&gt;
  &lt;/a&gt;
  Step 1 — Configuring Cloudflare
&lt;/h2&gt;

&lt;p&gt;You will create an access policy for your selected domain.&lt;/p&gt;

&lt;p&gt;Cloudflare Tunnel is a service which provides a secure connection between the nearest Cloudflare datacenter and your remote machine, without opening public ports. This tunnel is how you will connect to your remote machine securely. Previously this was a part of Cloudflare's paid Argo service, but as of April 2021 has been made free of charge.&lt;/p&gt;

&lt;p&gt;From your Cloudflare dashboard, select the domain (or &lt;em&gt;zone&lt;/em&gt;) that you have chosen to use for this tutorial.&lt;/p&gt;

&lt;p&gt;You need to &lt;strong&gt;create an access policy&lt;/strong&gt;. This policy will determine who has access to your Droplet. &lt;/p&gt;

&lt;p&gt;Click on the &lt;strong&gt;access&lt;/strong&gt; tab on your domain's Cloudflare dashboard. Scroll down to &lt;strong&gt;Access Policies&lt;/strong&gt; and hit &lt;strong&gt;Create Access Policy&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Give an application name, and the subdomain that you will use to connect to your Droplet (decide this now, you'll need it again later in this tutorial). For session duration, decide how long a session should be valid for.&lt;/p&gt;

&lt;p&gt;You need at least 1 policy. Create one by giving it a name. Then add an include-rule. For this tutorial, I decided on "emails ending in" and the domain of my GSuite account.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p62hqwJ1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/IkP0cqw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p62hqwJ1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/IkP0cqw.png" alt="A screenshot of a sample access policy."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you're done, hit &lt;strong&gt;save&lt;/strong&gt;. Now that your Cloudflare settings are configured, it's time to create your remote machine.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-2-creating-your-droplet"&gt;
  &lt;/a&gt;
  Step 2 — Creating your Droplet
&lt;/h2&gt;

&lt;p&gt;You will create a Droplet on DigitalOcean with a new user, your preferred tools/programs, and the &lt;code&gt;cloudflared&lt;/code&gt; daemon.&lt;/p&gt;

&lt;p&gt;To begin, &lt;strong&gt;visit &lt;a href="https://cloud.digitalocean.com/droplets/new"&gt;this link&lt;/a&gt;&lt;/strong&gt; to access the Droplet creation page.&lt;/p&gt;

&lt;p&gt;For this tutorial, you will use &lt;strong&gt;Ubuntu 20.04&lt;/strong&gt; as your operating system.&lt;/p&gt;

&lt;p&gt;For the Droplet plan select the configuration that you think you will need for your development work. From personal experience, the Regular Intel, 4GB / 2 CPUs plan works great on a stack with Java 11, Apache Maven, Git, and Docker.&lt;/p&gt;

&lt;p&gt;Next, select your preferred datacenter. Typically, the datacenter closest to you is the best option to minimize latency.&lt;/p&gt;

&lt;p&gt;For additional options, enable &lt;strong&gt;IPv6 and User data&lt;/strong&gt;. Monitoring is optional but recommended if you wish to view stats about your Droplet online.&lt;/p&gt;

&lt;p&gt;A text field will appear after selecting the user data checkbox. This is where you will paste a script to be executed when the server initially boots for the first time.&lt;/p&gt;

&lt;p&gt;Below is a script that I have provided for you to use. It creates a new user, optionally installs some packages, and installs &lt;code&gt;cloudflared&lt;/code&gt;. There is a variable for the name of the user to create.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Back to the Droplet creation panel - For authentication select &lt;em&gt;SSH Key&lt;/em&gt; and upload your public SSH key if you don't already have a key uploaded.&lt;/p&gt;

&lt;p&gt;The remaining options are optional. I recommend changing the hostname to something you recognize, such as the domain name that you plan on using for that Droplet.&lt;/p&gt;

&lt;p&gt;Once finished configuring your options, press &lt;strong&gt;Create Droplet&lt;/strong&gt;. You've just created your remote machine! The next step is to configure it and ensure it is secure.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3-securing-your-droplet"&gt;
  &lt;/a&gt;
  Step 3 — Securing your Droplet
&lt;/h2&gt;

&lt;p&gt;You will configure the &lt;code&gt;cloudflared&lt;/code&gt; daemon and setup the SSH tunnel on your Droplet.&lt;/p&gt;

&lt;p&gt;On the DigitalOcean panel, navigate to your newly-created Droplet. Copy the public IPv4 address listed.&lt;/p&gt;

&lt;p&gt;You are going to have to &lt;strong&gt;SSH into your Droplet&lt;/strong&gt; with the username that you configured in the script provided. To do this, on your local shell run &lt;code&gt;ssh &amp;lt;your configured username&amp;gt;@&amp;lt;copied IP address&amp;gt; -i &amp;lt;path to your private SSH key&amp;gt;&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;An example might look like &lt;code&gt;ssh sammy@XXX.XXX.XXX.XXX -i ~/.ssh/id_rsa&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Navigate to &lt;code&gt;/etc/cloudflared/&lt;/code&gt; using &lt;code&gt;cd /etc/cloudflared&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Before proceeding, ensure that &lt;code&gt;cloudflared&lt;/code&gt; is up-to-date. Run &lt;code&gt;sudo cloudflared update&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, you need to &lt;strong&gt;authenticate &lt;code&gt;cloudflared&lt;/code&gt;&lt;/strong&gt; with your desired zone (domain). &lt;/p&gt;

&lt;p&gt;Run &lt;code&gt;cloudflared login&lt;/code&gt;. It should output a link, which you can then copy to your web browser and load.&lt;/p&gt;

&lt;p&gt;On the website, it is important that you &lt;strong&gt;select the zone that you will be using&lt;/strong&gt; to connect to the Droplet with. Click &lt;strong&gt;Authorize&lt;/strong&gt;. You can close that website once done.&lt;/p&gt;

&lt;p&gt;Return back to your SSH session. You now need to &lt;strong&gt;move the newly-downloaded certificate&lt;/strong&gt; to &lt;code&gt;/etc/cloudflared/cert.pm&lt;/code&gt;. Do this by running &lt;code&gt;sudo mv /home/sammy/.cloudflared/cert.pem /etc/cloudflared/cert.pem&lt;/code&gt;, replacing &lt;code&gt;sammy&lt;/code&gt; with your configured username.&lt;/p&gt;

&lt;p&gt;Now is the time to create the tunnel. &lt;/p&gt;

&lt;p&gt;Do this by running &lt;code&gt;cloudflared tunnel create NAME&lt;/code&gt;, replacing &lt;code&gt;NAME&lt;/code&gt; with a label for your tunnel. An id should then be printed out after running the command. Make note of it.&lt;/p&gt;

&lt;p&gt;Next, you need to &lt;strong&gt;create a configuration file&lt;/strong&gt; telling &lt;code&gt;cloudflared&lt;/code&gt; what to do when it runs.&lt;/p&gt;

&lt;p&gt;Modify and copy the provided config file below. Replace &lt;code&gt;XXX&lt;/code&gt; with the id of your created tunnel, and &lt;code&gt;YOUR.DOMAIN.HERE&lt;/code&gt; with the hostname that you wish to use to connect to your Droplet. The apex domain must match the one you selected when authenticating &lt;code&gt;cloudflared&lt;/code&gt;.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Create the file &lt;code&gt;/etc/cloudflared/config.yml&lt;/code&gt; by using your favorite text editor (such as &lt;a href="https://vimhelp.org/"&gt;vim&lt;/a&gt; or &lt;a href="https://www.nano-editor.org/docs.php"&gt;nano&lt;/a&gt;) and pasting your modified config template from above.&lt;/p&gt;

&lt;p&gt;To &lt;strong&gt;create the DNS record&lt;/strong&gt; for your configured domain name, run &lt;code&gt;cloudflared tunnel route dns &amp;lt;id&amp;gt; &amp;lt;subdomain&amp;gt;&lt;/code&gt; where &lt;code&gt;id&lt;/code&gt; is the id of the tunnel, and &lt;code&gt;subdomain&lt;/code&gt; is the subdomain you selected in your config file. You can verify on your Cloudflare DNS page that a CNAME record was created.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;cloudflared&lt;/code&gt; daemon is now fully configured. It's time to start it! It's best to &lt;strong&gt;run the daemon as a service&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Run &lt;code&gt;sudo cloudflared service install&lt;/code&gt; and &lt;code&gt;sudo service cloudflared start&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To &lt;strong&gt;verify that there were no errors&lt;/strong&gt; in the service starting, run &lt;code&gt;sudo service cloudflared status&lt;/code&gt;. You should see the  tunnel being started with some connections being made. Those connections are to nearby Cloudflare datacenters.&lt;/p&gt;

&lt;p&gt;With your remote machine configured, it's now time to configure your local machine so it is able to connect to your Droplet over this secure tunnel.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-4-configuring-your-local-machine"&gt;
  &lt;/a&gt;
  Step 4 — Configuring your local machine
&lt;/h2&gt;

&lt;p&gt;You will configure your local machine to use the Cloudflare Tunnel when SSHing into your Droplet, and install the Remote-SSH extension in Visual Studio Code to be able to modify files on your Droplet seamlessly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Install &lt;code&gt;cloudflared&lt;/code&gt; on your local machine&lt;/strong&gt;. You can view full instructions from &lt;a href="https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/install-and-setup/installation"&gt;Cloudflare's website&lt;/a&gt;. It supports Mac, Linux, Windows, and Docker. Again, it's best to run the daemon as a &lt;a href="https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/run-tunnel/run-as-service"&gt;service&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You do not need to authenticate the daemon on your local machine (i.e. do not run the login command). &lt;/p&gt;

&lt;p&gt;Now, you need to &lt;strong&gt;update your local SSH config&lt;/strong&gt; to make use of &lt;code&gt;cloudflared&lt;/code&gt; for your Droplet. The daemon has a feature which will generate most of this config for you.&lt;/p&gt;

&lt;p&gt;Run &lt;code&gt;cloudflared access ssh-config --hostname YOUR.DOMAIN.HERE&lt;/code&gt;, replacing the variable with your domain that you put in your config on your Droplet.&lt;/p&gt;

&lt;p&gt;Determine where your local SSH config is. On Mac, it's located at &lt;code&gt;~/.ssh/config&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It should print something out like this to add to your SSH config:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Host YOUR.DOMAIN.HERE
  ProxyCommand /usr/local/bin/cloudflared access ssh --hostname %h
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note, the path in your proxy command may be different depending on your operating system. That's why its important to use what the program gave to you after running the command.&lt;/p&gt;

&lt;p&gt;Append the printed text to your local SSH config using your preferred text editor. Add an additional line under the Host labeled &lt;code&gt;User&lt;/code&gt; with your Droplet's username (see below for an example). This makes it easier for Visual Studio Code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Host YOUR.DOMAIN.HERE
  ProxyCommand /usr/local/bin/cloudflared access ssh --hostname %h
  User sammy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Try connecting to your Droplet&lt;/strong&gt; using this updated SSH config. Run &lt;code&gt;ssh YOUR.DOMAIN.HERE&lt;/code&gt;. If all goes well, your browser should open prompting you to select an identity provider, you login, and authorize the request. Once authorized, your local terminal will SSH into your Droplet and you can close the opened webpage.&lt;/p&gt;

&lt;p&gt;Now it's time to setup your local Visual Studio Code IDE. Open VS Code and &lt;strong&gt;install the &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-ssh"&gt;Remote-SSH&lt;/a&gt; extension&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Once installed, by default the extension should show remote targets from your local SSH config file. You can select your newly-added target to connect to it.&lt;/p&gt;

&lt;p&gt;You can also use the &lt;code&gt;opensshremotes.openEmptyWindow&lt;/code&gt; VS Code command to select a remote target.&lt;/p&gt;

&lt;p&gt;After authentication (or if your session is still valid from your test), VS Code will connect to your Droplet and automatically install the VS Code Server (first boot only).&lt;/p&gt;

&lt;p&gt;From here, you can install extensions onto your Droplet, create directories/files, and even open a terminal in VS Code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q_sJs4iY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/zLk59w8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q_sJs4iY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/zLk59w8.png" alt="Image of Visual Studio Code, editing a file remotely."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Remote development environments are a great way to work. They allow you to develop and test your product in an environment closer to production, permits switching machines, and allows multiple people access to the environment. Using Cloudflare Access and Cloudflare Tunnel, this access can be granted or denied based on authentication through SSO providers, providing a clean way to authenticate and authorize users.&lt;/p&gt;

</description>
      <category>cloudflare</category>
      <category>digitalocean</category>
      <category>vscode</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Why I like Markdown</title>
      <author>JavaCode7</author>
      <pubDate>Mon, 07 Jun 2021 15:09:23 +0000</pubDate>
      <link>https://dev.to/javacode7/why-i-like-markdown-13oi</link>
      <guid>https://dev.to/javacode7/why-i-like-markdown-13oi</guid>
      <description>&lt;p&gt;If you are reading this, chances are you know about markdown. It is a markup language used for making articles, documentation and sometimes even websites.&lt;/p&gt;

&lt;p&gt;One of the more notable appearances of markdown in the coding world is in the DEV community! For those of you who don't know, yes dev.to articles are written in markdown.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#so-javacode7-when-did-you-first-find-out-about-markdown"&gt;
  &lt;/a&gt;
  So JavaCode7, when did you first find out about markdown?
&lt;/h3&gt;

&lt;p&gt;Good question. I first found out about markup languages (excluding HTML) last year. I was on my computer watching a youtube video on making a simulation in pygame when the youtuber in question then wrote the docs for the simulation. Those docs were in RST (ReStructured Text). I quickly picked up the basic syntax and used it for the docs of my projects to come. That was, of course until I found out about markdown.&lt;/p&gt;

&lt;p&gt;I don't remember exactly when I found out about markdown. I think it was when I joined GitHub 🤔. I think I was writing the documentation/README of one of my early projects. I realised that RST syntax wasn't working! I then went to GitHub's learn markdown page to get the basics down. Even after this however, I still didn't really like markdown.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wait-if-you-didnt-like-markdown-before-why-write-this-article"&gt;
  &lt;/a&gt;
  Wait, if you didn't like markdown before, why write this article?
&lt;/h3&gt;

&lt;p&gt;As I gradually started using markdown more (and RST less), I grew to like it more and more. The syntax is simple 😂 (and just makes plain &lt;em&gt;sense&lt;/em&gt; somewhat unlike RST), it is by far one of the more commonly used markdown languages and probably the &lt;em&gt;most&lt;/em&gt; used in writing documentation. It also supports some embedded HTML as well as giving more direct ways to do simple things that would take a few lines in HTML e.g. code blocks.&lt;/p&gt;

&lt;p&gt;I would say markdown is easy for beginners to learn. It allows small things to be done in small ways, and &lt;em&gt;that&lt;/em&gt; is one thing I like to see in a project.&lt;/p&gt;

&lt;p&gt;This concludes my article! Thank you for reading and if you would like to see content other than esolangs and/or more emojis in my articles, please just comment!&lt;/p&gt;

</description>
      <category>markdown</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>Understanding Python</title>
      <author>MikaZuki Augus</author>
      <pubDate>Mon, 07 Jun 2021 14:52:24 +0000</pubDate>
      <link>https://dev.to/mikacodez/understanding-python-10dl</link>
      <guid>https://dev.to/mikacodez/understanding-python-10dl</guid>
      <description>&lt;p&gt;At the moment I am on a self enrolled Python Course from a company named the Shaw Academy.&lt;/p&gt;

&lt;p&gt;I have decided to pickup and learn Python because I have been told by several friends and colleagues alike it is an emerging and popular technology and its one of the easiest to code in todays society amongst other programming languages.&lt;/p&gt;

&lt;p&gt;So far I can say its very much different from what I have been learning in comparison to HTML, CSS and JavaScript.&lt;/p&gt;

&lt;p&gt;The concepts seem far off from the other languages, and its definitely taking me a while to pick up some of this stuff.&lt;/p&gt;

&lt;p&gt;The only things I have been learning so far is to &lt;em&gt;print&lt;/em&gt; a result from a inserted list. This could be a math equation or just simply gathering one of the items that you have inserted in the list.&lt;/p&gt;

&lt;p&gt;So far with what I have been learning it definitely does not feel easy to pick up, or that I could code a whole interactive game just by learning this language. But hey, I guess I pretty much felt the same way when I started web design (Which I am still struggling with =[).&lt;/p&gt;

&lt;p&gt;I believe if I stick at it with my full-time coding routine I will pick up more things and then soon be able to start actually programming useful results. I guess exercising patience is the main lesson here. Anyways, I plan to fail more here so that I can learn more as I go along. &lt;/p&gt;

&lt;p&gt;Please stay tuned as I update you guys with my progress.&lt;/p&gt;

&lt;p&gt;Thank you for reading.&lt;br&gt;
Mika/Malcolm.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>python</category>
      <category>learning</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Object Destructuring In
JavaScript</title>
      <author>Nikhil Bobade </author>
      <pubDate>Mon, 07 Jun 2021 14:42:16 +0000</pubDate>
      <link>https://dev.to/nikhil27b/object-destructuring-in-javascript-1la</link>
      <guid>https://dev.to/nikhil27b/object-destructuring-in-javascript-1la</guid>
      <description>&lt;h2&gt;
  &lt;a href="#object-destructure-"&gt;
  &lt;/a&gt;
  Object Destructure :
&lt;/h2&gt;

&lt;p&gt;Object destructuring is a very useful feature of JavaScript to extract properties from objects and bind them to variables.&lt;/p&gt;

&lt;p&gt;The Object destructure is extracts multiple properties at only writing a single line. you can access properties from the nested objects and set a default value if that property doesn't exist. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#basic-object-destructuring-"&gt;
  &lt;/a&gt;
  Basic Object destructuring :
&lt;/h4&gt;

&lt;p&gt;This is a basic object identifier that can name property access and expression should evaluate to an object.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WZ76Cl83--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wljlo104l7198zw7ildh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WZ76Cl83--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wljlo104l7198zw7ildh.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#assigning-to-new-variable-names-"&gt;
  &lt;/a&gt;
  Assigning to new variable names :
&lt;/h4&gt;

&lt;p&gt;A property can be unpacked from an object and assigned to a variable with a different name than the object property.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vLPKSdJe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4rzt3kvb9but9zoi7b2o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vLPKSdJe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4rzt3kvb9but9zoi7b2o.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#object-default-values-"&gt;
  &lt;/a&gt;
  Object Default values :
&lt;/h4&gt;

&lt;p&gt;A variable can be assigned as a default value, in if object is undefined that time we can be give a default value.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FMOkkt2H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9qzuqb75op2pcw8m9lry.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FMOkkt2H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9qzuqb75op2pcw8m9lry.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#nested-object-destructuring-"&gt;
  &lt;/a&gt;
  Nested Object Destructuring :
&lt;/h4&gt;

&lt;p&gt;In a nested object destructuring you will be defined as an identifier in nesting you can extract properties from is unlimited.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cN-EmL7W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kp2yytpdlj4trcabej40.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cN-EmL7W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kp2yytpdlj4trcabej40.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#rest-object-"&gt;
  &lt;/a&gt;
  Rest object :
&lt;/h4&gt;

&lt;p&gt;The rest syntax is useful to collect the remaining properties after the destructuring also you will get the rest of the values only with the spread operator.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I1n63BhS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jfm5zk20sogvxp2bz0c7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I1n63BhS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jfm5zk20sogvxp2bz0c7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you find this useful in a post like and save this post also comments about your thoughts.&lt;/p&gt;

&lt;p&gt;For more content follow me on Instagram  &lt;a href="https://www.instagram.com/developer_nikhil27/"&gt;@developer_nikhil27&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Importance of Keys in DBMS</title>
      <author>hebaShakeel</author>
      <pubDate>Mon, 07 Jun 2021 14:40:43 +0000</pubDate>
      <link>https://dev.to/hebashakeel/importance-of-keys-in-dbms-147g</link>
      <guid>https://dev.to/hebashakeel/importance-of-keys-in-dbms-147g</guid>
      <description>&lt;p&gt;&lt;strong&gt;DBMS Keys&lt;/strong&gt;&lt;br&gt;
It is used to identify unique records by the combination of one or more fields(attributes) in the database table.&lt;br&gt;
Keys play an important role in DBMS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Different Types of Keys:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;i) Candidate Keys&lt;/strong&gt; - It is a minimal(minimum) set of attributes that can identify each tuple/row uniquely in a Relation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt; - In the below example of Employee relation, we can see that &lt;strong&gt;EPhone&lt;/strong&gt; is the only unique attribute. Hence it can be treated as a Candidate Key.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--20fJqE1t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7w0x40zozl7tg62vvoip.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--20fJqE1t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7w0x40zozl7tg62vvoip.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ii) Primary Keys&lt;/strong&gt; - It is a set of one or more attributes that can uniquely identify each tuple.&lt;br&gt;
   -&amp;gt; Primary Key cannot have "NULL" values.&lt;br&gt;
   -&amp;gt; Only one Primary Key is possible in a table.&lt;br&gt;
   -&amp;gt; Values of Primary Key are unique and they cannot be repeated.&lt;br&gt;
   -&amp;gt; One of the Candidate Keys is selected as the Primary Key.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;iii) Super Keys&lt;/strong&gt; - It is a superset of Candidate Keys.&lt;/p&gt;

&lt;p&gt;-&amp;gt; &lt;strong&gt;Trivial Super Key&lt;/strong&gt; - It is the set of all attributes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;iv) Foreign Keys&lt;/strong&gt; - An attribute which is a key in one table and it also behaves as a Primary Key in another table is known as Foreign Key.&lt;br&gt;
-&amp;gt; It is used to combine two tables logically.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;v) Alternate Key&lt;/strong&gt; - All other Candidate Keys which are not selected as a Primary Key is called as Alternate Keys. It is also called as Secondary Key.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;vi) Composite Keys&lt;/strong&gt; - If a key contains more than one attribute then it is called as a Composite Key.&lt;/p&gt;

&lt;p&gt;Example: Employee table has key=&amp;gt;{eName, eAge, eAddress}. This key will be called as Composite Key.&lt;/p&gt;

&lt;p&gt;Thank You!&lt;br&gt;
See you soon.&lt;/p&gt;

</description>
      <category>database</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>How to easily install kafka without zookeeper</title>
      <author>Aditya Sridhar</author>
      <pubDate>Mon, 07 Jun 2021 14:37:55 +0000</pubDate>
      <link>https://dev.to/adityasridhar/how-to-easily-install-kafka-without-zookeeper-1j2</link>
      <guid>https://dev.to/adityasridhar/how-to-easily-install-kafka-without-zookeeper-1j2</guid>
      <description>&lt;p&gt;&lt;strong&gt;This post was originally published in &lt;a href="https://adityasridhar.com/posts/how-to-easily-install-kafka-without-zookeeper"&gt;adityasridhar.com&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this article we will see how kafka can be setup without using zookeeper. We will setup a 3 node kafka cluster and create a test topic. We will use a kafka producer to produce data into the test topic and also use a kafka consumer to consume data from the kafka topic.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-is-zookeeper-used-in-kafka"&gt;
  &lt;/a&gt;
  Why is zookeeper used in kafka
&lt;/h1&gt;

&lt;p&gt;Zookeeper is used to store kafka cluster metadata information. Zookeeper stores information like topic configuration, topic partition locations and so on.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-will-kafka-work-without-zookeeper"&gt;
  &lt;/a&gt;
  How will kafka work without zookeeper
&lt;/h1&gt;

&lt;p&gt;Zookeeper acts as a external metadata management system for kafka. This creates multiple problems such as data duplication, increased system complexity and also leads to additional java processes being used.&lt;/p&gt;

&lt;p&gt;In order to run kafka without zookeeper, it can be run using &lt;strong&gt;Kafka Raft metadata mode ( KRaft )&lt;/strong&gt;. In &lt;strong&gt;KRaft&lt;/strong&gt; the kafka metadata information will be stored as a partition within kafka itself. There will be a KRaft Quorum of controller nodes which will be used to store the metadata. The metadata will be stored in an internal kafka topic &lt;strong&gt;@metadata&lt;/strong&gt; .&lt;/p&gt;

&lt;p&gt;This is available in an experimental mode in kafka 2.8.0&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Right now using KRaft is experimental and should not be used in production&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#setting-up-a-kafka-cluster-without-zookeeper"&gt;
  &lt;/a&gt;
  Setting up a kafka cluster without zookeeper
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#download-kafka"&gt;
  &lt;/a&gt;
  Download kafka
&lt;/h2&gt;

&lt;p&gt;Download kafka 2.8.0 from &lt;a href="https://kafka.apache.org/downloads"&gt;https://kafka.apache.org/downloads&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;wget https://apachemirror.wuchna.com/kafka/2.8.0/kafka_2.12-2.8.0.tgz
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Extract kafka&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;tar &lt;/span&gt;xzf  kafka_2.12-2.8.0.tgz
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open the kafka folder. &lt;strong&gt;All kafka commands should be run in the kafka folder&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;kafka_2.12-2.8.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#kafka-cluster-configuration"&gt;
  &lt;/a&gt;
  Kafka cluster configuration
&lt;/h2&gt;

&lt;p&gt;If you go to &lt;code&gt;config/kraft&lt;/code&gt; folder inside the kafka home directory, you will see a file called &lt;code&gt;server.properties&lt;/code&gt;. This is a sample file which is provided by kafka, to show how kafka can be started without zookeeper&lt;/p&gt;

&lt;p&gt;Create 3 new files from server.properties. This is because we will be creating a 3 node cluster&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;config/kraft
&lt;span class="nb"&gt;cp &lt;/span&gt;server.properties server1.properties
&lt;span class="nb"&gt;cp &lt;/span&gt;server.properties server2.properties
&lt;span class="nb"&gt;cp &lt;/span&gt;server.properties server3.properties
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In server1.properties, modify the following properties. Please keep the other properties as is.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;node.id&lt;span class="o"&gt;=&lt;/span&gt;1

process.roles&lt;span class="o"&gt;=&lt;/span&gt;broker,controller

inter.broker.listener.name&lt;span class="o"&gt;=&lt;/span&gt;PLAINTEXT

controller.listener.names&lt;span class="o"&gt;=&lt;/span&gt;CONTROLLER

&lt;span class="nv"&gt;listeners&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;PLAINTEXT://:9092,CONTROLLER://:19092

log.dirs&lt;span class="o"&gt;=&lt;/span&gt;/tmp/server1/kraft-combined-logs

listener.security.protocol.map&lt;span class="o"&gt;=&lt;/span&gt;CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL

controller.quorum.voters&lt;span class="o"&gt;=&lt;/span&gt;1@localhost:19092,2@localhost:19093,3@localhost:19094
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let me explain what these properties do:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;node.id&lt;/strong&gt;: This will act as the node Id in the cluster. This will help us identify which broker this is. It will also help us identify which kraft controller node this is.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;process.roles&lt;/strong&gt;: A node can act as a &lt;strong&gt;broker&lt;/strong&gt; or &lt;strong&gt;controller&lt;/strong&gt; or &lt;strong&gt;both&lt;/strong&gt;. Here we are indicating that this node can be both a kafka broker and a kraft controller node.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;inter.broker.listener.name&lt;/strong&gt;: Here the broker listener name is set to &lt;strong&gt;PLAINTEXT&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;controller.listener.names&lt;/strong&gt;: Here the controller listener name is set to &lt;strong&gt;CONTROLLER&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;listeners&lt;/strong&gt;: Here we indicate that the broker will use port 9092 and the kraft controller will use port 19092&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;log.dirs&lt;/strong&gt;: This is the log directory where kafka will store the data&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;listener.security.protocol.map&lt;/strong&gt;: Here the connection security details are added&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;controller.quorum.voters&lt;/strong&gt;: This is used to indicate all the kraft controllers which are available. Here we are indicating that we will have 3 kraft controller nodes running on ports 19092, 19093 and 19094&lt;/p&gt;

&lt;p&gt;For &lt;strong&gt;server2.properties&lt;/strong&gt; modify the following properties. Please keep the other properties as is.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;node.id&lt;span class="o"&gt;=&lt;/span&gt;2

process.roles&lt;span class="o"&gt;=&lt;/span&gt;broker,controller

controller.quorum.voters&lt;span class="o"&gt;=&lt;/span&gt;1@localhost:19092,2@localhost:19093,3@localhost:19094

&lt;span class="nv"&gt;listeners&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;PLAINTEXT://:9093,CONTROLLER://:19093

inter.broker.listener.name&lt;span class="o"&gt;=&lt;/span&gt;PLAINTEXT

controller.listener.names&lt;span class="o"&gt;=&lt;/span&gt;CONTROLLER

log.dirs&lt;span class="o"&gt;=&lt;/span&gt;/tmp/server2/kraft-combined-logs

listener.security.protocol.map&lt;span class="o"&gt;=&lt;/span&gt;CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Server 2, the broker port is 9093 and controller port is 19093. Also the log.dirs is different&lt;/p&gt;

&lt;p&gt;For &lt;strong&gt;server3.properties&lt;/strong&gt; modify the following properties. Please keep the other properties as is.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;node.id&lt;span class="o"&gt;=&lt;/span&gt;3

process.roles&lt;span class="o"&gt;=&lt;/span&gt;broker,controller

controller.quorum.voters&lt;span class="o"&gt;=&lt;/span&gt;1@localhost:19092,2@localhost:19093,3@localhost:19094

&lt;span class="nv"&gt;listeners&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;PLAINTEXT://:9094,CONTROLLER://:19094

inter.broker.listener.name&lt;span class="o"&gt;=&lt;/span&gt;PLAINTEXT

controller.listener.names&lt;span class="o"&gt;=&lt;/span&gt;CONTROLLER

log.dirs&lt;span class="o"&gt;=&lt;/span&gt;/tmp/server3/kraft-combined-logs

listener.security.protocol.map&lt;span class="o"&gt;=&lt;/span&gt;CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Server 3 the broker port is 9094 and the controller port is 19094. Also the log.dirs is different&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-complete-server-property-files-are-available-in-this-git-repo"&gt;
  &lt;/a&gt;
  The complete server property files are available in this &lt;a href="https://github.com/aditya-sridhar/kafka-kraft-demo"&gt;Git repo&lt;/a&gt;
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#kafka-cluster-id-creation-and-log-directory-setup"&gt;
  &lt;/a&gt;
  Kafka cluster id creation and log directory setup
&lt;/h2&gt;

&lt;p&gt;First we need to create kafka cluster id before starting the servers. This can be done using the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;./bin/kafka-storage.sh random-uuid
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note down the uuid that comes after running the above statement. In my case I got the following uuid&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt; ./bin/kafka-storage.sh random-uuid
 9dJzdGvfTPaCY4e8klXaDQ
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we need to format all the storage directories. This is basically the directory that we put in &lt;strong&gt;log.dirs&lt;/strong&gt; property.&lt;/p&gt;

&lt;p&gt;This can be done with the following command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;./bin/kafka-storage.sh format &lt;span class="nt"&gt;-t&lt;/span&gt; &amp;lt;uuid&amp;gt; &lt;span class="nt"&gt;-c&lt;/span&gt; &amp;lt;server_config_location&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Replace &lt;code&gt;&amp;lt;uuid&amp;gt;&lt;/code&gt; with the uuid that you got in the previous step. Replace &lt;code&gt;&amp;lt;server_config_location&amp;gt;&lt;/code&gt; with the server property files&lt;/p&gt;

&lt;p&gt;In my case, I will be running the following commands&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For Server 1:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;./bin/kafka-storage.sh format &lt;span class="nt"&gt;-t&lt;/span&gt; 9dJzdGvfTPaCY4e8klXaDQ &lt;span class="nt"&gt;-c&lt;/span&gt; ./config/kraft/server1.properties
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;For Server 2:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;./bin/kafka-storage.sh format &lt;span class="nt"&gt;-t&lt;/span&gt; 9dJzdGvfTPaCY4e8klXaDQ &lt;span class="nt"&gt;-c&lt;/span&gt; ./config/kraft/server2.properties
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;For Server 3:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;./bin/kafka-storage.sh format &lt;span class="nt"&gt;-t&lt;/span&gt; 9dJzdGvfTPaCY4e8klXaDQ &lt;span class="nt"&gt;-c&lt;/span&gt; ./config/kraft/server3.properties
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the result which you get when you run the 3 commands&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./bin/kafka-storage.sh format &lt;span class="nt"&gt;-t&lt;/span&gt; 9dJzdGvfTPaCY4e8klXaDQ &lt;span class="nt"&gt;-c&lt;/span&gt; ./config/kraft/server1.properties
Formatting /tmp/server1/kraft-combined-logs
&lt;span class="nv"&gt;$ &lt;/span&gt;./bin/kafka-storage.sh format &lt;span class="nt"&gt;-t&lt;/span&gt; 9dJzdGvfTPaCY4e8klXaDQ &lt;span class="nt"&gt;-c&lt;/span&gt; ./config/kraft/server2.properties
Formatting /tmp/server2/kraft-combined-logs
&lt;span class="nv"&gt;$ &lt;/span&gt;./bin/kafka-storage.sh format &lt;span class="nt"&gt;-t&lt;/span&gt; 9dJzdGvfTPaCY4e8klXaDQ &lt;span class="nt"&gt;-c&lt;/span&gt; ./config/kraft/server3.properties
Formatting /tmp/server3/kraft-combined-logs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#starting-the-kafka-servers"&gt;
  &lt;/a&gt;
  Starting the kafka servers
&lt;/h2&gt;

&lt;p&gt;The kafka servers can be started in daemon mode using the following commands:&lt;/p&gt;

&lt;p&gt;First setup the heap properties&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;KAFKA_HEAP_OPTS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"-Xmx200M –Xms100M"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are giving a very small max heap of 200M since we are running all the servers in a single local machine. If you have bigger servers you can give heap size of 1GB or Above.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Start Server 1:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;./bin/kafka-server-start.sh &lt;span class="nt"&gt;-daemon&lt;/span&gt; ./config/kraft/server1.properties
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Start Server 2:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;./bin/kafka-server-start.sh &lt;span class="nt"&gt;-daemon&lt;/span&gt; ./config/kraft/server2.properties
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Start Server 3:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;./bin/kafka-server-start.sh &lt;span class="nt"&gt;-daemon&lt;/span&gt; ./config/kraft/server3.properties
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#create-a-kafka-topic"&gt;
  &lt;/a&gt;
  Create a kafka topic
&lt;/h2&gt;

&lt;p&gt;Let us create a topic &lt;strong&gt;kraft-test&lt;/strong&gt; in this cluster&lt;/p&gt;

&lt;p&gt;The topic can be created using the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;./bin/kafka-topics.sh &lt;span class="nt"&gt;--create&lt;/span&gt; &lt;span class="nt"&gt;--topic&lt;/span&gt; kraft-test &lt;span class="nt"&gt;--partitions&lt;/span&gt; 3 &lt;span class="nt"&gt;--replication-factor&lt;/span&gt; 3 &lt;span class="nt"&gt;--bootstrap-server&lt;/span&gt; localhost:9092
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are creating a topic with 3 partitions and 3 replicas since we have 3 nodes.&lt;/p&gt;

&lt;p&gt;We can list the topics present in the cluster using the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;bin/kafka-topics.sh &lt;span class="nt"&gt;--bootstrap-server&lt;/span&gt; localhost:9093 &lt;span class="nt"&gt;--list&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running the above command gives the below result&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;bin/kafka-topics.sh &lt;span class="nt"&gt;--bootstrap-server&lt;/span&gt; localhost:9093 &lt;span class="nt"&gt;--list&lt;/span&gt;
kraft-test
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can describe the topics present in the cluster using the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;bin/kafka-topics.sh &lt;span class="nt"&gt;--bootstrap-server&lt;/span&gt; localhost:9093 &lt;span class="nt"&gt;--describe&lt;/span&gt; &lt;span class="nt"&gt;--topic&lt;/span&gt; kraft-test
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running the above command gives the below result&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;bin/kafka-topics.sh &lt;span class="nt"&gt;--bootstrap-server&lt;/span&gt; localhost:9093 &lt;span class="nt"&gt;--describe&lt;/span&gt; &lt;span class="nt"&gt;--topic&lt;/span&gt; kraft-test
Topic: kraft-test       TopicId: vZKswHHlQk2mEOw0yzAGAA PartitionCount: 3       ReplicationFactor: 3    Configs: segment.bytes&lt;span class="o"&gt;=&lt;/span&gt;1073741824
        Topic: kraft-test       Partition: 0    Leader: 3       Replicas: 3,2,1 Isr: 3,2,1
        Topic: kraft-test       Partition: 1    Leader: 2       Replicas: 2,3,1 Isr: 2,3,1
        Topic: kraft-test       Partition: 2    Leader: 2       Replicas: 2,3,1 Isr: 2,3,1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#exploring-the-kafka-metadata-using-metadata-shell"&gt;
  &lt;/a&gt;
  Exploring the kafka metadata using metadata shell
&lt;/h2&gt;

&lt;p&gt;Similar to zookeeper cli, there is a &lt;strong&gt;metadata shell&lt;/strong&gt; provided by kafka so that we can read the data in the &lt;strong&gt;@metadata&lt;/strong&gt; internal topic.&lt;/p&gt;

&lt;p&gt;Open the shell using the following command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;./bin/kafka-metadata-shell.sh  &lt;span class="nt"&gt;--snapshot&lt;/span&gt; /tmp/server1/kraft-combined-logs/&lt;span class="se"&gt;\@&lt;/span&gt;metadata-0/00000000000000000000.log
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The structure here is very similar to what we see in zookeeper&lt;/p&gt;

&lt;p&gt;In order the list the brokers you can type &lt;code&gt;ls brokers/&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;ls &lt;/span&gt;brokers/
1  2  3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to list the topics you can type &lt;code&gt;ls topics/&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;ls &lt;/span&gt;topics/
kraft-test
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to see the topic metadata you can type &lt;code&gt;cat topics/kraft-test/0/data&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;cat &lt;/span&gt;topics/kraft-test/0/data
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;"partitionId"&lt;/span&gt; : 0,
  &lt;span class="s2"&gt;"topicId"&lt;/span&gt; : &lt;span class="s2"&gt;"vZKswHHlQk2mEOw0yzAGAA"&lt;/span&gt;,
  &lt;span class="s2"&gt;"replicas"&lt;/span&gt; : &lt;span class="o"&gt;[&lt;/span&gt; 3, 2, 1 &lt;span class="o"&gt;]&lt;/span&gt;,
  &lt;span class="s2"&gt;"isr"&lt;/span&gt; : &lt;span class="o"&gt;[&lt;/span&gt; 3, 2, 1 &lt;span class="o"&gt;]&lt;/span&gt;,
  &lt;span class="s2"&gt;"removingReplicas"&lt;/span&gt; : null,
  &lt;span class="s2"&gt;"addingReplicas"&lt;/span&gt; : null,
  &lt;span class="s2"&gt;"leader"&lt;/span&gt; : 3,
  &lt;span class="s2"&gt;"leaderEpoch"&lt;/span&gt; : 0,
  &lt;span class="s2"&gt;"partitionEpoch"&lt;/span&gt; : 0
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to find the controller leader node you can type &lt;code&gt;cat metadataQuorum/leader&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;cat &lt;/span&gt;metadataQuorum/leader
MetaLogLeader&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;nodeId&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;2, &lt;span class="nv"&gt;epoch&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;4&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Type &lt;code&gt;exit&lt;/code&gt; to get out of the metadata shell&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#producing-and-consuming-data-from-kafka"&gt;
  &lt;/a&gt;
  Producing and consuming data from kafka
&lt;/h2&gt;

&lt;p&gt;Use the following command to start a kafka producer in the terminal&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;bin/kafka-console-producer.sh &lt;span class="nt"&gt;--broker-list&lt;/span&gt; localhost:9092 &lt;span class="nt"&gt;--topic&lt;/span&gt; kraft-test
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In a different terminal, use the following command to start a kafka consumer&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;bin/kafka-console-consumer.sh &lt;span class="nt"&gt;--bootstrap-server&lt;/span&gt; localhost:9092 &lt;span class="nt"&gt;--topic&lt;/span&gt; kraft-test
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the producer terminal send a bunch of messages as shown below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;bin/kafka-console-producer.sh &lt;span class="nt"&gt;--broker-list&lt;/span&gt; localhost:9092 &lt;span class="nt"&gt;--topic&lt;/span&gt; kraft-test
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;message 1
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;message 2
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;message 3
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;hello
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;bye
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the consumer terminal you would see the messages coming as shown below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;bin/kafka-console-consumer.sh &lt;span class="nt"&gt;--bootstrap-server&lt;/span&gt; localhost:9092 &lt;span class="nt"&gt;--topic&lt;/span&gt; kraft-test                                                                       
message 1
message 2
message 3
hello
bye
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#congrats"&gt;
  &lt;/a&gt;
  Congrats 😊
&lt;/h1&gt;

&lt;p&gt;You have now learnt how to setup kafka without zookeeper. &lt;strong&gt;This is still an experimental feature and should not be used in production.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#if-you-are-interested-in-realtime-analytics-using-kafka-and-apache-pinot-feel-free-to-checkout-my-course-in-udemy-by-clicking-on-the-image-below"&gt;
  &lt;/a&gt;
  If you are interested in realtime analytics using kafka and Apache Pinot, feel free to checkout my course in Udemy by clicking on the Image below
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.udemy.com/course/apache-pinot-a-hands-on-course/?referralCode=67F5295AA86AF59C00E4"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YGk9xtCU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v2suzfmqpw1ro7x1r3tt.jpg" alt="Apache Pinot a hands on course"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://kafka.apache.org/"&gt;https://kafka.apache.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cwiki.apache.org/confluence/display/KAFKA/KIP-500%3A+Replace+ZooKeeper+with+a+Self-Managed+Metadata+Quorum"&gt;https://cwiki.apache.org/confluence/display/KAFKA/KIP-500&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#feel-free-to-connect-with-me-in-linkedin-or-follow-me-in-twitter"&gt;
  &lt;/a&gt;
  Feel free to connect with me in &lt;a href="https://www.linkedin.com/in/aditya1811/"&gt;LinkedIn&lt;/a&gt; or follow me in &lt;a href="https://twitter.com/adityasridhar18"&gt;twitter&lt;/a&gt;.
&lt;/h3&gt;

</description>
      <category>kafka</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>bigdata</category>
    </item>
    <item>
      <title>How I deal with file locking in a version control software I made in Angular &amp; Electron</title>
      <author>Sebastian Rath</author>
      <pubDate>Mon, 07 Jun 2021 14:21:15 +0000</pubDate>
      <link>https://dev.to/sebmtl/today-i-released-a-version-control-software-for-2d-3d-artists-and-graphic-designers-made-in-angular-electron-nck</link>
      <guid>https://dev.to/sebmtl/today-i-released-a-version-control-software-for-2d-3d-artists-and-graphic-designers-made-in-angular-electron-nck</guid>
      <description>&lt;p&gt;I developed a version control software for graphic designers and 2D/3D artists called &lt;a href="https://www.snowtrack.io"&gt;Snowtrack&lt;/a&gt;. I developed it in Angular and Electron. In this blog post, I will cover some technical challenges about file locks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-snowtrack"&gt;
  &lt;/a&gt;
  What is Snowtrack?
&lt;/h2&gt;

&lt;p&gt;Snowtrack is an intuitive, easy-to-use, and super-fast version control software for graphic projects. Its purpose is to make version control accessible to graphic designers and 2D/3D artists with a non-technical workflow.&lt;/p&gt;

&lt;p&gt;To get a better understanding of Snowtracks user interface check out the following screenshot:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6TNE_NWK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vq9d2lnwf9ahuy719vfo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6TNE_NWK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vq9d2lnwf9ahuy719vfo.png" alt="snowtrack-screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-i-used-to-build-it"&gt;
  &lt;/a&gt;
  What I used to build it
&lt;/h2&gt;

&lt;p&gt;For the UI application I used a combination of Angular and Electron. The underlying version control engine is called &lt;strong&gt;SnowFS&lt;/strong&gt;, an open-source project I developed a fast and simple alternative to &lt;em&gt;Git&lt;/em&gt; and &lt;em&gt;Git LFS&lt;/em&gt;. Feel free to check it out on &lt;a href="https://github.com/snowtrack/snowfs"&gt;GitHub&lt;/a&gt;. A few months ago I wrote a blog post about it &lt;a href="https://dev.to/sebmtl/snowfs-let-s-bring-version-control-to-graphic-projects-10p8"&gt;here&lt;/a&gt; on &lt;em&gt;dev.to&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#technical-challenge-no-1"&gt;
  &lt;/a&gt;
  Technical challenge no. 1
&lt;/h2&gt;

&lt;p&gt;Graphic projects can differ in size tremendously. From a single Photoshop file up to a 50 GB file set of 3D scenes, textures, and assets. These project types come with their own set of problems. In the following I want to clear up some misconceptions about the topic around &lt;em&gt;file locking&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#file-locking"&gt;
  &lt;/a&gt;
  File Locking
&lt;/h2&gt;

&lt;p&gt;Take a look at the code snippet below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Process 1
fd = fs.openSync("~/foo", "w");

// Process 2
fd = fs.openSync("~/foo", "w");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Imagine more than one process wants to open the same file at the same time. What do you think will happen?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; It depends on the OS and if you're the maintainer of all processes.&lt;/p&gt;

&lt;p&gt;When you call &lt;code&gt;fs.openSync&lt;/code&gt; NodeJS will forward the call behind the scenes to an OS function as you can see from &lt;a href="https://github.com/libuv/libuv/blob/b201c1a0f0b1ba2365dc285f466ff6fe5307decf/src/unix/fs.c#L380-L389"&gt;this C code&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;ssize_t&lt;/span&gt; &lt;span class="nf"&gt;uv__fs_open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uv_fs_t&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;flags&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;O_CLOEXEC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The function &lt;code&gt;open(..)&lt;/code&gt; is an OS function and available in all operating systems. But the internals of this function differ between Windows, Linux and macOS so I will cover them separately.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#macoslinux"&gt;
  &lt;/a&gt;
  macOS/Linux
&lt;/h1&gt;

&lt;p&gt;Technically, neither macOS nor Linux have true file-locking mechanisms.. Although you can read or write-lock a file using another function called &lt;a href="https://man7.org/linux/man-pages/man2/fcntl.2.html"&gt;&lt;code&gt;fcntl&lt;/code&gt;&lt;/a&gt;, only programs which use this function regard and respect the file lock. This means, any other process which &lt;strong&gt;doesn't&lt;/strong&gt; use &lt;code&gt;fcntl&lt;/code&gt; can acquire a file handle and manipulate it as long as the file permissions allow it. What a bummer.&lt;/p&gt;

&lt;p&gt;That's why file locking on macOS and Linux is also called &lt;a href="https://news.ycombinator.com/item?id=17601581"&gt;"advisory file locking"&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#windows"&gt;
  &lt;/a&gt;
  Windows
&lt;/h2&gt;

&lt;p&gt;Windows is more complicated in that matter. Windows offers two functions to open a file. Either through the Windows API function called &lt;a href="https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfilea"&gt;CreateFile&lt;/a&gt; (yes, that's really the name to open files),...&lt;/p&gt;

&lt;p&gt;...or through &lt;a href="https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/open?view=msvc-160"&gt;&lt;code&gt;open(..)&lt;/code&gt;&lt;/a&gt;. But the &lt;code&gt;open(..)&lt;/code&gt; function on Windows is a POSIX extension and uses &lt;code&gt;CreateFile&lt;/code&gt; internally as well.&lt;/p&gt;

&lt;p&gt;As we've seen above NodeJS uses &lt;code&gt;open(..)&lt;/code&gt;, but since we know that this is just a wrapper for &lt;code&gt;CreateFile&lt;/code&gt;, let's check out that function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// The low-level open function of Windows.&lt;/span&gt;
&lt;span class="n"&gt;HANDLE&lt;/span&gt; &lt;span class="nf"&gt;CreateFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="n"&gt;LPCSTR&lt;/span&gt;                &lt;span class="n"&gt;lpFileName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;DWORD&lt;/span&gt;                 &lt;span class="n"&gt;dwDesiredAccess&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;DWORD&lt;/span&gt;                 &lt;span class="n"&gt;dwShareMode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;LPSECURITY_ATTRIBUTES&lt;/span&gt; &lt;span class="n"&gt;lpSecurityAttributes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;DWORD&lt;/span&gt;                 &lt;span class="n"&gt;dwCreationDisposition&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;DWORD&lt;/span&gt;                 &lt;span class="n"&gt;dwFlagsAndAttributes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;HANDLE&lt;/span&gt;                &lt;span class="n"&gt;hTemplateFile&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;CreateFile&lt;/code&gt; has a parameter called &lt;code&gt;dwShareMode&lt;/code&gt;. A file that is opened with &lt;code&gt;dwShareMode=0&lt;/code&gt; &lt;strong&gt;cannot&lt;/strong&gt; be opened again until its handle has been closed.&lt;/p&gt;

&lt;p&gt;So if you use &lt;code&gt;open(..)&lt;/code&gt; on a file that was already open by another process with &lt;code&gt;CreateFile(…, dwShareMode=0)&lt;/code&gt; you receive this error message:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The process cannot access the file because it is being used by another process&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;On the other hand, if you use &lt;code&gt;fs.openSync&lt;/code&gt; in NodeJS, or &lt;code&gt;open(..)&lt;/code&gt; in C/C++, to open a file that hasn't been opened yet, you cannot prevent another application from modifying it*.&lt;/p&gt;

&lt;p&gt;* Unless you you use file permissions as a workaround, but that’s not really a file lock.&lt;/p&gt;

&lt;p&gt;To prove this, you will see that our &lt;code&gt;fs.openSync&lt;/code&gt; call executes &lt;code&gt;CreateFile&lt;/code&gt; with the read/write shared flags to comply with the POSIX standard.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OZCspf1s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f0ghmvit3mr3azndpgur.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OZCspf1s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f0ghmvit3mr3azndpgur.png" alt="foo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This means on Windows you cannot prevent another application from opening and modifying your file if you don't use &lt;code&gt;CreateFile&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-this-have-to-do-with-snowtrack"&gt;
  &lt;/a&gt;
  What does this have to do with Snowtrack?
&lt;/h2&gt;

&lt;p&gt;Imagine a user saving a big file in a graphic application and while the file is still being written to disk, the user attempts to commit the file change. How does Snowtrack deal with this?&lt;/p&gt;

&lt;p&gt;As we learned, &lt;code&gt;open(..)&lt;/code&gt; has no file locking and most applications don't even follow the file protocol and Snowtrack cannot control how Photoshop, Blender, and co. open and write their files.&lt;/p&gt;

&lt;p&gt;This means the only reliable chance of detecting if a file is still being written by another process is to check prior to a commit if any process on the system has a write handle on that file.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;On Windows, I solved this with a custom helper process and and the Windows API of &lt;a href="https://docs.microsoft.com/en-us/windows/win32/rstmgr/about-restart-manager"&gt;Restart Manager&lt;/a&gt; which is mainly used for installers to ensure the files it is about to replace are not open anymore.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;On MacOS I invoke the system process &lt;a href="https://ss64.com/osx/lsof.html"&gt;&lt;code&gt;/usr/sbin/lsof&lt;/code&gt;&lt;/a&gt; (list open files) with an inclusion of the working-directory to speed up the execution of this command.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-else"&gt;
  &lt;/a&gt;
  What else?
&lt;/h3&gt;

&lt;p&gt;The development of Snowtrack came with countless technical challenges and I would be happy to share more insights. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;File locking&lt;/em&gt;, &lt;em&gt;Electron/Angular&lt;/em&gt; &lt;em&gt;race conditions&lt;/em&gt;, &lt;em&gt;I/O saturation&lt;/em&gt;, &lt;em&gt;build server&lt;/em&gt;, &lt;em&gt;update mechanisms&lt;/em&gt;, &lt;em&gt;edge cases&lt;/em&gt;, .. with this project I touched many subjects and I would be happy to write a follow-up blog post if you are interested. Let me know in the comments below.&lt;/p&gt;

&lt;p&gt;If you want to support SnowFS, Snowtrack or me then feel free to join me on &lt;a href="https://twitter.com/snowtrack_io"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks for reading :-)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TLDR
&lt;/h2&gt;

&lt;p&gt;Don't get me started on file-locking.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#addendum-what-about-the-file-in-use-dialog-in-windows"&gt;
  &lt;/a&gt;
  Addendum: What about the &lt;em&gt;"File In Use"&lt;/em&gt; dialog in Windows?
&lt;/h2&gt;

&lt;p&gt;If you are a Windows user you might have seen this error message before:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Okawakut--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ah632ge0flhg77dgd4pf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Okawakut--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ah632ge0flhg77dgd4pf.png" alt="Untitled"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Windows, or rather NTFS, behaves very different compared to other file systems like &lt;em&gt;HFS+&lt;/em&gt;, &lt;em&gt;APFS&lt;/em&gt;, &lt;em&gt;ext3&lt;/em&gt;, ...&lt;/p&gt;

&lt;p&gt;There is no equivalent to inodes in NTFS and therefore no garbage collection deletes the file if the last file handle to an already deleted file is closed. The &lt;em&gt;File in Use&lt;/em&gt; dialog only indicates, that if any process has a file handle to a given file (no matter how it got opened), it cannot be renamed, moved, or deleted. That does not imply a file lock on the file content.&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>typescript</category>
      <category>angular</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Programmatically generating color palettes</title>
      <author>Siddharth</author>
      <pubDate>Mon, 07 Jun 2021 14:09:18 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/programmatically-generating-color-palettes-5cgn</link>
      <guid>https://dev.to/siddharthshyniben/programmatically-generating-color-palettes-5cgn</guid>
      <description>&lt;p&gt;You may have seen color palettes like the &lt;a href="https://material.io/design/color/the-color-system.html#:~:text=2014%20Material%20Design,Design%20color%20palettes"&gt;Material Palette&lt;/a&gt; or the &lt;a href="https://tailwindcss.com/docs/customizing-colors"&gt;tailwind colors&lt;/a&gt;. Well, I wanted to know how these were generated and wanted to generate my own too. Here's how I did it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-base-colors"&gt;
  &lt;/a&gt;
  The Base Colors
&lt;/h2&gt;

&lt;p&gt;This was the easiest one because I could just &lt;a href="https://dev.to/siddharthshyniben/why-hsl-is-better-3inl"&gt;use &lt;code&gt;hsl&lt;/code&gt;&lt;/a&gt; to adjust the hue by a certain step. So we get &lt;code&gt;hsl(0, 50%, 50%)&lt;/code&gt;, &lt;code&gt;hsl(20, 50%, 50%)&lt;/code&gt;, &lt;code&gt;hsl(40, 50%, 50%)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jnGrHh4o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8kq88u0ojl9zd0kppd6u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jnGrHh4o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8kq88u0ojl9zd0kppd6u.png" alt="Base colors"&gt;&lt;/a&gt;&lt;/p&gt;
That was easy enough



&lt;h2&gt;
  &lt;a href="#the-rest-of-the-palette"&gt;
  &lt;/a&gt;
  The rest of the palette
&lt;/h2&gt;

&lt;p&gt;Then, I thought of iterating over the saturation to brighten or darken the colors. So I iterated again, adding in 10 to the value, but there was always grey at the start of every color.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nGBsfLo8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v5rhodyhl7xwi0dfn9uz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nGBsfLo8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v5rhodyhl7xwi0dfn9uz.png" alt="Color palette with grey at the start"&gt;&lt;/a&gt;&lt;br&gt;Not quite right
 &lt;/p&gt;

&lt;p&gt;Tweaking the loop gave me this final palette:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/SiddharthShyniben/embed/JjWLBYe?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Not the best, but OK by my standards&lt;/p&gt;

</description>
      <category>css</category>
      <category>design</category>
      <category>javascript</category>
      <category>color</category>
    </item>
  </channel>
</rss>
