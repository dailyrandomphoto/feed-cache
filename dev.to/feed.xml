<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What does 2022 have in store for cybersecurity and cloud security specialists?</title>
      <author>CAST AI</author>
      <pubDate>Wed, 29 Dec 2021 14:51:54 +0000</pubDate>
      <link>https://dev.to/castai/what-does-2022-have-in-store-for-cybersecurity-and-cloud-security-specialists-4ppi</link>
      <guid>https://dev.to/castai/what-does-2022-have-in-store-for-cybersecurity-and-cloud-security-specialists-4ppi</guid>
      <description>&lt;p&gt;Cloud adoption and industry transformation are accelerating as the world looks for efficiency. Let’s face it, 2022 promises to be another busy year for cybersecurity and cloud security specialists. &lt;/p&gt;

&lt;p&gt;According to the 2021 &lt;a href="https://www.isc2.org//-/media/ISC2/Research/2021/ISC2-Cybersecurity-Workforce-Study-2021.ashx"&gt;ISC Cybersecurity Workforce Study&lt;/a&gt;, &lt;strong&gt;we are still short 2.7 million cybersecurity professionals&lt;/strong&gt; globally. There aren’t enough people to keep up with the rising threat, so we need to deploy automation heavily to tackle it. &lt;/p&gt;

&lt;p&gt;This is compounded by the stark reality that attackers only have to be right once to pull off a successful cyberattack, while defenders have to do so 100% of the time.&lt;/p&gt;

&lt;p&gt;In this post, I want to highlight the &lt;strong&gt;three particular threat vectors&lt;/strong&gt; that, in my opinion, have the potential for large-scale and global impact in 2022:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#nationstateactorsandcriticalinfrastructure"&gt;Nation-state actors and critical infrastructure&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href="#securityrisksofmovinggovernmentworkloadstothecloud"&gt;Security risks of moving government workloads to the cloud&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#growingadoptioofcontainersandcloudnative"&gt;Growing adoption of containers and cloud-native technologies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#securitychallengeswithmulticloud"&gt;Security challenges with multi-cloud organizations&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#thecurseofabundance"&gt;The curse of abundance&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#morecloudsmorechallenges"&gt;More clouds, more challenges&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#governmentsalsogetonthemulticloudbandwagon"&gt;Governments also get on the multi-cloud bandwagon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;h2 id="nationstateactorsandcriticalinfrastructure"&gt;Nation-state actors and critical infrastructure&lt;/h2&gt;

&lt;p&gt;Tensions between Russia and Ukraine are compounding with a &lt;a href="https://edition.cnn.com/2021/12/17/politics/russia-troops-ukraine-border-biden/index.html"&gt;troop buildup&lt;/a&gt; at their common border. As NATO gets involved, Russia is being pressured from all sides, yet it is unlikely to back down. However, as we have seen recently, acts of aggression don’t start with bullets being fired and bombs being dropped. &lt;/p&gt;

&lt;p&gt;Cyber attacks are the first line of aggression, and Russia has not been shy in this regard. In his book &lt;a href="https://www.amazon.com/Sandworm-Cyberwar-Kremlins-Dangerous-Hackers/dp/0385544405"&gt;&lt;em&gt;Sandworm&lt;/em&gt;&lt;/a&gt;, Andy Greenberg details the large-scale investment Russia has been making into state-sponsored cyberattack capabilities. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;As tensions escalate, the most interesting targets for 2022 will be critical infrastructures such as electricity, fuel pipelines, telecommunications, and broadband. &lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Similar tensions have been taking place between China and the US in relation to Taiwan. There will probably be activity in this region in 2022 because Taiwan’s chip production capabilities are strategic for the American tech sector. &lt;/p&gt;

&lt;p&gt;As the US scrambles to create production capacity elsewhere, Taiwan will remain its important defense point in the short and medium terms. Similar to the Russian case, initial strikes will likely come on the cyber front. China has very capable cybersecurity threat actors, both internally and in cooperation with North Korea.&lt;/p&gt;

&lt;h2 id="securityrisksofmovinggovernmentworkloadstothecloud"&gt;Security risks of moving government workloads to the cloud&lt;/h2&gt;

&lt;p&gt;Complexity increases as government organizations are moving to the cloud. For example, we have seen a big push from cloud providers such as AWS, Azure, GCP, Oracle, and IBM to lure governments into their versions of secure data centers. &lt;/p&gt;

&lt;p&gt;We have even seen ‘air gap’ offerings targeted at top secret organizations that provide for fully disconnected regions that operate independently from Internet connectivity. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The movement of workloads from private underground facilities to cloud provider-operated data centers can potentially introduce significant efficiencies but also security risks.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This is a vulnerable transition point that attackers will certainly exploit.&lt;/p&gt;

&lt;h2 id="growingadoptioofcontainersandcloudnative"&gt;Growing adoption of containers and cloud-native technologies&lt;/h2&gt;

&lt;p&gt;At &lt;a href="https://cast.ai/"&gt;CAST AI&lt;/a&gt;, we are super bullish on adopting containers and cloud-native technologies such as Kubernetes. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;However, the security profile for containers is significantly different than for Virtual Machines. &lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In VMs, there is a Hypervisor that sits between customers and workloads providing solid isolation. The isolation model for containers is much weaker and comes with its own threat vectors and challenges. Organizations have to understand these differences and prepare appropriately to safely unlock the benefits of lightweight containerization. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In fact, AWS was so concerned about this difference in isolation that they created &lt;a href="https://firecracker-microvm.github.io/"&gt;Firecracker microVM&lt;/a&gt;. &lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Specifically, with Function-as-a-Service (aka ‘Lambda’), a customer may be running their function workload right beside a competitor or bad actor on the same infrastructure. We don’t believe Firecracker has been rolled out ubiquitously across all AWS services, but the concern is real.&lt;/p&gt;

&lt;p&gt;Just a few years ago vulnerabilities such as &lt;a href="https://www.techrepublic.com/article/spectre-and-meltdown-explained-a-comprehensive-guide-for-professionals/"&gt;Spectre and Meltdown&lt;/a&gt; were reported, and the world rushed to close the gaps. These were precisely the types of hardware processor flaws that allow computer &lt;em&gt;processes &lt;/em&gt;to steal information from their neighbors. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Containers, which are essentially processes, are particularly vulnerable due to their lower isolation levels. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;So will we see another Spectre and Meltdown in 2022?&lt;/p&gt;

&lt;p&gt;This is yet to be seen, but one thing is certain. As an industry, we need to pay close attention to container security. That’s why at CAST AI we plan to increase our engagement in helping customers secure their containerized workloads and Kubernetes environments.&lt;/p&gt;

&lt;h2 id="securitychallengeswithmulticloud"&gt;Security challenges with multi-cloud organizations&lt;/h2&gt;

&lt;p&gt;Most organizations are moving to a state where they work with &lt;a href="https://cast.ai/blog/how-to-spin-a-multi-cloud-application-with-cast-ai/"&gt;multiple cloud vendors&lt;/a&gt;. Customers don’t want to put all of their eggs into a single cloud basket, nor should they. &lt;/p&gt;

&lt;p&gt;We have seen recent outages at AWS and Google Cloud that brought down major consumer-facing services for hours. Customers using the cloud for IT infrastructure must diversify their usage of cloud vendors.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;On the flip side of that movement comes the challenge of securing vastly different environments. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;As an industry, we recently went through the turmoil of migrating security from on-prem to cloud. Vendors such as AWS, Azure, Oracle, and GCP now provide proprietary security solutions that deal with their specific cloud nuances. &lt;/p&gt;

&lt;h3 id="thecurseofabundance"&gt;The curse of abundance&lt;/h3&gt;

&lt;p&gt;Just looking at the list of AWS security services, many of which overlap, is enough to make your head spin: AWS Identity &amp;amp; Access Management (IAM), Amazon Cognito, AWS Resource Access Manager, AWS Security Hub, Amazon GuardDuty, Amazon Inspector, AWS Config, AWS CloudTrail, AWS IoT Device Defender, AWS Web Application Firewall, AWS HSM, Key Management Service... &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The list goes on for dozens of services related to securing your environment. Just trying to configure these services to get your AWS posture secure is extremely difficult. &lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ask the security team at Capital One. In July of 2019, &lt;a href="https://www.washingtonpost.com/national-security/capital-one-fined-2019-hack/2020/08/06/90c2c836-d7f3-11ea-aff6-220dd3a14741_story.html"&gt;the bank leaked the personal information of over 100 million customers&lt;/a&gt;. The root cause was a security misconfiguration tied to the Web Application Firewall and S3 object store. &lt;/p&gt;

&lt;p&gt;The configuration issue was so complex that it took weeks for industry experts to unravel the entire scenario. Adding insult to injury, Capital One had to pay an $80 million fine to US bank regulators. &lt;/p&gt;

&lt;h3 id="morecloudsmorechallenges"&gt;More clouds, more challenges&lt;/h3&gt;

&lt;p&gt;Now imagine a team responsible for multiple cloud environments. &lt;/p&gt;

&lt;p&gt;Not only do they have to navigate the dozens of AWS services available, but also become experts in Azure Security Center or Google Cloud security services. The complexity of the task grows exponentially as cloud vendors are introduced. &lt;/p&gt;

&lt;p&gt;Organizations have to turn to third-party vendors to implement a category of solutions called CASB – cloud access security broker – to detect multi-cloud configuration drift and best practices.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;As organizations move to multiple cloud providers, the multi-cloud misconfiguration may become the next source of cloud vulnerabilities and attack surfaces.&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3 id="governmentsalsogetonthemulticloudbandwagon"&gt;Governments also get on the multi-cloud bandwagon&lt;/h3&gt;

&lt;p&gt;Interestingly, governments are also moving to leverage multiple cloud vendors. &lt;/p&gt;

&lt;p&gt;The US government recently canceled project JEDI and replaced it with &lt;a href="https://www.defense.gov/News/News-Stories/Article/Article/2684754/dod-aims-for-new-enterprise-wide-cloud-by-2022/"&gt;Joint Warfighter Cloud Capability&lt;/a&gt;, which is touted as a multibillion-dollar procurement project spanning several vendors.&lt;/p&gt;

&lt;p&gt;As governments move to adopt multiple clouds, what are the prospects for nation-state actors and the exploitation of these new attack vectors? This brings us back full circle to the first category of vulnerabilities we identified, that is, critical infrastructure.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Will 2022 be a benign year for cyberattacks, or will these new attack surfaces become an acute threat? The future will show, but organizations should not wait and prepare for all eventualities.&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>cloud</category>
      <category>devops</category>
      <category>kubernetes</category>
      <category>cybersecurity</category>
    </item>
    <item>
      <title>Smart Contract in Ethereum</title>
      <author>Rutik Bhoyar</author>
      <pubDate>Wed, 29 Dec 2021 14:48:09 +0000</pubDate>
      <link>https://dev.to/rutikab12/smart-contract-in-ethereum-4ioh</link>
      <guid>https://dev.to/rutikab12/smart-contract-in-ethereum-4ioh</guid>
      <description>&lt;p&gt;Now-a-days Web3.0 is trending and there are lot of stuffs also in talks like blockchain, NFT, Ethereum, Solidity, etc. etc..&lt;/p&gt;

&lt;p&gt;As many of us would know about the blockchain, let's just see it's definition &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Blockchain is a continuously growing list of records or blocks you can say, which are completely decentralized with distributed databases and immutable ledger meaning continuous blocks linked to each other.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JE5F9wf3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5c3ainb7jvble52ezsug.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JE5F9wf3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5c3ainb7jvble52ezsug.jpg" alt="Blockchain" width="697" height="150"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So now let's move towards our topic &lt;strong&gt;Smart Contract&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;

&lt;p&gt;Let's take an example for this. Suppose there is company which helps various NGO's to collect the funds for their campaigns. Various NGO's files pledged amount to their site and rest of the work is done by that company, which can also be called as "crowd-funding".&lt;/p&gt;

&lt;p&gt;If the amount contributed by various people is equal to or greater than the pledged amount the NGO's will get the amount by deducting the some commission by the platform provider company.&lt;/p&gt;

&lt;p&gt;Else if the money funded is not equal to the pledged amount, the money will be returned to the people.&lt;/p&gt;

&lt;p&gt;Similarly, the smart contract's work. See the formal definition of &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#smart-contract"&gt;
  &lt;/a&gt;
  "Smart Contract"...
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;"smart contract" is simply a program that runs on the Ethereum blockchain. It's a collection of code (its functions) and data (its state) that resides at a specific address on the Ethereum blockchain.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Smart contracts&lt;/strong&gt; are a type of Ethereum account. This means they have a balance and they can send transactions over the network. However they're not controlled by a user, instead they are deployed to the network and run as programmed. User accounts can then interact with a smart contract by submitting transactions that execute a function defined on the smart contract.&lt;/p&gt;

&lt;p&gt;In simple language, it is a certain set of rules written with the help of scripting language like &lt;strong&gt;Solidity in Ethereum&lt;/strong&gt; , which can be considered as &lt;strong&gt;JavaScript&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-the-smart-contract-will-be-present-in-blockchain"&gt;
  &lt;/a&gt;
  Where the smart contract will be present in blockchain?
&lt;/h2&gt;

&lt;p&gt;So when there will be a Peer-to-Peer network of blockchain where all the nodes are interconnected to each other i.e. ledger. Each node will contain a separate blockchain. So where does the smart contract will be present?.&lt;/p&gt;

&lt;p&gt;It will be present alongside with the blockchain of node.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NQCkdVaj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qxx4kustmknot477mo87.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NQCkdVaj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qxx4kustmknot477mo87.jpg" alt="Peer-to-Peer Network" width="508" height="342"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#realworld-smart-contract-in-use"&gt;
  &lt;/a&gt;
  Real-World Smart Contract in use....
&lt;/h2&gt;

&lt;p&gt;So when the Jack Dorsey's first tweet was sold to &lt;strong&gt;Person A&lt;/strong&gt; as &lt;strong&gt;NFT&lt;/strong&gt;(Non-fungible Token) ,all the transaction was noted in smart contract and money was transferred to the original owner.&lt;br&gt;
Now when that &lt;strong&gt;Person A&lt;/strong&gt; will sell that tweet to &lt;strong&gt;Person B&lt;/strong&gt; all the transaction will be noted and maintained by the "Smart Contract" and the royalty amount will be sent to the Jack Dorsey.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XVgtw7Hc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ae33j1u6co680gsj7qnw.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XVgtw7Hc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ae33j1u6co680gsj7qnw.jpg" alt="Smart Contract in Jack Dorsey's tweet" width="820" height="193"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Smart contracts can define rules, like a regular contract, and automatically enforce them via the code. Smart contracts cannot be deleted by default, and interactions with them are irreversible.&lt;/p&gt;

</description>
      <category>web3</category>
      <category>blockchain</category>
      <category>beginners</category>
      <category>opensource</category>
    </item>
    <item>
      <title>How to build UI elements using CSS pseudo elements</title>
      <author>Ashutosh</author>
      <pubDate>Wed, 29 Dec 2021 14:25:47 +0000</pubDate>
      <link>https://dev.to/ashu96/how-to-build-ui-elements-using-css-pseudo-elements-p15</link>
      <guid>https://dev.to/ashu96/how-to-build-ui-elements-using-css-pseudo-elements-p15</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;These days there are a lot of designs that intuitively display information. Instead of plain old one-to-one mapping of fields in a database, we're moving towards a more human-friendly and easy-to-understand UI element. For example, icons, loaders, badges, and progress indicators.&lt;/p&gt;

&lt;p&gt;Being front-end developers, it's our responsibility to bring such UI to life using code(or magic 🪄).&lt;/p&gt;

&lt;p&gt;An example of such a UI element is a simple status indicator that shows how many steps have been completed in a multi-step process. Because of its visual nature, it conveys this information in an instant look.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mwLzpGft--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/96cm644mjgzcepuawaa1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mwLzpGft--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/96cm644mjgzcepuawaa1.png" alt="Image of multi-step status indicator UI" width="736" height="208"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The problem arises when we use a bunch of &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;s and &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;s to build such UI. It gets complicated, unreadable, and hard to maintain very quickly.&lt;br&gt;
In this article, we will see how we can build such UI using CSS pseudo-elements and minimising the need for &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;s (or &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;s).&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#tools-used"&gt;
  &lt;/a&gt;
  Tools Used
&lt;/h2&gt;

&lt;p&gt;I'm using &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt; for making the UI element dynamic so that we can easily change the status of a step from &lt;em&gt;pending&lt;/em&gt; to &lt;em&gt;complete&lt;/em&gt;.&lt;br&gt;
Also using the &lt;a href="https://emotion.sh/"&gt;emotion&lt;/a&gt; library for writing css styles with JavaScript because it's efficient and fun! We can achieve the same result using CSS (SCSS, SASS).&lt;/p&gt;

&lt;p&gt;Here is the &lt;a href="https://codesandbox.io/s/ui-elements-using-css-pseudo-elements-7ygv1?file=/src/Circle.js"&gt;CodeSandbox&lt;/a&gt; link to the final output. Let's get started.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#building-the-ui"&gt;
  &lt;/a&gt;
  Building the UI
&lt;/h2&gt;

&lt;p&gt;We will build this UI component in a few steps. That way, it is easier to follow and recall a step later. So without further ado, let's go!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#first-step"&gt;
  &lt;/a&gt;
  First Step
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@emotion/styled&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;checkmarkImage&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path-to-file/file-name.svg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Circle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
/* We're using CSS variables here. */
  --primaryColor: #00ccb0;
  --secondaryColor: #e1e1e1;
  --scale: 2;
  --size: calc(16px * var(--scale));

  border-radius: 50%;
  position: relative;
  width: var(--size);
  height: var(--size);
  box-sizing: border-box;
  background-color: &lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;active&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;var(--primaryColor)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;var(--secondaryColor)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;;
  margin-right: var(--size);
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Circle&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;First, we import &lt;code&gt;styled&lt;/code&gt; from the &lt;code&gt;emotion&lt;/code&gt; library and an image that we will use in a moment.&lt;/li&gt;
&lt;li&gt;Then, we create a styled component named &lt;code&gt;Circle&lt;/code&gt; and add a few CSS rules that make it a nice circle.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's decode this cryptic looking line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt; &lt;span class="nx"&gt;background&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;active&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;var(--primaryColor)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;var(--secondaryColor)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals"&gt;template literals&lt;/a&gt; syntax to dynamically assign the value of &lt;code&gt;background-color&lt;/code&gt; based on the &lt;code&gt;active&lt;/code&gt; prop which will be passed by the parent component.&lt;/p&gt;

&lt;p&gt;At this point, if we wrap a couple of this components in a box, we will have a few nice circles:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;(...)&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Circle&lt;/span&gt; &lt;span class="nx"&gt;active&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Circle&lt;/span&gt; &lt;span class="nx"&gt;active&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Circle&lt;/span&gt; &lt;span class="nx"&gt;active&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;(...)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JKmLt_2M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7pzc7iju3xgfbp90jbva.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JKmLt_2M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7pzc7iju3xgfbp90jbva.png" alt="Few nice circles" width="604" height="188"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#connect-the-dots-"&gt;
  &lt;/a&gt;
  Connect the Dots :)
&lt;/h3&gt;

&lt;p&gt;Let's go ahead and connect the dots(pun intended) by creating the link between these circles.&lt;/p&gt;

&lt;p&gt;We use the &lt;code&gt;::after&lt;/code&gt; pseudo-element for this as shown below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Circle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
  --primaryColor: #00ccb0;
  --secondaryColor: #e1e1e1;
  --scale: 2;
  --size: calc(16px * var(--scale));

  --linkWidth: calc(10px * var(--scale));
  --linkHeight: calc(2px * var(--scale));

  border-radius: 50%;
  position: relative;
  width: var(--size);
  height: var(--size);
  box-sizing: border-box;
  background-color: &lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;active&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;var(--primaryColor)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;var(--secondaryColor)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;;
  margin-right: var(--size);

  /* Make a pill shaped element that will act as link between two circles. */
  &amp;amp;::after {
    content: "";
    width: var(--linkWidth);
    height: var(--linkHeight);
    border-radius: 100px;

    position: absolute;
    left: calc(var(--size) + ((var(--size) - var(--linkWidth)) / 2));
    top: calc((var(--size) - var(--linkHeight)) / 2);
    background-color: &lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;active&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;var(--primaryColor)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;var(--secondaryColor)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;;
  }
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's understand the code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;First, make a rectangle with rounded borders to give it a pill-like shape using &lt;code&gt;width&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;, and &lt;code&gt;border-radius&lt;/code&gt; properties.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then, align it centrally relative to the circle using &lt;code&gt;top&lt;/code&gt; and &lt;code&gt;left&lt;/code&gt; properties.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: We use &lt;code&gt;calc&lt;/code&gt; function to figure out values for &lt;code&gt;top&lt;/code&gt; and &lt;code&gt;left&lt;/code&gt; properties based on the dimension of the &lt;code&gt;Circle&lt;/code&gt; and &lt;code&gt;Link&lt;/code&gt; so that changing scale won't affect the alignment.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With that change in place our UI look as follow:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pghrtDQN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z64h8u1zstd8leohn2u8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pghrtDQN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z64h8u1zstd8leohn2u8.png" alt="circles with link between them" width="540" height="130"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#remove-extras"&gt;
  &lt;/a&gt;
  Remove Extras
&lt;/h3&gt;

&lt;p&gt;Nice job! But, there is also a line at the end of the last circle that we don't need. So, let's remove it real quick with the following change:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Circle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
  --primaryColor: #00ccb0;
  --secondaryColor: #e1e1e1;
  --scale: 2;
  --size: calc(16px * var(--scale));

  --linkWidth: calc(10px * var(--scale));
  --linkHeight: calc(2px * var(--scale));

  border-radius: 50%;
  position: relative;
  width: var(--size);
  height: var(--size);
  box-sizing: border-box;
  background-color: &lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;active&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;var(--primaryColor)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;var(--secondaryColor)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;;
  margin-right: var(--size);

  /* Make a pill shaped element that will act as link between two circles. */
  &amp;amp;::after {
    content: "";
    position: absolute;
    width: var(--linkWidth);
    height: var(--linkHeight);
    left: calc(var(--size) + ((var(--size) - var(--linkWidth)) / 2));
    top: calc((var(--size) - var(--linkHeight)) / 2);
    background-color: &lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;active&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;var(--primaryColor)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;var(--secondaryColor)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;;
    border-radius: 100px;
  }

  /* We don't want to show the link after the last element. */

  &amp;amp;:last-child {
    &amp;amp;::after {
      display: none;
    }
  }
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, that looks better:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MdbtCjl5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vp8ipflp4qeo85el2yd4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MdbtCjl5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vp8ipflp4qeo85el2yd4.png" alt="circles without extra line" width="480" height="130"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#final-step"&gt;
  &lt;/a&gt;
  Final Step
&lt;/h3&gt;

&lt;p&gt;The last missing piece in this UI is the checkmark icon which renders when the step is active.&lt;br&gt;
We use &lt;code&gt;::before&lt;/code&gt; pseudo-element to create it as shown below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Circle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
  --primaryColor: #00ccb0;
  --secondaryColor: #e1e1e1;
  --scale: 2;
  --size: calc(16px * var(--scale));

  --linkWidth: calc(10px * var(--scale));
  --linkHeight: calc(2px * var(--scale));

  --checkmarkWidth: calc(9px * var(--scale));
  --checkmarkHeight: calc(7px * var(--scale));

  border-radius: 50%;
  position: relative;
  width: var(--size);
  height: var(--size);
  box-sizing: border-box;
  background-color: &lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;active&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;var(--primaryColor)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;var(--secondaryColor)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;;
  margin-right: var(--size);

  /* Center svg (checkmark in this case). */
  &amp;amp;::before {
    content: "";
    display: &lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;active&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;block&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;;
    position: absolute;
    top: calc((var(--size) - var(--checkmarkHeight)) / 2);
    left: calc((var(--size) - var(--checkmarkWidth)) / 2);
    width: var(--checkmarkWidth);
    height: var(--checkmarkHeight);
    background-image: url(&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;checkmarkImage&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;);
  }

  /* Make a pill shaped element that will act as link between two circles. */
  &amp;amp;::after {
    content: "";
    position: absolute;
    width: var(--linkWidth);
    height: var(--linkHeight);
    left: calc(var(--size) + ((var(--size) - var(--linkWidth)) / 2));
    top: calc((var(--size) - var(--linkHeight)) / 2);
    background-color: &lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;active&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;var(--primaryColor)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;var(--secondaryColor)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;;
    border-radius: 100px;
  }

  /* We don't want to show the link after the last element. */

  &amp;amp;:last-child {
    &amp;amp;::after {
      display: none;
    }
  }
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Voila! Nice and clean:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZyG5wUqF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tdwgl0wodl6tr9paf2k9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZyG5wUqF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tdwgl0wodl6tr9paf2k9.png" alt="Final UI element" width="480" height="130"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We can build many UI elements using the this approach. And,&lt;br&gt;
that way, we eliminate the need for extra HTML elements such as &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I hope you find this article interesting and had fun reading it because I for sure had fun writing it. &lt;br&gt;
If you find it helpful, please give it a like and share it with someone who might benefit for it. &lt;/p&gt;

&lt;p&gt;My name is Ashutosh, and apart from working as a Full-stack engineer, I love to share my learnings with the community.&lt;br&gt;
You can connect with me on &lt;a href="https://www.linkedin.com/in/iamashutoshbhardwaj/"&gt;LinkedIn&lt;/a&gt; or follow me on &lt;a href="https://twitter.com/BhardwajAshu96"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>css</category>
      <category>react</category>
      <category>design</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Data Engineering and Secure Coding with a Vulnerability Database</title>
      <author>sagu94271</author>
      <pubDate>Wed, 29 Dec 2021 14:23:59 +0000</pubDate>
      <link>https://dev.to/sagu94271/data-engineering-and-secure-coding-with-a-vulnerability-database-2aa7</link>
      <guid>https://dev.to/sagu94271/data-engineering-and-secure-coding-with-a-vulnerability-database-2aa7</guid>
      <description>&lt;p&gt;We are living in the world of data and AI. Enterprise organizations worldwide are trying to gather as much data as possible to create a data abstraction layer, which business users and data analysts can easily access to extract value and insights from data. Although it seems to be a very straightforward solution to collect data and gather insights from it, enterprise organizations have to build and implement various data governance pillars to ensure data is collected efficiently, and is securely and easily accessible to end users.&lt;/p&gt;

&lt;p&gt;There are various tools available in the market for code security, like the WhiteSource Vulnerability Database, Sonarqube, GitHub, GitLab, etc. Let’s delve into building a data engineering application with end-to-end implementation using Python and the WhiteSource Vulnerability Database.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#secure-data-engineering-with-python"&gt;
  &lt;/a&gt;
  Secure Data Engineering with Python
&lt;/h2&gt;

&lt;p&gt;Most enterprise organizations use Python to build data solutions. Thus, it’s important to scan all Python vulnerabilities using open source and free databases to secure the code with automated checks about any potential vulnerabilities.&lt;/p&gt;

&lt;p&gt;Data engineering teams in enterprise organizations and small-scale companies can perform the following activities to make data available and easily accessible for downstream users to perform business analytics:&lt;/p&gt;

&lt;p&gt;Build automated and generic data pipelines to gather raw data in a data lake or data lake house platform.&lt;br&gt;
Build ETL/ELT pipelines to pre-process, clean, transform, and load data to the destination store.&lt;br&gt;
Machine learning engineers can use this data to build machine learning models.&lt;br&gt;
Business analysts and data analysts can use this data to create interactive visual reports.&lt;/p&gt;

&lt;p&gt;The day-to-day life of a data engineer includes processing data from different data sources in the form of batch processing and streaming. Data engineers focus more on building data pipelines ETL or ELT to create robust, reliable and efficient data processing mechanisms to make the data easily available for the business users to get more insights from the data.&lt;/p&gt;

&lt;p&gt;Most public cloud providers like AWS and Azure work easily with Python bases, serverless computing, and microservices. Business data comes from a variety of sources like relational or non-relational databases, flat files, spreadsheets, and external systems like APIs. With the help of the Pandas dataframe, we can read a variety of files as it supports various column-oriented formats. &lt;/p&gt;

&lt;p&gt;Once your application development is ready with Python/Spark code, you can build or integrate utility in Python to scan your code against the WhiteSource Vulnerability Database to check for potential security issues. The open source database allows us to use web scraping facilities, which we can integrate into our Python code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-the-vulnerability-database"&gt;
  &lt;/a&gt;
  Using the Vulnerability Database
&lt;/h2&gt;

&lt;p&gt;The WhiteSource Vulnerability Database is a free, open source vulnerability database. It is also the largest database. It can be used for securing your application with code scanning.  The database stores information in the following formats. You can find the full list of vulnerabilities available in the database online.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zAfPIjkv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/82py30mct2q3j378j38k.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zAfPIjkv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/82py30mct2q3j378j38k.PNG" alt="Image description" width="561" height="125"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It scans for more than 200 programming languages. Additionally, the WhiteSource database also provides the following additional information to make developers’ lives easier:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;CWE Type&lt;/li&gt;
&lt;li&gt;Recommended fix&lt;/li&gt;
&lt;li&gt;Support from the community&lt;/li&gt;
&lt;li&gt;Exposure level&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let’s look at the trend of open source vulnerabilities per year from 2009 to 2020.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AnvWqCXv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hxtwi59urmqerq6ormj5.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AnvWqCXv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hxtwi59urmqerq6ormj5.PNG" alt="Image description" width="552" height="329"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.whitesourcesoftware.com/vulnerability-database/about-us/"&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Considering the sharp increase in open source vulnerabilities, it is important to incorporate tools to improve code security before deploying the code and using them in higher environments.&lt;/p&gt;

&lt;p&gt;If you want to explore the WhiteSource Vulnerability Database, you can simply go to the website and use the search functionalities. If you want to add a new vulnerability to their database, click on the link to add the new vulnerability. Once you provide information, it will be added to the database. Thus, with a combination of Python code with the database, we can proactively scan any Python source code and detect code vulnerabilities.&lt;/p&gt;

&lt;p&gt;Although this approach works well, it becomes cumbersome to incorporate into day-to-day Agile work. It is better to create an automated mechanism using a CI pipeline to continuously scan the source code against the database. &lt;/p&gt;

&lt;p&gt;We can create a CI pipeline in Azure DevOps that executes every time during the code commit to the Azure DevOps Repos. This way, we can securely scan our Python source code against the WhiteSource Vulnerability Database.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In summary, we have understood the WhiteSource Vulnerability Database and how it stores information about vulnerabilities for more than 200 programming languages. We have also discussed using a WhiteSource Vulnerability Database with Python for data engineering applications and using it to create secure Python applications. In the end, we also explored using Azure DevOps to automate scanning with CI pipelines. &lt;/p&gt;

</description>
      <category>datascience</category>
      <category>whitesource</category>
      <category>vulnerabilities</category>
      <category>python</category>
    </item>
    <item>
      <title>tsParticles 1.38.0 Released</title>
      <author>Matteo Bruni</author>
      <pubDate>Wed, 29 Dec 2021 14:20:54 +0000</pubDate>
      <link>https://dev.to/matteobruni/tsparticles-1380-released-61a</link>
      <guid>https://dev.to/matteobruni/tsparticles-1380-released-61a</guid>
      <description>&lt;h1&gt;
  &lt;a href="#tsparticles-1380-changelog"&gt;
  &lt;/a&gt;
  tsParticles 1.38.0 Changelog
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#breaking-changes"&gt;
  &lt;/a&gt;
  Breaking Changes
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Removed the custom canvas class (&lt;code&gt;tsparticles-canvas-el&lt;/code&gt;), replacing it with a data attribute. This will break some CSS, but I'd prefer breaking it for focusing more on options&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#new-features"&gt;
  &lt;/a&gt;
  New Features
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Added &lt;code&gt;style&lt;/code&gt; options, they are applied directly to the &lt;code&gt;canvas&lt;/code&gt;, it's the same &lt;code&gt;.style&lt;/code&gt; object of the standard JavaScript HTMLElement class (docs &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style"&gt;here&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;





&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/matteobruni"&gt;
        matteobruni
      &lt;/a&gt; / &lt;a href="https://github.com/matteobruni/tsparticles"&gt;
        tsparticles
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      tsParticles - Easily create highly customizable particles animations and use them as animated backgrounds for your website. Ready to use components available for React.js, Vue.js (2.x and 3.x), Angular, Svelte, jQuery, Preact, Inferno, Solid, Riot and Web Components.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="https://particles.js.org" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/58f22f0a546d5d7f34b4668dc842ac91b3a4cf9a5de72346559b7d15b13e587e/68747470733a2f2f7061727469636c65732e6a732e6f72672f696d616765732f62616e6e6572322e706e67" alt="banner"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
tsParticles - TypeScript Particles&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;A lightweight TypeScript library for creating particles. Dependency free (*), browser ready and compatible with
React.js, Vue.js (2.x and 3.x), Angular, Svelte, jQuery, Preact, Inferno, Riot.js, Solid.js, and Web Components&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://openbase.com/js/tsparticles?utm_source=embedded&amp;amp;utm_medium=badge&amp;amp;utm_campaign=rate-badge" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/303db015a31c411aee869f57d55a44a53cd2f5380d0de5ee8abecb337a9452a6/68747470733a2f2f6261646765732e6f70656e626173652e636f6d2f6a732f726174696e672f74737061727469636c65732e737667" alt="Rate on Openbase"&gt;&lt;/a&gt; &lt;a href="https://www.jsdelivr.com/package/npm/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8c64088d02effc095dd7386325d216ce6d6bd46513a88ed2274e0ec4e6d876cf/68747470733a2f2f646174612e6a7364656c6976722e636f6d2f76312f7061636b6167652f6e706d2f74737061727469636c65732f62616467653f7374796c653d726f756e646564" alt="jsDelivr"&gt;&lt;/a&gt; &lt;a href="https://cdnjs.com/libraries/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e9e5a7a72f7cbc65eedd0e4d7431e4d4762c472ad4a66b6648a8e74c2b6be331/68747470733a2f2f696d672e736869656c64732e696f2f63646e6a732f762f74737061727469636c6573" alt="Cdnjs"&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e18baafcedd7efbbd13d6e2b1cf738c07ea898383c946e6e7b16400f813d70cb/68747470733a2f2f62616467652e667572792e696f2f6a732f74737061727469636c65732e737667" alt="npmjs"&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/bc16ec38506bbab6f6b729850ad28fd94a5643f1633b4356647033c3aa3fe102/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f74737061727469636c6573" alt="npm"&gt;&lt;/a&gt; &lt;a href="https://lerna.js.org/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3bc63f921dd60bac6d91aa900ef570c928b2aa4c2124ed23647e8fe9d2232853/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6d61696e7461696e6564253230776974682d6c65726e612d6363303066662e737667" alt="lerna"&gt;&lt;/a&gt; &lt;a href="https://www.codefactor.io/repository/github/matteobruni/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ce969771f1502f57861fe8ce7c787c209c50ef17c2e19f35cb1de0c960eba94a/68747470733a2f2f7777772e636f6465666163746f722e696f2f7265706f7369746f72792f6769746875622f6d617474656f6272756e692f74737061727469636c65732f6261646765" alt="CodeFactor"&gt;&lt;/a&gt; &lt;a href="https://www.codacy.com/manual/ar3s/tsparticles?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=matteobruni/tsparticles&amp;amp;utm_campaign=Badge_Grade" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8f96d4d0dccc9c7491f3ed07af70a808b0fd4d2e4d863a1f7bb9e51e10ae526e/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f6239383361616633343631613463343862316532656563636531666631643734" alt="Codacy Badge"&gt;&lt;/a&gt; &lt;a href="https://gitpod.io/#https://github.com/matteobruni/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/daadb4894128d1e19b72d80236f5959f1f2b47f9fe081373f3246131f0189f6c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f476974706f642d72656164792d2d746f2d2d636f64652d626c75653f6c6f676f3d676974706f64" alt="Gitpod Ready-to-Code"&gt;&lt;/a&gt; &lt;a href="https://repl.it/github/matteobruni/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/64adf1bd83058aa64f848245f74bef77cd7cc2a3f36343ac44d6d0c39cc41bc3/68747470733a2f2f7265706c2e69742f62616467652f6769746875622f6d617474656f6272756e692f74737061727469636c6573" alt="Run on Repl.it"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://join.slack.com/t/tsparticles/shared_invite/enQtOTcxNTQxNjQ4NzkxLWE2MTZhZWExMWRmOWI5MTMxNjczOGE1Yjk0MjViYjdkYTUzODM3OTc5MGQ5MjFlODc4MzE0N2Q1OWQxZDc1YzI" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ee2eed4d8159b570eef394a484f574d3bd038f6c64ad92ca0db286045486edcb/68747470733a2f2f7061727469636c65732e6a732e6f72672f696d616765732f736c61636b2e706e67" alt="Slack"&gt;&lt;/a&gt; &lt;a href="https://discord.gg/hACwv45Hme" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7c4f4ed816c2b77d7c2e15df3876cafa1cf89a896afb04633a1b6e28a81c5036/68747470733a2f2f7061727469636c65732e6a732e6f72672f696d616765732f646973636f72642e706e67" alt="Discord"&gt;&lt;/a&gt; &lt;a href="https://t.me/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/309cad18f9a2090efdb147ac71064a969b826c3f4e9387f0a8d8e36e70133a80/68747470733a2f2f7061727469636c65732e6a732e6f72672f696d616765732f74656c656772616d2e706e67" alt="Telegram"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.producthunt.com/posts/tsparticles?utm_source=badge-featured&amp;amp;utm_medium=badge&amp;amp;utm_souce=badge-tsparticles%22" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e86b7f51a0224618fe45aad99bff3e02ed8a5838691f244bf1df0e94454dafe2/68747470733a2f2f6170692e70726f6475637468756e742e636f6d2f776964676574732f656d6265642d696d6167652f76312f66656174757265642e7376673f706f73745f69643d313836313133267468656d653d6c69676874" alt="tsParticles Product Hunt"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/matteobruni/tsparticles#Do-you-want-to-use-it-on-your-website"&gt;Use for your website&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Library-installation"&gt;Library installation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/matteobruni/tsparticles#Official-components-for-some-of-the-most-used-frameworks"&gt;Official components for some of the most used frameworks&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Angular"&gt;Angular&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Inferno"&gt;Inferno&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#jQuery"&gt;jQuery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Preact"&gt;Preact&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#ReactJS"&gt;ReactJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#RiotJS"&gt;RiotJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#SolidJS"&gt;SolidJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Svelte"&gt;Svelte&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#VueJS-2x"&gt;VueJS 2.x&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#VueJS-3x"&gt;VueJS 3.x&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Web-Components"&gt;Web Components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#WordPress"&gt;WordPress&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Templates-and-Resources"&gt;Templates and Resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/matteobruni/tsparticles#Demo--Generator"&gt;Demo / Generator&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Characters-as-particles"&gt;Characters as particles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Mouse-hover-connections"&gt;Mouse hover connections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Polygon-mask"&gt;Polygon mask&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Animated-stars"&gt;Animated stars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Nyan-cat-flying-on-scrolling-stars"&gt;Nyan cat flying on scrolling stars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Background-Mask-particles"&gt;Background Mask particles&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Migrating-from-Particlesjs"&gt;Migrating from Particles.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#PluginsCustomizations"&gt;Plugins/Customizations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
Do you want to use it on your website?&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Documentation and Development references &lt;a href="https://particles.js.org/docs/" rel="nofollow"&gt;here&lt;/a&gt; 📖&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This library is available on the two most popular CDNs and it's easy and ready to use, if you were using particles.js
it's even easier&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You'll find the
instructions &lt;a href="https://github.com/matteobruni/tsparticles/blob/main/README.md#library-installation"&gt;below&lt;/a&gt;, with all the
links you need, and…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/matteobruni/tsparticles"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


</description>
      <category>showdev</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>html</category>
    </item>
    <item>
      <title>3 Reasons Ruby on Rails Is the Best Way to Start Learning Web Development in 2022</title>
      <author>Cezar Halmagean</author>
      <pubDate>Wed, 29 Dec 2021 13:58:23 +0000</pubDate>
      <link>https://dev.to/chalmagean/3-reasons-ruby-on-rails-is-the-best-way-to-start-learning-web-development-in-2022-31mh</link>
      <guid>https://dev.to/chalmagean/3-reasons-ruby-on-rails-is-the-best-way-to-start-learning-web-development-in-2022-31mh</guid>
      <description>&lt;p&gt;With so many new languages popping up everywhere, it's hard to decide which one to pick up or if Ruby on Rails is still a good choice in 2022.&lt;/p&gt;

&lt;p&gt;So if you're just starting out with learning how to code, or web development, or if you're leaning towards Ruby on Rails but you're not sure if it's a good choice, I hope this quick video will give you some answers.&lt;/p&gt;

&lt;p&gt;My name is Cezar and I've been using Ruby since 2008 to build all sorts of web applications, from simple apps to full-blown multi-million dollar ones.&lt;/p&gt;

&lt;p&gt;And today, I'm going to share with you 3 reasons why I think Ruby on Rails is still your best bet in 2022.&lt;/p&gt;

&lt;p&gt;Here's the Youtube version if you want to watch it instead.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/GUP129t2Sl4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reason-1-ruby-is-easy-to-learn"&gt;
  &lt;/a&gt;
  Reason #1: Ruby Is Easy to Learn
&lt;/h2&gt;

&lt;p&gt;When you're getting started, there are so many unfamiliar concepts thrown at you that your biggest problem will be remembering them all. Not to mention understanding what each one means. So learning a language that has fewer of those is preferred.&lt;/p&gt;

&lt;p&gt;But that doesn't mean Ruby is less powerful. It's just that it was designed with the developer's experience in mind.&lt;/p&gt;

&lt;p&gt;You have to realize that the big factors at play here are confidence and consistency. If you can stick around and keep learning long enough, you're guaranteed to win.&lt;/p&gt;

&lt;p&gt;So what Ruby gives you, and in my opinion it does it better than other languages, is small wins very quickly, fewer unfamiliar concepts, and syntax that looks a lot like english.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reason-2-helps-you-learn-best-practices"&gt;
  &lt;/a&gt;
  Reason #2: Helps You Learn Best Practices
&lt;/h2&gt;

&lt;p&gt;The second reason to learn Ruby on Rails is it holds your hand as you go through the process of figuring out how web development works.&lt;/p&gt;

&lt;p&gt;Namely it's a collection of best practices, and a lot industry conventions that are baked in for you to use from day one.&lt;/p&gt;

&lt;p&gt;With web development you can do the same thing in so many different ways, but Rails forces you to one tried and tested way that works best as a starting point. &lt;/p&gt;

&lt;p&gt;That means you'll be able to build perfectly good web applications even if you don't understand how everything fits together. You can figure that out later.&lt;/p&gt;

&lt;p&gt;That's how I learned Ruby. I started building web applications with Rails by copying what others have done, and then I slowly figured out how things work behind the scenes.&lt;/p&gt;

&lt;p&gt;Now this might not be the best way to learn programming, but it worked for me.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reason-3-plenty-of-jobs"&gt;
  &lt;/a&gt;
  Reason #3: Plenty of Jobs
&lt;/h2&gt;

&lt;p&gt;This one is probably important to you if you're watching this video.&lt;/p&gt;

&lt;p&gt;But rest assured that you'll find a lot of jobs for both Ruby and Rails. And once you get good at building web applications, most of those skills are transferable to other similar languages, like Python, or Javascript.&lt;/p&gt;

&lt;p&gt;So I wouldn't worry too much about this aspect because what's really important here is for you to get productive as quickly as possible. And both Ruby &amp;amp; Rails will help you do just that.&lt;/p&gt;

&lt;p&gt;I hope this helped.&lt;/p&gt;

</description>
      <category>rails</category>
      <category>webdev</category>
    </item>
    <item>
      <title>10 Best Domain Authority Checker Tools</title>
      <author>cloudytech147</author>
      <pubDate>Wed, 29 Dec 2021 13:43:31 +0000</pubDate>
      <link>https://dev.to/cloudytech147/10-best-domain-authority-checker-tools-15a</link>
      <guid>https://dev.to/cloudytech147/10-best-domain-authority-checker-tools-15a</guid>
      <description>&lt;p&gt;Innovation has ruled the world. In this innovation driven period, computerized systems are utilized as powerful showcasing procedures like sites, sites, promotions, and some more. However, a site goes about as the fuel to drive your business alongside different methodologies. &lt;/p&gt;

&lt;p&gt;Additionally, it is likewise vital for screen the sites cautiously. Web optimization apparatuses, Domain Authority Rankings, Backlinks tracker, and a lot more instruments administer the validity of our site. Domain Authority is perhaps the most fundamental tool to screen sites.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YgklZz50--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1c9e5vqm8p8jivhmi0bz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YgklZz50--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1c9e5vqm8p8jivhmi0bz.png" alt="Best Domain Authority Checker" width="696" height="348"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-domain-authority"&gt;
  &lt;/a&gt;
  What is Domain Authority?
&lt;/h2&gt;

&lt;p&gt;Domain Authority or DA is a search engine ranking prediction formulated by Moz. It predicts the ability of a website to rank on the Search Engine Result Pages (SERP). The DA may vary from 1 to 100. The higher the score, the greater is its ranking ability.&lt;/p&gt;

&lt;p&gt;Domain Authority (DA) is formulated while considering several factors, such as backlinks and a total number of links. The score is often used to correlate websites or to compare the website SERP rankings over a certain period.&lt;/p&gt;

&lt;p&gt;Top 10 &lt;a href="https://webhostingprime.com/best-domain-authority-checker/"&gt;Domain Authority Checkers&lt;/a&gt; tools:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Link Explorer&lt;/li&gt;
&lt;li&gt;SiteChecker&lt;/li&gt;
&lt;li&gt;Website SEO Checker&lt;/li&gt;
&lt;li&gt;SEO Review Tools&lt;/li&gt;
&lt;li&gt;SEMScoop&lt;/li&gt;
&lt;li&gt;SmallSEO Tools&lt;/li&gt;
&lt;li&gt;SER DA Checker&lt;/li&gt;
&lt;li&gt;DA Checker-Bulk DA&lt;/li&gt;
&lt;li&gt;DA Checker by Sure Oak SEO&lt;/li&gt;
&lt;li&gt;Free DA Checker&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#tips-to-increase-your-website-domain-authority"&gt;
  &lt;/a&gt;
  Tips to Increase Your Website Domain Authority
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Fundamentals are correct&lt;/li&gt;
&lt;li&gt;Appropriate use of tools&lt;/li&gt;
&lt;li&gt;Choose a topic of public interest&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;To construe the substance, Domain Authority (DA) assumes a significant part in site evaluation. In any case, Domain Authority (DA) ought not be mistaken for Domain Ranking.&lt;/p&gt;

&lt;p&gt;DA and Domain Authority are two unique things. DA is an overall list and DA measurements look at your site.&lt;/p&gt;

&lt;p&gt;Still never be tortured by your DA rankings, the essential focal point of your site ought to be quality substance.&lt;/p&gt;

</description>
      <category>domain</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Everything you need to know about Git </title>
      <author>AjeethKumar_Ramesh</author>
      <pubDate>Wed, 29 Dec 2021 13:34:25 +0000</pubDate>
      <link>https://dev.to/iamajeeth/everything-you-need-to-know-about-git-1fbf</link>
      <guid>https://dev.to/iamajeeth/everything-you-need-to-know-about-git-1fbf</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Move fast and break things. Unless you are breaking stuff, you are not moving fast enough. - &lt;em&gt;Mark Zuckerberg&lt;/em&gt;  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hope you all doing well, by the end of this post you will have complete knowledge to start with git and also familiar on it,&lt;/p&gt;

&lt;p&gt;⚡ &lt;strong&gt;Git&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;It is a version control tool in short this maintains your code history&lt;/em&gt;, you can take a real time scenario , Browser is a tool which stores your Browsing history&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Git Bash&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;we are going to use Git Bash which is a terminal, while installing git enable linux commands to get the full features. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;keep reading and you will know everything you need to know...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Folder creation&lt;/strong&gt;&lt;br&gt;
Create a Newfolder give it a name as you like and open in Git Bash or you can go with Command propmt,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Tr50tTpu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p5jgb2db9sxe7ar9661r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Tr50tTpu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p5jgb2db9sxe7ar9661r.png" alt="Image description" width="344" height="129"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;your bash will look something like this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d0MHELRR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/30oha658dt9aoxxu9jwa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d0MHELRR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/30oha658dt9aoxxu9jwa.png" alt="Image description" width="491" height="68"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are in command prompt make sure your are working in right directory.&lt;br&gt;
&lt;strong&gt;Initialize git repository&lt;/strong&gt;&lt;br&gt;
Initialize git in this folder &lt;code&gt;git init&lt;/code&gt;, it will create a empty repository in your local device&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PvoVHgdL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sczojc4l7hh73mychigh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PvoVHgdL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sczojc4l7hh73mychigh.png" alt="Image description" width="706" height="86"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;File creation&lt;/strong&gt;&lt;br&gt;
Create a new file and open it with vscode ,it is my opinion you can also do it with atom, sublime, it's completely up to you,  you will see master, It is a branch no need to worry about this now, I will explain in a while,&lt;br&gt;
To create a file in command prompt use &lt;code&gt;echo &amp;gt;fileName&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EakRJGId--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mtdb7n59o68qr9m79m85.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EakRJGId--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mtdb7n59o68qr9m79m85.png" alt="Image description" width="571" height="126"&gt;&lt;/a&gt;&lt;br&gt;
It will look similar to this,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sjEPqPDR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/84e3kn0ddtt12k8jr7r2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sjEPqPDR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/84e3kn0ddtt12k8jr7r2.png" alt="Image description" width="551" height="82"&gt;&lt;/a&gt;&lt;br&gt;
Make some changes in the file and don't forget to save it&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fit6Lznx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qzms3626gavmwkklo52.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fit6Lznx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qzms3626gavmwkklo52.png" alt="Image description" width="508" height="115"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Clean terminal&lt;/strong&gt;&lt;br&gt;
sometimes we are the situation to make our bash looks clean, type &lt;code&gt;clear&lt;/code&gt; and hit enter. For command prompt use &lt;code&gt;cls&lt;/code&gt; and give enter&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8VLj7tb2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qnvq9rn3c46h5enhttpf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8VLj7tb2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qnvq9rn3c46h5enhttpf.png" alt="Image description" width="602" height="58"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Check status of commit&lt;/strong&gt;&lt;br&gt;
To check the status of our commits ,the info of file use &lt;code&gt;git status&lt;/code&gt; it will show you the file which is tracked or untracked, &lt;br&gt;
tracked denotes our file is staged and untracked denotes the file is not yet staged, Obviously we didn't commit anything so no commits will appear.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NPo1uy4d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mhimncz88deyrk0sw0hu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NPo1uy4d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mhimncz88deyrk0sw0hu.png" alt="Image description" width="700" height="266"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Eye and vision&lt;/strong&gt;&lt;br&gt;
Now the real part begins, to make our changes as a history there are two steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;staging the change&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;commit the change&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Stage&lt;/strong&gt;&lt;br&gt;
To bring our changes to the staging area use &lt;code&gt;git add .&lt;/code&gt;, you can replace period simple &lt;strong&gt;.&lt;/strong&gt; with your file name to be staged, generally the period simple includes all the changes in to staging area&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2dbvB_3m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2mm1ayqk9m1a2mx5524b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2dbvB_3m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2mm1ayqk9m1a2mx5524b.png" alt="Image description" width="631" height="60"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Commit&lt;/strong&gt;&lt;br&gt;
To commit the changes of the staged file use &lt;code&gt;git commit -m "your commit message"&lt;/code&gt; and it will show the number of changes and type of changes that are insertion or deletion to the file&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0Bt7mjCt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/20i54r8qth5sumait1vn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0Bt7mjCt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/20i54r8qth5sumait1vn.png" alt="Image description" width="597" height="119"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;This is similar to photo taking scenario in marriage reception, the people who want to take photo should come to stage , after taking photo it will save in the marriage album, &lt;strong&gt;changes we need to save as history should be staged first and then commit .&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Again we check our status it show you working tree clean , &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sfBPJx9---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l8kaj2jvrwxb3yyaabgm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sfBPJx9---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l8kaj2jvrwxb3yyaabgm.png" alt="Image description" width="601" height="92"&gt;&lt;/a&gt;&lt;br&gt;
Create another file and make changes check the status &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AvhhXxFy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmha8gn1nwtdpvvpfl73.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AvhhXxFy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmha8gn1nwtdpvvpfl73.png" alt="Image description" width="700" height="202"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;stage the changes &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Zg3XB2vr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8wwdfg7fjxlrptnltw93.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zg3XB2vr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8wwdfg7fjxlrptnltw93.png" alt="Image description" width="619" height="70"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Dump area&lt;/strong&gt;&lt;br&gt;
Type &lt;code&gt;git stash&lt;/code&gt;, check the status of your commits again , it shows &lt;em&gt;nothing to commit working tree clean&lt;/em&gt;, &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dNwwysIT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3tyv5ohp67hpr4mmjs7f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dNwwysIT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3tyv5ohp67hpr4mmjs7f.png" alt="Image description" width="702" height="211"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Take a realtime scenario, if you are working on some kind of logical code in project and you commit the changes that might have issues, so you decide not to lose the changes but also keep it for future purpose. &lt;br&gt;
We use &lt;code&gt;git stash&lt;/code&gt;, stash is a hidden place where we can store our commits until it really needs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Incase now you need the commits from stash area now, we need to bring it in staging area again using &lt;code&gt;git stash pop&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_zl6ZDnU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m0fgdlo8quu2s0iicak7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_zl6ZDnU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m0fgdlo8quu2s0iicak7.png" alt="Image description" width="688" height="178"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Now we can commit those changes and check status of our commits if you want, &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wjBkMq8p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/86rz1bxypykaidqgh8n4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wjBkMq8p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/86rz1bxypykaidqgh8n4.png" alt="Image description" width="604" height="122"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To see all the commits which are recorded as history use &lt;code&gt;git log&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yaen0sqB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u3j949e9lupp3by7wxmk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yaen0sqB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u3j949e9lupp3by7wxmk.png" alt="Image description" width="682" height="279"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;so far you are doing great !!!&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Host on Github&lt;/strong&gt;&lt;br&gt;
To add our local folder or a local repository to Github, there are two steps&lt;/p&gt;

&lt;p&gt;1.Create a Repository&lt;br&gt;
2.Add local repo to github &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Github&lt;/strong&gt;&lt;br&gt;
To create a new repository on github, repository(repo) is simply a storage area of all our file along with the commits respectively.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create Repository&lt;/strong&gt;&lt;br&gt;
For creating a repo you should have an account in github, so signUp and then follow along with me, if you already have an account login to your account , go to repository click new.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eKI7veFW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/la0eonei3hlxl6sr6j6v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eKI7veFW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/la0eonei3hlxl6sr6j6v.png" alt="Image description" width="880" height="117"&gt;&lt;/a&gt;&lt;br&gt;
Give a name for your repo and click Create repository&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7Q7OHVb9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s7ym699kg17dbhxqhv9m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Q7OHVb9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s7ym699kg17dbhxqhv9m.png" alt="Image description" width="630" height="509"&gt;&lt;/a&gt;&lt;br&gt;
and now your screen will appear like this, github show you the steps here we need last two steps , because already we did up to commit, &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YdsQEhhn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iqvr3wvj8gr2tb4uj1mo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YdsQEhhn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iqvr3wvj8gr2tb4uj1mo.png" alt="Image description" width="880" height="286"&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Add local repo to github&lt;/strong&gt;&lt;br&gt;
Need to copy HTTPS or SSH link and work on it, word remote denotes you are working with URL, origin is basically  your github account.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rS08-LYp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c3ih0e2dkurqs12lmvyo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rS08-LYp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c3ih0e2dkurqs12lmvyo.png" alt="Image description" width="698" height="77"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To push the changes that we made in our local repo to github main repo&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--swGsmXbU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/opsiqrzw2irf5o6p0knl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--swGsmXbU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/opsiqrzw2irf5o6p0knl.png" alt="Image description" width="698" height="242"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now go to github tab and refresh the browser and the magic happens, you are able to see the changes that we made in our local repo in main repo&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Iz9nxi4q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dlxvnufv0a3mcwjtmqby.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Iz9nxi4q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dlxvnufv0a3mcwjtmqby.png" alt="Image description" width="880" height="172"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Restore commits&lt;/strong&gt;&lt;br&gt;
Change something in file1 or file2 and stage the change , now if we want to restore changes we made stage it and check status&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3AzxIKne--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6rv8tposncrkl86fgiwp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3AzxIKne--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6rv8tposncrkl86fgiwp.png" alt="Image description" width="609" height="234"&gt;&lt;/a&gt;&lt;br&gt;
and now use &lt;code&gt;git restore --staged fileName&lt;/code&gt; , leave &lt;code&gt;--staged&lt;/code&gt; flag to restore local changes too and check status&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aW8YQEiq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y39madjupc0ukhoysjrb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aW8YQEiq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y39madjupc0ukhoysjrb.png" alt="Image description" width="704" height="302"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Remove file&lt;/strong&gt;&lt;br&gt;
To remove the file from working tree use &lt;code&gt;git rm --cached fileName&lt;/code&gt;and check status&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CAmaDPha--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xonyx5j1am5lh8wcfcef.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CAmaDPha--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xonyx5j1am5lh8wcfcef.png" alt="Image description" width="682" height="344"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Tip&lt;/strong&gt;&lt;br&gt;
Stage the file, commit it and check status, it shows your branch is ahead of origin/master by 1 commit and inform us to push local commits, whenever these kind of situation happens do as your command line said. I know that's a lot, move forward you need few more concepts to complete.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LI_0ZdiM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ay14gd9a7lsde4jnjun4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LI_0ZdiM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ay14gd9a7lsde4jnjun4.png" alt="Image description" width="606" height="160"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As the status shows we need to push the changes and check status  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FTQvsyq9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9igoia3ajy8vbuvo0k3s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FTQvsyq9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9igoia3ajy8vbuvo0k3s.png" alt="Image description" width="563" height="360"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Hosting on github&lt;/strong&gt;&lt;br&gt;
Go to your browser and refresh, you will be amazed, give an applause to yourself. Note the commit &lt;strong&gt;&lt;em&gt;back to normal&lt;/em&gt;&lt;/strong&gt; that is pushed from our local branch.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zD1DCmYc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g07s26xjoi2phl1xdv1c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zD1DCmYc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g07s26xjoi2phl1xdv1c.png" alt="Image description" width="880" height="184"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create another file make some changes, stage that and commit&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3sUAS2dz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m0vbini09uyo906zjgr8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3sUAS2dz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m0vbini09uyo906zjgr8.png" alt="Image description" width="635" height="238"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Commit records&lt;/strong&gt;&lt;br&gt;
See all the commit messages using &lt;code&gt;git log&lt;/code&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o7sJhP7d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rd7zd4ghvnkzjd0ep343.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o7sJhP7d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rd7zd4ghvnkzjd0ep343.png" alt="Image description" width="661" height="516"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Structure of Commit messages&lt;/strong&gt;:&lt;br&gt;
Commit messages are align on &lt;em&gt;top of one another&lt;/em&gt;, To delete commit messages you need to pick the commitID and paste in &lt;code&gt;git reset commitID&lt;/code&gt;, this will delete all the commits above the one which you pick.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Commit messages are like a bread slices&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xKn4a89r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zguix8tijdwz7xn87c4z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xKn4a89r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zguix8tijdwz7xn87c4z.png" alt="Image description" width="668" height="445"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I want this to be clean and understandable , for that delete file3.txt in my case , you may leave it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TSGJNXXR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hnyrpjmb5gw5ltmbo3wy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TSGJNXXR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hnyrpjmb5gw5ltmbo3wy.png" alt="Image description" width="583" height="367"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To push our changes to github main repo &lt;code&gt;git push origin master&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C7WwV4QY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yhtolcx1q487e08j76ju.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C7WwV4QY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yhtolcx1q487e08j76ju.png" alt="Image description" width="634" height="230"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pointer&lt;/strong&gt;&lt;br&gt;
It's time to know &lt;em&gt;HEAD&lt;/em&gt;, this is simply a pointer which points to the active branch , you will understand more in a bit.&lt;br&gt;
&lt;strong&gt;Branch&lt;/strong&gt;&lt;br&gt;
Now we are going to work on branches, to create a branch use &lt;code&gt;git branch branchName&lt;/code&gt; and checkout this branch by &lt;code&gt;git checkout branchName&lt;/code&gt;, after checking out the HEAD is now point to the new branchName, here after the commits we will made is from branchName&lt;/p&gt;

&lt;p&gt;Create new branch , checkout then create a file and change something ,stage it and commit &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IwQWKZE0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7tlvyxsnetaqkst153y1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IwQWKZE0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7tlvyxsnetaqkst153y1.png" alt="Image description" width="626" height="375"&gt;&lt;/a&gt;&lt;br&gt;
Make some more commits may be two is good to go and &lt;code&gt;git log&lt;/code&gt; now&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tjpI1VxT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8lckpdue17g4ibmsuvh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tjpI1VxT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8lckpdue17g4ibmsuvh.png" alt="Image description" width="681" height="647"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;we need to push our change in local branch to github&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5vPntv8_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ot5epsup1379z6mv6jfr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5vPntv8_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ot5epsup1379z6mv6jfr.png" alt="Image description" width="670" height="360"&gt;&lt;/a&gt; &lt;br&gt;
&lt;strong&gt;Newbie&lt;/strong&gt;-our branch will be on github&lt;br&gt;
Now your github screen automatically shows you &lt;em&gt;Compare &amp;amp; pull request&lt;/em&gt; , click on that&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PkogZ-Lg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1rod8nhxxx67t0zjnzel.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PkogZ-Lg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1rod8nhxxx67t0zjnzel.png" alt="Image description" width="880" height="267"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now click on &lt;em&gt;create pull request&lt;/em&gt; it will show you&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jDJEH_Pv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yf66ijib4stkpx5nj8ah.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jDJEH_Pv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yf66ijib4stkpx5nj8ah.png" alt="Image description" width="880" height="444"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Merge conflict&lt;/strong&gt;&lt;br&gt;
Here if there is no conflict on your change can simply click on &lt;em&gt;Merge pull request&lt;/em&gt;, conflict is popularly known as &lt;em&gt;merge conflict&lt;/em&gt; , assume that two persons working on same change and commit it, github doesn't know which change to take in this case we manually make the change on github and then we are allowed &lt;br&gt;
merge pull request &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6TqH3Ic5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2wy4pk8sjb43haxpndpc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6TqH3Ic5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2wy4pk8sjb43haxpndpc.png" alt="Image description" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I know we are doing tons of things but it's worth&lt;/em&gt; . &lt;br&gt;
Now click confirm merge, there you can delete the branch if it is no longer needed &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Oi4-zNbb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t6o1d31fmhi3mxcvd9l3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Oi4-zNbb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t6o1d31fmhi3mxcvd9l3.png" alt="Image description" width="880" height="197"&gt;&lt;/a&gt;&lt;br&gt;
Go to your code now and refresh the page you can see there will second branch and the file along with it's commit &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nOIqlN9E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ojaya19syy4onmmn7pm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nOIqlN9E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ojaya19syy4onmmn7pm.png" alt="Image description" width="880" height="223"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Hope you feel confidence on yourself&lt;/em&gt; .&lt;br&gt;
&lt;strong&gt;Rebase&lt;/strong&gt;- new base&lt;br&gt;
There is a little more to do , for that need some changes in master branch may be three commits are good to go , now &lt;code&gt;git log&lt;/code&gt;, In sometimes we need to reduce number of commits as one commit, assume that you are working in login form of your project you will commit each changes and push it, those commits are points to single work so we squash all three to one commit, here we use &lt;code&gt;git rebase&lt;/code&gt;, before that we need to  pick the commit id , this has same hierarchy as &lt;code&gt;git reset&lt;/code&gt; &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jEozD9Bm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/opnxjao84ngvpl9e8ix6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jEozD9Bm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/opnxjao84ngvpl9e8ix6.png" alt="Image description" width="678" height="361"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;use this command &lt;code&gt;git rebase -i CommitID&lt;/code&gt;, &lt;em&gt;i&lt;/em&gt; is interactive most of the time we need -i flag, give enter this will show you like this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RtUJwDwZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kegqv25fdrfrwy19cnpp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RtUJwDwZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kegqv25fdrfrwy19cnpp.png" alt="Image description" width="688" height="288"&gt;&lt;/a&gt; &lt;br&gt;
&lt;strong&gt;Squash&lt;/strong&gt;&lt;br&gt;
you can see that &lt;em&gt;Pick&lt;/em&gt; and &lt;em&gt;s&lt;/em&gt; ,we don't need to change the first pick it remains same, now if we want to squash the commit we change it to &lt;em&gt;s&lt;/em&gt;, at least the commits should have one pick ,the &lt;em&gt;s&lt;/em&gt; commits combine with the nearest &lt;em&gt;pick&lt;/em&gt; commit , it doesn't matter how many commits to be squashed , you should have one &lt;em&gt;pick&lt;/em&gt; which will be above &lt;em&gt;s&lt;/em&gt; commit . To know more you can refer &lt;a href="https://www.atlassian.com/git/tutorials/rewriting-history/git-rebase"&gt;&lt;/a&gt;, to type in this click &lt;em&gt;i&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oFXyNqdS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e4llsj1326fa2v5hc45t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oFXyNqdS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e4llsj1326fa2v5hc45t.png" alt="Image description" width="688" height="288"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6De8_rio--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p10j3gwailyzkj1veqid.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6De8_rio--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p10j3gwailyzkj1veqid.png" alt="Image description" width="609" height="103"&gt;&lt;/a&gt;&lt;br&gt;
By default Vim is the text editor for git, this below lines will help the non vim users, &lt;br&gt;
to escape from vim editor click &lt;code&gt;ESC&lt;/code&gt;, colon &lt;code&gt;:&lt;/code&gt; and &lt;code&gt;x&lt;/code&gt; after that you have screen like this &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KEsnH77G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t6uvo205g0ivum8q2w72.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KEsnH77G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t6uvo205g0ivum8q2w72.png" alt="Image description" width="693" height="371"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;remove the &lt;em&gt;#&lt;/em&gt; which is used to comment the line then type you commit message, after that click &lt;em&gt;ESC&lt;/em&gt; , &lt;em&gt;:&lt;/em&gt; and &lt;em&gt;x&lt;/em&gt; to exit edit mode&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NRUi47sl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h5ltmx1tyo6sfn5t46oi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NRUi47sl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h5ltmx1tyo6sfn5t46oi.png" alt="Image description" width="591" height="372"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;we &lt;em&gt;finished rebasing&lt;/em&gt; now time to push it to github&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EQ_snz11--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mpkkrpsv89dq6ko0ii9a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EQ_snz11--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mpkkrpsv89dq6ko0ii9a.png" alt="Image description" width="586" height="167"&gt;&lt;/a&gt;&lt;br&gt;
here is the Squashed commit&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--my0iSYag--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x3euda70li8m1wzq9an2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--my0iSYag--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x3euda70li8m1wzq9an2.png" alt="Image description" width="618" height="261"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Go to github now you can see the change in commit message&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D3cFZhFe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s40qxl3mqyt0d642d593.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D3cFZhFe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s40qxl3mqyt0d642d593.png" alt="Image description" width="880" height="304"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;git push&lt;/code&gt; -push the changes along with commit messages.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git fetch&lt;/code&gt; -fetch the recent commit messages. &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git pull&lt;/code&gt; -pull the code with commit messages, it internally operate &lt;em&gt;git fetch&lt;/em&gt; .&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To know more you can refer &lt;a href="https://www.atlassian.com/git"&gt;git atlassian&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Learning never fulfilled untill you practice on your own and share it with other people&lt;/em&gt; . &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Alright now you can add &lt;strong&gt;git&lt;/strong&gt; skill in profile and be happy for what you have done by reading this post. &lt;/p&gt;

</description>
      <category>git</category>
      <category>github</category>
      <category>beginners</category>
    </item>
    <item>
      <title>DRY Out with Loops</title>
      <author>Vicki (she/they)</author>
      <pubDate>Wed, 29 Dec 2021 13:32:52 +0000</pubDate>
      <link>https://dev.to/vickilanger/dry-out-with-loops-d6l</link>
      <guid>https://dev.to/vickilanger/dry-out-with-loops-d6l</guid>
      <description>&lt;p&gt;&lt;em&gt;If learning to code with &lt;code&gt;foo&lt;/code&gt;, &lt;code&gt;bar&lt;/code&gt;, and math examples are your kryptonite, keep reading. This series uses relatable examples.&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Jump To:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#for"&gt;For Loops&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#irl-for"&gt;Real-life For Loops&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#while"&gt;While Loops&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#irl-while"&gt;Real-life While Loops&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#practice"&gt;Practice Challenges&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A loop is a set of instructions that gets continually repeated a certain amount of times or until a condition is met. A condition could be waiting for something to be true or false. A condition could also refer to waiting on the loop to run enough times. Let’s go through a pseudocode example of doing introductions in a new group of people. After that, we’ll talk about different types of loops.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# repeat these steps for every person in the group
# say hi
# give your name and pronouns
# say what you like to do when you’re bored
# mention something you could talk about for hours
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#for-loops"&gt;
  &lt;/a&gt;
  For Loops
&lt;/h2&gt;

&lt;p&gt;Sometimes we do know exactly how many times we want to repeat our steps or run a loop. When this is the case, we should use a &lt;code&gt;for&lt;/code&gt; loop. This doesn’t mean &lt;em&gt;you&lt;/em&gt; need to know the exact number of times to repeat the code. I know that sounds contradictory, but I promise it’s not. Knowing the exact number of times to repeat the code can mean that you used some code to explain how many times. We often use &lt;code&gt;len()&lt;/code&gt; and &lt;code&gt;range()&lt;/code&gt; to get the exact number of repetitions. We’ll go over how &lt;code&gt;range()&lt;/code&gt; works then jump into some examples.&lt;/p&gt;

&lt;p&gt;From the Python documentation, &lt;code&gt;range()&lt;/code&gt; gives a “sequence of numbers and is commonly used for looping a specific number of times in for loops.”&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;range(startNum=0, stopNum, step=1)&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;startNum&lt;/code&gt; is the beginning of your range. It’s not required. The default is &lt;code&gt;0&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;stopNum&lt;/code&gt; is the end of your range.&lt;/li&gt;
&lt;li&gt;Give only the &lt;code&gt;stopNum&lt;/code&gt; and you will get that many numbers, though it will not include the &lt;code&gt;stopNum&lt;/code&gt;. This is because computers start counting at 0 and not 1.&lt;/li&gt;
&lt;li&gt;Give &lt;code&gt;startNum&lt;/code&gt; and &lt;code&gt;stopNum&lt;/code&gt; and you’ll get numbers from &lt;code&gt;startNum&lt;/code&gt; to &lt;code&gt;stopNum&lt;/code&gt;, but not including &lt;code&gt;stopNum&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;step&lt;/code&gt; is like counting by 2s (2, 4, 6, 8). If you give it &lt;code&gt;5&lt;/code&gt; it will give you every 5th number.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# get numbers up to, but not including 100
&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Did you notice how there is space in front of all the lines underneath the &lt;code&gt;for&lt;/code&gt; line? These are just like the &lt;code&gt;if&lt;/code&gt; blocks. The tab before the line is how Python knows this line is a step that belongs to the loop. The next line(s) that are &lt;strong&gt;not&lt;/strong&gt; tabbed in are not part of a loop and therefore will not be repeated. They will run after the loop is done because computers read code top to bottom.&lt;/p&gt;

&lt;p&gt;I would read this example as: “for each number from (or “in the range of”) 0 up to but not including 100 while skipping 20, print the number”. The example code would run 5 times. Do you know why? &lt;code&gt;range()&lt;/code&gt; is giving us our exact number of times to run the loop. The range starts at 0, ends at but doesn’t include 100, and counts by or steps over 20. In this case, we get 0, 20, 40, 60, and 80.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-is-raw-i-endraw-"&gt;
  &lt;/a&gt;
  What is &lt;code&gt;i&lt;/code&gt;?
&lt;/h4&gt;

&lt;p&gt;You’ll find outside of giving the syntax above, I will never use &lt;code&gt;i&lt;/code&gt;. I find it easier to understand my code when I use a descriptive name. A name is great, but we still need to know what the elusive &lt;code&gt;i&lt;/code&gt; is. In a &lt;code&gt;for&lt;/code&gt; loop, &lt;code&gt;i&lt;/code&gt; is a variable that only gets used within the loop.&lt;/p&gt;

&lt;p&gt;This variable is called an iterator variable. It is created in the &lt;code&gt;for&lt;/code&gt; line, then it can be used in the block of loop code. With each repetition/iteration of the loop, any uses of the variable in the loop block will change. If the first repetition, the iterator variable was &lt;code&gt;0&lt;/code&gt;, then in the second repetition the iterator variable was &lt;code&gt;1&lt;/code&gt;, and so on.&lt;/p&gt;

&lt;p&gt;To make things easier to understand, we could just have easily used &lt;code&gt;num&lt;/code&gt; or &lt;code&gt;digit&lt;/code&gt; instead of &lt;code&gt;i&lt;/code&gt;. Read the syntax to yourself, substituting one of these for the &lt;code&gt;i&lt;/code&gt;. Does it make a bit more sense now? Diving into some real-life examples should help explain this better.&lt;/p&gt;

&lt;p&gt;Do know that if you’re working with books, tutorials, videos, or even other programmers, they may choose to use &lt;code&gt;i&lt;/code&gt;. Know that when you’re reading it, you can substitute what makes sense to you.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-can-we-do-with-raw-for-endraw-loops"&gt;
  &lt;/a&gt;
  What can we do with &lt;code&gt;for&lt;/code&gt; loops?
&lt;/h3&gt;

&lt;p&gt;Again, &lt;code&gt;for&lt;/code&gt; loops should be used when we want to repeat code and we know how many times to repeat it.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#reallife-examples"&gt;
  &lt;/a&gt;
  Real-life examples &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;Have you ever washed dishes before? I have and I really don’t enjoy it. Let’s try setting up some code for a dishwashing robot.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# assume we have a list or sink full of 37 dirty dishes called dirty_dishes_list
# for every dish on the counter, wash it
&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;dish&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;dirty_dishes_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;add_soap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;scrub_dish&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;rinse_dish&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;dry_dish&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dish&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"has been cleaned"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This DishBot 3000 code won’t work because none of these functions have been made. Instead, they are placeholders in an example. If you want to see it work, you could swap each line for a line like: &lt;code&gt;print("DishBot 3000 has added soap")&lt;/code&gt;. We are also missing a &lt;code&gt;dirty_dishes_list&lt;/code&gt;. Once you learn about lists, come back to this example, make a &lt;code&gt;dirty_dishes_list&lt;/code&gt;, and try out the code.&lt;/p&gt;

&lt;p&gt;Since DishBot 3000 is done washing dishes, I think it’s time to make some more dirty dishes while making dinner. Shall we read our recipe and write up some pseudocode?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yiW5z71E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1u7rvxlyiz60icptv6zl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yiW5z71E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1u7rvxlyiz60icptv6zl.png" alt="3 people making food. first one is a Black person holding a recipe stirring a pot on the stove. next is a tan woman stirring a pot on the stove. last is a white person mixing stuff in a bowl with a whisl" width="500" height="200"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# recipe pseudocode
&lt;/span&gt;
&lt;span class="c1"&gt;# put all ingredients in a bowl
# mix for two minutes
&lt;/span&gt;
&lt;span class="c1"&gt;# heat stove and dump mixed ingredients in pot on stove
# mix for five minutes
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With our pseudocode recipe done, we can figure out what our code should be. How many of those steps include some sort of repetition? For each step with repetition, we will need another separate loop.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# recipe loops
&lt;/span&gt;
&lt;span class="c1"&gt;# put all ingredients in a bowl
&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ingredient&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ingredients_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ingredient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"measured"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ingredient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"added to bowl"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# mix for two minutes
&lt;/span&gt;&lt;span class="n"&gt;bowl_mix_minutes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;minute&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bowl_mix_minutes&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"mixed ingredients for 1 minute"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# heat stove and dump mixed ingredients in pot on stove
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Stove is turned on"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Mixture has been added to the pot"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# mix for two more minutes
&lt;/span&gt;&lt;span class="n"&gt;stove_mix_minutes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;minute&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stove_mix_minutes&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"mixed ingredients over heat for 1 minute"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These loop examples won’t work as expected because we are using lists, but haven’t made any lists. We’ll talk about lists soon and you can come back to see how these work out.&lt;/p&gt;

&lt;p&gt;Do you recall why the stove heating print statements are not part of any of these loops? If not, hop back to the for loop syntax for a refresher.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#code-behind-the-raw-upper-endraw-method"&gt;
  &lt;/a&gt;
  Code Behind the &lt;code&gt;.upper()&lt;/code&gt; method
&lt;/h4&gt;

&lt;p&gt;Earlier, we talked about the &lt;code&gt;.upper()&lt;/code&gt; method. This method takes a string and makes all of the characters uppercase. You now know enough things to write the magic behind &lt;code&gt;.upper()&lt;/code&gt;. Let’s pseudocode it first.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# pseudocoding .upper()
&lt;/span&gt;
&lt;span class="c1"&gt;# save a string into a variable
# for every character in the string
# if the character is lowercase
# make the character uppercase and print
# if the character is a space, print the space
# if none of that (meaning the character is already uppercase), print the character
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that you have this written out in pseudocode, use the steps to guide you in writing some code. Don’t forget, you can turn your pseudocode into comments to explain each line. Another hint, programmers tend to use &lt;code&gt;char&lt;/code&gt; because it’s short for “character”.&lt;/p&gt;

&lt;p&gt;If you don’t recall the ASCII codes for all of the letters, that’s cool, I don’t either. Flip back to &lt;a href="https://dev.to/vickilanger/words-numbers-variables-oh-my-mmi#words"&gt;String Built-in Functions&lt;/a&gt; or lookup &lt;a href="https://www.google.com/search?q=ascii+letter+chart"&gt;“ASCII letter chart”&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Did you notice our pseudocode used the words &lt;code&gt;for&lt;/code&gt; and &lt;code&gt;if&lt;/code&gt;? We can mix and match our spoken language with the programming language. This helps us start to form an idea of what we should be coding.&lt;/p&gt;

&lt;p&gt;I bet you’ll recall that we use tabs and code blocks in both &lt;code&gt;for&lt;/code&gt; loops and &lt;code&gt;if&lt;/code&gt; blocks. If you use them together, you’ll use combine the tabs to show Python you intend for one to be a part of another. For example, if you have an &lt;code&gt;if&lt;/code&gt; block as part of your for loop, the &lt;code&gt;if&lt;/code&gt; line will have one tab to show it is part of the &lt;code&gt;for&lt;/code&gt; loop. Then, the lines that are part of the &lt;code&gt;if&lt;/code&gt; block have two tabs to show it is part of the &lt;code&gt;if&lt;/code&gt; block that is inside a &lt;code&gt;for&lt;/code&gt; loop.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# coding .upper()
&lt;/span&gt;
&lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"I smelled a goat at the store because I'm a snowman!"&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# for every character in the string
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;97&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;122&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# if the character is lowercase
&lt;/span&gt;        &lt;span class="n"&gt;new_char_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;  &lt;span class="c1"&gt;# get the uppercase character code
&lt;/span&gt;        &lt;span class="n"&gt;new_char&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_char_code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# use new_char_code to get uppercase letter
&lt;/span&gt;        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_char&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# print new_char with no space at end
&lt;/span&gt;    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# if char is a space
&lt;/span&gt;        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# if none of the above (probably: char already uppercase or not a letter)
&lt;/span&gt;        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;char&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By the way, you can combine functions together. Taking existing code and modifying it to be easier to read and more efficient is called refactoring. With the above example, we could refactor a few lines.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# original lines
&lt;/span&gt;&lt;span class="n"&gt;new_char_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;  &lt;span class="c1"&gt;# get the uppercase character code
&lt;/span&gt;&lt;span class="n"&gt;new_char&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_char_code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# use new_char_code to get uppercase letter
&lt;/span&gt;
&lt;span class="c1"&gt;# possible replacement
&lt;/span&gt;&lt;span class="n"&gt;new_char&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# get uppercase character code then get letter
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#why-raw-for-endraw-loops-and-when-to-use-them"&gt;
  &lt;/a&gt;
  Why &lt;code&gt;for&lt;/code&gt; loops and when to use them?
&lt;/h3&gt;

&lt;p&gt;Without loops, we would have to write a lot more code. That would be a hassle for you, the programmer, and your computer would have bigger files to hold on to. Remember, we use &lt;code&gt;for&lt;/code&gt; loops when we can discern exactly how many times we need to repeat the code.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#while-loops"&gt;
  &lt;/a&gt;
  While Loops
&lt;/h2&gt;

&lt;p&gt;Sometimes we really don’t know how many times we want to repeat our steps. When this is the case, we should use a &lt;code&gt;while&lt;/code&gt; loop. This means no programmer knows the exact number of times to repeat the code.&lt;/p&gt;

&lt;p&gt;Have you ever hit "repeat" on a song? That is a while loop. It's going to repeat until you tell it to stop or until there is no power left for the device. If we were coding, we could say "while there is power, play the song on repeat".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/QoD2PAumUHCz6/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/QoD2PAumUHCz6/giphy.gif" alt="Dog from Nickelodeon's Doug cartoon listening to music with headphones while bobbing their head and looking at comic books" width="416" height="299"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;something_true&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are several steps to a while loop. If you skip one of them, your while loop is likely to mess up. Remember, the computer will do what you tell it to, not what you want it to do.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create the counter - a variable to help know when the loop should end&lt;/li&gt;
&lt;li&gt;Give a condition - comparison or logical operator, similar to an if statement&lt;/li&gt;
&lt;li&gt;Increment or Decrement the counter - add/subtract every time the loop runs&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#avoid-infinite-loops"&gt;
  &lt;/a&gt;
  Avoid Infinite Loops &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;An infinite loop means code repeats forever until your computer senses it and stops the code. This will often look like your computer or a single program is crashing and not responding. If this is the case, you may need to close the tab or program. Then, go back to your code and make sure you have incremented the counter.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-can-we-do-with-raw-while-endraw-loops"&gt;
  &lt;/a&gt;
  What can we do with &lt;code&gt;while&lt;/code&gt; loops?
&lt;/h3&gt;

&lt;p&gt;Again, &lt;code&gt;while&lt;/code&gt; loops should be used when we want to repeat code and we don’t know how many times to repeat it. Instead, we give a comparison(s) or logical operator(s) to make a condition.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#reallife-examples"&gt;
  &lt;/a&gt;
  Real-life examples  &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Af9fmHJ2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gkoybrlukib08omzf8nm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Af9fmHJ2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gkoybrlukib08omzf8nm.png" alt="person holding and petting a cat. sun with clouds. dog chasing a ball" width="500" height="200"&gt;&lt;/a&gt;&lt;br&gt;
Have you ever pet a cat before? Most cats are a perfect example of a while loop. Before we start, let’s ask the cat how many times they’d like to be pet. We aren’t going to tell the human doing the petting. We’re just going to use the cat’s answer to define our condition. To ask the cat for this, we will use &lt;code&gt;input()&lt;/code&gt;. Sadly, we need a number, and &lt;code&gt;input()&lt;/code&gt; gives us strings. So, we have to force the it into a number using &lt;code&gt;int()&lt;/code&gt;. This forcing from string to integer is called &lt;a&gt;&lt;/a&gt;“casting a string to an integer”. All together, we can save the cat’s response into a variable using the first line in this example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# first ask the cat how many times they’d like to be pet, but don’t tell the human
&lt;/span&gt;&lt;span class="n"&gt;preferred_pets_num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"How many times would you like to be pet"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;pet_attempts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="c1"&gt;# start with 0
&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;preferred_pets_num&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pet_attempts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"You have consent to pet again"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"purrrr, that pet was accepted"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pet_attempts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pet_attempts&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="c1"&gt;# add 1 every time you pet
&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"That was 1 too many times. I'm leaving now"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The three tabbed in lines run once for each repetition of the loop. The loop ends when we have gone over the accepted amount of pets. Now that the loop is over, we can print that the cat has decided to leave.&lt;/p&gt;

&lt;p&gt;Now that the cat is upset and has left us, let’s check the weather and see if our dog is ready to play. In this example, we’ll combine a bunch of the things we’ve covered like &lt;a href="https://dev.to/vickilanger/if-this-then-that-585"&gt;if-then statements&lt;/a&gt;, &lt;a href="https://dev.to/vickilanger/if-this-then-that-585#condition"&gt;logical operators&lt;/a&gt;, &lt;a href="https://dev.to/vickilanger/a-bit-more-dry-with-loops-14hn#casting"&gt;casting strings&lt;/a&gt;, and a while loop. It’s longer than some of the other examples. We’ll look at the different parts to make it make sense.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;dog_wants_to_play&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;  &lt;span class="c1"&gt;# dog always wants to play
&lt;/span&gt;&lt;span class="n"&gt;sunny_outside&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Sunny? True/False"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;rainy_outside&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Raining? True/False"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;warm_outside&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Warm outside? True/False"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;cold_outside&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Cold outside? True/False"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;dog_energy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;  &lt;span class="c1"&gt;# starting with 100%
&lt;/span&gt;&lt;span class="n"&gt;outside_spent_energy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;  &lt;span class="c1"&gt;# % energy spent fetching one time
&lt;/span&gt;&lt;span class="n"&gt;inside_spent_energy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;  &lt;span class="c1"&gt;# % energy spent fetching one time
&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;dog_energy&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# gotta leave pup some energy
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;sunny_outside&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;warm_outside&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;go_outside&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# sets outside to True
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;outside&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;throw_ball&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Go get it!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Drop it"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;dog_energy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dog_energy&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;outside_spent_energy&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;rainy_outside&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;cold_outside&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;throw_ball&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# throw carefully, you're inside
&lt;/span&gt;        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Go get it!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;dog_energy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dog_energy&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;inside_spent_energy&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;At the top, first chunk of lines, we have some inputs that will later help us decide when and where to play. I would read the second line as: “getting user input string of True or False, cast or force into a boolean, then saved into variable &lt;code&gt;sunny_outside&lt;/code&gt;”. &lt;/li&gt;
&lt;li&gt;After the inputs, we have three lines that set up our dog’s energy. I’d read these as “dog starts with 100% energy, 3% energy is spent outside, and 2% energy is spent inside.” Now we can get into our while loop. Our first line of the loop could read as “while the dog has more than 50% energy, then we do the stuff below”.&lt;/li&gt;
&lt;li&gt;Looks like we’ve run into an if-elif statement. Depending on the inputs, you’ll only do one or the other. There are two options: “If it’s sunny and warm, then do the code in this block” or “If it’s rainy or cold, then do the code in this block”.&lt;/li&gt;
&lt;li&gt;At the end of each of the if and elif blocks, we made sure to account for spent energy and subtract from dog’s energy. You could read that line as “current dog’s energy is now &lt;code&gt;=&lt;/code&gt; the old dog’s energy minus energy spent”. Without this line, we’d have an infinite loop and our poor dog would be so tired they may get hurt.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Do know, this code won’t work as is because none of these functions have been made. Instead, they are placeholders in an example. If you want to see it work, you could swap each fake function (&lt;code&gt;go_outside()&lt;/code&gt; and &lt;code&gt;throw_ball()&lt;/code&gt;) for a line like: &lt;code&gt;print("We are outside now.")&lt;/code&gt;. You would also have to change &lt;code&gt;if outside:&lt;/code&gt; to &lt;code&gt;if True:&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We talked about infinite loops earlier, but they’re generally a computer or human problem. There are infinite loops in real life. Do you know about the water cycle? The basic concept doesn’t have a good starting point because it is always happening. So, let’s start with rain, snow, and any other precipitation. Water, in some form, falls from the sky. Then, this water collects somewhere (eg bucket, ocean, lake etc). Once the water collects, it can evaporate. As it evaporates, clouds form and the cycle continues until the end of Earth.&lt;/p&gt;

&lt;p&gt;If you run try writing this code, expect it to crash. If you don’t remember why that’s fine. You can jump back to the section on &lt;a href="https://dev.to/vickilanger/a-bit-more-dry-with-loops-14hn#infinite"&gt;infinite loops&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;earth_exists&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="c1"&gt;# while the earth_exists
# water falls back to earth - precipitate
# water collects
# water evaporates
# clouds form - condensation
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#behind-the-scenes-winning-and-losing"&gt;
  &lt;/a&gt;
  Behind the Scenes: Winning and Losing
&lt;/h4&gt;

&lt;p&gt;Using while loops and if-else statements we can build scoring for your favorite game. No matter the complexity of the scoring, you can write it with while loops and if-else statements. First, we’ll use a coin-flipping game.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/SABvdsgeZrcu4SbdA6/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/SABvdsgeZrcu4SbdA6/giphy.gif" alt="white person flipping a United States quarter. The coin looks like it is coming at you then there are words &amp;quot;Feeling luck&amp;quot; before the coin falls back to the person's hand" width="480" height="270"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our first step won’t be in a while loop. We’ll add the loop when we adjust the game to have 3 rounds and whoever gets two out of 3 will win. Coins have two sides. We’ll call one side “heads” and the other “tails”. Player one, the computer, flips the coin while player two, you, say which side they think will land facing up. If player two’s choice has landed facing up, they win.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;your_choice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Heads or Tails?"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;coin_landed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"heads"&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;coin_landed&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;your_choice&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"You win"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"You lost"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For now, we have “hard coded” which side of the coin landed facing up. Hard coding means that we did not use any programming magic to come up with this. Instead, we told it the answer. Later when we talk about Python lists, we will add a couple of things to make the computer’s coin flipping random.&lt;/p&gt;

&lt;p&gt;For now, we know who won this game but we should make this fair and try for the best two out of three rounds.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;rounds_won&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="c1"&gt;# start with 0
&lt;/span&gt;&lt;span class="n"&gt;rounds_lost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="c1"&gt;# start with 0
&lt;/span&gt;&lt;span class="n"&gt;total_rounds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="c1"&gt;# start with 0
&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;total_rounds&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;your_choice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Heads or Tails?"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;coin_landed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"heads"&lt;/span&gt;  &lt;span class="c1"&gt;# you can change this
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;coin_landed&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;your_choice&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"You win this round"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;rounds_won&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rounds_won&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"You lost this round"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;rounds_lost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rounds_lost&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;total_rounds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;total_rounds&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="c1"&gt;# calculate who won
&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;total_rounds&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;rounds_won&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"You win! You got best 2 out of 3"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"You lose! Computer got best 2 out of 3"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;At the top, the first chunk of lines, we added in some counters to help run the code.&lt;/li&gt;
&lt;li&gt;After the counters, we added a while loop and tabbed in the if-else statements and their blocks.&lt;/li&gt;
&lt;li&gt;With the &lt;code&gt;input().lower()&lt;/code&gt; we are acknowledging that a player may input something with different capitalization and we are making sure it will match out &lt;code&gt;coin_landed&lt;/code&gt; exactly.&lt;/li&gt;
&lt;li&gt;Looks like we’ve run into an if-else statement. Depending on the outcome of the round, you’ll only do one or the other. There are two options: “the coin side facing up is the same as your choice, then do the code in this block” or “the coin side facing up is not the same as your choice, then do the code in this block”.&lt;/li&gt;
&lt;li&gt;At the end of each of the if and else blocks, we made sure to account for the results of the round. Depending on the block, you could read that line as “current rounds won &lt;code&gt;=&lt;/code&gt; the old rounds won plus one” or “current rounds lost &lt;code&gt;=&lt;/code&gt; the old rounds lost plus one”.&lt;/li&gt;
&lt;li&gt;After the else block, but still part of the while loop, we add one to our total rounds. Without this line, we’d have an infinite loop and our game would never end.&lt;/li&gt;
&lt;li&gt;At the very end, after the loop ends, we use another if-else statement to decide who won the whole game.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Did you notice how we coded the important guts of the game first, then we added the extra features? This is a typical approach to coding. First, we build a functional project. Once it works, we can add features to it. This helps us keep from getting overwhelmed and allows us to see working parts sooner.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-raw-while-endraw-loops-and-when-to-use-them"&gt;
  &lt;/a&gt;
  Why &lt;code&gt;while&lt;/code&gt; loops and when to use them?
&lt;/h3&gt;

&lt;p&gt;Remember, we use &lt;code&gt;while&lt;/code&gt; loops when we cannot know exactly how many times we need to repeat the code.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#do-you-remember"&gt;
  &lt;/a&gt;
  Do you remember? &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Here's some practice challenges. Let’s practice what we’ve learned so far. Go ahead and comment on this post with your answers. Do you remember? If not, you can always go back to read sections again.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#give-a-reallife-example-of-a-raw-for-endraw-loop-and-a-raw-while-endraw-loop"&gt;
  &lt;/a&gt;
  Give a real-life example of a &lt;code&gt;for&lt;/code&gt; loop and a &lt;code&gt;while&lt;/code&gt; loop
&lt;/h3&gt;

&lt;p&gt;You can use print statements or fake functions (like &lt;code&gt;jump()&lt;/code&gt; or &lt;code&gt;turn_wheel()&lt;/code&gt;) to fill in the if-elif-else then blocks&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# coding a for loop
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# coding a while loop
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#whats-wrong-with-these-can-you-fix-them"&gt;
  &lt;/a&gt;
  What’s Wrong with These? Can You Fix them?
&lt;/h3&gt;

&lt;p&gt;There may be multiple ways to fix these. Have fun and do it whatever way you think makes sense.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# pets are a mix of birds, fish, cats, dogs, and reptiles
&lt;/span&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;pet&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="n"&gt;feed_pet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;brush_pet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;give_water&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;take_outside&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;play&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;            &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;dog_awake&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;dog_energy&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;dog_awake&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="n"&gt;dog_energy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
    &lt;span class="n"&gt;chase_cat&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;chew_toy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;beg_for_pets&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;dog_energy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dog_energy&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# dog_energy low
&lt;/span&gt;    &lt;span class="n"&gt;nap_time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# changes dog_awake to False
&lt;/span&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"It’s doggy nap time!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#go-ahead-you-can-build-it-raw-lower-endraw-"&gt;
  &lt;/a&gt;
  Go Ahead! You can build it! &lt;code&gt;.lower()&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# coding .lower()
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#and-maybe-even-raw-title-endraw-"&gt;
  &lt;/a&gt;
  and maybe even &lt;code&gt;.title()&lt;/code&gt;
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# coding .title()
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#you-got-this-build-scoring-for-a-game"&gt;
  &lt;/a&gt;
  You got this! Build Scoring for a game
&lt;/h3&gt;

&lt;p&gt;You can use print statements or fake functions (like &lt;code&gt;throw()&lt;/code&gt; or &lt;code&gt;move_left()&lt;/code&gt;) to fill in the if-elif-else then blocks.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# scoring for any game
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;Thank you to &lt;a class="mentioned-user" href="https://dev.to/yechielk"&gt;@yechielk&lt;/a&gt; for reviewing. If you like learning about how ethics and programming go together, check out their &lt;a href="https://torahandtech.dev/"&gt;book and newsletter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>python</category>
      <category>challenge</category>
    </item>
    <item>
      <title>Snippets VSCode: Rapidito y con buena letra. </title>
      <author>Marta Rey</author>
      <pubDate>Wed, 29 Dec 2021 13:20:26 +0000</pubDate>
      <link>https://dev.to/im_martreyz/snippets-vscode-rapidito-y-con-buena-letra-1ge0</link>
      <guid>https://dev.to/im_martreyz/snippets-vscode-rapidito-y-con-buena-letra-1ge0</guid>
      <description>&lt;p&gt;Hace menos de un mes fue mi primer aniversario como programadora Front End, o hizo un año que acabé el bootcamp... Como quieras verlo. El tema de poner fechas de aniversarios ya se sabe... siempre hay discordia y no se sabe muy bien desde qué punto empezar a contar, pero a mí me gusta escoger un día de referencia siempre para todo, y repasar días mentalmente de vez en cuando para ir memorizando poco a poco un montón de fechas! (ya, no estoy bien, pero tampoco hago daño a nadie).&lt;/p&gt;

&lt;p&gt;Total, que me he dado cuenta de que durante este año así a lo tonto he conocido a un montón de personas que programan (entre cursos y proyectitos y trabajo y chacharetas así en general...) y creo que a estas alturas tengo suficiente información para aseverar que en desarrollo cada persona tiene su súper poder: están las Súper Detallistas (que enganchan una docu y la exprimen hasta el último punto y coma), las Súper Recordadoras (que no necesitaría fechas en los commits porque sabe siempre qué se hizo dónde y por qué), las Súper Resolutivas (que siempre tienen un pseudo-elemento en la manga),... Y yo creo que ya veis por donde voy. Pues bien, yo creo que soy un poco de las Súper Rapiditas (que a priori parece que muy bien pero luego tienes un día un poco tonto y escribes cosas como “error.massage” y te quedas tan ancha y luego no sabes qué pasa y todo mal). Y es que al final todo gran poder conlleva una gran responsabilidad, y yo creo que la de cada Súper Dev es tranquilizar un poquito sus instintos e intentar encontrar el equilibrio perfecto.&lt;/p&gt;

&lt;p&gt;Vamos, que si tienes muchísima atención por el detalle está genial, pero tienes que intentar no perderte en tus lecturas e investigaciones, y si tienes muchos recursos tienes que intentar no acabar haciendo un código que solo tú entiendes... y si a veces se te va un poquito la mano con las prisas tienes que intentar hacer las cosas con más calma y centrarte más en el detalle. O así lo veo yo, que al final es lo que viene a cuento que para eso estoy escribiendo yo (como con la radio del coche el que conduce).&lt;/p&gt;

&lt;p&gt;En definitiva! A ver si me centro que no me centro. Que hace unos meses que estoy muy interesada en herramientas que me ayuden a eso, a afinar mejor, sea como sea la ayuda: el linter, por ejemplo, me ayuda porque me enseña mis errores en el momento y me obliga a parar a revisar, los tests me ayudan porque me obligan a refactorizar mi código para facilitar la tarea, y por tanto a revisar el código tal y como termino de escribirlo... (tengo algunos truquillos caseros también, por qué no decirlo). Pero hay una en concreto que nunca hubiera dicho que me fuera a ayudar, y resulta ser que sí, y son los Snippets de código.&lt;/p&gt;

&lt;p&gt;Y estarás pensando “Amiga, los snippets de código no te ayudan a escribir mejor código, escriben código por ti” y sí, efectivamente, pero a la vez no, porque el código que escriben los snippets es la “paja”, el código repetitivo. Y esto me lleva a los motivos por los que en efecto, me ayuda:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Como decía, los snippets sirven para “automatizar” la escritura de código repetitivo, donde los errores suelen ser: “no he visto que me faltaba un corchete”, “no he visto que me faltaba ese paréntesis” o “ostras, la coma”. Es decir, no es que pienses que la flecha de una arrow function se escribe así &lt;code&gt;=&amp;lt;&lt;/code&gt;  , es que estabas mojando la galleta en el colacao y has soltado el shift antes de tiempo, y evitar esos errores evita mucha frustración y deja muy limpita la cabeza para pensar y razonar.&lt;/li&gt;
&lt;li&gt;Al automatizar esas construcciones dedico menos tiempo a pensar en tareas repetitivas y dedico tiempo de calidad al resto del código.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En fin, que los Snippets son mis nuevos mejores amigos. &lt;/p&gt;

&lt;p&gt;Crear un snippet es muy sencillo, al menos en VS Code (y me da a mí por pensar que en todos los IDE será igual de fácil): únicamente tenemos que hacer click en settings y seleccionar “User Snippets”:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TenaQyx2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vb5dbc6wl9csknph43m1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TenaQyx2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vb5dbc6wl9csknph43m1.png" alt='Captura de imagen de las opciones de "settings" del VS Code, en donde se lee, por este orden: command palette, settings, online services settings, extensions, keyboard shortcuts, migrate keyboard shortcuts from..., user snippets, color theme, file icon theme, product icon theme, turn on settings sync, manage workplace trust y restart to update' width="496" height="561"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Se abrirá arriba un cuadro de opciones de la que elegiremos la que más nos convenga (si es la primera vez tendrás que crear un nuevo archivo global como se indica en la imagen, en caso contrario puedes elegir de la lista de los archivos existentes el que quieres modificar:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mxnvoJIC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bx2hqftn9kfw8rccxegc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mxnvoJIC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bx2hqftn9kfw8rccxegc.png" alt='Pantallazo con un cuadro de opciones donde aparecen primero los archivos html.code-snippets, snippets.code-snippets y javascript.json; y a continuación la opción destacada de "New Global snippets file..."' width="875" height="164"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;También nos da la opción de configurar los snippets a nivel proyecto.&lt;/p&gt;

&lt;p&gt;Una vez seleccionada la opción (si hemos elegido crear un nuevo archivo nos preguntará el nombre que le queremos dar), accederemos al archivo .json donde configuraremos nuestros snippets siguiendo la siguiente estructura:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Nombre del snippet&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scope&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;El&lt;/span&gt; &lt;span class="nx"&gt;ámbito&lt;/span&gt; &lt;span class="nx"&gt;al&lt;/span&gt; &lt;span class="nx"&gt;que&lt;/span&gt; &lt;span class="nx"&gt;pertenece&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="nx"&gt;snippet&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;para&lt;/span&gt; &lt;span class="nx"&gt;que&lt;/span&gt; &lt;span class="nx"&gt;se&lt;/span&gt; &lt;span class="nx"&gt;muestren&lt;/span&gt; &lt;span class="nx"&gt;únicamente&lt;/span&gt; &lt;span class="nx"&gt;los&lt;/span&gt; &lt;span class="nx"&gt;relevantes&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;cada&lt;/span&gt; &lt;span class="nx"&gt;caso&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt; &lt;span class="nx"&gt;Pueden&lt;/span&gt; &lt;span class="nx"&gt;ser&lt;/span&gt; &lt;span class="nx"&gt;lenguajes&lt;/span&gt; &lt;span class="nx"&gt;o&lt;/span&gt; 
&lt;span class="nx"&gt;proyectos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;prefix&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;La&lt;/span&gt; &lt;span class="nx"&gt;palabra&lt;/span&gt; &lt;span class="nx"&gt;con&lt;/span&gt; &lt;span class="nx"&gt;la&lt;/span&gt; &lt;span class="nx"&gt;que&lt;/span&gt; &lt;span class="nx"&gt;llamaremos&lt;/span&gt; &lt;span class="nx"&gt;al&lt;/span&gt; &lt;span class="nx"&gt;snippet&lt;/span&gt; &lt;span class="nx"&gt;desde&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="nx"&gt;código&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nx"&gt;Una&lt;/span&gt; &lt;span class="nx"&gt;o&lt;/span&gt; &lt;span class="nx"&gt;varias&lt;/span&gt; &lt;span class="nx"&gt;líneas&lt;/span&gt; &lt;span class="nx"&gt;de&lt;/span&gt; &lt;span class="nx"&gt;código&lt;/span&gt; &lt;span class="nx"&gt;que&lt;/span&gt; &lt;span class="nx"&gt;queremos&lt;/span&gt; &lt;span class="nx"&gt;que&lt;/span&gt; &lt;span class="nx"&gt;se&lt;/span&gt; &lt;span class="nx"&gt;inserte&lt;/span&gt; &lt;span class="nx"&gt;de&lt;/span&gt; &lt;span class="nx"&gt;forma&lt;/span&gt; &lt;span class="nx"&gt;automática&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;Tiene&lt;/span&gt; &lt;span class="nx"&gt;formato&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="nx"&gt;de&lt;/span&gt; &lt;span class="nx"&gt;strings&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;donde&lt;/span&gt; &lt;span class="nx"&gt;cada&lt;/span&gt;
&lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="nx"&gt;es&lt;/span&gt; &lt;span class="nx"&gt;una&lt;/span&gt; &lt;span class="nx"&gt;línea&lt;/span&gt; &lt;span class="nx"&gt;de&lt;/span&gt; &lt;span class="nx"&gt;código&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;En&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="nx"&gt;ejemplo&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;continuación&lt;/span&gt; &lt;span class="nx"&gt;se&lt;/span&gt; &lt;span class="nx"&gt;insertaría&lt;/span&gt; &lt;span class="nx"&gt;un&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt; &lt;span class="nx"&gt;de&lt;/span&gt; &lt;span class="nx"&gt;un&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="nx"&gt;$1&lt;/span&gt; &lt;span class="nx"&gt;indica&lt;/span&gt; &lt;span class="nx"&gt;que&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="nx"&gt;cursor&lt;/span&gt; &lt;span class="nx"&gt;se&lt;/span&gt; 
&lt;span class="nx"&gt;posicionará&lt;/span&gt; &lt;span class="nx"&gt;en&lt;/span&gt; &lt;span class="nx"&gt;ese&lt;/span&gt; &lt;span class="nx"&gt;punto&lt;/span&gt; &lt;span class="nx"&gt;en&lt;/span&gt; &lt;span class="nx"&gt;primera&lt;/span&gt; &lt;span class="nx"&gt;instancia&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="nx"&gt;$2&lt;/span&gt; &lt;span class="nx"&gt;será&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;donde&lt;/span&gt; &lt;span class="nx"&gt;iremos&lt;/span&gt; &lt;span class="nx"&gt;haciendo&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="nx"&gt;primer&lt;/span&gt; &lt;span class="nx"&gt;tab&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;De&lt;/span&gt; &lt;span class="nx"&gt;esta&lt;/span&gt; &lt;span class="nx"&gt;forma&lt;/span&gt; &lt;span class="nx"&gt;al&lt;/span&gt; &lt;span class="nx"&gt;meter&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="nx"&gt;snippet&lt;/span&gt; &lt;span class="nx"&gt;nos&lt;/span&gt; 
&lt;span class="nx"&gt;situará&lt;/span&gt; &lt;span class="nx"&gt;automáticamente&lt;/span&gt; &lt;span class="nx"&gt;en&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="nx"&gt;punto&lt;/span&gt; &lt;span class="nx"&gt;donde&lt;/span&gt; &lt;span class="nx"&gt;incluir&lt;/span&gt; &lt;span class="nx"&gt;la&lt;/span&gt; &lt;span class="nx"&gt;variable&lt;/span&gt; &lt;span class="nx"&gt;del&lt;/span&gt; &lt;span class="nx"&gt;mismo&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;la&lt;/span&gt; &lt;span class="nx"&gt;palabra&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;consolear&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;console.log('$1');&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Descripción&lt;/span&gt; &lt;span class="nx"&gt;opcional&lt;/span&gt; &lt;span class="nx"&gt;para&lt;/span&gt; &lt;span class="nx"&gt;mostrar&lt;/span&gt; &lt;span class="nx"&gt;cuando&lt;/span&gt; &lt;span class="nx"&gt;se&lt;/span&gt; &lt;span class="nx"&gt;introduzca&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="nx"&gt;prefix&lt;/span&gt; &lt;span class="nx"&gt;en&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="nx"&gt;código&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;para&lt;/span&gt; &lt;span class="nx"&gt;identificar&lt;/span&gt; &lt;span class="nx"&gt;la&lt;/span&gt; &lt;span class="nx"&gt;utilidad&lt;/span&gt; &lt;span class="nx"&gt;de&lt;/span&gt; &lt;span class="nx"&gt;cada&lt;/span&gt; &lt;span class="nx"&gt;uno&lt;/span&gt; 
&lt;span class="nx"&gt;de&lt;/span&gt; &lt;span class="nx"&gt;los&lt;/span&gt; &lt;span class="nx"&gt;snippets&lt;/span&gt; &lt;span class="nx"&gt;que&lt;/span&gt; &lt;span class="nx"&gt;se&lt;/span&gt; &lt;span class="nx"&gt;muestran&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Si es la primera vez que oyes hablar de los snippets seguramente ahora mismo estés pensando la cantidad de estructuras que vas a crear y lo bonita que va a ser tu vida a partir de ahora, pero espera, porque todavía no conoces toda tu suerte.&lt;/p&gt;

&lt;p&gt;Resulta que esa es la opción “difícil”, la de súper pro, la de “se me ha ocurrido una cosa que no se le ha ocurrido a nadie antes y que no se le ocurre más que a un genio” (yo todavía no he tenido que crear ninguno, así un poco para probarlo y tal... poco más). Para lo que es el día a día, para empezar a usarlo ya mismo, no he tenido que montar ni un snippet porque como suele ocurrir en este mundillo... ya lo ha hecho alguien.&lt;/p&gt;

&lt;p&gt;Y es que, a parte de los Snippets que trae el propio &lt;a href="https://code.visualstudio.com/docs/editor/userdefinedsnippets"&gt;VS Code&lt;/a&gt; (se consultan haciendo ctrl+shift+p para abrir la Paleta de Comandos y seleccionando “Insert Snippet”), existen un montón de extensiones del marketplace que te proveen con un montón dependiendo del lenguaje que quieras que sea SNIPPEADO (es tarde ya y empiezo a perder un poco el pie):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=MadsKristensen.JavaScriptSnippetPack"&gt;JavaScript Snippet Pack&lt;/a&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V6t0J8m4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rinfhd3efg9b0qjv4o2p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V6t0J8m4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rinfhd3efg9b0qjv4o2p.png" alt="Imagen de referencia de la extensión JavaScript Snippet Pack en el marketplace de VS Code, donde se puede leer que está creada por Mahmoud Ali, tiene 421.599 descargas y 5/5 estrellas de 12 reviews." width="839" height="212"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=abusaidm.html-snippets"&gt;HTML Snippets&lt;/a&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2aJL8Yrw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gkri8aesx66csc1n8xet.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2aJL8Yrw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gkri8aesx66csc1n8xet.png" alt="Imagen de referencia de la extensión HTML Snippets en el marketplace de VS Code, donde se puede leer que está creada por Mohamed Abusaid, tiene 6.663.411 descargas y 4.5/5 estrellas de 62 reviews." width="768" height="209"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=eventyret.bootstrap-4-cdn-snippet"&gt;Bootstrap 4 CDN Snippet&lt;/a&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pp7gKTPN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fxs6cyswv5qvmgkvl5vf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pp7gKTPN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fxs6cyswv5qvmgkvl5vf.png" alt="Imagen de referencia de la extensión Bootstrap 4 CDN Snippet en el marketplace de VS Code, donde se puede leer que está creada por Simen Daehlin, tiene 182.479 descargas y 5/5 estrellas de 10 reviews." width="880" height="198"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=dsznajder.es7-react-js-snippets"&gt;React:&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UZBAfBfG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fnnf6rgmarwz75427e1z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UZBAfBfG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fnnf6rgmarwz75427e1z.png" alt="Imagen de referencia de la extensión ES7/React/Redux/GraphQL/react-native en el marketplace de VS Code, donde se puede leer que está creada por dsznajder, tiene 4.170.230 descargas y 4.5/5 estrellas de 44 reviews." width="880" height="159"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Y un montón más que se pueden consultar en el &lt;a href="https://marketplace.visualstudio.com/vscode"&gt;MarketPlace del VS Code&lt;/a&gt; y que me tienen loca.&lt;/p&gt;

&lt;p&gt;Y creo que hasta aquí mi Oda a los Snippets... Como siempre cualquier feedback (si es con amor o gatos) es bien recibido.&lt;/p&gt;

&lt;p&gt;Referencias:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://code.visualstudio.com/docs"&gt;Documentación oficial VS Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/vscode"&gt;MarketPlace VS Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>spanish</category>
      <category>codenewbie</category>
      <category>vscode</category>
      <category>snippets</category>
    </item>
    <item>
      <title>3 resources to pass the AWS SAA-02 — Solution Architect Associate certification</title>
      <author>Giulio Dellorbo</author>
      <pubDate>Wed, 29 Dec 2021 13:16:11 +0000</pubDate>
      <link>https://dev.to/egm0121/3-resources-to-pass-the-aws-saa-02-solution-architect-associate-certification-2lap</link>
      <guid>https://dev.to/egm0121/3-resources-to-pass-the-aws-saa-02-solution-architect-associate-certification-2lap</guid>
      <description>&lt;p&gt;Hey there 👋,&lt;/p&gt;

&lt;p&gt;I’ve recently got my AWS Solution Architect Certification, I thought it would be useful to share my experience and list the resources that I’ve used for studying and exam prep.&lt;/p&gt;

&lt;p&gt;To add some context, I’ve been working with a relatively small subset of AWS services on and off for the last couple of years, mainly gravitating around object storage, NoSQL databases, serverless stacks, decoupled software systems using Kinesis, SQS, and SNS.&lt;/p&gt;

&lt;p&gt;For me, this certification was an engaging way to deepen and expand my knowledge of the AWS Cloud and its ever-growing list of high-level and low-level building blocks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;📚 Study resources:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To start, I’ve purchased this study guide and read it on my Kindle:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.amazon.com/Certified-Solutions-Architect-Study-Guide-ebook-dp-B08P7ZWY23/dp/B08P7ZWY23/ref=mt_other?_encoding=UTF8&amp;amp;me=&amp;amp;qid="&gt;AWS Certified Solutions Architect Study Guide: Associate SAA-C02 Exam by Ben Piper, David Clinton&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is a comprehensive guide although some services are not covered in detail, the book is almost 500 pages long, divided into 14 chapters.&lt;br&gt;
The first nine chapters are dedicated to the most useful AWS services grouped by category.&lt;br&gt;
The last 4 chapters focus on the AWS well-architected framework and the best practices according to the five pillars:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reliability&lt;/li&gt;
&lt;li&gt;Performance&lt;/li&gt;
&lt;li&gt;Security&lt;/li&gt;
&lt;li&gt;Cost efficiency&lt;/li&gt;
&lt;li&gt;Operational efficiency&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Overall this guide will give you a complete overview of all the most important AWS services.&lt;br&gt;
Another plus is that every chapter comes with test questions at the end of it to help you validate your knowledge and get accustomed to the format and types of the questions found in the actual exam.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;📖 Official AWS Frequently Asked Questions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The online documentation for each AWS service and particularly the FAQ sections have been an incredible source of knowledge and I consider it crucial for thorough exam preparation.&lt;/p&gt;

&lt;p&gt;The FAQs are a long read! I’ve decided to focus on a subset of services that are either fundamental for the exam or that I personally wasn’t too familiar with.&lt;br&gt;
Here is my list:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/ec2/faqs/"&gt;Amazon EC2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/s3/faqs/"&gt;Amazon S3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/ecs/faqs/"&gt;Amazon ECS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/vpc/faqs/"&gt;Amazon VPC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/route53/faqs/"&gt;Amazon Route 53&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/rds/faqs/"&gt;Amazon RDS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/sqs/faqs/"&gt;Amazon SQS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/global-accelerator/faqs/"&gt;AWS Global Accelerator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/fsx/windows/faqs/"&gt;Amazon FSx for Windows File Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/fsx/lustre/faqs/"&gt;Amazon FSx for Lustre&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/fargate/faqs/"&gt;Amazon Fargate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;🧐 Practice exams&lt;/strong&gt;&lt;br&gt;
To simulate the exam experience with realistic questions and a cumulative test score there are a few popular options online.&lt;/p&gt;

&lt;p&gt;After reading many of reviews I’ve decided to purchase the &lt;a href="https://www.udemy.com/course/aws-certified-solutions-architect-associate-amazon-practice-exams-saa-c02/"&gt;AWS Certified Solutions Architect Associate Practice Tests&lt;/a&gt; by Jon Bonso on Udemy.&lt;br&gt;
The price is currently 29.99$ for 6 practice exams (390 questions in total).&lt;/p&gt;

&lt;p&gt;The questions are of similar complexity to the ones found in the actual exam.&lt;br&gt;
Each exam is 60 questions long and there is a timer ⏱ just like in the real exam. It’s useful to keep an eye on your pace even if in this mock exams you are allowed to go over time.&lt;br&gt;
What I especially liked about these practice tests were the answer’s explanations. You get a detailed write-up on why the correct answer works and why the incorrect answers are not fitting in that specific use case or context.&lt;br&gt;
It takes time to read them all but reading the explanations for both correct and incorrect answers really helped me clarify some edge cases.&lt;/p&gt;

&lt;p&gt;That’s about it, these are the three resources that helped me, if you found this post useful, please give a clap and follow me here or on &lt;a href="https://github.com/egm0121"&gt;Github&lt;/a&gt; 👍🏼&lt;/p&gt;

&lt;p&gt;Good luck with your AWS SAA-C02 exam 🍀!&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>certification</category>
      <category>programming</category>
    </item>
    <item>
      <title>Aspiration for evision (Aspiration for 2022)</title>
      <author>Susumu Yamazaki</author>
      <pubDate>Wed, 29 Dec 2021 12:33:40 +0000</pubDate>
      <link>https://dev.to/zacky1972/apply-for-evision-aspiration-for-2022-41l2</link>
      <guid>https://dev.to/zacky1972/apply-for-evision-aspiration-for-2022-41l2</guid>
      <description>&lt;p&gt;&lt;a href="https://github.com/cocoa-xu/evision"&gt;&lt;code&gt;evision&lt;/code&gt;&lt;/a&gt; is quite an excellent product! It is a bridge between Elixir and OpenCV.&lt;/p&gt;

&lt;p&gt;I developed &lt;a href="https://github.com/zeam-vm/nx_evision"&gt;&lt;code&gt;NxEvision&lt;/code&gt;&lt;/a&gt;, a bridge between &lt;a href="https://github.com/elixir-nx/nx"&gt;&lt;code&gt;Nx&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://github.com/cocoa-xu/evision"&gt;&lt;code&gt;evision&lt;/code&gt;&lt;/a&gt;. I hope it will be a bridge between machine learning and computer vision in Elixir.&lt;/p&gt;

&lt;p&gt;I also have an aspiration to apply the &lt;a href="https://github.com/zeam-vm/pelemay"&gt;Pelemay&lt;/a&gt; technology to &lt;a href="https://github.com/cocoa-xu/evision"&gt;&lt;code&gt;evision&lt;/code&gt;&lt;/a&gt;. That is, I'm going to implement optimization invocations of &lt;a href="https://github.com/cocoa-xu/evision"&gt;&lt;code&gt;evision&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To be continued...&lt;/p&gt;

</description>
      <category>elixir</category>
      <category>opencv</category>
      <category>evision</category>
      <category>nx</category>
    </item>
  </channel>
</rss>
