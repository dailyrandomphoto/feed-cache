<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Incident Response vs. Incident Managment</title>
      <author>Scott Lasica</author>
      <pubDate>Mon, 01 Nov 2021 20:59:45 +0000</pubDate>
      <link>https://dev.to/scottlasica/incident-response-vs-incident-managment-5036</link>
      <guid>https://dev.to/scottlasica/incident-response-vs-incident-managment-5036</guid>
      <description>&lt;p&gt;If you found your way to this post, it’s likely because you’re trying to determine what the difference is between incident response and incident management. You may be a new SRE, or switched companies and things aren’t being treated in the same way. The good news is you’ve come to the right place. The bad news is you won’t be leaving with a definitive answer.&lt;/p&gt;

&lt;p&gt;Incident response and incident management are defined differently by different organizations around the world. Doing a google on incident response vs incident management brings up an article from the &lt;a href="https://www.ncsc.gov.uk/collection/incident-management/incident-response"&gt;UK NCSC&lt;/a&gt;. In this article, they state:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Incident Management (IM) sits within and across any response process, ensuring all stages are handled. IM deals with any communications, media handling, escalations and any reporting issues, pulling the whole response together, coherently and holistically.&lt;/p&gt;

&lt;p&gt;Incident Response (IR) This includes triage, in-depth analysis, technical recovery actions and more.*&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The above implies that IM is at a higher level, spanning the organization and defining the overall process for handling incidents, while IR defines the actual technical steps done to contain and resolve the issue.&lt;/p&gt;

&lt;p&gt;On the same first page google results, I found another definition from the &lt;a href="https://us-cert.cisa.gov/bsi/articles/best-practices/incident-management"&gt;US CISA&lt;/a&gt;. This definition states:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This process of identifying, analyzing, and determining an organizational response to computer security incidents is called incident management.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Unfortunately this reads as the opposite of the prior definition, stating that IM encompasses the technical steps of identifying and analyzing the incident, as well as the “response” which implies the repair/remediation.&lt;/p&gt;

&lt;p&gt;Just another couple Google results down the page finds a post from &lt;a href="https://www.educause.edu/focus-areas-and-initiatives/policy-and-security/cybersecurity-program/resources/information-security-guide/incident-management-and-response"&gt;Educause&lt;/a&gt;. Here, they say they are the same thing:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Information security incident management programs (sometimes also called information security incident response programs)…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Irrespective of your definition, it’s important to define a clear incident response process with repeatable consistent steps to be followed in the case of an outage.&lt;/p&gt;

&lt;p&gt;Fylamynt can help with the world’s first enterprise ready low code platform for building, running and analyzing SRE cloud workflows. With Fylamynt an SRE can automate the parts of the runbook that are the most time consuming, allowing them to make decisions where their expertise is needed.&lt;/p&gt;

&lt;p&gt;For good practices around IR and IM, take a look at our article &lt;a href="https://www.fylamynt.com/post/what-is-a-runbook"&gt;What’s a Runbook?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://fylamynt.com/"&gt;Try Fylamynt for free -&amp;gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>sre</category>
      <category>devops</category>
      <category>cloudnative</category>
      <category>cloudskills</category>
    </item>
    <item>
      <title>creating Modal with HTML, CSS and JavaScript</title>
      <author>Pierre Oliveira</author>
      <pubDate>Mon, 01 Nov 2021 20:52:48 +0000</pubDate>
      <link>https://dev.to/pierreoliveira1/creating-modal-with-html-css-and-javascript-1gg9</link>
      <guid>https://dev.to/pierreoliveira1/creating-modal-with-html-css-and-javascript-1gg9</guid>
      <description>&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/pierreoliveira1/embed/gOxXpdG?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>A Beginner's Guide to Organizing Blade Templates in Laravel </title>
      <author>Kingsley Ubah</author>
      <pubDate>Mon, 01 Nov 2021 20:24:46 +0000</pubDate>
      <link>https://dev.to/ubahthebuilder/a-beginners-guide-to-organizing-blade-templates-in-laravel-2e3b</link>
      <guid>https://dev.to/ubahthebuilder/a-beginners-guide-to-organizing-blade-templates-in-laravel-2e3b</guid>
      <description>&lt;p&gt;Laravel is a PHP-based web framework which follows the Model-View-Controller (MVC) architecture. &lt;/p&gt;

&lt;p&gt;A core part of the MVC trilogy is &lt;strong&gt;View&lt;/strong&gt;. All of the UI markup which a user sees and interacts with on the web browser goes into the views folder, which automatically gets created when a Laravel project is initialized. &lt;/p&gt;

&lt;p&gt;The view can be built using blade templates. Blade is a  &lt;a href="https://laravel.com/docs/8.x/blade"&gt;templating language&lt;/a&gt;  which Laravel uses by default to create the HTML layout of the website.&lt;/p&gt;

&lt;p&gt;There are certain best practises to adhere to when building the markup for your full-stack website in Laravel. These are especially important to follow if you are building a site which comprises of many pages and UI functionalities.&lt;/p&gt;

&lt;p&gt;In this article, we are going to take a look at the several ways which we can structure our templates so that they are more clean, lean and readable.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#organize-your-views-in-folders"&gt;
  &lt;/a&gt;
  Organize your views in folders
&lt;/h3&gt;

&lt;p&gt;A recommended approach is organizing views into folders. Using folders leads to a cleaner codebase, especially for big websites. For example, suppose you have a website with 5 main pages like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/home&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/faqs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/about&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/blog&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/contact&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some of these pages might have other subpages. &lt;/p&gt;

&lt;p&gt;For example, the Blog page may have other subpages to &lt;strong&gt;create&lt;/strong&gt;, &lt;strong&gt;delete&lt;/strong&gt; and &lt;strong&gt;update&lt;/strong&gt; a blog post. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;create&lt;/code&gt; page will consist a form for submitting a blog post. The &lt;code&gt;delete&lt;/code&gt; page might contain a single post with a confirmation question of whether you want to delete that post. The &lt;code&gt;update&lt;/code&gt; view might return a form with the body of a post already passed in. &lt;/p&gt;

&lt;p&gt;This means that the blog page will be composed of the following views:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#indexbladephp"&gt;
  &lt;/a&gt;
  index.blade.php
&lt;/h4&gt;

&lt;p&gt;To show list of blog posts&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#createbladephp"&gt;
  &lt;/a&gt;
  create.blade.php
&lt;/h4&gt;

&lt;p&gt;A form to create and post a new blog post&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#editbladephp"&gt;
  &lt;/a&gt;
  edit.blade.php
&lt;/h4&gt;

&lt;p&gt;A form to edit and update a existing blog post&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#singlebladephp"&gt;
  &lt;/a&gt;
  single.blade.php
&lt;/h4&gt;

&lt;p&gt;A page showing a single blog post&lt;/p&gt;

&lt;p&gt;A very clean way to organise this is to create separate folders for each page. Then store the views in their respective folders , like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="err"&gt;└──&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;

    &lt;span class="err"&gt;└──&lt;/span&gt; &lt;span class="n"&gt;about&lt;/span&gt; &lt;span class="c1"&gt;// About views&lt;/span&gt;

    &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;blade&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;php&lt;/span&gt; &lt;span class="c1"&gt;// homepage for /about&lt;/span&gt;

    &lt;span class="err"&gt;└──&lt;/span&gt; &lt;span class="n"&gt;faqs&lt;/span&gt; &lt;span class="c1"&gt;// FAQ views&lt;/span&gt;

    &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;blade&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;php&lt;/span&gt; &lt;span class="c1"&gt;// homepage for /faqs&lt;/span&gt;

    &lt;span class="err"&gt;└──&lt;/span&gt; &lt;span class="n"&gt;blog&lt;/span&gt; &lt;span class="c1"&gt;// Blog views&lt;/span&gt;

        &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;blade&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;php&lt;/span&gt; 

        &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;blade&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;php&lt;/span&gt; 

        &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;edit&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;blade&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;php&lt;/span&gt; 

        &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;single&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;blade&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;php&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then from the controllers, you can return each of these views in a consistent manner:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;app/Http/Controllers/FaqController.php&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FaqController&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Controller&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'faq.index'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;app/Http/Controllers/AboutController.php&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AboutController&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Controller&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'about.index'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;app/Http/Controllers/BlogController.php&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BlogController&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Controller&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// get blog posts from database&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'blog.index'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;compact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'blogs'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;


    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'blog.create'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;


    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Request&lt;/span&gt; &lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;// validate request &lt;/span&gt;

        &lt;span class="c1"&gt;// add blog post to blog table for user&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;back&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;withMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Post Created!'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;


    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Blog&lt;/span&gt; &lt;span class="nv"&gt;$blog&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'blog.single'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;compact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'blog'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;


    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;edit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Blog&lt;/span&gt; &lt;span class="nv"&gt;$blog&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'blog.edit'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;compact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'blog'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;


    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Request&lt;/span&gt; &lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Blog&lt;/span&gt; &lt;span class="nv"&gt;$blog&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;// validate form data&lt;/span&gt;

       &lt;span class="c1"&gt;// update current post&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'blog.show'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$blog&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;


    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;destroy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Blog&lt;/span&gt; &lt;span class="nv"&gt;$blog&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;// authenticate&lt;/span&gt;

        &lt;span class="nv"&gt;$blog&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'blog.index'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don't worry too much about the code.&lt;/p&gt;

&lt;p&gt;Instead focus on what we are returning inside in &lt;code&gt;view()&lt;/code&gt;. You can notice the consistency (they all have their folder names). All view files are categorized based on the name of the page. &lt;/p&gt;

&lt;p&gt;That way, all you need to do in the controller is pass in the view’s name preceded by the folder name.&lt;/p&gt;

&lt;p&gt;This simplifies the whole process and makes it more intuitive to understand.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#extending-layouts"&gt;
  &lt;/a&gt;
  Extending layouts
&lt;/h3&gt;

&lt;p&gt;Sometimes, in your Laravel application, you might be required to share certain UI elements and UI styling across many pages. This is easily achieved with a layout file. &lt;/p&gt;

&lt;p&gt;Inside this file, you can define the elements which you want to share across multiple pages. A good example of this are the navigation menu and the footer section.&lt;/p&gt;

&lt;p&gt;By default, Laravel ships with &lt;code&gt;welcome.blade.php&lt;/code&gt; as the default layout file. &lt;/p&gt;

&lt;p&gt;It is better to create a standalone folder for all layouts. So we can move &lt;code&gt;welcome.blade.php&lt;/code&gt; into the layouts folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="err"&gt;└──&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;

    &lt;span class="err"&gt;└──&lt;/span&gt; &lt;span class="n"&gt;layouts&lt;/span&gt; 

    &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;welcome&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;blade&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;php&lt;/span&gt; &lt;span class="c1"&gt;// layout page&lt;/span&gt;

    &lt;span class="c1"&gt;// ... Other layouts go inside the layouts folder&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside this file, we define the layouts (Navbar, Footer, Sidebar), and then yield a section of the page to other pages using the &lt;code&gt;@yield&lt;/code&gt; statement:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;views/layouts/welcome.blade.php&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"contain"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"navbar"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Navigation&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"sidebar"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                 &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Sidebar&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt; @yield('heading') &lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;

            @yield('content')
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"footer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Footer&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then from inside the other pages, we can extend the layouts and supply the (unique) content section, like in the following pages:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;views/about/index.blade.php&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="k"&gt;extends&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'layouts.welcome'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nf"&gt;section&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'content'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nc"&gt;This&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;about&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;endsection&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nf"&gt;section&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'heading'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"About Me"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;views/about/index.blade.php&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="k"&gt;extends&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'layouts.welcome'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nf"&gt;section&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'content'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nc"&gt;This&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="no"&gt;FAQ&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;endsection&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nf"&gt;section&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'heading'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Frequently Asked Questions"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the layouts will persist across all three pages:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0oO_g1MF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635770406381/qBRqnLn5zN.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0oO_g1MF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635770406381/qBRqnLn5zN.png" alt="FAQ page" width="880" height="438"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oxW9zUrp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635770425757/J6ZXrnoAV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oxW9zUrp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635770425757/J6ZXrnoAV.png" alt="About page" width="880" height="409"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, certain pages might not require the layouts. For example, we might not want to extend the Navbar and Sidebar for  the &lt;code&gt;login&lt;/code&gt; and &lt;code&gt;register&lt;/code&gt; pages. Instead, we only want the footer.&lt;/p&gt;

&lt;p&gt;For auth-related pages, we can create a separate layout file which contains just the footer. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;views/layouts/auth.blade.php&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"contain"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt; @yield('heading') &lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

                @yield('content')
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"footer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Footer&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we can extend that layout from our auth views:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;views/auth/login.blade.php&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="k"&gt;extends&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'layouts.auth'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nf"&gt;section&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'content'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nc"&gt;This&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="nc"&gt;Login&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nc"&gt;This&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;the&lt;/span&gt; &lt;span class="n"&gt;auth&lt;/span&gt; &lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;endsection&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nf"&gt;section&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'heading'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Login"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And this is how the login page will look like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qgn8LC3A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635770941603/rnmHThU4t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qgn8LC3A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635770941603/rnmHThU4t.png" alt="Login page" width="880" height="445"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Notice how the auth-related pages were grouped inside the auth folder.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#creating-modular-and-reusable-ui-components-with-partials"&gt;
  &lt;/a&gt;
  Creating modular and reusable UI components with partials
&lt;/h3&gt;

&lt;p&gt;We can take on a more modular approach when building views. This is highly useful when creating a piece of UI or functionality which you intend to reuse across multiple sections and pages.&lt;/p&gt;

&lt;p&gt;Some examples of this are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A navigation menu&lt;/li&gt;
&lt;li&gt;A form which you want to reuse for creating a blog post and updating a blog post.&lt;/li&gt;
&lt;li&gt;A  modal UI which you want to reuse in different places&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Partials are essentially UI modules which can be included in any page. If you are from a React background, you can think of it as &lt;strong&gt;UI components&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;We will refactor the layout file (welcome.blade.php) by moving the Navigation section, Sidebar and Footer section into separate partials:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;views/partials/navbar.blade.php&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"navbar"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Navigation&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;views/partials/sidebar.blade.php&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"sidebar"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Sidebar&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;views/partials/footer.blade.php&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"footer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Footer&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we will include the partials in the layout:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;views/layouts/welcome.blade.php&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"contain"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        @include('layouts.partials.navbar')

        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        @include('layouts.partials.sidebar')

        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt; @yield('heading') &lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;

            @yield('content')
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            @include('layouts.partials.footer')
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This reduces the amount of code we write in the layout file. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;The views folder is one of the most important parts of the Laravel framework,  and is also an important part of the MVC trilogy.&lt;/p&gt;

&lt;p&gt;Properly organizing your view templates doesn’t just make the code more understandable to yourself, but also to your fellow developer colleagues.&lt;/p&gt;

&lt;p&gt;In this article we saw different ways to organize views in Laravel. This included folder-based organization, proper use of layouts and breaking down the UI into reusable partials.&lt;/p&gt;

&lt;p&gt;Thanks for reading along. &lt;/p&gt;

&lt;p&gt;You can also find me on  &lt;a href="https://twitter.com/UbahTheBuilder"&gt;Twitter &lt;/a&gt;. &lt;/p&gt;

</description>
      <category>laravel</category>
      <category>php</category>
      <category>codequality</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Basic Express Server Using Replit.com</title>
      <author>SandraRodgers</author>
      <pubDate>Mon, 01 Nov 2021 20:17:14 +0000</pubDate>
      <link>https://dev.to/sandrarodgers/basic-express-server-using-replitcom-2ba9</link>
      <guid>https://dev.to/sandrarodgers/basic-express-server-using-replitcom-2ba9</guid>
      <description>&lt;p&gt;In this post, I will introduce how to set up the most basic Express server in Node.JS, and how to see that your server is ready to accept requests. We will also use &lt;a href="//codepen.io"&gt;CodePen&lt;/a&gt; to write a fetch GET request to your server so you can see a basic request and response from a frontend (built with CodePen) to a backend (built with Replit).&lt;/p&gt;

&lt;p&gt;Replit.com and Codepen.io are tools I use all the time when I want to test some code or play around with something. If you want to practice writing HTTP requests, this is a great way to get you set up to do that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#set-up-your-express-server"&gt;
  &lt;/a&gt;
  Set up your Express server
&lt;/h2&gt;

&lt;p&gt;Go to &lt;a href="https://replit.com"&gt;Replit&lt;/a&gt;. Click on the &lt;strong&gt;Create Repl&lt;/strong&gt; button. Search templates for Node.js. Replit will assign a random name to your repl but you can change it to whatever makes sense to you.&lt;/p&gt;

&lt;p&gt;Now we will set up the Express server.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You can use Node.JS by itself to create a server, but the Node.JS Express framework provides an easier way to quickly set one up. If you really want to see how to build a Node server without using Express, take a look at this page on &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/Server-side/Node_server_without_framework"&gt;MDN&lt;/a&gt;.&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;First, we must require the framework Express and run the express application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require('express');
const app = express();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;In Replit, if you use the&lt;/em&gt; &lt;code&gt;require('express')&lt;/code&gt; &lt;em&gt;syntax, it will auto-install express for you. Otherwise, you can type&lt;/em&gt; &lt;strong&gt;&lt;em&gt;npm install express&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;in the shell.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In order to enable CORS and to avoid getting a CORS error, we can install the Express CORS middleware package. We will have to place it before we call the express() method, so your file should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require('express');
const cors = require('cors');
const app = express();

app.use(cors());
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The final step to setting up an Express server is to make your server listen for connections on a given path. We will create a port and use the listen() method to listen for connections. You can use any number between 1 and 65535, but &lt;a href="https://computer.howstuffworks.com/web-server8.htm"&gt;the traditional port number for web servers is 80&lt;/a&gt;. Use whatever you want.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const port = 8080;
app.listen(port, () =&amp;gt; {
  console.log(`Example app listening at http://localhost:${port}`);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lastly, we will set up an endpoint to respond to GET requests:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.get('/', (req, res) =&amp;gt; {
  res.json('Hello World')
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This endpoint includes &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;an instance of Express (&lt;code&gt;app&lt;/code&gt;) &lt;/li&gt;
&lt;li&gt;the HTTP request method (in this case, &lt;code&gt;get&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;a path (&lt;code&gt;'/'&lt;/code&gt;) &lt;/li&gt;
&lt;li&gt;a function to handle the request. That function will take in the request and it will respond by sending a message back to the client (frontend). Read more at &lt;a href="http://expressjs.com/en/starter/basic-routing.html"&gt;expressjs.com&lt;/a&gt; to learn about basic routing.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is our server:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require('express');
const cors = require('cors');
const app = express();
const port = 8080;

app.use(cors());

app.get('/', (req, res) =&amp;gt; {
  res.json('Hello World')
});

app.listen(port, () =&amp;gt; {
  console.log(`Example app listening at http://localhost:${port}`);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure you click the big button at the top of the repl that says &lt;strong&gt;Run&lt;/strong&gt; to start up your server. If you want to see my actual repl, it's &lt;a href="https://replit.com/@SandraR/Basic-Express-Server#index.js"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#set-up-your-frontend-at-codepen"&gt;
  &lt;/a&gt;
  Set up your Frontend at CodePen
&lt;/h2&gt;

&lt;p&gt;Now, we want to create a frontend so we can have the frontend client make a request to the backend server we just built. And we want to see the response on the front end.&lt;/p&gt;

&lt;p&gt;Go to &lt;a href="//codepen.io"&gt;CodePen&lt;/a&gt; and create a new 'pen'. Here is my &lt;a href="https://codepen.io/sandrarodgers/pen/VwzrZPe"&gt;pen&lt;/a&gt; for this article if you need an example.&lt;/p&gt;

&lt;p&gt;In the Javascript section of the pen, we will use the &lt;code&gt;fetch()&lt;/code&gt; method to write a request to our server to fetch the message (the message we set up our &lt;code&gt;get&lt;/code&gt; endpoint to send back - 'Hello World'). &lt;/p&gt;

&lt;p&gt;&lt;em&gt;The &lt;code&gt;fetch()&lt;/code&gt; method comes from the Fetch API, which is a client-side browser API. It is not actually part of the Javascript language itself, but is one of the many APIs that is built into the web browser and sits on top of the Javascript language. Read more at &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Introduction"&gt;MDN&lt;/a&gt; to learn about the awesomeness that is the browser Web APIs.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A basic fetch request will include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the &lt;code&gt;fetch()&lt;/code&gt; method&lt;/li&gt;
&lt;li&gt;the endpoint URL (the path to the resource we want to fetch). The path includes the url + the path we put in our endpoint, which was '/'.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fetch('https://basic-express-server.sandrar.repl.co/')
    .then(response =&amp;gt; response.json())
    .then(data =&amp;gt; {console.log(data)})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;To create a url to reach your server on Replit.com, use the structure: /[repl-name].[username].repl.co/&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Calling the fetch method with the endpoint url returns a promise, so we can use the Javascript &lt;code&gt;.then()&lt;/code&gt; to wait for the response. Inside the callback of the &lt;code&gt;.then()&lt;/code&gt;, we will deal with the response:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    .then(response =&amp;gt; response.json())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We want to take the JSON content from the response object that is sent back. So we use the &lt;code&gt;json()&lt;/code&gt; method on the response. That &lt;code&gt;json()&lt;/code&gt; method also returns a promise.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    .then(data =&amp;gt; {console.log(data)})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So we use .&lt;code&gt;then()&lt;/code&gt; again, and in the second .then() we now have the response parsed into JSON that we can read, so we console.log that parsed response.&lt;/p&gt;

&lt;p&gt;Then we must open the console to read it. Look for a small button in CodePen that says 'console' and click on it to open the nifty CodePen console. Or you can just open your devtools and check in there. You should see&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Hello World&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And that's it! We see that we have correctly built a server with an endpoint. We can make a request to that endpoint and get back the response that we expect.&lt;/p&gt;

&lt;p&gt;I hope this was helpful to you!&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>fetch</category>
      <category>http</category>
    </item>
    <item>
      <title>What is application-level encryption and why it’s not TLS </title>
      <author>Cossack Labs</author>
      <pubDate>Mon, 01 Nov 2021 20:11:45 +0000</pubDate>
      <link>https://dev.to/cossacklabs/what-is-application-level-encryption-and-why-its-not-tls-49hb</link>
      <guid>https://dev.to/cossacklabs/what-is-application-level-encryption-and-why-its-not-tls-49hb</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Сheck this out to protect your apps’ data like a pro 💎.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, the situation is quite pragmatic: Alice wants to ensure no one eavesdrops on her love messages 🕊️ to Bob. In this video by &lt;a class="mentioned-user" href="https://dev.to/vixentael"&gt;@vixentael&lt;/a&gt;
, you can see the difference between &lt;a href="https://www.infoq.com/articles/ale-software-architects/"&gt;application-level encryption (ALE)&lt;/a&gt; and transport layer security (TLS). Let’s talk about their use cases.&lt;/p&gt;




&lt;p&gt;Both ALE and TLS are ways to protect data between applications by encrypting it. The difference lies in where and who encrypts/decrypts the data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The main thing about ALE is that encryption is done on application-level—inside your application, inside your code.&lt;/strong&gt; You write a code on how to encrypt and decrypt the data, you decide which cypher to use, where to get the encryption key, and send the data encrypted from your app. &lt;/p&gt;

&lt;p&gt;Imagine Alice sends a JSON love message. Using ALE, you can encrypt the whole JSON or only a particular field, like “message” in this example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Oo2jF4ZG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xrac0q2wq5tu5zfxl2is.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Oo2jF4ZG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xrac0q2wq5tu5zfxl2is.png" alt="Example JSON message"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;No matter which underlying transport and/or at-rest encryption are used, your data is encrypted within the application, as long as you choose it. So, &lt;strong&gt;with ALE, Alice’s messages are protected within the app context&lt;/strong&gt; from Eve—from physical disk access risks, leakage through logs, snapshots, and automated backups. 😌&lt;/p&gt;

&lt;p&gt;Now, let’s have a closer look at TLS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TLS protects data from eavesdropping between servers&lt;/strong&gt; (like leakage and tampering of network traffic on the internet) and adds authentication for node-to-node links if you set it up correctly. All websites use TLS, and most mobile &amp;amp; desktop applications do too. As a developer, you often don’t need to do anything inside your applications to support TLS, only to generate TLS certificates for their server’s domain name.&lt;/p&gt;

&lt;p&gt;But at the same time, &lt;strong&gt;TLS protects messages only during network transmission.&lt;/strong&gt; Before and after—messages are not protected.&lt;/p&gt;

&lt;p&gt;Thus, if Alice uses TLS to encrypt messages to Bob, and Eve has physical access to Alice’s or Bob’s computer or logs—she can read their messages. &lt;strong&gt;TLS protection does not cover such security events as&lt;/strong&gt; physical access to servers, privileged DB access, as well as backups, logs, and snapshot issues. 😕🕳️ See the table below. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dZM21zyf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t2jo0dc1l7wqnl1p5k33.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dZM21zyf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t2jo0dc1l7wqnl1p5k33.jpg" alt="Compare TS and ALE controls"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Does Alice need to use ALE all the time? It depends, it depends. Use TLS by default, and add ALE when data is sensitive, and you can improve your application with some cryptographic code. &lt;strong&gt;To choose ALE/TLS more smartly, we need to consider threat models relevant to the case.&lt;/strong&gt; 🤔&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;TLS protects data in transit but won’t help against insiders with access to the database. When insiders and APTs are realistic threat vectors, ALE becomes more relevant. And what’s essential—&lt;strong&gt;ALE provides many security guarantees in one shot.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;To learn more about ALE, dive into &lt;a href="https://www.infoq.com/articles/ale-software-architects/"&gt;Application Level Encryption for Software Architects&lt;/a&gt; article by &lt;a href="https://www.linkedin.com/in/eugene-pilyankevich-59a31655/"&gt;Eugene Pilyankevich&lt;/a&gt; or watch &lt;a href="https://twitter.com/vixentael"&gt;@Anastasiia Voitova&lt;/a&gt; explaining why &lt;a href="https://youtu.be/CqsrA4eeGSs"&gt;End-to-end encrypted doesn't mean secure&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;And you’re always welcome to follow &lt;a class="mentioned-user" href="https://dev.to/cossacklabs"&gt;@cossacklabs&lt;/a&gt;
 for data security updates on &lt;a href="https://twitter.com/cossacklabs"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.youtube.com/channel/UCQbAyrwHKJ8QRDTOHs90O0g"&gt;YouTube&lt;/a&gt;, &lt;a href="https://www.linkedin.com/company/cossack-labs/"&gt;LinkedIn&lt;/a&gt;, &lt;a href="https://github.com/cossacklabs"&gt;GitHub&lt;/a&gt;, and &lt;a href="https://www.cossacklabs.com/"&gt;website&lt;/a&gt;. 👋🧡🔐&lt;/p&gt;

</description>
    </item>
    <item>
      <title>!!null = false: How to evaluate any expression to a boolean</title>
      <author>npm run dev</author>
      <pubDate>Mon, 01 Nov 2021 20:04:30 +0000</pubDate>
      <link>https://dev.to/npmrundev/null-false-how-to-evaluate-any-expression-to-a-boolean-2m2</link>
      <guid>https://dev.to/npmrundev/null-false-how-to-evaluate-any-expression-to-a-boolean-2m2</guid>
      <description>&lt;p&gt;Here is a quick trick that I've been enjoying quite a bit. I'll start with this expression as an example of the problem:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (x !== undefined &amp;amp;&amp;amp; x !== null &amp;amp;&amp;amp; x !== "" &amp;amp;&amp;amp; x !== 0) {
  // do something
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you've spent any time with JavaScript, and especially with React, you will probably have written something similar to this. Being a &lt;a href="https://flaviocopes.com/loosely-strongly-typed/" rel="noreferrer noopener"&gt;loosely typed&lt;/a&gt; language, it's often necessary to check for multiple 'falsey' types to avoid errors. &lt;/p&gt;

&lt;p&gt;There's nothing inherently wrong with it, but it's quite wordy. In my opinion, long expressions like this make it harder to parse through a file and understand what's going on. I'm a big advocate for making code as human-readable as possible, so using multiple lines to express just one thing is a big no-no for me.&lt;/p&gt;

&lt;p&gt;However, there is a better option!&lt;/p&gt;

&lt;p&gt;A while ago I discovered that alongside being able to invert an expression using the &lt;code&gt;NOT&lt;/code&gt; &lt;code&gt;!&lt;/code&gt; operator, it's also possible to chain more than one of these together. This means you can evaluate any variable or expression to a boolean, so you can check if something exists using just 2 characters even if that thing could appear as multiple types.&lt;/p&gt;

&lt;p&gt;Here's an example in React:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{!!props.heading &amp;amp;&amp;amp; (
  &amp;lt;h2&amp;gt;{ props.heading }&amp;lt;/h2&amp;gt;
)}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this scenario, props.heading could appear as &lt;code&gt;undefined&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;, OR it could appear as an empty string &lt;code&gt;""&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The main problem this trick solves is that &lt;code&gt;null&lt;/code&gt; doesn't actually evaluate to &lt;code&gt;false&lt;/code&gt; on it's own: it's a unique and slightly irritating type that can cause all sorts of problems in JavaScript. Using the double &lt;code&gt;NOT&lt;/code&gt; operator &lt;code&gt;!!&lt;/code&gt; fixes this issue and avoids the need for additional expressions to check for other falsey cases.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// this wordy expression
(x !== undefined &amp;amp;&amp;amp; x !== null &amp;amp;&amp;amp; x !== "" &amp;amp;&amp;amp; x !== 0)

// can be reduced down to this!
!!x&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It's also, in my opinion, much easier to read. If I see two exclamation marks before a variable or expression, I know it's definitely checking if the variable exists. I prefer this over simply writing, &lt;code&gt;{ props.heading &amp;amp;&amp;amp; (&amp;lt;&amp;gt;...&amp;lt;/&amp;gt;) }&lt;/code&gt; because with the latter example props.heading could be &lt;code&gt;null&lt;/code&gt;, which doesn't immediately evaluate to &lt;code&gt;false&lt;/code&gt;, or the string could be empty, which doesn't evaluate to &lt;code&gt;false&lt;/code&gt; either. This extra step ensures the data is actually useful for something before moving on while communicating to the developer that this is the intention of the expression.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// null exists in a world of its own

null === false // false
null === true // false

'' === false // false&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;When to avoid the double NOT operator&lt;/h2&gt;

&lt;p&gt;As useful as this little trick is, you should avoid it when working with numbers. This is because the number &lt;code&gt;0&lt;/code&gt; is inherently falsey. If you're checking if the number exists, and it does exist but the number is &lt;code&gt;0&lt;/code&gt;, it will think that the number doesn't exist. This might be what you want in some situations, but it's good to be aware of. &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>react</category>
      <category>css</category>
    </item>
    <item>
      <title>Congrats on an Inspiring Hacktoberfest 2021 🎃 </title>
      <author>Christina Gorton</author>
      <pubDate>Mon, 01 Nov 2021 19:51:22 +0000</pubDate>
      <link>https://dev.to/devteam/congrats-on-an-inspiring-hacktoberfest-2021-3e14</link>
      <guid>https://dev.to/devteam/congrats-on-an-inspiring-hacktoberfest-2021-3e14</guid>
      <description>&lt;p&gt;Another fantastic Hacktoberfest is in the books! We hope everyone who participated learned something about open source, global collaboration, and themselves in the process. &lt;em&gt;Scroll to the &lt;strong&gt;Hacktoberfest on DEV&lt;/strong&gt; section for important info about getting your Hacktoberfest participation profile badge.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Thank you to &lt;a href="https://dev.to/digitalocean"&gt;DigitalOcean&lt;/a&gt; for hosting Hacktoberfest for another year in a row and making the event as inclusive as possible ❤️  &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#the-impact-of-open-source"&gt;
  &lt;/a&gt;
  The Impact of Open Source
&lt;/h3&gt;

&lt;p&gt;The health of open source software is tremendously important — not only to the tech community but in the wider world as well. A well-functioning OSS ecosystem means greater neutrality, accessibility, and collaboration within the most powerful software system on earth. Sustaining this health depends on the hard work and participation of contributors and maintainers alike. Isn't it incredible that all of us can participate in this process? &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hacktoberfest-on-dev-stories-and-badges"&gt;
  &lt;/a&gt;
  Hacktoberfest on DEV: Stories and Badges
&lt;/h3&gt;

&lt;p&gt;Throughout the month, we encouraged all participants to document their journeys right here on DEV. I encourage you to &lt;a href="https://dev.to/t/hacktoberfest"&gt;browse the stories&lt;/a&gt; people shared about their Hacktoberfest experiences when you get the chance. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#we-will-also-be-awarding-limitededition-dev-profile-badges-to-all-registered-hacktoberfest-participants-who-completed-the-challenge-you-were-sent-instructions-in-an-email-via-digitalocean-following-registration-but-heres-a-refresher"&gt;
  &lt;/a&gt;
  We will also be awarding limited-edition DEV profile badges to all registered Hacktoberfest participants who completed the challenge. You were sent instructions in an email via DigitalOcean following registration, but here's a refresher...
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Add &lt;a href="https://shop.dev.to/products/dev-hacktoberfest-badge?variant=39635848101997"&gt;this item&lt;/a&gt; to your cart in the DEV Shop.&lt;/li&gt;
&lt;li&gt;At checkout, click, &lt;code&gt;Add a discount code or a gift card&lt;/code&gt; under "Order Summary" and enter the coupon code included in your email from DigitalOcean. &lt;/li&gt;
&lt;li&gt;In a few days, the DEV team will be awarding badges. Thanks for your patience!&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Important: November 30, 2021 is the deadline to request your badge. We will not be awarding any other badges following that date.&lt;/strong&gt; &lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-to-our-contributors"&gt;
  &lt;/a&gt;
  Thank You to Our Contributors
&lt;/h3&gt;

&lt;p&gt;This year during Hacktoberfest, the Forem repository saw &lt;strong&gt;49 pull requests merged&lt;/strong&gt;! This is a huge accomplishment on all sides 🌱 &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#a-huge-thank-you-to-our-second-round-of-contributors-to-the-forem-codebase"&gt;
  &lt;/a&gt;
  A huge thank you to our second round of contributors to the Forem codebase:
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;General Bugs&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://github.com/forem/forem/pull/15000"&gt;Fix hamburger menu scrolling&lt;/a&gt;&lt;/strong&gt; by &lt;a href="https://github.com/takmar"&gt;takmar&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://github.com/forem/forem/pull/15132"&gt;Add Article post_commit when user_id changes with specs&lt;/a&gt;&lt;/strong&gt; by &lt;a href="https://github.com/lsparlin"&gt;lsparlin&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://github.com/forem/forem/pull/15206"&gt;Edit tweet intent URL&lt;/a&gt;&lt;/strong&gt; by &lt;a href="https://github.com/thomasbnt"&gt;thomasbnt&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Documentation&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://github.com/forem/forem/pull/15218"&gt;Removed extra space in code of conduct&lt;/a&gt;&lt;/strong&gt; by &lt;a href="https://github.com/supzi-del"&gt;supzi-del&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Internationalization&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;&lt;a href="https://github.com/forem/forem/pull/15154"&gt;locales/views/editor - added FR translation&lt;/a&gt;&lt;/strong&gt; by &lt;a href="https://github.com/KrystalJean"&gt;KrystalJean&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I18n PRs by &lt;a href="https://github.com/yheuhtozr"&gt;yheuhtozr&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/forem/forem/pull/15019"&gt;views/collections i18n&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/forem/forem/pull/15056"&gt;views/notifications i18n&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/forem/forem/pull/15020"&gt;views/podcasts, views/podcast_episodes i18n&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/forem/forem/pull/15070"&gt;article editor and manager i18n&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/forem/forem/pull/15060"&gt;views/liquids i18n&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/forem/forem/pull/15068"&gt;views/moderations i18n&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/forem/forem/pull/15021"&gt;views/badges etc i18n&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/forem/forem/pull/15039"&gt;views/tags etc i18n&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/forem/forem/pull/15041"&gt;views/reading_list_items i18n&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/forem/forem/pull/15042"&gt;I18nize organizations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/forem/forem/pull/15078"&gt;I18nize users (non-settings) &amp;amp; logo designer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/forem/forem/pull/15097"&gt;I18nize articles &amp;amp; social_previews&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/forem/forem/pull/15038"&gt;views/feedback_messages i18n&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/forem/forem/pull/15040"&gt;views/listings etc i18n&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/forem/forem/pull/15059"&gt;views/comments i18n&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/forem/forem/pull/15058"&gt;actions and reactions i18n&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/forem/forem/pull/15154"&gt;locales/views/editor - added FR translation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;We also gave some shoutouts to our _first&lt;/em&gt; round of Forem contributors in &lt;a href="https://dev.to/devteam/hacktoberfest-check-in-forem-contributor-spotlight-4l6j"&gt;this post&lt;/a&gt; a few weeks back. Check it out!_&lt;/p&gt;




&lt;p&gt;A very happy Hacktoberfest 2021 to one and all 🎉 Thank you for letting us follow along as you submitted PRs, shared your stories, and provided guidance as a maintainer, etc. Until next year 🎃 &lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;

</description>
      <category>hacktoberfest</category>
      <category>opensource</category>
      <category>meta</category>
      <category>digitalocean</category>
    </item>
    <item>
      <title>Post title</title>
      <author>Abdelrahman Bayoumi</author>
      <pubDate>Mon, 01 Nov 2021 19:44:39 +0000</pubDate>
      <link>https://dev.to/abdelrahmanbayoumi/post-title-52m</link>
      <guid>https://dev.to/abdelrahmanbayoumi/post-title-52m</guid>
      <description>&lt;p&gt;Hello world 🌍&lt;br&gt;
Test&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Hacktober 2021 results</title>
      <author>Vadim Smirnov</author>
      <pubDate>Mon, 01 Nov 2021 19:19:40 +0000</pubDate>
      <link>https://dev.to/medusajs/hacktober-2021-results-oi9</link>
      <guid>https://dev.to/medusajs/hacktober-2021-results-oi9</guid>
      <description>&lt;p&gt;With Hacktober coming to an end, we would like to take a moment to appreciate the overwhelming support and contributions we've seen the past month. It was our debut in this year's fest, and we feel like we've kicked the door in with our powerful community.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hacktober-2021-community-achievements"&gt;
  &lt;/a&gt;
  Hacktober 2021 community achievements
&lt;/h2&gt;

&lt;p&gt;We are incredibly humbled by the participation of so many new and existing community members over this past month. As a young company, it is incredible to see how old, more experienced community members helped guide new ones getting started while others teamed up to find solutions and helped extend the plugin suite of Medusa.&lt;/p&gt;

&lt;p&gt;In the end, the effort led to the production of almost 100 pull requests and three new plugins. Likewise, many new developers joined our community, and we are excited to see you build more with Medusa in the future.&lt;/p&gt;

&lt;p&gt;A quick glimpse of the results achieved during this October:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;~100% new Discord members&lt;/li&gt;
&lt;li&gt;64 merged pull requests&lt;/li&gt;
&lt;li&gt;21 pull requests in review&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Plugins in development:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Strapi&lt;/li&gt;
&lt;li&gt;Algolia&lt;/li&gt;
&lt;li&gt;Elastic&lt;/li&gt;
&lt;li&gt;ShipBob&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We are grateful for all your contributions!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#time-to-give-back"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Time to give back&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Swag.&lt;/strong&gt; As described in the &lt;a href="https://dev.to/medusajs/medusa-hacktoberfest-2021-13eb"&gt;Hacktoberfest announcement article&lt;/a&gt;, every contributor will receive special Medusa swag as an appreciation gift. Our small token of gratitude to all of you that took the time to participate in the Hacktober. The send-outs will happen during November - we cannot wait to send them out.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Wall of appreciation.&lt;/strong&gt; Our &lt;a href="https://www.medusa-commerce.com/"&gt;website&lt;/a&gt; will soon feature a wall of appreciation displaying all Medusa contributors. There is no fix or feature too small for this wall, so no reason to hold back if you want to see yourself in there.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Community chat.&lt;/strong&gt; At last, we wanted to invite you all to an in-person Zoom chat on Friday the 5th of November. Here we will gladly welcome everyone from our community to a chat about commerce, Medusa, and all things community-related. For more info, please follow along in our &lt;a href="https://discord.gg/F87eGuwkTp"&gt;Discord&lt;/a&gt; during the following days.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rtx8GUv4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rgs81mhjdonw81gf7v6k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rtx8GUv4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rgs81mhjdonw81gf7v6k.png" alt="Medusa merch" width="880" height="971"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#there-is-still-an-opportunity-to-be-involved-in-medusa-development"&gt;
  &lt;/a&gt;
  There is still an opportunity to be involved in Medusa development
&lt;/h3&gt;

&lt;p&gt;The opportunity to contribute and get involved in the development process of Medusa is not limited to Hacktoberfest. We will keep welcoming new community members just as we've done the past month. You can follow our &lt;a href="https://github.com/medusajs/medusa/blob/master/CONTRIBUTING.md"&gt;contribution guide&lt;/a&gt; to get started.&lt;/p&gt;

&lt;p&gt;We strive to always have issues that are up for grabs so that everyone can take part. If you have your ideas or feature requests, you can find the entire Medusa team on our &lt;a href="https://discord.gg/WCZFV5v3j4"&gt;Discord server&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hope to see you there!&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>javascript</category>
      <category>hacktoberfest</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How To Add Infinite Scrolling / Loading to Nuxt?</title>
      <author>Gerd</author>
      <pubDate>Mon, 01 Nov 2021 19:07:47 +0000</pubDate>
      <link>https://dev.to/gerd/how-to-add-infinite-scrolling-loading-to-nuxt-1p0p</link>
      <guid>https://dev.to/gerd/how-to-add-infinite-scrolling-loading-to-nuxt-1p0p</guid>
      <description>&lt;h2&gt;
  &lt;a href="#add-infinite-loading-to-your-nuxt-project-in-10-minutes"&gt;
  &lt;/a&gt;
  Add infinite loading to your Nuxt project in 10 minutes!
&lt;/h2&gt;

&lt;p&gt;Are you tired of using pagination on your site or application? Is it really the best design approach for the end user of your page or&lt;br&gt;
application?  There is an alternative that is being used more and more. It's referred to or called&lt;br&gt;
infinite scrolling or infinite loading. If your familiar with lazy loading for images this is the same&lt;br&gt;
concept except for data like a JSON return from a rest API.&lt;/p&gt;

&lt;p&gt;Infinite loading is great for sites or applications that return and display lots of data on a single page.&lt;br&gt;
Rather than using pagination where the user has to click on a number button at the bottom of the page to&lt;br&gt;
get more data results, we can implement infinite loading and do away with pagination. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#so-lets-get-started"&gt;
  &lt;/a&gt;
  So let's get started!
&lt;/h2&gt;

&lt;p&gt;At this point I'm assuming you have a Nuxt project up and running and are familiar with working in Nuxt.&lt;br&gt;
First we need to install this great  Vue plugin called Vue-Infinite-Loading.  You can find it&lt;br&gt;
here. &lt;a href="https://peachscript.github.io/vue-infinite-loading/"&gt;https://peachscript.github.io/vue-infinite-loading/&lt;/a&gt;  It has very good documentation if you need to&lt;br&gt;
configure additional options for your particular project.&lt;/p&gt;

&lt;p&gt;First we need to install the plugin via NPM or YARN, whichever your using, again I'm making the&lt;br&gt;
assumption you know how to use NPM or Yarn.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;    npm install vue-infinite-loading -S
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you have it installed, create a file called in your plugins folder and name it "infiniteloading.js". If you don't yet have a plugins folder, create one.&lt;br&gt;
Let's add the the following code to this file. Here we're importing and registering the component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;InfiniteLoading&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue-infinite-loading&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;infinite-loading&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;InfiniteLoading&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next let's open up the nuxt.config.js file.  Find the the plugins array in the file and add the following object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;~/plugins/infiniteloading&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;ssr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Well that was easy right? At this point the Infinite Loading component is set up and read to go.&lt;br&gt;
Below is an example of how you would add the component to your page or component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;infinite-loading&lt;/span&gt; &lt;span class="na"&gt;spinner=&lt;/span&gt;&lt;span class="s"&gt;"spiral"&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;infinite=&lt;/span&gt;&lt;span class="s"&gt;"infiniteScroll"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/infinite-loading&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now to test the component let's create a new page in the pages folder and call it infinite-load.vue.&lt;br&gt;
Copy and paste the following code below onto the page and save. &lt;/p&gt;

&lt;p&gt;This is an example of using the plugin to get some fake blog posts &lt;br&gt;
from jsonplaceholder.typicode.com/&lt;/p&gt;

&lt;p&gt;&lt;a href="https://jsonplaceholder.typicode.com/photos?_page="&gt;https://jsonplaceholder.typicode.com/photos?_page=&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"max-width:800px; margin:auto"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;v-for=&lt;/span&gt;&lt;span class="s"&gt;"(item, index) of items"&lt;/span&gt; &lt;span class="na"&gt;:key=&lt;/span&gt;&lt;span class="s"&gt;"index"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"background:cornflowerblue; color:#eee; border:1px solid #CCC; padding: 1.5rem; margin:.5rem 0; border-radius: 10px;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"py-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="si"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;infinite-loading&lt;/span&gt; &lt;span class="na"&gt;v-if=&lt;/span&gt;&lt;span class="s"&gt;"items.length"&lt;/span&gt; &lt;span class="na"&gt;spinner=&lt;/span&gt;&lt;span class="s"&gt;"bubbles"&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;infinite=&lt;/span&gt;&lt;span class="s"&gt;"infiniteScroll"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/infinite-loading&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;


&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Posts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
      &lt;span class="na"&gt;page&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;computed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://jsonplaceholder.typicode.com/photos?_page=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;created&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPhotos&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;

  &lt;span class="na"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;getPhot0s&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="c1"&gt;//console.log(this.items)&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;infiniteScroll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// next page&lt;/span&gt;
        &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// check if any left&lt;/span&gt;
                  &lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// push it into the items array so we can display the data&lt;/span&gt;
                  &lt;span class="nx"&gt;$state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loaded&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                  &lt;span class="nx"&gt;$state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;complete&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;})&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then navigate to the page in your browser and you should see...&lt;/p&gt;

&lt;p&gt;(&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UFyD_LiA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9duxt3i6y3pgg5c15jf2.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UFyD_LiA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9duxt3i6y3pgg5c15jf2.PNG" alt="Bada Boom Bada Bing!" width="828" height="474"&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thats-it-were-done"&gt;
  &lt;/a&gt;
  That's it! Were done.
&lt;/h2&gt;

&lt;p&gt;Obviously you will want to modify the code a bit to match up with the API for your project.&lt;/p&gt;

&lt;p&gt;Hopefully this gets you on the right path.&lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;

</description>
      <category>nuxt</category>
    </item>
    <item>
      <title>Developer Tools secrets that shouldn't be secrets</title>
      <author>Christian Heilmann</author>
      <pubDate>Mon, 01 Nov 2021 19:05:18 +0000</pubDate>
      <link>https://dev.to/codepo8/developer-tools-secrets-that-shouldnt-be-secrets-361g</link>
      <guid>https://dev.to/codepo8/developer-tools-secrets-that-shouldnt-be-secrets-361g</guid>
      <description>&lt;p&gt;This is a talk that I've given at &lt;a href="https://cityjsconf.org/"&gt;CityJS&lt;/a&gt; this September. I am a principal product manager for developer tools in Microsoft Edge and these are things I encountered during working on the tools, documenting them and going through user feedback.&lt;/p&gt;

&lt;p&gt;You can watch the &lt;a href="https://www.youtube.com/watch?v=q_qzHzIVxw4"&gt;recording of the talk on Youtube&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/q_qzHzIVxw4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Here's a write-up  of all the things I covered:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-console-is-much-more-than-raw-log-endraw-"&gt;
  &lt;/a&gt;
  1. Console is much more than &lt;code&gt;log()&lt;/code&gt;!
&lt;/h2&gt;

&lt;p&gt;There is no doubt that, besides the Elements tool, Console is the most used part of the browser developer tools. Specificially, people love to debug by putting a &lt;code&gt;console.log()&lt;/code&gt; in their code to learn what's going on. There are a few problems with that, and there are better ways to debug scripts, but as this is what people do, let's talk how to make that experience better. &lt;/p&gt;

&lt;p&gt;The first problem is log messages that aren't removed when a product goes live clogging up the Console. Finding the information you're looking for becomes daunting and the best way to work with that is to learn about the &lt;a href="https://docs.microsoft.com/microsoft-edge/devtools-guide-chromium/console/console-filters"&gt;console filtering options available to you&lt;/a&gt;. Using these you can filter the reporting of the console to the things you care about and block out a lot of the noise.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BsFa_w1t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/utwq8xf2ljnkup3bun62.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BsFa_w1t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/utwq8xf2ljnkup3bun62.png" alt="Filtering options in the console tool" width="880" height="439"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-that-youre-logging"&gt;
  &lt;/a&gt;
  What is that you're logging?
&lt;/h3&gt;

&lt;p&gt;The next problem with using &lt;code&gt;console.log()&lt;/code&gt; is that we seem to only log values and forget to add where they come from. For example, when you use the following code, you get a list of numbers, but you don't know what is what.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The easiest way to work around that issue is to wrap the things you want to log in curly braces. The console then logs both the name and the value of what you want to know about.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U7BJjc2h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4r0hktj867rc7hzb0ams.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U7BJjc2h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4r0hktj867rc7hzb0ams.png" alt="Using curly braces around variables in log messages logs their name and their value" width="770" height="827"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-to-your-console-vocabulary"&gt;
  &lt;/a&gt;
  Adding to your console vocabulary
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QpKuBkjt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/moyxuiaxxsn7umk8jzsu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QpKuBkjt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/moyxuiaxxsn7umk8jzsu.png" alt="Examples of warn, info and error messages and how they are displayed in the console" width="707" height="357"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In addition to &lt;code&gt;console.log()&lt;/code&gt; you have a &lt;a href="https://docs.microsoft.com/microsoft-edge/devtools-guide-chromium/console/console-log"&gt;lot more methods you can use&lt;/a&gt;. For example, &lt;code&gt;console.warn()&lt;/code&gt; logs a warning, &lt;code&gt;console.info()&lt;/code&gt; an informational message, and &lt;code&gt;console.error()&lt;/code&gt; an error message. This not only results in slighty different displays in the console, but it also gives your messages a different log level, which means it is easier to filter for them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#errors-and-assertions-in-console"&gt;
  &lt;/a&gt;
  Errors and assertions in Console
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SPP7L2l9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jmgjxudfdrpdzk71erd1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SPP7L2l9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jmgjxudfdrpdzk71erd1.png" alt="The error method of console shows an error, and assert is a shortcut for an if statement with a console.log inside" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Displaying an error in the console is different to throwing an error, but it still is a good idea to show the severity of an issue to the person maintaining or debugging the product. Another interesting method is &lt;code&gt;console.assert()&lt;/code&gt;, which only logs a message when a certain condition is met. Often you find yourself writing an &lt;code&gt;if&lt;/code&gt; statement with a &lt;code&gt;console.log()&lt;/code&gt; inside. Using &lt;code&gt;assert()&lt;/code&gt; makes that one redundant and you have one less thing to worry about when cleaning up your debugging code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tracing-where-something-came-from"&gt;
  &lt;/a&gt;
  Tracing where something came from
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qRGzVTH3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/096sdyztvubc28oi8ror.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qRGzVTH3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/096sdyztvubc28oi8ror.png" alt="Example of using console.trace() to track back where a call came from" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Often you find yourself adding a &lt;code&gt;console.log('called')&lt;/code&gt; or similar to test if a certain functionality is even triggered. Once you have that the next thing you normally want to find out what called that method. That's what &lt;code&gt;console.trace()&lt;/code&gt; is for, as it doesn't only tell you that something was called, but also where the call came from. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#grouping-console-messages"&gt;
  &lt;/a&gt;
  Grouping console messages
&lt;/h3&gt;

&lt;p&gt;If you have a lot to log, you can use &lt;code&gt;console.group('name')&lt;/code&gt; and &lt;code&gt;console.groupEnd('name')&lt;/code&gt; to wrap the messages in collapsible and expandable messages in the Console. You can even define if the groups should be expanded or collapsed by default.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s0phSiV7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2rqdcx42f92cxozm3tr9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s0phSiV7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2rqdcx42f92cxozm3tr9.png" alt="An example of defining groups in the console" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#displaying-and-filtering-lots-of-information-in-the-console-as-tables"&gt;
  &lt;/a&gt;
  Displaying and filtering lots of information in the console as tables
&lt;/h3&gt;

&lt;p&gt;If you want to display a lot of of information as a log, it can become daunting to read the information. The &lt;code&gt;console.table()&lt;/code&gt; method displays array-like data as a table in the console, and you can filter what you want to display by giving it an array of the properties you want to see. &lt;/p&gt;

&lt;p&gt;For example, you can use&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;elms&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;:is(h1,p,script&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;elms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;to get all H1, paragraph and script elements from the document and  to display this information as a table. As the different elements have a boatload of attributes and properties, the resulting table is pretty unreadable. &lt;/p&gt;

&lt;p&gt;If you filter down to what you are interested in by using&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;elms&lt;/span&gt;&lt;span class="p"&gt;,[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nodeName&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;innerText&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;offsetHeight&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;you get a table with only these properties and their values. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qbM83cjD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/83x63c2nsiihbgv4kyt3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qbM83cjD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/83x63c2nsiihbgv4kyt3.png" alt="Code example using console.table() and its filtering options" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The table structure is maintained when you copy and paste this information, which makes it a wonderful tool to get data into Excel or Word, for example. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#blinging-it-up-raw-endraw-and-raw-endraw-"&gt;
  &lt;/a&gt;
  Blinging it up: &lt;code&gt;$()&lt;/code&gt; and &lt;code&gt;$$()&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The Console comes with a lot of convenience methods you can use called the &lt;a href="https://docs.microsoft.com/microsoft-edge/devtools-guide-chromium/console/utilities"&gt;Console Utilities&lt;/a&gt;. Two very useful ones are &lt;code&gt;$()&lt;/code&gt; and &lt;code&gt;$$()&lt;/code&gt; which are replacements for &lt;code&gt;document.querySelector()&lt;/code&gt; and &lt;code&gt;document.querySelectorAll()&lt;/code&gt; respectively. These not only return the nodeList you expect, but also cast the results to arrays, which means you can use &lt;code&gt;map()&lt;/code&gt; and &lt;code&gt;filter()&lt;/code&gt; on the results directly. The following code would grab all the links of the current document and return an Array with objects that contain only the &lt;code&gt;href&lt;/code&gt; and &lt;code&gt;innerText&lt;/code&gt; properties of each link as &lt;code&gt;url&lt;/code&gt; and &lt;code&gt;text&lt;/code&gt; properties.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NJkF518j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ww5h1yqyk378lzcdmob2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NJkF518j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ww5h1yqyk378lzcdmob2.png" alt="An example how the $$ function returns a collection of HTML elements that you can filter like any other array" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-you-can-log-without-source-access-live-expressions-and-logpoints"&gt;
  &lt;/a&gt;
  2. You can log without source access - live expressions and logpoints
&lt;/h2&gt;

&lt;p&gt;The normal way to add a &lt;code&gt;console.log()&lt;/code&gt; is to put it inside your code at the place you want to get the information. But you can also get insights into code you can't access and change. &lt;a href="https://docs.microsoft.com/microsoft-edge/devtools-guide-chromium/console/live-expressions"&gt;Live expressions&lt;/a&gt; are a great way to log information without changing your code. They are also incredible to log values that change constantly without flooding the console and thus slowing down your product. You can see the difference in the following screencast:&lt;/p&gt;



&lt;p&gt;Logpoints are a special kind of breakpoint. You can right-click any line in a JavaScript in the Sources tool of the Developer Tools and set a logpoint. You get asked to provide an expression you'd like to log and will get its value in the console when the line of code is executed. This means you can technically inject a &lt;code&gt;console.log()&lt;/code&gt; anywhere on the web. I &lt;a href="https://christianheilmann.com/2021/08/24/using-console-log-on-any-website-logpoints-let-you-do-that/"&gt;wrote about logpoints&lt;/a&gt; back in August and you can see a demo in the following screencast:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-you-can-log-outside-the-browser-vs-code-debugger"&gt;
  &lt;/a&gt;
  3. You can log outside the browser - VS Code debugger
&lt;/h2&gt;

&lt;p&gt;When you start a debugging session in Visual Studio Code, you can spawn a browser instance and the Debug Console becomes the Console you are used to from the browser developer tools. I blogged about this in July in detail, so you can &lt;a href="https://christianheilmann.com/2021/07/30/using-console-log-debugging-in-visual-studio-code/"&gt;read up there how to do that&lt;/a&gt;. There is also more in the &lt;a href="https://docs.microsoft.com/microsoft-edge/visual-studio-code/microsoft-edge-devtools-extension#browser-debugging-with-microsoft-edge-devtools-integration-in-visual-studio-code"&gt;official documentation&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JQgQPgvx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t8i8p8oy2gqhlc4tjm30.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JQgQPgvx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t8i8p8oy2gqhlc4tjm30.png" alt="Using the JavaScript debugger in VS Code" width="848" height="1031"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also watch this one minute video of me showing the functionality:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/00MNtSzasSQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-you-can-inject-code-into-any-site-snippets-and-overrides"&gt;
  &lt;/a&gt;
  4. You can inject code into any site - snippets and overrides.
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://docs.microsoft.com/microsoft-edge/devtools-guide-chromium/javascript/snippets"&gt;Snippets&lt;/a&gt; are a way in Developer Tools to run a script against the current web site. You can use the &lt;a href="https://docs.microsoft.com/microsoft-edge/devtools-guide-chromium/console/utilities"&gt;Console Utilities&lt;/a&gt; in these scripts and it is a great way to write and store complex DOM manipulation scripts you normally execute in the Console. You can run your scripts in the window context of the current document either from the snippets editor or from the command menu. In the latter case, start your command with an &lt;code&gt;!&lt;/code&gt; and type the name of the snippet you want to run.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.microsoft.com/microsoft-edge/devtools-guide-chromium/javascript/overrides"&gt;Overrides&lt;/a&gt; allow you to store local copies of remote scripts and override them when the page loads. This is great if you have, for example, a slow build process for your whole application and you want to try something out. It is also a great tool to replace annoying scripts from third party web sites without having to use a browser extension.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-you-can-inspect-and-debug-much-more-than-you-know"&gt;
  &lt;/a&gt;
  5. You can inspect and debug much more than you know!
&lt;/h2&gt;

&lt;p&gt;You may know the Chromium developer tools from browsers like Google Chrome, Brave or Microsoft Edge, but they are available in a lot more environments. Any app that's based on Electron can have them enabled and you can use the Tools to peek under the hood and see how the product was done. This works, for example, in GitHub Desktop, Visual Studio Code, or you can even debug the Developer Tools of the browser using Developer Tools! &lt;/p&gt;

&lt;p&gt;If you inspect the Developer Tools, you will see that they are written in HTML, CSS and TypeScript. It is an exciting environment to use these technologies, as you you know the rendering engine your code will run in - something you never know on the web. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4fyY1b4m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c6jx25fkji9j6t2rqhjd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4fyY1b4m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c6jx25fkji9j6t2rqhjd.png" alt="Inspecting the Chromium Developer tools with another instance of the developer tools" width="880" height="389"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The embeddable nature of the tools also allowed us to offer you a way to use them outside the browser. The &lt;a href="https://aka.ms/devtools-for-code"&gt;Microsoft Edge Tools for Visual Studio Code&lt;/a&gt; extension brings the tools to Visual Studio Code. That way you can use the visual debugging tools right next to your code editor and you don't need to jump between the two all the time. This also ties in with the "Console in Visual Studio Code" trick mentioned earlier. When you start a debugging session and you click the Developer Tools icon, the tools will open or - the first time - you will be prompted to install the extension.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Sg22NatC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tdw9j12i0lvi1r2p5k4j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sg22NatC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tdw9j12i0lvi1r2p5k4j.png" alt="Inspect button in the debug bar of Visual Studio Code" width="760" height="423"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MIroHd9N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l9ykxy5fbkks0kim5odw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MIroHd9N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l9ykxy5fbkks0kim5odw.png" alt="Microsoft Edge Developer tools open in an instance of Visual Studio Code" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-some-dirty-secrets"&gt;
  &lt;/a&gt;
  6. Some dirty secrets…
&lt;/h2&gt;

&lt;p&gt;Working intimately with developer tools and getting feedback and usage information taught me a few dirty secrets. The first one is that whilst we are all super excited about all the amazing features of developer tools, users only use a very small percentage of them. Many things heralded as the best thing since sliced bread in presentations and video tutorials are hardly every opened, let alone used. I thought this was about a lack of documentation and we spent a massive amount of time to update the &lt;a href="https://docs.microsoft.com/microsoft-edge/devtools-guide-chromium/"&gt;DevTools documentation&lt;/a&gt; to ensure everything in them is described and explained, but that wasn't it. Documentation is something people seem to go to as a last resort when they are stuck and Google/Stack Overflow/Social channels didn't yield any results. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#developer-tools-have-become-complex-and-are-overwhelming-a-few-ideas-how-to-fix-that"&gt;
  &lt;/a&gt;
  Developer tools have become complex and are overwhelming - a few ideas how to fix that
&lt;/h3&gt;

&lt;p&gt;It might be that the plain fact is that the Developer Tools of browsers grew organically over the years and can be incredibly overwhelming to look at. And that bothers me and I think we should do better. Here's my mantra when it comes to tools for developers:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Developer tools should not expect people to be experts but turn them into experts over time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We're working on a few ideas to make that easier, and you will soon see those in Microsoft Edge. One idea we had is a "Focus Mode". Instead of showing you all the tools and tabs we sorted the tools into different use cases, like "Elements/CSS debugging", "Sources/JavaScript Debugging" or "Network inspection". We then show only the relevant tools and hide all the ones that may be confusing or in the way. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ss2-kkPB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3nrayh4qevkx72toglpz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ss2-kkPB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3nrayh4qevkx72toglpz.png" alt="Developer tools in focus mode, showing only what's needed in the current context" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another feature we are working on are "informational overlays". You get a help button that allows you to turn on overlays for the developer tools, explaining what each of the tools is, how to use it and providing links to the documentation. We hope that this would make it easier for people to learn about more features.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k7jRAfgl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v35fjaeur3wfbw0ew5lu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k7jRAfgl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v35fjaeur3wfbw0ew5lu.png" alt="Overlays explaining what a certain tool is" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#there-is-still-a-disconnect-between-authoring-code-and-debugging-the-outcome"&gt;
  &lt;/a&gt;
  There is still a disconnect between authoring code and debugging the outcome
&lt;/h3&gt;

&lt;p&gt;Whilst it is amazing what tools provide us these days there is still a disconnect between authoring and debugging. Most of the time we write our code, create the app and then go to the browser to see what doesn't work. We then use the browser developer tools to tweak and fix these issues. And then comes the big issue we still need to fix: how do you get the changes you created using the browser developer tools back into your code? Most of the time, the answer is "copy and paste or try to remember what needs changing". &lt;/p&gt;

&lt;p&gt;We're currently working on two ways to make this easier. One is to replace the in-devtools editor with Visual Studio Code when it is available and to change files on the hard drive as you use the browser developer tools. The other is part of the VS Code extension and changes the source code in the editor as you use the developer tools but still gives you the final say in changing the file on disk. I &lt;a href="https://blogs.windows.com/msedgedev/2021/10/21/improved-authoring-debugging-devtools-visual-studio-code/"&gt;described the problem and the possible solutions on the Edge blog&lt;/a&gt; or you can watch the following two screencasts to see them in action.&lt;/p&gt;

&lt;p&gt;CSS Mirroring in Visual Studio Code:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/sFfnTygHWoI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;What if… Visual Studio Code became the editor of in-browser Developer Tools?&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/77qEmDlFtzg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-youre-the-audience-and-the-clients-of-developer-tools"&gt;
  &lt;/a&gt;
  7. You’re the audience and the clients of Developer Tools!
&lt;/h2&gt;

&lt;p&gt;As a developer, you are the main audience for Developer Tools. We are open to your feedback and many of the recent changes to the tools are direct results from demands from outside developers. We try to make this as easy as possible by providing in-context ways to contact us directly. For example, the Visual Studio Code extension has prominent links and buttons for you to report issues and request features.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MoUWrGUY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5rn2tycjmtkt2j4fqvk1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MoUWrGUY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5rn2tycjmtkt2j4fqvk1.png" alt="Screenshot of the in-context links provided in the VS Code extension to demand new features, file bugs and learn abour experiments" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://github.com/microsoft/vscode-edge-devtools%20is%20also%20on%20GitHub"&gt;source code of the extension&lt;/a&gt; and you can &lt;a href="https://github.com/microsoft/vscode-edge-devtools/issues"&gt;file issues&lt;/a&gt; there.&lt;/p&gt;

&lt;p&gt;The in-browser developer tools also have a direct button to give us feedback. To make it easier for you to provide actionable feedback, the button includes a lot of automatic information. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qM8Qe7KY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1c92bkpsewevhdm55hjs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qM8Qe7KY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1c92bkpsewevhdm55hjs.png" alt="The feedback tool built into the browser developer tools of Microsoft Edge" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It records automatically what URL the issue happened on, takes a screenshot to include and offers to send diagnostic data. We also ask for you to provide an email in case we need more information and you can add attachments and info how to recreate the issue. We check this feedback daily, and a lot of great inventions and bug fixes came from that source.&lt;/p&gt;

</description>
      <category>developertools</category>
      <category>browsers</category>
      <category>webdev</category>
      <category>vscode</category>
    </item>
    <item>
      <title>I made an app to enjoy Halloween🎃🦇🕸</title>
      <author>Yuiko Ito</author>
      <pubDate>Mon, 01 Nov 2021 19:00:22 +0000</pubDate>
      <link>https://dev.to/yuikoito/i-made-an-app-to-enjoy-halloween-oif</link>
      <guid>https://dev.to/yuikoito/i-made-an-app-to-enjoy-halloween-oif</guid>
      <description>&lt;p&gt;Hey guys,&lt;/p&gt;

&lt;p&gt;It was &lt;strong&gt;Halloween&lt;/strong&gt; day, but in this self-restraint mode, it's hard to go out and enjoy dressing up in costumes.&lt;br&gt;
So I made an app that lets you enjoy Halloween online!&lt;/p&gt;

&lt;p&gt;Halloween has already passed, but you can even enjoy this app!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gyazo.com/fe4f1b710173805406e395bf961f85eb"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mMPzLf1H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.gyazo.com/fe4f1b710173805406e395bf961f85eb.gif" alt="Image from Gyazo" width="880" height="454"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;URL: &lt;a href="https://ohmyface.ai/"&gt;https://ohmyface.ai/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use"&gt;
  &lt;/a&gt;
  How to use
&lt;/h2&gt;

&lt;p&gt;The usage is as shown in the following slide.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MTIme8rD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8m8ey77jxm3vutccup77.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MTIme8rD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8m8ey77jxm3vutccup77.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First, when you visit to &lt;a href="https://ohmyface.ai/"&gt;https://ohmyface.ai/&lt;/a&gt;, you can choose a favorite style from this week's popularity ranking or the overall ranking.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8BFoTsnO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lfdzu0p33vwyecu38acq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8BFoTsnO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lfdzu0p33vwyecu38acq.png" alt="Image description" width="880" height="561"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This ranking is based on the number of styles converted, and is updated daily at 9pm (JTC).&lt;/p&gt;

&lt;p&gt;Once you have selected a style, all you have to do is just upload the image you want!&lt;br&gt;
The loading process will run automatically and the image will be converted.&lt;/p&gt;

&lt;p&gt;Don't worry, the uploaded images are not retained by the server.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#composition"&gt;
  &lt;/a&gt;
  Composition
&lt;/h2&gt;

&lt;p&gt;The configuration is as follows.&lt;/p&gt;

&lt;p&gt;Backend...python&lt;br&gt;
Infrastructure...AWS (API gateway, Lambda, dynamo DB, s3)&lt;br&gt;
Frontend...Next.js + TypeScript + Chakra UI&lt;/p&gt;

&lt;p&gt;In order to develop the ranking, I created an API to post which style the image was converted in, along with a timestamp, then store the data in dynamo.&lt;/p&gt;

&lt;p&gt;In order to aggregate the data, I create a Lambda function that returns the style data sorted by the number of conversions, and save the results in another table in dynamo.&lt;br&gt;
That Lambda function is run once a day by EventBridge.&lt;/p&gt;

&lt;p&gt;Then, I also created an API to access the dynamo table where the aggregate results are stored and retrieve the data, and call it from the client side to display the ranking order.&lt;/p&gt;

&lt;p&gt;For the frontend, I used the usual Next.js + TypeScript, but this time I used &lt;a href="https://chakra-ui.com/"&gt;Chakra UI&lt;/a&gt; for the first time.&lt;br&gt;
It was very easy to use, and I'll use again for sure!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thats-it"&gt;
  &lt;/a&gt;
  That's it!
&lt;/h2&gt;

&lt;p&gt;Halloween is over, but I think it's an app that can be enjoyed even after Halloween, so I'd be happy if you could play it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contact"&gt;
  &lt;/a&gt;
  Contact
&lt;/h2&gt;

&lt;p&gt;Please send me a message if you need.&lt;/p&gt;

&lt;p&gt;&lt;a href="mailto:yuiko.dev@gmail.com"&gt;yuiko.dev@gmail.com&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/yui_active"&gt;https://twitter.com/yui_active&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>typescript</category>
      <category>aws</category>
    </item>
  </channel>
</rss>
