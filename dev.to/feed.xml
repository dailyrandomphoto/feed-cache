<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Git Commit Show by Invide #season03</title>
      <author>Saurabh Rai</author>
      <pubDate>Thu, 14 Oct 2021 15:29:32 +0000</pubDate>
      <link>https://dev.to/srbhr/git-commit-show-by-invide-season03-266p</link>
      <guid>https://dev.to/srbhr/git-commit-show-by-invide-season03-266p</guid>
      <description>&lt;p&gt;&lt;strong&gt;Allow us to introduce Git Commit Show üíª One of the Leading Online Tech Conferences of the year! Is now up for it‚Äôs 3rd Season. Book the dates: 27th and 28th November, 2021. (GMT+5:30)&lt;/strong&gt;&lt;/p&gt;




&lt;p&gt;Come join us, live and interact with üë®‚Äç‚öñÔ∏èIndustry Leaders üë©‚Äçüíº in Technologyüë©‚Äçüíª, Careerüéì, and Open SourceüìÄ, to gain gargantuan knowledge in the tech domain and beyond that! &lt;br&gt;
Join us over our &lt;a href="https://discord.gg/BWeENvyktD"&gt;discord&lt;/a&gt; &lt;a href="https://www.youtube.com/c/InvideDeveloperCommunity"&gt;Youtube&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>opensource</category>
      <category>productivity</category>
      <category>career</category>
    </item>
    <item>
      <title>Free Best Login Page Templates (Written in HTML, CSS and JS)</title>
      <author>keshavs759</author>
      <pubDate>Thu, 14 Oct 2021 15:25:10 +0000</pubDate>
      <link>https://dev.to/keshavs759/free-best-login-page-templates-written-in-html-css-and-js-2l7e</link>
      <guid>https://dev.to/keshavs759/free-best-login-page-templates-written-in-html-css-and-js-2l7e</guid>
      <description>&lt;br&gt;
&lt;br&gt;


&lt;p&gt;A login page is a web page or website entry page that requires user identification and authentication, which is often accomplished by providing a username and password combination. If you have some coding experience then you can easily make login pages on your own. But in some cases, you have limited time to complete your project and in such cases, you might need login page templates that you can directly use with your website. Logins might give you access to the full site or just a section of it. Logging in allows the website to track the user's activity and habits in addition to providing site access.&lt;/p&gt;

&lt;p&gt;You can find various sources for the login page templates, but the following are some of the best login page templates that are available for free and you can modify them and even redistribute them.&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;h3&gt;&lt;a href="https://vidyasheela.com/component/transparent-login-page-template-in-html-and-css"&gt;Transparent Login page template in HTML and CSS&lt;/a&gt;&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;span&gt;This is a responsive transparent login page template in HTML and CSS. If you are searching for a responsive login page HTML and CSS template for free then you definitely have to try it.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IVKOadyi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://vidyasheela.com/admin/include/../../web-contents/img/post_img/45/responsive-transparent-login-form-html-sm.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IVKOadyi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://vidyasheela.com/admin/include/../../web-contents/img/post_img/45/responsive-transparent-login-form-html-sm.jpg" alt="transparent login form html css" title="transparent login form html css"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;You can download this transparent login form from this &lt;a href="https://vidyasheela.com/component/transparent-login-page-template-in-html-and-css"&gt;link.&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;h3&gt;&lt;a href="https://vidyasheela.com/component/simple-login-form-template"&gt;Simple Login Form Template:¬†&lt;/a&gt;&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This one is the simple login form template written HTML, CSS, and javascript. Simple in the sense of its functions. You have inputs for the username or email and password and a login button. The important options like Sign Up and Forget Passwords are also there, however you have to do some backend work to use them.¬†&lt;/p&gt;

&lt;p&gt;&lt;a href="https://vidyasheela.com/component/simple-login-form-template" title="simple login form template html css"&gt;&lt;img title="Simple login form template" src="https://res.cloudinary.com/practicaldev/image/fetch/s--hfcWZU0S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://vidyasheela.com/admin/include/../../web-contents/img/post_img/45/Simple-login-form-template.png" alt="Simple login form template"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;You can download this template for free from this &lt;a href="https://vidyasheela.com/component/simple-login-form-template"&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Also Read:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://vidyasheela.com/post/free-template-for-student-registration-form-in-html"&gt;Free Template for Student Registration Form in HTML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vidyasheela.com/post/best-contact-us-page-html-template"&gt;Best Contact Us Page HTML Template&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vidyasheela.com/post/top-five-best-404-page-templates-free-download"&gt;Top Five Best 404 Page Templates Free Download&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vidyasheela.com/post/website-under-construction-html-code-free"&gt;Website Under Construction Html Code Free&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vidyasheela.com/post/how-to-make-a-basic-login-form-and-registration-form-using-html-and-css"&gt;How to make a basic login form and registration form using HTML and CSS?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;h3&gt;&lt;a href="https://vidyasheela.com/component/login-page-with-other-login-options"&gt;Login Page Template with Other Login Options:¬†&lt;/a&gt;&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This template also has all the basic options that a simple login page template needs. In addition to these, the options like login with other emails like Google, Facebook, etc are also included in this template. You can easily add more options with simple code manipulation.&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;&lt;a href="https://vidyasheela.com/component/login-page-with-other-login-options" title="free responsive login page template html css"&gt;&lt;img title="login form with other options" src="https://res.cloudinary.com/practicaldev/image/fetch/s--UHJBOO1t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://vidyasheela.com/admin/include/../../web-contents/img/post_img/45/login-form-with-other-login-opt.png" alt="login form with other options"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;You can download this login form template for free from this &lt;a href="https://vidyasheela.com/component/login-page-with-other-login-options"&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;h3&gt;&lt;a href="https://vidyasheela.com/component/login-form-with-remember-me-option"&gt;Login Form With Remember Me Option:&lt;/a&gt;&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If it is one's personal device, then it becomes a bit tedious if they have to input a username and password every time. To make it easier what you can do is use a remember me option which will take care that they don't have to input username and password every time they log in. This login form template is the perfect frontend design for that situation.&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;&lt;a href="https://vidyasheela.com/component/login-form-with-remember-me-option" title="responsive login form template in html css and javascript"&gt;&lt;img title="Login form with remember me option" src="https://res.cloudinary.com/practicaldev/image/fetch/s--2cleKV8v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://vidyasheela.com/admin/include/../../web-contents/img/post_img/45/login-with-remember.png" alt="Login form with remember me option"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;You can download this login form template for free from this &lt;a href="https://vidyasheela.com/component/login-form-with-remember-me-option"&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;h3&gt;&lt;a href="https://vidyasheela.com/component/windows-10-style-login-page"&gt;Windows 10 Style Login Form Template&lt;/a&gt;&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is a window 10 style login form template. It mimics the login page of windows. Your website looks cool if you use this login page template. It is written completely using HTML, CSS, and Javascript.&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;&lt;a href="https://vidyasheela.com/component/windows-10-style-login-page" title="stylish login from design html css and javascript"&gt;&lt;img title="windows 10 style login form" src="https://res.cloudinary.com/practicaldev/image/fetch/s--qJ5yqO9D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://vidyasheela.com/admin/include/../../web-contents/img/post_img/45/window-10-login-form.png" alt="windows 10 style login form"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;You can download this login form template for free from this &lt;a href="https://vidyasheela.com/component/windows-10-style-login-page"&gt;link&lt;/a&gt;.&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;h3&gt;&lt;a href="https://vidyasheela.com/component/free-login-form-and-registration-form-template-html"&gt;Free login Form and Registration Form Template HTML&lt;/a&gt;&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is a simple but responsive login form and registration form design written completely using HTML, CSS, and javascript. You can download and test this login and registration form HTML design for free. If you want to learn how is this login + registration form made watch &lt;a href="https://www.youtube.com/watch?v=xDv96OAsCK4"&gt;this&lt;/a&gt;.&lt;/p&gt;



&lt;p&gt;&lt;a href="https://vidyasheela.com/component/free-login-form-and-registration-form-template-html" title="basic login form with registration form html css"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D9tomRfy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://vidyasheela.com/admin/include/../../web-contents/img/post_img/45/login-and-registration-form.gif" alt="basic login form with registration form html css" title="basic login form with registration form html css"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;You can download this login form template for free from this &lt;a href="https://vidyasheela.com/component/free-login-form-and-registration-form-template-html"&gt;link&lt;/a&gt;.&lt;/p&gt;



&lt;p&gt;Some of the features of these templates are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The design is responsive and clean.&lt;/li&gt;
&lt;li&gt;Other login options are hidden and appear once you click on the Sign-in options link.&lt;/li&gt;
&lt;li&gt;Free to use and modify the template.&lt;/li&gt;
&lt;li&gt;uses pure HTML, CSS, and javascript code.&lt;/li&gt;
&lt;li&gt;code is simple and concise.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;For other similar website components and widgets, you can visit &lt;a href="https://vidyasheela.com/website-components.php"&gt;here&lt;/a&gt;.&lt;/p&gt;



</description>
      <category>html</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>css</category>
    </item>
    <item>
      <title>Introduction to Linear Regression Algorithm with Example</title>
      <author>keshavs759</author>
      <pubDate>Thu, 14 Oct 2021 15:12:45 +0000</pubDate>
      <link>https://dev.to/keshavs759/introduction-to-linear-regression-algorithm-with-example-cf8</link>
      <guid>https://dev.to/keshavs759/introduction-to-linear-regression-algorithm-with-example-cf8</guid>
      <description>&lt;br&gt;
&lt;br&gt;


&lt;p&gt;In this article, we will learn about the linear regression algorithm with examples. First, we will understand the basics of linear regression algorithm, and then we will look at the steps involved in linear regression and finally an example of linear regression.&lt;/p&gt;

&lt;p&gt;Regression is a supervised learning technique for determining the relationship between two or more variables. ‚Äú&lt;strong&gt;Regression fits a line or curve that passes through all the data points on a target-predictor graph in such a way that the vertical distance between the data points and the regression line is minimum‚Äù&lt;/strong&gt;.¬† Regression is mainly used for prediction, time series analysis, forecasting, etc. There are many types of regression algorithms like linear regression, multiple linear regression, logistic regression, and polynomial regression.&lt;/p&gt;

&lt;p&gt;Linear regression is a statistical method that is used for prediction based on the relationship between the continuous variables. In simple words, we can say that linear regression shows the linear relationship between the independent variable (X-axis) and the dependent variable (Y-axis), consequently &lt;strong&gt;called linear regression&lt;/strong&gt;. If there is a single input variable (x), such linear regression is called¬†&lt;strong&gt;simple linear regression&lt;/strong&gt;. And if there is more than one input variable, such linear regression is called¬†&lt;strong&gt;multiple linear regression&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The linear regression model depicts the relationship between the variables as a sloped straight line as shown in the graph below. When the value of x (independent variable) increases, the value of y (dependent variable) is likewise increasing. In linear regression what we do is find a best fit straight line similar to the red line shown in the graph that fits the given data points best (i.e. with minimum error).&lt;/p&gt;

&lt;p&gt;¬†&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8lIOWol5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://vidyasheela.com/admin/include/../../web-contents/img/post_img/66/Linear-Regression-model.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8lIOWol5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://vidyasheela.com/admin/include/../../web-contents/img/post_img/66/Linear-Regression-model.jpg" alt="linear regression algorithm with example" title="linear regression algorithm with example"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;Mathematically we represent a linear regression as,&lt;/p&gt;

&lt;p&gt;&lt;span&gt;y = a + bx&lt;/span&gt;,¬† for simple linear regression&lt;/p&gt;

&lt;p&gt;&lt;span&gt;y = a+ b1x1 + b2x2 + b3x3 + ‚Ä¶&lt;/span&gt; for multiple linear regression&lt;/p&gt;



&lt;p&gt;Sometimes these equations are called &lt;strong&gt;hypothesis functions&lt;/strong&gt;.&lt;/p&gt;



&lt;p&gt;where,&lt;/p&gt;

&lt;p&gt;a = intercept of the line or bias&lt;/p&gt;

&lt;p&gt;b, b1, b2,‚Ä¶ = liner regression factor or scale factor or weights&lt;/p&gt;

&lt;p&gt;x, x1, x2, ‚Ä¶ = independent variables&lt;/p&gt;

&lt;p&gt;y = dependent variable&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;During a linear regression analysis, we are given &lt;strong&gt;Xs&lt;/strong&gt; and &lt;strong&gt;Y&lt;/strong&gt; as training data and we have to obtain the intercepts &lt;strong&gt;(a)&lt;/strong&gt;, and regression factors &lt;strong&gt;(b, b1, b2,‚Ä¶). &lt;/strong&gt;Once we get the suitable value of intercepts and regression factors they can be used to predict the value of y for the input value of x.&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;We will consider simple linear regression from now onwards for simplicity.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;A linear line showing the relationship between the dependent and independent variables is called a¬†&lt;strong&gt;regression line&lt;/strong&gt;. On the basis of the relationship between the independent and dependent variables, the regression line can be of two types.&lt;/p&gt;



&lt;h2&gt;Negative Linear Relationship:&lt;/h2&gt;

&lt;p&gt;If the dependent variable decreases on the Y-axis and the independent variable increases on the X-axis, then such a relationship is called a &lt;strong&gt;negative linear relationship&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3xChmdgt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://vidyasheela.com/admin/include/../../web-contents/img/post_img/66/-ve-regression-line.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3xChmdgt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://vidyasheela.com/admin/include/../../web-contents/img/post_img/66/-ve-regression-line.jpg" alt="negative linear relation" title="negative linear relation"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;In this condition, the equation will be,&lt;strong&gt; y = -a + bx&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;h2&gt;Positive Linear Relationship:&lt;/h2&gt;

&lt;p&gt;If the dependent variable increases on the Y-axis and the independent variable increases on X-axis, then such a relationship is termed a &lt;strong&gt;positive linear relationship.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---kUKFbKp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://vidyasheela.com/admin/include/../../web-contents/img/post_img/66/positive-regression-line.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---kUKFbKp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://vidyasheela.com/admin/include/../../web-contents/img/post_img/66/positive-regression-line.jpg" alt="positive regression relation" title="positive regression relation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this condition, the equation will be, &lt;strong&gt;y = a + bx&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;¬†&lt;/h2&gt;

&lt;h2&gt;How to find the best-fit line:&lt;/h2&gt;

&lt;p&gt;As we have mentioned earlier, the main motive of linear regression is to find the best fit line for the given data points. And the process of finding this best fit line is called learning of linear regression. Finding the best fit line means getting the best values for &lt;strong&gt;a&lt;/strong&gt; and &lt;strong&gt;b &lt;/strong&gt;based on the given dataset. The best fit line should have minimum error (i.e. the error between the predicted values and actual values should be minimized).&lt;/p&gt;



&lt;h3&gt;&lt;a href="https://vidyasheela.com/post/loss-functions-cost-functions-in-machine-learning"&gt;&lt;strong&gt;Cost function:&lt;/strong&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Cost functions are the error measuring functions that tell how the linear regression model is performing. It compares the &lt;strong&gt;predicted value of y&lt;/strong&gt; with the &lt;strong&gt;actual value of y&lt;/strong&gt; for the same input. There are various types of cost functions there. You can read about them &lt;a href="https://vidyasheela.com/post/loss-functions-cost-functions-in-machine-learning"&gt;here&lt;/a&gt;. From those, typically for the linear regression analysis, we use &lt;strong&gt;Mean Squared Error (MSE).&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N29fm4EP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://vidyasheela.com/admin/include/../../web-contents/img/post_img/66/MSE.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N29fm4EP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://vidyasheela.com/admin/include/../../web-contents/img/post_img/66/MSE.png" alt="mean squared error" title="mean squared error"&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Where &lt;strong&gt;Ti &lt;/strong&gt;is the actual/true value, &lt;strong&gt;Yi&lt;/strong&gt;¬≠ ¬†is the predicted value and &lt;strong&gt;n&lt;/strong&gt; is the total number of data.&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;h3&gt;&lt;a href="https://vidyasheela.com/post/introduction-to-gradient-descent-algorithm-with-formula"&gt;&lt;strong&gt;Gradient Descent:&lt;/strong&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;In order to get the best-fit line, we have to find the suitable value of &lt;strong&gt;a,&lt;/strong&gt; and &lt;strong&gt;b&lt;/strong&gt; so that the cost function is minimum. To minimize the cost function we use a gradient descent algorithm. Gradient Descent is an iterative algorithm. The idea behind this algorithm is that we start with random values of &lt;strong&gt;a, &lt;/strong&gt;and &lt;strong&gt;b &lt;/strong&gt;and iteratively update the values such that the cost function is minimized. To read in detail about the gradient descent algorithm &lt;a href="https://vidyasheela.com/post/introduction-to-gradient-descent-algorithm-with-formula"&gt;visit this&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;¬†&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6DKjBSrA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://vidyasheela.com/admin/include/../../web-contents/img/post_img/66/gradient%2520sescent.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6DKjBSrA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://vidyasheela.com/admin/include/../../web-contents/img/post_img/66/gradient%2520sescent.png" alt="gradient descent algorithm" title="gradient descent algorithm"&gt;&lt;/a&gt;&lt;/p&gt;





&lt;h2&gt;Steps involved in Linear Regression Algorithm&lt;/h2&gt;

&lt;p&gt;Since we have covered the basic concepts now let‚Äôs look at the steps involved in the linear regression algorithm.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Prepare the given data. Read more from here.&lt;/li&gt;
&lt;li&gt;Decide the hypothesis function (i.e. for simple linear regression, y = a + bx is the hypothesis function )&lt;/li&gt;
&lt;li&gt;Initialize &lt;strong&gt;a,&lt;/strong&gt; and &lt;strong&gt;b&lt;/strong&gt; with some random values.&lt;/li&gt;
&lt;li&gt;Update the parameters &lt;strong&gt;a, &lt;/strong&gt;and &lt;strong&gt;b &lt;/strong&gt;using gradient descent algorithm i.e.
&lt;ol&gt;
&lt;li&gt;Calculate y_predicted,&lt;strong&gt; y_predictedi =¬† a + bxi&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Calculate cost function,
&lt;ol&gt;
&lt;li&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LQagjHtm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://vidyasheela.com/admin/include/../../web-contents/img/post_img/66/cost-function.png" alt="linear regression cost function" title="linear regression cost function"&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;

&lt;li&gt;Compute the gradient of cost function with respect to parameters (&lt;strong&gt;dJ/da&lt;/strong&gt;, &lt;strong&gt;dj/db&lt;/strong&gt;)&lt;/li&gt;

&lt;li&gt;Update a and b using that gradient:

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;a = a ‚Äì lr*( dJ/da)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;b = b- lr*( dJ/db), lr &lt;/strong&gt;is learning rate.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;

&lt;li&gt;Repeat from steps I to iv until the desired result is obtained (i.e. cost function is minimized)&lt;/li&gt;

&lt;/ol&gt;

&lt;/li&gt;

&lt;/ol&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;ol&gt;&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;&lt;/ol&gt;

&lt;ol start="5"&gt;
&lt;li&gt;Once the gradient descent is completed we will get updated values of &lt;strong&gt;a, &lt;/strong&gt;and &lt;strong&gt;b &lt;/strong&gt;for which the cost function is minimum. And line corresponding to those values will be the best fit line.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The steps will be similar for the multiple linear regression.&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;h2&gt;Linear Regression Example&lt;/h2&gt;

&lt;p&gt;As mentioned earlier in the introduction section that this article will be learning linear regression algorithm with an example, now it‚Äôs time to do so. We will look at an example that you can find in &lt;a href="https://scikit-learn.org/stable/index.html"&gt;scikit-learn.org.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For this linear regression example, the diabetes dataset is used. You can find more about it from&lt;a href="https://scikit-learn.org/stable/modules/generated/sklearn.datasets.load_diabetes.html#examples-using-sklearn-datasets-load-diabetes"&gt; here.&lt;/a&gt; The example below uses only the first feature of the¬†diabetes¬†dataset, in order to illustrate the data points within the two-dimensional plot. The straight line can be seen in the plot, showing how linear regression attempts to draw a straight line that will best minimize the residual sum of squares between the observed responses in the dataset, and the responses predicted by the linear approximation.&lt;/p&gt;

&lt;p&gt;The coefficients, residual sum of squares, and the coefficient of determination are also calculated.&lt;/p&gt;



&lt;pre&gt;&lt;code&gt;# Code source: Jaques Grobler
# License: BSD 3 clause


import matplotlib.pyplot as plt
import numpy as np
from sklearn import datasets, linear_model
from sklearn.metrics import mean_squared_error, r2_score

# Load the diabetes dataset
diabetes_X, diabetes_y = datasets.load_diabetes(return_X_y=True)

# Use only one feature
diabetes_X = diabetes_X[:, np.newaxis, 2]

# Split the data into training/testing sets
diabetes_X_train = diabetes_X[:-20]
diabetes_X_test = diabetes_X[-20:]

# Split the targets into training/testing sets
diabetes_y_train = diabetes_y[:-20]
diabetes_y_test = diabetes_y[-20:]

# Create linear regression object
regr = linear_model.LinearRegression()

# Train the model using the training sets
regr.fit(diabetes_X_train, diabetes_y_train)

# Make predictions using the testing set
diabetes_y_pred = regr.predict(diabetes_X_test)

# The coefficients
print('Coefficients: n', regr.coef_)
# The mean squared error
print('Mean squared error: %.2f'
      % mean_squared_error(diabetes_y_test, diabetes_y_pred))
# The coefficient of determination: 1 is perfect prediction
print('Coefficient of determination: %.2f'
      % r2_score(diabetes_y_test, diabetes_y_pred))

# Plot outputs
plt.scatter(diabetes_X_test, diabetes_y_test,  color='black')
plt.plot(diabetes_X_test, diabetes_y_pred, color='blue', linewidth=3)

plt.xticks(())
plt.yticks(())

plt.show()&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Coefficients:
 [938.23786125]
Mean squared error: 2548.07
Coefficient of determination: 0.47
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p1fGZ8Ff--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://vidyasheela.com/admin/include/../../web-contents/img/post_img/66/ouptut.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p1fGZ8Ff--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://vidyasheela.com/admin/include/../../web-contents/img/post_img/66/ouptut.jpg" alt="linear regression with example" title="linear regression with example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;



</description>
      <category>machinelearning</category>
      <category>ai</category>
    </item>
    <item>
      <title>The Joy of Contributing to Open Source</title>
      <author>Anish De</author>
      <pubDate>Thu, 14 Oct 2021 15:12:08 +0000</pubDate>
      <link>https://dev.to/anishde12020/the-joy-of-contributing-to-open-source-34gp</link>
      <guid>https://dev.to/anishde12020/the-joy-of-contributing-to-open-source-34gp</guid>
      <description>&lt;p&gt;Back in July of this year, I made a bold decision of completely switching to Pop OS (an ubuntu-based Linux distribution) and I was faced with many hurdles. One of these was an alternative to &lt;a href="https://www.microsoft.com/en-us/p/your-phone/9nmpj99vjbwv?activetab=pivot:overviewtab"&gt;Microsoft's Your Phone application&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;After some research, I stumbled over an application called &lt;a href="https://kdeconnect.kde.org/"&gt;KDE Connect&lt;/a&gt; which turned out to be a great alternative as it not only did everything that Microsoft's Your Phone application did but had some more nifty features.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#my-first-pull-request"&gt;
  &lt;/a&gt;
  My first pull request
&lt;/h1&gt;

&lt;p&gt;As Pop OS uses Cosmic (a fork of the popular GNOME desktop environment), I was better off using &lt;a href="https://extensions.gnome.org/extension/1319/gsconnect/"&gt;GSConnect&lt;/a&gt; instead of the native KDE Connect application. GSConnect is a fork of KDE Connect which integrates well with GNOME. Everything was good until I discovered a feature that allowed me to share the URL of my current tab to my phone. This needed me to download the &lt;a href="https://chrome.google.com/webstore/detail/gsconnect/jfnifeihccihocjbfcfhicmmgpjicaec"&gt;GSConnect chrome extension&lt;/a&gt; but I use Microsoft Edge as my primary web browser. Now, chrome extensions work on Microsoft Edge as it is chromium-based but the GSConnect chrome extension made use of a feature called &lt;a href="https://developer.chrome.com/docs/apps/nativeMessaging/"&gt;native messaging&lt;/a&gt; which helped the browser extension and a program installed on the computer interact with each other. Sadly, this needs dedicated configuration for each browser (it is just a line of code). GSConnect didn't have support for Microsoft Edge at that time and hence I decided to &lt;a href="https://github.com/GSConnect/gnome-shell-extension-gsconnect/issues/1139"&gt;open an issue&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A collaborator got back to me and explained the issue to me. I was a bit stuck and so asked for more help on GitHub and the same person got back to me, giving me a place to start working on the issue. I quickly figured out the problem and fixed the issue on my end. The next step was to open a pull request so I cloned the repository, made the changes, pushed the code, and opened &lt;a href="https://github.com/GSConnect/gnome-shell-extension-gsconnect/pull/1141"&gt;my first ever pull request&lt;/a&gt;. I did mess up with the code style because I had forgotten to read the contributing guide and hence didn't run the linter checks. Anyways, a member got back to me and I fixed the problem and then my pull request was merged üéâ.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-joy-when-my-pull-request-got-merged"&gt;
  &lt;/a&gt;
  The joy when my pull request got merged
&lt;/h2&gt;

&lt;p&gt;As soon as I saw the notification that my pull request had been merged, I felt the joy of contributing to an application used by many people. This is the moment you realize that you are not working for nothing, you are getting happiness from helping others and you are learning a lot yourself. Contributing to open-source also adds to your portfolio, it shows that you care about the project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-learning"&gt;
  &lt;/a&gt;
  The learning
&lt;/h2&gt;

&lt;p&gt;When I opened the issue, I didn't know anything about native messaging in chrome extensions but from discovering this bug to fixing it, I learned a lot about how native messaging works and how open-source contributions work.&lt;/p&gt;

&lt;p&gt;I have talked about the perks of contributing to open-source in &lt;a href="https://blog.anishde.dev/open-source-in-everyday-life"&gt;my last article&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#getting-started-with-contributing-to-opensource"&gt;
  &lt;/a&gt;
  Getting Started with contributing to open-source
&lt;/h1&gt;

&lt;p&gt;It is not hard to experience the joy of contributing to open-source. Look for issues that you might want to work on and if you find one which you want to work on, it is as simple as making the changes and opening a pull request (make sure to follow the repository's contributing guide if it has one). Also, check out &lt;a href="https://hacktoberfest.digitalocean.com/"&gt;Hacktoberfest&lt;/a&gt; where you open 4 &lt;strong&gt;valid&lt;/strong&gt; pull requests on participating repositories and if you are the first 50k to do so, you get some swag. Do check out &lt;a href="https://ayushirawat.com/beginners-guide-to-hacktoberfest-2021"&gt;this guide on getting started with Hacktoberfest&lt;/a&gt; by &lt;a href="https://twitter.com/notifications"&gt;Ayushi Rawat&lt;/a&gt; if you feel stuck.&lt;/p&gt;

&lt;p&gt;Feel free to comment down if you feel like I missed something or you got a question. You can also reach out to me on &lt;a href="https://twitter.com/AnishDe12020"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Happy contributing :D&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>hacktoberfest</category>
    </item>
    <item>
      <title>HarperDB in the Real World </title>
      <author>Margo McCabe</author>
      <pubDate>Thu, 14 Oct 2021 15:11:03 +0000</pubDate>
      <link>https://dev.to/harperdb/harperdb-in-the-real-world-4f84</link>
      <guid>https://dev.to/harperdb/harperdb-in-the-real-world-4f84</guid>
      <description>&lt;p&gt;By now you may be familiar with &lt;a href="https://harperdb.io/"&gt;HarperDB&lt;/a&gt; and how we‚Äôre different from &lt;a href="https://dev.to/harperdb/database-architectures-use-cases-explained-5711"&gt;other databases out there&lt;/a&gt;, but you might be wondering how folks are currently using HarperDB in real-world applications. Or, if you already have a database of choice that‚Äôs working well, you may be wondering why you would take the plunge to try something new. Fair enough! To provide some clarity, I‚Äôd like to share a few examples of how HarperDB is currently being used in production. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quotes-from-harperdb-users"&gt;
  &lt;/a&gt;
  Quotes from HarperDB Users
&lt;/h2&gt;

&lt;p&gt;"I‚Äôm planning to break out a Monolith and use HarperDB as my datasource for the Front End part of the Platform solution I‚Äôm refactoring. One of the main reasons for considering HarperDB, as a Solutions Architect, the amount of time that is required from DEV to PROD to setup is close to none and not to mention that it is easy to adopt it and start working towards a deliverable from Day 1. All of my PoC‚Äôs, for Front End, Middleware or BackEnd, use a local HarperDB instance to start off."&lt;br&gt;
-&lt;em&gt;Rick Limon, Framework Science, Mexico&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;‚ÄúI found out about HarperDB in a Tweet which mentioned how using Flutter with HarperDB was the ultimate combo and believe me they were not telling lies. I have used HarperDB for several projects now which has turned out great. I am currently using HarperDB to remake the Domino's pizza app for android and I can say for a fact everything has been running smooth as expected. I chose HarperDB because of their great response time and how easy it is to integrate due to the cloud functions, and on no occasion have I been let down or has anyone I referred given back a report contrary to what I told them HarperDB does. For that reason I stand with HarperDB‚Äù&lt;br&gt;
-&lt;em&gt;Collins, Nigeria&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;"We started looking at all the different databases that are scalable like Couchbase and a bunch of others, but we ended up focusing on HarperDB because of the flexibility... HarperDB scales beautifully; a containerized version of HarperDB tied to persistent storage allows me to scale HarperDB to meet my performance goals. The workload it can perform is amazing, and the ability to actually scale horizontally is amazing as well because it‚Äôs not typical for database engines.‚Äù&lt;br&gt;
-&lt;em&gt;Ron Lewis, Lumen Technologies, USA&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;‚ÄúI am a front end developer, currently the maintainer of an open source project... as a real time stream framework for geo-distributed system, we decide to use HarperDB as our database in scenarios of AI / IoT / Virtual Office.‚Äù&lt;br&gt;
-&lt;em&gt;Yona&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;‚ÄúI plan on using HarperDB for my side project (A web application for SCD NGOs). This will be used for the following sections: blog section of application, gallery section, other similar pages as well.‚Äù &lt;br&gt;
-&lt;em&gt;Emmanuel Kolawole, Estonia&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;‚ÄúWe are trying to improve our data processes, and I am excited to use HarperDB to store our data and plug it to Tableau dashboards!‚Äù &lt;br&gt;
-&lt;em&gt;James&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;‚ÄúHere are a few things from my journey with HarperDB:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I came to know about it from the &lt;a href="https://townhall.hashnode.com/harperdb-hashnode-hackathon-winners"&gt;Hashnode hackathon&lt;/a&gt;, I made an application where people send birthday wishes to a person and all of them are curated in a single place, &lt;a href="https://vishwall.vercel.app/vishwall/Nivetha/wishes"&gt;for example this&lt;/a&gt; these are some of the wishes my friend received, they are in a regional language (Tamil).&lt;/li&gt;
&lt;li&gt;Then I also made another application for good luck, I used to feel worried before job interviews, so I added a few quotes in the database, and decided to make &lt;a href="https://deepakr-28.github.io/wishyougoodluck/"&gt;this application&lt;/a&gt;, people can get some confidence boost here.&lt;/li&gt;
&lt;li&gt;Since the fetch operation is really easy in HarperDB, this is my go-to platform for storing access tokens for api's which should not be displayed in public, tokens that are refreshed with each session. HarperDB is really convenient, in my workplace we use Azure SQL mostly, but I use HarperDB for all the prototyping and testing. &lt;/li&gt;
&lt;li&gt;I liked Firebase too, but learning curve of HarperDB is smaller compared to Firebase, which is really cool.‚Äù&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;-&lt;em&gt;Deepak Rawat, India&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;‚ÄúI am loving my experience with HarperDB so far, I am working on a number of GPS related projects as well as some PWA‚Äôs that are going to be utilizing HarperDB.‚Äù&lt;br&gt;
-&lt;em&gt;Jason, USA&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#case-studies"&gt;
  &lt;/a&gt;
  Case Studies
&lt;/h2&gt;

&lt;p&gt;In addition to quotes from devs in the community, I wanted to share a couple case studies where you can read about HarperDB projects in greater depth. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#us-army-accelerating-tactical-edge-with-harperdb"&gt;
  &lt;/a&gt;
  US Army: Accelerating Tactical Edge with HarperDB
&lt;/h4&gt;

&lt;p&gt;HarperDB has partnered with &lt;a href="https://www.command-cs.com/"&gt;Command Cyber Solutions&lt;/a&gt; to provide the Army with an innovative solution that will enhance the Army‚Äôs tactical edge and data orchestration capabilities. Command Cyber will leverage HarperDB to develop an edge-based analytics platform that can capture facial recognition data and distribute it to other HarperDB nodes for real-time alerting and detection.&lt;/p&gt;

&lt;p&gt;HarperDB will be deployed on the extreme edge, a mobile command center, and a server to not only collect and orchestrate data throughout the nodes, but also propagate rules engines and AI models from the command center to the edge to update logic and thresholds on the fly. This will allow the Army to adjust the priority level of the faces detected from the command center in case a high threat is found. In addition, priority levels of faces detected will be automatically upgraded when they are captured in high sensitivity areas.&lt;/p&gt;

&lt;p&gt;If interested, you can &lt;a href="https://harperdb.io/harperdb-army-case-study/"&gt;view and download the one-pager here&lt;/a&gt; to learn more about the Army case study.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#high-speed-data-monitoring-with-casne-engineering"&gt;
  &lt;/a&gt;
  High Speed Data Monitoring with Casne Engineering
&lt;/h4&gt;

&lt;p&gt;HarperDB and &lt;a href="https://casne.com/"&gt;Casne Engineering&lt;/a&gt; partnered to develop high performance data acquisition and in line analytics capabilities that enable organizations to capture sub-second data streams from industrial control systems like PLC‚Äôs and SCADA systems. The solution then filters out the massive amounts of irrelevant data at the edge, and forwards only the pertinent or anomaly data for use in OT historians and machine learning applications. &lt;/p&gt;

&lt;p&gt;This high frequency in-line analytics approach allows operators to gain actual real-time insights and detect anomalies that would normally be missed using traditional low frequency data collection techniques. HarperDB‚Äôs data management solution enables organizations to efficiently collect, process, and analyze data streams in conjunction with other unstructured data including machine vision, geospatial, and Internet data feeds. &lt;/p&gt;

&lt;p&gt;HarperDB and Casne recently completed a project for a client in the utilities / energy sector, where they were able to capture high resolution data to predict and prevent equipment failures and downtime with a single data management solution from plant to cloud. &lt;/p&gt;

&lt;p&gt;If interested, you can &lt;a href="https://harperdb.io/download-harperdb-casne-casestudy/"&gt;view and download the one-pager here&lt;/a&gt; to learn more about this case study.&lt;/p&gt;

&lt;p&gt;You can read about other industries that greatly benefit from high-performing, low-latency, geo-distributed databases like HarperDB in &lt;a href="https://dev.to/harperdb/industries-that-need-a-high-performing-low-latency-distributed-database-5cn4"&gt;this article&lt;/a&gt; as well. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#developer-examples-featured-projects"&gt;
  &lt;/a&gt;
  Developer Examples / Featured Projects
&lt;/h2&gt;

&lt;p&gt;Lastly, I thought it might be helpful to share a few tutorials and other resources where you can follow along to build cool things with HarperDB: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://harperdb.io/product/featured-projects/"&gt;Featured projects&lt;/a&gt; on our website&lt;/li&gt;
&lt;li&gt;All &lt;a href="https://hashnode.com/n/harperdbhackathon"&gt;Hashnode-HarperDB Hackathon project submissions&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLlgTMTKsypS7FCGm3jAzq6VppF8-AtzPh"&gt;Livestream / code along events&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A few specific tutorials: 

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://blog.hrithwik.me/how-i-used-harperdb-custom-functions-to-build-a-web-app-for-my-newsletter"&gt;How I used HarperDB Custom Functions to build a web app for my newsletter&lt;/a&gt; by Hrithwik Bharadwaj&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://apoorvtyagi.tech/building-microservices-using-spring-boot-harperdb-and-deploying-it-on-aws"&gt;Building Microservices using Spring Boot + HarperDB and Deploying it on AWS&lt;/a&gt; by &lt;a class="mentioned-user" href="https://dev.to/apoorvtyagi"&gt;@apoorvtyagi&lt;/a&gt;
 &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://catalins.tech/build-a-rest-api-with-harperdb-and-fastifyjs"&gt;Build A REST API With HarperDB and FastifyJS&lt;/a&gt; by Catalin Pit&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/lordghostx/building-a-contact-manager-with-python-flask-and-harperdb-1h53"&gt;Building a Contact Manager with Python, Flask, and HarperDB&lt;/a&gt; by &lt;a class="mentioned-user" href="https://dev.to/lordghostx"&gt;@lordghostx&lt;/a&gt;
 &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://blog.greenroots.info/create-a-serverless-book-library-app-with-harperdb-and-gatsbyjs"&gt;Create a serverless book library app with HarperDB and Gatsbyjs&lt;/a&gt; by &lt;a class="mentioned-user" href="https://dev.to/atapas"&gt;@atapas&lt;/a&gt;
 &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;So, what do you think, is there anything in here that piques your interest or at least helps to provide some clarity as to why and how folks are using HarperDB? What are your thoughts? &lt;/p&gt;

&lt;p&gt;If you‚Äôre currently working with HarperDB, we‚Äôd love to hear from you! Share a bit about your project or experience in the comments below.&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>showdev</category>
      <category>programming</category>
      <category>database</category>
    </item>
    <item>
      <title>Input Box For Halloween</title>
      <author>Takane Ichinose</author>
      <pubDate>Thu, 14 Oct 2021 15:04:00 +0000</pubDate>
      <link>https://dev.to/takaneichinose/input-box-for-halloween-466o</link>
      <guid>https://dev.to/takaneichinose/input-box-for-halloween-466o</guid>
      <description>&lt;h1&gt;Input Box For Halloween&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;Try to focus on the text box! Trust me, it won't hurt you! üòâ&lt;/p&gt;

&lt;p&gt;I can't think of any text boxes having a bad UX interface, so I made an animation of halloween themed objects instead. üòÖ&lt;/p&gt;

&lt;p&gt;This is an animation of objects when the user focuses on the text box.&lt;/p&gt;

&lt;p&gt;There are few objects will appear during animation. Below is those objects:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pumpkins üéÉ&lt;/li&gt;
&lt;li&gt;Graves ü™¶&lt;/li&gt;
&lt;li&gt;Bats ü¶á&lt;/li&gt;
&lt;li&gt;Spider üï∑&lt;/li&gt;
&lt;li&gt;Manor üè†&lt;/li&gt;
&lt;li&gt;Castle üè∞&lt;/li&gt;
&lt;li&gt;Frankenstein üßü‚Äç‚ôÇÔ∏è&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All the images are made using HTML and CSS only.&lt;/p&gt;

&lt;h3&gt;Apologize&lt;/h3&gt;

&lt;p&gt;I would like to say sorry for the repetitive codes I made especially in CSS, and JavaScript animation.&lt;/p&gt;

&lt;h2&gt;Resources&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://greensock.com"&gt;GreenSock&lt;/a&gt; Animation library for JavaScript. I really love this animation tool!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://fonts.google.com/specimen/Creepster"&gt;Creepster&lt;/a&gt; Font used for this.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/takaneichinose/embed/bGrNaJz?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>javascript</category>
      <category>showdev</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Stop Writing JavaScript Like This
</title>
      <author>Ruben Gabrielyan</author>
      <pubDate>Thu, 14 Oct 2021 14:53:16 +0000</pubDate>
      <link>https://dev.to/rubengabrielian/stop-writing-javascript-like-this-8po</link>
      <guid>https://dev.to/rubengabrielian/stop-writing-javascript-like-this-8po</guid>
      <description>&lt;p&gt;Most of us are used to writing JavaScript code for a long time. But we might not have updated ourselves with new features which can solve your issues with minimal code. These techniques can help you write clean and optimized JavaScript Code. Today, I‚Äôll be summarizing some optimized JavaScript code snippets which can help you develop your skills.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-shorthand-for-if-with-multiple-conditions"&gt;
  &lt;/a&gt;
  1. Shorthand for if with multiple || conditions
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (fruit === 'apple' || fruit === 'orange' || fruit === 'banana' || fruit ==='grapes') {
    //code
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead of using multiple || (OR) conditions, we can use an array with the values and use the includes() method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (['apple', 'orange', 'banana', 'grapes'].includes(fruit)) {
   //code
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-shorthand-for-if-with-multiple-ampamp-conditions"&gt;
  &lt;/a&gt;
  2. Shorthand for if with multiple &amp;amp;&amp;amp; conditions
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if(obj &amp;amp;&amp;amp; obj.address &amp;amp;&amp;amp; obj.address.postalCode) {
    console.log(obj.address.postalCode)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use optional chaining (?.) to replace this snippet.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(obj?.address?.postalCode);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-shorthand-for-null-undefined-and-empty-if-checks"&gt;
  &lt;/a&gt;
  3. Shorthand for null, undefined, and empty if checks
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (first !== null || first !== undefined || first !== '') {
    let second = first;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead of writing so many checks, we can write it better this way using ||&lt;br&gt;
(OR) operator.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const second = first || '';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-shorthand-for-switch-case"&gt;
  &lt;/a&gt;
  4. Shorthand for switch case
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;switch (number) {
  case 1:
     return 'one';
  case 2:
     return 'two';
  default:
     return;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use a map/ object to write it in a cleaner way.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const data = {
  1: 'one',
  2: 'two'
};
//Access it using
data[num]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#5-shorthand-for-functions-with-a-single-line"&gt;
  &lt;/a&gt;
  5. Shorthand for functions with a single line
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function doubleOf(value) {
  return 2 * value;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use the arrow function to shorten it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const doubleOf = (value) =&amp;gt; 2 * value
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#buy-me-a-coffee"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.buymeacoffee.com/rubengabriel"&gt;Buy me a coffee&lt;/a&gt;
&lt;/h1&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Refactoring and Rebasing (Lab 5)</title>
      <author>Ahmad</author>
      <pubDate>Thu, 14 Oct 2021 14:16:08 +0000</pubDate>
      <link>https://dev.to/ar/refactoring-and-rebasing-lab-5-400k</link>
      <guid>https://dev.to/ar/refactoring-and-rebasing-lab-5-400k</guid>
      <description>&lt;p&gt;A few things about my SSG script have always irked me, so this lab was a perfect opportunity to clean those up.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#improvements"&gt;
  &lt;/a&gt;
  Improvements
&lt;/h3&gt;

&lt;p&gt;The first thing I wanted to fix was this very long line of code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Process header markdown
&lt;/span&gt;&lt;span class="n"&gt;headerTag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'{endpTag}&amp;lt;h{size}&amp;gt;{regexContent}&amp;lt;/h{size}&amp;gt;{pTag}'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;endpTag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'#'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;regexContent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;pTag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s"&gt;&amp;lt;p&amp;gt;"&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s"&gt;'(|(?&amp;lt;!\n)\n|&amp;lt;p&amp;gt;)(#{1,5})\s(.*)(&amp;lt;\/p&amp;gt;|(?&amp;lt;!&amp;lt;\/p&amp;gt;)\n|$)'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headerTag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I was able to greatly simplify the lambda expression and reduce the footprint:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Process header markdown
&lt;/span&gt;&lt;span class="n"&gt;headerTag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'&amp;lt;h{size}&amp;gt;{content}&amp;lt;/h{size}&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'#'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s"&gt;'(|(?&amp;lt;!\n)\n|&amp;lt;p&amp;gt;)(#{1,5})\s(.*)(&amp;lt;\/p&amp;gt;|(?&amp;lt;!&amp;lt;\/p&amp;gt;)\n|$)'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headerTag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;The next thing that always bothered me was the fact that everything was in one big file. So I split &lt;code&gt;ssg.py&lt;/code&gt; into three different classes: &lt;code&gt;ssg.py&lt;/code&gt;, &lt;code&gt;SSGParser.py&lt;/code&gt;, and &lt;code&gt;SSGUtil.py&lt;/code&gt;. &lt;code&gt;SSGParser.py&lt;/code&gt;, as the name suggests, contains everything to do with parsing, &lt;code&gt;SSGUtil.py&lt;/code&gt; contains all the "helper" functions, and &lt;code&gt;ssg.py&lt;/code&gt; now only consists of &lt;code&gt;main&lt;/code&gt;. This step really cleaned up my code and I don't cringe when I see it anymore.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3A7I7-z6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qd464ed315k7z29f0fxr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3A7I7-z6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qd464ed315k7z29f0fxr.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rebasing"&gt;
  &lt;/a&gt;
  Rebasing
&lt;/h3&gt;

&lt;p&gt;After committing all my improvements, I performed an interactive rebase to squash the commits into one, informative &lt;a href="https://github.com/a-rokay/static-site-generator/commit/0ffa06c506b3fde2d91bbf4029b95f286428c4d5"&gt;commit&lt;/a&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n4_ASIch--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2cwicmefyyink01xbpw9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n4_ASIch--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2cwicmefyyink01xbpw9.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#outcomes"&gt;
  &lt;/a&gt;
  Outcomes
&lt;/h3&gt;

&lt;p&gt;All in all, I'm very glad I learned about changing the history of a repo by rebasing and how to squash commits. In past labs, I'd have a mini heart attack whenever I realized I forgot something!&lt;/p&gt;

</description>
      <category>opensource</category>
    </item>
    <item>
      <title>JavaScript Framework TodoMVC Size Comparison</title>
      <author>Ryan Carniato</author>
      <pubDate>Thu, 14 Oct 2021 14:13:08 +0000</pubDate>
      <link>https://dev.to/this-is-learning/javascript-framework-todomvc-size-comparison-504f</link>
      <guid>https://dev.to/this-is-learning/javascript-framework-todomvc-size-comparison-504f</guid>
      <description>&lt;p&gt;Size in JavaScript Frameworks is actually a pretty tricky thing to estimate. &lt;/p&gt;

&lt;p&gt;Even nailing down the size of runtimes is unclear. You might go to bundlephobia.com but the size there can be misleading. With tree-shaking not all code is included. Bundlephobia also doesn't include sub-modules. Things like &lt;code&gt;svelte/motion&lt;/code&gt; or &lt;code&gt;preact/hooks&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There isn't only the size of the runtime but the size of the component code. Not all components are equal. Templates in each framework compile differently. Evan You, creator of Vue put together a &lt;a href="https://github.com/yyx990803/vue-svelte-size-analysis"&gt;comparison between Svelte and Vue&lt;/a&gt; which was pretty illuminating.&lt;/p&gt;

&lt;p&gt;I decided to take his process and methodology and apply it in addition to &lt;a href="https://preactjs.com"&gt;Preact&lt;/a&gt;, &lt;a href="https://reactjs.org"&gt;React&lt;/a&gt;, and &lt;a href="https://solidjs.com"&gt;Solid&lt;/a&gt;. So let's begin.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I'm the author of Solid, so be aware of that in terms of any potential bias I might show. I'm trying to keep things as equal as I can.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#the-setup"&gt;
  &lt;/a&gt;
  The Setup
&lt;/h2&gt;

&lt;p&gt;The test looks at the size of the library(vendor) bundle and the component code for &lt;a href="https://todomvc.com/"&gt;TodoMVC&lt;/a&gt;. Every framework has a version and the requirements are well laid out so each is relatively the same.&lt;/p&gt;

&lt;p&gt;I first looked at using only official demos, but Preact and React still use class components that are larger and not as representative of modern development. This did mean an increase in library size for Preact(3.81kb -&amp;gt; 4.39kb), which doesn't contain hooks as part of its main package but is definitely worthwhile for this test. In the end, I couldn't find a Hooks implementation I was happy with so I rolled my own implementation which I based off Solid's. You can find all the implementations &lt;a href="https://gist.github.com/ryansolid/aa5bd12ed4e2f9d592c4b23e58d6fa85"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Vendor chunks are pulled from &lt;a href="https://vite.dev"&gt;Vite&lt;/a&gt; which supports all tested frameworks. For component code I used &lt;a href="https://sfc.vuejs.org/"&gt;Vue&lt;/a&gt;, &lt;a href="https://svelte.dev/repl/"&gt;Svelte&lt;/a&gt;, &lt;a href="https://playground.solidjs.com"&gt;Solid&lt;/a&gt;'s REPLs and Terser REPL to minify. For Preact and React I used rollup to generate the compiled code.&lt;/p&gt;

&lt;p&gt;This process is much less rigorous than the benchmarks I typically do. Honestly coding style and available demo code put in a reasonable amount of variance. But I think it is still approximately in line.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#results"&gt;
  &lt;/a&gt;
  Results
&lt;/h2&gt;

&lt;p&gt;First step is to get the size of the component and vendor code for each. TodoMVC is a pretty reasonable example as it involves basic state handling, conditional and loop rendering, forms, and even serialization to local storage. In so we get a much better idea of what the base size of each framework is than Bundlephobia.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Preact&lt;/th&gt;
&lt;th&gt;React&lt;/th&gt;
&lt;th&gt;Solid&lt;/th&gt;
&lt;th&gt;Svelte&lt;/th&gt;
&lt;th&gt;Vue&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;component size (brotli)&lt;/td&gt;
&lt;td&gt;1.21kb&lt;/td&gt;
&lt;td&gt;1.23kb&lt;/td&gt;
&lt;td&gt;1.26kb&lt;/td&gt;
&lt;td&gt;1.88kb&lt;/td&gt;
&lt;td&gt;1.10kb&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vendor size (brotli)&lt;/td&gt;
&lt;td&gt;4.39kb&lt;/td&gt;
&lt;td&gt;36.22kb&lt;/td&gt;
&lt;td&gt;3.86kb&lt;/td&gt;
&lt;td&gt;1.85kb&lt;/td&gt;
&lt;td&gt;16.89kb&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;In general, mutable is smaller than immutable state, and VDOM-less libraries generate more JavaScript for their templates. Vue's components generate the least code, edging out the JSX libraries and Svelte &lt;/p&gt;

&lt;p&gt;Svelte's runtime really is small at 1.85kb. Preact core might be smaller than Solid, but with hooks in tow, the reactive framework ends up being the tinier one.&lt;/p&gt;

&lt;p&gt;From this, it is easy to calculate the size of each framework at N number of TodoMVCs + vendor chunk.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;th&gt;10&lt;/th&gt;
&lt;th&gt;20&lt;/th&gt;
&lt;th&gt;40&lt;/th&gt;
&lt;th&gt;80&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Svelte&lt;/td&gt;
&lt;td&gt;3.73kb&lt;/td&gt;
&lt;td&gt;11.25kb&lt;/td&gt;
&lt;td&gt;20.65kb&lt;/td&gt;
&lt;td&gt;39.45kb&lt;/td&gt;
&lt;td&gt;77.05kb&lt;/td&gt;
&lt;td&gt;152.25kb&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Solid&lt;/td&gt;
&lt;td&gt;5.12kb&lt;/td&gt;
&lt;td&gt;10.16kb&lt;/td&gt;
&lt;td&gt;16.46kb&lt;/td&gt;
&lt;td&gt;29.06kb&lt;/td&gt;
&lt;td&gt;54.26kb&lt;/td&gt;
&lt;td&gt;104.66kb&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Preact&lt;/td&gt;
&lt;td&gt;5.60kb&lt;/td&gt;
&lt;td&gt;10.44kb&lt;/td&gt;
&lt;td&gt;16.49kb&lt;/td&gt;
&lt;td&gt;28.59kb&lt;/td&gt;
&lt;td&gt;52.79kb&lt;/td&gt;
&lt;td&gt;101.19kb&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Vue&lt;/td&gt;
&lt;td&gt;17.99kb&lt;/td&gt;
&lt;td&gt;22.39kb&lt;/td&gt;
&lt;td&gt;27.89kb&lt;/td&gt;
&lt;td&gt;38.89kb&lt;/td&gt;
&lt;td&gt;60.89kb&lt;/td&gt;
&lt;td&gt;104.89kb&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;React&lt;/td&gt;
&lt;td&gt;37.45kb&lt;/td&gt;
&lt;td&gt;42.37kb&lt;/td&gt;
&lt;td&gt;48.52kb&lt;/td&gt;
&lt;td&gt;60.82kb&lt;/td&gt;
&lt;td&gt;85.42kb&lt;/td&gt;
&lt;td&gt;134.62kb&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;While Svelte starts the charge in the lead, it is quickly overtaken by Solid, who passes the crown on to Preact. Preact is the smallest for a good chunk of the table before ultimately Vue is.&lt;/p&gt;

&lt;p&gt;So putting the inflection points in a table:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Svelte&lt;/th&gt;
&lt;th&gt;Solid&lt;/th&gt;
&lt;th&gt;Preact&lt;/th&gt;
&lt;th&gt;Vue&lt;/th&gt;
&lt;th&gt;React&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Svelte&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;3.2&lt;/td&gt;
&lt;td&gt;3.8&lt;/td&gt;
&lt;td&gt;19.3&lt;/td&gt;
&lt;td&gt;52.9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Solid&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;10.6&lt;/td&gt;
&lt;td&gt;81.4&lt;/td&gt;
&lt;td&gt;1078.7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Preact&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;113.6&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Vue&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;React&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;This is the point each framework gets larger than the next. From 0-3 TodoMVCs, Svelte is the smallest. From 3 to 10 Solid is the smallest. 10-113 TodoMVCs Preact is. And more than 113 TodoMVC's Vue is.&lt;/p&gt;

&lt;p&gt;Preact and Vue never intersect with React, and even for Solid that does it is only after about 1080 TodoMVC's. All in all this is pretty consistent with what we see in demo's and benchmarks. Svelte is always smallest for the Hello World's and TodoMVCs, Solid for the "Real World" demos and the types of simple sites people build on streams, and Preact for things on the larger side.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#analysis"&gt;
  &lt;/a&gt;
  Analysis
&lt;/h2&gt;

&lt;p&gt;TodoMVC as a single component is on the larger side and typical implementations do it in 3-4 components so I wouldn't view these component numbers necessarily to be the number of components. But it is easy to see each framework has its sweet spot.&lt;/p&gt;

&lt;p&gt;Size's biggest impact comes during the initial page load. Other code split routes can be lazy-loaded as desired, but initial page load is a cost that every site takes upfront. If you subscribe to the thinking present in Addy Osmani's &lt;a href="https://medium.com/dev-channel/the-cost-of-javascript-84009f51e99e"&gt;The Cost of JavaScript&lt;/a&gt; series and Alex Russell's &lt;a href="https://infrequently.org/2017/10/can-you-afford-it-real-world-web-performance-budgets/"&gt;Can You Afford It?: Real-world Web Performance Budgets&lt;/a&gt; we really should be aiming to keep initial page load JavaScript under 130kb. &lt;/p&gt;

&lt;p&gt;If this is a SPA that budget includes data fetching, state libraries, and router. It's not uncommon for that to be an additional 20 to 25kb JS with most frameworks. Reactive ones like Svelte, Solid, and Vue may have state management built-in but even then when you consider 3rd party utility libraries for formatting I'd say our framework and component code should be less than 100kb.&lt;/p&gt;

&lt;p&gt;At that budget, just how many TodoMVCs does each framework allow for?&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;React&lt;/th&gt;
&lt;th&gt;Vue&lt;/th&gt;
&lt;th&gt;Preact&lt;/th&gt;
&lt;th&gt;Solid&lt;/th&gt;
&lt;th&gt;Svelte&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;10kb&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;4.6&lt;/td&gt;
&lt;td&gt;4.7&lt;/td&gt;
&lt;td&gt;4.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;20kb&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;2.8&lt;/td&gt;
&lt;td&gt;12.9&lt;/td&gt;
&lt;td&gt;12.4&lt;/td&gt;
&lt;td&gt;9.7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;40kb&lt;/td&gt;
&lt;td&gt;3.1&lt;/td&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;td&gt;29.4&lt;/td&gt;
&lt;td&gt;28.7&lt;/td&gt;
&lt;td&gt;20.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;70kb&lt;/td&gt;
&lt;td&gt;27.5&lt;/td&gt;
&lt;td&gt;48.3&lt;/td&gt;
&lt;td&gt;54.2&lt;/td&gt;
&lt;td&gt;52.5&lt;/td&gt;
&lt;td&gt;36.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;100kb&lt;/td&gt;
&lt;td&gt;51.9&lt;/td&gt;
&lt;td&gt;75.6&lt;/td&gt;
&lt;td&gt;79.0&lt;/td&gt;
&lt;td&gt;76.3&lt;/td&gt;
&lt;td&gt;52.2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Well at 100kb React and Svelte are actually almost identical. And Vue, Preact, and Solid are right next to each other with almost 33% more budget available to them. But that's the upper end. At 40kb Preact and Solid can deliver pretty heft sites with a similar advantage over Vue and Svelte, at a range React isn't even really an option.&lt;/p&gt;

&lt;p&gt;Alex's goal was 5 seconds TTI on a slower device and network. For some industries like eCommerce that target should be more like 3 seconds. 70kb - 25kb = ~45kb budget here. How can a larger library like React even compete?&lt;/p&gt;

&lt;p&gt;React Server components carry about ~8kb more on top of React's current runtime already price them out of this conversation. Multi-Page Meta-Frameworks like &lt;a href="https://astro.build/"&gt;Astro&lt;/a&gt; which remove the need for routing, and possibly other 3rd party libraries, are likely just barely enough. But even amazing tools like Astro bring ~9kb with them when there is JavaScript to load.&lt;/p&gt;

&lt;p&gt;But for the other's there is more room to play. A simple site might only 5-10 islands on a given page any option is good there. Even full SPAs for smaller libraries like Preact, Svelte, or Solid are well within a happy range.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing Thoughts
&lt;/h2&gt;

&lt;p&gt;In the ranges that matter, all frameworks are pretty comparable. Svelte might ultimately load more JavaScript across many pages for a really large app, but the others are close enough that on the larger side it won't be felt.&lt;/p&gt;

&lt;p&gt;Looking across the board Preact is the winner on size still. Solid comes close enough that that difference wouldn't be noticed, but Preact deserves the nod. React is priced out of the smaller targets or performance-sensitive ones but once an app gets large enough its size isn't noticeable. Vue sort lands right down the middle in this range, although ultimately it might send the least JavaScript in a really large app.&lt;/p&gt;

&lt;p&gt;Keep in mind this comparison is pretty rough and should be only seen as an estimate. I only regret not being able to put the time in to look at more libraries. Unsurprisingly a lot of TodoMVC examples are written MVC style which is unfair for this comparison or use stores like Redux. I wasn't prepared to write a bunch myself (Preact and React were enough). So this will have to stand.&lt;/p&gt;

&lt;p&gt;Hopefully, this gives you enough to think about until the next time the conversation of size comes up. Or maybe by then, it will be a completely different conversation given the way &lt;a href="https://markojs.com"&gt;Marko&lt;/a&gt; and &lt;a href="https://github.com/BuilderIO/qwik"&gt;Qwik&lt;/a&gt; have been completely shattering the way we measure JavaScript Framework code being sent to the browser.&lt;/p&gt;




&lt;p&gt;Full source for the TodoMVC examples used in this article found &lt;a href="https://gist.github.com/ryansolid/aa5bd12ed4e2f9d592c4b23e58d6fa85"&gt;here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>vue</category>
    </item>
    <item>
      <title>Why not multiprocessing</title>
      <author>Ming</author>
      <pubDate>Thu, 14 Oct 2021 14:08:32 +0000</pubDate>
      <link>https://dev.to/kemingy/why-not-multiprocessing-35bc</link>
      <guid>https://dev.to/kemingy/why-not-multiprocessing-35bc</guid>
      <description>&lt;p&gt;During the development of a machine learning serving project &lt;a href="https://github.com/mosecorg/mosec"&gt;Mosec&lt;/a&gt;, I used a lot of multiprocessing to make it more efficient. I want to share some experiences and researches related to Python multiprocessing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#start-from-a-segment-fault"&gt;
  &lt;/a&gt;
  start from a segment fault
&lt;/h2&gt;

&lt;p&gt;Here is a code snippet that will run well on Darwin but trigger a segment fault on Unix.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;multiprocessing&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;mp&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sleep&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wait_for_event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_set&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;trigger_segment_fault&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"spawn"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;wait_for_event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# this will show the exitcode=-SIGSEGV
&lt;/span&gt;    &lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;terminate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;trigger_segment_fault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yeah, the pure Python code can trigger a segment fault.&lt;/p&gt;

&lt;p&gt;The reason is because of the new process start method. According to the &lt;a href="https://docs.python.org/3/library/multiprocessing.html#contexts-and-start-methods"&gt;Python document&lt;/a&gt;, &lt;code&gt;spawn&lt;/code&gt; is the default one on macOS (start from Python 3.8) while &lt;code&gt;fork&lt;/code&gt; is the default one on Unix. But the start method also affects the &lt;code&gt;Event&lt;/code&gt; creation. Let's check the source code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_cond&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Condition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Lock&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_flag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Semaphore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The initialization takes a &lt;code&gt;ctx&lt;/code&gt; which is related to the start method. So when you try to access a forked event in a spawned process, this segment fault occurs. The way to solve this is simple -- using the same context. (Actually, you can use the &lt;em&gt;spawn&lt;/em&gt; event in the forked process)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fork-or-spawn"&gt;
  &lt;/a&gt;
  &lt;em&gt;fork&lt;/em&gt; or &lt;em&gt;spawn&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;Another question is that, which start method should I use?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;spawn&lt;/em&gt;: The parent process starts a &lt;strong&gt;fresh&lt;/strong&gt; python interpreter process. The child process will only inherit those resources necessary to run the process objects run() method. In particular, unnecessary file descriptors and handles from the parent process will not be inherited.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;fork&lt;/em&gt;: The parent process uses &lt;code&gt;os.fork()&lt;/code&gt; to fork the Python interpreter. The child process, when it begins, is effectively identical to the parent process. All resources of the parent are inherited by the child's process. Note that safely forking a multithreaded process is &lt;strong&gt;problematic&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We can see that &lt;em&gt;spawn&lt;/em&gt; will create a new Python process and only inherit necessary resources. &lt;em&gt;fork&lt;/em&gt; will call the underlying &lt;code&gt;os.fork()&lt;/code&gt;, but the implementation in CPython is problematic.&lt;/p&gt;

&lt;p&gt;When you are using &lt;em&gt;spawn&lt;/em&gt;, accidentally access the main process variables may have some unexpected consequences.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;multiprocessing&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;mp&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Dummy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"init in pid: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getpid&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;Dummy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;task&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"x is None"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"spawn"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code snippet, if the &lt;em&gt;spawn&lt;/em&gt; process tries to access the variable &lt;code&gt;x&lt;/code&gt;, it will trigger the initialization of both &lt;code&gt;Dummy()&lt;/code&gt; and &lt;code&gt;x = None&lt;/code&gt;. So you can see the terminal will print two "init in pid" with different PIDs.&lt;/p&gt;

&lt;p&gt;So what kind of problem can the &lt;em&gt;fork&lt;/em&gt; cause? Let's take a look at this article: &lt;a href="https://pythonspeed.com/articles/python-multiprocessing/"&gt;Why your multiprocessing Pool is stuck (it‚Äôs full of sharks!)&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;threading&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;multiprocessing&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;mp&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AreYouOK&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"init in:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getpid&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Lock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;locked&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;acquire&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;acquire&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;delay_release&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;release&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="n"&gt;greeter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AreYouOK&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;greeter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;acquire&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;greeter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delay_release&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;daemon&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getpid&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;greeter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;mp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"fork"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, after the lock is released, the child process still cannot acquire the lock. Why?&lt;/p&gt;

&lt;p&gt;The main point is that fork doesn't copy everything.&lt;/p&gt;

&lt;p&gt;Let's check the &lt;a href="https://man7.org/linux/man-pages/man2/fork.2.html"&gt;man page of fork&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The child does not inherit its parent's memory locks&lt;/p&gt;

&lt;p&gt;The child does not inherit semaphore adjustments from its parent&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So what happens here is that the child process has a lock already been acquired, but no thread will release the lock because that running thread won't be copied to the &lt;em&gt;fork&lt;/em&gt; process. These two locks are not the same (copied not shared). Here, the &lt;code&gt;threading.Lock&lt;/code&gt; is obviously not process-safe and should be handled with cautions when it's used in some other libraries (&lt;code&gt;queue.Queue&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;If we use &lt;em&gt;spawn&lt;/em&gt; instead of &lt;em&gt;fork&lt;/em&gt;, everything related will be &lt;strong&gt;rebuilt&lt;/strong&gt; in the new process (including the Thread). That's why  we should use &lt;em&gt;spawn&lt;/em&gt; instead of &lt;em&gt;fork&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;multiprocessing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;set_start_method&lt;/span&gt;
&lt;span class="n"&gt;set_start_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"spawn"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code snippet above may cause some problems when the code is executed more than once.&lt;/p&gt;

&lt;p&gt;My suggestion is to use the start method context:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;multiprocessing&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;mp&lt;/span&gt;


&lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"spawn"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#garbage-collection-with-deadlock"&gt;
  &lt;/a&gt;
  garbage collection with deadlock
&lt;/h2&gt;

&lt;p&gt;Let's take a look at another article: &lt;a href="https://codewithoutrules.com/2017/08/16/concurrency-python/"&gt;The tragic tale of the deadlocking Python queue&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This code snippet is copied from the above article.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;queue&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Queue&lt;/span&gt;

&lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Queue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Circular&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;circular&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__del__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Adding to queue in GC"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000000000&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"iteration"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# Create an object that will be garbage collected
&lt;/span&gt;    &lt;span class="c1"&gt;# asynchronously, and therefore have its __del__
&lt;/span&gt;    &lt;span class="c1"&gt;# method called later:
&lt;/span&gt;    &lt;span class="n"&gt;Circular&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Adding to queue regularly"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Usually, we believe that Python runs one line at a time. But that's not true.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Garbage collection can interrupt Python functions at any point, and run arbitrary other Python code: &lt;code&gt;__del__&lt;/code&gt; methods and &lt;a href="https://docs.python.org/3/library/weakref.html"&gt;weakref&lt;/a&gt; callbacks. So can signal handlers, which happen e.g. when you hit Ctrl-C (your process gets the SIGINT signal) or a subprocess dies (your process gets the SIGCHLD signal).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So when we try to &lt;code&gt;q.put(2)&lt;/code&gt;, the queue needs to acquire the lock. Meanwhile, the GC will try to call the &lt;code&gt;__del__&lt;/code&gt; which also does the &lt;code&gt;q.put(1)&lt;/code&gt;. The &lt;code&gt;q.put(2)&lt;/code&gt; is blocked by the GC, but the GC cannot acquire the lock because &lt;code&gt;q.put(2)&lt;/code&gt; won't release it. Deadlock happens!&lt;/p&gt;

&lt;p&gt;Thanks to the Python-dev team, this has been fixed in Python 3.7.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#copy-on-write"&gt;
  &lt;/a&gt;
  Copy on write
&lt;/h2&gt;

&lt;p&gt;When running with multiprocessing, we hope the child process can share some data with the main process instead of copying from it. Especially when they are not used in the child process. This sounds reasonable. However, we missed another important part in Python: reference counting.&lt;/p&gt;

&lt;p&gt;CPython contains two kinds of garbage collection methods: reference counting and generational garbage collection. The reference counting is the fundamental one and cannot be disabled. The generational garbage collection is mainly used to solve the reference cycles. Check this article for more details: &lt;a href="https://rushter.com/blog/python-garbage-collector/"&gt;Garbage collection in Python: things you need to know&lt;/a&gt; and &lt;a href="https://devguide.python.org/garbage_collector/"&gt;Design of CPython‚Äôs Garbage Collector&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let's take a look at the CPython implementation of PyObject:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;_object&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;_PyObject_HEAD_EXTRA&lt;/span&gt;
    &lt;span class="n"&gt;Py_ssize_t&lt;/span&gt; &lt;span class="n"&gt;ob_refcnt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;PyTypeObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ob_type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;PyObject&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There is a class member called &lt;code&gt;ob_refcnt&lt;/code&gt; which is used to track the reference counting. If we call &lt;code&gt;fork()&lt;/code&gt; in the new process, the reference counting of all the Python objects will increase. This means the object itself has changed although the data accessed by the user is still the same.&lt;/p&gt;

&lt;p&gt;To handle this problem, the Instagram Engineering team has come up with a solution: &lt;a href="https://instagram-engineering.com/copy-on-write-friendly-python-garbage-collection-ad6ed5233ddf"&gt;Copy-on-write friendly Python garbage collection&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="nf"&gt;gc_freeze_impl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="cm"&gt;/*[clinic end generated code: output=502159d9cdc4c139 input=b602b16ac5febbe5]*/&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;GCState&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gcstate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_gc_state&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;NUM_GENERATIONS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;gc_list_merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GEN_HEAD&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gcstate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;gcstate&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;permanent_generation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;gcstate&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;generations&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;Py_RETURN_NONE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's check the &lt;a href="https://docs.python.org/3/library/gc.html#gc.freeze"&gt;Python document for GC&lt;/a&gt;. In Python 3.7, it introduced a new method called &lt;code&gt;gc.freeze&lt;/code&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Freeze all the objects tracked by gc - move them to a permanent generation and ignore all the future collections.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So will this solve the Copy-on-write problem? I'm not sure because I cannot come up with an example to reproduce it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;psutil&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;multiprocessing&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;mp&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;display_memory_usage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;process&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;psutil&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;memory_info&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;processing&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;display_memory_usage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"child "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10000000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"fork"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;processing&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;display_memory_usage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code snippet above will print the memory usage of the main process and child process. You may get something like this:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;child  &amp;gt; pmem(rss=414748672, vms=427634688, shared=2969600, text=2035712, lib=0, data=411791360, dirty=0)
parent &amp;gt; pmem(rss=419000320, vms=427634688, shared=7221248, text=2035712, lib=0, data=411791360, dirty=0)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;We can see that they don't share a lot. Although by default, the &lt;em&gt;fork&lt;/em&gt; process should share the data with the parent process.&lt;/p&gt;

&lt;p&gt;But if we change it to &lt;em&gt;spawn&lt;/em&gt;, we will get something like this:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;child  &amp;gt; pmem(rss=13848576, vms=23044096, shared=7069696, text=2035712, lib=0, data=7163904, dirty=0)
parent &amp;gt; pmem(rss=419139584, vms=428081152, shared=7196672, text=2035712, lib=0, data=412200960, dirty=0)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Since the &lt;code&gt;data&lt;/code&gt; is not used by the &lt;em&gt;spawn&lt;/em&gt; process, so this won't be copied to the new process.&lt;/p&gt;

&lt;p&gt;I try to add the &lt;code&gt;gc.freeze()&lt;/code&gt; before creating a new process, but it doesn't work at all. Not sure what I have missed.&lt;/p&gt;

&lt;p&gt;I found that some discussion in the &lt;a href="https://github.com/python/cpython/pull/3705#issuecomment-420191452"&gt;&lt;code&gt;gc.freeze()&lt;/code&gt; PR&lt;/a&gt;. It looks that the untouched data should be able to share among processes. Also, it has been 4 years for Gunicorn to process this &lt;a href="https://github.com/benoitc/gunicorn/issues/1640"&gt;support for &lt;code&gt;gc.freeze()&lt;/code&gt; for apps that use preloading&lt;/a&gt;. I cannot found a good example to demonstrate that this method works well.&lt;/p&gt;

&lt;p&gt;To my understanding, the &lt;code&gt;gc.freeze()&lt;/code&gt; will disable the generational garbage collection. But the reference counting cannot be disabled. So if we &lt;em&gt;fork&lt;/em&gt; a new process, everything will be shared with the new process, which means it will change all the reference count.&lt;/p&gt;

&lt;p&gt;If we change the start method from &lt;em&gt;spawn&lt;/em&gt; to &lt;em&gt;fork&lt;/em&gt;, it doesn't need the &lt;code&gt;gc.freeze()&lt;/code&gt; to freeze the reference count, which has conflicts with the description in the Instagram blog.&lt;/p&gt;

&lt;p&gt;Is there any method to avoid this? Yes. Check another blog written before the Instagram blog: &lt;a href="https://llvllatrix.wordpress.com/2016/02/19/python-vs-copy-on-write/"&gt;Python vs Copy on Write&lt;/a&gt;. The solution is very straightforward:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can just use the &lt;a href="https://www.pypy.org/"&gt;PyPy&lt;/a&gt; because it has &lt;a href="https://doc.pypy.org/en/latest/cpython_differences.html#differences-related-to-garbage-collection-strategies"&gt;a different way for garbage collection&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You can use the &lt;a href="https://docs.python.org/3/library/multiprocessing.html#shared-ctypes-objects"&gt;Shared &lt;code&gt;ctypes&lt;/code&gt; Objects&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You can use the &lt;a href="https://docs.python.org/3/library/multiprocessing.shared_memory.html"&gt;shared memory&lt;/a&gt; for Python &amp;gt;= 3.8.&lt;/li&gt;
&lt;li&gt;You can use the &lt;a href="https://docs.python.org/3/library/mmap.html"&gt;mmap&lt;/a&gt; to &lt;a href="https://pythonspeed.com/articles/reduce-memory-array-copies/"&gt;reduce memory usage of array copies&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#suggestions"&gt;
  &lt;/a&gt;
  Suggestions
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Try to use Go, Rust, or C++ to do concurrency computing.&lt;/li&gt;
&lt;li&gt;Use &lt;em&gt;spawn&lt;/em&gt; instead of &lt;em&gt;fork&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Be careful about the garbage collection behavior.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>python</category>
      <category>multiprocessing</category>
      <category>fork</category>
      <category>spawn</category>
    </item>
    <item>
      <title>Export and run other machine learning models</title>
      <author>David Mezzetti</author>
      <pubDate>Thu, 14 Oct 2021 14:04:21 +0000</pubDate>
      <link>https://dev.to/neuml/export-and-run-other-machine-learning-models-3b86</link>
      <guid>https://dev.to/neuml/export-and-run-other-machine-learning-models-3b86</guid>
      <description>&lt;p&gt;&lt;a href="https://colab.research.google.com/github/neuml/txtai/blob/master/examples/21_Export_and_run_other_machine_learning_models.ipynb"&gt;&lt;img src="https://camo.githubusercontent.com/84f0493939e0c4de4e6dbe113251b4bfb5353e57134ffd9fcab6b8714514d4d1/68747470733a2f2f636f6c61622e72657365617263682e676f6f676c652e636f6d2f6173736574732f636f6c61622d62616467652e737667" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This article is part of a tutorial series on &lt;a href="https://github.com/neuml/txtai"&gt;txtai&lt;/a&gt;, an AI-powered semantic search platform.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;txtai primarily has support for &lt;a href="https://github.com/huggingface/transformers"&gt;Hugging Face Transformers&lt;/a&gt; and &lt;a href="https://github.com/microsoft/onnxruntime"&gt;ONNX&lt;/a&gt; models. This enables txtai to hook into the rich model framework available in Python, export this functionality via the API to other languages (JavaScript, Java, Go, Rust) and even export and natively load models with ONNX.&lt;/p&gt;

&lt;p&gt;What about other machine learning frameworks? Say we have an existing TF-IDF + Logistic Regression model that has been well tuned. Can this model be exported to ONNX and used in txtai for labeling and similarity queries? Or what about a simple PyTorch text classifier? Yes, both of these can be done!&lt;/p&gt;

&lt;p&gt;With the &lt;a href="https://github.com/onnx/onnxmltools"&gt;onnxmltools&lt;/a&gt; library, traditional models from &lt;a href="https://scikit-learn.org/stable/"&gt;scikit-learn&lt;/a&gt;, &lt;a href="https://xgboost.readthedocs.io/en/latest/"&gt;XGBoost&lt;/a&gt; and others can be exported to ONNX and loaded with txtai. Additionally, Hugging Face's trainer module can train generic PyTorch modules. This notebook will walk through all these examples.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#install-dependencies"&gt;
  &lt;/a&gt;
  Install dependencies
&lt;/h1&gt;

&lt;p&gt;Install &lt;code&gt;txtai&lt;/code&gt; and all dependencies. Since this article uses ONNX exports, we need to install the pipeline extras package.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;txtai[pipeline,similarity] datasets
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#train-a-tfidf-logistic-regression-model"&gt;
  &lt;/a&gt;
  Train a TF-IDF + Logistic Regression model
&lt;/h1&gt;

&lt;p&gt;For this example, we'll load the emotion dataset from Hugging Face datasets and build a TF-IDF + Logistic Regression model with scikit-learn.&lt;/p&gt;

&lt;p&gt;The emotion dataset has the following labels:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;sadness (0)&lt;/li&gt;
&lt;li&gt;joy (1)&lt;/li&gt;
&lt;li&gt;love (2)&lt;/li&gt;
&lt;li&gt;anger (3)&lt;/li&gt;
&lt;li&gt;fear (4)&lt;/li&gt;
&lt;li&gt;surprise (5)
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datasets&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;load_dataset&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.feature_extraction.text&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TfidfVectorizer&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.linear_model&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;LogisticRegression&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.pipeline&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Pipeline&lt;/span&gt;

&lt;span class="n"&gt;ds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;load_dataset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"emotion"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Train the model
&lt;/span&gt;&lt;span class="n"&gt;pipeline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Pipeline&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'tfidf'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TfidfVectorizer&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'lr'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LogisticRegression&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_iter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;250&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"train"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"train"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;"label"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;# Determine accuracy on validation set
&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;predict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"validation"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;labels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"validation"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;"label"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Accuracy ="&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"validation"&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Accuracy = 0.8595
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;86% accuracy - not too bad! While we all get caught up in deep learning and advanced methods, good ole TF-IDF + Logistic Regression is still a solid performer and runs much faster. If that level of accuracy works, no reason to overcomplicate things.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#export-and-load-with-txtai"&gt;
  &lt;/a&gt;
  Export and load with txtai
&lt;/h1&gt;

&lt;p&gt;The next section exports this model to ONNX and shows how the model can be used for similarity queries.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;txtai.pipeline&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Labels&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MLOnnx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Similarity&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tokenize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;inputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"input_ids"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tokenizer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;multilabel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# Load models into similarity pipeline
&lt;/span&gt;    &lt;span class="n"&gt;similarity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Similarity&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tokenizer&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dynamic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Add labels to model
&lt;/span&gt;    &lt;span class="n"&gt;similarity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id2label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"sadness"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"joy"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"love"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"anger"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"fear"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"surprise"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;similarity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label2id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;similarity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id2label&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="n"&gt;inputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"that caught me off guard"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"I didn t see that coming"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"i feel bad"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"What a wonderful goal!"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;scores&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;similarity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"joy"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;multilabel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;scores&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Export to ONNX
&lt;/span&gt;&lt;span class="n"&gt;onnx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MLOnnx&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;onnx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Create labels pipeline using scikit-learn ONNX model
&lt;/span&gt;&lt;span class="n"&gt;sklabels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Labels&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tokenize&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dynamic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Add labels to model
&lt;/span&gt;&lt;span class="n"&gt;sklabels&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id2label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"sadness"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"joy"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"love"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"anger"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"fear"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"surprise"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;sklabels&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label2id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sklabels&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id2label&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="c1"&gt;# Run test query using model
&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tokenize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;What a wonderful goal! 0.909473717212677
I didn t see that coming 0.47113093733787537
that caught me off guard 0.42067453265190125
i feel bad 0.019547615200281143
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;txtai can use a standard text classification model for similarity queries, where the label(s) are a list of fixed queries. The output above shows the best results for the query "joy".&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#train-a-pytorch-model"&gt;
  &lt;/a&gt;
  Train a PyTorch model
&lt;/h1&gt;

&lt;p&gt;The next section defines a simple PyTorch text classifier. The transformers library has a trainer package that supports training PyTorch models, assuming some standard conventions/naming is used.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Set predictable seeds
&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;torch&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;torch&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;nn&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;torch.nn&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CrossEntropyLoss&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;transformers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;AutoConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AutoTokenizer&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;txtai.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Registry&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;txtai.pipeline&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HFTrainer&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;transformers.modeling_outputs&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SequenceClassifierOutput&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'PYTHONHASHSEED'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manual_seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cuda&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manual_seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;backends&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cudnn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deterministic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Simple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Module&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vocab&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dimensions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AutoConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_pretrained&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"bert-base-uncased"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;labels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;labels&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;embedding&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EmbeddingBag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vocab&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dimensions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;classifier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Linear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dimensions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init_weights&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;init_weights&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;initrange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;embedding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uniform_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;initrange&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;initrange&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;classifier&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uniform_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;initrange&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;initrange&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;classifier&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bias&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zero_&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;forward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;input_ids&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;embeddings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;embedding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_ids&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;logits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;classifier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;embeddings&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;loss&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;labels&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;loss_fct&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CrossEntropyLoss&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;loss&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;loss_fct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;SequenceClassifierOutput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;loss&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;loss&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;logits&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;logits&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Set seed for reproducibility
&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# Define model
&lt;/span&gt;&lt;span class="n"&gt;tokenizer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AutoTokenizer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_pretrained&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"bert-base-uncased"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Simple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tokenizer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vocab_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"train"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;unique&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"label"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="c1"&gt;# Train model
&lt;/span&gt;&lt;span class="n"&gt;train&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HFTrainer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tokenizer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;train&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tokenizer&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"train"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;per_device_train_batch_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;learning_rate&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;1e-3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_train_epochs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;logging_steps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Register custom model to fully support pipelines
&lt;/span&gt;&lt;span class="n"&gt;Registry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Create labels pipeline using PyTorch model
&lt;/span&gt;&lt;span class="n"&gt;thlabels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Labels&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tokenizer&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dynamic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Determine accuracy on validation set
&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"label"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;thlabels&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;])[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"validation"&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Accuracy = "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"validation"&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Accuracy =  0.883
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;88% accuracy this time. Pretty good for such a simple network and something that could definitely be improved upon. &lt;/p&gt;

&lt;p&gt;Once again let's run similarity queries using this model.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tokenizer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;What a wonderful goal! 1.0
that caught me off guard 0.9998751878738403
I didn t see that coming 0.7328283190727234
i feel bad 5.2972134609891875e-19
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Same result order as with the scikit-learn model with scoring variations which is expected given this is a completely different model.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#pooled-embeddings"&gt;
  &lt;/a&gt;
  Pooled embeddings
&lt;/h1&gt;

&lt;p&gt;The PyTorch model above consists of an embeddings layer with a linear classifier on top of it. What if we take that embeddings layer and use it for similarity queries? Let's give it a try.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;txtai.embeddings&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Embeddings&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SimpleEmbeddings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Module&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;embeddings&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;embeddings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;embeddings&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;forward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;input_ids&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;embeddings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_ids&lt;/span&gt;&lt;span class="p"&gt;),)&lt;/span&gt;

&lt;span class="n"&gt;embeddings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Embeddings&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;"method"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"pooling"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"path"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;SimpleEmbeddings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;embedding&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;"tokenizer"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"bert-base-uncased"&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;embeddings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;similarity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"mad"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"Glad you found it"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Happy to see you"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"I'm angry"&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[(2, 0.8323876857757568), (1, -0.11010512709617615), (0, -0.16152513027191162)]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Definitely looks like the embeddings have stored knowledge. Could these embeddings be good enough to build a semantic search index, especially for sentiment based data, given the training dataset? Possibly. It certainly would run faster than a standard transformer model (see below). &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#train-a-transformer-model-and-compare-accuracyspeed"&gt;
  &lt;/a&gt;
  Train a transformer model and compare accuracy/speed
&lt;/h1&gt;

&lt;p&gt;Let's train a standard transformer sequence classifier and compare the accuracy/speed between the two.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;train&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HFTrainer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tokenizer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;train&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"microsoft/xtremedistil-l6-h384-uncased"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"train"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;logging_steps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;tflabels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Labels&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tokenizer&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dynamic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Determine accuracy on validation set
&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"label"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;tflabels&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;])[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"validation"&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Accuracy = "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"validation"&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Accuracy =  0.93
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As expected, the accuracy is better. The model above is a distilled model and even better accuracy can be obtained with a model like "roberta-base" with the tradeoff being increased training/inference time. &lt;/p&gt;

&lt;p&gt;Speaking of speed, let's compare the speed of these models.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="c1"&gt;# Test inputs
&lt;/span&gt;&lt;span class="n"&gt;inputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Testing speed of %d items"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;r1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sklabels&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;multilabel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"TF-IDF + Logistic Regression time ="&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;r2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;thlabels&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"PyTorch time ="&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;r3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tflabels&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Transformers time ="&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Compare model results
&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"index: %d"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r3&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Testing speed of 2000 items
TF-IDF + Logistic Regression time = 1.116208791732788
PyTorch time = 2.2385385036468506
Transformers time = 15.705108880996704 

index: 0
(0, 0.7258279323577881)
(0, 1.0)
(0, 0.998250424861908) 

index: 1
(0, 0.854256272315979)
(0, 1.0)
(0, 0.9981004595756531) 

index: 2
(0, 0.6306578516960144)
(0, 0.9999700784683228)
(0, 0.9981676340103149) 

index: 3
(1, 0.554378092288971)
(1, 0.9998960494995117)
(1, 0.9985388517379761) 

index: 4
(0, 0.8961835503578186)
(0, 1.0)
(0, 0.9981957077980042) 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h1&gt;

&lt;p&gt;This notebook showed how frameworks outside of Transformers and ONNX can be used as models in txtai.&lt;/p&gt;

&lt;p&gt;As seen in the section above, TF-IDF + Logistic Regression is 16 times faster than a distilled Transformers model. A simple PyTorch network is 8 times faster. Depending on your accuracy requirements, it may make sense to use a simpler model to get better runtime performance.&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>machinelearning</category>
      <category>nlp</category>
      <category>python</category>
    </item>
    <item>
      <title>How to setup and test Postman API Collection</title>
      <author>daspecialman</author>
      <pubDate>Thu, 14 Oct 2021 13:58:59 +0000</pubDate>
      <link>https://dev.to/daspecialman/how-to-setup-and-test-postman-api-collection-j1k</link>
      <guid>https://dev.to/daspecialman/how-to-setup-and-test-postman-api-collection-j1k</guid>
      <description>&lt;p&gt;If you are a frontend developer, you have likely encountered the need to test your API before integration. For experienced developers, this is not an issue, but for the newbies, it could get confusing. &lt;/p&gt;

&lt;p&gt;Whenever we onboard new interns in the dev department of &lt;a href="https://specialmansolution.com"&gt;Special Man Global Solution LTD&lt;/a&gt; and they are assigned a task, especially a frontend task, the first challenge is how to test the API, and I am always happy to guide them through it. &lt;/p&gt;

&lt;p&gt;In this article, I will share a brief on how you can test API endpoints using &lt;a href="https://www.postman.com/"&gt;Postman&lt;/a&gt; to help you consume &lt;a href="https://www.infoworld.com/article/3269878/what-is-an-api-application-programming-interfaces-explained.html"&gt;API&lt;/a&gt; appropriately.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#accessing-the-collection"&gt;
  &lt;/a&gt;
  Accessing the collection
&lt;/h2&gt;

&lt;p&gt;First, you are giving a collection URL for the Postman. When you open it, you will see something like this.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UWA85AFg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f123di9czptmmsrhkxjn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UWA85AFg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f123di9czptmmsrhkxjn.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-and-2-the-request-endpoint-and-folder"&gt;
  &lt;/a&gt;
  1 and 2. The Request Endpoint and Folder
&lt;/h3&gt;

&lt;p&gt;This section shows the arrangement of the API endpoints. Here they are grouped in folders. Inside the folder, there is the actual endpoint. Showing the endpoint name and the request method. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-the-environment"&gt;
  &lt;/a&gt;
  3. The Environment
&lt;/h3&gt;

&lt;p&gt;This shows any environment setup that contains all variables the Postman collection is set up with. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-specification"&gt;
  &lt;/a&gt;
  4. Specification
&lt;/h3&gt;

&lt;p&gt;This allows you to select the preferred pattern or specification you want to view the endpoint request with.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-documentation-body"&gt;
  &lt;/a&gt;
  5. Documentation Body
&lt;/h3&gt;

&lt;p&gt;This is the documentation body that describes guides you need to know to be able to consume the request.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-run-in-postman"&gt;
  &lt;/a&gt;
  6. Run in Postman
&lt;/h3&gt;

&lt;p&gt;This allows you to test the API on the web or your local PC.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-request-definition"&gt;
  &lt;/a&gt;
  7. Request Definition
&lt;/h3&gt;

&lt;p&gt;This shows you the request definition depending on the pattern or specification you selected above.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-the-endpoint"&gt;
  &lt;/a&gt;
  Testing the endpoint
&lt;/h2&gt;

&lt;p&gt;Click on run in Postman, then Postman for the web.&lt;br&gt;
Select your preferred workspace&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g9P2SckJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fq9cpmznbom1jyt7ocki.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g9P2SckJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fq9cpmznbom1jyt7ocki.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then click on the endpoint you want to test, make sure the method, body and data type are correct, then click on send, you will see the data show.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#request-with-jwt-authentication"&gt;
  &lt;/a&gt;
  Request with JWT Authentication
&lt;/h2&gt;

&lt;p&gt;If your endpoint is protected using JWT; you will need to set the auth on Postman else you will be getting unauthorized error.&lt;br&gt;
Login using the login endpoint, copy the JSON Web Token, then click on the collection, under Authorization tab, sent:&lt;br&gt;
&lt;strong&gt;Type&lt;/strong&gt; = Bearer Token&lt;br&gt;
&lt;strong&gt;Token&lt;/strong&gt; = The JWT token you copied.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q2H_X9s2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/euklaxin4vbne4dsq0b9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q2H_X9s2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/euklaxin4vbne4dsq0b9.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With this you can access all the endpoints, if you encounter more issues, you inform the backend team to get them fixed.&lt;/p&gt;

&lt;p&gt;I hope this article can help you set up and test API endpoints before integration on your frontend project.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The API documentation used here is from &lt;a href="https://thestartupintern.com"&gt;The StartUp Intern's Refinery Program&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>postman</category>
      <category>javascript</category>
      <category>frontend</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
