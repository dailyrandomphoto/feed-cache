<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Rust from the beginning, project management with Cargo</title>
      <author>Chris Noring</author>
      <pubDate>Wed, 24 Nov 2021 15:27:13 +0000</pubDate>
      <link>https://dev.to/azure/rust-from-the-beginning-project-management-with-cargo-3kfk</link>
      <guid>https://dev.to/azure/rust-from-the-beginning-project-management-with-cargo-3kfk</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;TLDR; this article covers how to work with Rust projects using Cargo. As soon as you are dealing with more than one file, it's a good idea to adopt Cargo.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Series:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/azure/rust-from-the-beginning-your-first-program-30cp"&gt;Your first program&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/azure/rust-from-the-beginning-variables-3g7c"&gt;Variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/azure/rust-from-the-beginning-functions-5gal"&gt;Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rust projects with Cargo, &lt;strong&gt;you are here&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Control flow&lt;/li&gt;
&lt;li&gt;IO, read and write from the console&lt;/li&gt;
&lt;li&gt;Error handling&lt;/li&gt;
&lt;li&gt;Working with files
Advanced&lt;/li&gt;
&lt;li&gt;Ownership &amp;amp; Borrowing&lt;/li&gt;
&lt;li&gt;Testing&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#project-management"&gt;
  &lt;/a&gt;
  Project management
&lt;/h2&gt;

&lt;p&gt;When you develop software, you have a few things you want need to consider. The following are some of the major things you need to keep track of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Many files&lt;/strong&gt;. For reasons of order, you quickly grow out of using more than one file to code in. Dividing up you code in many files enables you to get a clearer picture of what you're building, which creates order but makes it easier to collaborate with others and other benefits.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;3rd party libraries&lt;/strong&gt;. You can definitely write all the code yourself but it will take you a while, especially if your project is complicated. A better approach is to write business related code yourself and rely on standard libraries as well as 3rd party libraries for the remaining code.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Building your project&lt;/strong&gt;. As your project grows, it becomes more and more complicated to build. You might need to build it differently for different operating systems and for development vs production for example.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Run tasks&lt;/strong&gt;. As part of creating a large project with many files, you will find yourself wanting to run various tasks on your project, like building, testing, linting and so on.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://doc.rust-lang.org/cargo/index.html"&gt;Cargo book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/learn/paths/rust-first-steps?wt.mc_id=academic-0000-chnoring"&gt;Learning path on Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://crates.io/"&gt;Crates.io&lt;/a&gt; Here you can find crates, i.e. packages you can use for your projects. You can also search for packages via the command line. Refer to Cargo book for how to search for that.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#cargo"&gt;
  &lt;/a&gt;
  Cargo
&lt;/h2&gt;

&lt;p&gt;Ok, now that we know a little more about projects and what we're expected to manage, how does Rust approach project management? The answer is Cargo. Cargo comes with your Rust install and helps you with a lot of things like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Creating a project&lt;/strong&gt;. Cargo helps you create a project and helps you track things like name, version, your dependencies, and other concepts.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Build and run your code&lt;/strong&gt;. Cargo can help you compile and run your code.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Feature management&lt;/strong&gt;. You can also divide up your project in features, if you say have a client that only paid for a subset of features. In such a case you only want to ship part of the code to said client. Read more here on &lt;a href="https://doc.rust-lang.org/cargo/reference/features.html"&gt;feature management&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Dependency management&lt;/strong&gt;. Your project will likely consist of dependencies, libraries or binaries that you use to build your app. You don't want to write code if there is code out there that already solves what you're trying to do.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Package management&lt;/strong&gt;. When you create a project with Cargo, it assumes your project will be a package. A package is something you can theoretically share with others&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Running tests&lt;/strong&gt;. Cargo can run tests. Read more here on &lt;a href="https://doc.rust-lang.org/cargo/commands/cargo-test.html"&gt;running tests&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The above is some of Cargo's features, but hopefully right now, you know that Cargo is your best friend and that it's fantastic that a tool like this comes built-in with a Rust install.&lt;/p&gt;

&lt;p&gt;The topic of Cargo is so large there's a whole book dedicated to it, &lt;a href="https://doc.rust-lang.org/cargo/index.html"&gt;Cargo book&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#exercise-your-first-project"&gt;
  &lt;/a&gt;
  Exercise - Your first project
&lt;/h2&gt;

&lt;p&gt;To create your first project using Cargo, you invoke the &lt;code&gt;cargo&lt;/code&gt; executable with keyword &lt;code&gt;new&lt;/code&gt; and lastly with the name of the project like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;cargo new project-name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Creates a &lt;em&gt;project-name&lt;/em&gt; subdirectory. In said directory we get the following files:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;src/
  main.rs
.gitignore
Cargo.toml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's what the files mean:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;main.rs&lt;/em&gt;, The &lt;em&gt;main.rs&lt;/em&gt; is our projects main file, the entry for our app. Here's what &lt;em&gt;main.rs&lt;/em&gt; contains:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;   &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, world!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Cargo.toml&lt;/em&gt;, this project file that does two things, manage meta information on this project and manage any dependencies your app needs to function. Here's what the file looks like:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight toml"&gt;&lt;code&gt;   &lt;span class="nn"&gt;[package]&lt;/span&gt;
   &lt;span class="py"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"project-name"&lt;/span&gt;
   &lt;span class="py"&gt;version&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"0.1.0"&lt;/span&gt;
   &lt;span class="py"&gt;authors&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"email, inferred from Git"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
   &lt;span class="py"&gt;edition&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"2018"&lt;/span&gt;

   &lt;span class="c"&gt;# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html&lt;/span&gt;

   &lt;span class="nn"&gt;[dependencies]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, you've got information on your project under the &lt;code&gt;[package]&lt;/code&gt; portion like name, version, authors, and edition. There's another section &lt;code&gt;[dependencies]&lt;/code&gt; that's empty for now, as you don't have any external dependencies.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#build-and-run-your-code"&gt;
  &lt;/a&gt;
  Build and run your code
&lt;/h3&gt;

&lt;p&gt;To build and run your project, call &lt;code&gt;cargo run&lt;/code&gt; in your project directory root:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;cargo run
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see an output resembling this text:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Compiling project-name v0.1.0 (/&amp;lt;path&amp;gt;/project-name)
    Finished dev [unoptimized + debuginfo] target(s) in 21.51s
     Running `target/debug/project-name`
Hello, world!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What you see is Cargo building and running your code and it ends up showing the text "Hello world!".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#exercise-make-a-change"&gt;
  &lt;/a&gt;
  Exercise - Make a change
&lt;/h2&gt;

&lt;p&gt;We've decided to make a nice looking CLI, command line application. For that, we will use an external library &lt;code&gt;termion&lt;/code&gt; that gives us a colored output. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add &lt;code&gt;termion&lt;/code&gt; by opening up &lt;em&gt;Cargo.toml&lt;/em&gt; and located the [dependencies] section and make the following alteration:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight toml"&gt;&lt;code&gt;   &lt;span class="nn"&gt;[dependencies]&lt;/span&gt;
   &lt;span class="py"&gt;termion&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"*"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great, now we're telling Cargo we want the library &lt;code&gt;termion&lt;/code&gt;, next let's leverage that library in our code.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open up &lt;em&gt;main.rs&lt;/em&gt; and change the code to the following:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;   &lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="n"&gt;crate&lt;/span&gt; &lt;span class="n"&gt;termion&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

   &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;termion&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

   &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{}Red"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;color&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;Fg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;color&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Red&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
     &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{}Blue"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;color&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;Fg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;color&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Blue&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
     &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, world!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Run your project with &lt;code&gt;cargo run&lt;/code&gt;:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;   cargo run
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What you see now is your project going to "crates.io", where the "termion" package is located and attempt to download it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   Updating crates.io index
   Downloaded termion v1.5.6
   Downloaded numtoa v0.1.0
   Downloaded libc v0.2.108
   Downloaded 3 crates (591.2 KB) in 0.52s
   Compiling libc v0.2.108
   Compiling numtoa v0.1.0
   Compiling termion v1.5.6
   Compiling project-name v0.1.0 (/Users/chnoring/Documents/dev/projects/rust-projects/rust-course/part4/project-name)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;last in your terminal output, you see the colored output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--04DvYPBD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9vq38theauqew1edwktq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--04DvYPBD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9vq38theauqew1edwktq.png" alt="Colored output" width="146" height="68"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I read somewhere that this might not work on Windows, please let me know in the comments if you have issues getting this to work.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;In this article, we looked at a "grow up" story, when we went from using &lt;code&gt;rustc&lt;/code&gt; to compile our code and starting using Cargo for that and many other things. Project management means you have a lot of things to consider, and Cargo handles many of them. Cargo is your new best friend and hopefully you can learn more about using Cargo by the links provided in the resources section in this article. All future parts in this series will use Cargo. &lt;/p&gt;

</description>
      <category>rust</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>3 Ways to CENTER a div in CSS</title>
      <author>CodeOz</author>
      <pubDate>Wed, 24 Nov 2021 15:11:19 +0000</pubDate>
      <link>https://dev.to/codeoz/3-ways-to-center-a-div-in-css-gl1</link>
      <guid>https://dev.to/codeoz/3-ways-to-center-a-div-in-css-gl1</guid>
      <description>&lt;p&gt;3 ways to center a div in HTML/CSS!!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#with-position"&gt;
  &lt;/a&gt;
  With Position
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Using positions */&lt;/span&gt;

&lt;span class="nc"&gt;.parent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.child&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
     &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;
     &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"background: blue; width: 500px; height: 250px;"&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
         &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"child"&lt;/span&gt;
         &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color: white;"&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      I'm center  
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/codeozz/embed/jOLoKYE?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#with-flexbox"&gt;
  &lt;/a&gt;
  With Flexbox
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Using flexbox */&lt;/span&gt;
&lt;span class="nc"&gt;.container-flexbox&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
     &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container-flexbox"&lt;/span&gt;
     &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"background: green; width: 500px; height: 250px;"&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
         &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color: white;"&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      I'm center  
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/codeozz/embed/mdMYKQv?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#with-grid"&gt;
  &lt;/a&gt;
  With Grid
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Using Grid */&lt;/span&gt;

&lt;span class="nc"&gt;.container-grid&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;place-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
     &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container-flexbox"&lt;/span&gt;
     &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"background: orange; width: 500px; height: 250px;"&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
         &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color: white;"&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      I'm center  
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/codeozz/embed/vYJwrMv?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;I hope you like this reading!&lt;/p&gt;

&lt;p&gt;🎁 You can get my new book &lt;code&gt;Underrated skills in javascript, make the difference&lt;/code&gt; for FREE if you follow me on &lt;a href="https://twitter.com/code__oz"&gt;Twitter&lt;/a&gt; and send message to me 😁 and &lt;strong&gt;SAVE 19$&lt;/strong&gt; 💵💵&lt;/p&gt;

&lt;p&gt;Or get it &lt;a href="https://codeoz.gumroad.com/l/RXLYp"&gt;HERE&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;🇫🇷🥖 For french developper you can check my &lt;a href="https://www.youtube.com/channel/UCC675U1ZUPFASsK9-FjawtA"&gt;YoutubeChannel&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🎁 &lt;a href="https://www.getrevue.co/profile/code__oz"&gt;MY NEWSLETTER&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;☕️ You can &lt;a href="https://www.buymeacoffee.com/CodeoZ"&gt;SUPPORT MY WORKS&lt;/a&gt; 🙏&lt;/p&gt;

&lt;p&gt;🏃‍♂️ You can follow me on 👇&lt;/p&gt;

&lt;p&gt;🕊 Twitter : &lt;a href="https://twitter.com/code__oz"&gt;https://twitter.com/code__oz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;👨‍💻 Github: &lt;a href="https://github.com/Code-Oz"&gt;https://github.com/Code-Oz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And you can mark 🔖 this article!&lt;/p&gt;

</description>
      <category>css</category>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>html</category>
    </item>
    <item>
      <title>JAVASCRIPT CHEAT SHEET FOR BEGINNERS</title>
      <author>Keshav</author>
      <pubDate>Wed, 24 Nov 2021 15:08:27 +0000</pubDate>
      <link>https://dev.to/keshav44483499/javascript-cheat-sheet-for-beginners-kp3</link>
      <guid>https://dev.to/keshav44483499/javascript-cheat-sheet-for-beginners-kp3</guid>
      <description>&lt;p&gt;This video covers all topics in JavaScript Cheatsheet for beginners and this javascript cheat sheet contains all the commands which you will require while writing javascript code. Hope you will find this javascript cheat sheet helpful!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/6tXroqr98aE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Drawing with Mr. Fourier and Typescript</title>
      <author>NordicBeaver</author>
      <pubDate>Wed, 24 Nov 2021 15:06:59 +0000</pubDate>
      <link>https://dev.to/nordicbeaver/drawing-with-mr-fourier-and-typescript-5h70</link>
      <guid>https://dev.to/nordicbeaver/drawing-with-mr-fourier-and-typescript-5h70</guid>
      <description>&lt;p&gt;What if we connect a couple of rotating sticks together and trace the shape they make? We can get something like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/VDbjh7etUnHmXXE05U/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/VDbjh7etUnHmXXE05U/giphy.gif" alt="Rotating Sticks" width="480" height="270"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The most interesting part about this is if we get enough sticks we can draw anything we want!&lt;/p&gt;

&lt;p&gt;You can try it yourself &lt;a href="https://fourier-painter.nordicbeaver.io/"&gt;here&lt;/a&gt;. Just draw a &lt;strong&gt;closed&lt;/strong&gt; (that's pretty important) shape and press 'Start'.&lt;/p&gt;

&lt;p&gt;This is based on a thing caller &lt;em&gt;Fourier Transform&lt;/em&gt;. Basically, every complex function on a set interval can be represented as an infinite sum of exponents:&lt;/p&gt;

&lt;p&gt;

&lt;/p&gt;
&lt;div class="katex-element"&gt;
  &lt;span class="katex-display"&gt;&lt;span class="katex"&gt;&lt;span class="katex-mathml"&gt;f(t)=∑n=−inf⁡inf⁡cnen2πit,0≤t≤1
f(t) = \sum_{n=-\inf}^{\inf}c_n e^{n 2 \pi i t}, 
0 \le t \le 1
&lt;/span&gt;&lt;span class="katex-html"&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord mathnormal"&gt;f&lt;/span&gt;&lt;span class="mopen"&gt;(&lt;/span&gt;&lt;span class="mord mathnormal"&gt;t&lt;/span&gt;&lt;span class="mclose"&gt;)&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mrel"&gt;=&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mop op-limits"&gt;&lt;span class="vlist-t vlist-t2"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mtight"&gt;&lt;span class="mord mathnormal mtight"&gt;n&lt;/span&gt;&lt;span class="mrel mtight"&gt;=&lt;/span&gt;&lt;span class="mord mtight"&gt;−&lt;/span&gt;&lt;span class="mspace mtight"&gt;&lt;/span&gt;&lt;span class="mop mtight"&gt;&lt;span class="mtight"&gt;i&lt;/span&gt;&lt;span class="mtight"&gt;n&lt;/span&gt;&lt;span class="mtight"&gt;f&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span&gt;&lt;span class="mop op-symbol large-op"&gt;∑&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mtight"&gt;&lt;span class="mop mtight"&gt;&lt;span class="mtight"&gt;i&lt;/span&gt;&lt;span class="mtight"&gt;n&lt;/span&gt;&lt;span class="mtight"&gt;f&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-s"&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord mathnormal"&gt;c&lt;/span&gt;&lt;span class="msupsub"&gt;&lt;span class="vlist-t vlist-t2"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mathnormal mtight"&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-s"&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord mathnormal"&gt;e&lt;/span&gt;&lt;span class="msupsub"&gt;&lt;span class="vlist-t"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mtight"&gt;&lt;span class="mord mathnormal mtight"&gt;n&lt;/span&gt;&lt;span class="mord mtight"&gt;2&lt;/span&gt;&lt;span class="mord mathnormal mtight"&gt;πi&lt;/span&gt;&lt;span class="mord mathnormal mtight"&gt;t&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="mpunct"&gt;,&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mord"&gt;0&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mrel"&gt;≤&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord mathnormal"&gt;t&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mrel"&gt;≤&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord"&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt;


&lt;p&gt;Where&lt;/p&gt;


&lt;div class="katex-element"&gt;
  &lt;span class="katex-display"&gt;&lt;span class="katex"&gt;&lt;span class="katex-mathml"&gt;cn=∫01f(t)e−n2πit
c_n = \int_0^1 f(t) e^{-n 2 \pi i t}
&lt;/span&gt;&lt;span class="katex-html"&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord mathnormal"&gt;c&lt;/span&gt;&lt;span class="msupsub"&gt;&lt;span class="vlist-t vlist-t2"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mathnormal mtight"&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-s"&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mrel"&gt;=&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mop"&gt;&lt;span class="mop op-symbol large-op"&gt;∫&lt;/span&gt;&lt;span class="msupsub"&gt;&lt;span class="vlist-t vlist-t2"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mtight"&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mtight"&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-s"&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mord mathnormal"&gt;f&lt;/span&gt;&lt;span class="mopen"&gt;(&lt;/span&gt;&lt;span class="mord mathnormal"&gt;t&lt;/span&gt;&lt;span class="mclose"&gt;)&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord mathnormal"&gt;e&lt;/span&gt;&lt;span class="msupsub"&gt;&lt;span class="vlist-t"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mtight"&gt;&lt;span class="mord mtight"&gt;−&lt;/span&gt;&lt;span class="mord mathnormal mtight"&gt;n&lt;/span&gt;&lt;span class="mord mtight"&gt;2&lt;/span&gt;&lt;span class="mord mathnormal mtight"&gt;πi&lt;/span&gt;&lt;span class="mord mathnormal mtight"&gt;t&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt;


&lt;p&gt;But if we look closer we may notice that every element of that sum is actually a rotating vector Cn. So if we manage to represent a shape as a complex function, we could find these vectors (maybe not all, since there is infinite number of them, but we don't need all) and that would mean drawing the shape just by rotating those vectors!&lt;/p&gt;

&lt;p&gt;I made a video where I tried to explain this in more detail and code it in TypeScript.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/sGwtJzLh6_k"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>typescript</category>
      <category>programming</category>
    </item>
    <item>
      <title>Caching Anaconda environments on GitHub Actions</title>
      <author>epassaro</author>
      <pubDate>Wed, 24 Nov 2021 15:03:39 +0000</pubDate>
      <link>https://dev.to/epassaro/caching-anaconda-environments-on-github-actions-2d08</link>
      <guid>https://dev.to/epassaro/caching-anaconda-environments-on-github-actions-2d08</guid>
      <description>&lt;h3&gt;
  &lt;a href="#my-workflow"&gt;
  &lt;/a&gt;
  My Workflow
&lt;/h3&gt;

&lt;p&gt;One of the most time-consuming tasks on my workflows is the solving, download and installation of Anaconda environments. In some cases, just solving the dependencies can take up to 10 minutes depending on the platform you are building on.&lt;/p&gt;

&lt;p&gt;This workflow aims to save time and computational resources by caching deployed Anaconda environments using the &lt;a href="https://github.com/actions/cache"&gt;&lt;code&gt;actions/cache&lt;/code&gt;&lt;/a&gt; task and the &lt;a href="https://github.com/conda-incubator/setup-miniconda"&gt;&lt;code&gt;conda-incubator/setup-miniconda&lt;/code&gt;&lt;/a&gt; action.&lt;/p&gt;

&lt;p&gt;Shorter build times and better resource management will benefit not just your organization but also the environment.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;Maintainer Must-Haves&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#yaml-file-or-link-to-code"&gt;
  &lt;/a&gt;
  Yaml File or Link to Code
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/epassaro"&gt;
        epassaro
      &lt;/a&gt; / &lt;a href="https://github.com/epassaro/cache-conda-envs"&gt;
        cache-conda-envs
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Speed up your builds by caching Anaconda environments on GitHub Actions
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
cache-conda-envs 🐍 ⚡
&lt;/h1&gt;
&lt;p&gt;Speed up your builds by caching Anaconda environments on GitHub Actions&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/epassaro/cache-conda-envs"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;I'm glad to say that the results of my work have been &lt;a href="https://github.com/conda-incubator/setup-miniconda/pull/200"&gt;recently added&lt;/a&gt; to the &lt;code&gt;conda-incubator/setup-miniconda&lt;/code&gt; action's &lt;a href="https://github.com/conda-incubator/setup-miniconda#caching-environments"&gt;documentation&lt;/a&gt; and should reach more developers soon.&lt;/p&gt;

&lt;p&gt;It's worth mentioning that the documentation of &lt;code&gt;actions/cache&lt;/code&gt; included use cases for many package managers, but not for &lt;code&gt;conda&lt;/code&gt;. On the other hand, the &lt;code&gt;setup-miniconda&lt;/code&gt; documentation described a way to cache the downloaded packages, but that method makes the pipelines even slower.&lt;/p&gt;

&lt;p&gt;Finally, I published a post describing the workflow step-by-step.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/epassaro" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9ASgNKYb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--HsPDDyer--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/153937/0f98dd59-8ed3-4b1a-98fc-f6c903a48fb8.jpg" alt="epassaro"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/epassaro/caching-anaconda-environments-in-github-actions-5hde" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Reduce your build times on GitHub Actions by caching Anaconda environments&lt;/h2&gt;
      &lt;h3&gt;epassaro ・ Nov 8 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#github&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#actionshackathon21&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#devops&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>actionshackathon21</category>
    </item>
    <item>
      <title>Client-side rendering vs server-side rendering vs static site generation.</title>
      <author>Niels Stubbe</author>
      <pubDate>Wed, 24 Nov 2021 15:01:34 +0000</pubDate>
      <link>https://dev.to/nstubbe/client-side-rendering-vs-server-side-rendering-vs-static-site-generation-41mh</link>
      <guid>https://dev.to/nstubbe/client-side-rendering-vs-server-side-rendering-vs-static-site-generation-41mh</guid>
      <description>&lt;p&gt;There's more to developing a website than throwing some HTML and back-end code together. An important consideration that is often overlooked, is how a website gets rendered and delivered to users. This can make or break the experience users have, and even severely influence a website's rankings in search engines.&lt;/p&gt;

&lt;p&gt;In this article we'll be taking a look at 3 different approaches to rendering websites with dynamic content, alongside their pros and cons&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#1-clientside-rendering"&gt;
  &lt;/a&gt;
  1. Client-side rendering
&lt;/h2&gt;

&lt;p&gt;Currently the most popular approach when it comes to web applications. Client-site rendering means the client (our user's browser) is responsible for rendering the dynamic parts of our website by leveraging JavaScript and a separate back-end API.&lt;/p&gt;

&lt;p&gt;React, Angular, Vue, JQuery, ... are mostly used for this approach.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works
&lt;/h3&gt;

&lt;p&gt;Let's say we have a website that shows a list of products. When a client loads the website, the browser fetches all the HTML, CSS and JavaScript files needed to initially display the page. &lt;/p&gt;

&lt;p&gt;However, our list of products isn't in those files. That's because we want our list to be dynamic. We want users to be able to sort, filter and search our list to find exactly what they are looking for.&lt;/p&gt;

&lt;p&gt;Instead the client will send a request to our back-end API to retrieve a list of products that match the selected filters. We get that list as a response, and then our client generates the necessary HTML elements to show the products on the page.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-good"&gt;
  &lt;/a&gt;
  ✅ The good
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Excellent for pages with a lot of dynamic and interactive content.&lt;/li&gt;
&lt;li&gt;Cost. We offload processing power (and thus costs) to our clients. Rendering the page is almost entirely done on their machine.&lt;/li&gt;
&lt;li&gt;Easier to scale. We can set up load balancers in front of our back-end API, without having to make changes in our client-side rendered application.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#the-bad"&gt;
  &lt;/a&gt;
  🅾️ The bad
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Client performance. Offloading the work to the client can have an impact on clients with lower end machines. This could be problematic when trying to provide services in lower income areas of the world.&lt;/li&gt;
&lt;li&gt;Bad for SEO. Not a good approach for pages that need to score high in search rankings. The dynamically loaded content could be missed by the crawlers that visit our website.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#when-to-use"&gt;
  &lt;/a&gt;
  When to use
&lt;/h3&gt;

&lt;p&gt;Client-side rendering is best used when dealing with websites that have a lot of dynamic and interactive content, where scaling is important and where we don't really care about SEO. Usually these types of websites are web applications.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#2-serverside-rendering"&gt;
  &lt;/a&gt;
  2. Server-side rendering
&lt;/h2&gt;

&lt;p&gt;Another approach to showing users dynamic and interactive content, is rendering the page on the server and then sending the page to the client with all dynamic content already filled in. This approach is usually found on pages that don't have too many users and have 'basic' interactivity such as internal applications in companies.&lt;/p&gt;

&lt;p&gt;PHP and .NET MVC typically use this approach. We can also configure front-end frameworks such as Vue, React, etc... to use server-side rendering. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works
&lt;/h3&gt;

&lt;p&gt;Looking back at the previous example, we can still create a website with a dynamic list of products. However, instead of retrieving the list of products every time we change one of the filters and letting the client generate and render the HTML, we'll send the filter parameters to a back-end service. This back-end service will then generate the entire page and send it back to the client to display.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-good"&gt;
  &lt;/a&gt;
  ✅ The good
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Faster setup time. Since all logic is in our back-end, there's a lot less boilerplate code we need to write, which can save a lot of time at the start.&lt;/li&gt;
&lt;li&gt;Can be faster than client-side rendering, depending on the clients machine and the complexity of the page that is being loaded.&lt;/li&gt;
&lt;li&gt;No JavaScript needed to create a functioning, interactive website.&lt;/li&gt;
&lt;li&gt;Good for search engines. Since all content is already included in the page on first load, this approach works much better for pages that need to have high search engine scores (such as product description pages).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#the-bad"&gt;
  &lt;/a&gt;
  🅾️ The bad
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Higher cost. A website with a lot of traffic will be much more costly to run when using server-side rendering, since all that rendering work on the server requires a lot of extra processing power.&lt;/li&gt;
&lt;li&gt;Does not scale as well. The required resources are directly proportional to the traffic on our website.&lt;/li&gt;
&lt;li&gt;Not using JavaScript has certain limits. It's important to know these limits and to accept them, instead of trying to work around them down the line. That last situation is something seen a lot in legacy applications, resulting in an unmaintainable mess for a code base.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#when-to-use"&gt;
  &lt;/a&gt;
  When to use
&lt;/h3&gt;

&lt;p&gt;Server-side rendering is best used for sites where we have a good idea of what traffic we can expect. An example of this is a corporate portal that's only accessible to employees. Here we know exactly how many users we can expect, and the amount of users will not be growing x1000 over night. A server-side rendered website that is open to the public however, can see its costs sky-rocket if the service suddenly goes viral. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#3-static-site-generation"&gt;
  &lt;/a&gt;
  3. Static site generation
&lt;/h2&gt;

&lt;p&gt;The final approach to rendering pages is to actually generate them up front. Both client-side and server-side rendering are 'on demand' approaches. The client visits our website and then our server or the clients renders the page they requested. &lt;/p&gt;

&lt;p&gt;Static site generation however will already have all the pages and their content stored on the hosting server, exactly how they'll be shown in the clients browser. This is also why the word 'rendering' is absent here. We don't render anything, because we generate everything up front, removing the burden of rendering content from both the server and the client. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works
&lt;/h3&gt;

&lt;p&gt;A static site it basically the default of how the web worked for a long time. We created the pages we wanted our website to have (home, about, contact, ...) and then hosted those on a web server. However, if we have a product catalogue, we don't want to create a new HTML page manually for each of the products we offer. &lt;/p&gt;

&lt;p&gt;Instead, we can use a static site generator. This way we can provide the list of products from an external API, and the static site generator will then use that list to create a page for each of our products that has all the information needed such as description, pictures, etc...&lt;/p&gt;

&lt;p&gt;My personal website, &lt;a href="http://www.stubbe.io"&gt;www.stubbe.io&lt;/a&gt;, is created using a static site generator. I use Nuxt.js which is based on Vue.js, but there are plenty of others such as Next.js, Hugo, Jekyll, etc...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-good"&gt;
  &lt;/a&gt;
  ✅ The good
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Scales incredibly well. The page generation step only runs when deploying a new version of our website, so the bulk of needed processing power is limited to a short moment in time during each new deploy.&lt;/li&gt;
&lt;li&gt;Very cheap. Static pages can be hosted on almost any server. Combined with a form of caching, we can easily have thousands of visitors with almost no costs.&lt;/li&gt;
&lt;li&gt;Fast and lightweight. Because the pages already exist, clients only need to download and view the page. Neither the client nor the server need to waste any time processing logic.&lt;/li&gt;
&lt;li&gt;Excellent for SEO. Indexing a static website is a breeze for a crawler. The fast load times will also positively impact our ranking in most search engines.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#the-bad"&gt;
  &lt;/a&gt;
  🅾️ The bad
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Not for interactive pages. A fully searchable and filterable product list page is impossible to make static.&lt;/li&gt;
&lt;li&gt;Updates aren't instant. If we add a new product to our catalogue, we will need to re-generate and deploy our website before the product page can be visited.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#when-to-use"&gt;
  &lt;/a&gt;
  When to use
&lt;/h3&gt;

&lt;p&gt;Static site generation is best used when we have content that doesn't change often, and where our ranking in search engines is important. A blog is an excellent example of this. Another example are product description pages. &lt;/p&gt;

&lt;p&gt;More interactive pages such as tables, comment sections, etc... are not suitable to use with static site generation, since we expect them to change often due to actions of our users.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#in-conclusion-which-one-should-we-use"&gt;
  &lt;/a&gt;
  In conclusion, which one should we use?
&lt;/h2&gt;

&lt;p&gt;As with anything programming-related, there's no 'one size fits all' answer. I recommend taking a look at the pros and cons listed in this article and doing some further research before committing to an approach.&lt;/p&gt;

&lt;p&gt;Finally, keep in mind it's possible to combine different technologies. It would be great for interactive pages to be client-site rendered, because we want our user to be able to sort or filter our products, or edit their own profile. Meanwhile we want our product pages to score as high as possible in search engines, so why not statically generated those for the best possible performance?&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading!
&lt;/h2&gt;

&lt;p&gt;I hope you enjoyed this article and now have a better understanding of these three different approaches to generating and rendering dynamic pages.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Questions, remarks, feedback?&lt;/strong&gt; Reach out to me by email via &lt;a href="//mailto:niels@stubbe.io"&gt;niels@stubbe.io&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>architecture</category>
      <category>webdev</category>
      <category>devops</category>
    </item>
    <item>
      <title>Linux / Ubuntu CLI(Command Line Interface) for beginners</title>
      <author>Dahye Ji</author>
      <pubDate>Wed, 24 Nov 2021 14:59:51 +0000</pubDate>
      <link>https://dev.to/daaahailey/linux-ubuntu-clicommand-line-interface-for-beginners-35jc</link>
      <guid>https://dev.to/daaahailey/linux-ubuntu-clicommand-line-interface-for-beginners-35jc</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-is-ubuntu-and-linux"&gt;
  &lt;/a&gt;
  What is Ubuntu and Linux?
&lt;/h1&gt;

&lt;p&gt;To start with, I had the same question myself because I had no idea so I am adding this link.&lt;br&gt;
&lt;a href="https://www.quora.com/What-is-difference-between-Ubuntu-and-Linux"&gt;What is difference between Ubuntu and Linux?&lt;/a&gt;&lt;br&gt;
Linux as an operating system (although it is actually a kernel but we don't need to get into that&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#linux"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.linux.com/what-is-linux/"&gt;Linux&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Just like Windows, iOS, and Mac OS, Linux is an operating system. In fact, one of the most popular platforms on the planet, Android, is powered by the Linux operating system. An operating system is software that manages all of the hardware resources associated with your desktop or laptop. To put it simply, the operating system manages the communication between your software and your hardware. Without the operating system (OS), the software wouldn't function.&lt;br&gt;
&lt;strong&gt;Kernel&lt;/strong&gt; – This is the one piece of the whole that is actually called Linux. The kernel is the core of the system and manages the CPU, memory, and peripheral devices. The &lt;u&gt;kernel is the lowest level of the OS.&lt;/u&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#ubuntu"&gt;
  &lt;/a&gt;
  &lt;a href="https://ubuntu.com/tutorials/command-line-for-beginners#1-overview"&gt;Ubuntu&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Ubuntu is a complete Linux operating system, freely available with both community and professional support.&lt;/p&gt;

&lt;p&gt;Ubuntu is a Linux distribution.&lt;br&gt;
Distribution is an operating system made from a software collection that is based upon the Linux kernel.&lt;br&gt;
So, Ubuntu is Operating system built on Linux.(if you click their names, you can go to their website and find out more about them)&lt;/p&gt;

&lt;p&gt;At the class, we practiced using command line using &lt;a href="https://www.goorm.io/"&gt;goorm ide&lt;/a&gt;!&lt;br&gt;
goorm is cloud-based ide(integrated development environment) and they use Amazon EC2(Amazon Elastic Compute Cloud)for their service.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#command-lines-for-beginners"&gt;
  &lt;/a&gt;
  Command Lines for beginners
&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;&lt;strong&gt;mkdir&lt;/strong&gt;&lt;/code&gt; make directory&lt;br&gt;
&lt;code&gt;&lt;strong&gt;cd&lt;/strong&gt;&lt;/code&gt; change directory&lt;br&gt;
*You can change the working directory using the cd command&lt;br&gt;
&lt;code&gt;&lt;strong&gt;cd ..&lt;/strong&gt;&lt;/code&gt; go up to the parent directory&lt;br&gt;
&lt;code&gt;&lt;strong&gt;cd /&lt;/strong&gt;&lt;/code&gt; using “/” at the start of your path means “starting from the root directory” so it goes to root directory&lt;br&gt;
&lt;code&gt;&lt;strong&gt;cd ~&lt;/strong&gt;&lt;/code&gt; character (”~”) at the start of your path similarly means “starting from my home directory”. It also goes to root directory&lt;br&gt;
&lt;code&gt;&lt;strong&gt;pwd&lt;/strong&gt;&lt;/code&gt; print working directory(use this when you don't know where you are at currently, it will show you your working directory)&lt;br&gt;
&lt;code&gt;&lt;strong&gt;ls&lt;/strong&gt;&lt;/code&gt; print file list of current directory&lt;br&gt;
&lt;code&gt;&lt;strong&gt;ls -a&lt;/strong&gt;&lt;/code&gt; all, print all of the files including hidden files of current directory&lt;br&gt;
&lt;code&gt;&lt;strong&gt;ls -al&lt;/strong&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;strong&gt;touch&lt;/strong&gt;&lt;/code&gt; filename : create file named filename&lt;br&gt;
(i.g: &lt;code&gt;touch test.txt&lt;/code&gt; will make txt file named test)&lt;/p&gt;

</description>
      <category>linux</category>
      <category>ubuntu</category>
      <category>cli</category>
      <category>commandlineinterface</category>
    </item>
    <item>
      <title>VS Code extensions to increase your Productivity</title>
      <author>Haris#</author>
      <pubDate>Wed, 24 Nov 2021 14:59:19 +0000</pubDate>
      <link>https://dev.to/harishash/vs-code-extensions-to-increase-your-productivity-eeb</link>
      <guid>https://dev.to/harishash/vs-code-extensions-to-increase-your-productivity-eeb</guid>
      <description>&lt;p&gt;Hey everyone, here's another VS Code extensions post that'll help you boost your productivity and fast-track your workflow.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tabnine"&gt;
  &lt;/a&gt;
  Tabnine:
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--leiJhLJ1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7vij8oefen003v4jqpva.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--leiJhLJ1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7vij8oefen003v4jqpva.png" alt="Tabnine for VS Code" width="880" height="237"&gt;&lt;/a&gt;It is the world's leading AI tool trusted by 1 million developers in almost all programming languages. Tabnine AI studies your code using deep learning to predict and create customized suggestions depending  on how you write your own code. It can help you cut your coding time to less than half, and minimize the chances of mistakes. It’s local completion model runs on your machine keeping your code safe and Tabnine even works offline. Tabnine supports most of the popular libraries, frameworks and languages including Javascript, Java, React, Python, Vue, PHP, Kotlin, Angular, C / C++/ C# Rust &amp;amp; Typescript,&lt;/p&gt;

&lt;p&gt;If you like to work in teams they have a pro version that is trained using advanced AI models. Tabnine is trained while you’re on the team project and even a small interaction with it will improve it’s AI accuracy improving team productivity. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=TabNine.tabnine-vscode"&gt;Get Tabnine&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#better-comments"&gt;
  &lt;/a&gt;
  Better Comments:
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kte4nLh3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ywkzpfn5o9lglfltafwf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kte4nLh3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ywkzpfn5o9lglfltafwf.png" alt="Better Comments for VS Code" width="880" height="152"&gt;&lt;/a&gt;Better comments is an extension that can help you create “Human friendly” comments in your code. It is an example of how a small idea can help you increase your productivity and improve the quality of your work. Using this extension you can categorize your annotations into queries, alerts, Highlights and To do’s. This extension also gives you an option for comment style other than default comment style that can be selected through settings. Personally, It helps me spot important To Do's that might get skipped from my agenda.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=aaron-bond.better-comments"&gt;Get Better Comments&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#blox"&gt;
  &lt;/a&gt;
  blox:
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xmindpsA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/knbg2txwoctso6bygiin.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xmindpsA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/knbg2txwoctso6bygiin.png" alt="blox for VS Code" width="880" height="167"&gt;&lt;/a&gt;blox is another extension that can help you improve your productivity as it lets you drop code snippets with a single click. It’s aimed at fast tracking the developer workflow through the ease of adding pre-built UI components without leaving your VS code window. blox is supported by React, Angular, Vue and TailwindCSS. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=vsblox.blox"&gt;Get blox&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#stepsize"&gt;
  &lt;/a&gt;
  Stepsize:
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rhpabWay--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cfct0ljnhd58khn78fyp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rhpabWay--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cfct0ljnhd58khn78fyp.png" alt="Stepsize for VS Code" width="880" height="153"&gt;&lt;/a&gt;Stepsize helps you bookmark your code, report technical debt and code to refactor. If you find an issue while coding that needs to be fixed but you don’t have enough time to do it, In that case you can bookmark code and create TODOs straight in your IDE without compromising on your work or affecting your workflow. Stepsize also allows you to collaborate with your teammates on maintenance and refactoring work. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=Stepsize.stepsize"&gt;Get Stepsize&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#sonarlint"&gt;
  &lt;/a&gt;
  SonarLint:
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oOslsuKN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2j4z3gm3qrb5y8zb6zra.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oOslsuKN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2j4z3gm3qrb5y8zb6zra.png" alt="SonarLint for VS Code" width="880" height="167"&gt;&lt;/a&gt;Sonarlint is another extension for devs that lets you fix coding issues even before they exist. For example, just like spell checker, SonarLint points out bugs and Security Vulnerabilities as you write your code, with guidance on how you can fix them before the code is even committed. SonarLint in VS Code supports JavaScript, TypeScript, Python, Java, HTML &amp;amp; PHP code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=SonarSource.sonarlint-vscode"&gt;Get SonarLint&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope y'all enjoy using these extensions!&lt;/p&gt;

&lt;p&gt;Happy Developing!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>vscode</category>
      <category>productivity</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Amazon Machine Learning| ML Key Concepts</title>
      <author>‪Karim Negm‬‏</author>
      <pubDate>Wed, 24 Nov 2021 14:56:34 +0000</pubDate>
      <link>https://dev.to/awsmenacommunity/amazon-machine-learning-ml-key-concepts-38bp</link>
      <guid>https://dev.to/awsmenacommunity/amazon-machine-learning-ml-key-concepts-38bp</guid>
      <description>&lt;h1&gt;
  &lt;a href="#amazon-machine-learning-key-concepts"&gt;
  &lt;/a&gt;
  Amazon Machine Learning Key Concepts
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Data sources&lt;/strong&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Term&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Definition&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Attribute&lt;/td&gt;
&lt;td&gt;A unique, named property within an observation. In tabular-formatted data such as spreadsheets or CSV files&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Datasource Name&lt;/td&gt;
&lt;td&gt;A unique name for a dataset&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Input Data&lt;/td&gt;
&lt;td&gt;Collective name for all the observations that are referred to by a datasource.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Location&lt;/td&gt;
&lt;td&gt;Amazon ML can use data that is stored within Amazon S3 buckets, Amazon Redshift databases, or MySQL databases in Amazon Relational Database Service (RDS)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Observation&lt;/td&gt;
&lt;td&gt;A single data point that is part of a datasource&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Schema&lt;/td&gt;
&lt;td&gt;The information needed to interpret the input data, including attribute names and their assigned data types, and names of special attributes.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Statistics&lt;/td&gt;
&lt;td&gt;Summary statistics for each attribute in the input data&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Status&lt;/td&gt;
&lt;td&gt;Indicates the current state of the datasource, such as In Progress, Completed, or Failed.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Target Attribute&lt;/td&gt;
&lt;td&gt;the target attribute is the attribute whose value will be predicted by a trained ML model&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;




&lt;h2&gt;
  &lt;a href="#ml-models"&gt;
  &lt;/a&gt;
  ML Models
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Term&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Definition&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Regression&lt;/td&gt;
&lt;td&gt;ML model to predict a numeric value&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Multiclass&lt;/td&gt;
&lt;td&gt;ML model to predict values that belong to a limited, pre-defined set of permissible values.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Binary&lt;/td&gt;
&lt;td&gt;ML model to predict values that can only have one of two state&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Model Size&lt;/td&gt;
&lt;td&gt;ML models capture and store patterns. The more patterns a ML model stores, the bigger it will be. ML model size is described in Mbytes.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Number of Passes&lt;/td&gt;
&lt;td&gt;he number of times that you let Amazon ML use the same data records is called the number of passes.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Regularization&lt;/td&gt;
&lt;td&gt;Regularization is a machine learning technique that you can use to obtain higher-quality models&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;




&lt;h2&gt;
  &lt;a href="#evaluations"&gt;
  &lt;/a&gt;
  Evaluations
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Term&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Definition&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Model Insights&lt;/td&gt;
&lt;td&gt;Amazon ML provides you with a metric to evaluate the predictive performance of your model.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Precision&lt;/td&gt;
&lt;td&gt;the number of positive class predictions that actually belong to the positive class.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Recall&lt;/td&gt;
&lt;td&gt;the number of positive class predictions made out of all positive examples in the dataset.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AUC&lt;/td&gt;
&lt;td&gt;Area Under the ROC Curve (AUC) measures the ability of a binary ML model to predict a higher score for positive examples as compared to negative examples&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Accuracy&lt;/td&gt;
&lt;td&gt;Accuracy measures the percentage of correct predictions.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;F1-score&lt;/td&gt;
&lt;td&gt;The macro-averaged F1-score is used to evaluate the predictive performance of multiclass ML models.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RMSE&lt;/td&gt;
&lt;td&gt;The Root Mean Square Error (RMSE) is a metric used to evaluate the predictive performance of regression ML models.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cut-off&lt;/td&gt;
&lt;td&gt;The cut-off is the threshold that you use to determine whether a predicted value is correct or not.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NA98CXHf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.pinimg.com/736x/7d/49/d5/7d49d532ebbdd5247f121adfbe77b688.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NA98CXHf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.pinimg.com/736x/7d/49/d5/7d49d532ebbdd5247f121adfbe77b688.jpg" alt="" width="734" height="414"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#batch-predictions"&gt;
  &lt;/a&gt;
  Batch Predictions
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Term&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Definition&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Output Location&lt;/td&gt;
&lt;td&gt;The results of a batch prediction are stored in an S3 bucket output location.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Manifest File&lt;/td&gt;
&lt;td&gt;This file relates each input data file with its associated batch prediction results. It is stored in the S3 bucket output location.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;




&lt;h2&gt;
  &lt;a href="#realtime-predictions"&gt;
  &lt;/a&gt;
  Real-time Predictions
&lt;/h2&gt;

&lt;p&gt;Real-time predictions are for applications with a low latency requirement, such as interactive web, mobile, or desktop applications.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Term&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Definition&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Real-time Prediction API&lt;/td&gt;
&lt;td&gt;The Real-time Prediction API accepts a single input observation in the request payload and returns the prediction in the response.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Real-time Prediction Endpoint&lt;/td&gt;
&lt;td&gt;To use an ML model with the real-time prediction API, you need to create a real-time prediction endpoint. Once created, the endpoint contains the URL that you can use to request real-time predictions.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;AWS WhitePaper Summary&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>aws</category>
      <category>datascience</category>
    </item>
    <item>
      <title>Remix for Beginners</title>
      <author>Ben Patton</author>
      <pubDate>Wed, 24 Nov 2021 14:35:28 +0000</pubDate>
      <link>https://dev.to/benanna2019/remix-for-beginners-1dhi</link>
      <guid>https://dev.to/benanna2019/remix-for-beginners-1dhi</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tgicwQGM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1024/0%2A_r4KYqT4SMFhgZ8_" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tgicwQGM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1024/0%2A_r4KYqT4SMFhgZ8_" alt="" width="880" height="586"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Photo by Markus Spiske on Unsplash&lt;/em&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#why-i-love-remix-for-those-learning-to-code"&gt;
  &lt;/a&gt;
  Why I Love Remix for Those Learning to Code
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#first-remix-vs-"&gt;
  &lt;/a&gt;
  First, Remix vs ……
&lt;/h4&gt;

&lt;p&gt;One of the things I have noticed is that there is a lot of comparison between Remix and Nextjs. There are also a few haters on Remix because they hate React and don’t think anything remotely related to React could be good/enjoyable.&lt;/p&gt;

&lt;p&gt;For context, I got labeled as having Stockholm Syndrome for React because I was invested in Remix before it was open source. Like, can we not be interested in things anymore 🤷‍♂️&lt;/p&gt;

&lt;p&gt;In one sense comparisons are natural. It is how we understand a new thing or just a thing in general. We try to match it up to something else. This is why Remix is compared to Svelte and Next. All of them are great. The Remix team would tell you that.&lt;/p&gt;

&lt;p&gt;I don’t think comparison from a ‘what does this framework do that this other framework does not do’ is the fairest way to examine. I think philosophies are far more valuable. So I will start with that philosophy, share what Remix does, and then bookend with my thoughts on Remix for those beginning to learn web development.&lt;/p&gt;

&lt;p&gt;Quick note: I am sharing as someone who has only been in this industry a little over a year. I believe that Remix is a good choice for anyone beyond the beginner level as well. My perspective on this is that I just learned to code and my mindset is very much set towards helping those entering this field learn in the best way.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#remix-for-beginners"&gt;
  &lt;/a&gt;
  Remix for Beginners
&lt;/h3&gt;

&lt;p&gt;This will just be a list of things I like and appreciate.&lt;/p&gt;

&lt;p&gt;Let me start with a quote from Remix’s documentation on their philosophy for and why Remix.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;If you get good at Remix, you will accidentally get good at web development in general.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you are just beginning because Remix is built on Web fundamentals/standards/best practices, Remix will help you get good as you build. The educator heart and spirit of Ryan, Michael, and their team is why using Remix will get you where you want to go. This is the most important reason, in my opinion, Remix is optimal for beginners.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;‘loader’ functions — If you are fetching anything, use a loader. The name is intuitive. For a beginner, you can easily discern that if I need to ‘load’ some data, use a loader.&lt;/li&gt;
&lt;li&gt;‘action’ functions — If you need to add, update, or delete some data, you need to ‘act’ on the data. For a beginner, you can easily discern that if I need to do something with data, it is an action.&lt;/li&gt;
&lt;li&gt;Routes — This could be a long post on its own. But each file in your routes folder, &lt;em&gt;is a route.&lt;/em&gt; You can nest routes based off of parent routes. For instance, say you have a ‘About’ page for your company. You might want a ‘team’ members nested page. In that page you might want a nested individual member page. Things like that. You can do all of this by creating an about.js file and then an about folder with the different nested pages inside that folder.&lt;/li&gt;
&lt;li&gt;Layouts — Much like the routes, because layouts and routes tend to go together, you can have nested layouts.&lt;/li&gt;
&lt;li&gt;React Simplified — the only thing you really need to know about React is how to write html from a function. This is really simple. This is called jsx, but within Remix, it is basically html. You can still get all the goodies of props, state, and passing data into the html, but simply put, just know how to write html within a function and you are good to go. Below is an example.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export default function Page() {
   return (

     &amp;lt;div&amp;gt;
       Some page content here
     &amp;lt;/div&amp;gt;

  )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Meta tags — This is kind of a small thing, but I never cared to write meta tags because it seemed kind of convoluted for me. But writing a function that returns those things is really straightforward.&lt;/li&gt;
&lt;li&gt;Styling — For a beginner, most likely they are learning traditional CSS or potentially tailwind. Remix handles styles a little differently by making each pages CSS its own unique url. The hidden benefit of this to a beginner is that you will not have the frustration of styles mixing and changing things on other pages. If you have ever had two different html files with different CSS but named some class the same or had different styles for the same elements, you have probably run into a CSS issue. No more!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I want beginners who are already on a really difficult path of changing careers and taking that risk to be able to choose things that ‘work for them’ by teaching them not only the skills that will help them get a job, but also the standards behind what they are learning and working towards.&lt;/p&gt;

&lt;p&gt;I like Remix for beginners because they will learn skills and be able to get a job. But more than that I like that it is built from educators. I like that you get good at things you didn’t expect because when you move into a career, if you have that foundational web development knowledge, not just skills, you can really go anywhere.&lt;/p&gt;

&lt;p&gt;Thanks Remix Team!&lt;/p&gt;

</description>
      <category>changingcareers</category>
      <category>learningtocode</category>
      <category>softwaredeveloper</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Melhorando seus Testes com GRAMÁTICA</title>
      <author>Daniel Reis</author>
      <pubDate>Wed, 24 Nov 2021 14:30:47 +0000</pubDate>
      <link>https://dev.to/danielhe4rt/melhorando-seus-testes-com-gramatica-2gh</link>
      <guid>https://dev.to/danielhe4rt/melhorando-seus-testes-com-gramatica-2gh</guid>
      <description>&lt;h2&gt;
  &lt;a href="#pr%C3%B3logo"&gt;
  &lt;/a&gt;
  Prólogo
&lt;/h2&gt;

&lt;p&gt;Há tempos eu venho fazendo code reviews em repositórios dos meus viewers, que pedem esse CR em live etc e eu fico muito atento as boas práticas mas eu vejo que algo muito comum entre essas amostras é como falta alguns entendimentos para nomes de métodos ou até mesmo as classes.&lt;/p&gt;

&lt;p&gt;Como entender o que o método &lt;strong&gt;handle&lt;/strong&gt; faz no &lt;strong&gt;AppRepository&lt;/strong&gt;? Ou o que o teste &lt;strong&gt;test_user_fails&lt;/strong&gt; faz na suite &lt;strong&gt;UserCommandsTest&lt;/strong&gt;? Muitas vezes falta descrição ou objetividade no que é escrito te faz perder muito tempo tentando entender como funciona ou qual deveria ser o comportamento correto daquele bloco de código.&lt;/p&gt;

&lt;p&gt;Há muito tempo essa prática de não ser auto descritivo vem sendo sustentada pelos desenvolvedores do mundo a fora e você pode entender que quando uma empresa te pede para corrigir esse tipo de coisa, para ser mais assertivo em como deixar uma função legível, é porquê essa empresa se preocupa mais com a QUALIDADE do código entregue do que com qualquer outra coisa.&lt;/p&gt;

&lt;p&gt;Existem muitos pontos que dizem se um código é limpo ou não, mas um deles certamente é a clareza de como você escreve seus métodos ou documentação.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#suites-de-testes"&gt;
  &lt;/a&gt;
  Suites de Testes
&lt;/h2&gt;

&lt;p&gt;O cenário mais comum onde devs vem pecando cada vez mais em descrições que não descrevem nada é no PIOR LUGAR pra isso acontecer: SUITES DE FUCKING TESTES!&lt;/p&gt;

&lt;p&gt;Cara, você ter uma suíte com 103782183129 testes que não são auto descritivos é um tiro no pé IMENSO do ponto de vista de quem vai dar manutenção nisso no futuro. Testes devem cobrir cenários especificos, porém, se você não CONTAR ou especificar os comportamentos no nome da função, já não vai servir de muita coisa. Vamos pra um exemplo: &lt;/p&gt;

&lt;p&gt;Peguei um código pra revisar onde o método deveria checar se uma transação estava sendo feita para o mesmo usuário e estava sendo escrito assim:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;test_payer_and_payee_equals&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nf"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"payer and payee equals"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Quando eu li isso, inicialmente eu fiquei confuso porquê pra mim na primeira interpretação até ler o código, deveria ser pra checar se os usuários são iguais porém no código eles NÃO deveriam ser iguais. &lt;/p&gt;

&lt;p&gt;Agora vamos entender algumas palavrinhas que podem de fato ajudar a ter um melhor entendimento para a criação de sentenças de testes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Can = Usado quando o usuário DEVE ter aquele comportamento e é um teste não tem exceções (fluxo de como deveria funcionar)&lt;/li&gt;
&lt;li&gt;Should = Usado quando o usuário DEVERIA ter aquele comportamento e é um teste que vai cair em alguma exceção (fluxo de como deveria chegar na exceção)&lt;/li&gt;
&lt;li&gt;Should NOT = Usado quando o usuário não deveria ter algum comportamento e é um teste que vai cair em alguma exceção (fluxo de como deveria chegar na exceção)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Se eu fosse reescrever o nome da função pra ser algo mais claro, ficaria assim:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;test_payer_and_payee_should_not_be_the_same&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nf"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"payer and payee should not be the same"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;ou&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;test_user_should_not_send_money_to_his_own_account&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nf"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"user should not send money to his own account"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ficou bem mais descritivo né? O esperado de um teste é que o nome da função seja a descrição do que deve acontecer ali dentro. Agora vamos pro segundo exemplo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;test_value_is_greather_than_zero&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nf"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"value is greather than zero"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Esse aqui ficou bem confuso... O nome da suite é &lt;strong&gt;TransactionControllerTest&lt;/strong&gt; então você consegue assumir algumas coisas vendo o nome desse teste, porém, você assumir algo quer dizer que o teste não diz o que faz e isso é um problema se você tiver de refatorar ele lá na frente. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;O que eu interpretei: o valor (que eu não sei do que exatamente) tem/deve que ser é maior que zero.&lt;/li&gt;
&lt;li&gt;O que deveria ser: o valor da transação deve ser maior que zero.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Agora reescrevendo essa função temos as possibilidades:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;test_user_should_transfer_an_amount_greather_than_zero&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nf"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"user should transfer an amount greather than zero"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;ou&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;test_transaction_amount_should_be_greather_than_zero&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nf"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"transaction amount should be greather than zero"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Esses cenários até o momento não envolveram a palavra "should" e "not" que especificam que os cenários deverão cair em exceções. &lt;/p&gt;

&lt;p&gt;Agora vamos para um cenário positivo onde nada daria erro contemplando a mesma suíte de testes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;test_balance_payee_is_ok_after_transaction&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nf"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"balance payee is ok after transaction"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Eu vi que é o único teste que retorna 201, então eu já entendi que ele vai pelo lado certo da coisa. Porém, ainda não achei o nome do teste descritivo ao ponto de saber o que tá rolando.&lt;/p&gt;

&lt;p&gt;Você citar um comportamento do TESTE no nome não fica tão legal, afinal, o seu teste precisa garantir que o valor da carteira do pagador vai estar OK, certo?! Isso é pra dentro do código, não pro nome.&lt;/p&gt;

&lt;p&gt;O que poderia fazer para melhorar esse cenário:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;test_user_can_create_a_new_deposit&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;test_user_can_create_a_new_withdraw&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;test_user_can_create_a_new_transaction&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nf"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"User can create a new deposit"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nf"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"User can create a new withdraw"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nf"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"User can create a new transaction"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Mais assertivo que isso eu creio que seja impossível. Usando o &lt;strong&gt;can&lt;/strong&gt; nós estamos AFIRMANDO que o retorno tem que ser algo positivo, já que o usuário PODE fazer aquela ação. &lt;/p&gt;

&lt;p&gt;Espero que você tenha gostado da ideia proposta no post, não esqueça de deixar de compartilhar nas redes sociais e deixar o like aqui na plataforma!&lt;/p&gt;

</description>
      <category>testing</category>
      <category>php</category>
      <category>braziliandevs</category>
      <category>programming</category>
    </item>
    <item>
      <title>Twig - The Ultimate Guide to the Premier PHP Templating Language</title>
      <author>Reuben Walker, Jr.</author>
      <pubDate>Wed, 24 Nov 2021 14:30:35 +0000</pubDate>
      <link>https://dev.to/reubenwalker64/twig-the-ultimate-guide-to-the-premier-php-templating-language-3a6j</link>
      <guid>https://dev.to/reubenwalker64/twig-the-ultimate-guide-to-the-premier-php-templating-language-3a6j</guid>
      <description>&lt;p&gt;Learn how to make the code for your site’s frontend simpler, cleaner, dryer, more logical, and secure with Twig.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--19mjpzju--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tceijj5v88v6lmm31smw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--19mjpzju--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tceijj5v88v6lmm31smw.png" alt="Twig website banner" width="705" height="150"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-in-this-article-for-you"&gt;
  &lt;/a&gt;
  WHAT’S IN THIS ARTICLE FOR YOU?
&lt;/h2&gt;

&lt;p&gt;You will discover Twig’s history and what the language is.&lt;/p&gt;

&lt;p&gt;You will see why you should use it.&lt;/p&gt;

&lt;p&gt;You will begin learning how to use it.&lt;/p&gt;

&lt;p&gt;Twig is a PHP templating language that outputs variables into the HTML of views in MVC (models, views, controllers) programming. So, it contributes to the structure of a website’s frontend.&lt;/p&gt;

&lt;p&gt;For your future reference, here’s the link to the &lt;a href="https://github.com/twigphp/Twig"&gt;official TWIG repository on GitHub&lt;/a&gt;. I will link to it at the bottom of the article as well.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://symfonystation.com/Twig-Ultimate-Guide-PHP-Templating-Language"&gt;Read the full article on Symfony Station&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>twig</category>
      <category>php</category>
      <category>drupal</category>
      <category>symfony</category>
    </item>
  </channel>
</rss>
