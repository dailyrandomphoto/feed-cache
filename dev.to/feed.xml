<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>CLOSURES: A comprehensive guide to Closures-Functions and Scopes.</title>
      <author>Tony Edgal</author>
      <pubDate>Tue, 29 Jun 2021 13:27:51 +0000</pubDate>
      <link>https://dev.to/tonyedgal/closures-a-comprehensive-guide-to-closures-functions-and-scopes-aga</link>
      <guid>https://dev.to/tonyedgal/closures-a-comprehensive-guide-to-closures-functions-and-scopes-aga</guid>
      <description>&lt;p&gt;In this article I will go over the following&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Functions and scopes&lt;/li&gt;
&lt;li&gt;What are closures in JavaScript&lt;/li&gt;
&lt;li&gt;How closures are handled in memory&lt;/li&gt;
&lt;li&gt;Why it is named &lt;code&gt;closure&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#functions"&gt;
  &lt;/a&gt;
  FUNCTIONS
&lt;/h4&gt;

&lt;p&gt;A function is similar to a procedure or a set of statements that is used to perform a specific task. For a procedure to qualify as a function, it should take some input, perform various actions on that data and return a result.&lt;/p&gt;

&lt;p&gt;Generally speaking, there are several ways to define functions&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Function declaration&lt;/li&gt;
&lt;li&gt;Function expression&lt;/li&gt;
&lt;li&gt;Arrow syntax
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Function daclaration - Uses the function keyword&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myFunc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

&lt;span class="c1"&gt;// Function expression - the name can be omitted, giving an anonymous function&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt; &lt;span class="c1"&gt;// name omitted&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myFuncTwo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt; &lt;span class="c1"&gt;//function name included&lt;/span&gt;

&lt;span class="c1"&gt;// Arrow functions - arrow function syntax is a shorter syntax for a function expression&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#scopes"&gt;
  &lt;/a&gt;
  SCOPES
&lt;/h4&gt;

&lt;p&gt;A scope is a policy that manages the availability of variables. A variable defined inside a scope is accessible only within that scope, but inaccessible outside.&lt;/p&gt;

&lt;p&gt;The scope where a variable is located decides if it is accessible or inaccessible from certain parts of the program.&lt;/p&gt;

&lt;p&gt;There are two types of scopes&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Global Scope&lt;/li&gt;
&lt;li&gt;Block or Local scope
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Global scopes are variables that are accessible from any part of the program&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="c1"&gt;// variable declared in the global scope&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;square&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;square&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;// outputs 4&lt;/span&gt;

&lt;span class="c1"&gt;// Block/local scope refers to variables declared within a block '{}'&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="c1"&gt;// variable declared in the global scope&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;times&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="c1"&gt;// variable declared in the block/local scope&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;g&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;times&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;// Outputs 25&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// outputs undefined, because it was defined within the times function.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#closure"&gt;
  &lt;/a&gt;
  CLOSURE
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;Closure&lt;/code&gt; - A function that is a first-class object, that has access to variables defined in the same local scope in which it was defined.&lt;/p&gt;

&lt;p&gt;In other words, a closure gives you access to an outer function’s scope from an inner function.&lt;/p&gt;

&lt;p&gt;Lets look at closure with three examples&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;extFunc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Define a variable local to extFunc&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;extVar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I used a closure&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;intFunc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// We can access the variable defined in the scope of extFunc within inFunc&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;extVar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;// Return the inner function. Note that we're not calling it here!&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;intFunc&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Call the outer function, which returns the inner function&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;closure&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;extFunc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Call the returned function that we stored as a variable&lt;/span&gt;
&lt;span class="nx"&gt;closure&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// outputs 'I used a closure'&lt;/span&gt;

&lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;minutes is equal to&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;timeConversion&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;minutes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;minutesToSeconds&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;minToSec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;minutes&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;minutes&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; seconds`&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;minToSec&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;convert&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;timeConversion&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;// outputs "2 minutes is equal to 120 seconds"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timeConversion&lt;/span&gt;&lt;span class="p"&gt;()())&lt;/span&gt; &lt;span class="c1"&gt;// outputs "2 minutes is equal to 120 seconds"&lt;/span&gt;

&lt;span class="c1"&gt;// 3&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;scores&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;85&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;displayScore&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;score&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;displayScore&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;showScore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;scores&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;showScore&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;in example 1&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;extFunc()&lt;/code&gt; creates a local variable called &lt;code&gt;extVar&lt;/code&gt; and a function called &lt;code&gt;intFunc()&lt;/code&gt;. The &lt;code&gt;intFunc()&lt;/code&gt; function is an inner function that is defined inside &lt;code&gt;extFunc()&lt;/code&gt; and is available only within the body of the &lt;code&gt;extFunc()&lt;/code&gt; function. Note that the &lt;code&gt;intFunc()&lt;/code&gt; function has no local variables of its own. However, since inner functions have access to the variables of outer functions, &lt;code&gt;intFunc()&lt;/code&gt; can access the variable name declared in the parent function, &lt;code&gt;extFunc()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;in example 2&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
the &lt;code&gt;return intFunc&lt;/code&gt; line in &lt;strong&gt;&lt;em&gt;1&lt;/em&gt;&lt;/strong&gt; can be avoided by returning the internal function at the time of declaration.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;in example 3&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
in &lt;strong&gt;&lt;em&gt;3&lt;/em&gt;&lt;/strong&gt; the internal function is not returned (only called) because of the alert command within its block.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// switching the code in 3 from alert to console.log&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;scores&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;85&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;displayScore&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;score&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;displayScore&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;showScore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;scores&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;showScore&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// outputs 85 to the console&lt;/span&gt;
&lt;span class="c1"&gt;// get TypeError showScore is not a function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At first glance, it might seem unintuitive that this code still works. In some programming languages, the local variables within a function exist for just the duration of that function's execution. Once &lt;code&gt;scores()&lt;/code&gt; finishes executing, you might expect that the name variable would no longer be accessible. However, because the code still works as expected, this is obviously not the case in JavaScript.&lt;/p&gt;

&lt;p&gt;The reason is that functions in JavaScript form closures. A closure is the combination of a function and the lexical environment within which that function was declared. This environment consists of any local variables that were in-scope at the time the closure was created. In this case, &lt;code&gt;showScore&lt;/code&gt; is a reference to the instance of the function &lt;code&gt;displayScore&lt;/code&gt; that is created when &lt;code&gt;scores()&lt;/code&gt; is run. The instance of &lt;code&gt;displayScore&lt;/code&gt; maintains a reference to its lexical environment, within which the variable name exists. For this reason, when &lt;code&gt;showScore&lt;/code&gt; is invoked, the variable &lt;code&gt;score&lt;/code&gt; remains available for use, and "85" is passed to console, followed by a TypeError.&lt;/p&gt;

&lt;p&gt;When the internal function is created, the Javascript engine detects that for the function to be executed in the future, a reference will be needed to variable declared in the external function scope.&lt;/p&gt;

&lt;p&gt;To solve this, the engine keeps a link to this variable for later use, and stores that link in a special function scoped execution context.&lt;/p&gt;

&lt;p&gt;Such a function with 'memory' about the environment where it was created is simply known as: &lt;code&gt;a Closure&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#how-closures-are-handled-in-memory"&gt;
  &lt;/a&gt;
  HOW CLOSURES ARE HANDLED IN MEMORY
&lt;/h4&gt;

&lt;p&gt;When a pure function that depends on its own arguments and data is called, its gets pushed to the &lt;code&gt;**CALL STACK**&lt;/code&gt;, where it is executed and it data is kept in memory until it is removed.&lt;/p&gt;

&lt;p&gt;But when a function references data outside it's own scope, i.e. from its lexical environment or an external function, for the interpreter to call this function or know the value of this free variables, it creates a &lt;code&gt;closure&lt;/code&gt; to store them in place in memory where they can be accessed later. That area in memory is called a &lt;code&gt;**HEAP MEMORY**&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now unlike the &lt;code&gt;call stack&lt;/code&gt; which is short-lived, the &lt;code&gt;heap memory&lt;/code&gt; can store data indefinitely and decide when it's ready to be discarded.&lt;/p&gt;

&lt;p&gt;Closures require more memory and processing power than regular functions but has many important practical uses, e.g. &lt;code&gt;Data Encapsulation&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Data encapsulation is simply a method of protecting data to prevent it from leaking to where it is not needed.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#why-the-name-closures-then"&gt;
  &lt;/a&gt;
  WHY THE NAME CLOSURES THEN?
&lt;/h5&gt;

&lt;p&gt;This is because the internal function inspects it's environment and closes over the variables in the lexical scope in which it is defined, and that it needs to remember for future use. The references to the variables are closed in a special data structure that can only be accessed by the Javascript runtime itself.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>closures</category>
      <category>functions</category>
      <category>scopes</category>
    </item>
    <item>
      <title>How to start a Developer Newsletter?</title>
      <author>Suraj Vishwakarma</author>
      <pubDate>Tue, 29 Jun 2021 13:21:49 +0000</pubDate>
      <link>https://dev.to/basecampxd/how-to-start-a-developer-newsletter-24dk</link>
      <guid>https://dev.to/basecampxd/how-to-start-a-developer-newsletter-24dk</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;I unsubscribed a lot of newsletters every week that annoys me, flood my inbox, and distract me from useful messages. They did many things wrong in terms of email formatting, sending to people who are more likely to unsubscribe, and many more. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i5DG-CMp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nxohosujyysk9zpikxp8.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i5DG-CMp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nxohosujyysk9zpikxp8.gif" alt="Newsletter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Today, we are going to look into "How a DEV newsletter should be created and marketed?". &lt;/p&gt;

&lt;p&gt;So let's get started.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-newsletter"&gt;
  &lt;/a&gt;
  What is Newsletter?
&lt;/h1&gt;

&lt;p&gt;Let us start with the basics.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Email Newsletter is a type of email that is sent to the subscribed user to inform them about promotions, latest news, updates, tips, event, and many other things.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The newsletter has been part of marketing for a long time. E-commerce websites have utilized it for sending offers and discount updates to their customer. Users of these websites are more likely to buy something through their newsletter.&lt;/p&gt;

&lt;p&gt;If you own a website then a newsletter becomes an essential part to drive traffic to your website. Every user that visited your website will not return to your website unless and until you send a notification to them about new things about your website. This can be informed through a newsletter that drives traffic to your website.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#when-newsletter-will-not-be-unsubscribed"&gt;
  &lt;/a&gt;
  When Newsletter will not be unsubscribed?
&lt;/h1&gt;

&lt;p&gt;Newsletter should not only inform but also provide content to users that engage them with your newsletter. If we use a newsletter to provide benefits to users then there will be fewer chances of getting unsubscribed.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#subscribe-to-our-weekly-newsletter"&gt;
  &lt;/a&gt;
  Subscribe to Our Weekly Newsletter
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MOQfQMXG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i7nzwporajhyvmvlezaa.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MOQfQMXG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i7nzwporajhyvmvlezaa.PNG" alt="Weekly Newsletter of SurajOnDev"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Subscribe &lt;a href="https://4qrqcv1momr.typeform.com/to/RVoZX0uD"&gt;&lt;strong&gt;Here&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#benefit-of-newsletter"&gt;
  &lt;/a&gt;
  Benefit of Newsletter
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Driving Traffic Back to your website&lt;/li&gt;
&lt;li&gt;Informing about new product&lt;/li&gt;
&lt;li&gt;Building loyal followers&lt;/li&gt;
&lt;li&gt;Building one-to-one relation with your followers&lt;/li&gt;
&lt;li&gt;And Many More&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#recipe-for-a-great-newsletter"&gt;
  &lt;/a&gt;
  Recipe for a great newsletter
&lt;/h1&gt;

&lt;p&gt;As the saying &lt;strong&gt;Content is King&lt;/strong&gt;. If your newsletter values the time of the user with useful content then your newsletter will grow. I have read the article where bloggers used to send a random newsletter without any useful value to their users, this led to many unsubscribed and less opening rate. After changing to the content-oriented newsletter, they have seen growth in their newsletter in terms of opening rate, less unsubscribe rate and more subscribers count.&lt;/p&gt;

&lt;p&gt;So first thing is that your newsletter must provide value to your users.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#points-to-consider"&gt;
  &lt;/a&gt;
  Points to consider
&lt;/h1&gt;

&lt;p&gt;When you have decided to start a developer newsletter, then you should consider the following points:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Your Audience&lt;/strong&gt;: To whom you are sending, their needs, and what they expect from you.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Goal&lt;/strong&gt;: What is the goal of your newsletter? It can be generating web traffic, more sales, providing information, etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Content&lt;/strong&gt;: Content that will engage your users. It can be blog post links, exclusive content, promotional deals, etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Frequency&lt;/strong&gt;: What will be the frequency of your newsletter? It can be daily, weekly, monthly, quarterly, etc.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#websites"&gt;
  &lt;/a&gt;
  Websites
&lt;/h1&gt;

&lt;p&gt;Many websites can help you in creating, managing, marketing, and sending the newsletter to your users.&lt;br&gt;
Here is popular to try out:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getrevue"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.getrevue.co/"&gt;GetRevue&lt;/a&gt;
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Revue makes it easy for writers and publishers to send editorial newsletters — and get paid.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#mailchimp"&gt;
  &lt;/a&gt;
  &lt;a href="https://mailchimp.com/"&gt;Mailchimp&lt;/a&gt;
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Mailchimp is the All-In-One integrated marketing platform for small businesses, to grow their business on your terms. It's easy to use - start for free today!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#sendinblue"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.sendinblue.com/"&gt;Sendinblue&lt;/a&gt;
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Sendinblue is the smartest and most intuitive platform for growing businesses. Thrive digitally as we guide your business with the right marketing &amp;amp; sales tools.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#getresponse"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.getresponse.com/"&gt;GetResponse&lt;/a&gt;
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;GetResponse offers an online platform for email marketing software, landing page creator, webinars hosting, and much more.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#stripo"&gt;
  &lt;/a&gt;
  &lt;a href="https://stripo.email/"&gt;Stripo&lt;/a&gt;
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Stripo provides email builder solutions for multiple industries and teams · Rich integrations with the most popular email systems and clients.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h1&gt;
  &lt;a href="#weekly-newsletter-of-surajondev"&gt;
  &lt;/a&gt;
  Weekly  Newsletter of SurajOnDev
&lt;/h1&gt;

&lt;p&gt;I am very glad to announce that I am going to start a newsletter that will send to you on weekly basis mostly on Friday.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MOQfQMXG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i7nzwporajhyvmvlezaa.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MOQfQMXG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i7nzwporajhyvmvlezaa.PNG" alt="Weekly Newsletter of SurajOnDev"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-you-will-get"&gt;
  &lt;/a&gt;
  What You will get?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Read of the Week&lt;/strong&gt;: 5 best articles hand-picked by myself from different platforms. This article will be developer, self-growth, and productivity-oriented.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Tool of the Week&lt;/strong&gt;: A resource or tool link that will help in easing your work.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Our latest blog post&lt;/strong&gt;: Latest 3 blog post from SurajOnDev that is me.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;-&lt;strong&gt;Free eBook and Resources&lt;/strong&gt;: Occasionally you will get free eBook that are by developers and for developers.&lt;/p&gt;

&lt;p&gt;If this excites you then make sure to subscribe it as the very first issue is coming this weekend.&lt;/p&gt;

&lt;p&gt;Subscribe &lt;a href="https://4qrqcv1momr.typeform.com/to/RVoZX0uD"&gt;&lt;strong&gt;Here&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#last-note"&gt;
  &lt;/a&gt;
  Last Note
&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;I hope this article will help in kickstarting a newsletter of your own. This was a quick guide to think about starting a newsletter with the website to kickstart.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This is the very first blog post of the Developer Newsletter series. We are going to discuss more newsletters in the coming days. So follow me to get an update quickly.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Serverless at (Team) Scale </title>
      <author>AJ Stuyvenberg</author>
      <pubDate>Tue, 29 Jun 2021 13:16:20 +0000</pubDate>
      <link>https://dev.to/aws-builders/serverless-at-team-scale-a8</link>
      <guid>https://dev.to/aws-builders/serverless-at-team-scale-a8</guid>
      <description>&lt;p&gt;One of the great aspects of building Serverless applications is that it's pretty dang easy to get started. You can plop down five lines of yaml in your framework of choice, and deploy a full endpoint comprising an API Gateway, a route, a Lambda function and trigger, IAM role and policy, AND even logging. And the best part is that it's massively scalable. You don't need to deploy a load balancer, understand how a reverse-proxy works, or learn how to set up syslog. You can just push code!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1k3Vj43I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qpriaof6djg65ovxem1m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1k3Vj43I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qpriaof6djg65ovxem1m.png" alt="5 lines of YAML to start"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And yet somehow, so many of our &lt;code&gt;serverless.yml&lt;/code&gt; files come out looking more like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JI76wQQD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uvfkaf80o3j6phzvjjmz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JI76wQQD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uvfkaf80o3j6phzvjjmz.png" alt="2500 lines of YAML to end"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CloudFormation is great! Seriously, this post is not thrashing CloudFormation. It does so much! It manages the state of the services you're configuring, it understands how to resolve dependencies between cloud pieces, and provides a reliable, deterministic way to provision infrastructure. &lt;em&gt;However&lt;/em&gt; - As your Serverless usage ramps up, you'll often find the complexity, size, and subsequent deploy times of your applications grows very quickly.&lt;/p&gt;

&lt;p&gt;Primarily this is due to the fact that your application consumes or provisions numerous AWS resources. This in itself is not a bad thing, the Serverless mantra is to prefer managed services over custom solutions! However, you'll often find your template(s) include a bunch of resources. When you deploy these templates CloudFormation needs to construct a directed, acyclic graph of resources, and check the configuration of each resource before moving on. This takes a long time, upwards of 20 minutes in some cases. These deployment times are challenging as the vast majority (&amp;gt; 90%) of your deployments will only touch the actual business configuration (Lambda function code) for your app!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OFrEBcnP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wm6066n13rj46bponw7w.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OFrEBcnP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wm6066n13rj46bponw7w.jpeg" alt="cartoon graph showing massive deploy times for anything useful"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you grow, you'll also want to solve new business problems with Serverless. This leads to new stacks, and often presents an issue - how does one share infrastructure between Serverless stacks? More specifically, frequently shared infrastructure like cognito pools, VPCs, or API Gateways. You may even run into the dreaded 500 resources per CloudFormation stack error!&lt;/p&gt;

&lt;p&gt;Although it's tempting to reach for a &lt;a href="https://www.npmjs.com/package/serverless-plugin-split-stacks"&gt;plugin&lt;/a&gt; which can split stacks into smaller stacks, that's only going to &lt;em&gt;increase&lt;/em&gt; your deployment times (not to mention overall complexity). It's time to split stacks, but the right answer is not to split one giant stack programmatically. The answer is to &lt;em&gt;split your infrastructure from your code, intentionally&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;To successfully scale your Serverless teams and deployments, you need to divide infrastructure from code, use CloudFormation Outputs to share resources, and leverages SSM to keep non-CloudFormation tools like Terraform in sync.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#divide-and-conquer-your-business-domains-in-the-cloud"&gt;
  &lt;/a&gt;
  Divide and conquer your business domains in the cloud
&lt;/h2&gt;

&lt;p&gt;Specifically, split your long-lived and/or shared infrastructure from the resources you change frequently.&lt;/p&gt;

&lt;p&gt;Frequently changed resources are generally:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lambda function code &amp;amp; configuration&lt;/li&gt;
&lt;li&gt;API Gateway configuration (unless you're using a shared gateway or mono-lambda pattern)&lt;/li&gt;
&lt;li&gt;DynamoDB table (unless it's shared, which I don't typically recommend)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Long-lived infrastructure are things like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cognito configuration&lt;/li&gt;
&lt;li&gt;VPCs&lt;/li&gt;
&lt;li&gt;API Gateways (if they are shared, or you're using a mono-lambda pattern)&lt;/li&gt;
&lt;li&gt;EventBridge&lt;/li&gt;
&lt;li&gt;SNS topics&lt;/li&gt;
&lt;li&gt;Kinesis Producers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The key takeaway here is to move your shared, long term, slowly-changing infrastructure into a separate stack from your domain-specific, often-updated business logic &amp;amp; configuration. This will reduce the cognitive overhead of logic changes, limit bug blast radius, and perhaps most relevant for developers like myself - &lt;em&gt;drastically&lt;/em&gt; cut down on deployment time. If you haven't read my post about how to cut that down even further, check out &lt;a href="https://dev.to/aws-builders/developing-against-the-cloud-55o4/stats"&gt;developing against the cloud&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#warning-signs-which-indicate-your-stacks-are-too-large"&gt;
  &lt;/a&gt;
  Warning signs which indicate your stacks are too large
&lt;/h2&gt;

&lt;p&gt;The biggest sign you need to split your infrastructure into new stacks is if you find yourself violating the Infrastructure &lt;a href="https://en.wikipedia.org/wiki/Law_of_Demeter"&gt;Law of Demeter&lt;/a&gt;. That is to say - the Lambda function which run your business logic are greater than one hop from the infra you provision in the same stack.&lt;/p&gt;

&lt;p&gt;Beyond that, there are several other code smells which, when you catch a whiff, warn you it's time to split your infra from your code. Namely:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Your serverless.yml file is greater than a few hundred-ish lines&lt;/li&gt;
&lt;li&gt;You've got more than a lambda function, dynamo table, and maybe a DDB stream-based function in your stack&lt;/li&gt;
&lt;li&gt;You're trying to decide if you should add a new business domain into a stack purely because a database table, bucket, or vpc is set up in the existing stack&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A clean and scalable way to share resources between stacks is with &lt;a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/outputs-section-structure.html"&gt;CloudFormation Outputs&lt;/a&gt;. Outputs let you share arbitrary primitives across stacks within the same AWS Account. You can declare these inside your &lt;code&gt;serverless.yml&lt;/code&gt; in the &lt;code&gt;resources&lt;/code&gt; block:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# Okay, now we're writing raw CloudFormation&lt;/span&gt;
  &lt;span class="na"&gt;Resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Outputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;PersonasTableArn&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;The ARN for the Persona's Table&lt;/span&gt;
        &lt;span class="na"&gt;Value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Fn::GetAtt'&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;personasTable&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Arn&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# This could be a string, but I'm using a GetAtt as that seems more realistic&lt;/span&gt;
        &lt;span class="na"&gt;Export&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${self:service}:${opt:stage}:PersonasTableArn&lt;/span&gt; &lt;span class="c1"&gt;# Export name must be *unique* across all outputs for a region. This name is what you'll import in other stacks&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then you'll use the &lt;code&gt;Export&lt;/code&gt; name in another stack to consume the output with the &lt;code&gt;${cf:output_name}&lt;/code&gt; syntax (documentation &lt;a href="https://www.serverless.com/framework/docs/providers/aws/guide/variables/"&gt;here&lt;/a&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;provider&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;PERSONAS_TABLE_ARN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${cf:OtherService:${opt:stage}:PersonasTableArn}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can learn more about cross-stack references &lt;a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/walkthrough-crossstackref.html"&gt;here&lt;/a&gt;. Here's a more detailed &lt;a href="https://www.serverless.com/framework/docs/providers/aws/guide/variables#reference-cloudformation-outputs"&gt;reference&lt;/a&gt; for Serverless Framework projects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#notes-on-terraform-and-other-noncloudformation-systems"&gt;
  &lt;/a&gt;
  Notes on Terraform, and other non-CloudFormation systems
&lt;/h2&gt;

&lt;p&gt;It's also common to reconcile Serverless with your existing IaC tools, like Terraform. If you do use Terraform, I'd recommend adhering to the same principles above. Namely, rely on Terraform to provision your long-lived, seldom-changed infrastructure. Then use SAM, Serverless Framework, or whatever you prefer for rapid code deployments.&lt;/p&gt;

&lt;p&gt;Terraform doesn't rely on CloudFormation. Instead, it offers to store state in an plethora of backends (often an S3 bucket), which means you'll need to share resource identifiers manually, instead of using CloudFormation Outputs. The easiest option I've found is to rely on AWS Systems Manager &lt;a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/what-is-systems-manager.html"&gt;(SSM)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you use Terraform to provision something like a Cognito pool, or a shared SQS Queue, you'll need to publish the ARN or name into SSM using the &lt;a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ssm_parameter"&gt;Terraform SSM parameter resource&lt;/a&gt;. Then you can consume them in Serverless apps with the &lt;code&gt;${ssm:...}&lt;/code&gt; &lt;a href="https://www.serverless.com/framework/docs/providers/aws/guide/variables#reference-variables-using-the-ssm-parameter-store"&gt;reference&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Occasionally you'll find yourself needing to share resources &lt;em&gt;FROM&lt;/em&gt; a CloudFormation stack &lt;em&gt;TO&lt;/em&gt; a Terraform project. In that case, I recommend you try the &lt;a href="https://www.npmjs.com/package/serverless-ssm-publish-plugin"&gt;serverless-ssm-publish plugin&lt;/a&gt;. This will allow you to publish to SSM upon deployment of your infrastructure stacks, and then consume them in Terraform.&lt;/p&gt;

&lt;p&gt;The downside of mixing the two, and more generally using SSM to maintain cloud state, is that there's no dependency resolution. One must be careful to ensure your Terraform projects push data to SSM before consuming them in Serverless apps, and vice-versa.&lt;/p&gt;

&lt;p&gt;Regardless if you choose to keep your entire IaC configurations in Serverless, CloudFormation, Terraform, or anything else - beyond a certain scale, you'll want to separate infra from app logic. This will keep cognitive overhead per deployment low, limit your deployment blast radius, and cut down on that ever-important deployment time.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>8 Ultimate ressources for learning Web Dev in 2021 #2</title>
      <author>CodeOzz</author>
      <pubDate>Tue, 29 Jun 2021 12:59:15 +0000</pubDate>
      <link>https://dev.to/codeozz/8-ultimate-ressources-for-learning-web-dev-in-2021-2-3le4</link>
      <guid>https://dev.to/codeozz/8-ultimate-ressources-for-learning-web-dev-in-2021-2-3le4</guid>
      <description>&lt;p&gt;Hey friends ! I'm sharing with you a lot of ressources about web developper that will help you to improve your skills and save your time ! (for the second time !)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  Javascript 🖥️
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#operator"&gt;
  &lt;/a&gt;
  Operator
&lt;/h4&gt;

&lt;p&gt;A nice recap about all Javascript operator (will you learn new one truly !)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.joshwcomeau.com/operator-lookup/"&gt;https://www.joshwcomeau.com/operator-lookup/&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#operator"&gt;
  &lt;/a&gt;
  Operator
&lt;/h4&gt;

&lt;p&gt;You want to create a nice graph for your documentation in markdown ? Documentation is very very important in any project !&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mermaid-js.github.io/mermaid/"&gt;https://mermaid-js.github.io/mermaid/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  CSS 🎨
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#pattern"&gt;
  &lt;/a&gt;
  Pattern
&lt;/h4&gt;

&lt;p&gt;A lot of CSS pattern that is very usefull ! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://csslayout.io/patterns/"&gt;https://csslayout.io/patterns/&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#all-css-reference"&gt;
  &lt;/a&gt;
  All CSS Reference
&lt;/h4&gt;

&lt;p&gt;Website that gather all css properties ! very usefull if you need to check a property fastly !&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cssreference.io/"&gt;https://cssreference.io/&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#flexbox"&gt;
  &lt;/a&gt;
  Flexbox
&lt;/h4&gt;

&lt;p&gt;You want to learn flexbox ? Go to this !&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.samanthaming.com/flexbox30/"&gt;https://www.samanthaming.com/flexbox30/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML 🔍
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#dom-event"&gt;
  &lt;/a&gt;
  DOM Event
&lt;/h4&gt;

&lt;p&gt;You have trouble or you want to re-learn dom event ? this ressource is very usefull, it's an interactive dom event simulator online !&lt;/p&gt;

&lt;p&gt;&lt;a href="https://domevents.dev/"&gt;https://domevents.dev/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#others"&gt;
  &lt;/a&gt;
  Others 📌
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#semantic-version"&gt;
  &lt;/a&gt;
  Semantic version
&lt;/h4&gt;

&lt;p&gt;For all developers, semantic versionning is very important when you are creating and maintaining a project !&lt;/p&gt;

&lt;p&gt;&lt;a href="https://zellwk.com/blog/semantic-versioning/"&gt;https://zellwk.com/blog/semantic-versioning/&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#simple-icon"&gt;
  &lt;/a&gt;
  Simple Icon
&lt;/h4&gt;

&lt;p&gt;Developer are not designer ! when we need some graphical resource, we lost our time ! This resource share a lot of icon that you can use !&lt;/p&gt;

&lt;p&gt;&lt;a href="https://simpleicons.org/"&gt;https://simpleicons.org/&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>css</category>
      <category>html</category>
    </item>
    <item>
      <title>What is DevOps and how does DevOps work?</title>
      <author>Jessica Wood</author>
      <pubDate>Tue, 29 Jun 2021 12:10:32 +0000</pubDate>
      <link>https://dev.to/woodjessica/what-is-devops-and-how-does-devops-work-36m6</link>
      <guid>https://dev.to/woodjessica/what-is-devops-and-how-does-devops-work-36m6</guid>
      <description>&lt;p&gt;"Today, every business wants quality software at a faster speed so that they can survive in the ever-increasing competition and can provide greater satisfaction to customers. This is where DevOps plays its role and helps businesses in achieving software at fast speed with no compromise on quality. &lt;/p&gt;

&lt;p&gt;&lt;b&gt;What is DevOps?&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.testingxperts.com/blog/what-is-devops"&gt;DevOps&lt;/a&gt; is an evolution of agile methodology that breaks the traditional silos that exists between cross-functional teams and brings them together by fostering collaboration. &lt;/p&gt;

&lt;p&gt;DevOps is a cultural shift in which Developers and Operation teams work together to ensure faster software development and delivery by implementing the CI/CD pipeline. &lt;/p&gt;

&lt;p&gt;&lt;b&gt;What are the benefits of DevOps?&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Below mentioned are some of the benefits of DevOps:&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;• DevOps improves team collaboration by breaking down the silos&lt;br&gt;
• It speeds up the SDLC process&lt;br&gt;
• DevOps practices ensure faster software delivery to market&lt;br&gt;
• It improves reliability as in DevOps best CI/CD, automation and monitoring tools are used&lt;br&gt;
• DevOps lays strong emphasis on security and this is why DevSecOps is so important as well&lt;/p&gt;

&lt;p&gt;&lt;b&gt;How does DevOps work?&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;DevOps works by following the DevOps workflow which contains the following phases:&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;• Planning&lt;br&gt;
• Building&lt;br&gt;
• Testing and deploying to the production environment&lt;br&gt;
• Delivering product updates&lt;br&gt;
• Monitoring and logging software performance&lt;br&gt;
• Gathering customer feedback&lt;/p&gt;

&lt;p&gt;Today every organization wants faster and quality software that satisfies its customer.&lt;/p&gt;

&lt;p&gt;DevOps is of great help for such organizations as it uses CI/CD tools to ensure the quality of the software is improved and software reaches the customer in less time as compared to older methods of software development and delivery. &lt;/p&gt;

&lt;p&gt;Leverage DevOps services from next-gen QA and software testing services provider to ensure faster and quality releases."&lt;/p&gt;

</description>
      <category>devops</category>
    </item>
    <item>
      <title>20+ Lessons I've Learned Writing on DEV for 4 Years</title>
      <author>Jean-Michel Fayard 🇫🇷🇩🇪🇬🇧🇪🇸🇨🇴</author>
      <pubDate>Tue, 29 Jun 2021 12:05:44 +0000</pubDate>
      <link>https://dev.to/jmfayard/20-lessons-i-ve-learned-writing-on-dev-for-4-years-4nk3</link>
      <guid>https://dev.to/jmfayard/20-lessons-i-ve-learned-writing-on-dev-for-4-years-4nk3</guid>
      <description>&lt;p&gt;
  Table of Contents
  &lt;ul&gt;
&lt;li&gt;&lt;a href="#1-first-get-started-"&gt;1. First, get started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2-do-not-bury-the-lede-%EF%B8%8F"&gt;2. Do not Bury the Lede ⚡️&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#3-brainstorm-on-paper-"&gt;3. Brainstorm on Paper 📝&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#4-talk-it-through-with-a-friend-"&gt;4. Talk it Through With a Friend 🗣&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#5-learn-markdown-"&gt;5. Learn Markdown 📚&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#6-add-a-table-of-contents-"&gt;6. Add a Table of Contents ✅&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#7-be-liquid-"&gt;7. Be Liquid 💧&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#8-use-emojis-"&gt;8. Use emojis 😄&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#9-use-%EF%B8%8F%E2%83%A3tags"&gt;9. Use #️⃣tags&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#10-upload-images-on-github-"&gt;10. Upload images on GitHub 🏞&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#11-start-a-serie-"&gt;11. Start a serie ⏭&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#12-originally-published-on-your-own-blog-"&gt;12. Originally published on your own blog 🔗&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#13-generate-your-blog-with-stackbit-%EF%B8%8F"&gt;13. Generate your blog with Stackbit ❤️&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#14-add-a-cover-image-"&gt;14. Add a cover image 🌅&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#15-write-in-a-markdown-editor-"&gt;15. Write in a Markdown Editor ✍🏻&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#16-push-to-a-private-github-repo-"&gt;16. Push to a private GitHub repo 👨🏻‍💻&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#17-if-english-is-not-your-mother-tongue-"&gt;17. If English is Not Your Mother Tongue... 🇬🇧&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#18-publish-early-publish-often-"&gt;18. Publish Early, Publish Often 💡&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#19-publish-now-share-later-"&gt;19. Publish now, Share later 📣&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#20-beware-of-vanity-metrics-"&gt;20. Beware of Vanity Metrics 👎🏻&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#what-about-you"&gt;What About You?&lt;/a&gt;
&amp;lt;!-- /TOC --&amp;gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;/p&gt;
&lt;p&gt;I've written 69 articles in the last 4 years and I'm eager to share with you what I've learned so far.&lt;/p&gt;

&lt;p&gt;I'm by no means done learning, so if you have additional tips for writing good articles, &lt;em&gt;the comments section is all yours&lt;/em&gt;!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#1-first-get-started"&gt;
  &lt;/a&gt;
  1. First, get started 🎬
&lt;/h2&gt;

&lt;p&gt;If you have not written your first post, nothing you would read here matter much.&lt;/p&gt;

&lt;p&gt;So make sure to get started, and if you are unsure how, I have a guide for you!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/jmfayard" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NjlhV-kq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--oLH1L0EP--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/17066/64e291f5-65fd-452a-88d9-a2f0c071f807.jpg" alt="jmfayard"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/jmfayard/yes-you-should-write-that-firstpost-481" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Yes, you should write that first post!&lt;/h2&gt;
      &lt;h3&gt;Jean-Michel Fayard 🇫🇷🇩🇪🇬🇧🇪🇸🇨🇴 ・ Mar 11 '20 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#firstpost&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#motivation&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#writing&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#2-do-not-bury-the-lede-%EF%B8%8F"&gt;
  &lt;/a&gt;
  2. Do not Bury the Lede ⚡️
&lt;/h2&gt;

&lt;p&gt;Your first sentence should contain what is most important in your article.&lt;/p&gt;

&lt;p&gt;Here is a test you can use to find out whether you bury the lead in your articles:&lt;/p&gt;

&lt;p&gt;Can the first sentence of your article be used as a good twit to introduce your article?&lt;/p&gt;

&lt;p&gt;This one is rather good I would say:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X3wl5Ei0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/459464/123141307-89db6700-d458-11eb-9504-7a389261d96e.png" class="article-body-image-wrapper"&gt;&lt;img alt="Home___Twitter" src="https://res.cloudinary.com/practicaldev/image/fetch/s--X3wl5Ei0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/459464/123141307-89db6700-d458-11eb-9504-7a389261d96e.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This one is rather bad:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8jaQmvxB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/459464/123141118-54cf1480-d458-11eb-80b7-59916027334b.png" class="article-body-image-wrapper"&gt;&lt;img alt="Home___Twitter" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8jaQmvxB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/459464/123141118-54cf1480-d458-11eb-80b7-59916027334b.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-brainstorm-on-paper"&gt;
  &lt;/a&gt;
  3. Brainstorm on Paper 📝
&lt;/h2&gt;

&lt;p&gt;To write a good article, you need a good topic, either one you are excited to write about, or one requested by the public(*). You need a good title, and a mission statement of what you are trying to achieve with the article.&lt;/p&gt;

&lt;p&gt;I've found it easier to find multiple good titles than to find only one. By that I mean that coming up with a good title when I'm exhausted after finishing an article is hard. On the other hand, if my relaxed brain focus only of coming up with topics, titles and mission statements, my creativity kicks in. Your mileage may vary but for me nothing beats pen and paper for brainstorming.&lt;/p&gt;

&lt;p&gt;(*) Bonus:&lt;a href="https://answerthepublic.com/"&gt;https://answerthepublic.com/&lt;/a&gt; is a cool tool to find out what the public wants to read. Enter your topic and you will be greeted by the most common questions asked on Google.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-talk-it-through-with-a-friend-%F0%9F%97%A3"&gt;
  &lt;/a&gt;
  4. Talk it Through With a Friend 🗣
&lt;/h2&gt;

&lt;p&gt;Words always come easily - said no writer, ever.&lt;/p&gt;

&lt;p&gt;A strategy that works wonder is to:&lt;/p&gt;

&lt;p&gt;1) write a shitty first draft as fast as possible, with no structure or formatting getting in the way.&lt;/p&gt;

&lt;p&gt;2) talk it through with a friend: "... and what I find very interesting is... / ... what I really wanted to say is that...".&lt;/p&gt;

&lt;p&gt;3) now write the article you wish you had discussed with your friend.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-learn-markdown"&gt;
  &lt;/a&gt;
  5. Learn Markdown 📚
&lt;/h2&gt;

&lt;p&gt;If you haven't learned Markdown yet, put that on your TODO-list because you need it to format things nicely.&lt;/p&gt;

&lt;p&gt;It won't help you only on DEV but also on GitHub, StackOverflow, Blogging software and many more websites.&lt;/p&gt;

&lt;p&gt;I won't elaborate on this because &lt;a class="mentioned-user" href="https://dev.to/yechielk"&gt;@yechielk&lt;/a&gt;
 has done a wonderful job explaining markdown, so bookmark this:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/yechielk" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5k5i1d5f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--dYBMpoaX--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/14816/e88e23df-00dd-4d43-8454-65abd51780c8.jpg" alt="yechielk"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/yechielk/these-lifehacks-will-change-the-way-you-write-markdown-3651" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;These lifehacks will change the way you write Markdown!&lt;/h2&gt;
      &lt;h3&gt;Yechiel Kalmenson ・ Aug 16 '19 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#writing&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#markdown&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#blogging&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#6-add-a-table-of-contents"&gt;
  &lt;/a&gt;
  6. Add a Table of Contents ✅
&lt;/h2&gt;

&lt;p&gt;One flaw of Markdown is that there is no build-in way to say: "Hey, please insert a table of contents here".&lt;/p&gt;

&lt;p&gt;If you use Visual Studio Code, I recommend &lt;a href="https://marketplace.visualstudio.com/items?itemName=robole.marky-dynamic"&gt;Marky Dynamic&lt;/a&gt; with which you can insert and update an automatically generated table of contents. &lt;/p&gt;

&lt;p&gt;This is how the table of contents for this article is built.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-be-liquid"&gt;
  &lt;/a&gt;
  7. Be Liquid 💧
&lt;/h2&gt;

&lt;p&gt;DEV has liquid tags that allow to preview a link&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{% post https://dev.to/jmfayard/things-i-ve-been-writing-on-dev-to-22io %}
{% github jmfayard/refreshVersions no-readme %}
{% tag kotlin %} 
{% comment 2d1a %}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/jmfayard" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NjlhV-kq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--oLH1L0EP--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/17066/64e291f5-65fd-452a-88d9-a2f0c071f807.jpg" alt="jmfayard"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/jmfayard/things-i-ve-been-writing-on-dev-to-22io" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Things I've been writing on dev.to&lt;/h2&gt;
      &lt;h3&gt;Jean-Michel Fayard 🇫🇷🇩🇪🇬🇧🇪🇸🇨🇴 ・ Feb 17 '20 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#bestofdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#pinned&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/jmfayard"&gt;
        jmfayard
      &lt;/a&gt; / &lt;a href="https://github.com/jmfayard/refreshVersions"&gt;
        refreshVersions
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Life is too short to google for dependencies and versions
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;div class="ltag__tag ltag__tag__id__234"&gt;
  
    .ltag__tag__id__234 .follow-action-button{
      background-color: #1b1865 !important;
      color: #fdc791 !important;
      border-color: #1b1865 !important;
    }
  
    &lt;div class="ltag__tag__content"&gt;
      &lt;h2&gt;#&lt;a href="https://dev.to/t/kotlin" class="ltag__tag__link"&gt;kotlin&lt;/a&gt; 
&lt;/h2&gt;
      &lt;div class="ltag__tag__summary"&gt;
        
      &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;



&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/alainvanhout"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZbCRS4GY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--5WAKNyeg--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/22319/2d742773-feca-47fa-9b7e-fc51daa4183e.png" alt="alainvanhout profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/alainvanhout"&gt;
        &lt;span class="comment-username"&gt;Alain Van Hout&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;•&lt;/span&gt;

&lt;a href="https://dev.to/alainvanhout/comment/2d1a" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Feb 25 '18
  &lt;/time&gt;

    • Edited
    &lt;span class="hidden m:inline-block"&gt;
      on &lt;time&gt;
      Feb 25&lt;/time&gt;
    &lt;/span&gt;
&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;Deleting code.&lt;/p&gt;

&lt;p&gt;(The context here being: working with problematic legacy code and getting to the point where you have new code (paths) that do(es) the same thing but without the issues, so that the old code, and its issues, can just be discarded) &lt;/p&gt;


    &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;There is a friendly doc available in the editor.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iVC6xwUT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/459464/123160900-0a0cc700-d46f-11eb-96c0-5ef144390981.png" class="article-body-image-wrapper"&gt;&lt;img alt="New_Post_-_DEV_Community_👩💻👨💻" src="https://res.cloudinary.com/practicaldev/image/fetch/s--iVC6xwUT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/459464/123160900-0a0cc700-d46f-11eb-96c0-5ef144390981.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-use-emojis"&gt;
  &lt;/a&gt;
  8. Use emojis 😄
&lt;/h2&gt;

&lt;p&gt;Break the monotony of walls of text by adding emojis as often as they make sense.&lt;/p&gt;

&lt;p&gt;I used to think that was ridiculous, I changed my mind. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-use-tags"&gt;
  &lt;/a&gt;
  9. Use #️⃣tags
&lt;/h2&gt;

&lt;p&gt;Take some time to discover what tags are available at &lt;a href="https://dev.to/tags"&gt;https://dev.to/tags&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Technology-related tags are pretty obvious: &lt;code&gt;#javascript #css #java #python...&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;There are cross-cuttings tags you want to be aware of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;#beginners&lt;/code&gt; if your article is accessible for them.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;#productivity&lt;/code&gt; if you have tips to be more productive.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;#career&lt;/code&gt; for anything related to jobs and careers.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;#showdev&lt;/code&gt; to show off what you've built.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some tags have non-obvious rules you need to be aware of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;#discuss&lt;/code&gt; is for eliciting community responses but is not appropriate for blog posts.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;#help&lt;/code&gt; is to ask for help, not to be helpful to others.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;#opensource&lt;/code&gt; is for discussing the philosophy and practice of open-source, it's not for promoting your open-source project.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;#watercooler&lt;/code&gt; was hard to understand for me, because I have lived in France where slightly off-topic discussions happen around the coffee machine, and in Germany where they happen in the Biergarten. No watercooler involved.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#10-upload-images-on-github-%F0%9F%8F%9E"&gt;
  &lt;/a&gt;
  10. Upload images on GitHub 🏞
&lt;/h2&gt;

&lt;p&gt;You can get your point across with fewer words using screenshots, annotations, shapes and sketch.&lt;/p&gt;

&lt;p&gt;I use &lt;a href="https://evernote.com/products/skitch"&gt;Skitch&lt;/a&gt; for that, happily so.&lt;/p&gt;

&lt;p&gt;One thing I don't like is uploading pictures in the editor.&lt;/p&gt;

&lt;p&gt;As a work-around, I have a GitHub issue where I drag&amp;amp;drop all my pictures&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_2kSaGWI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/459464/123161614-e433f200-d46f-11eb-8b59-ba6f82da5781.png" class="article-body-image-wrapper"&gt;&lt;img alt="Markdown_drag_drop_pictures_·_Issue__1_·_jmfayard_writing" src="https://res.cloudinary.com/practicaldev/image/fetch/s--_2kSaGWI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/459464/123161614-e433f200-d46f-11eb-8b59-ba6f82da5781.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#11-start-a-serie-%E2%8F%AD"&gt;
  &lt;/a&gt;
  11. Start a serie ⏭
&lt;/h2&gt;

&lt;p&gt;Instead of writing one yuuuge article, you can divide &amp;amp; conquer your thoughts in a serie of articles.&lt;/p&gt;

&lt;p&gt;Make sure to use the &lt;strong&gt;Series&lt;/strong&gt; feature so that the different parts are linked together.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--srX5pdYE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/459464/123162355-cdda6600-d470-11eb-8aa5-18810d100517.png" class="article-body-image-wrapper"&gt;&lt;img alt="New_Post_-_DEV_Community_👩💻👨💻" src="https://res.cloudinary.com/practicaldev/image/fetch/s--srX5pdYE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/459464/123162355-cdda6600-d470-11eb-8aa5-18810d100517.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#12-originally-published-on-your-own-blog"&gt;
  &lt;/a&gt;
  12. Originally published on your own blog 🔗
&lt;/h2&gt;

&lt;p&gt;As much as I like DEV, I want to stay the owner of my content.&lt;/p&gt;

&lt;p&gt;For this you need to set the &lt;strong&gt;Canonical URL&lt;/strong&gt; to link to a copy hosted on your own blog. This will tell Google where the article originally comes from.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ArJMqU4v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/459464/123452164-70fcbe00-d5de-11eb-8041-50e7d7a20825.png" class="article-body-image-wrapper"&gt;&lt;img alt="Edit_Post_-_DEV_Community_👩💻👨💻" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ArJMqU4v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/459464/123452164-70fcbe00-d5de-11eb-8041-50e7d7a20825.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#13-generate-your-blog-with-stackbit"&gt;
  &lt;/a&gt;
  13. Generate your blog with Stackbit ❤️
&lt;/h2&gt;

&lt;p&gt;You don't have an own blog yet?&lt;/p&gt;

&lt;p&gt;Wait no more, you can generate it from what you publish on DEV.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/connecting-with-stackbit"&gt;https://dev.to/connecting-with-stackbit&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is what I use for &lt;a href="https://jmfayard.dev/"&gt;https://jmfayard.dev/&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;I love how low-maintenance it is!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#14-add-a-cover-image"&gt;
  &lt;/a&gt;
  14. Add a cover image 🌅
&lt;/h2&gt;

&lt;p&gt;If you have spent time and effort in your article, you don't want it to to look like a boring link when shared on Twitter/Slack/Whatever. &lt;/p&gt;

&lt;p&gt;Therefore you need a cover image &lt;strong&gt;of size 1000x420&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;(I always forgot this information).&lt;/p&gt;

&lt;p&gt;I'm a backend guy so I struggled to produce decent cover images.&lt;/p&gt;

&lt;p&gt;My favorite strategy is to write programming code and transform it in a gorgeous image with &lt;strong&gt;&lt;a href="https://carbon.now.sh/"&gt;https://carbon.now.sh/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is what I've done in &lt;a href="https://dev.to/jmfayard/android-s-billion-dollar-mistake-327b"&gt;Android's billion-dollar mistake(s)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8KSIdX1Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Wpnu0qiV--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_1000/https://thepracticaldev.s3.amazonaws.com/i/zamboudckyy9j54eylr4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8KSIdX1Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Wpnu0qiV--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_1000/https://thepracticaldev.s3.amazonaws.com/i/zamboudckyy9j54eylr4.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you can draw, you have a super power that you should use here!&lt;/p&gt;

&lt;p&gt;I can't but my wife produced this great cartoon in &lt;a href="https://dev.to/jmfayard/what-is-your-current-salary-is-a-red-flag-that-you-don-t-want-to-work-here-3aji"&gt;“What is your current salary?” is a red flag that you don’t want to work here&lt;/a&gt;            &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C4Pf0uuB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--dLMLCjoO--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/i/b9se7wfxtxhgdz4qnqkw.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C4Pf0uuB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--dLMLCjoO--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/i/b9se7wfxtxhgdz4qnqkw.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you publish often on the same topic, &lt;a href="https://www.canva.com/"&gt;Canva&lt;/a&gt; is a good tool to produce a branded image where you only have to change the title.&lt;/p&gt;

&lt;p&gt;This is what I used in &lt;a href="https://dev.to/jmfayard/best-ways-to-learn-kotlin-from-scratch-or-from-java-with-books-or-tutorials-online-or-in-the-ide-52cm"&gt;How to learn Kotlin: browser vs IDE, books vs tutorials, for newbies and Java devs - DEV Community 👩‍💻👨‍💻&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zpdgOjxj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ZQz-YEdv--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_1000/https://thepracticaldev.s3.amazonaws.com/i/ae05lypwluxrmxq53w3n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zpdgOjxj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ZQz-YEdv--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_1000/https://thepracticaldev.s3.amazonaws.com/i/ae05lypwluxrmxq53w3n.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Last but not least, &lt;a class="mentioned-user" href="https://dev.to/pjijin"&gt;@pjijin&lt;/a&gt;
 has made a good cover generator. This is what I used for this article:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/pjijin" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wnAWw_-o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--0fj5tmcf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/144556/84b70967-8e1e-4c6e-af8a-928a6f9e8c90.jpeg" alt="pjijin"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/pjijin/generate-cover-image-for-your-dev-posts-easily-27co" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Generate Cover Image For Your Dev Posts Easily&lt;/h2&gt;
      &lt;h3&gt;Jijin P  👨‍💻🦄 ・ Aug 14 '19 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#showdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#15-write-in-a-markdown-editor"&gt;
  &lt;/a&gt;
  15. Write in a Markdown Editor ✍🏻
&lt;/h2&gt;

&lt;p&gt;DEV has its own editor at &lt;a href="https://dev.to/new"&gt;https://dev.to/new&lt;/a&gt; but they won't take offense if I say that a stand-alone Markdown editor is much better. &lt;/p&gt;

&lt;p&gt;Thanks to Markdown being a standard (not really, but that's off-topic), there is a variety of editors you can try:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt; is good as always, and it has a spell-checker.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.notion.so"&gt;Notion&lt;/a&gt; is a solid choice.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://typora.io/"&gt;Typora&lt;/a&gt; is my current favorite for its distraction-free interface.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#16-push-to-a-private-github-repo"&gt;
  &lt;/a&gt;
  16. Push to a private GitHub repo 👨🏻‍💻
&lt;/h2&gt;

&lt;p&gt;Once you start to use a stand-alone Markdown editor, the logical next step is to push your changes to GitHub.&lt;/p&gt;

&lt;p&gt;I got this tip from &lt;a class="mentioned-user" href="https://dev.to/john_papa"&gt;@john_papa&lt;/a&gt;
 &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Saving my content and making sure I do not lose it (2 of my goals)  are reinforced by creating a GitHub repository for my content. I prefer  this to be private as it contains a lot of my writing. I also organize  my repository in a way that makes sense to me. I can find my articles  quickly, modify them, iterate on them, and move along.&lt;/p&gt;
&lt;/blockquote&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/azure" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TSIs2QqE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--MdxUgcr_--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/512/64ce0b82-730d-4ca0-8359-2c21513a0063.jpg" alt="Microsoft Azure"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O9pYGDvM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--8Mf-f4V4--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/138665/cee5c68d-3bd2-4042-af64-5214952d6c30.jpg" alt=""&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/azure/how-i-write-online-articles-1lfb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How I Write Online Articles&lt;/h2&gt;
      &lt;h3&gt;John Papa for Microsoft Azure ・ Apr 1 '19 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#devrel&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#vscode&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#markdown&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#discuss&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#17-if-english-is-not-your-mother-tongue"&gt;
  &lt;/a&gt;
  17. If English is Not Your Mother Tongue... 🇬🇧
&lt;/h2&gt;

&lt;p&gt;Being able to write a complete and easy to read article with no dumb mistakes in a foreign language is such a hard multi-years journey. &lt;/p&gt;

&lt;p&gt;Even after 25 years, I'm far from perfect.&lt;/p&gt;

&lt;p&gt;I feel your frustration.&lt;/p&gt;

&lt;p&gt;And I highly recommend this article from &lt;a class="mentioned-user" href="https://dev.to/vtrpldn"&gt;@vtrpldn&lt;/a&gt;
 who share useful tips to cope with the challenge:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/vtrpldn" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cki8THkM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--lJguvLHq--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/169109/6820fd4d-7891-4d6b-863a-92f8380be31b.png" alt="vtrpldn"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/vtrpldn/technical-writing-tips-for-non-native-english-speakers-4fno" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Technical Writing Tips for Non-Native English Speakers&lt;/h2&gt;
      &lt;h3&gt;Vitor Paladini ・ Jul 29 '20 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#writing&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#18-publish-early-publish-often"&gt;
  &lt;/a&gt;
  18. Publish Early, Publish Often 💡
&lt;/h2&gt;

&lt;p&gt;It is often exhausting to polish an article until everything is ready.&lt;/p&gt;

&lt;p&gt;My tip: hit the &lt;strong&gt;Publish&lt;/strong&gt; button &lt;em&gt;before&lt;/em&gt; you are ready.&lt;/p&gt;

&lt;p&gt;What do you fear? It's not like thousands people will read it the minute you publish it, that never happens.&lt;/p&gt;

&lt;p&gt;Having something published release some of the tension involved in finishing the article.&lt;/p&gt;

&lt;p&gt;Now read again your published article, and incrementally improve what needs to be corrected.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#19-publish-now-share-later"&gt;
  &lt;/a&gt;
  19. Publish now, Share later 📣
&lt;/h2&gt;

&lt;p&gt;It is often exhausting to publish an article, and I will advise you against sharing it right after it's done.&lt;/p&gt;

&lt;p&gt;I have a friend who writes epic super long stories, and I was surprised and jealous that he managed to write 1.000 additional words to promote his work on Facebook and LinkedIn afterwards.&lt;/p&gt;

&lt;p&gt;His secret was that he gave time to his brain to relax. He "finished" an article on Monday, published it on Tuesday and shared it on Wednesday.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#20-beware-of-vanity-metrics"&gt;
  &lt;/a&gt;
  20. Beware of Vanity Metrics 👎🏻
&lt;/h2&gt;

&lt;p&gt;Blogging platforms, including DEV, gives you access to the number of views in your article.&lt;/p&gt;

&lt;p&gt;It's in the human nature when you see a number to want to see it big, and growing.&lt;/p&gt;

&lt;p&gt;I want to have a word of caution here: this is a hedonic treadmill that is not good for you. &lt;br&gt;
As soon as you hit a target, you get used to it, and disappointed when you don't hit it again. &lt;/p&gt;

&lt;p&gt;It's dangerous to have goals that are not meaningful. I would suggest to focus on the impact you have, on meaningful conversations, etc...&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/helenanders26" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nDlJ2gv9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--HjGs-_-t--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/22532/48443e4d-9075-4869-9df7-122522595b71.jpeg" alt="helenanders26"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/helenanders26/the-trouble-with-blog-post-views-and-vanity-metrics-2al5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;The trouble with 
blog post views 
and vanity metrics&lt;/h2&gt;
      &lt;h3&gt;Helen Anderson ・ Jun 20 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#analytics&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#writing&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#metrics&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#what-about-you"&gt;
  &lt;/a&gt;
  What About You?
&lt;/h2&gt;

&lt;p&gt;What challenges have you faced trying to write regularly?&lt;/p&gt;

&lt;p&gt;What strategies did you use to overcome them?&lt;/p&gt;

&lt;p&gt;Any article you want to share?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you want to write to me, there is a standing invitation at &lt;a href="https://jmfayard.dev/contact/"&gt;https://jmfayard.dev/contact/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>writing</category>
      <category>beginners</category>
      <category>career</category>
      <category>meta</category>
    </item>
    <item>
      <title>Automating multi-arch container images builds (we used Google Cloud Build but GitHub Actions would also work)</title>
      <author>Petr Razumov</author>
      <pubDate>Tue, 29 Jun 2021 11:52:30 +0000</pubDate>
      <link>https://dev.to/tidalmigrations/automating-multi-arch-container-images-builds-we-used-google-cloud-build-but-github-actions-would-also-work-clb</link>
      <guid>https://dev.to/tidalmigrations/automating-multi-arch-container-images-builds-we-used-google-cloud-build-but-github-actions-would-also-work-clb</guid>
      <description>&lt;p&gt;This is the last post in the series on how we prepared our application to run on M1 (Apple Silicon).&lt;/p&gt;

&lt;p&gt;In the previous part we were talking about &lt;a href="https://dev.to/tidalmigrations/multi-cpu-architecture-container-images-how-to-build-and-push-them-on-docker-hub-or-any-other-registry-2981"&gt;building multiple CPU architecture container images&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This post will guide you through how to implement a pipeline for building multi-architecture container images using Google Cloud Platform’s &lt;a href="https://cloud.google.com/build"&gt;Cloud Build&lt;/a&gt; or &lt;a href="https://github.com/features/actions"&gt;GitHub Actions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As you may know from the previous post, to build multi-arch container images we need to setup virtual environment and run &lt;code&gt;docker buildx&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's configure such build pipelines for some popular CI/CD solutions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cloud-build"&gt;
  &lt;/a&gt;
  Cloud Build
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://cloud.google.com/build"&gt;Cloud Build&lt;/a&gt; is a service that executes your builds on Google Cloud Platform's infrastructure.&lt;/p&gt;

&lt;p&gt;To run multi-arch container images builds let's use the following pipeline configuration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;gcr.io/cloud-builders/docker&lt;/span&gt;
    &lt;span class="na"&gt;args&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;run&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;--privileged'&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;linuxkit/binfmt:v0.7'&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;initialize-qemu&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;gcr.io/cloud-builders/docker&lt;/span&gt;
    &lt;span class="na"&gt;args&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;buildx&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;create&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;--name'&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;mybuilder&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;create-builder&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;gcr.io/cloud-builders/docker&lt;/span&gt;
    &lt;span class="na"&gt;args&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;buildx&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;use&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;mybuilder&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;select-builder&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;gcr.io/cloud-builders/docker&lt;/span&gt;
    &lt;span class="na"&gt;args&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;buildx&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;inspect&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;--bootstrap'&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;show-target-build-platforms&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;gcr.io/cloud-builders/docker&lt;/span&gt;
    &lt;span class="na"&gt;args&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;buildx&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;build&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;--platform'&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;$_DOCKER_BUILDX_PLATFORMS&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;-t'&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;gcr.io/$PROJECT_ID/hello-world:latest'&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;--push'&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;.&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;build-multi-architecture-container-image&lt;/span&gt;
&lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;DOCKER_CLI_EXPERIMENTAL=enabled&lt;/span&gt;
&lt;span class="na"&gt;substitutions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;_DOCKER_BUILDX_PLATFORMS&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;linux/amd64,linux/arm64'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above configuration creates the pipeline to set up the build environment (&lt;code&gt;initialize-qemu&lt;/code&gt;, &lt;code&gt;create-builder&lt;/code&gt;, &lt;code&gt;select-builder&lt;/code&gt;, and &lt;code&gt;show-target-build-platforms&lt;/code&gt; steps), to build a multi-arch container image and to push it to the &lt;a href="https://cloud.google.com/container-registry"&gt;Container Registry&lt;/a&gt; on Google Cloud Platform (&lt;code&gt;build-multi-architecture-container-image&lt;/code&gt; step).&lt;/p&gt;

&lt;p&gt;To push to another container registry (e.g. Docker Hub) update the &lt;code&gt;build-multi-architecture-container-image&lt;/code&gt; step accordingly.&lt;/p&gt;

&lt;p&gt;Please consult the Cloud Build documentation to get the information on how to &lt;a href="https://cloud.google.com/build/docs/how-to#trigger"&gt;trigger builds&lt;/a&gt; (manually or automatically).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#github-actions"&gt;
  &lt;/a&gt;
  GitHub Actions
&lt;/h2&gt;

&lt;p&gt;If you prefer to use GitHub Actions instead of Cloud Build, it is also possible.&lt;/p&gt;

&lt;p&gt;The pipeline configuration to build multi-arch container images is the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ci&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;buildx&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;checkout code&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;setup qemu&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker/setup-qemu-action@v1&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;setup buildx&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;buildx&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker/setup-buildx-action@v1&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;available platforms&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;echo ${{ steps.buildx.outputs.platforms }}&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;login to docker hub&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker/login-action@v1&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.DOCKER_USERNAME }}&lt;/span&gt;
          &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.DOCKER_TOKEN }}&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;build the image&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;docker buildx build \&lt;/span&gt;
          &lt;span class="s"&gt;--push \&lt;/span&gt;
          &lt;span class="s"&gt;--tag ${{ secrets.DOCKER_USERNAME }}/hello-world:latest \&lt;/span&gt;
          &lt;span class="s"&gt;--platform linux/amd64,linux/arm64 . &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To make it work you need to set up some &lt;a href="https://docs.github.com/en/actions/reference/encrypted-secrets"&gt;secrets on GitHub&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;DOCKER_USERNAME&lt;/code&gt; — your user name on Docker Hub&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;DOCKER_TOKEN&lt;/code&gt; — your Docker Hub &lt;a href="https://hub.docker.com/settings/security"&gt;access token&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;That was the last post in the series, and to sum up let's repeat the key points on how to prepare an application for M1 (Apple Silicon):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Use Go to easily build applications for different operating systems&lt;/li&gt;
&lt;li&gt;Build multi-arch container images with &lt;code&gt;docker buildx&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Utilize Cloud Build or GitHub Action to automate builds&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>cicd</category>
      <category>cloudbuild</category>
      <category>multiarch</category>
      <category>githubactions</category>
    </item>
    <item>
      <title>Learn FastAPI With Me (Part 2)</title>
      <author>Morgan-Phoenix</author>
      <pubDate>Tue, 29 Jun 2021 11:32:29 +0000</pubDate>
      <link>https://dev.to/morgan_phoenix/learn-fastapi-with-me-part-2-3k05</link>
      <guid>https://dev.to/morgan_phoenix/learn-fastapi-with-me-part-2-3k05</guid>
      <description>&lt;p&gt;So In The Previous Part We Made Our First Ever API In This Part I Will Explain What Was The Code Actually Doing. If You Don't Know What I Am Talking About Check The First Part Of This Series &lt;a href="https://dev.to/morgan_phoenix/learn-fastapi-with-me-part-1-48jd"&gt;Here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-explaination"&gt;
  &lt;/a&gt;
  The Explaination
&lt;/h2&gt;

&lt;p&gt;This Is The Code I Shared&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from fastapi import FastAPI
app = FastAPI()
@app.get('/')
def home():
    return {'data':'Get This And Be Happy'}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now In The First Line We Imported &lt;code&gt;FastAPI&lt;/code&gt; from &lt;code&gt;fastapi&lt;/code&gt;&lt;br&gt;
&lt;code&gt;from fastapi import FastAPI&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-is-fastapi"&gt;
  &lt;/a&gt;
  What Is FastAPI?
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;FastAPI&lt;/code&gt; Is The Main Class You Will Use To Start With The API&lt;/p&gt;

&lt;p&gt;Now We Made A Object Called &lt;code&gt;app&lt;/code&gt; Of The Class &lt;code&gt;FastAPI&lt;/code&gt; So We Can Use All The Functions And Methods Provided By This Class.&lt;/p&gt;

&lt;p&gt;Then We Did Something Like This &lt;code&gt;@app.get('/)&lt;/code&gt;, If You Don't Know What The &lt;code&gt;@&lt;/code&gt; Symbol Is, Let Me Tell You (If You Know What Is it Please Skip To "Explaining An Endpoint")&lt;br&gt;
These Things Are Called &lt;code&gt;Decorators&lt;/code&gt; In Python(A Decorator allows a user to add new functionality to an existing object without modifying its structure.)&lt;br&gt;
So What Do I Mean Here Is, Lets Say I Created A Function &lt;code&gt;foo&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def foo(f):
    print('doing')
    f()
    print('done')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And Then I Created A Function &lt;code&gt;func&lt;/code&gt;&lt;br&gt;
And Then Run This&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@foo
def func():
    print('inside foo')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here The Function &lt;code&gt;func&lt;/code&gt; Will Be Give To Function &lt;code&gt;foo&lt;/code&gt; As A Parameter, So By Now You Know What Will Be The Result,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;doing
inside foo
done
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You Will Get This As The Result&lt;br&gt;
Now Enough About Decorators, Lets See What An Endpoint Is&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#explaining-an-endpoint"&gt;
  &lt;/a&gt;
  Explaining An Endpoint
&lt;/h2&gt;

&lt;p&gt;Now An Endpoint Is A &lt;code&gt;/some_address&lt;/code&gt;(slash some address) Where Clients Can Come And Do Stuff Like We Have &lt;code&gt;google.com/home&lt;/code&gt;, Here We Defined Our Endpoint As &lt;code&gt;/&lt;/code&gt;. This Means Who Ever Comes To &lt;code&gt;http://127.0.0.1:8000&lt;/code&gt;(or whatever domain name our api is running), That Client Is Recived Where We Defined &lt;code&gt;/&lt;/code&gt;.&lt;br&gt;
Now We Wrote A Function Just Below It, This Function Runs Everytime A Clients Visits &lt;code&gt;/&lt;/code&gt; and may return something, Similarly If We Create &lt;code&gt;/hello&lt;/code&gt;, The Function Defined Below Will Be Executed If Someone Visits &lt;code&gt;/hello&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In The Function We Did Not Do Something Crazy, All We Did Is Returned A Dictonary. But.... Why A Dictonary?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-a-dictonary"&gt;
  &lt;/a&gt;
  Why A Dictonary?
&lt;/h2&gt;

&lt;p&gt;Now If You Noticed We Used A Dictonary, This Raises a Question, Why? Why A Dictonary? We Use A Dictonary Because We Can't Use Strings To Send Data Over HTTP, We Use Something Called JSON. JSON Is a Format Of Data That Is Commomly Used To Talk Over HTTP. A JSON Data Looks Something Like This &lt;code&gt;{'data':'I AM JSON'}&lt;/code&gt;. Get The Point Now? FastAPI Converts A &lt;code&gt;Dict&lt;/code&gt; object to a &lt;code&gt;JSON&lt;/code&gt; Object.(See &lt;a href="https://www.json.org/json-en.html"&gt;here&lt;/a&gt; or &lt;a href="https://en.wikipedia.org/wiki/JSON"&gt;here&lt;/a&gt; to read more about JSON)&lt;/p&gt;

&lt;p&gt;And That's All We Did.&lt;/p&gt;

&lt;p&gt;In The Next Post I Will Tell How To Accept Something As A Parameter And Will Explain It In The Same Post&lt;/p&gt;

&lt;p&gt;See You All In The Next Post, Till Then Keep Practicing.&lt;/p&gt;

</description>
      <category>python</category>
      <category>api</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>this keyword in JavaScript</title>
      <author>Chinmay Mhatre</author>
      <pubDate>Tue, 29 Jun 2021 11:09:13 +0000</pubDate>
      <link>https://dev.to/chinmaymhatre/this-keyword-in-javascript-421d</link>
      <guid>https://dev.to/chinmaymhatre/this-keyword-in-javascript-421d</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Hey everyone !&lt;br&gt;
I have been recently learning &lt;code&gt;ReactJS&lt;/code&gt;. While learning about class based components I stumbled across the &lt;code&gt;bind&lt;/code&gt; keyword.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;somefunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;somefunction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While trying to understand this line of code, I realized that the binding of the methods is not a React specific thing, It is a JavaScript thing .&lt;/p&gt;

&lt;p&gt;I also realized that to understand the trio of &lt;code&gt;call, apply and bind&lt;/code&gt; which basically do similar things, we need to understand the &lt;code&gt;this&lt;/code&gt; keyword in JavaScript.&lt;/p&gt;

&lt;p&gt;So, today I'd like to discuss about :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is &lt;code&gt;this&lt;/code&gt; ?&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;this&lt;/code&gt; in global scope&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;this&lt;/code&gt; within an object&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;this&lt;/code&gt; within a function&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;this&lt;/code&gt; within classes&lt;/li&gt;
&lt;li&gt;The call, apply and bind methods&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By learning about all these things we get to know why we bind methods in ReactJS.&lt;/p&gt;

&lt;p&gt;Alright! let's get going.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cm_NWQIO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/51131670/121888880-25245c00-cd36-11eb-93f8-9f810940cb4e.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cm_NWQIO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/51131670/121888880-25245c00-cd36-11eb-93f8-9f810940cb4e.gif" alt="plane"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-what-is-raw-this-endraw-all-about-"&gt;
  &lt;/a&gt;
  So what is &lt;code&gt;this&lt;/code&gt; all about ?
&lt;/h2&gt;

&lt;p&gt;When we use 'this' in our daily conversations it always has a context attached with it, right? For instance, the sentence "This is my house" can only make sense in two ways when you are inside the house or you point to the house you are talking about. &lt;/p&gt;

&lt;p&gt;If in the middle of the street you say "This is my house" it doesn't really make sense, because 'this' isn't really pointing to anything. If you have a picture of your house then regardless of the location you can point to the picture and attach the context to 'this', it will be like 'this house(in the picture) is my house'.&lt;/p&gt;

&lt;p&gt;Similarly in JavaScript, &lt;code&gt;this&lt;/code&gt; keyword will point to something according to the context it is in or we can point it to the thing we want using call, apply and bind . This will make better sense when we see the different contexts &lt;code&gt;this&lt;/code&gt; can be defined in. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#in-global-context"&gt;
  &lt;/a&gt;
  In Global Context
&lt;/h2&gt;

&lt;p&gt;When we create a JavaScript file, even if there are zero lines of code written in the file a few things are created. One of the things created is the window object. The window object contains different properties and methods including things related to DOM. &lt;/p&gt;

&lt;p&gt;When we write the &lt;code&gt;this&lt;/code&gt; keyword in a global context ( outside any kind of function ), by default it points to the &lt;code&gt;window&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;If we create a variable like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;thing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;window thing&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;we could access it using &lt;code&gt;this.thing&lt;/code&gt; as well as &lt;code&gt;window.thing&lt;/code&gt; since &lt;code&gt;this&lt;/code&gt; points to the window object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;thing&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// # "window thing"&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;thing&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// # "window thing"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#strict-mode"&gt;
  &lt;/a&gt;
  Strict Mode
&lt;/h2&gt;

&lt;p&gt;Before we proceed to the context of a function, we need to understand strict mode.&lt;/p&gt;

&lt;p&gt;In simple words, strict mode apply more restrictions and rules to JavaScript. Certain things would be allowed in non-strict mode but throw an error in strict mode.&lt;/p&gt;

&lt;p&gt;We can enable strict mode using the statement &lt;code&gt;"use strict"&lt;/code&gt; in the JS file .&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#within-a-function"&gt;
  &lt;/a&gt;
  Within a function
&lt;/h2&gt;

&lt;p&gt;From here onwards, things will get a little weird, so stick with me.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;printsomething&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Window object&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;printsomething&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we call &lt;code&gt;this&lt;/code&gt; in a function in non-strict mode it points to the window or the global object. In strict mode &lt;code&gt;this&lt;/code&gt; is undefined and it looses the context.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;printsomething&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;printsomething&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#within-an-object"&gt;
  &lt;/a&gt;
  Within an object
&lt;/h2&gt;

&lt;p&gt;When we call the &lt;code&gt;this&lt;/code&gt; keyword in an object method, &lt;code&gt;this&lt;/code&gt; points to the object it was defined in. &lt;/p&gt;

&lt;p&gt;For Example :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Some other movie&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;movie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Peanut Butter Falcon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;print&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;movie&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;// OUTPUT&lt;/span&gt;
&lt;span class="c1"&gt;// Peanut Butter Falcon&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, we define a method called &lt;code&gt;print&lt;/code&gt; within the object &lt;code&gt;movie&lt;/code&gt;. The object &lt;code&gt;movie&lt;/code&gt; has a property called &lt;code&gt;name&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;print&lt;/code&gt; we call &lt;code&gt;console.log(this.name)&lt;/code&gt; which would basically point to the &lt;code&gt;name&lt;/code&gt; property of the &lt;code&gt;movie&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;It will &lt;strong&gt;&lt;em&gt;not&lt;/em&gt;&lt;/strong&gt; print "Some other movie" since the &lt;code&gt;print&lt;/code&gt; function is in the context of the object &lt;code&gt;movie&lt;/code&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-weird-part"&gt;
  &lt;/a&gt;
  The weird part
&lt;/h2&gt;

&lt;p&gt;Remember when I told you that the value of &lt;code&gt;this&lt;/code&gt; depends on the way it was called?&lt;br&gt;
Let us use the same object we used previously to understand this. &lt;/p&gt;

&lt;p&gt;What if we assign the method &lt;code&gt;print&lt;/code&gt; to another variable called &lt;code&gt;globalprint&lt;/code&gt;?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Rocky&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;movie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Peanut Butter Falcon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;print&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;globalprint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;movie&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;print&lt;/span&gt;

&lt;span class="nx"&gt;globalprint&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;//output : Rocky&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, the context of &lt;code&gt;this&lt;/code&gt; has changed to the global context since &lt;code&gt;globalprint&lt;/code&gt; is not a method of the &lt;code&gt;movie&lt;/code&gt; object, it is an independent function as we have seen in the function section, points to the global context in &lt;code&gt;non-strict mode&lt;/code&gt; and is undefined in &lt;code&gt;strict mode&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So, the output would be &lt;code&gt;"Rocky"&lt;/code&gt; instead of &lt;code&gt;"Peanut Butter Falcon"&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bmWUTodv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/51131670/123542591-08d9e380-d768-11eb-82c3-71f3bb64fdba.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bmWUTodv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/51131670/123542591-08d9e380-d768-11eb-82c3-71f3bb64fdba.gif" alt="this is fine"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;This also applies to callback functions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Rocky&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;movie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Peanut Butter Falcon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;print&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;movie&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;print&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Output : Rocky&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can try to fake a setTimeout method to look at how this works.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

   &lt;span class="c1"&gt;//wait for 'delay' milliseconds&lt;/span&gt;
   &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;movie&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Internally the setTimeout method assigns the &lt;code&gt;movie.print&lt;/code&gt; to it's callback argument.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;callback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;movie&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;print&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we saw before, assigning a method to another variable changes it's context. Thus &lt;code&gt;print&lt;/code&gt; will be "undefined" in &lt;code&gt;strict mode&lt;/code&gt; and in &lt;code&gt;non-strict mode&lt;/code&gt; &lt;br&gt;
it will print "Rocky".&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#within-class-methods"&gt;
  &lt;/a&gt;
  Within class methods &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;theatre&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;movie&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;movie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;movie&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is watching &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;movie&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;peter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;theatre&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;peter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;interstellar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;theatre&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;jack&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;inception&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;jack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;//output : peter is watching interstellar&lt;/span&gt;
&lt;span class="nx"&gt;peter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;//output : jack is watching inception&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Within a class &lt;code&gt;this&lt;/code&gt; point to the current instance of the class.&lt;br&gt;
Here the instances being &lt;code&gt;jack&lt;/code&gt; and &lt;code&gt;peter&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;However, the class methods like &lt;code&gt;display&lt;/code&gt; will lose context if passed as a callback function or assigned to another variable like we saw in the functions section.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Class expression and methods such as the constructor or any class methods are always executed in &lt;code&gt;strict mode&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Thus callbacks, instead of taking the global context, will be undefined.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;jack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt;
&lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// "this" will be undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will be learning about &lt;code&gt;bind&lt;/code&gt; method shortly to fix this problem. To give you an idea , &lt;code&gt;bind&lt;/code&gt; will basically glue value of &lt;code&gt;this&lt;/code&gt; to the display function and it will always be called in that context, fixing the problem of the context getting lost.&lt;/p&gt;




&lt;p&gt;Remember the house analogy I used in the beginning?&lt;br&gt;
We'll now understand the pointing at the picture of the house part, that is basically telling javascript explicitly where you want &lt;code&gt;this&lt;/code&gt; keyword to point rather than JavaScript assigning it for you.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#call"&gt;
  &lt;/a&gt;
  call
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;call&lt;/code&gt; method is used to call a function with the &lt;code&gt;this&lt;/code&gt; pointing to a thing of your choice.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;call(thisArg, arg1, ... , argN)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;thisArg&lt;/code&gt; helps the call function to knw on which &lt;code&gt;this&lt;/code&gt; should the function be called.&lt;br&gt;
Rest arguments are the arguments passed to the function.&lt;/p&gt;

&lt;p&gt;Let's understand the use case with an example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;movie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Peanut Butter Falcon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;print&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Remember this object? &lt;br&gt;
What if we create two movie objects with different movies?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;movie1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Peanut Butter Falcon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;print&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;movie2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The imitation game&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;print&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can see here the &lt;code&gt;print&lt;/code&gt; function is repeated. If there were more of these&lt;br&gt;
objects, we would have to write the same print function multiple times.&lt;/p&gt;

&lt;p&gt;We could use a &lt;code&gt;call&lt;/code&gt; method in this case.&lt;/p&gt;

&lt;p&gt;We would remove the &lt;code&gt;print&lt;/code&gt; method out of the objects and make it as a separate function .&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;printThings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;movie1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Peanut Butter Falcon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;   
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;movie2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The imitation game&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we will use the &lt;code&gt;call&lt;/code&gt; method on the &lt;code&gt;print&lt;/code&gt; function with reference to whichever &lt;code&gt;this&lt;/code&gt; value we want&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;printThings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;movie1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// output : "Peanut Butter Falcon"&lt;/span&gt;
&lt;span class="nx"&gt;printThings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;movie2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// output : "The imitation game"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;printThings.call(movie1)&lt;/code&gt; tells JavaScript that we want the above function's &lt;code&gt;this&lt;/code&gt; to point to movie1 object and similarly for movie2.&lt;/p&gt;

&lt;p&gt;It is as though the function is inside the object like given below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;movie1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Peanut Butter Falcon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;print&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#what-if-there-are-parameters-in-the-function-how-do-we-pass-those-"&gt;
  &lt;/a&gt;
  What if there are parameters in the function, how do we pass those ?
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;printThings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is watching &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;movie1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Peanut Butter Falcon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;   
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;movie2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The imitation game&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;print&lt;/code&gt; function now has an parameter called &lt;code&gt;person&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So how do we use the call method and pass the arguments?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;printThings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;movie1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;James&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// output : "James is watching Peanut Butter Falcon"&lt;/span&gt;
&lt;span class="nx"&gt;printThings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;movie2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Peter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// output : "Peter is watching The imitation game"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first argument is always the &lt;code&gt;this&lt;/code&gt; argument , Rest can be passed after it like it is done in the above example.&lt;/p&gt;

&lt;p&gt;Let's take one more example :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;printprintThings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lname&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;lname&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is watching &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;movie1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Peanut Butter Falcon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;   
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;movie2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The imitation game&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;printThings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;movie1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;James&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Bond&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// output : "James Bond is watching Peanut Butter Falcon"&lt;/span&gt;
&lt;span class="nx"&gt;printThings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;movie2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Peter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Pan&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// output : "Peter Pan is watching The imitation game"&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This example just has one more parameter than the previous one.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#apply"&gt;
  &lt;/a&gt;
  apply
&lt;/h2&gt;

&lt;p&gt;The only difference between &lt;code&gt;call&lt;/code&gt; and &lt;code&gt;apply&lt;/code&gt; is that &lt;code&gt;apply&lt;/code&gt; method calls a function with a &lt;code&gt;this&lt;/code&gt; value and arguments as an array instead of passing the arguments individually like the call method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;thisArg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;argArray&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We could use the previous example and use apply on it instead of call.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;printThings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lname&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;lname&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is watching &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;movie1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Peanut Butter Falcon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;   
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;movie2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The imitation game&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;printThings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;movie1&lt;/span&gt;&lt;span class="p"&gt;,[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;James&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Bond&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;// output : "James Bond is watching Peanut Butter Falcon"&lt;/span&gt;
&lt;span class="nx"&gt;printThings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;movie2&lt;/span&gt;&lt;span class="p"&gt;,[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Peter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Pan&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;// output : "Peter Pan is watching The imitation game"&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It gives the same result.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#bind"&gt;
  &lt;/a&gt;
  bind
&lt;/h2&gt;

&lt;p&gt;Bind is different from call and apply in the sense that bind returns a new function instead of calling the existing function immediately.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;thisArg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;argN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we could bind the function to a &lt;code&gt;this&lt;/code&gt; value .&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;printThings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lname&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;lname&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is watching &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;printThings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;printThings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;movie1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;James&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Bond&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;printThings&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// output : "James Bond is watching Peanut Butter Falcon"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thus we bind the printThings function to movie1 and we can call it whenever we want. &lt;/p&gt;




&lt;p&gt;Let us take one more example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;movie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Saving Private Ryan&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;outerFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;innerFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(){&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;movie&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;innerFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;outerFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From what we have seen, the above code won't work, right? Since the context is lost.&lt;/p&gt;

&lt;p&gt;Let us &lt;code&gt;bind&lt;/code&gt; the outerFunction and use &lt;code&gt;call&lt;/code&gt; on the inner function and give them the &lt;code&gt;this&lt;/code&gt; value&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;movie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Saving Private Ryan&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;outerFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;innerFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(){&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;movie&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;innerFunction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="c1"&gt;//Here "this" means the outerFunction&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;outerFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;outerFunction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="c1"&gt;// Here "this" means the global context&lt;/span&gt;
    &lt;span class="nx"&gt;outerFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;//Output : "Saving Private Ryan"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;Finally, Let's try to fix the class which we made in the &lt;code&gt;Within a class&lt;/code&gt; section. &lt;a href="#withinClass"&gt;click here to take a look at it again&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;theatre&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;movie&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;movie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;movie&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is watching &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;movie&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;theatre&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;jack&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;inception&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;jack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt;
&lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The only thing we have to do to get this working is to bind the method &lt;code&gt;display&lt;/code&gt; to the &lt;code&gt;this&lt;/code&gt; value of the class.&lt;/p&gt;

&lt;p&gt;We can do this either in the constructor&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;theatre&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;movie&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;movie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;movie&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Here&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is watching &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;movie&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;theatre&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;jack&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;inception&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;jack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt;
    &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or bind it while passing it as a callback.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jack&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;//output : jack is watching inception&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;jack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;//output : jack is watching inception&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#arrow-functions"&gt;
  &lt;/a&gt;
  Arrow Functions
&lt;/h2&gt;

&lt;p&gt;Arrow functions are another way to solve the binding problem.&lt;/p&gt;

&lt;p&gt;Arrow function have something called as a "lexical scope".&lt;/p&gt;

&lt;p&gt;What that means is that arrow function does not have it's own &lt;code&gt;this&lt;/code&gt; context, it borrows the context from the parent element or the context it was defined in.&lt;/p&gt;

&lt;p&gt;Hence, in the above example the outer function will get it's context from the global context and the inner function will get it's context from the outer function .&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;movie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Saving Private Ryan&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;outerFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;innerFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;movie&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;innerFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;outerFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;//Output : "Saving Private Ryan"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#-raw-bind-endraw-in-reactjs"&gt;
  &lt;/a&gt;
  &lt;code&gt;bind&lt;/code&gt; in ReactJS
&lt;/h2&gt;

&lt;p&gt;We have already seen all the javascript specific reasons we bind a function or a method. The same applies for ReactJS.&lt;/p&gt;

&lt;p&gt;In React we generally call a class method using an event handler like &lt;code&gt;onClick&lt;/code&gt;, we pass the method we want to execute as a callback to the handler function.&lt;/p&gt;

&lt;p&gt;That is why the value of &lt;code&gt;this&lt;/code&gt; is lost .&lt;/p&gt;

&lt;p&gt;By binding it explicitly we make sure it doesn't happen.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VGZLeA7l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/51131670/123542532-bdbfd080-d767-11eb-9a24-4a8ba0343605.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VGZLeA7l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/51131670/123542532-bdbfd080-d767-11eb-9a24-4a8ba0343605.gif" alt="that's all folk"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope you learnt something from this blog.&lt;/p&gt;

&lt;p&gt;Let me know in the comments if you found this helpful .&lt;/p&gt;

&lt;p&gt;See you in the next one :)  &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>JS Confetti library with emojis ⚡️ 🎉</title>
      <author>Vladimir Nikitin</author>
      <pubDate>Tue, 29 Jun 2021 11:01:24 +0000</pubDate>
      <link>https://dev.to/loonywizard/js-confetti-library-with-emojis-2152</link>
      <guid>https://dev.to/loonywizard/js-confetti-library-with-emojis-2152</guid>
      <description>&lt;p&gt;Hi everyone!&lt;/p&gt;

&lt;p&gt;Happy to announce, that my library &lt;a href="https://github.com/loonywizard/js-confetti"&gt;js-confetti&lt;/a&gt; now supports emojis!&lt;/p&gt;

&lt;p&gt;Please look at &lt;a href="https://github.com/loonywizard/js-confetti#readme"&gt;README&lt;/a&gt; for instructions for Installation &amp;amp; Usage&lt;/p&gt;

&lt;p&gt;All you need is to provide &lt;code&gt;emojis&lt;/code&gt; array to &lt;code&gt;addConfetti&lt;/code&gt; method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;JSConfetti&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;js-confetti&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jsConfetti&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;JSConfetti&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;// different emojis&lt;/span&gt;
&lt;span class="nx"&gt;jsConfetti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addConfetti&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
   &lt;span class="na"&gt;emojis&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;🌈&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;⚡️&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;💥&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;✨&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;💫&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;🌸&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// confetti from only unicorn emojis&lt;/span&gt;
&lt;span class="nx"&gt;jsConfetti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addConfetti&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;emojis&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;🦄&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// different arguments in .addConfetti&lt;/span&gt;
&lt;span class="nx"&gt;jsConfetti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addConfetti&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;emojis&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;✨&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;💫&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;emojiSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;confettiNumber&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://loonywizard.github.io/js-confetti"&gt;You can see demo here&lt;/a&gt; 🚀&lt;/p&gt;

&lt;p&gt;I will be happy if this will be useful for anybody!&lt;/p&gt;

&lt;p&gt;Feel free to add Issues for feature-requests / bugs&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>ECMAScript 2021 New Updates</title>
      <author>Animesh</author>
      <pubDate>Tue, 29 Jun 2021 11:01:17 +0000</pubDate>
      <link>https://dev.to/animeshmaru/ecmascript-2021-new-updates-1ie9</link>
      <guid>https://dev.to/animeshmaru/ecmascript-2021-new-updates-1ie9</guid>
      <description>&lt;p&gt;&lt;strong&gt;INTRODUCTION&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ECMAScript is a part of JavaScript language which is mostly used in web technology, building websites or web apps.  ECMAScript is growing as one of the world's most widely used general-purpose programming languages.  It is majorly used in embedding with web browsers and also adopted for server and embedded applications.&lt;/p&gt;

&lt;p&gt;New updates to ECMAScript will release out this July. The new improvements are introduced to make JavaScript more powerful and also make working easy for developers. It provides new functions, simple ways to do complex works and much more.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6d6-cbx_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gabgbevz3q42eprpi4an.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6d6-cbx_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gabgbevz3q42eprpi4an.gif" alt="ECAMA"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NEW UPDATES&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The new JavaScript features in ECMAScript 2021 are:&lt;br&gt;
       1. Logical assignment operators&lt;br&gt;
           And &amp;amp; Equals (&amp;amp;&amp;amp;=)&lt;br&gt;
           OR &amp;amp; Equals (||=)&lt;br&gt;
           Nullish Coalescing &amp;amp; Equals (??=)&lt;br&gt;
       2. Numeric Separators&lt;br&gt;
       3. String replaceAll&lt;br&gt;
       4. Promise.any&lt;br&gt;
       5. Private class methods&lt;br&gt;
       6. Private Getters and setters&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Logical assignment operators&lt;/strong&gt;&lt;br&gt;
Logical assignment operators introduce new operators which combine logical operators and assignment expressions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And &amp;amp; Equals (&amp;amp;&amp;amp;=)&lt;/strong&gt;&lt;br&gt;
It assigns  when the value  is truthy.&lt;/p&gt;

&lt;p&gt;Previous :&lt;br&gt;
let x = 1;&lt;br&gt;
if(x){&lt;br&gt;
  a = 10;&lt;br&gt;
}&lt;br&gt;
// Output: x = 10&lt;br&gt;
New :&lt;br&gt;
let x = 1;&lt;br&gt;
x &amp;amp;&amp;amp;= 10&lt;br&gt;
// Output: x = 10&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OR &amp;amp; Equals (||=)&lt;/strong&gt;&lt;br&gt;
It assigns when the value is falsy.&lt;/p&gt;

&lt;p&gt;Previous :&lt;br&gt;
let x = 0;&lt;br&gt;
x = x || 10;&lt;br&gt;
// Output: x = 10&lt;br&gt;
New :&lt;br&gt;
let x = 0;&lt;br&gt;
x ||= 10&lt;br&gt;
// Output: x = 10&lt;/p&gt;

&lt;p&gt;Explanation the assignment operation happens only if x is a falsy value.  if x contains 1 which is a truthy value, assignment does not happen. Here x contains 0 therefore assignment happens.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Nullish Coalescing &amp;amp; Equals (??=)&lt;/strong&gt;&lt;br&gt;
Symbol ?? is Nullish Coalescing operator in JavaScript. It  checks if a value is null or undefined.&lt;/p&gt;

&lt;p&gt;let x;&lt;br&gt;
let y = 10;&lt;br&gt;
x ??= y;&lt;/p&gt;

&lt;p&gt;Value of x is undefined, therefor the right hand side expression is evaluated and sets x to 10.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Numeric Separators&lt;/strong&gt;&lt;br&gt;
To improve readability and to separate groups of digits, numeric literals use underscores as separators.&lt;/p&gt;

&lt;p&gt;// A billion dollar that I want to earn&lt;br&gt;
const money = 1_000_000_000;&lt;br&gt;
const money = 1_000_000_000.00;&lt;br&gt;
// Also can be used for Binary, Hex, Octal bases&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--baQpR7rT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y4s1z324b0hho1q0yf4q.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--baQpR7rT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y4s1z324b0hho1q0yf4q.gif" alt="js"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.  String replaceAll&lt;/strong&gt;&lt;br&gt;
If we want to replace all instances of a substring in string than this new method  replaceAll is very useful.&lt;/p&gt;

&lt;p&gt;const s = "You are reading JavaScript 2021 new updates.";&lt;br&gt;
console.log(s.replaceAll("JavaScript", "ECMAScript"));&lt;/p&gt;

&lt;p&gt;// output : You are reading ECMAScript 2021 new updates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Promise.any&lt;/strong&gt;&lt;br&gt;
The Promise.any() method returns a promise that will resolve as soon as one of the promises is resolved. It is opposite of Promise.all() method which waits for all promises to resolve before it resolves.&lt;/p&gt;

&lt;p&gt;Wait, what will happen when all of the promises are rejected, Yes you get that, the method will throw an AggregateError exception with the rejection reason. We have to put the code inside try-catch block.&lt;/p&gt;

&lt;p&gt;const promiseOne = new Promise((resolve, reject) =&amp;gt; {&lt;br&gt;
  setTimeout(() =&amp;gt; reject(), 1000);&lt;br&gt;
});&lt;br&gt;
const promiseTwo = new Promise((resolve, reject) =&amp;gt; {&lt;br&gt;
  setTimeout(() =&amp;gt; reject(), 2000);&lt;br&gt;
});&lt;br&gt;
const promiseThree = new Promise((resolve, reject) =&amp;gt; {&lt;br&gt;
  setTimeout(() =&amp;gt; reject(), 3000);&lt;br&gt;
});&lt;br&gt;
try {&lt;br&gt;
  const first = await Promise.any([&lt;br&gt;
    promiseOne, promiseTwo, promiseThree&lt;br&gt;
  ]);&lt;br&gt;
  // If any of the promises was satisfied.&lt;br&gt;
} catch (error) {&lt;br&gt;
  console.log(error);&lt;br&gt;
  // AggregateError: If all promises were rejected&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Private class methods&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Private method have scope inside the class only so outside the class they are not accessible, see this example&lt;/p&gt;

&lt;p&gt;Previous :&lt;br&gt;
class Me{&lt;br&gt;
  showMe() {&lt;br&gt;
    console.log("I am a programmer")&lt;br&gt;
  }&lt;br&gt;
  #notShowMe() {&lt;br&gt;
    console.log("Hidden informations")&lt;br&gt;
  }&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;const me = new Me()&lt;/p&gt;

&lt;p&gt;me.showMe()&lt;br&gt;
me.notShowMe() &lt;/p&gt;

&lt;p&gt;This code will throw an error that gfg.notShowMe is not a function. This is because #notShowMe() is now a private method inside the class GfG and can only be access via a public method inside the class.&lt;/p&gt;

&lt;p&gt;New :&lt;br&gt;
class Me {&lt;br&gt;
  showMe() {&lt;br&gt;
    console.log("I am a programmer");&lt;br&gt;
  }&lt;br&gt;
  #notShowMe() {&lt;br&gt;
    console.log("Hidden informations");&lt;br&gt;
  }&lt;br&gt;
  showAll() {&lt;br&gt;
    this.showMe()&lt;br&gt;
    this.#notShowMe();&lt;br&gt;
  }&lt;br&gt;
}&lt;br&gt;
const me = new Me();&lt;br&gt;
me.showAll();&lt;/p&gt;

&lt;p&gt;Now we create a new public method called showAll() inside the class Me from this public method we can access the private method #notShowMe()  and since our new method is a public we get this &lt;strong&gt;output :&lt;/strong&gt;&lt;br&gt;
I am a programmer&lt;br&gt;
Hidden informations&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. Private Getters and setters&lt;/strong&gt;&lt;br&gt;
Just like private methods, now we can make getters and setters as private so that they can only accessed inside class or by instance created.&lt;/p&gt;

&lt;p&gt;class Me {&lt;br&gt;
  get #Name() {&lt;br&gt;
    return "Animesh"&lt;br&gt;
  }&lt;/p&gt;

&lt;p&gt;get viewName() {&lt;br&gt;
    return this.#Name&lt;br&gt;
  }&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;let name = new Me();&lt;br&gt;
console.log(name.viewName)&lt;/p&gt;

&lt;p&gt;// Output: Animesh&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;br&gt;
JavaScript is most popular language and these frequent updates of new features make it more awesome and development friendly. So Welcome all these new features..&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Updates Rocks!&lt;/strong&gt; &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>news</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Cohorts and customisation</title>
      <author>Hendrik</author>
      <pubDate>Tue, 29 Jun 2021 10:54:58 +0000</pubDate>
      <link>https://dev.to/hendr_ik/cohorts-and-customisation-1ode</link>
      <guid>https://dev.to/hendr_ik/cohorts-and-customisation-1ode</guid>
      <description>&lt;p&gt;We are building &lt;a href="https://www.offen.dev/?utm_source=forum&amp;amp;utm_campaign=0190"&gt;Offen,&lt;/a&gt; a fair and lightweight web analytics software that treats operators and users as equal parties. Here's a brief glimpse of our achievements over the last ten weeks.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#customisable-consent-banner"&gt;
  &lt;/a&gt;
  Customisable consent banner
&lt;/h3&gt;

&lt;p&gt;To make it more convenient for operators to implement Offen in their websites, banners can now be freely adapted via CSS. This is done within some limits to ensure readability and functionality of the banner. Discover your inner artist and adapt the consent banner to the design of your website. &lt;a href="https://docs.offen.dev/running-offen/customizing-consent-banner/?utm_source=forum&amp;amp;utm_campaign=0190"&gt;Learn more in our Docs.&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#explore-cohorts"&gt;
  &lt;/a&gt;
  Explore cohorts
&lt;/h3&gt;

&lt;p&gt;It is now possible for operators to filter the collected usage data based on URL, referrer, UTM parameters and landings as well as exits. In addition, we have added the tag "None" as a fallback for referrer values that are not supplied. Filters can be set and removed by clicking on the corresponding link element.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#engage-in-dialogue"&gt;
  &lt;/a&gt;
  Engage in dialogue
&lt;/h3&gt;

&lt;p&gt;We aim to bring Open and the idea of fair data transfer closer to an interested audience. To do this, we want to engage in a dialogue with operators, users and activists and are looking for suitable events around the world. We are happy to receive recommendations for relevant lectures and conferences. Got something in mind that we should apply for? &lt;a href="https://www.offen.dev/?utm_source=forum&amp;amp;utm_campaign=0190"&gt;Please let us know.&lt;/a&gt;&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>webdev</category>
      <category>opensource</category>
      <category>privacy</category>
    </item>
  </channel>
</rss>
