<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>WhatsApp Clone (Backend &amp; FrontEnd)</title>
      <author>Balram Rathore</author>
      <pubDate>Sun, 09 May 2021 10:32:37 +0000</pubDate>
      <link>https://dev.to/devstack06/whatsapp-clone-backend-frontend-254b</link>
      <guid>https://dev.to/devstack06/whatsapp-clone-backend-frontend-254b</guid>
      <description>&lt;p&gt;Hi guys, I created the WhatsApp Clone using Flutter. Please check out the screenshots of the app &amp;amp; source code in my GitHub -&lt;a href="https://github.com/DevStack06/Whatsapp-Clone-Flutter"&gt;https://github.com/DevStack06/Whatsapp-Clone-Flutter&lt;/a&gt; And please do star the repo if you liked it!!&lt;/p&gt;

&lt;p&gt;You can also check the Youtube Playlist, which will cover both Front-End and Backend Development: &lt;a href="https://youtube.com/playlist?list=PLtIU0BH0pkKovuEaNsrGE_Xd5Tz3m1zeC"&gt;https://youtube.com/playlist?list=PLtIU0BH0pkKovuEaNsrGE_Xd5Tz3m1zeC&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Any suggestions are warmly welcomed, and it is open source so feel free to contribute ✌️✌️✌️.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lqRC3MnB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/06663si6zj6louvdksh9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lqRC3MnB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/06663si6zj6louvdksh9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>node</category>
    </item>
    <item>
      <title>Playing with JavaScript Objects</title>
      <author>Neha Soni</author>
      <pubDate>Sun, 09 May 2021 10:24:28 +0000</pubDate>
      <link>https://dev.to/nehasoni__/playing-with-javascript-objects-k4h</link>
      <guid>https://dev.to/nehasoni__/playing-with-javascript-objects-k4h</guid>
      <description>&lt;p&gt;Objects are the foundation of JavaScript. Everything except primitive data-types(null,undefined,numbers etc.) in JavaScript is an &lt;strong&gt;object&lt;/strong&gt;. So having a strong clench on this concept is very necessary.&lt;br&gt;
JavaScript objects include arrays, functions, constructors, and objects themselves.&lt;/p&gt;

&lt;p&gt;In this article, we are going to learn about objects.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#this-blog-post-will-cover"&gt;
  &lt;/a&gt;
  This Blog post will cover
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- What are objects?
- Properties of objects
      - Creation
      - Retrieving
      - Existence
      - Updation
      - Deletion
      - Iteration
      - Comparison
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Let's get started&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-are-objects"&gt;
  &lt;/a&gt;
  What are Objects?
&lt;/h2&gt;

&lt;p&gt;An object is a standalone entity with properties and values. The value of the property could de number, string, boolean, functions, arrays, and even another object.&lt;br&gt;
According to Mozilla developer's guide "&lt;code&gt;An object is a collection of properties, and a property is an association between a name (or key) and a value.&lt;/code&gt;" In simple terms, objects consist of some key-value pairs called Properties. These properties define objects' behavior and attributes.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KyZYSxOR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619414003908/Ylm7XcwXZ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KyZYSxOR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619414003908/Ylm7XcwXZ.png" alt="Screenshot (200).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the above example, the &lt;strong&gt;Student&lt;/strong&gt; object has four properties describing it - ID, NAME, AGE, COURSES.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#properties-of-objects"&gt;
  &lt;/a&gt;
  Properties of objects
&lt;/h2&gt;

&lt;p&gt;In this article, we are going to play with objects by performing some operations on them:-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Creation-&lt;/strong&gt; Creating an object&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Retrieving-&lt;/strong&gt; Accessing the Properties of an Object&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Existence-&lt;/strong&gt; Check whether the particular property exists or not&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Updation-&lt;/strong&gt; Updating the value of existing property&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Deletion-&lt;/strong&gt; Deleting the existing property&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Iteration-&lt;/strong&gt; Looping over an object's properties&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Comparison-&lt;/strong&gt; Comparing the two objects&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#creation"&gt;
  &lt;/a&gt;
  Creation
&lt;/h2&gt;

&lt;p&gt;In JS, there are many ways to create objects. Let us look at each of them with examples:-&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#1-using-literal-notation"&gt;
  &lt;/a&gt;
  1.) Using "literal" notation:-
&lt;/h4&gt;

&lt;p&gt;This is the simplest way of creating an object. Here the objects are created with curly brackets. An object is represented as -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const user={ };  //creating an empty object
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Empty objects are objects with no properties. You can also specify the properties while creating an object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const student = {
  ID: 5001,
  'NAME': 'Neha', // Using string quotes
  AGE: 20,
  isHosteler: true,
  COURSES: ['JAVA', 'ReactJS', 'MYSQL'],   //array
  parentDetails:{                       //nested object
      fatherName:'G.K.SONI',
  }
  message: function(){             //function 
      return `Hi ${this.NAME}, Welcome to Chitkara University!!!`
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In objects, the property names(key) are treated as strings and values can be of any type either primitive or non-primitive. When we have a function as a value to the key then this function is called methods.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-using-new-keyword"&gt;
  &lt;/a&gt;
  2.) Using new keyword
&lt;/h4&gt;

&lt;p&gt;Using this method you can first create an object using the &lt;code&gt;new&lt;/code&gt; keyword and then add the properties to it later.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var user=new Object(); 
user.name="aditya",
user.age=21
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#4-using-constructor"&gt;
  &lt;/a&gt;
  4.) Using Constructor
&lt;/h4&gt;

&lt;p&gt;A constructor is a special method that is automatically called when an object is created. We can optionally pass parameters while the creation of an object using a new keyword. This method of creating an object is recommended in real-life projects because you can create as many objects as you would like by using the new keyword. Also if you need to edit or add a property, it's very easy to do it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const Books = function(title, author, authNationality) {
    this.title = title;
    this.author = author;
    this.authNationality = authNationality;

    this.getDetails = function() {
        console.log(`${this.title}, by ${this.author}(${this.authNationality});
    }
}

const book1 = new Movie('The God of Small Things', 'Arundhati Roy', 'Indian');
const book2 = new Movie('The Bell Jar', 'Sylvia Plath', 'American');

console.log(book1.getDetails());
console.log(book2.getDetails());
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#retrieving"&gt;
  &lt;/a&gt;
  Retrieving
&lt;/h2&gt;

&lt;p&gt;The properties assigned to object can be retrieved or accessed by using two ways:-&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-dot-notation"&gt;
  &lt;/a&gt;
  1.) Dot Notation
&lt;/h4&gt;

&lt;p&gt;Here, the object name and property name are separated by the &lt;code&gt;.&lt;/code&gt;(dot) operator. If the property exists we get its value. If the property doesn't exist we get &lt;code&gt;undefined&lt;/code&gt;.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Example:-&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;html&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;script&amp;gt;
      const book = {
        title : 'The God of Small Things',
        author : 'Arundhati Roy',
        authNationality: 'Indian'
      }

      document.write(book.title+"&amp;lt;br/&amp;gt;");
      document.write(book.year);
    &amp;lt;/script&amp;gt;    
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using dot notation you can't use the property names that are special characters, numbers, or strings that contain spaces, these will throw a syntax error.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Example&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;obj.10='ten';
obj.first name='neha';
obj.first-name='neha;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Output&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xwKOAwwx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619421007690/cqHFgTcR3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xwKOAwwx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619421007690/cqHFgTcR3.png" alt="Screenshot (202).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-bracket-notation"&gt;
  &lt;/a&gt;
  2.) Bracket Notation
&lt;/h4&gt;

&lt;p&gt;We can also access the object by using the square brackets [].&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;script&amp;gt;
      const book = {
        title : 'The God of Small Things',
        author : 'Arundhati Roy',
        authNationality: 'Indian'
      }

      console.log(book['title']+"&amp;lt;br/&amp;gt;");
    &amp;lt;/script&amp;gt;    
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Bracket notation is more expressive than dot notation because it allows a variable to specify all or part of the property name. Bracket notation also allows property names to contain characters that are forbidden in dot notation.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Example&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;obj[10]='ten';
obj[first name]='neha';
obj[first-name]='neha;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;This is valid!!!&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#existence"&gt;
  &lt;/a&gt;
  Existence
&lt;/h2&gt;

&lt;p&gt;Sometimes we only want to know whether the particular property exists in an object or not and JavaScript provides you with two common ways to check this:-&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-hasownproperty-method"&gt;
  &lt;/a&gt;
  1.) hasOwnProperty() method
&lt;/h4&gt;

&lt;p&gt;JavaScript object has a special method &lt;code&gt;obj.hasOwnProperty('propName')&lt;/code&gt; that returns a boolean value indicating whether the &lt;code&gt;propName&lt;/code&gt; exists or not.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Example&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
const user = {
  name: 'neha'
};

user.hasOwnProperty('name');   // true
hero.hasOwnProperty('age');    // false
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#2-in-operator"&gt;
  &lt;/a&gt;
  2.) in operator
&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;in&lt;/code&gt; operator also returns true if &lt;code&gt;propName&lt;/code&gt; exists in an object.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Example&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Example&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
const user = {
  name: 'neha'
};

'name' in user;     /* true */
'age' in user;      /* false */
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#updation"&gt;
  &lt;/a&gt;
  Updation
&lt;/h2&gt;

&lt;p&gt;Updating an object property is very simple. It's just like addition. We can update the value of the property just by reassigning the value to the same key. We can use dot-notation or bracket-notation for this. &lt;br&gt;&lt;br&gt;
&lt;strong&gt;Example:-&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
  const user={
      firstName:'neha',
      lastName:'sni',
      nationality:'American'  
  }

  user.nationality='Indian';        //using dot operation
  user['lastName']='soni';        //using bracket notation  
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#deletion"&gt;
  &lt;/a&gt;
  Deletion
&lt;/h2&gt;

&lt;p&gt;Deletion is performed using the &lt;code&gt;delete&lt;/code&gt; operator. The delete operator deletes both the property and the value of the property. Again, we can use dot-notation and bracket-notation for the deletion. The &lt;code&gt;delete&lt;/code&gt; operator returns true if the property was successfully deleted.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
  const user={
      firstName:'neha',
      lastName:'soni',
      nationality:'Indian'  
  }

  delete user.nationality='Indian';        /* returns true */
  delete user['lastName']='soni';        /* return true */
  delete user.age;       /* returns false because prop. doesn't exists */
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#iteration"&gt;
  &lt;/a&gt;
  Iteration
&lt;/h2&gt;

&lt;p&gt;An object is a standalone entity with properties and values. Unlike arrays, you can’t simply iterate an object. Here are a few ways to iterate through JS objects to get their keys and values:-&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-objectentries"&gt;
  &lt;/a&gt;
  1.) Object.entries()
&lt;/h4&gt;

&lt;p&gt;Object.entries() method returns a multi-dimensional array which contains an array of key-value pair of the object's properties.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Example&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
   const user = {
    name: 'neha',
    age: 20,
    courses: ['java', 'mysql']
  }
  const kp = Object.entries(animal)

 /* output
  [
    [ 'name', 'neha' ],
    [ 'age', 20 ],
    [ 'courses', ['java', 'mysql'] ] 
  ]
*/
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#2-objectkeys"&gt;
  &lt;/a&gt;
  2.) Object.keys()
&lt;/h4&gt;

&lt;p&gt;This method returns the keys of an object in an array and we can now iterate on this returned array and reference the property value with the key.&lt;br&gt;&lt;strong&gt;Here’s an example:-&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
   const user = {
    name: 'neha',
    age: 20,
    courses: ['java', 'mysql']
  }
  const allProperties = Object.keys(user);
 /*
 output=&amp;gt;  [ 'name', 'age', 'courses']
 */

for (const property of allProperties) {
  const value = obj[property];
  console.log(property, value);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#3-objectvalues"&gt;
  &lt;/a&gt;
  3.) Object.values
&lt;/h4&gt;

&lt;p&gt;This method is like &lt;code&gt;object.keys&lt;/code&gt; but it returns the value of the properties in an array.&lt;br&gt;
&lt;br&gt; &lt;br&gt;
&lt;strong&gt;Example&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
   const user = {
    name: 'neha',
    age: 20,
    courses: ['java', 'mysql']
  }
  const allProperties = Object.keys(user);
 /*
 output=&amp;gt;  [ 'neha', 20, ['java', 'mysql'] ]
*/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#4-forin-loops"&gt;
  &lt;/a&gt;
  4.) for-in loops
&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;for-in&lt;/code&gt; loop is used to iterate through an object. You get the properties one by one.&lt;br&gt; &lt;br&gt;
&lt;strong&gt;Example&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
   const user = {
    name: 'neha',
    age: 20,
    courses: ['java', 'mysql']
  }
  for (const property in obj) 
  {
    const value = obj[property]; // Read the value 
    console.log(property, value);
  }  

/*
output=&amp;gt;
name neha
age 20
courses ['java', 'mysql']
*/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#comparison"&gt;
  &lt;/a&gt;
  Comparison
&lt;/h2&gt;

&lt;p&gt;It is very simple to compare the primitive values in javascript. But comparing the objects is not so easy because objects are structured data. When we use &lt;code&gt;==&lt;/code&gt; or &lt;code&gt;===&lt;/code&gt; operator, they only compare the references of the objects.&lt;br&gt;
Now, two objects can have the same key-value pairs but they can't occupy the same memory location. Let's see an example below:-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const user1 = {
  name: 'neha',
}
const user2 = {
  name: 'neha',
}
user1 === user2    // =&amp;gt; false
user1 === user1    // =&amp;gt; true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;But what about properties? How we can compare them?🤔&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
The obvious way to compare objects by content is to read the properties and compare them manually.&lt;br&gt;&lt;strong&gt;For example-&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function isUserEqual(obj1, obj2) {
  return obj1.name === obj2.name;
}

const user1 = {
  name: 'neha'
};
const user2 = {
  name: 'neha'
};
const user3 = {
  name: 'gauri'
};

isUserEqual(user1, user2); // =&amp;gt; true
isUserEqual(user1, user3); // =&amp;gt; false
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Manual comparison requires manual extraction of properties — for simple objects, that’s not a problem. But to compare bigger objects (or objects of unknown structure), the manual comparison isn’t convenient because it requires a lot of boilerplate code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this blog post, we have discussed quite a few things about objects. Here are a few exercises for your better understanding of how objects work. You can try them,&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Write a JavaScript program to list the properties of a JavaScript object.&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Sample object:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var student = {
name : "David Rayy",
sclass : "VI",
rollno : 12 };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Sample Output:&lt;/strong&gt; name, class, rollno&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Write a JavaScript program to delete the rollno property from the following object.&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Sample object:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var student = {
name : "David Rayy",
sclass : "VI",
rollno : 12 }; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;3. Write a function to  &lt;a href="https://stackoverflow.com/questions/1068834/object-comparison-in-javascript"&gt;deep compare&lt;/a&gt;  two objects by value. What happens when the object’s values are functions? What about symbols?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;That's it for object articles — all that remains now is for you to test your skills in the object assessment. If you enjoyed learning and find it useful please do like and share so that, it reaches others as well 🤝&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading 😃
&lt;/h3&gt;

&lt;p&gt;I would ❤ to connect with you at  &lt;a href="https://twitter.com/nehasoni__"&gt;Twitter&lt;/a&gt;  |  &lt;a href="https://www.linkedin.com/in/neha-soni-70a6231b1/"&gt;LinkedIn&lt;/a&gt; | &lt;a href="https://github.com/nehasoni05"&gt;GitHub&lt;/a&gt;&lt;br&gt;
Let me know in the comment section if you have any doubt or feedback.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects"&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Basics"&gt;https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Basics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=-P04pE6zRNE"&gt;https://www.youtube.com/watch?v=-P04pE6zRNE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Top 15 JavaScript Videos with Timelines</title>
      <author>Alex-Braine</author>
      <pubDate>Sun, 09 May 2021 10:10:37 +0000</pubDate>
      <link>https://dev.to/alexbraine/top-15-javascript-videos-with-timelines-1ic2</link>
      <guid>https://dev.to/alexbraine/top-15-javascript-videos-with-timelines-1ic2</guid>
      <description>&lt;h1&gt;
  &lt;a href="#1-learn-javascript-full-course-for-beginners"&gt;
  &lt;/a&gt;
  1. Learn JavaScript - Full Course for Beginners
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4m6Di_ny--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.youtube.com/vi/PkZNo7MFNFg/maxresdefault.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4m6Di_ny--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.youtube.com/vi/PkZNo7MFNFg/maxresdefault.jpg" alt=""&gt;&lt;/a&gt;6,050,991 views • 118,676 likes &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=0"&gt;Introduction (1m 24s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=84"&gt;Running JavaScript (2m 59s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=263"&gt;Comment Your Code (1m 33s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=356"&gt;Data Types and Variables (5m 35s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=691"&gt;Initializing Variables with the Assignment Operator (27s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=718"&gt;Uninitialized Variables (42s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=760"&gt;Case Sensitivity in Variables (1m 25s)&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#numbers"&gt;
  &lt;/a&gt;
  Numbers
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=845"&gt;Add Two Numbers (29s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=874"&gt;Subtract One Number from Another (18s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=892"&gt;Multiply Two Numbers (20s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=912"&gt;Dividing Numbers (18s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=930"&gt;Increment (28s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=958"&gt;Decrement (24s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=982"&gt;Decimal Numbers (26s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=1008"&gt;Multiply Two Decimals (30s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=1038"&gt;Divide Decimals (15s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=1053"&gt;Finding a Remainder (49s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=1102"&gt;Augmented Addition (1m 1s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=1162"&gt;Augmented Subtraction (56s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=1218"&gt;Augmented Multiplication (33s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=1251"&gt;Augmented Division (28s)&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#strings"&gt;
  &lt;/a&gt;
  Strings
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=1279"&gt;Declare String Variables (42s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=1321"&gt;Escaping Literal Quotes (1m 43s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=1424"&gt;Quoting Strings with Single Quotes (1m 34s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=1518"&gt;Escape Sequences (1m 28s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=1606"&gt;Concatenating String with Plus Operator (1m 3s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=1669"&gt;Plus Equals Operator (1m 12s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=1741"&gt;Constructing Strings with Variables (1m 13s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=1814"&gt;Appending Variables to Strings (57s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=1871"&gt;Length of a String (50s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=1921"&gt;Bracket Notation (1m 26s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=2007"&gt;String Immutability (56s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=2063"&gt;Find the Nth Character (28s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=2091"&gt;Find the Last Character (57s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=2148"&gt;Find the Nth-to-Last Character (40s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=2188"&gt;Word Blanks (4m 16s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=11199"&gt;Template Literals (4m 4s)&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#arrays"&gt;
  &lt;/a&gt;
  Arrays
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=2444"&gt;Arrays (59s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=2503"&gt;Nest Arrays (50s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=2553"&gt;Access Array Data (1m 1s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=2614"&gt;Modify Array Data (1m 14s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=2688"&gt;Access Multi-Dimensional Arrays (1m 42s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=2790"&gt;push() (59s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=2849"&gt;pop() (1m 4s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=2913"&gt;shift() (50s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=2963"&gt;unshift() (1m 13s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=3036"&gt;Shopping List (1m 5s)&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#functions"&gt;
  &lt;/a&gt;
  Functions
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=3101"&gt;Write Reusable with Functions (2m 1s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=3221"&gt;Arguments (2m 2s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=3343"&gt;Global Scope (3m 48s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=3571"&gt;Local Scope (1m 15s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=3646"&gt;Global vs Local Scope in Functions (1m 54s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=3760"&gt;Return a Value from a Function (1m 15s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=3835"&gt;Undefined Value returned (57s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=3892"&gt;Assignment with a Returned Value (1m 1s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=3952"&gt;Stand in Line (2m 49s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=4121"&gt;Boolean Values (43s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=6071"&gt;Returning Boolean Values from Functions (1m 9s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=6140"&gt;Return Early Pattern for Functions (1m 18s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=6218"&gt;Counting Cards (5m 33s)&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#operators"&gt;
  &lt;/a&gt;
  Operators
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=4311"&gt;Equality Operator (1m 27s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=4398"&gt;Strict Equality Operator (1m 25s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=4483"&gt;Comparing different values (55s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=4538"&gt;Inequality Operator (42s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=4580"&gt;Strict Inequality Operator (45s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=4625"&gt;Greater Than Operator (34s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=4659"&gt;Greater Than Or Equal To Operator (30s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=4689"&gt;Less Than Operator (35s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=4724"&gt;Less Than Or Equal To Operator (33s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=4757"&gt;And Operator (1m 24s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=4841"&gt;Or Operator (56s)&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#statements"&gt;
  &lt;/a&gt;
  Statements
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=4164"&gt;If Statements (2m 27s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=4897"&gt;Else Statements (50s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=4947"&gt;Else If Statements (1m 3s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=5010"&gt;Logical Order in If Else Statements (1m 15s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=5085"&gt;Chaining If Else Statements (3m 1s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=5265"&gt;Golf Code (4m 30s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=5535"&gt;Switch Statements (3m 31s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=5746"&gt;Default Option in Switch Statements (1m 37s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=5843"&gt;Identical Options in Switch Statements (1m 57s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=5960"&gt;Replacing If Else Chains with Switch (1m 51s)&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#objects"&gt;
  &lt;/a&gt;
  Objects
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=6551"&gt;Build Objects (1m 35s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=6646"&gt;Accessing Object Properties with Dot Notation (47s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=6693"&gt;Accessing Object Properties with Bracket Notation (1m 14s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=6767"&gt;Accessing Object Properties with Variables (47s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=6814"&gt;Updating Object Properties (56s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=6870"&gt;Add New Properties to Object (49s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=6919"&gt;Delete Properties from Object (35s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=6954"&gt;Objects for Lookups (1m 49s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=7063"&gt;Testing Objects for Properties (1m 32s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=7155"&gt;Manipulating Complex Objects (1m 45s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=7260"&gt;Nested Objects (53s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=7313"&gt;Nested Arrays (1m 13s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=7386"&gt;Record Collection (7m 9s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=9892"&gt;Prevent Object Mutation (2m 25s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=11443"&gt;Simple Fields (1m 41s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=11544"&gt;Declarative Functions (32s)&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#class"&gt;
  &lt;/a&gt;
  Class
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=11576"&gt;Use class Syntax to Define a Constructor Function (2m 15s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=11711"&gt;getters and setters (5m 14s)&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#loops"&gt;
  &lt;/a&gt;
  Loops
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=7815"&gt;While Loops (1m 20s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=7895"&gt;For Loops (2m 21s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=8036"&gt;Odd Numbers With a For Loop (1m 32s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=8128"&gt;Count Backwards With a For Loop (1m 40s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=8228"&gt;Iterate Through an Array with a For Loop (2m 35s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=8383"&gt;Nesting For Loops (3m 2s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=8565"&gt;Do...While Loops (1m 27s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=8652"&gt;Profile Lookup (4m 6s)&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#random"&gt;
  &lt;/a&gt;
  Random
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=8898"&gt;Random Fractions (36s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=8934"&gt;Random Whole Numbers (1m 27s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=9021"&gt;Random Whole Numbers within a Range (1m 25s)&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#parseint"&gt;
  &lt;/a&gt;
  parseInt
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=9106"&gt;parseInt Function (50s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=9156"&gt;parseInt Function with a Radix (53s)&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#ternary-operator"&gt;
  &lt;/a&gt;
  Ternary Operator
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=9209"&gt;Ternary Operator (1m 28s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=9297"&gt;Multiple Ternary Operators (2m 1s)&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#var-vs-let"&gt;
  &lt;/a&gt;
  var vs let
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=9417"&gt;var vs let (2m 5s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=9542"&gt;var vs let scopes (2m 30s)&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#const"&gt;
  &lt;/a&gt;
  const
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=9692"&gt;const Keyword (2m 8s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=9820"&gt;Mutate an Array Declared with const (1m 12s)&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#arrow-functions"&gt;
  &lt;/a&gt;
  Arrow Functions
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=10037"&gt;Arrow Functions (1m 6s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=10103"&gt;Arrow Functions with Parameters (1m 4s)&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#higher-order"&gt;
  &lt;/a&gt;
  Higher Order
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=10167"&gt;Higher Order Arrow Functions (3m 37s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=10384"&gt;Higher Order Default Parameters (56s)&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#restspread-operators"&gt;
  &lt;/a&gt;
  Rest/Spread Operators
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=10440"&gt;Rest Operator (1m 31s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=10531"&gt;Spread Operator (1m 47s)&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#destructuring-assignment"&gt;
  &lt;/a&gt;
  Destructuring Assignment
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=10638"&gt;Destructuring Assignment: Objects (3m 1s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=10818"&gt;Destructuring Assignment: Nested Objects (1m 37s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=10915"&gt;Destructuring Assignment: Arrays (1m 45s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=11020"&gt;Destructuring Assignment with Rest Operator to Reassign Array (1m 25s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=11105"&gt;Destructuring Assignment to Pass an Object (1m 34s)&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#import-export"&gt;
  &lt;/a&gt;
  import / export
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=12025"&gt;import vs require (2m 8s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=12153"&gt;export (1m 7s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=12220"&gt;* to Import (1m 10s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=12290"&gt;export default (36s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=12326"&gt;Import a Default Export (50s)&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-javascript-tutorial-for-beginners-learn-javascript-in-1-hour"&gt;
  &lt;/a&gt;
  2. JavaScript Tutorial for Beginners: Learn JavaScript in 1 Hour
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9KwWJbIr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.youtube.com/vi/W6NZfCO5SIk/maxresdefault.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9KwWJbIr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.youtube.com/vi/W6NZfCO5SIk/maxresdefault.jpg" alt=""&gt;&lt;/a&gt;4,688,241 views • 81,950 likes &lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=W6NZfCO5SIk&amp;amp;t=0"&gt;What is JavaScript (4m 41s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=W6NZfCO5SIk&amp;amp;t=281"&gt;Setting Up the Development Environment (3m 11s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=W6NZfCO5SIk&amp;amp;t=472"&gt;JavaScript in Browsers (3m 49s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=W6NZfCO5SIk&amp;amp;t=701"&gt;Separation of Concerns (2m 6s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=W6NZfCO5SIk&amp;amp;t=827"&gt;JavaScript in Node (2m 24s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=W6NZfCO5SIk&amp;amp;t=971"&gt;Variables (5m 38s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=W6NZfCO5SIk&amp;amp;t=1309"&gt;Constants (1m 46s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=W6NZfCO5SIk&amp;amp;t=1415"&gt;Primitive Types (3m 12s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=W6NZfCO5SIk&amp;amp;t=1607"&gt;Dynamic Typing (3m 19s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=W6NZfCO5SIk&amp;amp;t=1806"&gt;Objects (5m 16s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=W6NZfCO5SIk&amp;amp;t=2122"&gt;Arrays (4m 19s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=W6NZfCO5SIk&amp;amp;t=2381"&gt;Functions (4m 41s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=W6NZfCO5SIk&amp;amp;t=2662"&gt;Types of Functions (3m 54s)&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-data-structures-and-algorithms-in-javascript-full-course-for-beginners"&gt;
  &lt;/a&gt;
  3. Data Structures and Algorithms in JavaScript - Full Course for Beginners
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IBrw9oes--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.youtube.com/vi/t2CEgPsws3U/maxresdefault.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IBrw9oes--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.youtube.com/vi/t2CEgPsws3U/maxresdefault.jpg" alt=""&gt;&lt;/a&gt;534,045 views • 12,602 likes &lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=t2CEgPsws3U&amp;amp;t=21"&gt;Stacks (8m 42s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=t2CEgPsws3U&amp;amp;t=543"&gt;Sets (10m 21s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=t2CEgPsws3U&amp;amp;t=1164"&gt;Queues &amp;amp; Priority Queues (6m 39s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=t2CEgPsws3U&amp;amp;t=1563"&gt;Binary Search Tree (13m 31s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=t2CEgPsws3U&amp;amp;t=2374"&gt;Binary Search Tree: Traversal &amp;amp; Height (13m 45s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=t2CEgPsws3U&amp;amp;t=3199"&gt;Hash Tables (9m 45s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=t2CEgPsws3U&amp;amp;t=3784"&gt;Linked List (11m 55s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=t2CEgPsws3U&amp;amp;t=4499"&gt;Trie (12m 30s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=t2CEgPsws3U&amp;amp;t=5249"&gt;Heap (max and min) (14m 38s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=t2CEgPsws3U&amp;amp;t=6127"&gt;Graphs: adjacency list, adjacency matrix, incidence matrix (4m 38s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=t2CEgPsws3U&amp;amp;t=6405"&gt;Graphs: breadth-first search (6m 9s)&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-redux-tutorial-learn-redux-from-scratch"&gt;
  &lt;/a&gt;
  4. Redux Tutorial - Learn Redux from Scratch
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_emo9rFC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.youtube.com/vi/poQXNp9ItL4/maxresdefault.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_emo9rFC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.youtube.com/vi/poQXNp9ItL4/maxresdefault.jpg" alt=""&gt;&lt;/a&gt;386,940 views • 10,528 likes &lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=0"&gt;Introduction (1m 2s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=62"&gt;What is Redux? (2m 18s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=200"&gt;Pros and Cons of Redux (5m 29s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=529"&gt;Is Redux for You? (2m 29s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=678"&gt;Setting Up the Development Environment (1m 49s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=787"&gt;Course Structure (2m 25s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=932"&gt;Function Programming (27s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=959"&gt;What is Functional Programming? (1m 26s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=1045"&gt;Functions as First-Class Citizens (3m 8s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=1233"&gt;Higher-order Functions (1m 33s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=1326"&gt;Functional Composition (3m 39s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=1545"&gt;Composing and Piping (2m 23s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=1688"&gt;Currying (6m 9s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=2057"&gt;Pure Functions (2m 51s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=2228"&gt;Immutability (4m 14s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=2482"&gt;Updating Objects (4m 34s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=2756"&gt;Updating Arrays (3m 55s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=2991"&gt;Enforcing Immutability (1m 5s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=3056"&gt;Immutable.js (3m 40s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=3276"&gt;Immer (2m 54s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=3450"&gt;Redux Intro (25s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=3475"&gt;Redux Architecture (5m 3s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=3778"&gt;Your First Redux Application (1m 45s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=3883"&gt;Designing the Store (1m 27s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=3970"&gt;Defining the Actions (3m 27s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=4177"&gt;Creating a Reducer (6m 13s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=4550"&gt;Creating the Store (1m 26s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=4636"&gt;Dispatching Actions (2m 46s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=4802"&gt;Subscribing to the Store (2m 8s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=4930"&gt;Action Types (3m 53s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=5163"&gt;Action Creators (2m 58s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=5341"&gt;Exercise (17s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=5358"&gt;Solution (5m 34s)&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-javascript-higher-order-functions-amp-arrays"&gt;
  &lt;/a&gt;
  5. JavaScript Higher Order Functions &amp;amp; Arrays
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w9hjHmvH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.youtube.com/vi/rRgD1yVwIvE/maxresdefault.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w9hjHmvH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.youtube.com/vi/rRgD1yVwIvE/maxresdefault.jpg" alt=""&gt;&lt;/a&gt;581,307 views • 18,493 likes &lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=rRgD1yVwIvE&amp;amp;t=0"&gt;Intro (3m 20s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=rRgD1yVwIvE&amp;amp;t=200"&gt;ForEach() (2m 1s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=rRgD1yVwIvE&amp;amp;t=321"&gt;Filter() (10m 19s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=rRgD1yVwIvE&amp;amp;t=940.5"&gt;Map() (5m 24s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=rRgD1yVwIvE&amp;amp;t=1265"&gt;Sort() (4m 45s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=rRgD1yVwIvE&amp;amp;t=1550"&gt;Reduce() (5m 5s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=rRgD1yVwIvE&amp;amp;t=1865"&gt;Extra (2m 35s)&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#6-objectoriented-programming-in-javascript-made-super-simple-mosh"&gt;
  &lt;/a&gt;
  6. Object-oriented Programming in JavaScript: Made Super Simple | Mosh
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fra2zykE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.youtube.com/vi/PFmuCDHHpwk/maxresdefault.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fra2zykE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.youtube.com/vi/PFmuCDHHpwk/maxresdefault.jpg" alt=""&gt;&lt;/a&gt;946,391 views • 20,701 likes &lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PFmuCDHHpwk&amp;amp;t=0"&gt;What is OOP? (1m 46s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PFmuCDHHpwk&amp;amp;t=106"&gt;Four Pillars of OOP (7m 4s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PFmuCDHHpwk&amp;amp;t=530"&gt;Setting Up the Development Environment (2m 17s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PFmuCDHHpwk&amp;amp;t=667"&gt;Objects (46s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PFmuCDHHpwk&amp;amp;t=713"&gt;Object Literals (3m 5s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PFmuCDHHpwk&amp;amp;t=898"&gt;Factories (2m 52s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PFmuCDHHpwk&amp;amp;t=1070"&gt;Constructors (5m 37s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PFmuCDHHpwk&amp;amp;t=1407"&gt;Constructor Property (2m 26s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PFmuCDHHpwk&amp;amp;t=1553"&gt;Functions are Objects (5m 16s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PFmuCDHHpwk&amp;amp;t=1869"&gt;Value vs Reference Types (5m 51s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PFmuCDHHpwk&amp;amp;t=2220"&gt;Adding or Removing Properties (3m 54s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PFmuCDHHpwk&amp;amp;t=2454"&gt;Enumerating Properties (2m 51s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PFmuCDHHpwk&amp;amp;t=2625"&gt;Abstraction (4m 3s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PFmuCDHHpwk&amp;amp;t=2868"&gt;Private Properties and Methods (4m 7s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PFmuCDHHpwk&amp;amp;t=3115"&gt;Getters and Setters (5m 37s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PFmuCDHHpwk&amp;amp;t=3452"&gt;Exercise (2m 10s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PFmuCDHHpwk&amp;amp;t=3582"&gt;Solution (3m 6s)&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#7-learn-javascript-by-building-7-games"&gt;
  &lt;/a&gt;
  7. Learn JavaScript by Building 7 Games
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VDMXS13O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.youtube.com/vi/lhNdUVh3qCc/maxresdefault.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VDMXS13O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.youtube.com/vi/lhNdUVh3qCc/maxresdefault.jpg" alt=""&gt;&lt;/a&gt;380,987 views • 12,601 likes &lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=lhNdUVh3qCc&amp;amp;t=0"&gt;Intro (1m 55s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=lhNdUVh3qCc&amp;amp;t=119"&gt;Memory Game - Level 1 (9m 40s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=lhNdUVh3qCc&amp;amp;t=703"&gt;Whack-a-mole - level 1 (8m 4s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=lhNdUVh3qCc&amp;amp;t=1192"&gt;Connect Four - level 1 (7m 45s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=lhNdUVh3qCc&amp;amp;t=1663"&gt;Nokia 3310 Snake - level 2 (15m 27s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=lhNdUVh3qCc&amp;amp;t=2596"&gt;Space Invaders - level 2 (36m 22s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=lhNdUVh3qCc&amp;amp;t=4782"&gt;Tetris - level 3 (29m 27s)&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#8-10-javascript-projects-in-10-hours-coding-challenge"&gt;
  &lt;/a&gt;
  8. 10 JavaScript Projects in 10 Hours - Coding Challenge
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6yIli3EF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.youtube.com/vi/dtKciwk_si4/maxresdefault.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6yIli3EF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.youtube.com/vi/dtKciwk_si4/maxresdefault.jpg" alt=""&gt;&lt;/a&gt;744,203 views • 30,682 likes &lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=dtKciwk_si4&amp;amp;t=0"&gt;Intro (1m 12s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=dtKciwk_si4&amp;amp;t=72"&gt;Countdown Timer (31m 3s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=dtKciwk_si4&amp;amp;t=1935"&gt;Quiz App (51m 5s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=dtKciwk_si4&amp;amp;t=5000"&gt;Recipe App (1h 56m 37s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=dtKciwk_si4&amp;amp;t=11997"&gt;Notes App (50m 38s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=dtKciwk_si4&amp;amp;t=15035"&gt;ToDo App (35m 39s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=dtKciwk_si4&amp;amp;t=17174"&gt;Movies App (53m 41s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=dtKciwk_si4&amp;amp;t=20395"&gt;GitHub Profiles (53m 35s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=dtKciwk_si4&amp;amp;t=23610"&gt;Drawing App (46m 10s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=dtKciwk_si4&amp;amp;t=26380"&gt;Password Generator (50m 25s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=dtKciwk_si4&amp;amp;t=29405"&gt;Weather App (1h 7m 3s)&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#9-build-15-javascript-projects-vanilla-javascript-course"&gt;
  &lt;/a&gt;
  9. Build 15 JavaScript Projects - Vanilla JavaScript Course
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vsVpyu41--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.youtube.com/vi/3PHXvlpOkf4/maxresdefault.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vsVpyu41--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.youtube.com/vi/3PHXvlpOkf4/maxresdefault.jpg" alt=""&gt;&lt;/a&gt;605,400 views • 19,254 likes &lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=3PHXvlpOkf4&amp;amp;t=0"&gt;Intro (7m 1s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=3PHXvlpOkf4&amp;amp;t=421"&gt;Color Flipper (23m 24s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=3PHXvlpOkf4&amp;amp;t=1825"&gt;Counter (13m 39s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=3PHXvlpOkf4&amp;amp;t=2644"&gt;Reviews (27m 25s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=3PHXvlpOkf4&amp;amp;t=4289"&gt;Navbar (14m 52s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=3PHXvlpOkf4&amp;amp;t=5181"&gt;Sidebar (12m 42s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=3PHXvlpOkf4&amp;amp;t=5943"&gt;Modal (9m 23s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=3PHXvlpOkf4&amp;amp;t=6506"&gt;Questions (27m 59s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=3PHXvlpOkf4&amp;amp;t=8185"&gt;Menu (59m 48s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=3PHXvlpOkf4&amp;amp;t=11773"&gt;Video (16m 32s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=3PHXvlpOkf4&amp;amp;t=12765"&gt;Scroll (1h 3m 30s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=3PHXvlpOkf4&amp;amp;t=16575"&gt;Tabs (22m 38s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=3PHXvlpOkf4&amp;amp;t=17933"&gt;Countdown (57m 42s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=3PHXvlpOkf4&amp;amp;t=21395"&gt;Lorem Ipsum (21m 48s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=3PHXvlpOkf4&amp;amp;t=22703"&gt;Grocery (1h 42m 51s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=3PHXvlpOkf4&amp;amp;t=28874"&gt;Slider (22m 42s)&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#10-12hr-youtube-coding-bootcamp-2021"&gt;
  &lt;/a&gt;
  10. 12HR+ YouTube Coding Bootcamp 2021!
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oIcmNur---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.youtube.com/vi/Xm4BObh4MhI/maxresdefault.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oIcmNur---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.youtube.com/vi/Xm4BObh4MhI/maxresdefault.jpg" alt=""&gt;&lt;/a&gt;250,238 views • 12,223 likes &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=0"&gt;Introduction (3m 34s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=214"&gt;Code Editors (2m 31s)&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=365"&gt;HTML Introduction (2m 17s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=502"&gt;HTML Boilerplate setup (2m 33s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=655"&gt;HTML Elements (6m 58s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=1073"&gt;Online Portfolio Project (2m 12s)&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  CSS
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=1205"&gt;Check-in (57s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=1262"&gt;CSS Introduction (2m 35s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=1417"&gt;File set up (4m 5s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=1662"&gt;Class names and Id's (3m 6s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=1848"&gt;Pop Quiz (7m 4s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=2272"&gt;Box Model (2m 4s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=2396"&gt;Colours (4m 16s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=2652"&gt;Unordered and Ordered Lists (5m 21s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=2973"&gt;Images (4m 49s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=3262"&gt;Styling classes as id's (2m 45s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=3427"&gt;The Data property (1m 53s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=3540"&gt;Flexbox (2m 45s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=3705"&gt;Pop Quiz (1m 56s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=3821"&gt;Flexbox website layout (6m 2s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=4183"&gt;Commenting out Code (3m 54s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=4417"&gt;Gradients in CSS (2m 16s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=4553"&gt;Box Shadows in CSS (1m 25s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=4638"&gt;Button Styling in CSS (8m 33s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=5151"&gt;Fonts (3m 34s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=5365"&gt;Generic Website Layout (5m 3s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=5668"&gt;making a NavBar (12m 26s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=6414"&gt;Anchor Links (3m 23s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=6617"&gt;Creating Sections (23m 33s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=8030"&gt;Forms in CSS and HTML (13m 5s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=8815"&gt;Font Awesome (5m 17s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=9132"&gt;Break points (6m 23s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=9515"&gt;Z-index (10m 49s)&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  JavaScript
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=10164"&gt;Check-in (1m 43s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=10267"&gt;Introduction to JavaScript (1m 5s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=10332"&gt;JavaScript file setup (6m 27s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=10719"&gt;Variables (17m 36s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=11775"&gt;Control Flow (25s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=11800"&gt;If Statements (9m 29s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=12369"&gt;Operators (29m 30s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=14139"&gt;Fizz Buzz Exercise (5m 20s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=14459"&gt;for loops (6m 59s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=14878"&gt;Arrays (6m 44s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=15282"&gt;Objects (10m 8s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=15890"&gt;Functions (13m 1s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=16671"&gt;A Progress Exercise (10m 29s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=17300"&gt;Arrow Functions (4m 1s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=17541"&gt;While loop (3m 2s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=17723"&gt;Built-in-Objects Introduction (39s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=17762"&gt;length() (5m 27s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=18089"&gt;concat() (5m 12s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=18401"&gt;join() (5m 25s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=18726"&gt;pop() (6m 40s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=19126"&gt;shift() (3m 27s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=19333"&gt;unshift() (3m 19s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=19532"&gt;push() (10m 19s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=20151"&gt;splice() (5m 56s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=20507"&gt;forEach() (8m 38s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=21025"&gt;some() (9m 24s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=21589"&gt;map() (7m 30s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=22039"&gt;filter() (9m 47s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=22626"&gt;reduce() (5m 21s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=22947"&gt;every() (5m 58s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=23305"&gt;split() (6m 1s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=23665"&gt;Array work - Exercises to practise (43m 41s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=26286"&gt;addEventListener() (8m 3s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=26769"&gt;removeEventListener() (7m 48s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=27237"&gt;querySelector() (6m 2s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=27599"&gt;Check-in and Project suggestion (52s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=27651"&gt;Math.random() (12m 17s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=28388"&gt;Let's make a Responsive Burger NavBar (17m 4s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=29412"&gt;Date (9m 17s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=29969"&gt;setTimeout() (9m 31s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=30540"&gt;setInterval() (15m 11s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=31451"&gt;Classes in JavaScript (8m 5s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=31936"&gt;Check-in and Project suggestion (42s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=31978"&gt;Keys (8m 48s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=32506"&gt;switch case (21m 5s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=33771"&gt;sort() (2m 1s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=33892"&gt;Introduction to Algorithms (24s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=33916"&gt;includes() (2m 18s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=34054"&gt;contains() (2m 18s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=34192"&gt;createElement() (8m 30s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=34702"&gt;Check-in and Project Introduction (48m 45s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=37627"&gt;Check-in and Project suggestions (1m 9s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=37696"&gt;Introduction to HTTP (8m 39s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=38215"&gt;fetch(). GET POST PUT DELETE (30m 29s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=40044"&gt;Check-in and video suggestion (29s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=40073"&gt;Storing Projects on GitHub (8m 5s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=40558"&gt;Where to go next (5m 46s)&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#11-javascript-pro-tips-code-this-not-that"&gt;
  &lt;/a&gt;
  11. JavaScript Pro Tips - Code This, NOT That
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4yvHqORJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.youtube.com/vi/Mus_vwhTCq0/maxresdefault.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4yvHqORJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.youtube.com/vi/Mus_vwhTCq0/maxresdefault.jpg" alt=""&gt;&lt;/a&gt;1,681,238 views • 78,111 likes &lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Mus_vwhTCq0&amp;amp;t=0"&gt;Intro (51s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Mus_vwhTCq0&amp;amp;t=51"&gt;Debugging with console.log (1m 48s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Mus_vwhTCq0&amp;amp;t=159"&gt;Destructuring (1m 20s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Mus_vwhTCq0&amp;amp;t=239"&gt;Template literals (2m 8s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Mus_vwhTCq0&amp;amp;t=367"&gt;Spread syntax (2m 12s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Mus_vwhTCq0&amp;amp;t=499"&gt;Loops (1m 59s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Mus_vwhTCq0&amp;amp;t=618"&gt;async/await (2m 18s)&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#12-async-js-crash-course-callbacks-promises-async-await"&gt;
  &lt;/a&gt;
  12. Async JS Crash Course - Callbacks, Promises, Async Await
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oXrd1Dm6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.youtube.com/vi/PoRJizFvM7s/maxresdefault.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oXrd1Dm6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.youtube.com/vi/PoRJizFvM7s/maxresdefault.jpg" alt=""&gt;&lt;/a&gt;771,965 views • 21,236 likes &lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PoRJizFvM7s&amp;amp;t=160"&gt;Pre-callback (6m 20s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PoRJizFvM7s&amp;amp;t=555"&gt;Actual callback (1m 25s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PoRJizFvM7s&amp;amp;t=665"&gt;Promise (3m 55s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PoRJizFvM7s&amp;amp;t=925"&gt;Promise.all (3m 1s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PoRJizFvM7s&amp;amp;t=1105"&gt;Fetch() (1m 35s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PoRJizFvM7s&amp;amp;t=1230"&gt;Async/Await (1m 20s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PoRJizFvM7s&amp;amp;t=1310"&gt;Async with Fetch() (1m 40s)&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#13-es6-tutorial-learn-modern-javascript-in-1-hour"&gt;
  &lt;/a&gt;
  13. ES6 Tutorial: Learn Modern JavaScript in 1 Hour
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XIzRmw5A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.youtube.com/vi/NCwa_xi0Uuc/maxresdefault.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XIzRmw5A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.youtube.com/vi/NCwa_xi0Uuc/maxresdefault.jpg" alt=""&gt;&lt;/a&gt;433,798 views • 10,765 likes &lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=NCwa_xi0Uuc&amp;amp;t=105"&gt;Let vs Var vs Const (3m 54s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=NCwa_xi0Uuc&amp;amp;t=339"&gt;Objects (2m 47s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=NCwa_xi0Uuc&amp;amp;t=506"&gt;The this Keyword (2m 51s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=NCwa_xi0Uuc&amp;amp;t=677"&gt;Binding this (2m 38s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=NCwa_xi0Uuc&amp;amp;t=835"&gt;Arrow Functions (4m 17s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=NCwa_xi0Uuc&amp;amp;t=1092"&gt;Arrow Functions and this (4m 17s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=NCwa_xi0Uuc&amp;amp;t=1349"&gt;Array.map Method (3m 37s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=NCwa_xi0Uuc&amp;amp;t=1566"&gt;Object Destructuring (2m 31s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=NCwa_xi0Uuc&amp;amp;t=1717"&gt;Spread Operator (4m 4s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=NCwa_xi0Uuc&amp;amp;t=1961"&gt;Classes (3m 47s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=NCwa_xi0Uuc&amp;amp;t=2188"&gt;Inheritance (4m 5s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=NCwa_xi0Uuc&amp;amp;t=2433"&gt;Modules (4m 12s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=NCwa_xi0Uuc&amp;amp;t=2685"&gt;Named and Default Exports (5m 19s)&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#14-typescript-course-for-beginners-2021-learn-typescript-from-scratch"&gt;
  &lt;/a&gt;
  14. TypeScript Course for Beginners 2021 - Learn TypeScript from Scratch!
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hd5aPdXu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.youtube.com/vi/BwuLxPH8IDs/maxresdefault.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hd5aPdXu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.youtube.com/vi/BwuLxPH8IDs/maxresdefault.jpg" alt=""&gt;&lt;/a&gt;742,660 views • 15,747 likes &lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=0"&gt;Getting Started (1m 57s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=117"&gt;What is TypeScript (4m 34s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=391"&gt;Installing &amp;amp; Using TypeScript (13m 22s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=1193"&gt;The Advantages of TypeScript (3m 6s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=1379"&gt;Course Outline (4m 17s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=1636"&gt;How to Get the Most out of This Course (3m 13s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=1829"&gt;Setting Up our Development Environment (3m 7s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=2016"&gt;The Course Project Setup (7m 20s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=2456"&gt;Module Introduction (27s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=2483"&gt;Using Types (10m 20s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=3103"&gt;TypeScript Types vs JavaScript Types (4m 54s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=3397"&gt;Numbers, Strings and Booleans (5m 43s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=3740"&gt;Type Assignment and Type Inference (5m 39s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=4079"&gt;Object Types (7m 32s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=4531"&gt;Array Types (5m 30s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=4861"&gt;Tuples (6m 20s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=5241"&gt;Enums (7m 5s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=5666"&gt;The Any Type (2m 4s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=5790"&gt;Union Types (6m 31s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=6181"&gt;Literal Types (7m 54s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=6655"&gt;Type Aliases (3m 1s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=6835"&gt;Function Return Types and Void (7m 26s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=7281"&gt;Function Types (5m 34s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=7615"&gt;Function Types and Callbacks (4m 23s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=7878"&gt;The Unknown Type (3m 44s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=8102"&gt;The Never Type (4m 10s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=8352"&gt;Wrap Up (1m 52s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=8464"&gt;Module Introduction (46s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=8510"&gt;Watch Node (2m 5s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=8635"&gt;Compiling the Entire Project (3m 47s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=8862"&gt;Include and Exclude Files (6m 13s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=9235"&gt;Setting a Compilation Target (4m 4s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=9479"&gt;Understanding TypeScript Libs (5m 32s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=9811"&gt;More Options (1m 41s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=9912"&gt;Source Maps (2m 1s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=10032"&gt;Rootdir and Outdir (5m 31s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=10363"&gt;noemit on Error (2m 52s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=10535"&gt;Strict Compilation Options (11m 4s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=11199"&gt;Code Quality Options (4m 23s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=11462"&gt;Debugging with Visual Studio Code (4m 20s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=11722"&gt;Wrap Up (1m 17s)&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#15-asynchronous-javascript-amp-event-loop-from-scratch"&gt;
  &lt;/a&gt;
  15. Asynchronous JavaScript &amp;amp; EVENT LOOP from scratch
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fu-w3GWm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.youtube.com/vi/8zKuNo4ay8E/maxresdefault.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fu-w3GWm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.youtube.com/vi/8zKuNo4ay8E/maxresdefault.jpg" alt=""&gt;&lt;/a&gt;63,543 views • 4,993 likes &lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=8zKuNo4ay8E&amp;amp;t=0"&gt;Introduction (40s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=8zKuNo4ay8E&amp;amp;t=40"&gt;How JS Engine Executes the Code using Call Stack (2m 45s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=8zKuNo4ay8E&amp;amp;t=205"&gt;Main Job of the Call Stack (26s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=8zKuNo4ay8E&amp;amp;t=231"&gt;How does JavaScript perform async tasks (45s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=8zKuNo4ay8E&amp;amp;t=276"&gt;Behind the Scenes in Browser (2m 59s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=8zKuNo4ay8E&amp;amp;t=455"&gt;Web APIs in JS (4m 28s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=8zKuNo4ay8E&amp;amp;t=723"&gt;How setTimeout Works behind the scenes in Browsers (4m 6s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=8zKuNo4ay8E&amp;amp;t=969"&gt;Event Loop &amp;amp; CallBack Queue in JS (2m 50s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=8zKuNo4ay8E&amp;amp;t=1139"&gt;How Event Listeners Work in JS (4m 44s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=8zKuNo4ay8E&amp;amp;t=1423"&gt;More about Event Loop (1m 19s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=8zKuNo4ay8E&amp;amp;t=1502"&gt;Why do we need Event Loop (2m 27s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=8zKuNo4ay8E&amp;amp;t=1649"&gt;How fetch() function works (2m 57s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=8zKuNo4ay8E&amp;amp;t=1826"&gt;MicroTask Queue in JS (5m 35s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=8zKuNo4ay8E&amp;amp;t=2161"&gt;What are MicroTasks in JS? (2m 34s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=8zKuNo4ay8E&amp;amp;t=2315"&gt;Starvation of Functions in Callback Queue (1m 13s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=8zKuNo4ay8E&amp;amp;t=2388"&gt;Teaser of the Next Video (1m 5s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=8zKuNo4ay8E&amp;amp;t=2453"&gt;Thank you for watching Namaste JavaScript (51s)&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#source-httpskilterongithubioalexbrainejavascript"&gt;
  &lt;/a&gt;
  Source: &lt;a href="https://kilteron.github.io/alex-braine/javascript"&gt;https://kilteron.github.io/alex-braine/javascript&lt;/a&gt;
&lt;/h5&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>Solution: Construct Target Array With Multiple Sums</title>
      <author>seanpgallivan</author>
      <pubDate>Sun, 09 May 2021 09:39:57 +0000</pubDate>
      <link>https://dev.to/seanpgallivan/solution-construct-target-array-with-multiple-sums-24d4</link>
      <guid>https://dev.to/seanpgallivan/solution-construct-target-array-with-multiple-sums-24d4</guid>
      <description>&lt;p&gt;&lt;em&gt;This is part of a series of Leetcode solution explanations (&lt;a href="https://dev.to/seanpgallivan/leetcode-solutions-index-57fl"&gt;index&lt;/a&gt;). If you liked this solution or found it useful,&lt;/em&gt; &lt;strong&gt;&lt;em&gt;please like&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;this post and/or&lt;/em&gt; &lt;strong&gt;&lt;em&gt;upvote&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;&lt;a href="https://leetcode.com/problems/construct-target-array-with-multiple-sums/discuss/1199223"&gt;my solution post on Leetcode's forums&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#leetcode-problem-1354-hard-construct-target-array-with-multiple-sums"&gt;
  &lt;/a&gt;
  &lt;a href="https://leetcode.com/problems/construct-target-array-with-multiple-sums/"&gt;Leetcode Problem #1354 (&lt;em&gt;Hard&lt;/em&gt;): Construct Target Array With Multiple Sums&lt;/a&gt;
&lt;/h4&gt;




&lt;h4&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Description:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Given an array of integers &lt;code&gt;target&lt;/code&gt;. From a starting array, &lt;code&gt;A&lt;/code&gt; consisting of all &lt;code&gt;1&lt;/code&gt;'s, you may perform the following procedure :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; let &lt;code&gt;x&lt;/code&gt; be the sum of all elements currently in your array.&lt;/li&gt;
&lt;li&gt; choose index &lt;code&gt;i&lt;/code&gt;, such that &lt;code&gt;0 &amp;lt;= i &amp;lt; target.size&lt;/code&gt; and set the value of &lt;code&gt;A&lt;/code&gt; at index &lt;code&gt;i&lt;/code&gt; to &lt;code&gt;x&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt; You may repeat this procedure as many times as needed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Return &lt;code&gt;True&lt;/code&gt; if it is possible to construct the &lt;code&gt;target&lt;/code&gt; array from &lt;code&gt;A&lt;/code&gt; otherwise return &lt;code&gt;False&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Examples:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 1:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;target = [9,3,5]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;Start with [1, 1, 1]&lt;br&gt;[1, 1, 1], sum = 3 choose index 1&lt;br&gt;[1, 3, 1], sum = 5 choose index 2&lt;br&gt;[1, 3, 5], sum = 9 choose index 0&lt;br&gt;[9, 3, 5] Done&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 2:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;target = [1,1,1,2]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;Impossible to create target array from [1,1,1,1].&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 3:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;target = [8,5]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#constraints"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Constraints:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;N == target.length&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= target.length &amp;lt;= 5 * 10^4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= target[i] &amp;lt;= 10^9&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#idea"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Idea:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;One thing we can notice right away: The sum of the elements in &lt;strong&gt;A&lt;/strong&gt; will always be larger than any single element of &lt;strong&gt;A&lt;/strong&gt;, since &lt;strong&gt;A&lt;/strong&gt; starts off with all positive numbers. Therefore, the sum will only ever go up as we iterate through the solution process. This means that we will only ever have one attempt to place a given number in its correct spot.&lt;/p&gt;

&lt;p&gt;It also means that the &lt;em&gt;last&lt;/em&gt; step will always be to settle the highest value of the target array, which means we can reconstruct the nature of &lt;strong&gt;A&lt;/strong&gt; right before the last step as well. From there, we'll have to keep dealing with the largest remaining value, on and on, working backwards until we either succeed or fail.&lt;/p&gt;

&lt;p&gt;Since we are going to have to deal with the target values in descending value order, it stands to reason that we should use a &lt;strong&gt;max priority queue&lt;/strong&gt; or &lt;strong&gt;max-heap&lt;/strong&gt; structure to keep track of the target values, especially since we don't care about the values' indices.&lt;/p&gt;

&lt;p&gt;Once we have all the &lt;strong&gt;target&lt;/strong&gt; values inserted into the priority queue (&lt;strong&gt;pq/heap&lt;/strong&gt;) and the &lt;strong&gt;sum&lt;/strong&gt; calculated, we can proceed to deal with the values in order. At each step, we should remove the max value, compute its replacement's value, then reinsert that replacement back into &lt;strong&gt;pq&lt;/strong&gt;. If, at the start of an iteration, we see that the max value in &lt;strong&gt;pq&lt;/strong&gt; is a &lt;strong&gt;1&lt;/strong&gt;, then that means that all values in &lt;strong&gt;pq&lt;/strong&gt; are &lt;strong&gt;1&lt;/strong&gt;s, and we should &lt;strong&gt;return true&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;On the other hand, if we find ourselves about to insert a number less than &lt;strong&gt;1&lt;/strong&gt; into &lt;strong&gt;pq&lt;/strong&gt;, we know we've failed and should &lt;strong&gt;return false&lt;/strong&gt;, as we will have passed the prescribed starting position.&lt;/p&gt;

&lt;p&gt;But at this point, we'll still obtain a &lt;strong&gt;TLE&lt;/strong&gt; result and will need to optimize some more. Consider the situation in which we process the max value only to find that we're about to reinsert a number that is &lt;em&gt;still&lt;/em&gt; the max value. In some edge cases, it could take thousands of iterations to fully process this value so that we can move on to another, when all that processing can be done more simply in one step.&lt;/p&gt;

&lt;p&gt;Take, for example, &lt;strong&gt;target = [3,5,33]&lt;/strong&gt;. Normally, we'd remove the &lt;strong&gt;33&lt;/strong&gt; and compute its replacement to be &lt;strong&gt;25&lt;/strong&gt;, then from &lt;strong&gt;25&lt;/strong&gt; to &lt;strong&gt;17&lt;/strong&gt;, then &lt;strong&gt;17&lt;/strong&gt; to &lt;strong&gt;9&lt;/strong&gt;, then finally &lt;strong&gt;9&lt;/strong&gt; to &lt;strong&gt;1&lt;/strong&gt;. Each time, we're removing the sum of all the remaining values (&lt;strong&gt;3 + 5 = 8&lt;/strong&gt;) from the current number. In any valid target array, as we noted at the very beginning, the max value &lt;em&gt;must&lt;/em&gt; be larger than the sum of the remaining elements, since it came from that sum plus the value that was replaced.&lt;/p&gt;

&lt;p&gt;That means that we should be able to remove the remaining sum (&lt;strong&gt;8&lt;/strong&gt;) from our current max value (&lt;strong&gt;33&lt;/strong&gt;) as many times as we possibly can, since only the remainder will bring us below that sum. This we can achieve quite easily with the &lt;strong&gt;mod operator&lt;/strong&gt; which will result in our replacement value (&lt;strong&gt;33 % 8 = 1&lt;/strong&gt;) without the need to iterate through every step.&lt;/p&gt;

&lt;p&gt;As noted recently, if we find that the max value is actually less than the remaining sum, then the array must not be valid, and we can &lt;strong&gt;return false&lt;/strong&gt;.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Implementation:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Javascript's &lt;strong&gt;MaxPriorityQueue()&lt;/strong&gt; npm is convenient, but not terribly efficient. A custom &lt;strong&gt;max-heap&lt;/strong&gt; implementation is more performant. Both options are included below.&lt;/p&gt;

&lt;p&gt;Python defaults to a &lt;strong&gt;min-heap&lt;/strong&gt;, so we can simulate a &lt;strong&gt;max-heap&lt;/strong&gt; by changing the sign on each element when it is inserted and removed from the heap.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#javascript-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Javascript Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#w-maxpriorityqueue"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;w/ MaxPriorityQueue():&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;isPossible&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;pq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MaxPriorityQueue&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;priority&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enqueue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;front&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dequeue&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;
        &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
        &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;%=&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enqueue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#w-maxheap"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;w/ Max-Heap:&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;isPossible&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[,],&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;heapify&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;par&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;temp&lt;/span&gt;
        &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;par&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;par&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;par&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;temp&lt;/span&gt;
            &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;par&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;par&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;extract&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;top&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;child&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;temp&lt;/span&gt;
            &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="nx"&gt;child&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;top&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;heapify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
        &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;%=&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;heapify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#python-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Python Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;isPossible&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;heap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;heapify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;heappop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
            &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;%=&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt;
            &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;
            &lt;span class="n"&gt;heappush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#java-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Java Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;isPossible&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;Queue&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;PriorityQueue&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;((&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;peek&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;poll&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;%=&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#c-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;C++ Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;isPossible&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;priority_queue&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;%=&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
    </item>
    <item>
      <title>Learn python the effective way from anywhere</title>
      <author>vishwasnarayanre</author>
      <pubDate>Sun, 09 May 2021 09:32:34 +0000</pubDate>
      <link>https://dev.to/vishwasnarayan5/learn-python-the-effective-way-from-anywhere-24pi</link>
      <guid>https://dev.to/vishwasnarayan5/learn-python-the-effective-way-from-anywhere-24pi</guid>
      <description>&lt;p&gt;Learn how to use Python professionally, like Python 2 and Python 3!&lt;br&gt;
Python can be used to create games such as Tic Tac Toe and Blackjack!&lt;br&gt;
Discover advanced Python features such as the collections module and working with timestamps!&lt;/p&gt;

&lt;p&gt;Classes will teach you how to use Object Oriented Programming!&lt;br&gt;
Understand diverse subjects, such as decorators.&lt;/p&gt;

&lt;p&gt;Learn how to use Jupyter Notebook and how to create.py scripts.&lt;br&gt;
Learn how to build graphical user interfaces (GUIs) in the Jupyter Notebook framework!&lt;br&gt;
Develop a thorough understanding of Python from the ground up!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-python"&gt;
  &lt;/a&gt;
  Why python?
&lt;/h1&gt;

&lt;p&gt;Python is a dynamically semantic object-oriented and high-level programming language.&lt;br&gt;
It has high-level data structures, dynamic typing, dynamic linking, and other functionality that make it useful for developing complex applications.&lt;br&gt;
Although Guido Van Rossum created Python in the late 1980s, its implementation began in December 1989.&lt;br&gt;
It is an open-source language that has achieved popularity.It is an open-source language that has recently gained attention due to its use in data science.&lt;/p&gt;

&lt;p&gt;It provides a plethora of well-equipped libraries and frameworks that allow developers to easily create concrete applications.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-use-python"&gt;
  &lt;/a&gt;
  Why use python?
&lt;/h1&gt;

&lt;p&gt;Python is used to create desktop graphical user interface (GUI) programmes, blogs, and web applications.&lt;/p&gt;

&lt;p&gt;It frees up programmers' time to work on the application's core features by handling routine programming activities.&lt;/p&gt;

&lt;p&gt;It has been the most sought-after programming language for developers operating in the fields of Artificial Intelligence, Data Science, Machine Learning, Software Development, and Data Mining. It is also used as a scripting language for web applications.&lt;/p&gt;

&lt;p&gt;Python is used by many programmers for a variety of projects, like designing learning algorithms, constructing websites, refining data algorithms, and locating data analytics solutions.&lt;/p&gt;

&lt;p&gt;Needless to mention, if you are a developer, Python must be available to you.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#learn-as-a-sole-warrior"&gt;
  &lt;/a&gt;
  Learn as a sole warrior
&lt;/h1&gt;

&lt;p&gt;Start learning alone,Understanding the fundamentals of Python would help you in the long run.&lt;br&gt;
It would be easier for you to grasp more complex ideas if you have a stronger understanding of the basics.&lt;br&gt;
If you've mastered the fundamentals of Python, you'll be able to confidently move on to learning data structures and algorithms.About the fact that Python is a high-level language that allows you to perform complicated functions, it is simple to learn and understand.&lt;br&gt;
It has a simple syntax and is therefore appropriate for both novice and advanced programmers.&lt;/p&gt;

&lt;p&gt;Python will seem difficult at first if you are a complete novice. All you have to remember is that everybody begins at the same moment.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#you-can-do-it-if-you-are-careful"&gt;
  &lt;/a&gt;
  You can do it if you are careful!.
&lt;/h1&gt;

&lt;p&gt;Since you have a clear grasp of the basics of Python, the next step is to PRACTICE!&lt;/p&gt;

&lt;p&gt;It is important to code every day in order to learn Python.It will ensure continuity and will assist you in becoming acquainted with Python.&lt;/p&gt;

&lt;p&gt;Learning Python is all about being able to solve a programming challenge with a computer as the solution.&lt;/p&gt;

&lt;p&gt;Training can introduce you to a variety of challenges and applications while still honing your problem-solving abilities.&lt;/p&gt;

&lt;p&gt;To learn Python programming, there are various online tools available, such as tutorials.&lt;/p&gt;

&lt;p&gt;For so many options online, it can be daunting for a novice to find a good tutorial.&lt;/p&gt;

&lt;p&gt;So, how are you going to choose the resource?&lt;/p&gt;

&lt;p&gt;So... Choose the one that piques your curiosity and is highly recommended by the programming community.&lt;/p&gt;

&lt;p&gt;You can also look at different books and projects that are available online, as well as participate in others.&lt;/p&gt;

&lt;p&gt;Contributing to open-source code is an excellent way to gain useful knowledge.&lt;/p&gt;

&lt;p&gt;The source code of software is made freely accessible through the open-source model, and everyone can contribute to it.&lt;/p&gt;

&lt;p&gt;It is also a perfect way to engage with people who have common interests and to teach new concepts to the programming world.&lt;/p&gt;

&lt;p&gt;Interacting and collaborating with others on a common forum would also allow you to learn new ideas from those involved.&lt;/p&gt;

&lt;p&gt;When you examine the source code, you will study how things work, draw your own conclusions, and experiment by analyzing the codes of others.&lt;/p&gt;

&lt;p&gt;also, my tip is to run the learning is try seeing some bugs which was reported in the repository that I have listed below.&lt;/p&gt;

&lt;p&gt;Also try doing a project and then the only key note is to practice a lot ,do a lot of practice for the development and tinker woth the other frameworks by looking at their documentation.&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>What I learned after 10 years of development</title>
      <author>Adrian Twarog</author>
      <pubDate>Sun, 09 May 2021 09:16:07 +0000</pubDate>
      <link>https://dev.to/adriantwarog/what-i-learned-after-10-years-of-development-3an</link>
      <guid>https://dev.to/adriantwarog/what-i-learned-after-10-years-of-development-3an</guid>
      <description>&lt;p&gt;I've been coding for a long time, over 10 years&lt;/p&gt;

&lt;p&gt;During all that website development of JavaScript, HTML, CSS, I learned a few things they don't teach in class...&lt;/p&gt;

&lt;p&gt;Things like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Always improve&lt;/li&gt;
&lt;li&gt;Learn with projects&lt;/li&gt;
&lt;li&gt;Stay healthy&lt;/li&gt;
&lt;li&gt;Apply yourself&lt;/li&gt;
&lt;li&gt;Network&lt;/li&gt;
&lt;li&gt;Don't Burnout&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/zhTVcA8fuRI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;


&lt;center&gt;
&lt;a href="https://youtu.be/zhTVcA8fuRI%20"&gt;&lt;/a&gt;&lt;a href="https://youtu.be/zhTVcA8fuRI"&gt;https://youtu.be/zhTVcA8fuRI&lt;/a&gt; &lt;/center&gt;
&lt;h2&gt;
  &lt;a href="#always-improve"&gt;
  &lt;/a&gt;
  Always improve
&lt;/h2&gt;

&lt;p&gt;The first thing is to always keep learning early on when I started development, I really didn't take this very seriously. So this meant that while I was tinkering with lots of different projects, I never learned how to use a proper language or framework in full. The game changed for me a lot. &lt;/p&gt;

&lt;p&gt;When I actually picked one thing that I wanted to learn, which was react, I decided that I wanted to know it inside and out. So I took out a course and I completed it from start to end. This opened up lots of possibilities for me.&lt;/p&gt;

&lt;p&gt;I was finally able to build some of the projects I've always wanted to, and people at work started to realise this too, and came to me when they had different ideas and opportunities, always keep learning is essentially now a motto that I like to keep. And that's why it's first on this list. &lt;/p&gt;

&lt;p&gt;After learning react, I decided to continue on I learned WordPress and bootstrap and lots lots more. Once I learned something the journey wasn't over, though, I often had to relearn it over and over even react pretty much changes every couple of years where you'll need to learn how to do hooks, and who knows what the next thing is.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learn-with-projects"&gt;
  &lt;/a&gt;
  Learn with projects
&lt;/h2&gt;

&lt;p&gt;Find a project that you're truly interested in and use that as a medium to continue to learn these go hand in hand because the fact that you will always have ideas and projects that you want to build. &lt;/p&gt;

&lt;p&gt;But the problem is learning on its own is hard, you can feel like you're overwhelmed. And sometimes there's just too much to know, there have been so many times in my life where I've just given up on learning a language simply because it just felt too difficult. &lt;/p&gt;

&lt;p&gt;I just didn't have the endurance to keep on going. The difference a project makes is that if you're doing something you're truly interested in, then the learning is a byproduct of completing the project. &lt;/p&gt;

&lt;p&gt;It took me two years to try and figure out PHP just learning it by itself. But once I had a project where I had to build out a VPN using PHP, I learned it old in three months.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stay-healthy"&gt;
  &lt;/a&gt;
  Stay healthy
&lt;/h2&gt;

&lt;p&gt;I know that for a long period, when I was in development, I sort of let myself go in the terms that I just ate whatever it was that had, I'd get takeout and I would just get fast food. And this really wasn't very good for my body. &lt;/p&gt;

&lt;p&gt;Taking your health into consideration means making sure that you're eating good fruit and good vegetables, making sure that you're sitting properly, all of these things can add up in the long run. So whatever you do, make sure that you take care of yourself. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#apply-yourself"&gt;
  &lt;/a&gt;
  Apply yourself
&lt;/h2&gt;

&lt;p&gt;Apply yourself, this can come in so many different formats. The first is obviously that whenever you do any piece of work, put your heart and soul into it, you'll learn a lot more by doing so and you'll constantly be improving. &lt;/p&gt;

&lt;p&gt;The other aspect is that even when you do get a job or a piece of work, always look for the horizon, look for what else you can do, keep applying for better jobs or looking how you can earn more money. And if you keep doing this, the result will be that you will end up achieving those goals. &lt;/p&gt;

&lt;p&gt;My goal has always been to give myself a bit more free time to enjoy myself and do the things that I like, this didn't happen immediately. It took me about 10 years to get to where I am now. And for a lot of time, I just spend that time working really hard on all the things that I wanted to. But now that I have, I've got the opportunity to spend a bit more time with the things that are important to me, such as my son, my family, and working on the kinds of projects that I really enjoy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#network"&gt;
  &lt;/a&gt;
  Network
&lt;/h2&gt;

&lt;p&gt;Build your network. &lt;/p&gt;

&lt;p&gt;This isn't just having people that you know, it's actually making friends with them and collaborating with them on different types of projects. When I was starting out as developer, I didn't really try to collaborate with other people, I tried to do most projects by myself. &lt;/p&gt;

&lt;p&gt;This meant that when I got stuck, I could be stuck for an entire week trying to solve a problem. After being forced to work with other people in a startup, I actually found that I quite liked it. &lt;/p&gt;

&lt;p&gt;Some of my closest friends even talked to me about creating a startup which we built, and it was successful and other people I knew put me in touch with their friends. And they helped me get my very first job in web development to which I'm still working to this day. The power of networking and connections and just friends in general cannot be understated in whatever field you are in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-burnout"&gt;
  &lt;/a&gt;
  Don't Burnout
&lt;/h2&gt;

&lt;p&gt;Burnout is the next item on our list here. And it's a real thing that happens to a lot of developers. burnout for developers might not always be easy to recognise because we get so into the projects that we do. And when we're in that zone. Sometimes it's hard to know when we're pushing ourselves over the limit. &lt;/p&gt;

&lt;p&gt;It's important to have checks and balances. I know that sometimes we can be really passionate about a project. But if we don't sleep enough, or if we drink too much coffee, or even if we just work too hard at it, we might lose the inspiration and motivation that gets a project over the line. And trust me I know what it's like having hundreds of projects unfinished, simply because I lost that motivation. When I worked myself too hard.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#follow-and-support-me"&gt;
  &lt;/a&gt;
  Follow and support me:
&lt;/h2&gt;

&lt;p&gt;Special thanks if you subscribe to my channel :)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UCvM5YYWwfLwpcQgbRr68JLQ?sub_confirmation=1"&gt;🎞️ Youtube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/adrian_twarog"&gt;🐦 Twitter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#want-to-see-more"&gt;
  &lt;/a&gt;
  Want to see more:
&lt;/h2&gt;

&lt;p&gt;I will try to post new great content every day. Here are the latest items:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/adriantwarog/vs-code-in-virtual-reality-4ja2"&gt;VS Code in Virtual Reality&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/adriantwarog/vs-code-on-my-phone-how-i-did-it-1fme"&gt;VS Code on my Phone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/adriantwarog/40-amazing-developers-you-should-follow-on-youtube-5bhh"&gt;40 Amazing Developers You Should Follow On Youtube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/adriantwarog/enhancing-ui-design-for-developers-3peg"&gt;Enhance UI - Design for Developers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>productivity</category>
      <category>beginners</category>
      <category>career</category>
    </item>
    <item>
      <title>Data Structures: Hash Tables</title>
      <author>Tamerlan Gudabayev</author>
      <pubDate>Sun, 09 May 2021 09:10:20 +0000</pubDate>
      <link>https://dev.to/tamerlang/data-structures-hash-tables-e1c</link>
      <guid>https://dev.to/tamerlang/data-structures-hash-tables-e1c</guid>
      <description>&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#1"&gt;Introduction to Hashing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#2"&gt;What is a hash table?&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#3"&gt;Gritty Details&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#4"&gt;What is a hash function?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#5"&gt;Handling Collisions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#6"&gt;Chaining&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#7"&gt;Open Addressing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#8"&gt;Time Complexity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#9"&gt;Strengths and Weaknesses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#10"&gt;Applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#11"&gt;Simple Implementation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#12"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#13"&gt;Additional References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#introduction-to-hashing"&gt;
  &lt;/a&gt;
  Introduction to Hashing &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Imagine that we went back in time into the time right before the smartphone boom, and you were assigned a task to implement the contact list feature. How would you do it?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8_NDUqzj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gp7v0xh01f0rltsbhomy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8_NDUqzj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gp7v0xh01f0rltsbhomy.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's forget the UI-UX aspect of the problem, and focus on the core problem. We have to map a name to a phone number. If we break this down further, we need a data structure that helps us map key-value pairs to each other. &lt;/p&gt;

&lt;p&gt;Fortunately, smart computer scientists before us already made a data structure for this use case and it's called the hash table.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;PS. This data structure is also called a hash map, it's almost the same thing.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-hash-table"&gt;
  &lt;/a&gt;
  What is a hash table? &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;A hash-table is a data structure that maps keys to values.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;"But, TAMER, what are keys and values?"&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Glad you asked.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Key&lt;/strong&gt; - a unique integer that we can use to index the value&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Value&lt;/strong&gt; - value associated with the key&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MqeZDq8i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xwugii87rqn6c2bef5jy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MqeZDq8i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xwugii87rqn6c2bef5jy.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For example, let's us imagine we have a bunch of contacts, if we structure them in a hash table it will look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Representation of a hash table&lt;/span&gt;
&lt;span class="nx"&gt;contacts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mike&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;+ 1 222 333 xxxx&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;+ 1 222 333 xxxx&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Ann&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;+ 1 222 333 xxxx&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Luke&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;+ 1 222 333 xxxx&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;George&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;+ 1 222 333 xxxx&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Liza&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;+ 1 222 333 xxxx&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// To get a phone number&lt;/span&gt;
&lt;span class="nx"&gt;mikes_phone_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;contacts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mike&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You may have questions such as: &lt;/p&gt;

&lt;p&gt;&lt;em&gt;"Isn't the key supposed to be an integer?"&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Your right, so let's see how this works under the hood.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#gritty-details"&gt;
  &lt;/a&gt;
  Gritty Details &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;A hash table is essentially an &lt;strong&gt;array&lt;/strong&gt;, but the keys are converted into a unique integer index. &lt;/p&gt;

&lt;p&gt;Take a look at this visualized example.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3y6-7Vp3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zsw5oq5vua6uthtja8ox.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3y6-7Vp3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zsw5oq5vua6uthtja8ox.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our key "John Smith" changed into index 1, which we can use to index the array. As you can see it goes through the hash function.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-a-hash-function"&gt;
  &lt;/a&gt;
  What is a hash function? &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;At its core, a hash function is used to translate a key to a unique integer index. A simple hash function may look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt; &lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;hashString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;convert_string_to_number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// sum of all ascii characters&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are tons of different hashing functions, some good, some bad. &lt;/p&gt;

&lt;p&gt;Good hashing functions, usually have the following properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Easy to compute&lt;/strong&gt;: it does not have to be some complicated algorithm.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Uniform distribution&lt;/strong&gt;: it should uniformly distribute the indexes, there shouldn't be too much clustering.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Less collisions&lt;/strong&gt;: collisions occur when two keys have the same hashed index, the hash function should try to avoid this as much as possible.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Even with a good hashing function, collisions are bound to occur. To combat that, we have certain methods on dealing with collisions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#handling-collisions"&gt;
  &lt;/a&gt;
  Handling Collisions &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The two main ways of handling collisions are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Chaining&lt;/li&gt;
&lt;li&gt;Open Addressing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's quickly go over each one.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#chaining"&gt;
  &lt;/a&gt;
  Chaining &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Chaining is one of the most commonly used collision resolution techniques. Basically, each element of the hash table is a linked list. To store an element in a hash table, you must store it in a specific linked list. If there are any collisions, then you simply store the elements in the same linked list.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ym2f5p6M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s4adok0urqwn5li2hne0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ym2f5p6M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s4adok0urqwn5li2hne0.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's go over the pros and cons of this approach.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Simple to implement&lt;/li&gt;
&lt;li&gt;Hash table never fills up, we can always add more elements to the chain&lt;/li&gt;
&lt;li&gt;Less sensitive to the hash function or load factors&lt;/li&gt;
&lt;li&gt;It is mostly used when it is unknown how many and how frequently keys may be inserted or deleted&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The cache performance of chaining is not good as keys are stored using a linked list. Open addressing provides better cache performance as everything is stored in the same table&lt;/li&gt;
&lt;li&gt;Wastage of Space (Some Parts of the hash table are never used)&lt;/li&gt;
&lt;li&gt;If the chain becomes long, then search time can become O(n) in the worst case&lt;/li&gt;
&lt;li&gt;Uses extra space for links&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#open-addressing"&gt;
  &lt;/a&gt;
  Open Addressing &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Unlike chaining, all elements in a hash table are stored directly on it. When a new entry is being inserted, an index will be generated, and if it's unoccupied only then the entry record is inserted. If the index is occupied, then it will regenerate the index in some probe sequence until it finds an unoccupied slot.&lt;/p&gt;

&lt;p&gt;There are three main probe sequences:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Linear Probing&lt;/li&gt;
&lt;li&gt;Quadratic Probing&lt;/li&gt;
&lt;li&gt;Double Hashing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's take a deeper look at each&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Linear Probing&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Linear probing is when the interval between successive probes is fixed (usually to 1).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nx"&gt;hashTableSize&lt;/span&gt;
&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nx"&gt;hashTableSize&lt;/span&gt;
&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nx"&gt;hashTableSize&lt;/span&gt;
&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nx"&gt;hashTableSize&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Linear probing is simple, but it has its flaws:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Primary Clustering&lt;/strong&gt;: many consecutive elements form groups and it starts taking time to find a free slot or to search for an element.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Secondary Clustering&lt;/strong&gt;: Secondary clustering is less severe, two records only have the same collision chain (Probe Sequence) if their initial position is the same&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Quadratic Probing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Quadratic probing is similar to linear probing but instead of a fixed interval, we take the squared interval.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nx"&gt;hashTableSize&lt;/span&gt;
&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nx"&gt;hashTableSize&lt;/span&gt; &lt;span class="c1"&gt;// 1^2&lt;/span&gt;
&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nx"&gt;hashTableSize&lt;/span&gt; &lt;span class="c1"&gt;// 2^2&lt;/span&gt;
&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nx"&gt;hashTableSize&lt;/span&gt; &lt;span class="c1"&gt;// 3^2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Double Hashing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Double hashing is similar to linear probing and the only difference is the interval between successive probes. Here, the interval between probes is computed by using two hash functions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;indexH&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nx"&gt;hashTableSize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;indexH&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nx"&gt;hashTableSize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have covered the different methods of implementing open addressing, let's look its pros and cons.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open addressing is used when the frequency and number of keys are known.&lt;/li&gt;
&lt;li&gt;Open addressing provides better cache performance as everything is stored in the same table.&lt;/li&gt;
&lt;li&gt;In Open addressing, a slot can be used even if an input doesn’t map to it.&lt;/li&gt;
&lt;li&gt;No links in Open addressing, thus saving space.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open Addressing requires more computation.&lt;/li&gt;
&lt;li&gt;In open addressing, table may become full.&lt;/li&gt;
&lt;li&gt;Open addressing requires extra care to avoid clustering and load factor.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#time-complexity"&gt;
  &lt;/a&gt;
  Time Complexity &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Let's look at the average case for hash tables.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Space&lt;/strong&gt; — O(n)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Insertion&lt;/strong&gt; — O(1)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Search&lt;/strong&gt; — O(1)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Deletion&lt;/strong&gt; — O(1)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;PS. Keep in mind that all of these in worst case can be O(n).&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#strengths-and-weaknesses"&gt;
  &lt;/a&gt;
  Strengths and Weaknesses &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Now that we have covered all the gritty details of hash tables, let's go over their strengths and weaknesses.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#strengths"&gt;
  &lt;/a&gt;
  Strengths
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Fast searches&lt;/strong&gt;. Search take O(1) time &lt;em&gt;on average&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Flexible keys&lt;/strong&gt;. Most data types can be used for keys, as long as they're hashable.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#weaknesses"&gt;
  &lt;/a&gt;
  Weaknesses
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Slow worst-case searches&lt;/strong&gt;. Search take O(n) time in the worst case.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Unordered&lt;/strong&gt;. Keys aren't stored in a special order. If you're looking for the smallest key, the largest key, or all the keys in a range, you'll need to look through every key to find it.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Single-directional searches&lt;/strong&gt;. While you can search the &lt;em&gt;value&lt;/em&gt; for a given key in O(1) time, searching the &lt;em&gt;keys&lt;/em&gt; for a given &lt;em&gt;value&lt;/em&gt; requires looping through the whole dataset—O(n) time.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Not cache-friendly&lt;/strong&gt;. Many hash table implementations use linked lists, which don't put data next to each other in memory.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#applications"&gt;
  &lt;/a&gt;
  Applications &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Associative arrays&lt;/em&gt;: Hash tables are commonly used to implement many types of in-memory tables. They are used to implement associative arrays (arrays whose indices are arbitrary strings or other complicated objects).&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Database indexing&lt;/em&gt;: Hash tables may also be used as disk-based data structures and database indices (such as in dbm).&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Caches&lt;/em&gt;: Hash tables can be used to implement caches i.e. auxiliary data tables that are used to speed up the access to data, which is primarily stored in slower media.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Object representation&lt;/em&gt;: Several dynamic languages, such as Perl, Python, JavaScript, and Ruby use hash tables to implement objects.&lt;/li&gt;
&lt;li&gt;Hash Functions are used in various algorithms to make their computing faster&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#simple-implementation"&gt;
  &lt;/a&gt;
  Simple Implementation &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;We are gonna implement a simple hash table using JavaScript.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;HashTable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;calculateHash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;calculateHash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;If&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasOwnProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;hasOwnProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;calculateHash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasOwnProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;hasOwnProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//create object of type hash table&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ht&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;HashTable&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;//add data to the hash table ht&lt;/span&gt;
&lt;span class="nx"&gt;ht&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Canada&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;300&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;ht&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Germany&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;100&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;ht&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Italy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;50&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//search&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ht&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Italy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;PS. You would almost never have to implement your own hash tables, in JavaScript, objects are essentially hash tables. Java and many other languages have their own internal implementation that you can directly use.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Hash tables are by far one of the most commonly used data structures, they are also used in lots of coding interview problems. So by the end of this post, I hope you learned the beauty of hash tables and it's gritty details. If you got any questions, feel free to leave them down below in the comments.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#additional-references"&gt;
  &lt;/a&gt;
  Additional References &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;To learn more about hashes I recommend these resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.hackerearth.com/practice/data-structures/hash-tables/basics-of-hash-tables/tutorial/"&gt;https://www.hackerearth.com/practice/data-structures/hash-tables/basics-of-hash-tables/tutorial/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.programiz.com/dsa/hash-table"&gt;https://www.programiz.com/dsa/hash-table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.freecodecamp.org/news/what-is-hashing/"&gt;https://www.freecodecamp.org/news/what-is-hashing/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>beginners</category>
      <category>programming</category>
      <category>computerscience</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>Tools you need for making your own Linux distribution.</title>
      <author>vishwasnarayanre</author>
      <pubDate>Sun, 09 May 2021 09:09:32 +0000</pubDate>
      <link>https://dev.to/vishwasnarayan5/tools-you-need-for-making-your-own-linux-distribution-23eg</link>
      <guid>https://dev.to/vishwasnarayan5/tools-you-need-for-making-your-own-linux-distribution-23eg</guid>
      <description>&lt;p&gt;You need have your own Linux Distibution then know these tools so that you can build your own Linux Distibution for your own purpose that you need example hacking,pentesting and so on.&lt;/p&gt;

&lt;p&gt;Thus, you can use these following tools.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#virtual-box"&gt;
  &lt;/a&gt;
  Virtual Box
&lt;/h1&gt;

&lt;p&gt;You can install an Virtual box and then go and get the OS installed on to the virtual box as a OVA file and also change it and then publish as your own Custom OS which is one of the best technique that you can adopt to build your own distribution.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TbFhYooY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vv5lqrb043og3jogsea3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TbFhYooY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vv5lqrb043og3jogsea3.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#linux-respin"&gt;
  &lt;/a&gt;
  Linux Respin:
&lt;/h1&gt;

&lt;p&gt;Linux Respin is an offshoot of the now-defunct Remastersys. Remastersys was once one of the most common tools for creating your own Linux distro and/or a backup of your operating system. Linux Respin does not deliver as much as Remastersys used to, but it still does a fine job if you choose a distro for which it is available, Linux Respin is only available for Debian, Mint, and Trisquel, which limits its appeal. What I don't like about this tool is that it has almost no documentation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4lu0njhI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m9mcxskcz6ofk5l2ib76.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4lu0njhI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m9mcxskcz6ofk5l2ib76.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#linux-live-kit"&gt;
  &lt;/a&gt;
  Linux Live Kit:
&lt;/h1&gt;

&lt;p&gt;The Linux Live Kit is a tool for creating your own distros and backing up your system. It prefers Debian, but it can run on other distributions as well, as long as they support the aufs and squashfs kernel modules. The Linux Live Kit has a very simple wizard for building a distro – just follow the steps and you're done.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WQNWhYjf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dtl65l6g0j8e4znojgvt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WQNWhYjf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dtl65l6g0j8e4znojgvt.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#linux-from-scratch"&gt;
  &lt;/a&gt;
  Linux from Scratch:
&lt;/h1&gt;

&lt;p&gt;Linux from Scratch is a project that teaches Linux from the ground up. LFS has extensive documentation and is an excellent resource for learning about Linux in general, not just how to create your own distro. Linux from Scratch allows you to create your own customized Linux system from scratch. LFS is not a tool like the others on this list, but it can be used for the same purpose – to create your own Linux distro (and to test it).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pl1-vQDY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g6xta5jvn76wwb85z8oc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pl1-vQDY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g6xta5jvn76wwb85z8oc.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#live-magic"&gt;
  &lt;/a&gt;
  Live Magic:
&lt;/h1&gt;

&lt;p&gt;Live Magic is yet another Debian tool for creating distributions. It can burn CDs, USB drives, and netboot images. It is much easier to use than some of the other apps on this list, such as Remastersys, but it does not build the image using your running system. Instead, use a wizard to guide you through the process of configuring your system. The programme will download the packages from your repositories and install them in your system.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xu7PLZ_t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o57q260a7eqsz8qtrf1x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xu7PLZ_t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o57q260a7eqsz8qtrf1x.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#revisor"&gt;
  &lt;/a&gt;
  Revisor:
&lt;/h1&gt;

&lt;p&gt;Revisor supports the creation of Installation Media for permanent installation of the distribution on a computer, live media for booting and using the distribution without making permanent changes to the computer, virtualization media for use in virtual guests in Xen or KVM, and utility media for data recovery or dealing with problems in the operating system.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dSby8acB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0znd8fqds78rh9lpd9ou.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dSby8acB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0znd8fqds78rh9lpd9ou.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#customizer"&gt;
  &lt;/a&gt;
  Customizer:
&lt;/h1&gt;

&lt;p&gt;Customizer is no longer in active development, but that is because its developer considers it stable. It is yet another tool for remixing Ubuntu, but it also supports its various flavours, such as Xubuntu and Kubuntu.&lt;/p&gt;

&lt;p&gt;The host system under which you are using it, however, must have the same release number and architecture as the guest system you are remixing.&lt;/p&gt;

&lt;p&gt;These tools for making your own custom Linux distribution should be useful. Their level of complexity (and power) varies, but we've tried to include both simple apps and apps with more power. See our guides on how to repair a corrupted USB drive in Linux and how to instal for more Linux tips. Arch Linux uses deb packages.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uBnhS-6A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sbxuh9hsnq5ge4rkuz5x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uBnhS-6A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sbxuh9hsnq5ge4rkuz5x.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#ubuntu-imager"&gt;
  &lt;/a&gt;
  Ubuntu Imager:
&lt;/h1&gt;

&lt;p&gt;Ubuntu Imager is a useful tool for creating your own Ubuntu-based distribution. It's not the only such app for Ubuntu, but because it's a good one, I've included it on this list. I'm not going to go over it in detail because we already have a very detailed how-to with installation and operation instructions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CTpKq_SD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wv9uvjk1cs9hgoe3ut0c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CTpKq_SD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wv9uvjk1cs9hgoe3ut0c.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thus these are the list of the tools that we can use for making your own Linux image ,do just try making them by using these software's if you have any doubts do connect with me through my twitter thus we can work on the queries on using these tools and building os.&lt;/p&gt;

</description>
      <category>linux</category>
      <category>cybersecurity</category>
      <category>computerscience</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Removing extraneous NPM packages</title>
      <author>Rajesh Kumar Yadav</author>
      <pubDate>Sun, 09 May 2021 08:47:04 +0000</pubDate>
      <link>https://dev.to/rajeshkumaryadavdotcom/removing-extraneous-npm-packages-43n4</link>
      <guid>https://dev.to/rajeshkumaryadavdotcom/removing-extraneous-npm-packages-43n4</guid>
      <description>&lt;h1&gt;
  &lt;a href="#synopsis"&gt;
  &lt;/a&gt;
  Synopsis
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm prune [[&amp;lt;@scope&amp;gt;/]&amp;lt;pkg&amp;gt;...] [--production] [--dry-run] [--json]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  Description
&lt;/h1&gt;

&lt;p&gt;This command removes "extraneous" packages. If a package name is provided, then only packages matching one of the supplied names are removed.&lt;/p&gt;

&lt;p&gt;Extraneous packages are those present in the &lt;code&gt;node_modules&lt;/code&gt; folder that are not listed as any package's dependency list.&lt;/p&gt;

&lt;p&gt;If the &lt;code&gt;--production&lt;/code&gt; flag is specified or the &lt;code&gt;NODE_ENV&lt;/code&gt; environment variable is set to production, this command will remove the packages specified in your &lt;code&gt;devDependencies&lt;/code&gt;. Setting &lt;code&gt;--no-production&lt;/code&gt; will negate &lt;code&gt;NODE_ENV&lt;/code&gt; being set to production.&lt;/p&gt;

&lt;p&gt;If the &lt;code&gt;--dry-run&lt;/code&gt; flag is used then no changes will actually be made.&lt;/p&gt;

&lt;p&gt;If the &lt;code&gt;--json&lt;/code&gt; flag is used, then the changes npm prune made (or would have made with &lt;code&gt;--dry-run&lt;/code&gt;) are printed as a JSON object.&lt;/p&gt;

&lt;p&gt;In normal operation, extraneous modules are pruned automatically, so you'll only need this command with the &lt;code&gt;--production&lt;/code&gt; flag. However, in the real world, operation is not always "normal". When crashes or mistakes happen, this command can help clean up any resulting garbage.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h1&gt;

&lt;p&gt;To remove extraneous packages (packages that are installed but not in dependency list) run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm prune
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To remove all dev packages add &lt;code&gt;--production&lt;/code&gt; flag:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm prune --production
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/rkycom"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With all that being said, I highly recommend you keep learning!&lt;/p&gt;

&lt;p&gt;Thank you for reading this article. Please feel free to connect with me on &lt;a href="https://www.linkedin.com/in/www-rajeshkumaryadav-com/"&gt;LinkedIn&lt;/a&gt; and &lt;a href="https://twitter.com/rky_com"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>node</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Best Udemy Courses To Level Up Your Web Development Skills</title>
      <author>Thinkpader</author>
      <pubDate>Sun, 09 May 2021 08:39:04 +0000</pubDate>
      <link>https://dev.to/thinkpader/best-udemy-courses-to-level-up-your-web-development-skills-37fe</link>
      <guid>https://dev.to/thinkpader/best-udemy-courses-to-level-up-your-web-development-skills-37fe</guid>
      <description>&lt;p&gt;Are you a beginner developer and want to level up your dev game and progress faster than your competition? Read on and I’ll give you honest reviews of some of the courses I’ve taken on Udemy.&lt;/p&gt;

&lt;p&gt;These are courses that I’ve paid for (using my hard earned money) and this article is in no way sponsored by Udemy. There are no affiliate links so you can be doubly sure that I’m not putting any course here just to earn some extra bucks. If you wish to purchase any of these courses then make sure you wait for a sale (Udemy has them on a bi-monthly basis).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#for-absolute-beginners"&gt;
  &lt;/a&gt;
  For Absolute Beginners
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#the-web-developer-bootcamp-2021-by-colt-steele"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.udemy.com/course/the-web-developer-bootcamp/"&gt;The Web Developer Bootcamp 2021 by Colt Steele&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sF_78yzd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c3sgxh22slf2g6ihpci2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sF_78yzd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c3sgxh22slf2g6ihpci2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the new version of Colt’s The Web Developer Bootcamp, Udemy’s most popular web development course. This course has been completely overhauled to prepare students for the 2021 job market, and has over 60 hours of brand new content. Some of the highlights of the course are:-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The instructor, Colt Steele, is extremely knowledgable and witty. He makes the tricky stuff a lot less tricky, his explanations are spot on and his cat and dog jokes make you chuckle.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The course everything a beginner web developer needs to know — from HTML, CSS, Bootstrap, JavaScript all the way to Node.js, Express and MongoDB.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It follows a logical structure so that the student (you!) is not overwhelmed or confused.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There are a lot of mini exercises to re-enforce what you are learning and make it stick.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You make a BIG project towards the end and learn Node.js, Express and MongoDB in the process.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Overall, this a great intro to the world of web development for beginners and you can’t go wrong with this one. Get the course  &lt;a href="https://www.udemy.com/course/the-web-developer-bootcamp/"&gt;here&lt;/a&gt; .&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#levelling-up-your-css-and-javascript"&gt;
  &lt;/a&gt;
  Levelling Up Your CSS and JavaScript
&lt;/h1&gt;

&lt;p&gt;Although Colt’s course covers the basics of CSS and JavaScript, I think spending some time to brush up what you’ve just learnt and more importantly why is does what it does will go a long way in making you a better developer. And the next two courses are perfect for that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#advanced-css-and-sass-flexbox-grid-animations-and-more-by-jonas-schmedtmann"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.udemy.com/course/advanced-css-and-sass/"&gt;Advanced CSS and Sass: Flexbox, Grid, Animations and More by Jonas Schmedtmann&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wlhRrfWL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9y0xpshtgusbjyxsg8ts.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wlhRrfWL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9y0xpshtgusbjyxsg8ts.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the perfect course to level up your CSS skills and getting a better understanding of CSS and even SaaS. Some highlights of the course are:-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Understand how CSS works behind the scenes. Learn about the cascade, specificity, inheritance, value processing, the visual formatting model, the box model, box types, positioning schemes and stacking contexts etc.&lt;/li&gt;
&lt;li&gt;Learn about CSS architecture.
*Learn about Flexbox and Grid layout.&lt;/li&gt;
&lt;li&gt;Introduction to Sass.&lt;/li&gt;
&lt;li&gt;Lots of cool and real world projects.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Get the course  &lt;a href="https://www.udemy.com/course/advanced-css-and-sass/"&gt;here&lt;/a&gt; .&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-modern-javascript-bootcamp-course-2021-by-colt-steele-and-stephen-grider"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.udemy.com/course/javascript-beginners-complete-tutorial/"&gt;The Modern Javascript Bootcamp Course (2021) by Colt Steele and Stephen Grider&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kb94jMIr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oseq8jkb221zu606ykqu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kb94jMIr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oseq8jkb221zu606ykqu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the best courses to get an in depth understanding of JavaScript by two of Udemy’s best instructors — Colt Steele and Stephen Grider.&lt;/p&gt;

&lt;p&gt;The first half of the course is mostly theory and mini exercises and is taught by Colt. The second half will have you build a lot of cool and interesting projects that you can use in your portfolio. Some of the cool things you’ll build in the course:-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fetch and manage information from third-party API’s.&lt;/li&gt;
&lt;li&gt;Build command line tools from scratch using Node JS.&lt;/li&gt;
&lt;li&gt;Build a fully-featured E-Commerce application from scratch — including production-grade authentication.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Get the course  &lt;a href="https://www.udemy.com/course/javascript-beginners-complete-tutorial/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#learning-react-the-hottest-javascript-framework"&gt;
  &lt;/a&gt;
  Learning React — the HOTTEST JavaScript Framework
&lt;/h1&gt;

&lt;p&gt;Frameworks make your life easier by doing a lot of the heavy lifting for you. So once you’ve learnt enough JavaScript it’s time to learn React. React was created by Facebook and is the most widely used JavaScript framework.&lt;/p&gt;

&lt;p&gt;It’s also in a lot of demand in the job market. So learning React with increase your employability and increase your chances of getting a job.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-tutorial-and-projects-course-by-john-smilga"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.udemy.com/course/react-tutorial-and-projects-course/"&gt;React Tutorial and Projects Course by John Smilga&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7iru71zY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/78ni006govfxnh357x0x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7iru71zY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/78ni006govfxnh357x0x.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Although this course is by a lesser known Udemy instructor, it does not disappoint. The instructor makes React concepts easy to understand. The course uses the latest method of declaring functional components. Some of the highlights of the course are:-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Start from the very basics of React.&lt;/li&gt;
&lt;li&gt;Learn about functional components.&lt;/li&gt;
&lt;li&gt;Learn the various hooks such as useState, useEffect etc.&lt;/li&gt;
&lt;li&gt;Make a lot of projects to practice what you’ve learnt.&lt;/li&gt;
&lt;li&gt;Lots of repetition to make sure what you learn sticks.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Get the course  &lt;a href="https://www.udemy.com/course/react-tutorial-and-projects-course/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#concluding-thoughts"&gt;
  &lt;/a&gt;
  Concluding Thoughts
&lt;/h1&gt;

&lt;p&gt;The courses given above are a great starting point for someone looking to dive into the world of web development. As I’ve already said in &lt;a href="https://dev.to/thinkpader/my-journey-from-a-code-newbie-to-advanced-beginner-5cp1"&gt;my first blog post&lt;/a&gt; the secret to becoming a successful web developer are:-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Practice what you learn — make your own mini projects to solidify your knowledge.&lt;/li&gt;
&lt;li&gt;Be consistent — take out time to practice coding everyday.&lt;/li&gt;
&lt;li&gt;Focus — pick a language or technology and stick with it. Don’t hop from one thing to another.&lt;/li&gt;
&lt;li&gt;Avoid distractions — switch off your phone or keep it in airplane mode.&lt;/li&gt;
&lt;li&gt;Take your time — don’t compare your progress with others.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So that’s it from me for today. I hope you’ll benefit from the courses that I’ve outlined above. See you guys soon.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Node.js : How to get a basic HTTPS web server up and running!</title>
      <author>Rajesh Kumar Yadav</author>
      <pubDate>Sun, 09 May 2021 08:32:08 +0000</pubDate>
      <link>https://dev.to/rajeshkumaryadavdotcom/node-js-how-to-get-a-basic-https-web-server-up-and-running-9ke</link>
      <guid>https://dev.to/rajeshkumaryadavdotcom/node-js-how-to-get-a-basic-https-web-server-up-and-running-9ke</guid>
      <description>&lt;p&gt;Once you have node.js installed on your system, you can just follow the procedure below to get a basic web server running with support for both HTTP and HTTPS!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#step-1-build-a-certificate-authority"&gt;
  &lt;/a&gt;
  Step 1 : Build a Certificate Authority
&lt;/h1&gt;

&lt;p&gt;1.1. create the folder where you want to store your key &amp;amp; certificate :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir conf
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;1.2. go to that directory :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd conf
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;1.3. grab this ca.cnf file to use as a configuration shortcut :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;wget https://raw.githubusercontent.com/anders94/https-authorized-clients/master/keys/ca.cnf
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;1.4. create a new certificate authority using this configuration :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;openssl req -new -x509 -days 9999 -config ca.cnf -keyout ca-key.pem -out ca-cert.pem
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;1.5. now that we have our certificate authority in ca-key.pem and ca-cert.pem, let's generate a private key for the server :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;openssl genrsa -out key.pem 4096
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;1.6. grab this server.cnf file to use as a configuration shortcut:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;wget https://raw.githubusercontent.com/anders94/https-authorized-clients/master/keys/server.cnf
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;1.7. generate the certificate signing request using this configuration :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;openssl req -new -config server.cnf -key key.pem -out csr.pem
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;1.8. sign the request :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;openssl x509 -req -extfile server.cnf -days 999 -passin "pass:password" -in csr.pem -CA cacert.pem -CAkey ca-key.pem -CAcreateserial -out cert.pem
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#step-2-install-your-certificate-as-a-root-certificate"&gt;
  &lt;/a&gt;
  Step 2 : Install your certificate as a root certificate
&lt;/h1&gt;

&lt;p&gt;2.1. copy your certificate to your root certificates' folder :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo cp ca-crt.pem /usr/local/share/ca-certificates/ca-crt.pem
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2.2. update CA store :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo update-ca-certificates
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#step-3-starting-your-node-server"&gt;
  &lt;/a&gt;
  Step 3 : Starting your node server
&lt;/h1&gt;

&lt;p&gt;First, you want to create a server.js file that contains your actual server code. The minimal setup for an HTTPS server in Node.js would be something like this :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var https = require('https');
var fs = require('fs');
var httpsOptions = {
 key: fs.readFileSync('path/to/server-key.pem'),
 cert: fs.readFileSync('path/to/server-crt.pem')
};
var app = function (req, res) {
 res.writeHead(200);
 res.end("hello world\n");
}
https.createServer(httpsOptions, app).listen(4433);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you also want to support http requests, you need to make just this small modification :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var http = require('http');
var https = require('https');
var fs = require('fs');
var httpsOptions = {
 key: fs.readFileSync('path/to/server-key.pem'),
 cert: fs.readFileSync('path/to/server-crt.pem')
};
var app = function (req, res) {
 res.writeHead(200);
 res.end("hello world\n");
}
http.createServer(app).listen(8888);
https.createServer(httpsOptions, app).listen(4433);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3.1. go to the directory where your server.js is located :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd /path/to
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3.2. run server.js :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node server.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With all that being said, I highly recommend you keep learning!&lt;/p&gt;

&lt;p&gt;Thank you for reading this article. Please feel free to connect with me on &lt;a href="https://www.linkedin.com/in/www-rajeshkumaryadav-com/"&gt;LinkedIn&lt;/a&gt; and &lt;a href="https://twitter.com/rky_com"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/rkycom"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>node</category>
      <category>devops</category>
      <category>developer</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Everything I use daily as a Senior Frontend Engineer</title>
      <author>Jordi Enric</author>
      <pubDate>Sun, 09 May 2021 08:30:22 +0000</pubDate>
      <link>https://dev.to/jordienr/everything-i-use-daily-as-a-senior-frontend-engineer-4pa4</link>
      <guid>https://dev.to/jordienr/everything-i-use-daily-as-a-senior-frontend-engineer-4pa4</guid>
      <description>&lt;h1&gt;
  &lt;a href="#vscode"&gt;
  &lt;/a&gt;
  VSCode
&lt;/h1&gt;

&lt;p&gt;I use these extensions:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#utilities"&gt;
  &lt;/a&gt;
  Utilities
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Auto Close Tag: Automatically add HTML/XML close tag, same as Visual Studio IDE or Sublime Text&lt;/li&gt;
&lt;li&gt;Auto Rename Tag: Auto rename paired HTML/XML tag&lt;/li&gt;
&lt;li&gt;Better Comments: Improve your code commenting by annotating with alert, informational, TODOs, and more!&lt;/li&gt;
&lt;li&gt;Better TOML: Better TOML Language support&lt;/li&gt;
&lt;li&gt;Bracket Pair Colorizer: A customizable extension for colorizing matching brackets&lt;/li&gt;
&lt;li&gt;DotENV: Support for dotenv file syntax&lt;/li&gt;
&lt;li&gt;ESLint: Integrates ESLint JavaScript into VS Code.&lt;/li&gt;
&lt;li&gt;Firebase: Firestore Security Rules syntax highlighting&lt;/li&gt;
&lt;li&gt;GitLens: Supercharge the Git capabilities built into Visual Studio Code — Visualize code authorship at a glance via Git blame annotations and code lens, seamlessly navigate and explore Git repositories, gain valuable insights via powerful comparison commands, and so much more&lt;/li&gt;
&lt;li&gt;Gremlins Tracker: Reveals some characters that can be harmful because they are invisible or looking like legitimate ones. Inspired by Sublime Gremlins.&lt;/li&gt;
&lt;li&gt;Import Cost: Display import/require package size in the editor&lt;/li&gt;
&lt;li&gt;Intellisense for CSS class names in HTML: CSS class name completion for the HTML class attribute based on the definitions found in your workspace.&lt;/li&gt;
&lt;li&gt;Jest: Use Facebook's Jest With Pleasure.&lt;/li&gt;
&lt;li&gt;Jest Test Explorer: Run your Jest tests in the Sidebar of Visual Studio Code&lt;/li&gt;
&lt;li&gt;Markdown Preview Enhanced: Markdown Preview Enhanced ported to vscode&lt;/li&gt;
&lt;li&gt;markdownlint: Markdown linting and style checking for Visual Studio Code&lt;/li&gt;
&lt;li&gt;Material Design icons Intellisense&lt;/li&gt;
&lt;li&gt;npm Intellisense&lt;/li&gt;
&lt;li&gt;Path Intellisense&lt;/li&gt;
&lt;li&gt;Prettier&lt;/li&gt;
&lt;li&gt;Project Manager: Easily switch between projects&lt;/li&gt;
&lt;li&gt;Rainbow CSV: Highlight CSV and TSV files, Run SQL-like queries&lt;/li&gt;
&lt;li&gt;Random Everything: Generate random ints, floats, strings, words, etc.&lt;/li&gt;
&lt;li&gt;SCSS Intellisense: Advanced autocompletion and refactoring support for SCSS&lt;/li&gt;
&lt;li&gt;Todo Tree: Show TODO, FIXME, etc. comment tags in a tree view&lt;/li&gt;
&lt;li&gt;TS QuickFixes: Quick fixes for typescript&lt;/li&gt;
&lt;li&gt;TS&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#look-amp-feel"&gt;
  &lt;/a&gt;
  Look &amp;amp; feel
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Fluent Icons: Fluent product icons for Visual Studio Code&lt;/li&gt;
&lt;li&gt;GlassIt-VSC: VS Code Extension to set window to transparent on Windows and Linux platforms.&lt;/li&gt;
&lt;li&gt;Peacock: Subtly change the workspace color of your workspace. Ideal when you have multiple VS Code instances, and you want to quickly identify which is which.&lt;/li&gt;
&lt;li&gt;Yi Dark &amp;amp; Yi Light Themes&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#git-bash-terminal"&gt;
  &lt;/a&gt;
  Git Bash Terminal
&lt;/h1&gt;

&lt;p&gt;I use it to CRUD between folders &amp;amp; files. Open projects in VS Code, manage Git in projects, use VIM, etc.&lt;/p&gt;

&lt;p&gt;I recommend you set up some aliases for the most common commands you type.&lt;/p&gt;

&lt;p&gt;For example, I have aliases to quickly move to folders like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;alias cdhp="cd h:/projects"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or run npm commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;alias nr="npm run"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#screen-to-gif"&gt;
  &lt;/a&gt;
  Screen to GIF
&lt;/h1&gt;

&lt;p&gt;I'm a frontend developer, so most of my work can be screenshotted or screengiffed (I made this word up) which is really useful when working remotely. I use Screen to GIF to quickly create GIFs of parts of the UI to show how it's going or working. This tool is really helpful to have better async conversations with different teams.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#todoist"&gt;
  &lt;/a&gt;
  Todoist
&lt;/h1&gt;

&lt;p&gt;Even tho at work I use Azure I like to keep a personal to-do list to keep track of tasks I'm working on. I pay the todoist subscription which is pretty reasonable to have everything in one place. There are other free alternatives like trello, notion and more.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#notion"&gt;
  &lt;/a&gt;
  Notion
&lt;/h1&gt;

&lt;p&gt;I use Notion only for documentation and taking notes. I find it pretty slow but haven't found any alternatives that I like. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#figma"&gt;
  &lt;/a&gt;
  Figma
&lt;/h1&gt;

&lt;p&gt;Even tho I usually don't participate in design processes Figma is really useful to create graphics for documentation. I used to do freelance UI Design, so I'm pretty comfortable with the tool. I'd recommend anyone who is working in Frontend development to get comfortable with Figma.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;These are all the tools I use on a daily basis. Only with these I can do my job 100% no problem. I believe that having more tools adds complexity to your day, so I try to keep it simple. I'd recommend you don't have too many tools in your belt and have a clear goal for each. &lt;/p&gt;

&lt;p&gt;I could keep track of tasks in Notion, but I prefer to use Notion only for documentation so that it doesn't get too messy.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#so-what-are-your-tools-leave-a-comment-and-share-them"&gt;
  &lt;/a&gt;
  So, what are your tools? Leave a comment and share them!
&lt;/h1&gt;

&lt;p&gt;Follow me on &lt;a href="https://twitter.com/jordienr"&gt;Twitter&lt;/a&gt; for more.&lt;/p&gt;

</description>
      <category>career</category>
      <category>codenewbie</category>
      <category>webdev</category>
      <category>watercooler</category>
    </item>
  </channel>
</rss>
