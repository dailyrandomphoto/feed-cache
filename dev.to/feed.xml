<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to format HTML code</title>
      <author>GoOnlineTools</author>
      <pubDate>Mon, 06 Dec 2021 15:35:37 +0000</pubDate>
      <link>https://dev.to/goonlinetools/how-to-format-html-code-17j4</link>
      <guid>https://dev.to/goonlinetools/how-to-format-html-code-17j4</guid>
      <description>&lt;p&gt;Are you writing HTML Code? If yes then this article is especially for you because in this article I will show you how to beautify ugly, minified HTML code.&lt;/p&gt;

&lt;p&gt;Most of the people like good looking codes including me because if code is written in a proper manner it is easy to understand.&lt;/p&gt;

&lt;p&gt;Today in this article I will introduce &lt;a href="https://goonlinetools.com/html-formatter/"&gt;HTML Formatter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G-isjSnO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3451plr0yrmdoik4ruv0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G-isjSnO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3451plr0yrmdoik4ruv0.png" alt="Html formatter" width="880" height="406"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#here-is-how-to-format-html-code"&gt;
  &lt;/a&gt;
  Here is How to Format HTML Code?
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;First open &lt;a href="https://goonlinetools.com/html-formatter/"&gt;HTML Formatter&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Click on clear button to clear demo code&lt;/li&gt;
&lt;li&gt;Paste Minified HTML Code&lt;/li&gt;
&lt;li&gt;Click on Format Button&lt;/li&gt;
&lt;li&gt;Now click on copy button to copy formatted HTML Code&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Thanks for reading this article, If you have any questions regarding this then feel free to ask in the comment box.&lt;/p&gt;

&lt;p&gt;Also read : &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/goonlinetools/how-to-share-code-snippets-easily-2m46"&gt;How to share code snippets easily&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/goonlinetools/how-to-beautify-json-code-221e"&gt;How to Beautify JSON Code?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/goonlinetools/how-to-beautify-javascript-code-3ole"&gt;How to Beautify Javascript Code?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/goonlinetools/how-to-beautify-php-code-ahd"&gt;How to Beautify PHP Code?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>html</category>
    </item>
    <item>
      <title>Building The Gatsby Changelog Prototype </title>
      <author>Paul Scanlon</author>
      <pubDate>Mon, 06 Dec 2021 15:22:11 +0000</pubDate>
      <link>https://dev.to/pauliescanlon/building-the-gatsby-changelog-prototype-30bn</link>
      <guid>https://dev.to/pauliescanlon/building-the-gatsby-changelog-prototype-30bn</guid>
      <description>&lt;h1&gt;
  &lt;a href="#hi"&gt;
  &lt;/a&gt;
  Hi 👋
&lt;/h1&gt;

&lt;p&gt;In this post i'll be documenting my journey as i develop a prototype Gatsby Changelog site for the &lt;a href="https://dev.to/t/actionshackathon21"&gt;GitHub Actions Hackathon&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Gatsby Changelog: &lt;a href="https://changelog.gatsbyjs.io/"&gt;changelog.gatsbyjs.io&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Twitter Account: &lt;a href="https://twitter.com/GatsbyChangelog"&gt;@GatsbyChangelog&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#day-5-sunday-5th-december"&gt;
  &lt;/a&gt;
  Day 5 - Sunday 5th December
&lt;/h2&gt;

&lt;p&gt;Had a better day today. I tried again to play with the &lt;code&gt;frontmatter&lt;/code&gt; but still haven't quite worked out what's going on so shifted my focus to some CSS. I have a nice looking site now, the one issue i did encounter is adding the hash links to the sidebar because what i want to happen is when any nav link in the sidebar is clicked the page will scroll to the heading for that release... but i also want each heading to work the same way. I also want to highlight the current nav link in the sidebar.&lt;/p&gt;

&lt;p&gt;This is probably a post on its own but here's the main bit that allows a page to "jump" to a heading.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// gatsby-browser.js&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onRouteUpdate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;location&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jumplink&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;`a.jumplink[href="/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"]`&lt;/span&gt;
  &lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jumplink&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollTo&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;jumplink&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;offsetTop&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;this "jumps" to the &lt;code&gt;offsetTop&lt;/code&gt; of any HTML &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; that has the class name &lt;code&gt;jumplink&lt;/code&gt; and of course, the correct &lt;code&gt;location.hash&lt;/code&gt; E.g&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;
&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"jumplink"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/#v4.2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-lg text-gray-300"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;#&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;v4.2
&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I've got a little more CSS to do today because i'll need a burger menu so that sidebar can open and closed and i'll probably need to adjust some font sizes so this site is usable on "mobile"&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-4-saturday-4th-december"&gt;
  &lt;/a&gt;
  Day 4 - Saturday 4th December
&lt;/h2&gt;

&lt;p&gt;Not a great day today, i was partly walking around NYC trying to find a coffee shop so i could sit down and workout a problem i've having with the &lt;code&gt;frontmatter&lt;/code&gt; contained within each release note. &lt;/p&gt;

&lt;p&gt;Each release note uses &lt;code&gt;frontmatter&lt;/code&gt; which contains a &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;version&lt;/code&gt; number and &lt;code&gt;title&lt;/code&gt;...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="p"&gt;--------&lt;/span&gt;
date: "2021-11-30"
version: "4.3.0"
&lt;span class="gh"&gt;title: "v4.3 Release Notes"
--------
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The trouble is when i use use &lt;a href="https://github.com/remarkjs/remark-rehype"&gt;remark-rehype&lt;/a&gt; each item from the &lt;code&gt;frontmatter&lt;/code&gt; gets converted to either a &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; and really i want to display this information the same way GitHub does, e.g in an HTML &lt;code&gt;table&lt;/code&gt;. I haven't solved this yet so i'll pop it in the backlog and come back to it later. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-3-friday-3rd-december"&gt;
  &lt;/a&gt;
  Day 3 - Friday 3rd December
&lt;/h2&gt;

&lt;p&gt;Today was mainly having a think and trying to workout a few things. It had previously occurred to me that using &lt;a href="https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-transformer-remark"&gt;gatsby-transformer-remark&lt;/a&gt; to transform remotely sourced markdown files might be "taking the long route"... and it turns out it is.&lt;/p&gt;

&lt;p&gt;The reason is that &lt;strong&gt;gatsby-tranfromer-remark&lt;/strong&gt; is great for transforming files or "nodes" that already exists on disk. But, in my case i'm souring markdown from a remote source. In order for the plugin to do &lt;em&gt;it's thing&lt;/em&gt; i have to make GraphQL understand the markdown files are of type "File"&lt;/p&gt;

&lt;p&gt;All of this is completely unnecessary if i transform the markdown nodes to html &lt;strong&gt;before&lt;/strong&gt; i add them to Gatsby's data layer. To achieve this i'll use the same remark transformers the plugin uses. The only slight snag is that a lot of the &lt;code&gt;remark&lt;/code&gt; node modules are ESM only and i need to use them in &lt;code&gt;gatsy-node&lt;/code&gt; which at the time of writing only compiles &lt;code&gt;common.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It's kinda ok for now because i've rolled back the versions of &lt;code&gt;remark&lt;/code&gt; i'm using which will work as &lt;code&gt;cjs&lt;/code&gt;. You can see where the updates to ESM happened by inspecting the commits on each of the repos.  &lt;/p&gt;

&lt;p&gt;Here's the full &lt;code&gt;gatsby-node.js&lt;/code&gt; file showing how i'm currently sourcing remote markdown files and adding them to Gatsby data layer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;gatsby&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;graphql&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@octokit/graphql&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;remark&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;remark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;remarkParse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;remark-parse&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;remarkRehype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;remark-rehype&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rehypeStringify&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rehype-stringify&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;graphqlWithAuth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;graphql&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;authorization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`token &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;OCTOKIT_PERSONAL_ACCESS_TOKEN&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CHANGELOG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;changelog&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;convertToHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;remark&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;remarkParse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;remarkRehype&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rehypeStringify&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sourceNodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createNode&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;createContentDigest&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;folder&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;entries&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;graphqlWithAuth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`
  query {
    repository(name: "gatsby", owner: "gatsbyjs") {
      folder: object(expression: "master:docs/docs/reference/release-notes") {
        ... on Tree {
          entries {
            name
            repository {
              createdAt
            }
            object {
              ... on Tree {
                entries {
                  name
                  object {
                    ... on Blob {
                      id
                      text
                    }
                  }
                }
              }
            }
            object {
              ... on Blob {
                id
                text
              }
            }
          }
        }
      }
    }
  }
  `&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createMarkdownNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;createNode&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createdAt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;html&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;convertToHTML&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="c1"&gt;// this was markdown and is now html&lt;/span&gt;
      &lt;span class="na"&gt;internal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;mediaType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text/markdown&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;CHANGELOG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;contentDigest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;createContentDigest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;repository&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;markdown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;index.md&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;createMarkdownNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;markdown&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;createMarkdownNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#day-2-thursday-2nd-december"&gt;
  &lt;/a&gt;
  Day 2 - Thursday 2nd December
&lt;/h2&gt;

&lt;p&gt;I had a few hours to spare today to investigate how to query GitHub using the GraphQL API. I had a small problem with some of the release-notes markdown files. Specifically ones nested in sub directories. Over time we've moved each &lt;code&gt;.md&lt;/code&gt; into it's own directory and in order to query both &lt;code&gt;.md&lt;/code&gt; at the root of the release-notes dir and sub directories I needed to get a bit creative with GraphQL.&lt;/p&gt;

&lt;p&gt;Here's the query i've settled on. I found it best to try out the query using &lt;a href="https://docs.github.com/en/graphql/overview/explorer"&gt;GitHub's GraphiQL Explorer&lt;/a&gt; before implementing it into my project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;query&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"gatsby"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"gatsbyjs"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="n"&gt;folder&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"master:docs/docs/reference/release-notes/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;on&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Tree&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="n"&gt;entries&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="n"&gt;repository&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="n"&gt;createdAt&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;on&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Tree&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="n"&gt;entries&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                  &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt;
                  &lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;on&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Blob&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                      &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt;
                      &lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
                  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;on&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Blob&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that I can query the data I can iterate over the response and using &lt;a href="https://www.gatsbyjs.com/docs/reference/config-files/actions/#createNode"&gt;createNode&lt;/a&gt; add the markdown / HTML content to Gatsby's Data layer.&lt;/p&gt;

&lt;p&gt;Adding the response data to Gatsby's data layer went ok, the difficulty was converting the sourced nodes which are of type markdown and transforming them to HTML using &lt;a href="https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-transformer-remark"&gt;gatsby-transformer-remark&lt;/a&gt;. Usually if you have &lt;code&gt;.md&lt;/code&gt; &lt;strong&gt;files&lt;/strong&gt; on disk the plugin takes over and transforms the files nodes to HTML, however in my case the response which is of type &lt;code&gt;markdown&lt;/code&gt; doesn't yet exist as a file node, and if it doesn't exist as a file node &lt;code&gt;gatsby-transformer-remark&lt;/code&gt; can't do it's job.&lt;/p&gt;

&lt;p&gt;So there was a quite a bit of work then went into creating the nodes on disk and then ensuring they are of the correct type using Gatsby's &lt;code&gt;createSchemaCustomization&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here's how I create the nodes&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// gatsby-node.js&lt;/span&gt;

&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onCreateNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createNode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;createNodeField&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;createNodeId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;createContentDigest&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;internal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;CHANGELOG&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;markdownNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;createNodeId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="na"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;internal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;mediaType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text/markdown&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;markdown&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;contentDigest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;createContentDigest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="nx"&gt;createNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;markdownNode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;markdownNode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;createNodeField&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;markdownNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;... and here's how i ensure they are of the correct type&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// gatsby-node.js&lt;/span&gt;

&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createSchemaCustomization&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createTypes&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;createTypes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`
    type changelog implements Node {
      text: markdown @link(from: "fields.text")
    }
  `&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is all i need for now, and querying the data from the page component can now be done as i normally would, and here's what that looks like.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// index.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;graphql&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;gatsby&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;allChangelog&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;nodes&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;container mx-auto max-w-5xl grid gap-16 p-8&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createdAt&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;childMarkdownRemark&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-brand-primary text-5xl font-black&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;
              &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;prose lg:prose-xl&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
              &lt;span class="nx"&gt;dangerouslySetInnerHTML&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;__html&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
            &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;})}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/main&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;graphql&lt;/span&gt;&lt;span class="s2"&gt;`
  {
    allChangelog(sort: { fields: repository___createdAt, order: DESC }) {
      nodes {
        name
        repository {
          createdAt
        }
        text {
          childMarkdownRemark {
            html
          }
        }
      }
    }
  }
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Page&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;class&lt;/code&gt; names on the HTML elements are from Tailwind, and if you're looking to add TailwindCSS to your Gatsby site there's an excellent guide in the &lt;a href="https://tailwindcss.com/docs/guides/gatsby"&gt;TailwindCSS Docs&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-1-wednesday-1st-december"&gt;
  &lt;/a&gt;
  Day 1 - Wednesday 1st December
&lt;/h2&gt;

&lt;p&gt;I'm so late to the party but I saw &lt;a href="https://twitter.com/colbyfayock/status/1465502379642699780?s=20"&gt;this Tweet from Colby Fayock&lt;/a&gt; and thought... ah, ha. I wonder if I can cobble something together to demonstrate a Cron Job GitHub Action i've used on a number of projects for the &lt;a href="https://dev.to/devteam/join-us-for-the-2021-github-actions-hackathon-on-dev-4hn4"&gt;GitHub Actions Hackathon&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;I also wondered what kind of project I could build that would best demonstrate why a Cron Job is quite handy as a GitHub Action.&lt;/p&gt;

&lt;p&gt;Then it struck me. We (at Gatsby) have launched a new Twitter Account. It's called &lt;a href="https://twitter.com/GatsbyChangelog"&gt;GatsbyChangelog&lt;/a&gt; and we plan to use it to announce the changes to the Gatsby framework every couple of weeks. Along with the new Twitter Account i'll also be prototyping a Changelog site: &lt;a href="https://changelog.gatsbyjs.io"&gt;https://changelog.gatsbyjs.io&lt;/a&gt;. We have plans to bring more content to support the descriptions contained within the Changelog, but we need a home for this content. &lt;/p&gt;

&lt;p&gt;I plan to build a Gatsby site, hosted on Gatsby Cloud that will source &lt;code&gt;markdown&lt;/code&gt; files from the Gatsby GitHub Account docs folder. The &lt;code&gt;markdown&lt;/code&gt; files within the &lt;a href="https://github.com/gatsbyjs/gatsby/tree/master/docs/docs/reference/release-notes"&gt;release-notes&lt;/a&gt; will be sourced and then rendered to a single page. I'll be using &lt;a href="https://github.com/octokit/graphql.js/"&gt;@octokit/graphql&lt;/a&gt; and a few of Gatsby's data handling methods: &lt;a href="https://www.gatsbyjs.com/docs/reference/config-files/gatsby-node/#sourceNodes"&gt;sourceNodes&lt;/a&gt; and &lt;a href="https://www.gatsbyjs.com/docs/reference/config-files/actions/#createNode"&gt;createNode&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Cron Job Action is kinda crucial for this project because the site will be statically rendered, but in order to ensure the data sourced from the release-notes is always "fresh" I'll use a Cron Job to call a webhook provided by &lt;a href="https://www.gatsbyjs.com/products/cloud/"&gt;Gatsby Cloud&lt;/a&gt; which will re-build the site every 12 hours. I could use Gatsby's newest page rendering method &lt;a href="https://www.gatsbyjs.com/docs/how-to/rendering-options/using-server-side-rendering/"&gt;SSR&lt;/a&gt; to achieve the same thing but this approach it is way more fun! &lt;/p&gt;

</description>
      <category>actionshackathon21</category>
      <category>github</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Using Prisma to Address Connection Pooling Issues in Serverless Environments</title>
      <author>Alexey Klochai</author>
      <pubDate>Mon, 06 Dec 2021 14:57:32 +0000</pubDate>
      <link>https://dev.to/prisma/using-prisma-to-address-connection-pooling-issues-in-serverless-environments-3g66</link>
      <guid>https://dev.to/prisma/using-prisma-to-address-connection-pooling-issues-in-serverless-environments-3g66</guid>
      <description>&lt;p&gt;This article discusses what “serverless” environments are, why developers choose to deploy their apps to them, and how the &lt;a href="https://cloud.prisma.io/"&gt;Prisma Data Platform&lt;/a&gt; solves the problems that can arise regarding database connection pooling.&lt;/p&gt;

&lt;p&gt;Choosing which tools you will use to build your application, and which platform you will be deploying to in production, are early and vital decisions that you will have to make when building a product. &lt;/p&gt;

&lt;p&gt;Using an ORM like &lt;a href="https://www.prisma.io/"&gt;Prisma&lt;/a&gt; speeds up the development process, while serverless hosting reduces the ongoing cost and resource overhead of ensuring your application’s availability to your customers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-prisma"&gt;
  &lt;/a&gt;
  What is Prisma?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.prisma.io/"&gt;Prisma&lt;/a&gt; is a next-generation ORM (&lt;a href="https://en.wikipedia.org/wiki/Object%E2%80%93relational_mapping"&gt;Object-Relational Mapping&lt;/a&gt;) library for Node.js and TypeScript.&lt;/p&gt;

&lt;p&gt;Prisma allows you to build your app in JavaScript or TypeScript and work with your data as objects rather than SQL or NoSQL queries. These objects are mapped to a database using a schema that generates all the types and conversions required to accurately store your objects in your database platform.&lt;/p&gt;

&lt;p&gt;The Prisma toolset includes developer tools for generating database migrations so that your database is always in-sync with your data mode as defined in the &lt;a href="https://www.prisma.io/docs/concepts/components/prisma-schema"&gt;Prisma schema&lt;/a&gt;. In addition, the cloud-based &lt;a href="https://cloud.prisma.io/"&gt;Prisma Data Platform&lt;/a&gt; provides tools like user/role management and a data browser that allow you and your team to collaboratively manage your data online.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Using Prisma in your projects means spending less time worrying about your database, and more time to focus on building your app.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In addition to being a great aid to development, the &lt;a href="https://cloud.prisma.io/"&gt;Prisma Data Platform&lt;/a&gt; discussed in this article makes Prisma a flexible and efficient way to manage database connections for your application with minimal fuss.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-serverless-and-why-do-developers-go-serverless"&gt;
  &lt;/a&gt;
  What is “serverless” and why do developers “go serverless”?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Serverless_computing"&gt;Serverless hosting&lt;/a&gt; is a means of delivering your app to your user without having to build and maintain a server to deploy it to.&lt;/p&gt;

&lt;p&gt;It may sound strange, but it is a cost effective way to deploy applications. Serverless cloud hosting providers like &lt;a href="https://aws.amazon.com/lambda/"&gt;AWS Lambda&lt;/a&gt; and &lt;a href="https://vercel.com/"&gt;Vercel&lt;/a&gt; take care of all of the infrastructure required to run your application.&lt;/p&gt;

&lt;p&gt;Here are some of the top reasons why developers are going serverless.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reduced-infrastructure-requirements"&gt;
  &lt;/a&gt;
  Reduced infrastructure requirements
&lt;/h3&gt;

&lt;p&gt;The hosting provider administers all of the infrastructure required to host your app—maintaining it, keeping it up-to-date, and most importantly, keeping it secure. The provider deals with the day-to-day burdens of hosting.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#streamlined-deployment"&gt;
  &lt;/a&gt;
  Streamlined deployment
&lt;/h3&gt;

&lt;p&gt;With serverless hosting you are provided tools to readily upload, run, and monitor your code. When a request comes in, your code is launched in a container and executed. The serverless environment discards the container when it is no longer needed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reduced-costs"&gt;
  &lt;/a&gt;
  Reduced costs
&lt;/h3&gt;

&lt;p&gt;In addition to the time and resources saved by not having to maintain your own server infrastructure, you also save on the cost of running a full server 24/7. Many serverless hosting providers like AWS and Azure will only bill you for the resources you use.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scalability"&gt;
  &lt;/a&gt;
  Scalability
&lt;/h3&gt;

&lt;p&gt;Serverless hosting offerings like &lt;a href="https://aws.amazon.com/lambda/"&gt;AWS Lambda&lt;/a&gt; and &lt;a href="https://azure.microsoft.com/en-us/services/functions/?cdn=disable"&gt;Azure Functions&lt;/a&gt; can support sustained high load thanks to the cloud providers’ globally distributed infrastructure. In addition, such systems are well-suited for handling bursts of high load amid periods of lower use due to their automatic scaling functionality.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-issues-with-connection-pooling-in-serverless-environments"&gt;
  &lt;/a&gt;
  The issues with “connection pooling” in serverless environments
&lt;/h2&gt;

&lt;p&gt;Any database, serverless or not, has a limit on the number of open connections that it can handle at one time. For each open connection, the database system like &lt;a href="https://www.postgresql.org/"&gt;PostgreSQL&lt;/a&gt; or &lt;a href="http://www.mysql.org/"&gt;MySQL&lt;/a&gt; reserves network, memory, and compute resources so that it’s able to handle any incoming requests through each connection.&lt;/p&gt;

&lt;p&gt;In a serverless environment your code does not run constantly. A user makes a request (whether it’s viewing a webpage or requesting an API resource), and a tiny containerized executing environment (called an instance) running only the code required to serve the request is launched.  The request is served, and the instance is destroyed.&lt;/p&gt;

&lt;p&gt;This is efficient, but there is one problem. In traditional hosting environments with a single server that runs your application,  a single instance of the application can service multiple user requests.&lt;/p&gt;

&lt;p&gt;In a traditional hosting environment a single instance of the application will be managing a &lt;strong&gt;single&lt;/strong&gt; &lt;a href="https://en.wikipedia.org/wiki/Connection_pool"&gt;connection pool&lt;/a&gt; to your database. The connection pool ensures that any database queries are within the connection and timeout limits that you have configured. It coordinates the re-use of database connections and prevents the database server from being overloaded.&lt;/p&gt;

&lt;p&gt;In a serverless environment, a new instance of your code is launched for every user request. Each instance will be unaware of the others, resulting in &lt;strong&gt;multiple&lt;/strong&gt; connection pools. As these separate connection pools are not aware of one another, they cannot coordinate to ensure the database server is not overloaded.&lt;/p&gt;

&lt;p&gt;In a serverless environment, there is no shared connection pool. This creates the risk that a small number of user requests exhaust the database connection limit causing the application to stop working.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CqKCBOTJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cu90f410g7ydf51tym17.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CqKCBOTJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cu90f410g7ydf51tym17.png" alt="Each Serverless function handles one user request which can quickly exceed the database connection limit" width="880" height="705"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#methods-of-dealing-with-with-connection-pooling-issues"&gt;
  &lt;/a&gt;
  Methods of dealing with with connection pooling issues
&lt;/h2&gt;

&lt;p&gt;There are three key ways in which the modern developer can deal with connection pooling issues in a serverless environment.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#external-connection-poolers"&gt;
  &lt;/a&gt;
  External connection poolers
&lt;/h3&gt;

&lt;p&gt;One method is to use an &lt;a href="https://www.prisma.io/docs/guides/performance-and-optimization/connection-management#external-connection-poolers"&gt;external connection pooler&lt;/a&gt;. By moving the task of coordinating database connections outside of your serverless app, an external connection pooler solves the issue of the separate execution instances not being able to coordinate with each other.&lt;br&gt;
Not all database servers have an external connection pooler. If this path you choose to mitigate the issue, you should carefully select which tools and platforms will be used in your project early in the development process.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://cloud.prisma.io/"&gt;Prisma Data Proxy&lt;/a&gt; is an example of an external connection pooler approach.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mdb_PeRe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rt38aa2ho502ld80uvu0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mdb_PeRe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rt38aa2ho502ld80uvu0.png" alt="Serverless with the Prisma Data Proxy" width="880" height="705"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#adjusting-your-code"&gt;
  &lt;/a&gt;
  Adjusting your code
&lt;/h3&gt;

&lt;p&gt;Another method to overcome connection pooling issues is to ensure that your code is &lt;a href="https://www.prisma.io/docs/guides/performance-and-optimization/connection-management#prismaclient-in-serverless-environments"&gt;written in a way&lt;/a&gt; that accounts for the serverless environment in which it will run. Some cloud providers &lt;em&gt;do&lt;/em&gt; reuse resources between requests, so structuring your code so that connections can be maintained between requests is a way to reduce database load. &lt;/p&gt;

&lt;p&gt;However, this approach is limited and will only help alleviate the problem to some degree. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#fine-tuning-your-database-server"&gt;
  &lt;/a&gt;
  Fine tuning your database server
&lt;/h3&gt;

&lt;p&gt;An important step in deploying to a production environment is to monitor and profile your application. Knowing how your application will be used and how busy it will be allows you to determine what resources to allocate. With this information, you can optimize your database connection to reduce the chance of overloading it. For example, you can reduce the connection timeout for inactive connections so that your database is less likely to be spending resources on a connection that’s not going to be used. Another option is to increase the connection limit on the database, but handling more connections will likely require more compute resources.&lt;/p&gt;

&lt;p&gt;In addition to supporting these traditional methods of dealing with connection pooling issues, the Prisma Data Platform introduces a reliable and readily configurable database proxy that solves connection pooling issues—regardless of the database server or database host in use.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#solving-connection-pooling-issues-with-prisma-data-proxy"&gt;
  &lt;/a&gt;
  Solving connection pooling issues with Prisma Data Proxy
&lt;/h2&gt;

&lt;p&gt;Prisma has introduced a new service that effectively solves the connection pooling issue when deploying to serverless environments like AWS Lambda and Vercel.&lt;/p&gt;

&lt;p&gt;The Prisma Data Proxy acts as an intermediary between your application code and the database, effectively acting as an external connection pooler for any &lt;a href="https://www.prisma.io/docs/reference/database-reference/supported-databases"&gt;database supported by Prisma&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#flexible-orm-and-proxy-with-external-connection-pooling"&gt;
  &lt;/a&gt;
  Flexible ORM and proxy with external connection pooling
&lt;/h3&gt;

&lt;p&gt;Using the Prisma Data Proxy solves the connection pooling issue without you having to drastically alter your code or spend extra time tweaking your database connection configuration to account for the serverless environment.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/GWbzyyziH9A"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The Prisma Data Proxy also reduces the size of the data bundle that you must upload to your serverless hosting environment. Many of the database functions are outsourced to the highly performant Prisma Engine binary hosted by the Prisma Data Proxy, so they do not need to be included with your deployment bundle.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#part-of-the-prisma-data-platform"&gt;
  &lt;/a&gt;
  Part of the Prisma Data Platform
&lt;/h3&gt;

&lt;p&gt;The Prisma Data Proxy is part of the &lt;a href="https://www.prisma.io/dataplatform"&gt;Prisma Data Platform&lt;/a&gt;, a cloud based platform that helps manage and collaborate on application data.&lt;/p&gt;

&lt;p&gt;The Prisma Data Platform includes a powerful databas tools to assist you and your team during the development process. This includes the Prisma Query Console, which enables you to view and manage your live data through a simple interface. It allows you to gain insight into how your application is used and to quickly fix any arising data issues.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-benefits-of-serverless-hosting-and-prisma"&gt;
  &lt;/a&gt;
  The benefits of serverless hosting and Prisma
&lt;/h2&gt;

&lt;p&gt;Serverless hosting in combination with the &lt;a href="https://cloud.prisma.io/"&gt;Prisma Data Platform&lt;/a&gt; provides a set of collaborative development and deployment tools for developers who simply want to get on with building their product.&lt;br&gt;
Building and running serverless applications has become a very attractive option for developers due to the reduced resources and costs, and an easier scaling approach.&lt;/p&gt;

&lt;p&gt;However, when developing your application you will have to ensure its suitability to be run in a serverless environment. There is nothing inherently wrong with the serverless concept, but there are differences to traditional hosting configurations that must be considered when coding to deploy in such an environment.&lt;/p&gt;

&lt;p&gt;The Prisma Data Platform is being actively developed to address the challenges of deploying data-intensive apps to modern serverless platforms while allowing you to use the database and database host you are already comfortable with.&lt;/p&gt;

&lt;p&gt;To learn more about databases in the Serverless era and a sneak peak into Prisma's vision for the Prisma Data Platform, check out the talks from the &lt;a href="https://www.prisma.io/serverless"&gt;Prisma Serverless Conference&lt;/a&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#get-started-with-the-prisma-data-platform"&gt;
  &lt;/a&gt;
  Get started with the Prisma Data Platform
&lt;/h3&gt;

&lt;p&gt;The Prisma Data Platform, including the Prisma Data Proxy, is currently available in Early Access.&lt;/p&gt;

&lt;p&gt;Online documentation is available to get you started, so that you are ready to implement the Prisma Data Platform in your project when it is released.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=iyGZ8JFPgoY"&gt;See the Prisma Data Proxy in action&lt;/a&gt; or &lt;a href="https://www.prisma.io/docs/concepts/components/prisma-data-platform#prisma-data-proxy"&gt;learn more about how to easily integrate the Prisma Data Platform into your project&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And if you are ready to try Prisma Data Platform out, &lt;a href="https://www.prisma.io/dataplatform"&gt;get started today&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>serverless</category>
      <category>database</category>
    </item>
    <item>
      <title>How to Get In the Recursive Mindset</title>
      <author>Karson Kalt</author>
      <pubDate>Mon, 06 Dec 2021 14:46:53 +0000</pubDate>
      <link>https://dev.to/karsonkalt/how-to-get-in-the-recursive-mindset-1lnk</link>
      <guid>https://dev.to/karsonkalt/how-to-get-in-the-recursive-mindset-1lnk</guid>
      <description>&lt;p&gt;Like most new programmers, as I began to study data structures and algorithms, I struggled to grasp recursive approaches to solving algo challenges. When I saw the recursive functions, I could easily understand how they worked, but when asked to write them myself, I struggled to break down problems with a recursive approach.&lt;/p&gt;

&lt;p&gt;In this post, my goal is not to explain what recursion is, but instead to break down how to solve a problem using a recursive approach. Let's start with some simple tips about recursive functions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tips-for-writing-recursive-functions"&gt;
  &lt;/a&gt;
  Tips for writing recursive functions.
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Solve the problem with an iterable approach&lt;/li&gt;
&lt;li&gt;Identify the base case&lt;/li&gt;
&lt;li&gt;Look for patterns in the expected returns&lt;/li&gt;
&lt;li&gt;Refactor iterative loop with a recursive call with a smaller input&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The &lt;a href="https://en.wikipedia.org/wiki/Church%E2%80%93Turing_thesis#:~:text=It%20states%20that%20a%20function,the%20British%20mathematician%20Alan%20Turing"&gt;Church-Turing thesis&lt;/a&gt; states that we can solve any recursive problem with an iterable approach. As we begin trying to get in the recursive mindset, it's usually easier for us to break down a problem declaring variables and loops, then refactoring towards a recursive solution.&lt;/p&gt;

&lt;p&gt;The base case is the lowest level of our function. This is the case at which we have reached the end and need to return something. When trying to solve a recursive problem, try to avoid breaking the problem all the way down from the largest input, and instead think &lt;em&gt;"What is the smallest input this function could receive"&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rules-of-recursive-functions"&gt;
  &lt;/a&gt;
  Rules of Recursive Functions
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;A recursive function will always have two or more returns&lt;/li&gt;
&lt;li&gt;The recursive call needs to be returned&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/karsonkalt/building-efficient-algorithms-using-memoization-and-closures-in-javascript-5pj"&gt;Locally defined variables will be re-defined in the scope of each recursive call.&lt;/a&gt; Closures will keep variables bound to the outer scope of the recursive function.&lt;/li&gt;
&lt;li&gt;The base case should be returned before the recursive case&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Knowing these tips and rules, we can define a fairly simple template for most recursive functions. In this blog post, I'm going to be using javascript.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#recursive-function-template"&gt;
  &lt;/a&gt;
  Recursive Function Template
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;recursiveFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Base Case&lt;/span&gt;
  &lt;span class="c1"&gt;// If we passed it the smallest input, what should be returned?&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;baseCaseConditional&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;baseCaseReturn&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Recursive Case&lt;/span&gt;
  &lt;span class="c1"&gt;// Returns the function itself with a smaller input&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;recursiveFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#our-first-example"&gt;
  &lt;/a&gt;
  Our First Example
&lt;/h2&gt;

&lt;p&gt;Let's write a simple function that runs five times, and after that returns the string &lt;code&gt;"done"&lt;/code&gt;. Following our tips from above, we first try to solve with an iterable approach.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;countToNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
   &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;done&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What is the &lt;strong&gt;base case&lt;/strong&gt; for this problem? At the end of our recursive call or iterable loop, what should we be returning? In this case, once the counter is equal to 5, we want to return &lt;code&gt;"done"&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;countToNum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;done&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Following our tips defined above, we return our base case before our recursive case and move locally scoped variables outside of the recursive function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;countToFive&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;done&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;countToFive&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#factorial-example"&gt;
  &lt;/a&gt;
  Factorial Example
&lt;/h2&gt;

&lt;p&gt;Let's try a problem that is a bit more challenging. Let's define a function that takes an argument &lt;code&gt;n&lt;/code&gt; and returns the factorial of that number.&lt;/p&gt;

&lt;p&gt;For example, if we call &lt;code&gt;factorial(5)&lt;/code&gt;, we should receive &lt;code&gt;5 * 4 * 3 * 2 * 1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Let's first think about our base case, remember we want to think of the most simple input we could receive in our function. Instead of starting from a large input and trying to break down the recursive calls, let's &lt;em&gt;build from the smallest input up&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The simplest input our function could receive is an &lt;code&gt;n&lt;/code&gt; of &lt;code&gt;1&lt;/code&gt;, so let's first define the return of the base case.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Base Case&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Recursive Case&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What is the recursive case in this function, as we look at our example of &lt;code&gt;n = 5&lt;/code&gt;, let's look at the expected output and see if we see any patterns.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;5 * 4 * 3 * 2 * 1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;As we work our way &lt;em&gt;up from our base case&lt;/em&gt;, do we see any patterns?&lt;/p&gt;

&lt;p&gt;&lt;code&gt;1&lt;/code&gt;&lt;br&gt;
&lt;code&gt;2 * 1&lt;/code&gt;&lt;br&gt;
&lt;code&gt;3 * 2 * 1&lt;/code&gt;&lt;br&gt;
&lt;code&gt;4 * 3 * 2 * 1&lt;/code&gt;&lt;br&gt;
&lt;code&gt;5 * 4 * 3 * 2 * 1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;As our &lt;code&gt;n&lt;/code&gt; grows, we can see the pattern between each number is &lt;code&gt;n * n-1 * n-2 ...&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To follow along with a more complex example, check out my blog post &lt;a href="https://dev.to/karsonkalt/building-efficient-algorithms-using-memoization-and-closures-in-javascript-5pj"&gt;Building efficient algorithms using memoization and closures in JavaScript&lt;/a&gt; that builds out a recursive function that returns the fibonacci number of &lt;code&gt;n&lt;/code&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>Ugly Sweater CSS: The Imperial Logo</title>
      <author>Chris Jarvis</author>
      <pubDate>Mon, 06 Dec 2021 14:46:40 +0000</pubDate>
      <link>https://dev.to/jarvisscript/ugly-sweater-css-the-imperial-logo-33p9</link>
      <guid>https://dev.to/jarvisscript/ugly-sweater-css-the-imperial-logo-33p9</guid>
      <description>&lt;p&gt;Last year I made CSS ugly sweaters based off of Star Wars characters. Some of those were minifigures included in the LEGO Star Wars Advent calendar. I'm not sure if there are sweaters in this year's advent. But Hallmark has released LEGO Minifigure ornaments with ugly sweaters. The ornaments are available at Hallmark stores and online.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9kMT6eJa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z5bzbnyfnbsjwbgzhyev.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9kMT6eJa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z5bzbnyfnbsjwbgzhyev.jpg" alt="LEGO Darth Vader wearing a red sweater with the Death Star on it." width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Darth Vader ornament is a larger version of the figure from last year's advent calendar. I did the sweater with &lt;a href="https://dev.to/jarvisscript/ugly-sweater-css-that-s-no-moon-l7g"&gt;this post&lt;/a&gt;. There also is a new figure, a Stormtrooper wearing a sweater with the Imperial Crest. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vf_VTnlD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8d2uwxcpw095jw1sz2sk.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vf_VTnlD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8d2uwxcpw095jw1sz2sk.jpg" alt="LEGO Stormtrooper wearing&amp;lt;br&amp;gt;
 a blue sweater. The sweater has the imperial crest on it" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I reused the basic sweater HTML from last year. I changed the colors to match the new blue sweater. A previous version of the sweater is in &lt;a href="https://dev.to/jarvisscript/return-of-css-halloween-4idg"&gt;this post.&lt;/a&gt; I won't go into much detail here. Below is what the final image looked like. I just changed the colors.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--522VvmBr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/a0znzci2r1kjq0rcyixp.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--522VvmBr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/a0znzci2r1kjq0rcyixp.jpg" alt="red christmas sweater with death star" width="471" height="470"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Main sweater to blue&lt;/li&gt;
&lt;li&gt;Boxes to blue and white&lt;/li&gt;
&lt;li&gt;Stitching to black.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I'm learning CSS variables, so I'm trying them in the code this time.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--sweaterblue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#558fbf&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.imperialCrest&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--sweaterblue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's the basic torso. I placed a character div in that torso. Inside the character div is a div for a specific character for this post it has a class of Imperial Crest.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-the-crest"&gt;
  &lt;/a&gt;
  Add the Crest
&lt;/h2&gt;

&lt;p&gt;I started the Crest with a big circle with a background of &lt;code&gt;--sweaterblue&lt;/code&gt; and a border of black &lt;code&gt;#000000&lt;/code&gt;. The blue matches the blue from the main sweater background. But it sweater has stars as a background image. The inside of the crest is solid blue.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZPalofls--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bhtnzth81sgvhpv15vtj.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZPalofls--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bhtnzth81sgvhpv15vtj.jpg" alt="large black ring on blue back ground" width="880" height="383"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"torso"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; 
   &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"character"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"imperialCrest"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;  
   &lt;span class="nt"&gt;&amp;lt;/div&lt;/span&gt; &lt;span class="err"&gt;character&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--sweaterblue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#558fbf&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.imperialCrest&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--sweaterblue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;300px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;300px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;12px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#add-circles"&gt;
  &lt;/a&gt;
  Add circles
&lt;/h2&gt;

&lt;p&gt;Next I added two circles inside the main ring.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ndwWDeM_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/078g9h501x1ktrey8s42.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ndwWDeM_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/078g9h501x1ktrey8s42.jpg" alt="A large black ring, inside it a black circle, with a small blue circle in the center" width="880" height="388"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"imperialCrest"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;  
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"bigCircle"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"centerCircle"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.bigCircle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;260px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;260px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.centerCircle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--sweaterblue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#struts-and-spokes"&gt;
  &lt;/a&gt;
  Struts and Spokes
&lt;/h2&gt;

&lt;p&gt;Right now it just looks like circles. But after adding some shapes, the logo will appear. The process for the rest of the build follows this pattern; build a shape, get sizes approximately right, duplicate the shape, modify the sizes and shape as the copies are moved around.&lt;/p&gt;

&lt;p&gt;First I made some black struts. The first one was vertical. Then used &lt;code&gt;transform: rotate(xxdeg);&lt;/code&gt; to change the angle of the right and left struts. Since I'm building around a symmetrical circle, once I have the placement for the left side all I have to do is give the right side the opposite number. Left is 60degress, so right side is -60 degrees. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bNahH9x4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xpuwitgqltbx2tue2tem.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bNahH9x4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xpuwitgqltbx2tue2tem.jpg" alt="A large black ring, inside it a black circle, with a small blue circle in the center. There is a vertical line and an X in the center of the ring." width="880" height="356"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"struts vertical"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"struts diagonalLeft"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"struts diagonalRight"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.struts&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.diagonalLeft&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;60deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.diagonalRight&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-60deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next I made some trapezoid blocks where the struts meet the black circle. To make a trapezoid with CSS you make a square using borders, give one side a color make the other sides transparent. Add some width or height and background color to the item. It took a while had to adjust margins to get placement right. I used dev tools to select the element and adjust their positions in the browser.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"block top"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"block lefttop"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"block leftbottom"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"block righttop"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"block rightbottom"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"block bottom"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.block&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nl"&gt;border-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-top-right-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-top-left-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.top&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-210px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.bottom&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-210px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;180deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tn4jfEoJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j877uwmr646kdfv3gy7g.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tn4jfEoJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j877uwmr646kdfv3gy7g.jpg" alt="A large black ring, inside it a black circle, with a small blue circle in the center. There is a vertical line and a X in the center of the ring. Where the line and black circle meet are retangles" width="880" height="389"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next I added blue spokes made of of an hourglass shape. The hourglass is made of two elongated triangles. In CSS triangles are made by building a rectangle with borders but no background. The top and bottom borders have color, the sides are usually transparent. To make it easy to see here, I gave the left and right a color of white and removed the blue circle. In final project the sides will be transparent and not seen. The points will blend into the circle.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PokBtK5K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ua5h2zq80twt391cox4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PokBtK5K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ua5h2zq80twt391cox4.jpg" alt="Large rectangle. made of four rectangle. top and bottom are blue. right and left are white." width="880" height="382"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Made one in center then two more using same transform: rotate attributes as the spikes. So they cross like an X in the center of the circle.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Odd thing&lt;/strong&gt; here When viewed on Firefox, the rotated blue spokes have a thin black line through the center. It doesn't show on Chrome. I used dev tools to change the black items under the spoke to other colors but there still was a black line on the blue. &lt;/p&gt;

&lt;p&gt;Any CSS or browser experts out there know what's going on?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-look"&gt;
  &lt;/a&gt;
  Final Look
&lt;/h2&gt;

&lt;p&gt;Here's the final look with the all the spokes. it now looks like the Imperial Crest from the sweater. I was extremely happy when I refreshed the browser and saw this final image.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HKllh2hb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2e7hckmgca7xb75jnnf1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HKllh2hb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2e7hckmgca7xb75jnnf1.jpg" alt="The Imperial Crest worm by the empire in Star Wars" width="880" height="387"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vf_VTnlD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8d2uwxcpw095jw1sz2sk.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vf_VTnlD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8d2uwxcpw095jw1sz2sk.jpg" alt="LEGO Stormtrooper wearing&amp;lt;br&amp;gt;
 a blue sweater. The sweater has the imperial crest on it" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--tZLqoEkr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1399757053418250241/SIPAzZXz_normal.jpg" alt="Chris Jarvis | Fullstack Developer | Documentation profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Chris Jarvis | Fullstack Developer | Documentation
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/jarvisscript"&gt;@jarvisscript&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      I made The Imperial Logo Ugly Sweater with CSS.&lt;br&gt;&lt;br&gt;"Ugly Sweater CSS: The Imperial Logo" by &lt;a href="https://twitter.com/JarvisScript"&gt;@JarvisScript&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/DEVCommunity"&gt;#DEVCommunity&lt;/a&gt; &lt;a href="https://t.co/6J8KBAb7Em"&gt;dev.to/jarvisscript/u…&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      14:53 PM - 06 Dec 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1467869854124462081" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1467869854124462081" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1467869854124462081" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


</description>
      <category>css</category>
      <category>frontend</category>
      <category>tutorial</category>
      <category>art</category>
    </item>
    <item>
      <title>NEW: DynamoDB Streams Filtering in Serverless Framework</title>
      <author>Pawel Zubkiewicz</author>
      <pubDate>Mon, 06 Dec 2021 14:19:12 +0000</pubDate>
      <link>https://dev.to/aws-builders/new-dynamodb-streams-filtering-in-serverless-framework-3lc5</link>
      <guid>https://dev.to/aws-builders/new-dynamodb-streams-filtering-in-serverless-framework-3lc5</guid>
      <description>&lt;p&gt;From this article, you will learn how to utilize recently released functionality of Streams Filtering with DynamoDB and Lambda. &lt;/p&gt;

&lt;p&gt;We will move deeper than a basic sample of DynamoDB event action filtering. You will learn how to combine it with your business logic. I will be using DynamoDB &lt;em&gt;single-table&lt;/em&gt; design setup for that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-new"&gt;
  &lt;/a&gt;
  What's new?
&lt;/h2&gt;

&lt;p&gt;If you haven't heard, just before #reInvent2021 AWS dropped &lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/11/aws-lambda-event-filtering-amazon-sqs-dynamodb-kinesis-sources/"&gt;this huge update&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-changed"&gt;
  &lt;/a&gt;
  What's changed?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#before-the-update"&gt;
  &lt;/a&gt;
  Before the update
&lt;/h3&gt;

&lt;p&gt;Every action made in a DynamoDB table (&lt;code&gt;INSERT&lt;/code&gt;, &lt;code&gt;MODIFY&lt;/code&gt;, &lt;code&gt;REMOVE&lt;/code&gt;) triggered an event that was sent over DynamoDB Streams to a Lambda function. Regardless of the action type, a Lambda function was always invoked. That had two repercussions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You had to implement filter logic inside your Lambda code (&lt;code&gt;if&lt;/code&gt; conditions) before executing your business logic (i.e. filter &lt;code&gt;INSERT&lt;/code&gt; actions to send welcome email whenever new &lt;code&gt;User&lt;/code&gt; was added into the table). &lt;/li&gt;
&lt;li&gt;You paid for every Lambda run, even though in most cases you were interested only in &lt;em&gt;some&lt;/em&gt; events.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That situation was multiplied in &lt;em&gt;single-table&lt;/em&gt; design, where you store multiple types in a single table, so in reality you have many &lt;code&gt;INSERT&lt;/code&gt;s with subtypes (ie. new user, new address, new order etc.)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#after-the-update"&gt;
  &lt;/a&gt;
  After the update
&lt;/h3&gt;

&lt;p&gt;Now, &lt;strong&gt;you can filter out events that are not relevant to your business logic&lt;/strong&gt;. By defining &lt;em&gt;filter criteria&lt;/em&gt;, you control which events can invoke a Lambda function. Filtering evaluates events based on values that are in the message.&lt;/p&gt;

&lt;p&gt;This solves above-mentioned problems: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Logic evaluation is pushed on AWS (no more &lt;code&gt;if&lt;/code&gt;s in Lambda code)&lt;/li&gt;
&lt;li&gt;No more needless Lambda execution.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of that thanks to the small JSON snippet defining &lt;em&gt;filter criteria&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#refactoring-to-the-streams-filtering"&gt;
  &lt;/a&gt;
  Refactoring to the Streams Filtering
&lt;/h2&gt;

&lt;p&gt;Since you're reading this article, it's safe to assume you're like me, already using DynamoDB Streams to invoke your Lambda functions.&lt;/p&gt;

&lt;p&gt;Therefor, let me take you through the refactoring process. It's a simplified version of the code that I use on production. &lt;/p&gt;

&lt;p&gt;In my DynamoDB table, I store two types of entities: &lt;code&gt;Order&lt;/code&gt; and &lt;code&gt;Invoice&lt;/code&gt;. My &lt;em&gt;business logic&lt;/em&gt; requires me to &lt;em&gt;do something&lt;/em&gt; only when &lt;code&gt;Invoice&lt;/code&gt; is modified. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nQhVBrok--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yj72f9jku4yw9r5rppu4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nQhVBrok--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yj72f9jku4yw9r5rppu4.png" alt="Business logic conditions" width="570" height="131"&gt;&lt;/a&gt;&lt;br&gt;
As you can see, it's just the single case out of six. Imagine what happens when you have more types in your table, and your business logic requires you to perform other actions as well.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#old-event-filtering"&gt;
  &lt;/a&gt;
  Old event filtering
&lt;/h3&gt;

&lt;p&gt;Let's start from those ugly &lt;code&gt;if&lt;/code&gt; statements that I had before the update because I had to manually filter events. &lt;/p&gt;

&lt;p&gt;My Lambda's handler started with execution of &lt;code&gt;parseEvent&lt;/code&gt; method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;parseEvent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Records&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// batch size = 1&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isInsert&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;INSERT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isModify&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;MODIFY&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isOrder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dynamodb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewImage&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;S&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Order&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isInvoice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dynamodb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewImage&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;S&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Invoice&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newItemData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dynamodb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewImage&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;oldItemData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dynamodb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;OldImage&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;isInsert&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isModify&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isOrder&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isInvoice&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newItemData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;oldItemData&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next step, I had to evaluate the condition in my handler:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;isInsert&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isModify&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isOrder&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isInvoice&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newItemData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;oldItemData&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;parseEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isModify&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;isInvoice&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// perform business logic&lt;/span&gt;
  &lt;span class="c1"&gt;// uses newItemData &amp;amp; oldItemData values&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#new-event-filtering"&gt;
  &lt;/a&gt;
  New event filtering
&lt;/h3&gt;

&lt;p&gt;New functionality allows us to significantly simplify that code by pushing condition evaluation on AWS.&lt;/p&gt;

&lt;p&gt;Just to recap, my business logic requires me to let in only &lt;code&gt;MODIFY&lt;/code&gt; events that was performed on &lt;code&gt;Invoice&lt;/code&gt; entities. Fortunately, I keep &lt;code&gt;Type&lt;/code&gt; value on my entities in DynamoDB Table (thanks Alex 🤝).&lt;/p&gt;

&lt;p&gt;The DynamoDB event structure is well-defined, so basically what I need to do is make sure that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;eventName&lt;/code&gt; equals to &lt;code&gt;MODIFY&lt;/code&gt;, and&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;dynamodb.NewImage.Type.S&lt;/code&gt; equals to &lt;code&gt;Invoice&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of that is defined in &lt;code&gt;filterPatterns&lt;/code&gt; section of Lambda configuration. Below is a snippet from Serverless Framework &lt;code&gt;serverless.yml&lt;/code&gt; config file. Support for &lt;code&gt;filterPatterns&lt;/code&gt; was introduced in version 2.68.0 - make sure you are using it  or newer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;    &lt;span class="na"&gt;functionName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;src/functionName/function.handler&lt;/span&gt;
      &lt;span class="c1"&gt;# other properties&lt;/span&gt;
      &lt;span class="na"&gt;events&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;stream&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;dynamodb&lt;/span&gt;
          &lt;span class="na"&gt;arn&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!GetAtt&lt;/span&gt; &lt;span class="s"&gt;DynamoDbTable.StreamArn&lt;/span&gt;
          &lt;span class="na"&gt;maximumRetryAttempts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
          &lt;span class="na"&gt;batchSize&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
          &lt;span class="na"&gt;filterPatterns&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;eventName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;MODIFY&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
              &lt;span class="na"&gt;dynamodb&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                 &lt;span class="na"&gt;NewImage&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                   &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                     &lt;span class="na"&gt;S&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;Invoice&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's all you need to do to filter your DynamoDB Stream.&lt;/p&gt;

&lt;p&gt;Amazing, isn't it?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#gotchas"&gt;
  &lt;/a&gt;
  Gotchas
&lt;/h2&gt;

&lt;p&gt;Bear in mind that there can be several filters on a single source. In such case, each filter works independently of the other. Simply put, there is &lt;code&gt;OR&lt;/code&gt; not &lt;code&gt;AND&lt;/code&gt; logic between them.&lt;/p&gt;

&lt;p&gt;I learned that the hard way by mistakenly creating two filters:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;          &lt;span class="na"&gt;filterPatterns&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;eventName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;MODIFY&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;dynamodb&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                 &lt;span class="na"&gt;NewImage&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                   &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                     &lt;span class="na"&gt;S&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;Invoice&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;by adding &lt;code&gt;-&lt;/code&gt; in front of &lt;code&gt;dynamodb:&lt;/code&gt;. It resulted in the wrong filter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"filters"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"pattern"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"{&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;eventName&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;:[&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;MODIFY&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;]}"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"pattern"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"{&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;dynamodb&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;:{&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;NewImage&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;:{&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;Type&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;:{&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;S&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;:[&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;Invoice&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;]}}}}"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That one catches all &lt;code&gt;MODIFY&lt;/code&gt; actions OR anything that has &lt;code&gt;Invoice&lt;/code&gt; as &lt;code&gt;Type&lt;/code&gt; in &lt;code&gt;NewImage&lt;/code&gt; object, so DynamoDB &lt;code&gt;INSERT&lt;/code&gt; actions as well!&lt;/p&gt;

&lt;p&gt;Correct filter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"filters"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"pattern"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"{&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;eventName&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;:[&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;MODIFY&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;],&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;dynamodb&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;:{&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;NewImage&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;:{&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;Type&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;:{&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;S&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;:[&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;Invoice&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;]}}}}"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can view filter in Lambda console, under &lt;em&gt;Configuration-&amp;gt;Triggers&lt;/em&gt; section.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-much-does-it-cost"&gt;
  &lt;/a&gt;
  How much does it cost?
&lt;/h2&gt;

&lt;p&gt;Nothing. &lt;/p&gt;

&lt;p&gt;There is no information about any additional pricing. Also, Jeremy Daly confirmed that during re:Invent 2021.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8N8eEBfw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1130500247753506816/r7DrtNlg_normal.png" alt="Jeremy Daly profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Jeremy Daly
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/jeremy_daly"&gt;@jeremy_daly&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/NoSQLKnowHow"&gt;@NoSQLKnowHow&lt;/a&gt; Do you know how the pricing will work for this? The Lambda PMs told me that each function needs to consume the stream in order to do the filtering, so do we get charged DynamoDB Streams read request units for everything pulled off the stream, or just what gets filtered?
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      20:09 PM - 01 Dec 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1466137340565278721" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1466137340565278721" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1466137340565278721" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8N8eEBfw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1130500247753506816/r7DrtNlg_normal.png" alt="Jeremy Daly profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Jeremy Daly
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/jeremy_daly"&gt;@jeremy_daly&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/NoSQLKnowHow"&gt;@NoSQLKnowHow&lt;/a&gt; Confirmed with &lt;a href="https://twitter.com/ajaynairthinks"&gt;@ajaynairthinks&lt;/a&gt; that the Lambda Service eats the polling cost, so you only get charged for what makes it into your function.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      22:24 PM - 01 Dec 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1466171465733062657" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1466171465733062657" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1466171465733062657" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;In reality, &lt;strong&gt;this functionality saves you money on maintenance because it's easier to write &amp;amp; debug Lambda code, and on operations, as functions are executed only responding to business relevant events&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#low-coupling"&gt;
  &lt;/a&gt;
  Low coupling
&lt;/h2&gt;

&lt;p&gt;Before the update, people implemented event filtering logic in a single Lambda function. Thus, struggling from high coupling (unless they utilized some kind of dispatcher pattern).&lt;/p&gt;

&lt;p&gt;Now, we can have several independent Lambda functions, each with its &lt;em&gt;filter criteria&lt;/em&gt;, attached to the same DynamoDB Stream. That results in lower coupling between code that handles different event types. This will be very much appreciated by all &lt;em&gt;single-table&lt;/em&gt; design practitioners.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;I hope this short article convinced you to refactor your Lambda functions that are invoked by DynamoDB Streams. It's really simple and makes a huge difference in terms of code clarity and costs. &lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloudnative</category>
      <category>dynamodb</category>
      <category>serverless</category>
    </item>
    <item>
      <title>3 Ways to Backup Your Code (Even If You Don’t Know Git)</title>
      <author>Rizèl Scarlett</author>
      <pubDate>Mon, 06 Dec 2021 14:17:35 +0000</pubDate>
      <link>https://dev.to/github/3-ways-to-backup-your-code-even-if-you-dont-know-git-1o5l</link>
      <guid>https://dev.to/github/3-ways-to-backup-your-code-even-if-you-dont-know-git-1o5l</guid>
      <description>&lt;p&gt;Today, over 73 million software engineers around the globe use GitHub. While GitHub provides many benefits, including project management, open source collaboration, and automation, early career developers often sign up to host their code and visualize the changes they make over time. Personally, I choose to upload my code to GitHub because:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It reduces the risk of losing my code. If I only stored my code on a local computer and that computer stopped working, I’d lose my work forever.  My code is always accessible to me with GitHub regardless of what computer I’m using.&lt;/li&gt;
&lt;li&gt;It helps me land jobs. GitHub serves as my portfolio for hiring managers and talent sources to gauge my technical expertise better. After graduating from my coding boot camp, GitHub was especially conducive to my job search because I lacked professional software engineering experience.&lt;/li&gt;
&lt;li&gt;It helps me collaborate on projects. Back in the day, before Git and version control (a.k.a. the process of saving different files or ‘versions’ throughout the various stages of a project) existed, people shared their code via email, floppy disk, and other tedious mediums. Today, with tools like GitHub, you can share your code and visually track changes made by each collaborator. I can also communicate with collaborators through comments and GitHub Discussions. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A common way to interface with GitHub is through Git and the terminal. Because Git and the terminal have such a steep learning curve, some developers, especially early career developers, avoid using GitHub. &lt;strong&gt;But what if I told you, you could use GitHub to store your programming projects without the command line?&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-difference-between-git-and-github"&gt;
  &lt;/a&gt;
  The Difference Between Git and GitHub
&lt;/h2&gt;

&lt;p&gt;Before I describe the various techniques for leveraging GitHub without Git, I want to clarify the difference between the two tools.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#git"&gt;
  &lt;/a&gt;
  Git
&lt;/h3&gt;

&lt;p&gt;In layman’s terms, Git records snapshots of your projects as you save the changes you make throughout history. This allows developers to confidently return to a past version of a project if they make a mistake or discover a problem. To use it, people install Git on their local computers, and in their terminals, they type commands such as &lt;code&gt;git add&lt;/code&gt;, &lt;code&gt;git commit&lt;/code&gt;, and &lt;code&gt;git push&lt;/code&gt; to save their latest changes. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#github"&gt;
  &lt;/a&gt;
  GitHub
&lt;/h3&gt;

&lt;p&gt;At its core, GitHub is a web-based platform for developers to store code on the cloud. It is also available as a mobile app and desktop app.Through the graphical user interface, developers can use GitHub to work with developers worldwide. Over the years, GitHub expanded its offerings to include project management, automation, deployment, security, and more.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;GitHub incorporates Git’s version control features to make collaboration easier.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#backup-your-code-without-the-command-line"&gt;
  &lt;/a&gt;
  Backup Your Code Without The Command Line
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-github-desktop"&gt;
  &lt;/a&gt;
  1. GitHub Desktop
&lt;/h3&gt;

&lt;p&gt;GitHub Desktop is a desktop application with a graphical user interface that allows you to retrieve, edit, and save code to GitHub without touching your terminal. Read the official &lt;a href="https://docs.github.com/en/desktop"&gt;documentation&lt;/a&gt; to learn more about installing, configuring, and using GitHub Desktop.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-githubs-web-user-interface"&gt;
  &lt;/a&gt;
  2. GitHub’s Web User Interface
&lt;/h3&gt;

&lt;p&gt;You can upload, edit, and find files directly from GitHub.com without downloading the files or navigating the terminal. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Option 1&lt;/strong&gt;:  You can edit the files directly at GitHub.com after uploading them.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Option 2&lt;/strong&gt;: You can edit your files on your local computer, drag and drop your entire folder, and GitHub will “auto-magically” determine which files were changed and only upload the edited files.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_KnBnBHF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.blog/wp-content/uploads/2016/02/a888b59e-d004-11e5-80a6-e9f32f17c4d5.gif%3Fresize%3D2640%252C1594" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_KnBnBHF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.blog/wp-content/uploads/2016/02/a888b59e-d004-11e5-80a6-e9f32f17c4d5.gif%3Fresize%3D2640%252C1594" alt="Image of managing source control in web based editor" width="880" height="531"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-githubdev"&gt;
  &lt;/a&gt;
  3. GitHub.dev
&lt;/h3&gt;

&lt;p&gt;You can find GitHub’s free, web-based editor at &lt;a href="https://github.dev"&gt;https://github.dev&lt;/a&gt;. The web-based editor introduces a lightweight editing experience that runs entirely in your browser. With the web-based editor, you can navigate files and source code repositories from GitHub, and make and commit code changes. You can open any repository, fork, or pull request in the editor. Read the official &lt;a href="https://docs.github.com/en/codespaces/the-githubdev-web-based-editor"&gt;documentation&lt;/a&gt; editing and saving files via github.dev. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I77nLq1G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.github.com/assets/images/help/codespaces/codespaces-commit-commit-message.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I77nLq1G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.github.com/assets/images/help/codespaces/codespaces-commit-commit-message.png" alt="Image description" width="880" height="417"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Even if you don’t know Git or feel intimidated by the terminal, you can still use GitHub to back up your code, track changes, and build your portfolio. Of course, as your skills grow and you land a new role, your employer may prefer that you use Git. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Over the next few weeks, I’ll share tips about Git and GitHub that I’ve learned and continue to learn throughout my career in tech. Give me a follow to avoid missing my upcoming blog posts!! Let’s grow together and become version control pros!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>github</category>
      <category>git</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>How to Write an Awesome Cover Letter As a Software Engineer</title>
      <author>Shaheer</author>
      <pubDate>Mon, 06 Dec 2021 14:06:07 +0000</pubDate>
      <link>https://dev.to/shaheer912/how-to-write-an-awesome-cover-letter-as-a-software-engineer-4np1</link>
      <guid>https://dev.to/shaheer912/how-to-write-an-awesome-cover-letter-as-a-software-engineer-4np1</guid>
      <description>&lt;p&gt;Cover letters are often overlooked in today’s job market, but they play a crucial role in your job search. A cover letter can be the difference between getting an interview or not. While there is no one way to write a perfect cover letter, there are some important things to keep in mind when writing one. It should reflect your unique skills and abilities. It should also show that you have researched the company and position and that you would be a good fit for them. The following tips will help you write the perfect cover letter as a software engineer:&lt;/p&gt;

&lt;p&gt;1) Include both professional and personal information about yourself- this includes your education, experience, and accomplishments&lt;/p&gt;

&lt;p&gt;2) Address specific requirements such as key words or skills&lt;/p&gt;

&lt;p&gt;3) Show enthusiasm for the company and position&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-a-cover-letter"&gt;
  &lt;/a&gt;
  What is a cover letter?
&lt;/h1&gt;

&lt;p&gt;A cover letter is a professional business letter, which introduces you to a potential employer, and explains why you are the best candidate for the job.&lt;/p&gt;

&lt;p&gt;It should briefly summarize your work experience, skills, qualifications, and career goals. It should also include how you learned about the position and what attracted you to it. When writing a cover letter, it's important that it be tailored to the specific company or position.&lt;/p&gt;

&lt;p&gt;There are many variations of cover letters- some people prefer to write one paragraph, while others may write two paragraphs. The length of your letter can depend on whether or not you're applying for an internship or experienced in your field.&lt;/p&gt;

&lt;p&gt;The content of your letter will vary depending on the type of job you're applying for- for example if you're applying for an entry level position, this would be different than if you were applying for a management position.&lt;/p&gt;

&lt;p&gt;However, there are some key points that remain relevant across all jobs:&lt;br&gt;
1) Include both professional and personal information about yourself- this includes your education, experience, and accomplishments&lt;/p&gt;

&lt;p&gt;2) Address specific requirements such as key words or skills (such as tech stack, languages, data structures and algorithms, i.e if you are applying for Google, you may need to know algorithms for handling big data, if you are applying for adobe, you may need to know algorithms for image handling/processing)&lt;/p&gt;

&lt;p&gt;3) Show enthusiasm for the company and position&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-do-employers-care-about-cover-letters"&gt;
  &lt;/a&gt;
  Why do employers care about cover letters?
&lt;/h1&gt;

&lt;p&gt;Employers often notice when someone sends in a cover letter. They see it as a sign that you are interested in the position, and it also gives them an opportunity to get to know you better before deciding whether to interview you or not. But what is the point of having a cover letter? It should be professional, concise, accurate, and personalized.&lt;/p&gt;

&lt;p&gt;1) It should be professional- make sure the tone is appropriate for the position &lt;/p&gt;

&lt;p&gt;2) It should be concise- remember that employers are busy people &lt;/p&gt;

&lt;p&gt;3) One page maximum - take care not to include unnecessary information &lt;/p&gt;

&lt;p&gt;4) Include personal details about yourself which will show that you have researched the company &lt;/p&gt;

&lt;p&gt;5.) Keep your cover letter updated - if you have recently updated your resume or have new skills relevant to the job post, mention them in your cover letter &lt;/p&gt;

&lt;p&gt;6.) Be honest - if there are things on your resume which might disqualify you from being qualified for the job, mention them up front&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-long-should-my-cover-letter-be"&gt;
  &lt;/a&gt;
  How long should my cover letter be?
&lt;/h1&gt;

&lt;p&gt;The majority of cover letters fall in a range between one and two pages long. However, as an applicant, there are no hard-and-fast rules about how long your cover letter should be. It's best to use your best judgment and tailor it to the position and company.&lt;/p&gt;

&lt;p&gt;A general rule of thumb is that less is more when writing your cover letter. If you feel like the content in your cover letter will be overwhelming, then it might be best to keep things brief or opt for an email format instead.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-components-of-a-cover-letter"&gt;
  &lt;/a&gt;
  The components of a cover letter
&lt;/h1&gt;

&lt;p&gt;A cover letter is a brief introduction and professional summary of your skills and abilities that accompanies a resume. A good cover letter should: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Introduce yourself and show that you've researched the company, position, or both &lt;/li&gt;
&lt;li&gt;Demonstrate that you are qualified for the job &lt;/li&gt;
&lt;li&gt;Sell yourself to the employer &lt;/li&gt;
&lt;li&gt;Be tailored to the needs of the employer &lt;/li&gt;
&lt;li&gt;Show your interest in the company &lt;/li&gt;
&lt;li&gt;Banish bad habits like being too wordy, being generic, or sounding impatient&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#what-should-go-in-the-body-of-my-cover-letter"&gt;
  &lt;/a&gt;
  What should go in the body of my cover letter?
&lt;/h1&gt;

&lt;p&gt;Your cover letter should be concise and to the point. It should include information about who you are, where you saw the job listing, your qualifications, and your availability. You don't want to repeat the same information that's on your resume or CV. &lt;/p&gt;

&lt;p&gt;Writing a cover letter is about highlighting your qualifications for this particular position.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#should-i-attach-my-resume-to-my-cover-letter"&gt;
  &lt;/a&gt;
  Should I attach my resume to my cover letter?
&lt;/h1&gt;

&lt;p&gt;The answer to this question is not always cut and dry. If you are applying for a position online, you should always attach your resume to the cover letter. However, when applying for in-person positions in offices in person, you should not attach your resume unless requested by the employer.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#which-format-should-i-use-for-my-cover-letter"&gt;
  &lt;/a&gt;
  Which format should I use for my cover letter?
&lt;/h1&gt;

&lt;p&gt;There are three main formats for cover letters:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;A formal letter - this is a letter written in an official business style and can include personal information like "to whom it may concern" and salutations, as well as your address, contact information, and signature&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;An informal letter - this is a more casual letter that can be as short or long as you want it to be. It typically includes fewer details, but could also contain personal information like "Dear Sir or Madam" and salutations&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A template letter - this is a prewritten letter with the appropriate formatting already included. This format can be useful if you know the company's guidelines on what they're looking for.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#example-of-a-cover-letter-for-software-engineers"&gt;
  &lt;/a&gt;
  Example of a cover letter for software engineers
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Dear Mr. Jason Barnett,&lt;/p&gt;

&lt;p&gt;I am sending this cover letter in response to your posting for an experienced software engineer. I have a proven track record of success and believe that my skills match the requirements of the position. My education includes a Bachelor's degree in computer science from University of Phoenix and certification as a Microsoft certified solutions developer for SQL Server 2016.&lt;/p&gt;

&lt;p&gt;My experience spans nearly two years with top companies such as Bank of America, Gartner, and IBM. At each company, I was given challenging projects to work on with the hope of gaining new skills and knowledge in the process. These experiences have allowed me to develop expertise in key areas such as data structures and algorithms, system design, coding standards, database design, and project management among others.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#before-you-go"&gt;
  &lt;/a&gt;
  Before you go
&lt;/h1&gt;

&lt;p&gt;If you are thinking of applying to a job in tech, it might be a good idea to prepare for your technical interview. &lt;a href="https://judocoder.com"&gt;We can help you&lt;/a&gt; in that regard. We at &lt;a href="https://judocoder.com"&gt;JudoCoder.com&lt;/a&gt; provide a collection of technical programming interviews, asked by Big Tech (Google, Apple, Facebook, Amazon, Netflix, etc). We cover all sorts of data structures and algorithms and group our coding challenges by difficulty (easy, medium, hard, expert) so that you can pick and choose your questions based on where you are at your journey. Try giving &lt;a href="https://judocoder.com"&gt;JudoCoder.com&lt;/a&gt; a try!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;A perfect cover letter should contain both professional and personal information about yourself, such as education, experience, and accomplishments. It should also address specific requirements, such as key words or skills. The letter should show enthusiasm for the company and position--in other words, it should show that you are interested in the company and would like to work there! In addition to this, a good cover letter will show knowledge of data structures and algorithms--in other words, good cover letters have a little bit of everything!&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>career</category>
      <category>programming</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Poetry vs pip: Or How to Forget Forever "requirements.txt"      Cheat Sheet for Beginners</title>
      <author>Vadim Kolobanov</author>
      <pubDate>Mon, 06 Dec 2021 13:43:45 +0000</pubDate>
      <link>https://dev.to/vadimkolobanov/poetry-vs-pip-or-how-to-forget-forever-requirementstxt-cheat-sheet-for-beginners-33h1</link>
      <guid>https://dev.to/vadimkolobanov/poetry-vs-pip-or-how-to-forget-forever-requirementstxt-cheat-sheet-for-beginners-33h1</guid>
      <description>&lt;p&gt;Poetry is a dependency management tool in Python projects (analogous to the built-in pip). &lt;/p&gt;

&lt;p&gt;It will be vital for beginners in Python to get acquainted with this tool, as it is a very simple and easy-to-use tool, the use of which can simplify the management and development of the project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can install poetry on windows either using pip:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip install poetry
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;pip stores dependency data in a file requirements.txt (or something else, but more often it is), poetry stores information in the pyproject.toml file, however, in the case of pip, only a list of dependencies and versions is stored in its file, and all basic information about the project is stored in .toml. It is very convenient, you can always find all the information in one place&lt;/p&gt;

&lt;p&gt;To install dependencies in pip, you need to run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;poetry makes it easier and more beautiful&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;installation&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;poetry install
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;update&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;poetry update
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Viewing dependencies in pip is done like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip freeze
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will only be able to see the current versions of the libraries and will not get the structure of all packages with their dependencies. In poetry, in poetry.the lock file, you can view information about all installed packages, the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;poetry show --tree
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will show the tree structure of packages with their personal dependencies.&lt;/p&gt;

&lt;p&gt;Also, launching a project in pip (in the case of a virtual environment) creates inconveniences, since the first thing you need to do is go into this very environment.&lt;/p&gt;

&lt;p&gt;There is no need to activate the virtual environment in poetry, just go to the project folder and start using the commands. Poetry will find the right environment by itself.&lt;br&gt;
You can also change the python version in poetry without having to change the old virtual environment.&lt;/p&gt;

&lt;p&gt;This is only a small part of the benefits.&lt;br&gt;
Now a little bit about the .toml file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[tool.poetry]
name = "new_proj"
version = "0.1.0"
description = "DEVoneLove"
authors = ["Vadim Kolobanov &amp;lt;titanyforgame@gmail.com&amp;gt;"]

[tool.poetry.dependencies]
python = "^3.10"
pygame = "^2.1.0"
icecream = "^2.1.1"
requests = "^2.26.0"
psycopg2 = { version = "^2.7", optional = true }
pymysql = { version = "1.0.2", optional = true }

[tool.poetry.dev-dependencies]
Pympler = "^0.9"

[tool.poetry.urls]
"My GitHub" = "https://github.com/vadimkolobanov"

[tool.poetry.scripts]
run-main = "new_proj.main:main_def"

[build-system]
requires = ["poetry-core&amp;gt;=1.0.0"]
build-backend = "poetry.core.masonry.api"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;[tool.poetry] - contains basic information about the project&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[tool.poetry.dependencies] - contains a description of all project dependencies. A link to Github is specified.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[tool.poetry.scripts] - contains scripts that need to be run when installing dependencies&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[tool.poetry.extras] - dependency groups for a separate installation&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[tool.poetry.urls] - Along with the main URLs, you can specify your own links&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;The study and effective use of new programming language features distinguishes a real programmer from a populist who talks about his skills more than he knows how.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(c) Vadim Kolobanov 2021 AD&lt;/em&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#put-on-heart-if-you-liked-it-and-you-learned-something-new"&gt;
  &lt;/a&gt;
  Put on Heart if you liked it and you learned something new!
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#you-can-also-follow-me-to-receive-notifications-about-new-interesting-articles"&gt;
  &lt;/a&gt;
  You can also follow &lt;a href="https://dev.to/vadimkolobanov"&gt;ME&lt;/a&gt; to receive notifications about new interesting articles.
&lt;/h3&gt;




&lt;h3&gt;
  &lt;a href="#faq"&gt;
  &lt;/a&gt;
  FAQ
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;I am a beginner, how should I learn Python?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Look into the following series:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/vadimkolobanov/series/15329"&gt;Learning Python&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/vadimkolobanov/series/15349"&gt;Step by Step to Junior&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/vadimkolobanov/series/15331"&gt;Ideas&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Can we cooperate with you?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you have interesting projects and you need a python (web)developer, then you can contact me by &lt;strong&gt;&lt;a href="//titanyforgame@gmail.com"&gt;mail&lt;/a&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;a href="https://discord.gg/szEuVAhatW"&gt;discord&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href="https://www.linkedin.com/in/vadzim-hlobuz-0b44531b7/"&gt;LinkedIn&lt;/a&gt;&lt;/strong&gt; for cooperation&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Connect to me on&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.facebook.com/neo.skarynsky"&gt;Write me on Facebook&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;&lt;a href="https://twitter.com/decodesperato"&gt;My Twitter&lt;/a&gt; &lt;br&gt;&lt;br&gt;
&lt;/p&gt;
&lt;blockquote&gt;
&lt;br&gt;
&lt;p&gt;To beat depression, try to just quit &lt;a href="https://twitter.com/hashtag/programming?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#programming&lt;/a&gt; 🤪&lt;/p&gt;— Vadim Kolobanov (@decodesperato) &lt;a&gt;&lt;/a&gt;&lt;br&gt;
&lt;/blockquote&gt;

</description>
      <category>programming</category>
      <category>python</category>
      <category>productivity</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Hosting and Scaling Systems</title>
      <author>Mike Levan</author>
      <pubDate>Mon, 06 Dec 2021 13:43:06 +0000</pubDate>
      <link>https://dev.to/thenjdevopsguy/hosting-and-scaling-systems-1nj8</link>
      <guid>https://dev.to/thenjdevopsguy/hosting-and-scaling-systems-1nj8</guid>
      <description>&lt;p&gt;Systems come in all shapes and sizes. A few years ago, a system would be some virtual machine or bare metal server. Now a system can be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Containers&lt;/li&gt;
&lt;li&gt;Orchestration&lt;/li&gt;
&lt;li&gt;Virtual machines&lt;/li&gt;
&lt;li&gt;Bare metal&lt;/li&gt;
&lt;li&gt;Virtualized bare metal&lt;/li&gt;
&lt;li&gt;Serverless&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Because of the vast types of systems, scaling and hosting have become quite differentiated.&lt;/p&gt;

&lt;p&gt;A few questions that occur due to the new complexity are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Where can I host my systems?&lt;/li&gt;
&lt;li&gt;How can I scale them?&lt;/li&gt;
&lt;li&gt;How can I make my apps highly available?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In part five of "The DevOps/SRE" series, you'll learn about how to answer the above questions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#public-cloud"&gt;
  &lt;/a&gt;
  Public Cloud
&lt;/h2&gt;

&lt;p&gt;If you're a startup, going the public cloud route (AWS, Azure, GCP, etc.) for highly scalable systems will be the easiest route. Easiest route means:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You don't have to worry about buying servers&lt;/li&gt;
&lt;li&gt;You don't have to worry about hosting the servers somewhere&lt;/li&gt;
&lt;li&gt;You don't have to buy data center space&lt;/li&gt;
&lt;li&gt;You don't have to worry about the overhead&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;if time means money, not having to worry about buying servers and data center space is crucial.  &lt;/p&gt;

&lt;p&gt;If you're a medium-to-large or large enterprise, you probably already have a few servers and systems on-prem. Because of that, you'll want to look into other options (check out the upcoming section &lt;strong&gt;Hybrid Cloud&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;When you're in the public cloud, hosting and scaling systems can be extremely straightforward. Let's take autoscaling groups as an example.&lt;/p&gt;

&lt;p&gt;In AWS, you have the ability to set up autoscaling groups, which are 2 or more EC2 instances (virtualized servers). The autoscaling groups constantly check the current load of the EC2 instances. If the server load is scaling up, the autoscaling group will automatically add another EC2 instance. &lt;/p&gt;

&lt;p&gt;This is of course available on-prem and in virtualized environments, but it's far more complex than simply using a service like autoscaling groups in AWS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#virtual-private-servers-vps"&gt;
  &lt;/a&gt;
  Virtual Private Servers (VPS)
&lt;/h2&gt;

&lt;p&gt;The truth of the matter is that public clouds are expensive. For many startups, they could get a $10,000 dollar bill and be in a tough spot. The tough part is, the $10,000 dollar bill may be valid. It grew to that number simply because the startup needed to scale and host systems.&lt;/p&gt;

&lt;p&gt;If an organization wants to scale and host systems, yet not have a crazy bill, what can it do?&lt;/p&gt;

&lt;p&gt;One option is to look at a Virtual Private Server company, which is typically some type of independent cloud. &lt;/p&gt;

&lt;p&gt;A few examples of an independent cloud are Digital Ocean and Linode.&lt;/p&gt;

&lt;p&gt;Although Digital Ocean and Linode may not have the vast amount of services that larger public clouds have, they still have some amazing core services that include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Virtual machines&lt;/li&gt;
&lt;li&gt;Networking&lt;/li&gt;
&lt;li&gt;Storage&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you, for example, have a bunch of workloads running on virtual machines in AWS (EC2 instances), you could take advantage of the cost savings using Digital Ocean or Linode and have them take on the role of being a secondary cloud.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#onprem-and-virtualized-onprem"&gt;
  &lt;/a&gt;
  On-Prem and Virtualized On-Prem
&lt;/h2&gt;

&lt;p&gt;If you're thinking about scaling on-prem, you'll have to think about a few different pieces to the puzzle that'll be needed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Do you have enough hardware (servers)?&lt;/li&gt;
&lt;li&gt;What's the lead time on buying new servers?&lt;/li&gt;
&lt;li&gt;Do you have enough engineers to work on and maintain the scalability?&lt;/li&gt;
&lt;li&gt;Are you using a virtualized infrastructure like ESXi or Hyper-V?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Another great option, if you don't want to have to worry about pure bare metal, is something like Equinix.&lt;/p&gt;

&lt;p&gt;Equinix is a great alternative that definitely makes you feel like you're on-prem without having to worry about buying servers and replacing RAM.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hybrid-cloud"&gt;
  &lt;/a&gt;
  Hybrid Cloud
&lt;/h2&gt;

&lt;p&gt;Putting together the on-prem model and the cloud model is great if you're interested in a hybrid model.&lt;/p&gt;

&lt;p&gt;For example, let's say that you want to have Active Directory servers at each large location for login and security capabilities. Maybe at smaller satellite offices, you don't need an Active Directory server. Because of that, you use Azure Active Directory and connect your on-prem AD to Azure Active Directory.&lt;/p&gt;

&lt;p&gt;Another example is you may have storage on-prem using some type of NetApp device, and also have storage in an AWS S3 bucket.&lt;/p&gt;

&lt;p&gt;The hybrid approach is great for organizations that already have on-prem infrastructure.&lt;/p&gt;

&lt;p&gt;Large public clouds are seeing the need as well, and they're answering the need. AWS just announced &lt;a href="https://aws.amazon.com/outposts/"&gt;Outposts&lt;/a&gt;, which is an AWS server in your data center.&lt;/p&gt;

&lt;p&gt;When it comes to hybrid cloud, it's a great happy medium.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>aws</category>
      <category>storage</category>
      <category>servers</category>
    </item>
    <item>
      <title>JavaScript, Single Threaded but Non-Blocking</title>
      <author>Dylan Oh</author>
      <pubDate>Mon, 06 Dec 2021 13:25:01 +0000</pubDate>
      <link>https://dev.to/ohdylan/javascript-single-threaded-but-non-blocking-198e</link>
      <guid>https://dev.to/ohdylan/javascript-single-threaded-but-non-blocking-198e</guid>
      <description>&lt;p&gt;For those who just got in touch with JavaScript might be confused when hearing people say that JavaScript is a single threaded and non-blocking programming language. You might be thinking how could one be single threaded but non-blocking? &lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Single Threaded&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;JavaScript is known to be single threaded because of its property of having only one call stack, which some other programming languages have multiple. JavaScript functions are executed on the call stack, by LIFO (Last In First Out). For example we have a piece of code like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the call stack will have foo to enter into call stack, then bar.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cdqp8Odv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/exvl0p4kqy36psxbjr00.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cdqp8Odv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/exvl0p4kqy36psxbjr00.png" alt="Image description" width="496" height="503"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After bar() is done, it will be popped off from the call stack, followed by foo(). You will see an anonymous function underneath when printing out the stack trace, and that is the global execution context of main thread.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZjxRxe7Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qfgz6mxfax3zebp2xjzx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZjxRxe7Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qfgz6mxfax3zebp2xjzx.png" alt="Image description" width="203" height="228"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This seems to be logical as JavaScript is a single threaded language and there is only a single flow to execute all these functions. However, in the case that we are having some unpredictable or heavy tasks in the flow (for example making an API call), we do not want them to block the execution of the remaining codes (else users might be staring at a frozen screen). This is where the asynchronous JavaScript comes in.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Non-Blocking&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Other than JavaScript Engine, we also have Web APIs, Callback Queue and Event Loop to form JavaScript runtime in the browser. Let's say we have a piece of code here:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;"setTimeout" is a Web API function that will execute a callback function after a certain amount of time (in milliseconds, in this case is 5000 milliseconds). When you execute this script, you will see that "1" and "3" are printed out instantly, and "2" is printed out around 5 seconds later. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LTH44MmL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bkachgjqdjftob1gm07r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LTH44MmL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bkachgjqdjftob1gm07r.png" alt="Image description" width="333" height="154"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is what happened behind the scene:&lt;/p&gt;

&lt;p&gt;The first console log is put into the stack, and popped off after printed out "1" in the console. When setTimeout function is put into the stack, the callback function is set to await by this Web API function. The setTimeout function is then popped off the stack and the third console log enters. After finished executing, the third console log and the current global execution context are popped off from stack. &lt;/p&gt;

&lt;p&gt;When the callback function in setTimeout finished awaiting, it will be entering to Callback Queue (or event queue) and waiting to be executed. Event loop facilitates and checks if the call stack is empty. If it is empty, new global execution context is created and this call back function (console log out "2") will then be put into the stack, executed and popped off. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MOs4GbAM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/guc8ykvjaahtv1045ws9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MOs4GbAM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/guc8ykvjaahtv1045ws9.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just to add on, even if you are setting setTimeout to delay by 0 second, "2" will still be the last one to be printed out because as long as Web API is called, it will be put into Callback queue and be placed onto stack only when the stack is empty.&lt;/p&gt;

&lt;p&gt;I hope this gives you an idea of why JavaScript can be single threaded and non-blocking at the same time. Thought of writing this as I just recently shared this with the new joiner to our company.&lt;/p&gt;

&lt;p&gt;Oh btw, if you still need a video explanation, here is a good resource:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=8aGhZQkoFbQ"&gt;What the heck is the event loop anyway? | Philip Roberts | JSConf EU&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Do follow me for more future articles on web design, programming and self-improvement&lt;/strong&gt; 😊&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to use Class-based Components in React </title>
      <author>SnowBit</author>
      <pubDate>Mon, 06 Dec 2021 12:50:04 +0000</pubDate>
      <link>https://dev.to/snowbit/how-to-use-class-based-components-in-react-1cnb</link>
      <guid>https://dev.to/snowbit/how-to-use-class-based-components-in-react-1cnb</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/HI56D6orlJ0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;In this article, I am going to show you how you can use &lt;strong&gt;class-based components&lt;/strong&gt; in React JS&lt;/p&gt;

&lt;p&gt;Let's get started 🎉&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-classbased-components"&gt;
  &lt;/a&gt;
  What is Class-based components
&lt;/h3&gt;

&lt;p&gt;Class-based components are simple classes which tends as a React components which can be easily used anywhere in your React Project&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-use-them"&gt;
  &lt;/a&gt;
  How to use them?
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Snowbit&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;container&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;am&lt;/span&gt; &lt;span class="nx"&gt;SnowBit&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;Shown&lt;/span&gt; &lt;span class="nx"&gt;using&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;based&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
