<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>KubeMQ: A Modern Alternative to Kafka</title>
      <author>Michael Bogan</author>
      <pubDate>Wed, 06 Oct 2021 14:21:57 +0000</pubDate>
      <link>https://dev.to/mbogan/kubemq-a-modern-alternative-to-kafka-1mga</link>
      <guid>https://dev.to/mbogan/kubemq-a-modern-alternative-to-kafka-1mga</guid>
      <description>&lt;p&gt;Modern applications are complex, with many different moving parts. Even for the most basic fulfillment center application, front-end interfaces trigger payment processing transactions, which in turn trigger manufacturing and shipping events. These services need a reliable way to communicate with one another regardless of the underlying network or the availability of other services.&lt;/p&gt;

&lt;p&gt;To make such complex operations happen, there has to be some type of service “post office” to keep track of all the requests and alerts flying back and forth. The tool that achieves this is the &lt;em&gt;message queue&lt;/em&gt;. A message queue is a specialized application that acts as an intermediary between different services of a distributed application or between different applications. It decouples the application services from one another, ensuring that processing occurs whether or not the recipient of a message is available. The message queue ensures all messages are &lt;em&gt;eventually&lt;/em&gt; received successfully.&lt;/p&gt;

&lt;p&gt;Common use cases for message queues include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Asynchronous processing between disparate applications.&lt;/li&gt;
&lt;li&gt;Microservice-based applications where reliable communication between the different components is critical.&lt;/li&gt;
&lt;li&gt;Transaction ordering and throttling.&lt;/li&gt;
&lt;li&gt;Data processing operations that can benefit from the streamlined efficiency of batching.&lt;/li&gt;
&lt;li&gt;Applications that must be scalable to meet sudden and unexpected changes in demand.&lt;/li&gt;
&lt;li&gt;Applications that must be resilient enough to recover from crashes and unexpected failures.&lt;/li&gt;
&lt;li&gt;Throttling resource consumption by long-running processes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There’s no shortage of vendors in the message queue field. Larger cloud platforms like Amazon Web Services, Microsoft Azure, and Google Cloud have their own offerings (AWS Simple Queue Service, Azure’s Service Bus, and Google’s Pub/Sub). There are also standalone, general-purpose message brokers such as RabbitMQ, Apache’s ActiveMQ, and Kafka.&lt;/p&gt;

&lt;p&gt;This article introduces a modern, Kubernetes-native message queue called KubeMQ, to show how organizations trying to implement—or already using—Kafka on Kubernetes can benefit from it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introducing-apache-kafka"&gt;
  &lt;/a&gt;
  Introducing Apache Kafka
&lt;/h2&gt;

&lt;p&gt;To understand the full value of KubeMQ, we’ll first need to spend some time with Kafka. Kafka was originally created by LinkedIn engineers as a software bus for tracking LinkedIn user activities. It was later released as an open source product and today, Kafka is developed and managed by the Apache Software Foundation. &lt;/p&gt;

&lt;p&gt;Apache notes that &lt;a href="https://kafka.apache.org/"&gt;more than 80% of Fortune 100 companies trust and use Kafka&lt;/a&gt;. Despite being open source, it’s known to be a highly scalable system that can connect to a wide range of event producers and consumers. It can be configured to perform complex functions with data streams and can work well even in limited network environments. With widely available support within the online user community, Kafka has several commercial offerings as well. For example, AWS offers managed Kafka, as does Confluent.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#limitations-of-kafka"&gt;
  &lt;/a&gt;
  Limitations of Kafka
&lt;/h2&gt;

&lt;p&gt;Despite its high adoption, Kafka isn’t always the best choice as a message queuing system. It has a monolithic architecture, suitable for on-premise clusters or high-end multi-VM setups. Given how much memory and storage Kafka needs, quickly spinning up a multi-node cluster on a standalone workstation for testing purposes can be a challenge.&lt;/p&gt;

&lt;p&gt;Simply put, it’s not easy to successfully bring together all the complex pieces necessary to integrate Kafka with your infrastructure. This is particularly the case with a Kubernetes-based architecture.&lt;/p&gt;

&lt;p&gt;As you can see from the image below, there are different moving parts to a Kubernetes-based Kafka deployment. Besides provisioning the underlying compute, network, and storage infrastructure for a basic Kubernetes cluster (if you are implementing it on-prem), you’ll also need to install and integrate all the Kafka pieces with a package manager like Helm. These components can include an orchestrator like ZooKeeper or Mesos for managing Kafka’s brokers and topics. Other areas needing attention include dependencies, logs, partitions, and so on. If even one element is either missing or misconfigured, things won’t work—deploying Kafka successfully isn’t trivial.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7xv9JKxS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lzmyfvv8ibcr33u5s120.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7xv9JKxS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lzmyfvv8ibcr33u5s120.png" alt="Kafka on Kubernetes Architecture"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Kafka on Kubernetes Architecture&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Another area to be aware of is Kafka’s reliance on the Java Virtual Machine (JVM). The JVM adds significant memory overhead to Kubernetes as each running container will require a large memory footprint. Configuring Kafka JVM for optimal performance can require a significant amount of tweaking. &lt;/p&gt;

&lt;p&gt;In addition to the JVM parameters, Kafka already comes with a large number of configuration settings. Most product environments will also need to fine-tune those settings, adding to the overall setup time. &lt;/p&gt;

&lt;p&gt;Adding a new Kafka node to a Kubernetes cluster requires complex manual balancing to maintain optimal resource usage. And that’s why there’s no simple way to manage and ensure a reliable backup and recovery strategy; it’s not easy to disaster-proof a Kafka cluster running on a large number of nodes. Unlike Kubernetes clusters where data is persisted outside the pod, and the orchestrator spins up a failed pod automatically, there’s no such native fail-proof mechanism for Kafka. &lt;/p&gt;

&lt;p&gt;Finally, effective monitoring of Kafka/ZooKeeper/Kubernetes deployments requires third-party tools.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introducing-kubemq"&gt;
  &lt;/a&gt;
  Introducing KubeMQ
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;KubeMQ&lt;/em&gt; is a messaging service that was built from the ground up with Kubernetes in mind. Following the container architecture best practices, KubeMQ is intended to be stateless and ephemeral. That is, a KubeMQ node will remain unchanged, predictable, and reproducible for its entire lifecycle. If configuration changes are needed, nodes are shut down and replaced. &lt;/p&gt;

&lt;p&gt;This reproducibility means that, unlike Kafka, KubeMQ comes with a zero-configuration setup, needing no configuration tweaking after it’s installed. &lt;/p&gt;

&lt;p&gt;KubeMQ was designed to accommodate the widest range of message patterns. It’s a message broker and message queue that supports the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pub/Sub with or without persistence&lt;/li&gt;
&lt;li&gt;Request/Reply (synchronous, asynchronous)&lt;/li&gt;
&lt;li&gt;At Most Once Delivery&lt;/li&gt;
&lt;li&gt;At Least Once Delivery&lt;/li&gt;
&lt;li&gt;Streaming patterns&lt;/li&gt;
&lt;li&gt;RPC&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Comparatively, Kafka only supports Pub/Sub with persistence and streaming. RPC and Request/Reply patterns are not supported by Kafka at all.&lt;/p&gt;

&lt;p&gt;In terms of resource usage, KubeMQ outshines Kafka with its minimal footprint. The KubeMQ docker container takes up only 30MB of space. Such a small footprint contributes to a fault-tolerant setup and streamlined deployments. Unlike Kafka, adding KubeMQ to a small development Kubernetes environment in a local workstation is straightforward. But at the same time, KubeMQ is scalable enough to be deployed in a hybrid environment running on hundreds of on-premise and cloud-hosted nodes. At the core of this deployment ease is &lt;a href="https://github.com/kubemq-io/kubemqctl"&gt;kubemqctl&lt;/a&gt;, the command line interface tool for KubeMQ, analogous to Kubernetes’ kubectl. &lt;/p&gt;

&lt;p&gt;Another area where KubeMQ outperforms Kafka is its speed. Kafka was written in Java and Scala while KubeMQ was written in Go, ensuring fast operation. In an internal benchmark operation, KubeMQ processed one million messages 20% faster than Kafka. &lt;/p&gt;

&lt;p&gt;Going back to the “configuration-free” side of KubeMQ, a &lt;em&gt;channel&lt;/em&gt; is the only object developers will need to create. You can forget all about brokers, exchanges, and orchestrators—KubeMQ’s Raft does all that instead of ZooKeeper.&lt;/p&gt;

&lt;p&gt;From a monitoring perspective, dashboards via Prometheus and Grafana come fully integrated with KubeMQ, so you won’t have the added work of manually integrating third-party observability tools. However, you can still use your existing logging and monitoring solutions with KubeMQ, thanks to its native integration with tools including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fluentd, Elastic, and Datadog, for monitoring&lt;/li&gt;
&lt;li&gt;Loggly, for logging&lt;/li&gt;
&lt;li&gt;Jaeger and Open Tracing, for tracing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since &lt;a href="https://kubemq.io/kafka-vs-kubemq/"&gt;Kafka isn’t a native part&lt;/a&gt; of the Cloud Native Computing Foundation (CNCF) landscape, integration with CNCF tools often is not supported and has to be manually configured.&lt;/p&gt;

&lt;p&gt;If configured, connectivity can happen through the open source gRPC remote procedure call system, whose superior compatibility with Kubernetes &lt;a href="https://blog.cloudflare.com/moving-k8s-communication-to-grpc/"&gt;is well known&lt;/a&gt;. Kafka’s own proprietary connectivity mechanism doesn’t necessarily deliver comparable results.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#transparent-migration-from-kafka-to-kubemq"&gt;
  &lt;/a&gt;
  Transparent Migration from Kafka to KubeMQ
&lt;/h2&gt;

&lt;p&gt;In addition to the simplicity of deployment and operation for KubeMQ, porting an existing Kafka setup to KubeMQ is simple. &lt;/p&gt;

&lt;p&gt;To do this, developers can start by using the KubeMQ Kafka connector. KubeMQ target and source connectors are configured to convert messages from Kafka. At a high level, KubeMQ source connectors consume messages from a Kafka source topic as a subscriber, convert the message to a KubeMQ message format, and then send the message to an internal journal. KubeMQ target connectors subscribe to an output journal that contains the converted message, and then sends the messages to a target topic in Kafka. The high-level architecture is shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Tq1VCNSy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ixspr96o892zocfrk9o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Tq1VCNSy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ixspr96o892zocfrk9o.png" alt="Kafka Integration with KubeMQ"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Kafka Integration with KubeMQ&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Additionally, any messaging patterns supported by Kafka are all supported by KubeMQ. For example, Kafka only supports Pub / Sub with persistence, and streaming. KubeMQ is a message queue and a message broker that supports Pub / Sub (with or without persistence) Request / Reply (sync, async), at least one delivery, streaming patterns, and RPC. So, there’s no need to refactor application code and accommodate complicated logic changes when migrating from Kafka to KubeMQ. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-words"&gt;
  &lt;/a&gt;
  Final Words
&lt;/h2&gt;

&lt;p&gt;For most workloads, the simplicity, light footprint, and container-first integration built into &lt;a href="https://kubemq.io/request-a-demo/"&gt;KubeMQ&lt;/a&gt; will deliver performance superior to Kafka. In addition, the almost null configuration needed will save many hours of administration and setup. As we mentioned, migration is straightforward. &lt;/p&gt;

&lt;p&gt;KubeMQ is a free download that comes with a free, six-month development trial. If you are working with OpenShift, KubeMQ is available in &lt;a href="https://marketplace.redhat.com/en-us"&gt;the Red Hat Marketplace&lt;/a&gt;. It’s also available for all the major cloud environments, including GCP, AWS, Azure, and DigitalOcean.&lt;/p&gt;

</description>
      <category>microservices</category>
      <category>architecture</category>
    </item>
    <item>
      <title>Deploying Medusa on Qovery for a 100% open-source ecommerce stack</title>
      <author>Oliver Juhl</author>
      <pubDate>Wed, 06 Oct 2021 14:03:24 +0000</pubDate>
      <link>https://dev.to/medusajs/deploying-medusa-on-qovery-for-a-100-open-source-ecommerce-stack-phe</link>
      <guid>https://dev.to/medusajs/deploying-medusa-on-qovery-for-a-100-open-source-ecommerce-stack-phe</guid>
      <description>&lt;p&gt;This is a guide for deploying a &lt;a href="https://www.medusa-commerce.com"&gt;Medusa&lt;/a&gt; project to &lt;a href="https://www.qovery.com"&gt;Qovery&lt;/a&gt;. Qovery is a Continuous Deployment Platform, that provides you with the developer experience of Heroku on top of your cloud provider (e.g. AWS, DigitalOcean).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It is assumed, that you are currently running a local instance of Medusa. If not, check out our &lt;a href="https://github.com/medusajs/medusa#-quickstart"&gt;Quickstart&lt;/a&gt; or use &lt;code&gt;npx create-medusa-app&lt;/code&gt; to set up your application in a matter of minutes. For the latter, see &lt;a href="https://docs.medusa-commerce.com/how-to/create-medusa-app"&gt;this guide&lt;/a&gt; for a small walkthrough.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#1-qovery-console"&gt;
  &lt;/a&gt;
  1. Qovery Console
&lt;/h3&gt;

&lt;p&gt;Create an account on &lt;a href="https://console.qovery.com/login"&gt;Qovery&lt;/a&gt; on their free community plan and jump into the console.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-setup"&gt;
  &lt;/a&gt;
  2. Setup
&lt;/h3&gt;

&lt;p&gt;Create a project and an environment.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-add-your-medusa-app"&gt;
  &lt;/a&gt;
  3. Add your Medusa app
&lt;/h3&gt;

&lt;p&gt;Add a new app to your Qovery environment and connect the Git repository that holds your Medusa project. In your application settings, set the port to 9000 unless something else is specified in your setup.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you used our &lt;code&gt;npx&lt;/code&gt; starter, your repository will most likely hold all components; storefront, admin and backend. Ensure that &lt;strong&gt;Root application path&lt;/strong&gt; in Qovery is pointing to your Medusa project (&lt;code&gt;/backend&lt;/code&gt;).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#4-add-a-database"&gt;
  &lt;/a&gt;
  4. Add a database
&lt;/h3&gt;

&lt;p&gt;Navigate to your environment overview and add the databases required by Medusa.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add Postgres database version 10, 11 or 12&lt;/li&gt;
&lt;li&gt;Add Redis database version 5 or 6&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#5-configure-medusa"&gt;
  &lt;/a&gt;
  5. Configure Medusa
&lt;/h3&gt;

&lt;p&gt;Our Medusa project needs a bit of configuration to fit the needs of Qovery.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#update-raw-medusaconfigjs-endraw-"&gt;
  &lt;/a&gt;
  Update &lt;code&gt;medusa-config.js&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;First, add the Postgres and Redis database url to your &lt;code&gt;medusa-config.js&lt;/code&gt;. In Qovery, click on your Medusa app in the environment overview. Navigate to environment variables in the sidebar on the left. Among the secret variables you should find your database urls. They should look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;QOVERY_REDIS_123456789_DATABASE_URL
QOVERY_POSTGRESQL_123456789_DATABASE_URL
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add these to your &lt;code&gt;medusa-config.js&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const DATABASE_URL = process.env.QOVERY_POSTGRESQL_123456789_DATABASE_URL
const REDIS_URL= process.env.QOVERY_REDIS_123456789_DATABASE_URL
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Furthermore, update &lt;code&gt;module.exports&lt;/code&gt; to include the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;module.exports = {
  projectConfig: {
    redis_url: REDIS_URL,
    database_url: DATABASE_URL,
    database_type: "postgres",
    store_cors: STORE_CORS,
    admin_cors: ADMIN_CORS,
    database_extra: { }
  },
  plugins,
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt;: We are using the Qovery community plan, that does not allow SSL connections for the database, so this is disabled.&lt;/p&gt;

&lt;p&gt;In a production environment, you would need the following in the config:&lt;br&gt;
&lt;code&gt;database_extra: { ssl: { rejectUnauthorized: false } }&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#add-some-extra-variables"&gt;
  &lt;/a&gt;
  Add some extra variables
&lt;/h4&gt;

&lt;p&gt;We need to add a couple of more environment variables in Qovery. Add the following variables in your Console with an application scope:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;JTW_SECRET=something_secret_jwt
COOKIE_SECRET=something_secret_cookie
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Make sure to use actual secrets in a production environment.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#update-raw-packagejson-endraw-"&gt;
  &lt;/a&gt;
  Update &lt;code&gt;package.json&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;Update &lt;code&gt;scripts&lt;/code&gt; to the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"scripts": {
    "serve": "medusa start",
    "start": "medusa migrations run &amp;amp;&amp;amp; medusa start",
    "prepare": "npm run build",
    "build": "babel src -d dist --extensions \".ts,.js\""
  },
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#6-deploy-medusa"&gt;
  &lt;/a&gt;
  6. Deploy Medusa
&lt;/h3&gt;

&lt;p&gt;Finally, deploy your Redis and Postgres followed by your Medusa application.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#deploy-databases"&gt;
  &lt;/a&gt;
  Deploy databases
&lt;/h4&gt;

&lt;p&gt;In your environment overview in Qovery, deploy your databases one after the other. Only when these are deployed, proceed to next step.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#push-changes-to-your-repository"&gt;
  &lt;/a&gt;
  Push changes to your repository
&lt;/h4&gt;

&lt;p&gt;To initialise your first build Qovery, simply commit and push your changes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add .
git commit -m "chore: Qovery setup"
git push origin main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#6-try-it-out"&gt;
  &lt;/a&gt;
  6. Try it out!
&lt;/h3&gt;

&lt;p&gt;In Qovery, click on your Medusa app in the environment overview. In the top right you are able to open up your application. Navigate to &lt;code&gt;/health&lt;/code&gt; to ensure, that the app is running.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's next?
&lt;/h3&gt;

&lt;p&gt;You now have an application running on Qovery. This can be scaled and configured to fit your business needs. As mentioned, we used the community plan, so this should be upgraded when moving to production.&lt;/p&gt;

&lt;p&gt;Furthermore, you can deploy Medusa Admin for your application, such that you can start managing your store from an interface.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.medusa-commerce.com/how-to/deploying-admin-on-netlify"&gt;Deploy Admin on Netlify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Deploy Admin on Gatsby Cloud (Coming soon)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Explore our &lt;a href="https://github.com/medusajs/medusa"&gt;Github&lt;/a&gt; or join our &lt;a href="https://discord.gg/MvfArDW6f4"&gt;community&lt;/a&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>javascript</category>
      <category>cloud</category>
      <category>jamstack</category>
    </item>
    <item>
      <title>Awesome Penetration Testing</title>
      <author>AmnaAbd</author>
      <pubDate>Wed, 06 Oct 2021 13:37:53 +0000</pubDate>
      <link>https://dev.to/amnaabd/awesome-penetration-testing-1lcb</link>
      <guid>https://dev.to/amnaabd/awesome-penetration-testing-1lcb</guid>
      <description>&lt;h1&gt;
  &lt;a href="#awesome-penetration-testing"&gt;
  &lt;/a&gt;
  Awesome Penetration Testing &lt;a href="https://awesome.re"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VRsQTlDu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://awesome.re/badge-flat2.svg" alt="Awesome"&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;A collection of awesome penetration testing and offensive cybersecurity resources.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Penetration_test"&gt;Penetration testing&lt;/a&gt; is the practice of launching authorized, simulated attacks against computer systems and their physical infrastructure to expose potential security weaknesses and vulnerabilities.&lt;/p&gt;

&lt;p&gt;Your contributions and suggestions are heartily♥ welcome. (✿◕‿◕). Please check the &lt;a href="//CONTRIBUTING.md"&gt;Contributing Guidelines&lt;/a&gt; for more details. This work is licensed under a &lt;a href="https://creativecommons.org/licenses/by/4.0/"&gt;Creative Commons Attribution 4.0 International License&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.netsparker.com/?utm_source=github.com&amp;amp;utm_content=awesome+penetration+testing&amp;amp;utm_medium=referral&amp;amp;utm_campaign=generic+advert"&gt;This project is supported by Netsparker Web Application Security Scanner&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contents"&gt;
  &lt;/a&gt;
  Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#android-utilities"&gt;Android Utilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#anonymity-tools"&gt;Anonymity Tools&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#tor-tools"&gt;Tor Tools&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#anti-virus-evasion-tools"&gt;Anti-virus Evasion Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#books"&gt;Books&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#malware-analysis-books"&gt;Malware Analysis Books&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#ctf-tools"&gt;CTF Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#collaboration-tools"&gt;Collaboration Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#conferences-and-events"&gt;Conferences and Events&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#asia"&gt;Asia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#europe"&gt;Europe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#north-america"&gt;North America&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#south-america"&gt;South America&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#zealandia"&gt;Zealandia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#exfiltration-tools"&gt;Exfiltration Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#exploit-development-tools"&gt;Exploit Development Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#file-format-analysis-tools"&gt;File Format Analysis Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gnulinux-utilities"&gt;GNU/Linux Utilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hash-cracking-tools"&gt;Hash Cracking Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hex-editors"&gt;Hex Editors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#industrial-control-and-scada-systems"&gt;Industrial Control and SCADA Systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#intentionally-vulnerable-systems"&gt;Intentionally Vulnerable Systems&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#intentionally-vulnerable-systems-as-docker-containers"&gt;Intentionally Vulnerable Systems as Docker Containers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#lock-picking"&gt;Lock Picking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#macos-utilities"&gt;macOS Utilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#multi-paradigm-frameworks"&gt;Multi-paradigm Frameworks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#network-tools"&gt;Network Tools&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#ddos-tools"&gt;DDoS Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#network-reconnaissance-tools"&gt;Network Reconnaissance Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#protocol-analyzers-and-sniffers"&gt;Protocol Analyzers and Sniffers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#network-traffic-replay-and-editing-tools"&gt;Network Traffic Replay and Editing Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#proxies-and-machine-in-the-middle-mitm-tools"&gt;Proxies and Machine-in-the-Middle (MITM) Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#transport-layer-security-tools"&gt;Transport Layer Security Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#wireless-network-tools"&gt;Wireless Network Tools&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#network-vulnerability-scanners"&gt;Network Vulnerability Scanners&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#web-vulnerability-scanners"&gt;Web Vulnerability Scanners&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#open-sources-intelligence-osint"&gt;Open Sources Intelligence (OSINT)&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#data-broker-and-search-engine-services"&gt;Data broker and search engine services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dorking-tools"&gt;Dorking tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#email-search-and-analysis-tools"&gt;Email search and analysis tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#metadata-harvesting-and-analysis"&gt;Metadata harvesting and analysis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#network-device-discovery-tools"&gt;Network device discovery tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#osint-online-resources"&gt;OSINT Online Resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#source-code-repository-searching-tools"&gt;Source code repository searching tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#web-application-and-resource-analysis-tools"&gt;Web application and resource analysis tools&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#online-resources"&gt;Online Resources&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#online-code-samples-and-examples"&gt;Online Code Samples and Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#online-exploit-development-resources"&gt;Online Exploit Development Resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#online-lock-picking-resources"&gt;Online Lock Picking Resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#online-operating-systems-resources"&gt;Online Operating Systems Resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#online-penetration-testing-resources"&gt;Online Penetration Testing Resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#other-lists-online"&gt;Other Lists Online&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#penetration-testing-report-templates"&gt;Penetration Testing Report Templates&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#operating-system-distributions"&gt;Operating System Distributions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#periodicals"&gt;Periodicals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#physical-access-tools"&gt;Physical Access Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#privilege-escalation-tools"&gt;Privilege Escalation Tools&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#password-spraying-tools"&gt;Password Spraying Tools&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#reverse-engineering"&gt;Reverse Engineering&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#reverse-engineering-books"&gt;Reverse Engineering Books&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#reverse-engineering-tools"&gt;Reverse Engineering Tools&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#security-education-courses"&gt;Security Education Courses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#exploit-development-online-resources"&gt;Shellcoding Guides and Tutorials&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#side-channel-tools"&gt;Side-channel Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#social-engineering"&gt;Social Engineering&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#social-engineering-books"&gt;Social Engineering Books&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#social-engineering-online-resources"&gt;Social Engineering Online Resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#social-engineering-tools"&gt;Social Engineering Tools&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#static-analyzers"&gt;Static Analyzers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#steganography-tools"&gt;Steganography Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#vulnerability-databases"&gt;Vulnerability Databases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#web-exploitation"&gt;Web Exploitation&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#intercepting-web-proxies"&gt;Intercepting Web proxies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#web-file-inclusion-tools"&gt;Web file inclusion tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#web-injection-tools"&gt;Web injection tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#web-path-discovery-and-bruteforcing-tools"&gt;Web path discovery and bruteforcing tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#web-shells-and-c2-frameworks"&gt;Web shells and C2 frameworks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#web-accessible-source-code-ripping-tools"&gt;Web-accessible source code ripping tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#web-exploitation-books"&gt;Web Exploitation Books&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#windows-utilities"&gt;Windows Utilities&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#android-utilities"&gt;
  &lt;/a&gt;
  Android Utilities
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.csploit.org/"&gt;cSploit&lt;/a&gt; - Advanced IT security professional toolkit on Android featuring an integrated Metasploit daemon and MITM capabilities.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.fing.com/products/fing-app/"&gt;Fing&lt;/a&gt; - Network scanning and host enumeration app that performs NetBIOS, UPnP, Bonjour, SNMP, and various other advanced device fingerprinting techniques.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#anonymity-tools"&gt;
  &lt;/a&gt;
  Anonymity Tools
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://geti2p.net/"&gt;I2P&lt;/a&gt; - The Invisible Internet Project.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://0xacab.org/jvoisin/mat2"&gt;Metadata Anonymization Toolkit (MAT)&lt;/a&gt; - Metadata removal tool, supporting a wide range of commonly used file formats, written in Python3.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://webkay.robinlinus.com/"&gt;What Every Browser Knows About You&lt;/a&gt; - Comprehensive detection page to test your own Web browser's configuration for privacy and identity leaks.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#tor-tools"&gt;
  &lt;/a&gt;
  Tor Tools
&lt;/h3&gt;

&lt;p&gt;See also &lt;a href="https://github.com/ajvb/awesome-tor"&gt;awesome-tor&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/GouveaHeitor/nipe"&gt;Nipe&lt;/a&gt; - Script to redirect all traffic from the machine to the Tor network.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://onionscan.org/"&gt;OnionScan&lt;/a&gt; - Tool for investigating the Dark Web by finding operational security issues introduced by Tor hidden service operators.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://tails.boum.org/"&gt;Tails&lt;/a&gt; - Live operating system aiming to preserve your privacy and anonymity.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.torproject.org/"&gt;Tor&lt;/a&gt; - Free software and onion routed overlay network that helps you defend against traffic analysis.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/skizap/dos-over-tor"&gt;dos-over-tor&lt;/a&gt; - Proof of concept denial of service over Tor stress test tool.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/brainfuckSec/kalitorify"&gt;kalitorify&lt;/a&gt; - Transparent proxy through Tor for Kali Linux OS.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#antivirus-evasion-tools"&gt;
  &lt;/a&gt;
  Anti-virus Evasion Tools
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/govolution/avet"&gt;AntiVirus Evasion Tool (AVET)&lt;/a&gt; - Post-process exploits containing executable files targeted for Windows machines to avoid being recognized by antivirus software.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/paranoidninja/CarbonCopy"&gt;CarbonCopy&lt;/a&gt; - Tool that creates a spoofed certificate of any online website and signs an Executable for AV evasion.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://nullsecurity.net/tools/binary.html"&gt;Hyperion&lt;/a&gt; - Runtime encryptor for 32-bit portable executables ("PE &lt;code&gt;.exe&lt;/code&gt;s").&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.shellterproject.com/"&gt;Shellter&lt;/a&gt; - Dynamic shellcode injection tool, and the first truly dynamic PE infector ever created.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Mr-Un1k0d3r/UniByAv"&gt;UniByAv&lt;/a&gt; - Simple obfuscator that takes raw shellcode and generates Anti-Virus friendly executables by using a brute-forcable, 32-bit XOR key.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.veil-framework.com/"&gt;Veil&lt;/a&gt; - Generate metasploit payloads that bypass common anti-virus solutions.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/v-p-b/peCloakCapstone"&gt;peCloakCapstone&lt;/a&gt; - Multi-platform fork of the peCloak.py automated malware antivirus evasion tool.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#books"&gt;
  &lt;/a&gt;
  Books
&lt;/h2&gt;

&lt;p&gt;See also &lt;a href="https://www.defcon.org/html/links/book-list.html"&gt;DEF CON Suggested Reading&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/Advanced-Penetration-Testing-Hacking-Networks/dp/1119367689/"&gt;Advanced Penetration Testing by Wil Allsopp, 2017&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.packtpub.com/networking-and-servers/advanced-penetration-testing-highly-secured-environments-ultimate-security-gu"&gt;Advanced Penetration Testing for Highly-Secured Environments by Lee Allen, 2012&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.com/Advanced-Persistent-Threat-Hacking-Organization/dp/0071828362"&gt;Advanced Persistent Threat Hacking: The Art and Science of Hacking Any Organization by Tyler Wrightson, 2014&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.wiley.com/WileyCDA/WileyTitle/productCd-111860864X.html"&gt;Android Hacker's Handbook by Joshua J. Drake et al., 2014&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.de/Blue-Team-Field-Manual-BTFM/dp/154101636X"&gt;BTFM: Blue Team Field Manual by Alan J White &amp;amp; Ben Clark, 2017&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.com/Black-Hat-Python-Programming-Pentesters/dp/1593275900"&gt;Black Hat Python: Python Programming for Hackers and Pentesters by Justin Seitz, 2014&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nostarch.com/bughunter"&gt;Bug Hunter's Diary by Tobias Klein, 2011&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nostarch.com/carhacking"&gt;Car Hacker's Handbook by Craig Smith, 2016&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.fuzzing.org/"&gt;Fuzzing: Brute Force Vulnerability Discovery by Michael Sutton et al., 2007&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nostarch.com/metasploit"&gt;Metasploit: The Penetration Tester's Guide by David Kennedy et al., 2011&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nostarch.com/pentesting"&gt;Penetration Testing: A Hands-On Introduction to Hacking by Georgia Weidman, 2014&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.com/Penetration-Testing-Procedures-Methodologies-EC-Council/dp/1435483677"&gt;Penetration Testing: Procedures &amp;amp; Methodologies by EC-Council, 2010&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.elsevier.com/books/professional-penetration-testing/wilhelm/978-1-59749-993-4"&gt;Professional Penetration Testing by Thomas Wilhelm, 2013&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.com/Rtfm-Red-Team-Field-Manual/dp/1494295504/"&gt;RTFM: Red Team Field Manual by Ben Clark, 2014&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nostarch.com/hacking2.htm"&gt;The Art of Exploitation by Jon Erickson, 2008&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.elsevier.com/books/the-basics-of-hacking-and-penetration-testing/engebretson/978-1-59749-655-1"&gt;The Basics of Hacking and Penetration Testing by Patrick Engebretson, 2013&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.wiley.com/WileyCDA/WileyTitle/productCd-0764578014.html"&gt;The Database Hacker's Handbook, David Litchfield et al., 2005&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.com/The-Hacker-Playbook-Practical-Penetration/dp/1494932636/"&gt;The Hacker Playbook by Peter Kim, 2014&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.wiley.com/WileyCDA/WileyTitle/productCd-0470395362.html"&gt;The Mac Hacker's Handbook by Charlie Miller &amp;amp; Dino Dai Zovi, 2009&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.wiley.com/WileyCDA/WileyTitle/productCd-1118958500.html"&gt;The Mobile Application Hacker's Handbook by Dominic Chell et al., 2015&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.com/Unauthorised-Access-Physical-Penetration-Security-ebook/dp/B005DIAPKE"&gt;Unauthorised Access: Physical Penetration Testing For IT Security Teams by Wil Allsopp, 2010&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.elsevier.com/books/violent-python/unknown/978-1-59749-957-6"&gt;Violent Python by TJ O'Connor, 2012&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.wiley.com/WileyCDA/WileyTitle/productCd-1118204123.html"&gt;iOS Hacker's Handbook by Charlie Miller et al., 2012&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#malware-analysis-books"&gt;
  &lt;/a&gt;
  Malware Analysis Books
&lt;/h3&gt;

&lt;p&gt;See &lt;a href="https://github.com/rshipp/awesome-malware-analysis#books"&gt;awesome-malware-analysis § Books&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ctf-tools"&gt;
  &lt;/a&gt;
  CTF Tools
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://trailofbits.github.io/ctf/"&gt;CTF Field Guide&lt;/a&gt; - Everything you need to win your next CTF competition.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ciphey/ciphey"&gt;Ciphey&lt;/a&gt; - Automated decryption tool using artificial intelligence and natural language processing.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Ganapati/RsaCtfTool"&gt;RsaCtfTool&lt;/a&gt; - Decrypt data enciphered using weak RSA keys, and recover private keys from public keys using a variety of automated attacks.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/zardus/ctf-tools"&gt;ctf-tools&lt;/a&gt; - Collection of setup scripts to install various security research tools easily and quickly deployable to new machines.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/0x00-0x00/shellpop"&gt;shellpop&lt;/a&gt; - Easily generate sophisticated reverse or bind shell commands to help you save time during penetration tests.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#collaboration-tools"&gt;
  &lt;/a&gt;
  Collaboration Tools
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://dradisframework.com"&gt;Dradis&lt;/a&gt; - Open-source reporting and collaboration tool for IT security professionals.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/lair-framework/lair/wiki"&gt;Lair&lt;/a&gt; - Reactive attack collaboration framework and web application built with meteor.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://gitlab.com/invuls/pentest-projects/pcf"&gt;Pentest Collaboration Framework (PCF)&lt;/a&gt; - Open source, cross-platform, and portable toolkit for automating routine pentest processes with a team.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://reconmap.org/"&gt;Reconmap&lt;/a&gt; - Open-source collaboration platform for InfoSec professionals that streamlines the pentest process.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/outflanknl/RedELK"&gt;RedELK&lt;/a&gt; - Track and alarm about Blue Team activities while providing better usability in long term offensive operations.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conferences-and-events"&gt;
  &lt;/a&gt;
  Conferences and Events
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://www.securitybsides.com/"&gt;BSides&lt;/a&gt; - Framework for organising and holding security conferences.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://ctftime.org/"&gt;CTFTime.org&lt;/a&gt; - Directory of upcoming and archive of past Capture The Flag (CTF) competitions with links to challenge writeups.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#asia"&gt;
  &lt;/a&gt;
  Asia
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://conference.hitb.org/"&gt;HITB&lt;/a&gt; - Deep-knowledge security conference held in Malaysia and The Netherlands.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://hitcon.org/"&gt;HITCON&lt;/a&gt; - Hacks In Taiwan Conference held in Taiwan.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://nullcon.net/website/"&gt;Nullcon&lt;/a&gt; - Annual conference in Delhi and Goa, India.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://secuinside.com"&gt;SECUINSIDE&lt;/a&gt; - Security Conference in Seoul.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#europe"&gt;
  &lt;/a&gt;
  Europe
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://44con.com/"&gt;44Con&lt;/a&gt; - Annual Security Conference held in London.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.balccon.org"&gt;BalCCon&lt;/a&gt; - Balkan Computer Congress, annually held in Novi Sad, Serbia.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://brucon.org"&gt;BruCON&lt;/a&gt; - Annual security conference in Belgium.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://events.ccc.de/congress/"&gt;CCC&lt;/a&gt; - Annual meeting of the international hacker scene in Germany.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://deepsec.net/"&gt;DeepSec&lt;/a&gt; - Security Conference in Vienna, Austria.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://def.camp/"&gt;DefCamp&lt;/a&gt; - Largest Security Conference in Eastern Europe, held annually in Bucharest, Romania.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://fsec.foi.hr"&gt;FSec&lt;/a&gt; - FSec - Croatian Information Security Gathering in Varaždin, Croatia.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://hack.lu/"&gt;Hack.lu&lt;/a&gt; - Annual conference held in Luxembourg.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.infosecurityeurope.com/"&gt;Infosecurity Europe&lt;/a&gt; - Europe's number one information security event, held in London, UK.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.steelcon.info/"&gt;SteelCon&lt;/a&gt; - Security conference in Sheffield UK.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.swisscyberstorm.com/"&gt;Swiss Cyber Storm&lt;/a&gt; - Annual security conference in Lucerne, Switzerland.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.troopers.de"&gt;Troopers&lt;/a&gt; - Annual international IT Security event with workshops held in Heidelberg, Germany.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://honeycon.eu/"&gt;HoneyCON&lt;/a&gt; - Annual Security Conference in Guadalajara, Spain. Organized by the HoneySEC association.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#north-america"&gt;
  &lt;/a&gt;
  North America
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://appsecusa.org/"&gt;AppSecUSA&lt;/a&gt; - Annual conference organized by OWASP.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.blackhat.com/"&gt;Black Hat&lt;/a&gt; - Annual security conference in Las Vegas.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://carolinacon.org/"&gt;CarolinaCon&lt;/a&gt; - Infosec conference, held annually in North Carolina.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.defcon.org/"&gt;DEF CON&lt;/a&gt; - Annual hacker convention in Las Vegas.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.derbycon.com/"&gt;DerbyCon&lt;/a&gt; - Annual hacker conference based in Louisville.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://hnd.techlearningcollective.com/"&gt;Hackers Next Door&lt;/a&gt; - Cybersecurity and social technology conference held in New York City.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://hope.net/"&gt;Hackers On Planet Earth (HOPE)&lt;/a&gt; - Semi-annual conference held in New York City.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://hackfest.ca"&gt;Hackfest&lt;/a&gt; - Largest hacking conference in Canada.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.layerone.org/"&gt;LayerOne&lt;/a&gt; - Annual US security conference held every spring in Los Angeles.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.nationalcybersummit.com/"&gt;National Cyber Summit&lt;/a&gt; - Annual US security conference and Capture the Flag event, held in Huntsville, Alabama, USA.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://phreaknic.info/"&gt;PhreakNIC&lt;/a&gt; - Technology conference held annually in middle Tennessee.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.rsaconference.com/"&gt;RSA Conference USA&lt;/a&gt; - Annual security conference in San Francisco, California, USA.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://shmoocon.org/"&gt;ShmooCon&lt;/a&gt; - Annual US East coast hacker convention.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.skydogcon.com/"&gt;SkyDogCon&lt;/a&gt; - Technology conference in Nashville.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.summercon.org/"&gt;SummerCon&lt;/a&gt; - One of the oldest hacker conventions in America, held during Summer.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://thotcon.org/"&gt;ThotCon&lt;/a&gt; - Annual US hacker conference held in Chicago.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.virusbulletin.com/conference/index"&gt;Virus Bulletin Conference&lt;/a&gt; - Annual conference going to be held in Denver, USA for 2016.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#south-america"&gt;
  &lt;/a&gt;
  South America
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://www.ekoparty.org"&gt;Ekoparty&lt;/a&gt; - Largest Security Conference in Latin America, held annually in Buenos Aires, Argentina.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.h2hc.com.br/"&gt;Hackers to Hackers Conference (H2HC)&lt;/a&gt; - Oldest security research (hacking) conference in Latin America and one of the oldest ones still active in the world.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#zealandia"&gt;
  &lt;/a&gt;
  Zealandia
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://chcon.nz"&gt;CHCon&lt;/a&gt; - Christchurch Hacker Con, Only South Island of New Zealand hacker con.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#exfiltration-tools"&gt;
  &lt;/a&gt;
  Exfiltration Tools
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/sensepost/DET"&gt;DET&lt;/a&gt; - Proof of concept to perform data exfiltration using either single or multiple channel(s) at the same time.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://code.kryo.se/iodine/"&gt;Iodine&lt;/a&gt; - Tunnel IPv4 data through a DNS server; useful for exfiltration from networks where Internet access is firewalled, but DNS queries are allowed.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/trustedsec/trevorc2"&gt;TrevorC2&lt;/a&gt; - Client/server tool for masking command and control and data exfiltration through a normally browsable website, not typical HTTP POST requests.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/iagox86/dnscat2"&gt;dnscat2&lt;/a&gt; - Tool designed to create an encrypted command and control channel over the DNS protocol, which is an effective tunnel out of almost every network.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/samyk/pwnat"&gt;pwnat&lt;/a&gt; - Punches holes in firewalls and NATs.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://tgcd.sourceforge.net/"&gt;tgcd&lt;/a&gt; - Simple Unix network utility to extend the accessibility of TCP/IP based network services beyond firewalls.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ariary/QueenSono"&gt;QueenSono&lt;/a&gt; - Client/Server Binaries for data exfiltration with ICMP. Useful in a network where ICMP protocol is less monitored than others (which is a common case).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#exploit-development-tools"&gt;
  &lt;/a&gt;
  Exploit Development Tools
&lt;/h2&gt;

&lt;p&gt;See also &lt;em&gt;&lt;a href="#reverse-engineering-tools"&gt;Reverse Engineering Tools&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/trustedsec/unicorn"&gt;Magic Unicorn&lt;/a&gt; - Shellcode generator for numerous attack vectors, including Microsoft Office macros, PowerShell, HTML applications (HTA), or &lt;code&gt;certutil&lt;/code&gt; (using fake certificates).&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Gallopsled/pwntools"&gt;Pwntools&lt;/a&gt; - Rapid exploit development framework built for use in CTFs.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/longld/peda"&gt;peda&lt;/a&gt; - Python Exploit Development Assistance for GDB.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/rastating/wordpress-exploit-framework"&gt;Wordpress Exploit Framework&lt;/a&gt; - Ruby framework for developing and using modules which aid in the penetration testing of WordPress powered websites and systems.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#file-format-analysis-tools"&gt;
  &lt;/a&gt;
  File Format Analysis Tools
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.sno.phy.queensu.ca/~phil/exiftool/"&gt;ExifTool&lt;/a&gt; - Platform-independent Perl library plus a command-line application for reading, writing and editing meta information in a wide variety of files.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://hachoir.readthedocs.io/"&gt;Hachoir&lt;/a&gt; - Python library to view and edit a binary stream as tree of fields and tools for metadata extraction.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://kaitai.io/"&gt;Kaitai Struct&lt;/a&gt; - File formats and network protocols dissection language and web IDE, generating parsers in C++, C#, Java, JavaScript, Perl, PHP, Python, Ruby.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://eternal-todo.com/tools/peepdf-pdf-analysis-tool"&gt;peepdf&lt;/a&gt; - Python tool to explore PDF files in order to find out if the file can be harmful or not.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://codisec.com/veles/"&gt;Veles&lt;/a&gt; - Binary data visualization and analysis tool.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#gnulinux-utilities"&gt;
  &lt;/a&gt;
  GNU/Linux Utilities
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/n00py/Hwacha"&gt;Hwacha&lt;/a&gt; - Post-exploitation tool to quickly execute payloads via SSH on one or more Linux systems simultaneously.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/PenturaLabs/Linux_Exploit_Suggester"&gt;Linux Exploit Suggester&lt;/a&gt; - Heuristic reporting on potentially viable exploits for a given GNU/Linux system.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://cisofy.com/lynis/"&gt;Lynis&lt;/a&gt; - Auditing tool for UNIX-based systems.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.trapkit.de/tools/checksec.html"&gt;checksec.sh&lt;/a&gt; - Shell script designed to test what standard Linux OS and PaX security features are being used.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#hash-cracking-tools"&gt;
  &lt;/a&gt;
  Hash Cracking Tools
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/glv2/bruteforce-wallet"&gt;BruteForce Wallet&lt;/a&gt; - Find the password of an encrypted wallet file (i.e. &lt;code&gt;wallet.dat&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://digi.ninja/projects/cewl.php"&gt;CeWL&lt;/a&gt; - Generates custom wordlists by spidering a target's website and collecting unique words.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/nil0x42/duplicut"&gt;duplicut&lt;/a&gt; - Quickly remove duplicates, without changing the order, and without getting OOM on huge wordlists.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/fireeye/gocrack"&gt;GoCrack&lt;/a&gt; - Management Web frontend for distributed password cracking sessions using hashcat (or other supported tools) written in Go.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://hashcat.net/hashcat/"&gt;Hashcat&lt;/a&gt; - The more fast hash cracker.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/trustedsec/hate_crack"&gt;hate_crack&lt;/a&gt; - Tool for automating cracking methodologies through Hashcat.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/lmammino/jwt-cracker"&gt;JWT Cracker&lt;/a&gt; - Simple HS256 JSON Web Token (JWT) token brute force cracker.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.openwall.com/john/"&gt;John the Ripper&lt;/a&gt; - Fast password cracker.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://rarcrack.sourceforge.net"&gt;Rar Crack&lt;/a&gt; - RAR bruteforce cracker.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#hex-editors"&gt;
  &lt;/a&gt;
  Hex Editors
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/bwrsandman/Bless"&gt;Bless&lt;/a&gt; - High quality, full featured, cross-platform graphical hex editor written in Gtk#.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://frhed.sourceforge.net/"&gt;Frhed&lt;/a&gt; - Binary file editor for Windows.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://ridiculousfish.com/hexfiend/"&gt;Hex Fiend&lt;/a&gt; - Fast, open source, hex editor for macOS with support for viewing  binary diffs.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://hexed.it"&gt;HexEdit.js&lt;/a&gt; - Browser-based hex editing.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://hexinator.com/"&gt;Hexinator&lt;/a&gt; - World's finest (proprietary, commercial) Hex Editor.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/pixel/hexedit"&gt;hexedit&lt;/a&gt; - Simple, fast, console-based hex editor.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.wxhexeditor.org/"&gt;wxHexEditor&lt;/a&gt; - Free GUI hex editor for GNU/Linux, macOS, and Windows.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#industrial-control-and-scada-systems"&gt;
  &lt;/a&gt;
  Industrial Control and SCADA Systems
&lt;/h2&gt;

&lt;p&gt;See also &lt;a href="https://github.com/hslatman/awesome-industrial-control-system-security"&gt;awesome-industrial-control-system-security&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/dark-lbp/isf"&gt;Industrial Exploitation Framework (ISF)&lt;/a&gt; - Metasploit-like exploit framework based on routersploit designed to target Industrial Control Systems (ICS), SCADA devices, PLC firmware, and more.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/klsecservices/s7scan"&gt;s7scan&lt;/a&gt; - Scanner for enumerating Siemens S7 PLCs on a TCP/IP or LLC network.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#intentionally-vulnerable-systems"&gt;
  &lt;/a&gt;
  Intentionally Vulnerable Systems
&lt;/h2&gt;

&lt;p&gt;See also &lt;a href="https://github.com/kaiiyer/awesome-vulnerable"&gt;awesome-vulnerable&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#intentionally-vulnerable-systems-as-docker-containers"&gt;
  &lt;/a&gt;
  Intentionally Vulnerable Systems as Docker Containers
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://hub.docker.com/r/citizenstig/dvwa/"&gt;Damn Vulnerable Web Application (DVWA)&lt;/a&gt; - &lt;code&gt;docker pull citizenstig/dvwa&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/bkimminich/juice-shop#docker-container--"&gt;OWASP Juice Shop&lt;/a&gt; - &lt;code&gt;docker pull bkimminich/juice-shop&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://hub.docker.com/r/citizenstig/nowasp/"&gt;OWASP Mutillidae II Web Pen-Test Practice Application&lt;/a&gt; - &lt;code&gt;docker pull citizenstig/nowasp&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/owasp/nodegoat#option-3---run-nodegoat-on-docker"&gt;OWASP NodeGoat&lt;/a&gt; - &lt;code&gt;docker-compose build &amp;amp;&amp;amp; docker-compose up&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://hub.docker.com/r/ismisepaul/securityshepherd/"&gt;OWASP Security Shepherd&lt;/a&gt; - &lt;code&gt;docker pull ismisepaul/securityshepherd&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://hub.docker.com/r/webgoat/webgoat-7.1/"&gt;OWASP WebGoat Project 7.1 docker image&lt;/a&gt; - &lt;code&gt;docker pull webgoat/webgoat-7.1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://hub.docker.com/r/webgoat/webgoat-8.0/"&gt;OWASP WebGoat Project 8.0 docker image&lt;/a&gt; - &lt;code&gt;docker pull webgoat/webgoat-8.0&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://hub.docker.com/r/hmlio/vaas-cve-2014-0160/"&gt;Vulnerability as a service: Heartbleed&lt;/a&gt; - &lt;code&gt;docker pull hmlio/vaas-cve-2014-0160&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://hub.docker.com/r/vulnerables/cve-2017-7494/"&gt;Vulnerability as a service: SambaCry&lt;/a&gt; - &lt;code&gt;docker pull vulnerables/cve-2017-7494&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://hub.docker.com/r/hmlio/vaas-cve-2014-6271/"&gt;Vulnerability as a service: Shellshock&lt;/a&gt; - &lt;code&gt;docker pull hmlio/vaas-cve-2014-6271&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://hub.docker.com/r/wpscanteam/vulnerablewordpress/"&gt;Vulnerable WordPress Installation&lt;/a&gt; - &lt;code&gt;docker pull wpscanteam/vulnerablewordpress&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#lock-picking"&gt;
  &lt;/a&gt;
  Lock Picking
&lt;/h2&gt;

&lt;p&gt;See &lt;a href="https://github.com/fabacab/awesome-lockpicking"&gt;awesome-lockpicking&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#macos-utilities"&gt;
  &lt;/a&gt;
  macOS Utilities
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/kdaoudieh/Bella"&gt;Bella&lt;/a&gt; - Pure Python post-exploitation data mining and remote administration tool for macOS.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Marten4n6/EvilOSX"&gt;EvilOSX&lt;/a&gt; - Modular RAT that uses numerous evasion and exfiltration techniques out-of-the-box.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#multiparadigm-frameworks"&gt;
  &lt;/a&gt;
  Multi-paradigm Frameworks
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://fastandeasyhacking.com/"&gt;Armitage&lt;/a&gt; - Java-based GUI front-end for the Metasploit Framework.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/NullArray/AutoSploit"&gt;AutoSploit&lt;/a&gt; - Automated mass exploiter, which collects target by employing the Shodan.io API and programmatically chooses Metasploit exploit modules based on the Shodan query.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/stevenaldinger/decker"&gt;Decker&lt;/a&gt; - Penetration testing orchestration and automation framework, which allows writing declarative, reusable configurations capable of ingesting variables and using outputs of tools it has run as inputs to others.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/infobyte/faraday"&gt;Faraday&lt;/a&gt; - Multiuser integrated pentesting environment for red teams performing cooperative penetration tests, security audits, and risk assessments.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.metasploit.com/"&gt;Metasploit&lt;/a&gt; - Software for offensive security teams to help verify vulnerabilities and manage security assessments.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/n1nj4sec/pupy"&gt;Pupy&lt;/a&gt; - Cross-platform (Windows, Linux, macOS, Android) remote administration and post-exploitation tool.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#network-tools"&gt;
  &lt;/a&gt;
  Network Tools
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/byt3bl33d3r/CrackMapExec"&gt;CrackMapExec&lt;/a&gt; - Swiss army knife for pentesting networks.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/SpiderLabs/ikeforce"&gt;IKEForce&lt;/a&gt; - Command line IPSEC VPN brute forcing tool for Linux that allows group name/ID enumeration and XAUTH brute forcing capabilities.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://sniff.su/"&gt;Intercepter-NG&lt;/a&gt; - Multifunctional network toolkit.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/GoVanguard/legion"&gt;Legion&lt;/a&gt; - Graphical semi-automated discovery and reconnaissance framework based on Python 3  and forked from SPARTA.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://network-tools.com/"&gt;Network-Tools.com&lt;/a&gt; - Website offering an interface to numerous basic network utilities like &lt;code&gt;ping&lt;/code&gt;, &lt;code&gt;traceroute&lt;/code&gt;, &lt;code&gt;whois&lt;/code&gt;, and more.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://nmap.org/ncrack/"&gt;Ncrack&lt;/a&gt; - High-speed network authentication cracking tool built to help companies secure their networks by proactively testing all their hosts and networking devices for poor passwords.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://h.foofus.net/?page_id=218"&gt;Praeda&lt;/a&gt; - Automated multi-function printer data harvester for gathering usable data during security assessments.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/RUB-NDS/PRET"&gt;Printer Exploitation Toolkit (PRET)&lt;/a&gt; - Tool for printer security testing capable of IP and USB connectivity, fuzzing, and exploitation of PostScript, PJL, and PCL printer language features.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://sparta.secforce.com/"&gt;SPARTA&lt;/a&gt; - Graphical interface offering scriptable, configurable access to existing network infrastructure scanning and enumeration tools.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/SigPloiter/SigPloit"&gt;SigPloit&lt;/a&gt; - Signaling security testing framework dedicated to telecom security for researching vulnerabilites in the signaling protocols used in mobile (cellular phone) operators.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Sab0tag3d/SIET"&gt;Smart Install Exploitation Tool (SIET)&lt;/a&gt; - Scripts for identifying Cisco Smart Install-enabled switches on a network and then manipulating them.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/vanhauser-thc/thc-hydra"&gt;THC Hydra&lt;/a&gt; - Online password cracking tool with built-in support for many network protocols, including HTTP, SMB, FTP, telnet, ICQ, MySQL, LDAP, IMAP, VNC, and more.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/google/tsunami-security-scanner"&gt;Tsunami&lt;/a&gt; - General purpose network security scanner with an extensible plugin system for detecting high severity vulnerabilities with high confidence.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/hatRiot/zarp"&gt;Zarp&lt;/a&gt; - Network attack tool centered around the exploitation of local networks.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/elceef/dnstwist"&gt;dnstwist&lt;/a&gt; - Domain name permutation engine for detecting typo squatting, phishing and corporate espionage.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.monkey.org/~dugsong/dsniff/"&gt;dsniff&lt;/a&gt; - Collection of tools for network auditing and pentesting.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/CoreSecurity/impacket"&gt;impacket&lt;/a&gt; - Collection of Python classes for working with network protocols.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/RedTeamOperations/PivotSuite"&gt;pivotsuite&lt;/a&gt; - Portable, platform independent and powerful network pivoting toolkit.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/reverse-shell/routersploit"&gt;routersploit&lt;/a&gt; - Open source exploitation framework similar to Metasploit but dedicated to embedded devices.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/kpcyrd/rshijack"&gt;rshijack&lt;/a&gt; - TCP connection hijacker, Rust rewrite of &lt;code&gt;shijack&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#ddos-tools"&gt;
  &lt;/a&gt;
  DDoS Tools
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/rozgo/anevicon"&gt;Anevicon&lt;/a&gt; - Powerful UDP-based load generator, written in Rust.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://sourceforge.net/projects/high-orbit-ion-cannon/"&gt;HOIC&lt;/a&gt; - Updated version of Low Orbit Ion Cannon, has 'boosters' to get around common counter measures.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/NewEraCracker/LOIC"&gt;Low Orbit Ion Canon (LOIC)&lt;/a&gt; - Open source network stress tool written for Windows.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/649/Memcrashed-DDoS-Exploit"&gt;Memcrashed&lt;/a&gt; - DDoS attack tool for sending forged UDP packets to vulnerable Memcached servers obtained using Shodan API.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/gkbrk/slowloris"&gt;SlowLoris&lt;/a&gt; - DoS tool that uses low bandwidth on the attacking side.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://gitlab.com/fredericopissarra/t50/"&gt;T50&lt;/a&gt; - Faster network stress tool.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/epsylon/ufonet"&gt;UFONet&lt;/a&gt; - Abuses OSI layer 7 HTTP to create/manage 'zombies' and to conduct different attacks using; &lt;code&gt;GET&lt;/code&gt;/&lt;code&gt;POST&lt;/code&gt;, multithreading, proxies, origin spoofing methods, cache evasion techniques, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#network-reconnaissance-tools"&gt;
  &lt;/a&gt;
  Network Reconnaissance Tools
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/cyberark/ACLight"&gt;ACLight&lt;/a&gt; - Script for advanced discovery of sensitive Privileged Accounts - includes Shadow Admins.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/michenriksen/aquatone"&gt;AQUATONE&lt;/a&gt; - Subdomain discovery tool utilizing various open sources producing a report that can be used as input to other tools.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/m0rtem/CloudFail"&gt;CloudFail&lt;/a&gt; - Unmask server IP addresses hidden behind Cloudflare by searching old database records and detecting misconfigured DNS.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dnsdumpster.com/"&gt;DNSDumpster&lt;/a&gt; - Online DNS recon and search service.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/robertdavidgraham/masscan"&gt;Mass Scan&lt;/a&gt; - TCP port scanner, spews SYN packets asynchronously, scanning entire Internet in under 5 minutes.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/OWASP/Amass"&gt;OWASP Amass&lt;/a&gt; - Subdomain enumeration via scraping, web archives, brute forcing, permutations, reverse DNS sweeping, TLS certificates, passive DNS data sources, etc.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/johnnyxmas/ScanCannon"&gt;ScanCannon&lt;/a&gt; - Python script to quickly enumerate large networks by calling &lt;code&gt;masscan&lt;/code&gt; to quickly identify open ports and then &lt;code&gt;nmap&lt;/code&gt; to gain details on the systems/services on those ports.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/evilsocket/xray"&gt;XRay&lt;/a&gt; - Network (sub)domain discovery and reconnaissance automation tool.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/fwaeytens/dnsenum/"&gt;dnsenum&lt;/a&gt; - Perl script that enumerates DNS information from a domain, attempts zone transfers, performs a brute force dictionary style attack, and then performs reverse look-ups on the results.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/makefu/dnsmap/"&gt;dnsmap&lt;/a&gt; - Passive DNS network mapper.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/darkoperator/dnsrecon/"&gt;dnsrecon&lt;/a&gt; - DNS enumeration script.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.mavetju.org/unix/dnstracer.php"&gt;dnstracer&lt;/a&gt; - Determines where a given DNS server gets its information from, and follows the chain of DNS servers.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mschwager/fierce"&gt;fierce&lt;/a&gt; - Python3 port of the original &lt;code&gt;fierce.pl&lt;/code&gt; DNS reconnaissance tool for locating non-contiguous IP space.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://nmap.org/"&gt;nmap&lt;/a&gt; - Free security scanner for network exploration &amp;amp; security audits.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/chrislee35/passivedns-client"&gt;passivedns-client&lt;/a&gt; - Library and query tool for querying several passive DNS providers.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/gamelinux/passivedns"&gt;passivedns&lt;/a&gt; - Network sniffer that logs all DNS server replies for use in a passive DNS setup.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/rustscan/rustscan"&gt;RustScan&lt;/a&gt; - Lightweight and quick open-source port scanner designed to automatically pipe open ports into Nmap.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/vesche/scanless"&gt;scanless&lt;/a&gt; - Utility for using websites to perform port scans on your behalf so as not to reveal your own IP.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ShawnDEvans/smbmap"&gt;smbmap&lt;/a&gt; - Handy SMB enumeration tool.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/TheRook/subbrute"&gt;subbrute&lt;/a&gt; - DNS meta-query spider that enumerates DNS records, and subdomains.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://zmap.io/"&gt;zmap&lt;/a&gt; - Open source network scanner that enables researchers to easily perform Internet-wide network studies.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#protocol-analyzers-and-sniffers"&gt;
  &lt;/a&gt;
  Protocol Analyzers and Sniffers
&lt;/h3&gt;

&lt;p&gt;See also &lt;a href="https://github.com/caesar0301/awesome-pcaptools"&gt;awesome-pcaptools&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://www.iwaxx.com/debookee/"&gt;Debookee&lt;/a&gt; - Simple and powerful network traffic analyzer for macOS.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/USArmyResearchLab/Dshell"&gt;Dshell&lt;/a&gt; - Network forensic analysis framework.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/netzob/netzob"&gt;Netzob&lt;/a&gt; - Reverse engineering, traffic generation and fuzzing of communication protocols.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.wireshark.org/"&gt;Wireshark&lt;/a&gt; - Widely-used graphical, cross-platform network protocol analyzer.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/netsniff-ng/netsniff-ng"&gt;netsniff-ng&lt;/a&gt; - Swiss army knife for network sniffing.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/kpcyrd/sniffglue"&gt;sniffglue&lt;/a&gt; - Secure multithreaded packet sniffer.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.tcpdump.org/"&gt;tcpdump/libpcap&lt;/a&gt; - Common packet analyzer that runs under the command line.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#network-traffic-replay-and-editing-tools"&gt;
  &lt;/a&gt;
  Network Traffic Replay and Editing Tools
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.tracewrangler.com/"&gt;TraceWrangler&lt;/a&gt; - Network capture file toolkit that can edit and merge &lt;code&gt;pcap&lt;/code&gt; or &lt;code&gt;pcapng&lt;/code&gt; files with batch editing features.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://wireedit.com/"&gt;WireEdit&lt;/a&gt; - Full stack WYSIWYG pcap editor (requires a free license to edit packets).&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://bittwist.sourceforge.net/"&gt;bittwist&lt;/a&gt; - Simple yet powerful libpcap-based Ethernet packet generator useful in simulating networking traffic or scenario, testing firewall, IDS, and IPS, and troubleshooting various network problems.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/antirez/hping"&gt;hping3&lt;/a&gt; - Network tool able to send custom TCP/IP packets.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/rafael-santiago/pig"&gt;pig&lt;/a&gt; - GNU/Linux packet crafting tool.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/secdev/scapy"&gt;scapy&lt;/a&gt; - Python-based interactive packet manipulation program and library.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://tcpreplay.appneta.com/"&gt;tcpreplay&lt;/a&gt; - Suite of free Open Source utilities for editing and replaying previously captured network traffic.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#proxies-and-machineinthemiddle-mitm-tools"&gt;
  &lt;/a&gt;
  Proxies and Machine-in-the-Middle (MITM) Tools
&lt;/h3&gt;

&lt;p&gt;See also &lt;em&gt;&lt;a href="#intercepting-web-proxies"&gt;Intercepting Web proxies&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.bettercap.org/"&gt;BetterCAP&lt;/a&gt; - Modular, portable and easily extensible MITM framework.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.ettercap-project.org"&gt;Ettercap&lt;/a&gt; - Comprehensive, mature suite for machine-in-the-middle attacks.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/portantier/habu"&gt;Habu&lt;/a&gt; - Python utility implementing a variety of network attacks, such as ARP poisoning, DHCP starvation, and more.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/puresec/lambda-proxy"&gt;Lambda-Proxy&lt;/a&gt; - Utility for testing SQL Injection vulnerabilities on AWS Lambda serverless functions.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/byt3bl33d3r/MITMf"&gt;MITMf&lt;/a&gt; - Framework for Man-In-The-Middle attacks.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/r00t-3xp10it/morpheus"&gt;Morpheus&lt;/a&gt; - Automated ettercap TCP/IP Hijacking tool.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/jtesta/ssh-mitm"&gt;SSH MITM&lt;/a&gt; - Intercept SSH connections with a proxy; all plaintext passwords and sessions are logged to disk.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/iphelix/dnschef"&gt;dnschef&lt;/a&gt; - Highly configurable DNS proxy for pentesters.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/infobyte/evilgrade"&gt;evilgrade&lt;/a&gt; - Modular framework to take advantage of poor upgrade implementations by injecting fake updates.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/justmao945/mallory"&gt;mallory&lt;/a&gt; - HTTP/HTTPS proxy over SSH.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/nametoolong/oregano"&gt;oregano&lt;/a&gt; - Python module that runs as a machine-in-the-middle (MITM) accepting Tor client requests.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dlrobertson.github.io/sylkie/"&gt;sylkie&lt;/a&gt; - Command line tool and library for testing networks for common address spoofing security vulnerabilities in IPv6 networks using the Neighbor Discovery Protocol.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#transport-layer-security-tools"&gt;
  &lt;/a&gt;
  Transport Layer Security Tools
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/nabla-c0d3/sslyze"&gt;SSLyze&lt;/a&gt; - Fast and comprehensive TLS/SSL configuration analyzer to help identify security mis-configurations.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/crackpkcs12/crackpkcs12"&gt;crackpkcs12&lt;/a&gt; - Multithreaded program to crack PKCS#12 files (&lt;code&gt;.p12&lt;/code&gt; and &lt;code&gt;.pfx&lt;/code&gt; extensions), such as TLS/SSL certificates.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/drwetter/testssl.sh"&gt;testssl.sh&lt;/a&gt; - Command line tool which checks a server's service on any port for the support of TLS/SSL ciphers, protocols as well as some cryptographic flaws.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/WestpointLtd/tls_prober"&gt;tls_prober&lt;/a&gt; - Fingerprint a server's SSL/TLS implementation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#wireless-network-tools"&gt;
  &lt;/a&gt;
  Wireless Network Tools
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://www.aircrack-ng.org/"&gt;Aircrack-ng&lt;/a&gt; - Set of tools for auditing wireless networks.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/v1s1t0r1sh3r3/airgeddon"&gt;Airgeddon&lt;/a&gt; - Multi-use bash script for Linux systems to audit wireless networks.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/MisterBianco/BoopSuite"&gt;BoopSuite&lt;/a&gt; - Suite of tools written in Python for wireless auditing.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://git.kali.org/gitweb/?p=packages/bully.git;a=summary"&gt;Bully&lt;/a&gt; - Implementation of the WPS brute force attack, written in C.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/joswr1ght/cowpatty"&gt;Cowpatty&lt;/a&gt; - Brute-force dictionary attack against WPA-PSK.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/FluxionNetwork/fluxion"&gt;Fluxion&lt;/a&gt; - Suite of automated social engineering based WPA attacks.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/securingsam/krackdetector"&gt;KRACK Detector&lt;/a&gt; - Detect and prevent KRACK attacks in your network.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://kismetwireless.net/"&gt;Kismet&lt;/a&gt; - Wireless network detector, sniffer, and IDS.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/soxrok2212/PSKracker"&gt;PSKracker&lt;/a&gt; - Collection of WPA/WPA2/WPS default algorithms, password generators, and PIN generators written in C.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://code.google.com/archive/p/reaver-wps"&gt;Reaver&lt;/a&gt; - Brute force attack against WiFi Protected Setup.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.wifipineapple.com/"&gt;WiFi Pineapple&lt;/a&gt; - Wireless auditing and penetration testing platform.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/P0cL4bs/WiFi-Pumpkin"&gt;WiFi-Pumpkin&lt;/a&gt; - Framework for rogue Wi-Fi access point attack.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/derv82/wifite"&gt;Wifite&lt;/a&gt; - Automated wireless attack tool.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/entropy1337/infernal-twin"&gt;infernal-twin&lt;/a&gt; - Automated wireless hacking tool.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/vanhoefm/krackattacks-scripts"&gt;krackattacks-scripts&lt;/a&gt; - WPA2 Krack attack scripts.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/evilsocket/pwnagotchi"&gt;pwnagotchi&lt;/a&gt; - Deep reinforcement learning based AI that learns from the Wi-Fi environment and instruments BetterCAP in order to maximize the WPA key material captured.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/0x90/wifi-arsenal"&gt;wifi-arsenal&lt;/a&gt; - Resources for Wi-Fi Pentesting.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#network-vulnerability-scanners"&gt;
  &lt;/a&gt;
  Network Vulnerability Scanners
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/sethsec/celerystalk"&gt;celerystalk&lt;/a&gt; - Asynchronous enumeration and vulnerability scanner that "runs all the tools on all the hosts" in a configurable manner.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://kube-hunter.aquasec.com/"&gt;kube-hunter&lt;/a&gt; - Open-source tool that runs a set of tests ("hunters") for security issues in Kubernetes clusters from either outside ("attacker's view") or inside a cluster.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.tenable.com/products/nessus-vulnerability-scanner"&gt;Nessus&lt;/a&gt; - Commercial vulnerability management, configuration, and compliance assessment platform, sold by Tenable.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.netsparker.com/pricing/"&gt;Netsparker Application Security Scanner&lt;/a&gt; - Application security scanner to automatically find security flaws.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.rapid7.com/products/nexpose/"&gt;Nexpose&lt;/a&gt; - Commercial vulnerability and risk management assessment engine that integrates with Metasploit, sold by Rapid7.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.openvas.org/"&gt;OpenVAS&lt;/a&gt; - Free software implementation of the popular Nessus vulnerability assessment system.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/future-architect/vuls"&gt;Vuls&lt;/a&gt; - Agentless vulnerability scanner for GNU/Linux and FreeBSD, written in Go.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#web-vulnerability-scanners"&gt;
  &lt;/a&gt;
  Web Vulnerability Scanners
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/tijme/angularjs-csti-scanner"&gt;ACSTIS&lt;/a&gt; - Automated client-side template injection (sandbox escape/bypass) detection for AngularJS.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.arachni-scanner.com/"&gt;Arachni&lt;/a&gt; - Scriptable framework for evaluating the security of web applications.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/TheM4hd1/JCS"&gt;JCS&lt;/a&gt; - Joomla Vulnerability Component Scanner with automatic database updater from exploitdb and packetstorm.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://cirt.net/nikto2"&gt;Nikto&lt;/a&gt; - Noisy but fast black box web server and web application vulnerability scanner.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/UltimateHackers/sqlmate"&gt;SQLmate&lt;/a&gt; - Friend of &lt;code&gt;sqlmap&lt;/code&gt; that identifies SQLi vulnerabilities based on a given dork and (optional) website.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://secapps.com/"&gt;SecApps&lt;/a&gt; - In-browser web application security testing suite.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://wpscan.org/"&gt;WPScan&lt;/a&gt; - Black box WordPress vulnerability scanner.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://wapiti.sourceforge.net/"&gt;Wapiti&lt;/a&gt; - Black box web application vulnerability scanner with built-in fuzzer.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.webreaver.com/"&gt;WebReaver&lt;/a&gt; - Commercial, graphical web application vulnerability scanner designed for macOS.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://code.google.com/archive/p/cms-explorer/"&gt;cms-explorer&lt;/a&gt; - Reveal the specific modules, plugins, components and themes that various websites powered by content management systems are running.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.owasp.org/index.php/Category:OWASP_Joomla_Vulnerability_Scanner_Project"&gt;joomscan&lt;/a&gt; - Joomla vulnerability scanner.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/andresriancho/w3af"&gt;w3af&lt;/a&gt; - Web application attack and audit framework.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#online-resources"&gt;
  &lt;/a&gt;
  Online Resources
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#online-operating-systems-resources"&gt;
  &lt;/a&gt;
  Online Operating Systems Resources
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://distrowatch.com/search.php?category=Security"&gt;DistroWatch.com's Security Category&lt;/a&gt; - Website dedicated to talking about, reviewing, and keeping up to date with open source operating systems.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#online-penetration-testing-resources"&gt;
  &lt;/a&gt;
  Online Penetration Testing Resources
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://attack.mitre.org/"&gt;MITRE's Adversarial Tactics, Techniques &amp;amp; Common Knowledge (ATT&amp;amp;CK)&lt;/a&gt; - Curated knowledge base and model for cyber adversary behavior.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.offensive-security.com/metasploit-unleashed/"&gt;Metasploit Unleashed&lt;/a&gt; - Free Offensive Security Metasploit course.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.owasp.org/index.php/Main_Page"&gt;Open Web Application Security Project (OWASP)&lt;/a&gt; - Worldwide not-for-profit charitable organization focused on improving the security of especially Web-based and Application-layer software.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/nixawk/pentest-wiki"&gt;PENTEST-WIKI&lt;/a&gt; - Free online security knowledge library for pentesters and researchers.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.pentest-standard.org/"&gt;Penetration Testing Execution Standard (PTES)&lt;/a&gt; - Documentation designed to provide a common language and scope for performing and reporting the results of a penetration test.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.vulnerabilityassessment.co.uk/Penetration%20Test.html"&gt;Penetration Testing Framework (PTF)&lt;/a&gt; - Outline for performing penetration tests compiled as a general framework usable by vulnerability analysts and penetration testers alike.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.xss-payloads.com"&gt;XSS-Payloads&lt;/a&gt; - Resource dedicated to all things XSS (cross-site), including payloads, tools, games, and documentation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#other-lists-online"&gt;
  &lt;/a&gt;
  Other Lists Online
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/quozd/awesome-dotnet"&gt;.NET Programming&lt;/a&gt; - Software framework for Microsoft Windows platform development.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://administraitor.video"&gt;Infosec/hacking videos recorded by cooper&lt;/a&gt; - Collection of security conferences recorded by Cooper.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sundaysec/Android-Exploits"&gt;Android Exploits&lt;/a&gt; - Guide on Android Exploitation and Hacks.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ashishb/android-security-awesome"&gt;Android Security&lt;/a&gt; - Collection of Android security related resources.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/paragonie/awesome-appsec"&gt;AppSec&lt;/a&gt; - Resources for learning about application security.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/bayandin/awesome-awesomeness"&gt;Awesome Awesomness&lt;/a&gt; - The List of the Lists.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/fabacab/awesome-malware"&gt;Awesome Malware&lt;/a&gt; - Curated collection of awesome malware, botnets, and other post-exploitation tools.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/jakejarvis/awesome-shodan-queries"&gt;Awesome Shodan Queries&lt;/a&gt; - Awesome list of useful, funny, and depressing search queries for Shodan.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/toniblyx/my-arsenal-of-aws-security-tools"&gt;AWS Tool Arsenal&lt;/a&gt; - List of tools for testing and securing AWS environments.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/fabacab/awesome-cybersecurity-blueteam"&gt;Blue Team&lt;/a&gt; - Awesome resources, tools, and other shiny things for cybersecurity blue teams.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/fffaraz/awesome-cpp"&gt;C/C++ Programming&lt;/a&gt; - One of the main language for open source security tools.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/apsdehal/awesome-ctf"&gt;CTFs&lt;/a&gt; - Capture The Flag frameworks, libraries, etc.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Cugu/awesome-forensics"&gt;Forensics&lt;/a&gt; - Free (mostly open source) forensic analysis tools and resources.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/carpedm20/awesome-hacking"&gt;Hacking&lt;/a&gt; - Tutorials, tools, and resources.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/paralax/awesome-honeypots"&gt;Honeypots&lt;/a&gt; - Honeypots, tools, components, and more.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/AnarchoTechNYC/meta/wiki/InfoSec#hacking-challenges"&gt;InfoSec § Hacking challenges&lt;/a&gt; - Comprehensive directory of CTFs, wargames, hacking challenge websites, pentest practice lab exercises, and more.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/onlurking/awesome-infosec"&gt;Infosec&lt;/a&gt; - Information security resources for pentesting, forensics, and more.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sorrycc/awesome-javascript"&gt;JavaScript Programming&lt;/a&gt; - In-browser development and scripting.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://tools.kali.org/tools-listing"&gt;Kali Linux Tools&lt;/a&gt; - List of tools present in Kali Linux.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/awesome-nodejs"&gt;Node.js Programming by @sindresorhus&lt;/a&gt; - Curated list of delightful Node.js packages and resources.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/coreb1t/awesome-pentest-cheat-sheets"&gt;Pentest Cheat Sheets&lt;/a&gt; - Awesome Pentest Cheat Sheets.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/svaksha/pythonidae"&gt;Python Programming by @svaksha&lt;/a&gt; - General Python programming.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/vinta/awesome-python"&gt;Python Programming by @vinta&lt;/a&gt; - General Python programming.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/dloss/python-pentest-tools"&gt;Python tools for penetration testers&lt;/a&gt; - Lots of pentesting tools are written in Python.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/yeyintminthuhtut/Awesome-Red-Teaming"&gt;Red Teaming&lt;/a&gt; - List of Awesome Red Teaming Resources.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Sdogruyol/awesome-ruby"&gt;Ruby Programming by @Sdogruyol&lt;/a&gt; - The de-facto language for writing exploits.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/dreikanter/ruby-bookmarks"&gt;Ruby Programming by @dreikanter&lt;/a&gt; - The de-facto language for writing exploits.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/markets/awesome-ruby"&gt;Ruby Programming by @markets&lt;/a&gt; - The de-facto language for writing exploits.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/danielmiessler/SecLists"&gt;SecLists&lt;/a&gt; - Collection of multiple types of lists used during security assessments.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://sectools.org/"&gt;SecTools&lt;/a&gt; - Top 125 Network Security Tools.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/PaulSec/awesome-sec-talks"&gt;Security Talks&lt;/a&gt; - Curated list of security conferences.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sbilly/awesome-security"&gt;Security&lt;/a&gt; - Software, libraries, documents, and other resources.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/puresec/awesome-serverless-security/"&gt;Serverless Security&lt;/a&gt; - Curated list of awesome serverless security resources such as (e)books, articles, whitepapers, blogs and research papers.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/alebcay/awesome-shell"&gt;Shell Scripting&lt;/a&gt; - Command line frameworks, toolkits, guides and gizmos.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/InQuest/awesome-yara"&gt;YARA&lt;/a&gt; - YARA rules, tools, and people.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#penetration-testing-report-templates"&gt;
  &lt;/a&gt;
  Penetration Testing Report Templates
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/juliocesarfort/public-pentesting-reports"&gt;Public Pentesting Reports&lt;/a&gt; - Curated list of public penetration test reports released by several consulting firms and academic security groups.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.testandverification.com/wp-content/uploads/template-penetration-testing-report-v03.pdf"&gt;T&amp;amp;VS Pentesting Report Template&lt;/a&gt; - Pentest report template provided by Test and Verification Services, Ltd.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://lucideus.com/pdf/stw.pdf"&gt;Web Application Security Assessment Report Template&lt;/a&gt; - Sample Web application security assessment reporting template provided by Lucideus.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#open-sources-intelligence-osint"&gt;
  &lt;/a&gt;
  Open Sources Intelligence (OSINT)
&lt;/h2&gt;

&lt;p&gt;See also &lt;a href="https://github.com/jivoi/awesome-osint"&gt;awesome-osint&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/upgoingstar/datasploit"&gt;DataSploit&lt;/a&gt; - OSINT visualizer utilizing Shodan, Censys, Clearbit, EmailHunter, FullContact, and Zoomeye behind the scenes.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/beurtschipper/Depix"&gt;Depix&lt;/a&gt; - Tool for recovering passwords from pixelized screenshots (by de-pixelating text).&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/gyoisamurai/GyoiThon"&gt;GyoiThon&lt;/a&gt; - GyoiThon is an Intelligence Gathering tool using Machine Learning.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://intrigue.io"&gt;Intrigue&lt;/a&gt; - Automated OSINT &amp;amp; Attack Surface discovery framework with powerful API, UI and CLI.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.maltego.com/"&gt;Maltego&lt;/a&gt; - Proprietary software for open sources intelligence and forensics.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://packettotal.com/"&gt;PacketTotal&lt;/a&gt; - Simple, free, high-quality packet capture file analysis facilitating the quick detection of network-borne malware (using Zeek and Suricata IDS signatures under the hood).&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/xillwillx/skiptracer"&gt;Skiptracer&lt;/a&gt; - OSINT scraping framework that utilizes basic Python webscraping (BeautifulSoup) of PII paywall sites to compile passive information on a target on a ramen noodle budget.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/1N3/Sn1per"&gt;Sn1per&lt;/a&gt; - Automated Pentest Recon Scanner.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.spiderfoot.net/"&gt;Spiderfoot&lt;/a&gt; - Multi-source OSINT automation tool with a Web UI and report visualizations.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ilektrojohn/creepy"&gt;creepy&lt;/a&gt; - Geolocation OSINT tool.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Nhoya/gOSINT"&gt;gOSINT&lt;/a&gt; - OSINT tool with multiple modules and a telegram scraper.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ascribe/image-match"&gt;image-match&lt;/a&gt; - Quickly search over billions of images.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/lanmaster53/recon-ng"&gt;recon-ng&lt;/a&gt; - Full-featured Web Reconnaissance framework written in Python.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/kpcyrd/sn0int"&gt;sn0int&lt;/a&gt; - Semi-automatic OSINT framework and package manager.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#data-broker-and-search-engine-services"&gt;
  &lt;/a&gt;
  Data Broker and Search Engine Services
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://hunter.io/"&gt;Hunter.io&lt;/a&gt; - Data broker providing a Web search interface for discovering the email addresses and other organizational details of a company.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.threatcrowd.org/"&gt;Threat Crowd&lt;/a&gt; - Search engine for threats.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.virustotal.com/"&gt;Virus Total&lt;/a&gt; - Free service that analyzes suspicious files and URLs and facilitates the quick detection of viruses, worms, trojans, and all kinds of malware.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/kisom/surfraw"&gt;surfraw&lt;/a&gt; - Fast UNIX command line interface to a variety of popular WWW search engines.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#dorking-tools"&gt;
  &lt;/a&gt;
  Dorking tools
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/Hood3dRob1n/BinGoo"&gt;BinGoo&lt;/a&gt; - GNU/Linux bash based Bing and Google Dorking Tool.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/utiso/dorkbot"&gt;dorkbot&lt;/a&gt; - Command-line tool to scan Google (or other) search results for vulnerabilities.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/techgaun/github-dorks"&gt;github-dorks&lt;/a&gt; - CLI tool to scan GitHub repos/organizations for potential sensitive information leaks.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/k3170makan/GooDork"&gt;GooDork&lt;/a&gt; - Command line Google dorking tool.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.exploit-db.com/google-hacking-database/"&gt;Google Hacking Database&lt;/a&gt; - Database of Google dorks; can be used for recon.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/jgor/dork-cli"&gt;dork-cli&lt;/a&gt; - Command line Google dork tool.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/USSCltd/dorks"&gt;dorks&lt;/a&gt; - Google hack database automation tool.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/DanMcInerney/fast-recon"&gt;fast-recon&lt;/a&gt; - Perform Google dorks against a domain.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/opsdisk/pagodo"&gt;pagodo&lt;/a&gt; - Automate Google Hacking Database scraping.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Smaash/snitch"&gt;snitch&lt;/a&gt; - Information gathering via dorks.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#email-search-and-analysis-tools"&gt;
  &lt;/a&gt;
  Email search and analysis tools
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/SimplySecurity/SimplyEmail"&gt;SimplyEmail&lt;/a&gt; - Email recon made fast and easy.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Ekultek/WhatBreach"&gt;WhatBreach&lt;/a&gt; - Search email addresses and discover all known breaches that this email has been seen in, and download the breached database if it is publicly available.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#metadata-harvesting-and-analysis"&gt;
  &lt;/a&gt;
  Metadata harvesting and analysis
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.elevenpaths.com/labstools/foca/"&gt;FOCA (Fingerprinting Organizations with Collected Archives)&lt;/a&gt; - Automated document harvester that searches Google, Bing, and DuckDuckGo to find and extrapolate internal company organizational structures.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/laramies/metagoofil"&gt;metagoofil&lt;/a&gt; - Metadata harvester.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/laramies/theHarvester"&gt;theHarvester&lt;/a&gt; - E-mail, subdomain and people names harvester.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#network-device-discovery-tools"&gt;
  &lt;/a&gt;
  Network device discovery tools
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.censys.io/"&gt;Censys&lt;/a&gt; - Collects data on hosts and websites through daily ZMap and ZGrab scans.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.shodan.io/"&gt;Shodan&lt;/a&gt; - World's first search engine for Internet-connected devices.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.zoomeye.org/"&gt;ZoomEye&lt;/a&gt; - Search engine for cyberspace that lets the user find specific network components.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#osint-online-resources"&gt;
  &lt;/a&gt;
  OSINT Online Resources
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/lanrat/certgraph"&gt;CertGraph&lt;/a&gt; - Crawls a domain's SSL/TLS certificates for its certificate alternative names.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://ghostproject.fr/"&gt;GhostProject&lt;/a&gt; - Searchable database of billions of cleartext passwords, partially visible for free.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://netbootcamp.org/osinttools/"&gt;NetBootcamp OSINT Tools&lt;/a&gt; - Collection of OSINT links and custom Web interfaces to other services.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://osintframework.com/"&gt;OSINT Framework&lt;/a&gt; - Collection of various OSINT tools broken out by category.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://wigle.net/"&gt;WiGLE.net&lt;/a&gt; - Information about wireless networks world-wide, with user-friendly desktop and web applications.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#source-code-repository-searching-tools"&gt;
  &lt;/a&gt;
  Source code repository searching tools
&lt;/h3&gt;

&lt;p&gt;See also &lt;em&gt;&lt;a href="#web-accessible-source-code-ripping-tools"&gt;Web-accessible source code ripping tools&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/melvinsh/vcsmap"&gt;vcsmap&lt;/a&gt; - Plugin-based tool to scan public version control systems for sensitive information.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Furduhlutur/yar"&gt;Yar&lt;/a&gt; - Clone git repositories to search through the whole commit history in order of commit time for secrets, tokens, or passwords.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#web-application-and-resource-analysis-tools"&gt;
  &lt;/a&gt;
  Web application and resource analysis tools
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://blindelephant.sourceforge.net/"&gt;BlindElephant&lt;/a&gt; - Web application fingerprinter.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ChrisTruncer/EyeWitness"&gt;EyeWitness&lt;/a&gt; - Tool to take screenshots of websites, provide some server header info, and identify default credentials if possible.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/codingo/VHostScan"&gt;VHostScan&lt;/a&gt; - Virtual host scanner that performs reverse lookups, can be used with pivot tools, detect catch-all scenarios, aliases and dynamic default pages.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.wappalyzer.com/"&gt;Wappalyzer&lt;/a&gt; - Wappalyzer uncovers the technologies used on websites.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Ekultek/WhatWaf"&gt;WhatWaf&lt;/a&gt; - Detect and bypass web application firewalls and protection systems.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/urbanadventurer/WhatWeb"&gt;WhatWeb&lt;/a&gt; - Website fingerprinter.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/EnableSecurity/wafw00f"&gt;wafw00f&lt;/a&gt; - Identifies and fingerprints Web Application Firewall (WAF) products.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/maaaaz/webscreenshot"&gt;webscreenshot&lt;/a&gt; - Simple script to take screenshots of websites from a list of sites.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#operating-system-distributions"&gt;
  &lt;/a&gt;
  Operating System Distributions
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://androidtamer.com/"&gt;Android Tamer&lt;/a&gt; - Distribution built for Android security professionals that includes tools required for Android security testing.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://archstrike.org/"&gt;ArchStrike&lt;/a&gt; - Arch GNU/Linux repository for security professionals and enthusiasts.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/adi0x90/attifyos"&gt;AttifyOS&lt;/a&gt; - GNU/Linux distribution focused on tools useful during Internet of Things (IoT) security assessments.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.blackarch.org/"&gt;BlackArch&lt;/a&gt; - Arch GNU/Linux-based distribution for penetration testers and security researchers.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://inteltechniques.com/buscador/"&gt;Buscador&lt;/a&gt; - GNU/Linux virtual machine that is pre-configured for online investigators.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.kali.org/"&gt;Kali&lt;/a&gt; - Rolling Debian-based GNU/Linux distribution designed for penetration testing and digital forensics.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://networksecuritytoolkit.org/"&gt;Network Security Toolkit (NST)&lt;/a&gt; - Fedora-based GNU/Linux bootable live Operating System designed to provide easy access to best-of-breed open source network security applications.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://parrotlinux.org/"&gt;Parrot&lt;/a&gt; - Distribution similar to Kali, with support for multiple hardware architectures.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://pentestbox.org/"&gt;PentestBox&lt;/a&gt; - Open source pre-configured portable penetration testing environment for the Windows Operating System.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/trustedsec/ptf"&gt;The Pentesters Framework&lt;/a&gt; - Distro organized around the Penetration Testing Execution Standard (PTES), providing a curated collection of utilities that omits less frequently used utilities.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#periodicals"&gt;
  &lt;/a&gt;
  Periodicals
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.2600.com/Magazine/DigitalEditions"&gt;2600: The Hacker Quarterly&lt;/a&gt; - American publication about technology and computer "underground" culture.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.phrack.org/"&gt;Phrack Magazine&lt;/a&gt; - By far the longest running hacker zine.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#physical-access-tools"&gt;
  &lt;/a&gt;
  Physical Access Tools
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://atcommands.org/"&gt;AT Commands&lt;/a&gt; - Use AT commands over an Android device's USB port to rewrite device firmware, bypass security mechanisms, exfiltrate sensitive information, perform screen unlocks, and inject touch events.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.hak5.org/gear/bash-bunny"&gt;Bash Bunny&lt;/a&gt; - Local exploit delivery tool in the form of a USB thumbdrive in which you write payloads in a DSL called BunnyScript.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://lanturtle.com/"&gt;LAN Turtle&lt;/a&gt; - Covert "USB Ethernet Adapter" that provides remote access, network intelligence gathering, and MITM capabilities when installed in a local network.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ufrisk/pcileech"&gt;PCILeech&lt;/a&gt; - Uses PCIe hardware devices to read and write from the target system memory via Direct Memory Access (DMA) over PCIe.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.hak5.org/gear/packet-squirrel"&gt;Packet Squirrel&lt;/a&gt; - Ethernet multi-tool designed to enable covert remote access, painless packet captures, and secure VPN connections with the flip of a switch.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://samy.pl/poisontap/"&gt;Poisontap&lt;/a&gt; - Siphons cookies, exposes internal (LAN-side) router and installs web backdoor on locked computers.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://proxmark3.com/"&gt;Proxmark3&lt;/a&gt; - RFID/NFC cloning, replay, and spoofing toolkit often used for analyzing and attacking proximity cards/readers, wireless keys/keyfobs, and more.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://thunderclap.io/"&gt;Thunderclap&lt;/a&gt; - Open source I/O security research platform for auditing physical DMA-enabled hardware peripheral ports.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://usbrubberducky.com/"&gt;USB Rubber Ducky&lt;/a&gt; - Customizable keystroke injection attack platform masquerading as a USB thumbdrive.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#privilege-escalation-tools"&gt;
  &lt;/a&gt;
  Privilege Escalation Tools
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/hausec/ADAPE-Script"&gt;Active Directory and Privilege Escalation (ADAPE)&lt;/a&gt; - Umbrella script that automates numerous useful PowerShell modules to discover security misconfigurations and attempt privilege escalation against Active Directory.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/rebootuser/LinEnum"&gt;LinEnum&lt;/a&gt; - Scripted local Linux enumeration and privilege escalation checker useful for auditing a host and during CTF gaming.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mbahadou/postenum"&gt;Postenum&lt;/a&gt; - Shell script used for enumerating possible privilege escalation opportunities on a local GNU/Linux system.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/pentestmonkey/unix-privesc-check"&gt;unix-privesc-check&lt;/a&gt; - Shell script to check for simple privilege escalation vectors on UNIX systems.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#password-spraying-tools"&gt;
  &lt;/a&gt;
  Password Spraying Tools
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/dafthack/DomainPasswordSpray"&gt;DomainPasswordSpray&lt;/a&gt; - Tool written in PowerShell to perform a password spray attack against users of a domain.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/byt3bl33d3r/SprayingToolkit"&gt;SprayingToolkit&lt;/a&gt; - Scripts to make password spraying attacks against Lync/S4B, Outlook Web Access (OWA) and Office 365 (O365) a lot quicker, less painful and more efficient.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#reverse-engineering"&gt;
  &lt;/a&gt;
  Reverse Engineering
&lt;/h2&gt;

&lt;p&gt;See also &lt;a href="https://github.com/tylerha97/awesome-reversing"&gt;awesome-reversing&lt;/a&gt;, &lt;a href="#exploit-development-tools"&gt;&lt;em&gt;Exploit Development Tools&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reverse-engineering-books"&gt;
  &lt;/a&gt;
  Reverse Engineering Books
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.amazon.com/Hacking-Ethical-Hackers-Handbook-Edition/dp/0071832386"&gt;Gray Hat Hacking The Ethical Hacker's Handbook by Daniel Regalado et al., 2015&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nostarch.com/xbox.htm"&gt;Hacking the Xbox by Andrew Huang, 2003&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.wiley.com/WileyCDA/WileyTitle/productCd-1118787315.html"&gt;Practical Reverse Engineering by Bruce Dang et al., 2014&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://beginners.re/"&gt;Reverse Engineering for Beginners by Dennis Yurichev&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nostarch.com/idapro2.htm"&gt;The IDA Pro Book by Chris Eagle, 2011&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#reverse-engineering-tools"&gt;
  &lt;/a&gt;
  Reverse Engineering Tools
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://angr.io/"&gt;angr&lt;/a&gt; - Platform-agnostic binary analysis framework.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.capstone-engine.org/"&gt;Capstone&lt;/a&gt; - Lightweight multi-platform, multi-architecture disassembly framework.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/horsicq/Detect-It-Easy"&gt;Detect It Easy(DiE)&lt;/a&gt; - Program for determining types of files for Windows, Linux and MacOS.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.codef00.com/projects#debugger"&gt;Evan's Debugger&lt;/a&gt; - OllyDbg-like debugger for GNU/Linux.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.frida.re/"&gt;Frida&lt;/a&gt; - Dynamic instrumentation toolkit for developers, reverse-engineers, and security researchers.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/NorthwaveNL/fridax"&gt;Fridax&lt;/a&gt; - Read variables and intercept/hook functions in Xamarin/Mono JIT and AOT compiled iOS/Android applications.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.ghidra-sre.org/"&gt;Ghidra&lt;/a&gt; - Suite of free software reverse engineering tools developed by NSA's Research Directorate originally exposed in WikiLeaks's "Vault 7" publication and now maintained as open source software.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://immunityinc.com/products/debugger/"&gt;Immunity Debugger&lt;/a&gt; - Powerful way to write exploits and analyze malware.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.hex-rays.com/products/ida/"&gt;Interactive Disassembler (IDA Pro)&lt;/a&gt; - Proprietary multi-processor disassembler and debugger for Windows, GNU/Linux, or macOS; also has a free version, &lt;a href="https://www.hex-rays.com/products/ida/support/download_freeware.shtml"&gt;IDA Free&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/wisk/medusa"&gt;Medusa&lt;/a&gt; - Open source, cross-platform interactive disassembler.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.ollydbg.de/"&gt;OllyDbg&lt;/a&gt; - x86 debugger for Windows binaries that emphasizes binary code analysis.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Cisco-Talos/pyrebox"&gt;PyREBox&lt;/a&gt; - Python scriptable Reverse Engineering sandbox by Cisco-Talos.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://rada.re/r/index.html"&gt;Radare2&lt;/a&gt; - Open source, crossplatform reverse engineering framework.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/LongSoft/UEFITool"&gt;UEFITool&lt;/a&gt; - UEFI firmware image viewer and editor.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/snare/voltron"&gt;Voltron&lt;/a&gt; - Extensible debugger UI toolkit written in Python.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/debugger-download-tools"&gt;WDK/WinDbg&lt;/a&gt; - Windows Driver Kit and WinDbg.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/devttys0/binwalk"&gt;binwalk&lt;/a&gt; - Fast, easy to use tool for analyzing, reverse engineering, and extracting firmware images.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/kpcyrd/boxxy-rs"&gt;boxxy&lt;/a&gt; - Linkable sandbox explorer.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/0xd4d/dnSpy"&gt;dnSpy&lt;/a&gt; - Tool to reverse engineer .NET assemblies.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/joelpx/plasma"&gt;plasma&lt;/a&gt; - Interactive disassembler for x86/ARM/MIPS. Generates indented pseudo-code with colored syntax code.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/pwndbg/pwndbg"&gt;pwndbg&lt;/a&gt; - GDB plug-in that eases debugging with GDB, with a focus on features needed by low-level software developers, hardware hackers, reverse-engineers, and exploit developers.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/fireeye/rVMI"&gt;rVMI&lt;/a&gt; - Debugger on steroids; inspect userspace processes, kernel drivers, and preboot environments in a single tool.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://x64dbg.com/"&gt;x64dbg&lt;/a&gt; - Open source x64/x32 debugger for windows.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#security-education-courses"&gt;
  &lt;/a&gt;
  Security Education Courses
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://azcwr.org/"&gt;ARIZONA CYBER WARFARE RANGE&lt;/a&gt; - 24x7 live fire exercises for beginners through real world operations; capability for upward progression into the real world of cyber warfare.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://cybrary.it"&gt;Cybrary&lt;/a&gt; - Free courses in ethical hacking and advanced penetration testing. Advanced penetration testing courses are based on the book 'Penetration Testing for Highly Secured Environments'.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.enisa.europa.eu/topics/trainings-for-cybersecurity-specialists/online-training-material"&gt;European Union Agency for Network and Information Security&lt;/a&gt; - ENISA Cyber Security Training material.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.offensive-security.com/information-security-training/"&gt;Offensive Security Training&lt;/a&gt; - Training from BackTrack/Kali developers.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://opensecuritytraining.info/"&gt;Open Security Training&lt;/a&gt; - Training material for computer security classes.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.sans.org/"&gt;SANS Security Training&lt;/a&gt; - Computer Security Training &amp;amp; Certification.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#shellcoding-guides-and-tutorials"&gt;
  &lt;/a&gt;
  Shellcoding Guides and Tutorials
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.corelan.be/index.php/2009/07/19/exploit-writing-tutorial-part-1-stack-based-overflows/"&gt;Exploit Writing Tutorials&lt;/a&gt; - Tutorials on how to develop exploits.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://shell-storm.org/shellcode/"&gt;Shellcode Examples&lt;/a&gt; - Shellcodes database.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.vividmachines.com/shellcode/shellcode.html"&gt;Shellcode Tutorial&lt;/a&gt; - Tutorial on how to write shellcode.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.wiley.com/WileyCDA/WileyTitle/productCd-047008023X.html"&gt;The Shellcoder's Handbook by Chris Anley et al., 2007&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#sidechannel-tools"&gt;
  &lt;/a&gt;
  Side-channel Tools
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://chipwhisperer.com"&gt;ChipWhisperer&lt;/a&gt; - Complete open-source toolchain for side-channel power analysis and glitching attacks.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/jovanbulck/sgx-step"&gt;SGX-Step&lt;/a&gt; - Open-source framework to facilitate side-channel attack research on Intel x86 processors in general and Intel SGX (Software Guard Extensions) platforms in particular.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/vusec/trrespass"&gt;TRRespass&lt;/a&gt; - Many-sided rowhammer tool suite able to reverse engineer the contents of DDR3 and DDR4 memory chips protected by Target Row Refresh mitigations.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#social-engineering"&gt;
  &lt;/a&gt;
  Social Engineering
&lt;/h2&gt;

&lt;p&gt;See also &lt;a href="https://github.com/v2-dev/awesome-social-engineering"&gt;awesome-social-engineering&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#social-engineering-books"&gt;
  &lt;/a&gt;
  Social Engineering Books
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.hachettebookgroup.com/titles/kevin-mitnick/ghost-in-the-wires/9780316134477/"&gt;Ghost in the Wires by Kevin D. Mitnick &amp;amp; William L. Simon, 2011&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.elsevier.com/books/no-tech-hacking/mitnick/978-1-59749-215-7"&gt;No Tech Hacking by Johnny Long &amp;amp; Jack Wiles, 2008&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.mhprofessional.com/9780071818469-usa-social-engineering-in-it-security-tools-tactics-and-techniques-group"&gt;Social Engineering in IT Security: Tools, Tactics, and Techniques by Sharon Conheady, 2014&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.wiley.com/WileyCDA/WileyTitle/productCd-0471237124.html"&gt;The Art of Deception by Kevin D. Mitnick &amp;amp; William L. Simon, 2002&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.wiley.com/WileyCDA/WileyTitle/productCd-0764569597.html"&gt;The Art of Intrusion by Kevin D. Mitnick &amp;amp; William L. Simon, 2005&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.wiley.com/WileyCDA/WileyTitle/productCd-1118608577.html"&gt;Unmasking the Social Engineer: The Human Element of Security by Christopher Hadnagy, 2014&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#social-engineering-online-resources"&gt;
  &lt;/a&gt;
  Social Engineering Online Resources
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://www.social-engineer.org/framework/general-discussion/"&gt;Social Engineering Framework&lt;/a&gt; - Information resource for social engineers.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#social-engineering-tools"&gt;
  &lt;/a&gt;
  Social Engineering Tools
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/4w4k3/BeeLogger"&gt;Beelogger&lt;/a&gt; - Tool for generating keylooger.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ring0lab/catphish"&gt;Catphish&lt;/a&gt; - Tool for phishing and corporate espionage written in Ruby.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/kgretzky/evilginx2"&gt;Evilginx2&lt;/a&gt; - Standalone Machine-in-the-Middle (MitM) reverse proxy attack framework for setting up phishing pages capable of defeating most forms of 2FA security schemes.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Raikia/FiercePhish"&gt;FiercePhish&lt;/a&gt; - Full-fledged phishing framework to manage all phishing engagements.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://getgophish.com"&gt;Gophish&lt;/a&gt; - Open-source phishing framework.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/securestate/king-phisher"&gt;King Phisher&lt;/a&gt; - Phishing campaign toolkit used for creating and managing multiple simultaneous phishing attacks with custom email and server content.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/drk1wi/Modlishka"&gt;Modlishka&lt;/a&gt; - Flexible and powerful reverse proxy with real-time two-factor authentication.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/fireeye/ReelPhish"&gt;ReelPhish&lt;/a&gt; - Real-time two-factor phishing tool.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/trustedsec/social-engineer-toolkit"&gt;Social Engineer Toolkit (SET)&lt;/a&gt; - Open source pentesting framework designed for social engineering featuring a number of custom attack vectors to make believable attacks quickly.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/UndeadSec/SocialFish"&gt;SocialFish&lt;/a&gt; - Social media phishing framework that can run on an Android phone or in a Docker container.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ryhanson/phishery"&gt;phishery&lt;/a&gt; - TLS/SSL enabled Basic Auth credential harvester.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sophron/wifiphisher"&gt;wifiphisher&lt;/a&gt; - Automated phishing attacks against WiFi networks.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#static-analyzers"&gt;
  &lt;/a&gt;
  Static Analyzers
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/presidentbeef/brakeman"&gt;Brakeman&lt;/a&gt; - Static analysis security vulnerability scanner for Ruby on Rails applications.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://findbugs.sourceforge.net/"&gt;FindBugs&lt;/a&gt; - Free software static analyzer to look for bugs in Java code.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/designsecurity/progpilot"&gt;Progpilot&lt;/a&gt; - Static security analysis tool for PHP code.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/jagracey/RegEx-DoS"&gt;RegEx-DoS&lt;/a&gt; - Analyzes source code for Regular Expressions susceptible to Denial of Service attacks.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://pypi.python.org/pypi/bandit/"&gt;bandit&lt;/a&gt; - Security oriented static analyser for Python code.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://cppcheck.sourceforge.net/"&gt;cppcheck&lt;/a&gt; - Extensible C/C++ static analyzer focused on finding bugs.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/nccgroup/sobelow"&gt;sobelow&lt;/a&gt; - Security-focused static analysis for the Phoenix Framework.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/fkie-cad/cwe_checker"&gt;cwe_checker&lt;/a&gt; - Suite of tools built atop the Binary Analysis Platform (BAP) to heuristically detect CWEs in compiled binaries and firmware.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#steganography-tools"&gt;
  &lt;/a&gt;
  Steganography Tools
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/TryCatchHCF/Cloakify"&gt;Cloakify&lt;/a&gt; - Textual steganography toolkit that converts any filetype into lists of everyday strings.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://stegonline.georgeom.net/"&gt;StegOnline&lt;/a&gt; - Web-based, enhanced, and open-source port of StegSolve.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Paradoxis/StegCracker"&gt;StegCracker&lt;/a&gt; - Steganography brute-force utility to uncover hidden data inside files.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#vulnerability-databases"&gt;
  &lt;/a&gt;
  Vulnerability Databases
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://www.securityfocus.com/bid/"&gt;Bugtraq (BID)&lt;/a&gt; - Software security bug identification database compiled from submissions to the SecurityFocus mailing list and other sources, operated by Symantec, Inc.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://cxsecurity.com/"&gt;CXSecurity&lt;/a&gt; - Archive of published CVE and Bugtraq software vulnerabilities cross-referenced with a Google dork database for discovering the listed vulnerability.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.cnnvd.org.cn/"&gt;China National Vulnerability Database (CNNVD)&lt;/a&gt; - Chinese government-run vulnerability database analoguous to the United States's CVE database hosted by Mitre Corporation.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://cve.mitre.org/"&gt;Common Vulnerabilities and Exposures (CVE)&lt;/a&gt; - Dictionary of common names (i.e., CVE Identifiers) for publicly known security vulnerabilities.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.exploit-db.com/"&gt;Exploit-DB&lt;/a&gt; - Non-profit project hosting exploits for software vulnerabilities, provided as a public service by Offensive Security.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://seclists.org/fulldisclosure/"&gt;Full-Disclosure&lt;/a&gt; - Public, vendor-neutral forum for detailed discussion of vulnerabilities, often publishes details before many other sources.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/advisories/"&gt;GitHub Advisories&lt;/a&gt; - Public vulnerability advisories published by or affecting codebases hosted by GitHub, including open source projects.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://hpi-vdb.de/"&gt;HPI-VDB&lt;/a&gt; - Aggregator of cross-referenced software vulnerabilities offering free-of-charge API access, provided by the Hasso-Plattner Institute, Potsdam.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.0day.today/"&gt;Inj3ct0r&lt;/a&gt; - Exploit marketplace and vulnerability information aggregator. (&lt;a href="http://mvfjfugdwgc5uwho.onion/"&gt;Onion service&lt;/a&gt;.)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.microsoft.com/en-us/security-updates/"&gt;Microsoft Security Advisories and Bulletins&lt;/a&gt; - Archive and announcements of security advisories impacting Microsoft software, published by the Microsoft Security Response Center (MSRC).&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.mozilla.org/security/advisories/"&gt;Mozilla Foundation Security Advisories&lt;/a&gt; - Archive of security advisories impacting Mozilla software, including the Firefox Web Browser.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://nvd.nist.gov/"&gt;National Vulnerability Database (NVD)&lt;/a&gt; - United States government's National Vulnerability Database provides additional meta-data (CPE, CVSS scoring) of the standard CVE List along with a fine-grained search engine.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://osv.dev/"&gt;Open Source Vulnerabilities (OSV)&lt;/a&gt; - Database of vulnerabilities affecting open source software, queryable by project, Git commit, or version.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://packetstormsecurity.com/files/"&gt;Packet Storm&lt;/a&gt; - Compendium of exploits, advisories, tools, and other security-related resources aggregated from across the industry.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.securiteam.com/"&gt;SecuriTeam&lt;/a&gt; - Independent source of software vulnerability information.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://snyk.io/vuln/"&gt;Snyk Vulnerability DB&lt;/a&gt; - Detailed information and remediation guidance for vulnerabilities known by Snyk.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.kb.cert.org/vuls/"&gt;US-CERT Vulnerability Notes Database&lt;/a&gt; - Summaries, technical details, remediation information, and lists of vendors affected by software vulnerabilities, aggregated by the United States Computer Emergency Response Team (US-CERT).&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.vulnerability-lab.com/"&gt;Vulnerability Lab&lt;/a&gt; - Open forum for security advisories organized by category of exploit target.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://vulners.com/"&gt;Vulners&lt;/a&gt; - Security database of software vulnerabilities.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://vulmon.com/"&gt;Vulmon&lt;/a&gt; - Vulnerability search engine with vulnerability intelligence features that conducts full text searches in its database.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://zerodayinitiative.com/advisories/published/"&gt;Zero Day Initiative&lt;/a&gt; - Bug bounty program with publicly accessible archive of published security advisories, operated by TippingPoint.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#web-exploitation"&gt;
  &lt;/a&gt;
  Web Exploitation
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/fuzzdb-project/fuzzdb"&gt;FuzzDB&lt;/a&gt; - Dictionary of attack patterns and primitives for black-box application fault injection and resource discovery.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.owasp.org/index.php/OWASP_OWTF"&gt;Offensive Web Testing Framework (OWTF)&lt;/a&gt; - Python-based framework for pentesting Web applications based on the OWASP Testing Guide.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/evyatarmeged/Raccoon"&gt;Raccoon&lt;/a&gt; - High performance offensive security tool for reconnaissance and vulnerability scanning.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/espreto/wpsploit"&gt;WPSploit&lt;/a&gt; - Exploit WordPress-powered websites with Metasploit.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2017/march/autochrome/"&gt;autochrome&lt;/a&gt; - Chrome browser profile preconfigured with appropriate settings needed for web application testing.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/kpcyrd/badtouch"&gt;badtouch&lt;/a&gt; - Scriptable network authentication cracker.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/LeonardoNve/sslstrip2"&gt;sslstrip2&lt;/a&gt; - SSLStrip version to defeat HSTS.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.thoughtcrime.org/software/sslstrip/"&gt;sslstrip&lt;/a&gt; - Demonstration of the HTTPS stripping attacks.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#intercepting-web-proxies"&gt;
  &lt;/a&gt;
  Intercepting Web proxies
&lt;/h3&gt;

&lt;p&gt;See also &lt;em&gt;&lt;a href="#proxies-and-machine-in-the-middle-mitm-tools"&gt;Proxies and Machine-in-the-Middle (MITM) Tools&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://portswigger.net/burp/"&gt;Burp Suite&lt;/a&gt; - Integrated platform for performing security testing of web applications.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.telerik.com/fiddler"&gt;Fiddler&lt;/a&gt; - Free cross-platform web debugging proxy with user-friendly companion tools.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.zaproxy.org/"&gt;OWASP Zed Attack Proxy (ZAP)&lt;/a&gt; - Feature-rich, scriptable HTTP intercepting proxy and fuzzer for penetration testing web applications.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://mitmproxy.org/"&gt;mitmproxy&lt;/a&gt; - Interactive TLS-capable intercepting HTTP proxy for penetration testers and software developers.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#web-file-inclusion-tools"&gt;
  &lt;/a&gt;
  Web file inclusion tools
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/P0cL4bs/Kadimus"&gt;Kadimus&lt;/a&gt; - LFI scan and exploit tool.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/D35m0nd142/LFISuite"&gt;LFISuite&lt;/a&gt; - Automatic LFI scanner and exploiter.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/kurobeats/fimap"&gt;fimap&lt;/a&gt; - Find, prepare, audit, exploit and even Google automatically for LFI/RFI bugs.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/hvqzao/liffy"&gt;liffy&lt;/a&gt; - LFI exploitation tool.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#web-injection-tools"&gt;
  &lt;/a&gt;
  Web injection tools
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/commixproject/commix"&gt;Commix&lt;/a&gt; - Automated all-in-one operating system command injection and exploitation tool.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/codingo/NoSQLMap"&gt;NoSQLmap&lt;/a&gt; - Automatic NoSQL injection and database takeover tool.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://sqlmap.org/"&gt;SQLmap&lt;/a&gt; - Automatic SQL injection and database takeover tool.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/epinna/tplmap"&gt;tplmap&lt;/a&gt; - Automatic server-side template injection and Web server takeover tool.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#web-path-discovery-and-bruteforcing-tools"&gt;
  &lt;/a&gt;
  Web path discovery and bruteforcing tools
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/maurosoria/dirsearch"&gt;dirsearch&lt;/a&gt; - Web path scanner.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/c-sto/recursebuster"&gt;recursebuster&lt;/a&gt; - Content discovery tool to perform directory and file bruteforcing.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#web-shells-and-c2-frameworks"&gt;
  &lt;/a&gt;
  Web shells and C2 frameworks
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/beefproject/beef"&gt;Browser Exploitation Framework (BeEF)&lt;/a&gt; - Command and control server for delivering exploits to commandeered Web browsers.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/dotcppfile/DAws"&gt;DAws&lt;/a&gt; - Advanced Web shell.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/antonioCoco/SharPyShell"&gt;SharPyShell&lt;/a&gt; - Tiny and obfuscated ASP.NET webshell for C# web applications.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/nil0x42/phpsploit"&gt;PhpSploit&lt;/a&gt; - Full-featured C2 framework which silently persists on webserver via evil PHP oneliner.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/epinna/weevely3"&gt;weevely3&lt;/a&gt; - Weaponized PHP-based web shell.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#webaccessible-source-code-ripping-tools"&gt;
  &lt;/a&gt;
  Web-accessible source code ripping tools
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/kost/dvcs-ripper"&gt;DVCS Ripper&lt;/a&gt; - Rip web accessible (distributed) version control systems: SVN/GIT/HG/BZR.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/internetwache/GitTools"&gt;GitTools&lt;/a&gt; - Automatically find and download Web-accessible &lt;code&gt;.git&lt;/code&gt; repositories.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/arthaud/git-dumper"&gt;git-dumper&lt;/a&gt; - Tool to dump a git repository from a website.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/HightechSec/git-scanner"&gt;git-scanner&lt;/a&gt; - Tool for bug hunting or pentesting websites that have open &lt;code&gt;.git&lt;/code&gt; repositories available in public.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#web-exploitation-books"&gt;
  &lt;/a&gt;
  Web Exploitation Books
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.wiley.com/WileyCDA/WileyTitle/productCd-1118662091.html"&gt;The Browser Hacker's Handbook by Wade Alcorn et al., 2014&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.wiley.com/WileyCDA/WileyTitle/productCd-1118026470.html"&gt;The Web Application Hacker's Handbook by D. Stuttard, M. Pinto, 2011&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#windows-utilities"&gt;
  &lt;/a&gt;
  Windows Utilities
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/adaptivethreat/Bloodhound/wiki"&gt;Bloodhound&lt;/a&gt; - Graphical Active Directory trust relationship explorer.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/fireeye/commando-vm"&gt;Commando VM&lt;/a&gt; - Automated installation of over 140 Windows software packages for penetration testing and red teaming.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/cobbr/Covenant"&gt;Covenant&lt;/a&gt; - ASP.NET Core application that serves as a collaborative command and control platform for red teamers.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/taviso/ctftool"&gt;ctftool&lt;/a&gt; - Interactive Collaborative Translation Framework (CTF) exploration tool capable of launching cross-session edit session attacks.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/byt3bl33d3r/DeathStar"&gt;DeathStar&lt;/a&gt; - Python script that uses Empire's RESTful API to automate gaining Domain Admin rights in Active Directory environments.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.powershellempire.com/"&gt;Empire&lt;/a&gt; - Pure PowerShell post-exploitation agent.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/rabbitstack/fibratus"&gt;Fibratus&lt;/a&gt; - Tool for exploration and tracing of the Windows kernel.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Kevin-Robertson/Inveigh"&gt;Inveigh&lt;/a&gt; - Windows PowerShell ADIDNS/LLMNR/mDNS/NBNS spoofer/machine-in-the-middle tool.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/AlessandroZ/LaZagne"&gt;LaZagne&lt;/a&gt; - Credentials recovery project.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/dafthack/MailSniper"&gt;MailSniper&lt;/a&gt; - Modular tool for searching through email in a Microsoft Exchange environment, gathering the Global Address List from Outlook Web Access (OWA) and Exchange Web Services (EWS), and more.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/PowerShellMafia/PowerSploit"&gt;PowerSploit&lt;/a&gt; - PowerShell Post-Exploitation Framework.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/trustedsec/ridenum"&gt;RID_ENUM&lt;/a&gt; - Python script that can enumerate all users from a Windows Domain Controller and crack those user's passwords using brute-force.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/SpiderLabs/Responder"&gt;Responder&lt;/a&gt; - Link-Local Multicast Name Resolution (LLMNR), NBT-NS, and mDNS poisoner.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/GhostPack/Rubeus"&gt;Rubeus&lt;/a&gt; - Toolset for raw Kerberos interaction and abuses.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sensepost/ruler"&gt;Ruler&lt;/a&gt; - Abuses client-side Outlook features to gain a remote shell on a Microsoft Exchange server.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/nccgroup/SCOMDecrypt"&gt;SCOMDecrypt&lt;/a&gt; - Retrieve and decrypt RunAs credentials stored within Microsoft System Center Operations Manager (SCOM) databases.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.microsoft.com/en-us/sysinternals/downloads/sysinternals-suite"&gt;Sysinternals Suite&lt;/a&gt; - The Sysinternals Troubleshooting Utilities.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.ampliasecurity.com/research/windows-credentials-editor/"&gt;Windows Credentials Editor&lt;/a&gt; - Inspect logon sessions and add, change, list, and delete associated credentials, including Kerberos tickets.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/GDSSecurity/Windows-Exploit-Suggester"&gt;Windows Exploit Suggester&lt;/a&gt; - Detects potential missing patches on the target.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://blog.gentilkiwi.com/mimikatz"&gt;mimikatz&lt;/a&gt; - Credentials extraction tool for Windows operating system.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/nccgroup/redsnarf"&gt;redsnarf&lt;/a&gt; - Post-exploitation tool for retrieving password hashes and credentials from Windows workstations, servers, and domain controllers.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://labs.mwrinfosecurity.com/tools/wepwnise/"&gt;wePWNise&lt;/a&gt; - Generates architecture independent VBA code to be used in Office documents or templates and automates bypassing application control and exploit mitigation software.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/SecureThisShit/WinPwn"&gt;WinPwn&lt;/a&gt; - Internal penetration test script to perform local and domain reconnaissance, privilege escalation and exploitation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#license"&gt;
  &lt;/a&gt;
  License
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://creativecommons.org/licenses/by/4.0/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0Pl6feko--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mirrors.creativecommons.org/presskit/buttons/88x31/svg/by.svg" alt="CC-BY"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This work is licensed under a &lt;a href="https://creativecommons.org/licenses/by/4.0/"&gt;Creative Commons Attribution 4.0 International License&lt;/a&gt;.&lt;/p&gt;



&lt;h3&gt;Connect with me:&lt;/h3&gt;

&lt;p&gt;
&lt;a href="https://discord.gg/HKxUV6jXPj"&gt;
  &lt;img alt="AmnaAbd's Discord" src="https://res.cloudinary.com/practicaldev/image/fetch/s--qpcpFaS3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/peterthehan/peterthehan/master/assets/discord.svg"&gt;
&lt;/a&gt;
&lt;a href="https://twitter.com/AmnaAbd22"&gt;
  &lt;img alt="Amna Abdallah | Twitter" src="https://res.cloudinary.com/practicaldev/image/fetch/s--55PHPPhV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/peterthehan/peterthehan/master/assets/twitter.svg"&gt;
&lt;/a&gt;
&lt;a href="https://www.linkedin.com/in/amna-abdallah-2b615572/"&gt;
  &lt;img alt="AmnaAbd's LinkedIN" src="https://res.cloudinary.com/practicaldev/image/fetch/s--opORli7b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/peterthehan/peterthehan/master/assets/linkedin.svg"&gt;
&lt;/a&gt;
&lt;a href="https://open.spotify.com/user/vzhpqhqmrep0yz70cxzpi45b5"&gt;
  &lt;img alt="Amna's Spotify" src="https://res.cloudinary.com/practicaldev/image/fetch/s--mBvRh3aP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/peterthehan/peterthehan/master/assets/spotify.svg"&gt;
&lt;/a&gt;
&lt;a href="https://codepen.io/AmnaAbd"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--myiCxFTx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.jsdelivr.net/npm/simple-icons%403.0.1/icons/codepen.svg" alt="amnaabd"&gt;&lt;/a&gt;
&lt;a href="https://dev.to/amnaabd"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ec4IN74C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.jsdelivr.net/npm/simple-icons%403.0.1/icons/dev-dot-to.svg" alt="amnaabd"&gt;&lt;/a&gt;
&lt;a href="https://instagram.com/amna.amouna.3114"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6jSVYXZc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.jsdelivr.net/npm/simple-icons%403.0.1/icons/instagram.svg" alt="amnaabd"&gt;&lt;/a&gt;
&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>terraform</category>
      <category>webdev</category>
      <category>security</category>
    </item>
    <item>
      <title>Jaeger vs New Relic - Key differences, use-cases and alternatives</title>
      <author>Ankit Anand ✨</author>
      <pubDate>Wed, 06 Oct 2021 13:15:45 +0000</pubDate>
      <link>https://dev.to/signoz/jaeger-vs-new-relic-key-differences-use-cases-and-alternatives-74p</link>
      <guid>https://dev.to/signoz/jaeger-vs-new-relic-key-differences-use-cases-and-alternatives-74p</guid>
      <description>&lt;p&gt;Jaeger and New Relic are tools used in the application monitoring and observability domain. While Jaeger is an open source tool under Cloud Native Computing Foundation, New Relic is a SaaS vendor in the observability domain. Let us explore the key differences between Jaeger and New Relic in this article.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/2WkkmL4"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--od2lB_mG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yroh39ngk6sz6tv3z9y.png" alt="SigNoz GitHub repo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;New Relic is an extensive SaaS tool and provides application performance as well as infrastructure monitoring. Jaeger provides an open-source solution for end-to-end distributed tracing. Before we dive in, let's first understand in brief what is distributed tracing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-distributed-tracing"&gt;
  &lt;/a&gt;
  What is distributed tracing?
&lt;/h2&gt;

&lt;p&gt;Distributed tracing gives you insight into how a particular service is performing as part of the whole in a distributed software system. In a microservice architecture, a transaction can travel through hundreds of services before completing a user request. So how do you know the exact cause of issues causing latency?&lt;/p&gt;

&lt;p&gt;That's where distributed tracing comes into the picture. User requests are broken down into spans.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What are spans?&lt;br&gt;&lt;br&gt;
Spans represent a single operation within a trace. Thus, it represents work done by a single service which can be broken down further depending on the use case.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A trace context is passed along when requests travel between services, which tracks a user request across services. You can see how a user request performs across services and identify what exactly needs your attention without manually shifting through multiple dashboards.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZXTMH1wS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/opentelemetry_distributed_tracing-min.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZXTMH1wS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/opentelemetry_distributed_tracing-min.png" alt="Trace context is passed to track user requests across services"&gt;&lt;/a&gt;A trace context is passed when user requests pass from one service to another&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#key-features-of-jaeger"&gt;
  &lt;/a&gt;
  Key Features of Jaeger
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.jaegertracing.io/" rel="noopener noreferrer nofollow"&gt;&lt;b&gt;Jaeger&lt;/b&gt;&lt;/a&gt; was originally built by teams at Uber and then open-sourced. It is used for end-to-end distributed tracing for microservices. Some of the key features of Jaeger includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Distributed context propagation&lt;/strong&gt;&lt;br&gt;
One of the challenges of distributed systems is to have a standard format for passing context across process boundaries and services. Jaeger provides client libraries that supports code instrumentation in multiple languages to propagate context across services&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Distributed transaction monitoring&lt;/strong&gt;&lt;br&gt;
Jaeger comes with a web UI written in Javascript. The dashboard can be used to see traces and spans across services.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Root Cause Analysis&lt;/strong&gt;&lt;br&gt;
Using traces you can drill down to services  causing latency in particular user request.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Server dependency analysis&lt;/strong&gt;&lt;br&gt;
Using Jaeger's web UI, you can see how requests flow through different services and different servers interact while serving user requets.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Performance/latency optimization&lt;/strong&gt;&lt;br&gt;
Once you have identified, which service or query is creating latency, you can use the information to optimize it.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PBiBbLYG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/08/jaeger_ui-min.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PBiBbLYG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/08/jaeger_ui-min.png" alt="Jaeger's UI showing traces"&gt;&lt;/a&gt;Jaeger's UI showing traces for selected services&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#key-features-of-new-relic"&gt;
  &lt;/a&gt;
  Key Features of New Relic
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://newrelic.com/" rel="noopener noreferrer nofollow"&gt;&lt;b&gt;New Relic&lt;/b&gt;&lt;/a&gt; is one of the oldest companies in the observability domain. Its observability tool enables you to visualize, analyze and troubleshoot your software stack in one platform. It also supports auto-instrumentation for eight popular programming languages.&lt;/p&gt;

&lt;p&gt;Some of the key features and services that New Relic provides:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Infrastructure monitoring&lt;/strong&gt;&lt;br&gt;
New Relic can connect your application performance with your infrastructure health to provide you better insights for quick troubleshooting.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Telemetry Data platform&lt;/strong&gt;&lt;br&gt;
It provides 300+ agents and integrations, including OpenTelemetry to ingest all kinds of telemetry data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;AIOps&lt;/strong&gt;&lt;br&gt;
New relic also provides artificial intelligence capabilities to detect, diagnose and resolve issues before customer notices.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Log management&lt;/strong&gt;&lt;br&gt;
You can also deploy log management using New Relic. It provides a fast query service on top of your log data so that you're always on top of your log data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Integrations with tools and open standards&lt;/strong&gt;&lt;br&gt;
New Relic provides integrations with all leading cloud providers and also supports popular open-source standards like OpenTelemetry.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rkx4gHgh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/08/New_relic_dashboard-min.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rkx4gHgh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/08/New_relic_dashboard-min.png" alt="New Relic Dashboard"&gt;&lt;/a&gt;New Relic Dashboard (Source: New Relic website)&lt;/p&gt;

&lt;p&gt;As New Relic is a SaaS vendor, it is not free. Standard offering includes plans for teams up to 5 full users. Their pricing depends on the amount of data ingested with 100 GB free data ingest and $0.25 per extra GB.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#comparing-jaeger-and-new-relic"&gt;
  &lt;/a&gt;
  Comparing Jaeger and New Relic
&lt;/h2&gt;

&lt;p&gt;From the description above, you might have a good idea about the differences between Jaeger and New Relic. The key difference between the two projects is their scope. While Jaeger is an end-to-end distributed tracing tool, New Relic is a SaaS vendor offering many out-of-the-box services.&lt;/p&gt;

&lt;p&gt;Apart from distributed tracing, New Relic offers log management, infrastructure monitoring, network monitoring, and application monitoring. It also provides AIOps capabilities.&lt;/p&gt;

&lt;p&gt;Let's focus on the distributed tracing capabilities of both the tools and see their key differences:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Jaeger's instrumentation is based on &lt;a href="https://opentracing.io/" rel="noopener noreferrer nofollow"&gt;&lt;b&gt;OpenTracing&lt;/b&gt;&lt;/a&gt; standards, and it provides client libraries in the following languages: Go, Java, Node.js, Python, C++, and C#. New Relic provides APM language agents for C, Go, Java, Node.js, .NET, PHP, Python, and Ruby to help you get started with distributed tracing.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Jaeger offers two popular open-source databases for storing trace data: Cassandra and Elasticsearch. New Relic offers its own custom-built time-series database called New Relic Database to store trace data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;New Relic's tracing UI is more elaborate than Jaeger's, as you can relate data from other types of monitoring in a single dashboard.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n-gHkpDw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/new_relic_distributed_tracing-min.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n-gHkpDw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/new_relic_distributed_tracing-min.jpg" alt="New Relic Dashboard"&gt;&lt;/a&gt;New Relic's distributed tracing dashboard (Source: New Relic Website)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qEk5a2BH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/08/jaeger_gantt_charts-min.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qEk5a2BH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/08/jaeger_gantt_charts-min.png" alt="Jaeger's distributed tracing UI"&gt;&lt;/a&gt;Jaeger's distributed tracing UI&lt;/p&gt;

&lt;p&gt;It's no surprise that New Relic has better features than Jaeger as it's paid. Pricing of most APM tools is not cheap, and the call to use one should be made on the basis of your business impact.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#alternative-to-jaeger-and-new-relic"&gt;
  &lt;/a&gt;
  Alternative to Jaeger and New Relic
&lt;/h2&gt;

&lt;p&gt;Jaeger and New Relic are both established tools in the observability domain. But Jaeger fells short on providing a robust observability framework since it only does distributed tracing. SaaS vendors like New Relic come with their own set of concerns, like sending your data to a 3rd party cloud vendor.&lt;/p&gt;

&lt;p&gt;That's where &lt;a href="https://signoz.io/"&gt;SigNoz&lt;/a&gt; comes into the picture. &lt;a href="https://signoz.io/"&gt;SigNoz&lt;/a&gt; is a full-stack open-source application performance monitoring and observability tool which can be used in place of Jaeger. SigNoz is built to support OpenTelemetry natively. It also provides users flexibility in terms of storage. You can choose between ClickHouse or Kafka + Druid as your backend storage while installing SigNoz.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6BdjoEB_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/SigNoz_architecture_clickhouse.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6BdjoEB_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/SigNoz_architecture_clickhouse.png" alt="Architecture of SigNoz with OpenTelemetry and ClickHouse"&gt;&lt;/a&gt;Architecture of SigNoz with ClickHouse as storage backend and OpenTelemetry for code instrumentatiion&lt;/p&gt;

&lt;p&gt;SigNoz comes with out of box visualization of things like RED metrics.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OKFqZ_PP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_charts_application_metrics.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OKFqZ_PP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_charts_application_metrics.png" alt="SigNoz UI showing the popular RED metrics"&gt;&lt;/a&gt;SigNoz UI showing application overview metrics like RPS, 50th/90th/99th Percentile latencies, and Error Rate&lt;/p&gt;

&lt;p&gt;Some of the things SigNoz can help you track:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Application overview metrics like RPS, 50th/90th/99th Percentile latencies, and Error Rate&lt;/li&gt;
&lt;li&gt;Slowest endpoints in your application&lt;/li&gt;
&lt;li&gt;See exact request trace to figure out issues in downstream services, slow DB queries, call to 3rd party services like payment gateways, etc&lt;/li&gt;
&lt;li&gt;Filter traces by service name, operation, latency, error, tags/annotations.&lt;/li&gt;
&lt;li&gt;Run aggregates on trace data&lt;/li&gt;
&lt;li&gt;Unified UI for both metrics and traces&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can check out SigNoz's GitHub repo here 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/2WkkmL4"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--od2lB_mG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yroh39ngk6sz6tv3z9y.png" alt="SigNoz GitHub repo"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>microservices</category>
      <category>monitoring</category>
      <category>tracing</category>
      <category>jaeger</category>
    </item>
    <item>
      <title>var, let, const: what's the difference?</title>
      <author>Romain Trotard</author>
      <pubDate>Wed, 06 Oct 2021 12:58:42 +0000</pubDate>
      <link>https://dev.to/romaintrotard/var-let-const-what-s-the-difference-2eh0</link>
      <guid>https://dev.to/romaintrotard/var-let-const-what-s-the-difference-2eh0</guid>
      <description>&lt;p&gt;Today we are going to talk about an important subject to know as a javascript developer.Everyday you probably use var, let or/and const, but do you know the difference between them. It's what we are going to talk about.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-var-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;var&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;var&lt;/code&gt; statement is less and less used nowadays, but it doesn't mean that it's bad to use it.&lt;br&gt;
In fact there are some tricky behaviors that can makes the code less predictive.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#reassignment"&gt;
  &lt;/a&gt;
  Reassignment
&lt;/h3&gt;

&lt;p&gt;A variable declared with &lt;code&gt;var&lt;/code&gt; can be reassigned with another value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;myVariable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;First value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;myVariable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Second value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;*&lt;em&gt;Note:&lt;/em&gt; You are not forced to initialized it:&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;notInitializedVar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#declaration-of-raw-var-endraw-with-same-name"&gt;
  &lt;/a&gt;
  Declaration of &lt;code&gt;var&lt;/code&gt; with same name
&lt;/h3&gt;

&lt;p&gt;You can declare multiple variable with the same name (or label):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;redeclaredVar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;First declaration&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;redeclaredVar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Second declaration&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#scope-of-raw-var-endraw-"&gt;
  &lt;/a&gt;
  Scope of &lt;code&gt;var&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The scope of &lt;code&gt;var&lt;/code&gt; depends on where it's declared. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#in-a-function"&gt;
  &lt;/a&gt;
  In a function
&lt;/h4&gt;

&lt;p&gt;When declared inside a function, the scope will be the &lt;strong&gt;entire function&lt;/strong&gt;. Yep event if you declared it inside a &lt;code&gt;if&lt;/code&gt;, it will be accessible outside of it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myDummyFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;myVariable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;A variable declared with var&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myVariable&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Will print "A variable declared with var"&lt;/span&gt;
&lt;span class="nx"&gt;myDummyFunction&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The variable is also accessible in inside "blocks" (for example &lt;code&gt;if&lt;/code&gt; block or inner function):&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myDummyFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;myVariable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;A variable declared with var&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myVariable&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Will print "A variable declared with var"&lt;/span&gt;
&lt;span class="nx"&gt;myDummyFunction&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#outside-of-a-function"&gt;
  &lt;/a&gt;
  Outside of a function
&lt;/h4&gt;

&lt;p&gt;When we declared a variable with &lt;code&gt;var&lt;/code&gt; outside of a function, the variables will be a &lt;strong&gt;globally-scoped&lt;/strong&gt; variable.&lt;/p&gt;

&lt;p&gt;For example if you type in the dev tool of your browser:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;myGlobalVariable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello, I will be accessible from the window&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Will print "Hello, I will be accessible from the window"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;myGlobalVariable&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; When working with ES modules and commonJS modules, this variable will only be scoped to the &lt;strong&gt;module&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; That's why Immediately Invoked Function Expression (IIFE) is born, to prevent variable to be in the global scope and conflict with ones of other libraries. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#hoisting"&gt;
  &lt;/a&gt;
  Hoisting
&lt;/h3&gt;

&lt;p&gt;Firstly, let's define what is hoisting: it's the behavior to put variable or function at the top of the file automatically. &lt;br&gt;
That's thanks to the hoisting you can declare your function after using it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;hoistedFunction&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;hoistedFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I can be called before my declaration&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The particularity with &lt;code&gt;var&lt;/code&gt;, it's that the variable is hoisted at the top of the file or of the function (if declared inside a function) and that &lt;strong&gt;it's initialized to undefined&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Will print "undefined"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myHoistedVar&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;myHoistedVar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I am a hoisted and initialized var&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myDummyFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Look the variable is declared inside the if&lt;/span&gt;
  &lt;span class="c1"&gt;// and the condition is always false&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myVariable&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;myVariable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;A variable declared with var&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Will print "undefined"&lt;/span&gt;
&lt;span class="nx"&gt;myDummyFunction&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#unqualified-identifier-assignment"&gt;
  &lt;/a&gt;
  Unqualified identifier assignment
&lt;/h3&gt;

&lt;p&gt;In non strict mode (without &lt;code&gt;use strict;&lt;/code&gt;), if you declared a variable with only its label and no qualifier (&lt;code&gt;var&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;const&lt;/code&gt;), this one will be automatically assigned to &lt;code&gt;var&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;unqualifiedVar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I will be automatically be qualified &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;
with var in non strict mode&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// This will be transformed into&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;unqualifiedVar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I will be automatically be qualified &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;
with var in non strict mode&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; In strict mode it will not work, and will throw you a &lt;strong&gt;ReferenceError&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// You will see in your console something like&lt;/span&gt;
&lt;span class="c1"&gt;// Uncaught ReferenceError: unqualifiedVar is not defined&lt;/span&gt;
&lt;span class="nx"&gt;unqualifiedVar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Will throw a ReferenceError&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#-raw-let-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;let&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;In everyday life, you probably use more &lt;code&gt;let&lt;/code&gt; variable than &lt;code&gt;var&lt;/code&gt;. But let's refresh our knowledge about it:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reassignment"&gt;
  &lt;/a&gt;
  Reassignment
&lt;/h3&gt;

&lt;p&gt;Like &lt;code&gt;var&lt;/code&gt;, you can reassign a variable declared with &lt;code&gt;let&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;myVariable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;First value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;myVariable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Second value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#scope-of-raw-let-endraw-"&gt;
  &lt;/a&gt;
  Scope of &lt;code&gt;let&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Here is one of the main difference with &lt;code&gt;var&lt;/code&gt;. A variable qualified with &lt;code&gt;let&lt;/code&gt; will be block scoped (ie only be accessible inside the current closer parent curly bracket).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myDummyFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;myVariable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;A let variable&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myVariable&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Will print "A let variable"&lt;/span&gt;
&lt;span class="nx"&gt;myDummyFunction&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Unlike &lt;code&gt;var&lt;/code&gt; it will throw a &lt;code&gt;ReferenceError&lt;/code&gt; if you try to access to a variable declared in a inner block:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myDummyFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;myVariable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;A let variable&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myVariable&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// You will see in your console something like&lt;/span&gt;
&lt;span class="c1"&gt;// Uncaught ReferenceError: myVariable is not defined&lt;/span&gt;
&lt;span class="nx"&gt;myDummyFunction&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; A variable declared with &lt;code&gt;let&lt;/code&gt; will &lt;strong&gt;never be&lt;/strong&gt; globally-scoped.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#cannot-redefined-a-same-label"&gt;
  &lt;/a&gt;
  Cannot redefined a same label
&lt;/h3&gt;

&lt;p&gt;Unlike &lt;code&gt;var&lt;/code&gt; you cannot defined another variable with the same label (identifier). Otherwise you will see a &lt;strong&gt;SyntaxError&lt;/strong&gt; in your console.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;myLetVariable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;First value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// You will see in your console something like&lt;/span&gt;
&lt;span class="c1"&gt;// Uncaught SyntaxError: Identifier 'myLetVariable' has&lt;/span&gt;
&lt;span class="c1"&gt;// already been declared&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;myLetVariable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Second value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#what-about-raw-hoisting-endraw-"&gt;
  &lt;/a&gt;
  What about &lt;code&gt;hoisting&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Despite what you may see on the web &lt;code&gt;let&lt;/code&gt; (like &lt;code&gt;const&lt;/code&gt;) are hoisted but the difference with &lt;code&gt;var&lt;/code&gt; is that they are not initialized to &lt;code&gt;undefined&lt;/code&gt;.&lt;br&gt;
Until the variable is not initialized you will have a &lt;code&gt;ReferenceError&lt;/code&gt; if you try to access it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myLetVariable&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// You will see in your console something like&lt;/span&gt;
&lt;span class="c1"&gt;// Uncaught ReferenceError: myLetVariable is not defined&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;myLetVariable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Some value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// From here no more TDZ&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This behavior is called &lt;strong&gt;Temporal Dead Zone&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If you are asking why is the term temporal being used?&lt;br&gt;
In fact it's because it depends of when the code is executed. For example if you have the following code, it's totally fine:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myLetVariable&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;myLetVariable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Some value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// After 500 ms you will see&lt;/span&gt;
&lt;span class="c1"&gt;// "Some value" prints in the console&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#-raw-const-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;const&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;A variable declared with &lt;code&gt;const&lt;/code&gt; has very similar properties than &lt;code&gt;let&lt;/code&gt;. The only difference is about &lt;strong&gt;reassignment&lt;/strong&gt; an &lt;strong&gt;initialization&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#no-reasignment"&gt;
  &lt;/a&gt;
  No reasignment
&lt;/h3&gt;

&lt;p&gt;With a variable declared with &lt;code&gt;const&lt;/code&gt;, it's not possible to reassign this variable with another value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myConstVariable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;First value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// You will see in your console something like&lt;/span&gt;
&lt;span class="c1"&gt;// Uncaught TypeError: Assignment to constant variable&lt;/span&gt;
&lt;span class="nx"&gt;myConstVariable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Second value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; A variable declared with &lt;code&gt;const&lt;/code&gt; is &lt;strong&gt;mutable&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

&lt;span class="c1"&gt;// Mutation is done here&lt;/span&gt;
&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Romain&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#initialization"&gt;
  &lt;/a&gt;
  Initialization
&lt;/h3&gt;

&lt;p&gt;You have to initialized a variable qualified with &lt;code&gt;const&lt;/code&gt;, otherwise you will have a &lt;strong&gt;SyntaxError&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// You will see in your console something like&lt;/span&gt;
&lt;span class="c1"&gt;// Uncaught SyntaxError: Missing initializer in const declaration&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;uninitializedConst&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope things are clearer in your mind. If you have to remember something, I guess it will be than scope between &lt;code&gt;var&lt;/code&gt; and &lt;code&gt;let&lt;/code&gt;/&lt;code&gt;const&lt;/code&gt; is different.&lt;br&gt;
&lt;code&gt;var&lt;/code&gt; has function scope when declared inside a function and global scope when outside. &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; has block scope.&lt;br&gt;
&lt;code&gt;let&lt;/code&gt; variable can be reassigned contrary to &lt;code&gt;const&lt;/code&gt;. But watch out, a variable declared with &lt;code&gt;const&lt;/code&gt; &lt;strong&gt;is not&lt;/strong&gt; immutable.&lt;br&gt;
All three are hoisted but &lt;code&gt;var&lt;/code&gt; is initialized to &lt;code&gt;undefined&lt;/code&gt; unlike &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; that are not.&lt;/p&gt;

&lt;p&gt;Here is a little table to resume:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Reassign&lt;/th&gt;
&lt;th&gt;Redeclare&lt;/th&gt;
&lt;th&gt;Scope&lt;/th&gt;
&lt;th&gt;Hoisted&lt;/th&gt;
&lt;th&gt;Unqualified variable&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;var&lt;/td&gt;
&lt;td&gt;✔️&lt;/td&gt;
&lt;td&gt;✔️&lt;/td&gt;
&lt;td&gt;function or global&lt;/td&gt;
&lt;td&gt;✔️ (initialized to undefined)&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;let&lt;/td&gt;
&lt;td&gt;✔️&lt;/td&gt;
&lt;td&gt;✖️&lt;/td&gt;
&lt;td&gt;block&lt;/td&gt;
&lt;td&gt;✔️ (not initialized, TDZ)&lt;/td&gt;
&lt;td&gt;✖️&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;const&lt;/td&gt;
&lt;td&gt;✖️&lt;/td&gt;
&lt;td&gt;✖️&lt;/td&gt;
&lt;td&gt;block&lt;/td&gt;
&lt;td&gt;✔️ (not initialized, TDZ)&lt;/td&gt;
&lt;td&gt;✖️&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;




&lt;p&gt;Do not hesitate to comment and if you want to see more, you can follow me on &lt;a href="https://twitter.com/romain_trotard"&gt;Twitter&lt;/a&gt; or go to my &lt;a href="https://rainbowapps.io/"&gt;Website&lt;/a&gt;. 🐼&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>explainlikeimfive</category>
    </item>
    <item>
      <title>Google Search themed portfolio website</title>
      <author>Enjeck C.</author>
      <pubDate>Wed, 06 Oct 2021 12:43:45 +0000</pubDate>
      <link>https://dev.to/enjeck/google-search-themed-portfolio-website-5fdb</link>
      <guid>https://dev.to/enjeck/google-search-themed-portfolio-website-5fdb</guid>
      <description>&lt;p&gt;Hi folks!&lt;/p&gt;

&lt;p&gt;Lately, I have been seeing a lot of portfolio websites inspired by operating systems. I wanted to build something similar, so here is what I came up with -- a portfolio website that functions like Google Search.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Try it out here&lt;/strong&gt;: &lt;a href="https://gfolio.enjeck.com/"&gt;https://gfolio.enjeck.com/&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;GitHub&lt;/strong&gt;: &lt;a href="https://github.com/enjeck/gfolio"&gt;https://github.com/enjeck/gfolio&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is actually my first ever React project. It was built from scratch. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#images"&gt;
  &lt;/a&gt;
  Images
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3EMhzWdp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/grs7f93it6y3azdohkmz.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3EMhzWdp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/grs7f93it6y3azdohkmz.gif" alt="Gfolio gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WkvQB44y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/09wysnzx9nt0ef102p8k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WkvQB44y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/09wysnzx9nt0ef102p8k.png" alt="Gfolio image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---WEjVS_U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1tbivhrdg07dojd9rumq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---WEjVS_U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1tbivhrdg07dojd9rumq.png" alt="Gfolio image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AGC9W1_7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z72gwm1jx1d3h8pti9pq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AGC9W1_7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z72gwm1jx1d3h8pti9pq.png" alt="Gfolio image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yl3BWSuP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x081rwr74j1xfxljbf7a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yl3BWSuP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x081rwr74j1xfxljbf7a.png" alt="Gfolio image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'll appreciate feedback on the overall design and project structure. Thanks!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Python ZTM Cheatsheet</title>
      <author>AmnaAbd</author>
      <pubDate>Wed, 06 Oct 2021 12:29:28 +0000</pubDate>
      <link>https://dev.to/amnaabd/python-ztm-cheatsheet-132n</link>
      <guid>https://dev.to/amnaabd/python-ztm-cheatsheet-132n</guid>
      <description>&lt;h1&gt;
  &lt;a href="#python-ztm-cheatsheet"&gt;
  &lt;/a&gt;
  Python ZTM Cheatsheet 💻🚀
&lt;/h1&gt;

&lt;p&gt;We created this Python 3 Cheat Sheet initially for students of &lt;a href="https://academy.zerotomastery.io/p/complete-python-developer-zero-to-mastery"&gt;Complete Python Developer in 2020: Zero to Mastery&lt;/a&gt; but we're now sharing it with any Python beginners to help them learn and remember common Python syntax and with intermediate and advanced Python developers as a handy reference. If you'd like to download a PDF version of this Python Cheat Sheet, you can get it &lt;a href="https://zerotomastery.io/courses/python/cheatsheet/?utm_source=github&amp;amp;utm_medium=ztm-python-cheat-sheet"&gt;here&lt;/a&gt;!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contents"&gt;
  &lt;/a&gt;
  Contents
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Python Types:&lt;/strong&gt; &lt;strong&gt;&lt;a href="#numbers"&gt;&lt;code&gt;Numbers&lt;/code&gt;&lt;/a&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;a href="#strings"&gt;&lt;code&gt;Strings&lt;/code&gt;&lt;/a&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;a href="#boolean"&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;a href="#lists"&gt;&lt;code&gt;Lists&lt;/code&gt;&lt;/a&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;a href="#dictionaries"&gt;&lt;code&gt;Dictionaries&lt;/code&gt;&lt;/a&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;a href="#tuples"&gt;&lt;code&gt;Tuples&lt;/code&gt;&lt;/a&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;a href="#sets"&gt;&lt;code&gt;Sets&lt;/code&gt;&lt;/a&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;a href="#none"&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Python Basics:&lt;/strong&gt; &lt;strong&gt;&lt;a href="#comparison-operators"&gt;&lt;code&gt;Comparison Operators&lt;/code&gt;&lt;/a&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;a href="#logical-operators"&gt;&lt;code&gt;Logical Operators&lt;/code&gt;&lt;/a&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;a href="#loops"&gt;&lt;code&gt;Loops&lt;/code&gt;&lt;/a&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;a href="#range"&gt;&lt;code&gt;Range&lt;/code&gt;&lt;/a&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;a href="#enumerate"&gt;&lt;code&gt;Enumerate&lt;/code&gt;&lt;/a&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;a href="#counter"&gt;&lt;code&gt;Counter&lt;/code&gt;&lt;/a&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;a href="#named-tuple"&gt;&lt;code&gt;Named Tuple&lt;/code&gt;&lt;/a&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;a href="#ordereddict"&gt;&lt;code&gt;OrderedDict&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;    &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Functions:&lt;/strong&gt; &lt;strong&gt;&lt;a href="#functions"&gt;&lt;code&gt;Functions&lt;/code&gt;&lt;/a&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;a href="#lambda"&gt;&lt;code&gt;Lambda&lt;/code&gt;&lt;/a&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;a href="#comprehensions"&gt;&lt;code&gt;Comprehensions&lt;/code&gt;&lt;/a&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;a href="#map-filter-reduce"&gt;&lt;code&gt;Map,Filter,Reduce&lt;/code&gt;&lt;/a&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;a href="#ternary-condition"&gt;&lt;code&gt;Ternary&lt;/code&gt;&lt;/a&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;a href="#any-all"&gt;&lt;code&gt;Any,All&lt;/code&gt;&lt;/a&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;a href="#closures"&gt;&lt;code&gt;Closures&lt;/code&gt;&lt;/a&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;a href="#scope"&gt;&lt;code&gt;Scope&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;    &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advanced Python:&lt;/strong&gt; &lt;strong&gt;&lt;a href="#modules"&gt;&lt;code&gt;Modules&lt;/code&gt;&lt;/a&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;a href="#iterators"&gt;&lt;code&gt;Iterators&lt;/code&gt;&lt;/a&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;a href="#generators"&gt;&lt;code&gt;Generators&lt;/code&gt;&lt;/a&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;a href="#decorators"&gt;&lt;code&gt;Decorators&lt;/code&gt;&lt;/a&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;a href="#class"&gt;&lt;code&gt;Class&lt;/code&gt;&lt;/a&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;a href="#exceptions"&gt;&lt;code&gt;Exceptions&lt;/code&gt;&lt;/a&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;a href="#command-line-arguments"&gt;&lt;code&gt;Command Line Arguments&lt;/code&gt;&lt;/a&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;a href="#file-io"&gt;&lt;code&gt;File IO&lt;/code&gt;&lt;/a&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;a href="#useful-libraries"&gt;&lt;code&gt;Useful Libraries&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#numbers"&gt;
  &lt;/a&gt;
  Numbers
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;python's 2 main types for Numbers is int and float (or integers and floating point numbers)&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;# int 
&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# int
&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;# int
&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# float
&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;2.2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# float
&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;4E2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# float - 4*10 to the power of 2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Arithmetic
&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;  &lt;span class="c1"&gt;# 13
&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;  &lt;span class="c1"&gt;# 7
&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;  &lt;span class="c1"&gt;# 30
&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="c1"&gt;# 1000
&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;  &lt;span class="c1"&gt;# 3.3333333333333335
&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="c1"&gt;# 3 --&amp;gt; floor division - no decimals and returns an int
&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;  &lt;span class="c1"&gt;# 1 --&amp;gt; modulo operator - return the reminder. Good for deciding if number is even or odd
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Basic Functions
&lt;/span&gt;&lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;      &lt;span class="c1"&gt;# 25 --&amp;gt; like doing 5**2
&lt;/span&gt;&lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;       &lt;span class="c1"&gt;# 50
&lt;/span&gt;&lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;5.46&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;# 5
&lt;/span&gt;&lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;5.468&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;# 5.47 --&amp;gt; round to nth digit
&lt;/span&gt;&lt;span class="nb"&gt;bin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;512&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;       &lt;span class="c1"&gt;# '0b1000000000' --&amp;gt;  binary format
&lt;/span&gt;&lt;span class="nb"&gt;hex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;512&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;       &lt;span class="c1"&gt;# '0x200' --&amp;gt; hexadecimal format
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Converting Strings to Numbers
&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"How old are you?"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;pi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"What is the value of pi?"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;pi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#strings"&gt;
  &lt;/a&gt;
  Strings
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;strings in python as stored as sequences of letters in memory&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Hellloooooo'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# str
&lt;/span&gt;
&lt;span class="s"&gt;'I&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s"&gt;m thirsty'&lt;/span&gt;
&lt;span class="s"&gt;"I'm thirsty"&lt;/span&gt;
&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt; &lt;span class="c1"&gt;# new line
&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt; &lt;span class="c1"&gt;# adds a tab
&lt;/span&gt;
&lt;span class="s"&gt;'Hey you!'&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# y
&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'Andrei Neagoie'&lt;/span&gt;
&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;     &lt;span class="c1"&gt;# e
&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;[:]&lt;/span&gt;     &lt;span class="c1"&gt;# Andrei Neagoie
&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;    &lt;span class="c1"&gt;# ndrei Neagoie
&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;    &lt;span class="c1"&gt;# A
&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;    &lt;span class="c1"&gt;# e
&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;[::&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;   &lt;span class="c1"&gt;# Andrei Neagoie
&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;[::&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;# eiogaeN ierdnA
&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# Ade e
# : is called slicing and has the format [ start : end : step ]
&lt;/span&gt;
&lt;span class="s"&gt;'Hi there '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;'Timmy'&lt;/span&gt; &lt;span class="c1"&gt;# 'Hi there Timmy' --&amp;gt; This is called string concatenation
&lt;/span&gt;&lt;span class="s"&gt;'*'&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="c1"&gt;# **********
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Basic Functions
&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'turtle'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 6
&lt;/span&gt;
&lt;span class="c1"&gt;# Basic Methods
&lt;/span&gt;&lt;span class="s"&gt;'  I am alone '&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;               &lt;span class="c1"&gt;# 'I am alone' --&amp;gt; Strips all whitespace characters from both ends.
&lt;/span&gt;&lt;span class="s"&gt;'On an island'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'d'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;             &lt;span class="c1"&gt;# 'On an islan' --&amp;gt; # Strips all passed characters from both ends.
&lt;/span&gt;&lt;span class="s"&gt;'but life is good!'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;           &lt;span class="c1"&gt;# ['but', 'life', 'is', 'good!']
&lt;/span&gt;&lt;span class="s"&gt;'Help me'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'me'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'you'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;        &lt;span class="c1"&gt;# 'Help you' --&amp;gt; Replaces first with second param
&lt;/span&gt;&lt;span class="s"&gt;'Need to make fire'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Need'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;# True
&lt;/span&gt;&lt;span class="s"&gt;'and cook rice'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'rice'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;      &lt;span class="c1"&gt;# True
&lt;/span&gt;&lt;span class="s"&gt;'bye bye'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'e'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                  &lt;span class="c1"&gt;# 2
&lt;/span&gt;&lt;span class="s"&gt;'still there?'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;                &lt;span class="c1"&gt;# STILL THERE?
&lt;/span&gt;&lt;span class="s"&gt;'HELLO?!'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;                     &lt;span class="c1"&gt;# hello?!
&lt;/span&gt;&lt;span class="s"&gt;'ok, I am done.'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;capitalize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;         &lt;span class="c1"&gt;# 'Ok, I am done.'
&lt;/span&gt;&lt;span class="s"&gt;'oh hi there'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'i'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;               &lt;span class="c1"&gt;# 4 --&amp;gt; returns the starting index position of the first occurrence
&lt;/span&gt;&lt;span class="s"&gt;'oh hi there'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'e'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;              &lt;span class="c1"&gt;# 2
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# String Formatting
&lt;/span&gt;&lt;span class="n"&gt;name1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'Andrei'&lt;/span&gt;
&lt;span class="n"&gt;name2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'Sunny'&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'Hello there &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name1&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; and &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name2&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;       &lt;span class="c1"&gt;# Hello there Andrei and Sunny - Newer way to do things as of python 3.6
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Hello there {}, {}'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="c1"&gt;# Hello there Andrei and Sunny
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Hello there %s and %s'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c1"&gt;# Hello there Andrei and Sunny --&amp;gt; you can also use %d, %f, %r for integers, floats, string representations of objects respectively
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Palindrome check
&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'reviver'&lt;/span&gt;
&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;[::&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# True
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#boolean"&gt;
  &lt;/a&gt;
  Boolean
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;True or False. Used in a lot of comparison and logical operations in Python&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# all of the below evaluate to False. Everything else will evaluate to True in Python.
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;([]))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;({}))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;(()))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;

&lt;span class="c1"&gt;# See Logical Operators and Comparison Operators section for more on booleans.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#lists"&gt;
  &lt;/a&gt;
  Lists
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Unlike strings, lists are mutable sequences in python&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;my_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'3'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# We assume this list won't mutate for each example below
&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;               &lt;span class="c1"&gt;# 4
&lt;/span&gt;&lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'3'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;         &lt;span class="c1"&gt;# 2
&lt;/span&gt;&lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;           &lt;span class="c1"&gt;# 1 --&amp;gt; count how many times 2 appears
&lt;/span&gt;
&lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;                 &lt;span class="c1"&gt;# True
&lt;/span&gt;&lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;                &lt;span class="c1"&gt;# [2, '3', True]
&lt;/span&gt;&lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;                &lt;span class="c1"&gt;# [1]
&lt;/span&gt;&lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;                &lt;span class="c1"&gt;# True
&lt;/span&gt;&lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="p"&gt;[::&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;               &lt;span class="c1"&gt;# [1, 2, '3', True]
&lt;/span&gt;&lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="p"&gt;[::&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;              &lt;span class="c1"&gt;# [True, '3', 2, 1]
&lt;/span&gt;&lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;             &lt;span class="c1"&gt;# [1, '3']
&lt;/span&gt;
&lt;span class="c1"&gt;# : is called slicing and has the format [ start : end : step ]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Add to List
&lt;/span&gt;&lt;span class="n"&gt;my_list&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;                &lt;span class="c1"&gt;# [1, 2, '3', True, 1, 2, '3', True]
&lt;/span&gt;&lt;span class="n"&gt;my_list&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;            &lt;span class="c1"&gt;# [1, 2, '3', True, 100] --&amp;gt; doesn't mutate original list, creates new one
&lt;/span&gt;&lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;        &lt;span class="c1"&gt;# None --&amp;gt; Mutates original list to [1, 2, '3', True, 100]          # Or: &amp;lt;list&amp;gt; += [&amp;lt;el&amp;gt;]
&lt;/span&gt;&lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# None --&amp;gt; Mutates original list to [1, 2, '3', True, 100, 200]
&lt;/span&gt;&lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'!!!'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;# None --&amp;gt;  [1, 2, '!!!', '3', True] - Inserts item at index and moves the rest to the right.
&lt;/span&gt;
&lt;span class="s"&gt;' '&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;'Hello'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'There'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="c1"&gt;# 'Hello There' --&amp;gt; Joins elements using string as separator.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Copy a List
&lt;/span&gt;&lt;span class="n"&gt;basket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'apples'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'pears'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'oranges'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;new_basket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;basket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;new_basket2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;basket&lt;/span&gt;&lt;span class="p"&gt;[:]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Remove from List
&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    &lt;span class="c1"&gt;# 3 --&amp;gt; mutates original list, default index in the pop method is -1 (the last item)
&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;# 2 --&amp;gt; mutates original list
&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;# None --&amp;gt; [1,3] Removes first occurrence of item or raises ValueError.
&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# None --&amp;gt; mutates original list and removes all items: []
&lt;/span&gt;&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Ordering
&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;         &lt;span class="c1"&gt;# None --&amp;gt; Mutates list to [1, 2, 3, 5]
&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# None --&amp;gt; Mutates list to [5, 3, 2, 1]
&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;      &lt;span class="c1"&gt;# None --&amp;gt; Mutates list to [3, 5, 2, 1]
&lt;/span&gt;&lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;        &lt;span class="c1"&gt;# [1, 2, 3, 5] --&amp;gt; new list created
&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;reversed&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;&lt;span class="c1"&gt;# [3, 5, 2, 1] --&amp;gt; reversed() returns an iterator
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Useful operations
&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;# True
&lt;/span&gt;&lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="c1"&gt;# 1
&lt;/span&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="c1"&gt;# 5
&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="c1"&gt;# 15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Get First and Last element of a list
&lt;/span&gt;&lt;span class="n"&gt;mList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;63&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;77&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;49&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mList&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#63
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Matrix
&lt;/span&gt;&lt;span class="n"&gt;matrix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# 7 --&amp;gt; Grab first first of the third item in the matrix object
&lt;/span&gt;
&lt;span class="c1"&gt;# Looping through a matrix by rows:
&lt;/span&gt;&lt;span class="n"&gt;mx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mx&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mx&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mx&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# 1 2 3 4 5 6
&lt;/span&gt;
&lt;span class="c1"&gt;# Transform into a list:
&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mx&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mx&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mx&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]))]&lt;/span&gt; &lt;span class="c1"&gt;# [1,2,3,4,5,6]
&lt;/span&gt;
&lt;span class="c1"&gt;# Combine columns with zip and *:
&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;mx&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="c1"&gt;# [(1, 3), (2, 4)]
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# List Comprehensions
# new_list[&amp;lt;action&amp;gt; for &amp;lt;item&amp;gt; in &amp;lt;iterator&amp;gt; if &amp;lt;some condition&amp;gt;]
&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="s"&gt;'hello'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;                  &lt;span class="c1"&gt;# ['h', 'e', 'l', 'l', '0']
&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;                &lt;span class="c1"&gt;# [2, 4, 6]
&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# [0, 2, 4, 6, 8]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Advanced Functions
&lt;/span&gt;&lt;span class="n"&gt;list_of_chars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Helloooo'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                                   &lt;span class="c1"&gt;# ['H', 'e', 'l', 'l', 'o', 'o', 'o', 'o']
&lt;/span&gt;&lt;span class="n"&gt;sum_of_elements&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;                                 &lt;span class="c1"&gt;# 15
&lt;/span&gt;&lt;span class="n"&gt;element_sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;pair&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;])]&lt;/span&gt;         &lt;span class="c1"&gt;# [5, 7, 9]
&lt;/span&gt;&lt;span class="n"&gt;sorted_by_second&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;'hi'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'you'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'man'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;el&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;el&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="c1"&gt;# ['man', 'hi', 'you']
&lt;/span&gt;&lt;span class="n"&gt;sorted_by_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
                       &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Bina'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'age'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
                       &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;'Andy'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'age'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
                       &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Zoey'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'age'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;}],&lt;/span&gt;
                       &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;el&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;el&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;&lt;span class="c1"&gt;# [{'name': 'Andy', 'age': 18}, {'name': 'Bina', 'age': 30}, {'name': 'Zoey', 'age': 55}]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Read line of a file into a list
&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"myfile.txt"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;lines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#dictionaries"&gt;
  &lt;/a&gt;
  Dictionaries
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Also known as mappings or hash tables. They are key value pairs that are guaranteed to retain order of insertion starting from Python 3.7&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;my_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Andrei Neagoie'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'age'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'magic_power'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;my_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;                      &lt;span class="c1"&gt;# Andrei Neagoie
&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_dict&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                         &lt;span class="c1"&gt;# 3
&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_dict&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;                 &lt;span class="c1"&gt;# ['name', 'age', 'magic_power']
&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_dict&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;               &lt;span class="c1"&gt;# ['Andrei Neagoie', 30, False]
&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_dict&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;                &lt;span class="c1"&gt;# [('name', 'Andrei Neagoie'), ('age', 30), ('magic_power', False)]
&lt;/span&gt;&lt;span class="n"&gt;my_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'favourite_snack'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'Grapes'&lt;/span&gt;&lt;span class="c1"&gt;# {'name': 'Andrei Neagoie', 'age': 30, 'magic_power': False, 'favourite_snack': 'Grapes'}
&lt;/span&gt;&lt;span class="n"&gt;my_dict&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'age'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                   &lt;span class="c1"&gt;# 30 --&amp;gt; Returns None if key does not exist.
&lt;/span&gt;&lt;span class="n"&gt;my_dict&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'ages'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;              &lt;span class="c1"&gt;# 0 --&amp;gt; Returns default (2nd param) if key is not found
&lt;/span&gt;
&lt;span class="c1"&gt;#Remove key
&lt;/span&gt;&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;my_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;my_dict&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;my_dict&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;'cool'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;                                         &lt;span class="c1"&gt;# {'name': 'Andrei Neagoie', 'age': 30, 'magic_power': False, 'favourite_snack': 'Grapes', 'cool': True}
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;my_dict&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'cool'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;                                         &lt;span class="c1"&gt;# {'name': 'Andrei Neagoie', 'age': 30, 'magic_power': False, 'favourite_snack': 'Grapes', 'cool': True}
&lt;/span&gt;&lt;span class="n"&gt;new_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'Andrei'&lt;/span&gt;&lt;span class="p"&gt;],[&lt;/span&gt;&lt;span class="s"&gt;'age'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;],[&lt;/span&gt;&lt;span class="s"&gt;'magic_power'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;  &lt;span class="c1"&gt;# Creates a dict from collection of key-value pairs.
&lt;/span&gt;&lt;span class="n"&gt;new_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'age'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'magic_power'&lt;/span&gt;&lt;span class="p"&gt;],[&lt;/span&gt;&lt;span class="s"&gt;'Andrei'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;&lt;span class="c1"&gt;# Creates a dict from two collections.
&lt;/span&gt;&lt;span class="n"&gt;new_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;my_dict&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'favourite_snack'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                              &lt;span class="c1"&gt;# Removes item from dictionary.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Dictionary Comprehension
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;new_dict&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'age'&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;# {'name': 'Andrei', 'age': 32} --&amp;gt; Filter dict by keys
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#tuples"&gt;
  &lt;/a&gt;
  Tuples
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Like lists, but they are used for immutable thing (that don't change)&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;my_tuple&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'apple'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'grapes'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'mango'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'grapes'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;apple&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;grapes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mango&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;grapes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;my_tuple&lt;/span&gt;&lt;span class="c1"&gt;# Tuple unpacking
&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_tuple&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                          &lt;span class="c1"&gt;# 4
&lt;/span&gt;&lt;span class="n"&gt;my_tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;                            &lt;span class="c1"&gt;# mango
&lt;/span&gt;&lt;span class="n"&gt;my_tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;                           &lt;span class="c1"&gt;# 'grapes'
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Immutability
&lt;/span&gt;&lt;span class="n"&gt;my_tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'donuts'&lt;/span&gt;  &lt;span class="c1"&gt;# TypeError
&lt;/span&gt;&lt;span class="n"&gt;my_tuple&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'candy'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;# AttributeError
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Methods
&lt;/span&gt;&lt;span class="n"&gt;my_tuple&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'grapes'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 1
&lt;/span&gt;&lt;span class="n"&gt;my_tuple&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'grapes'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Zip
&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="c1"&gt;# [(1, 4), (2, 5), (3, 6)]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# unzip
&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="c1"&gt;# Some output of zip() function
&lt;/span&gt;&lt;span class="n"&gt;unzip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;unzip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#sets"&gt;
  &lt;/a&gt;
  Sets
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Unorderd collection of unique elements.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;my_set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;my_set&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# {1}
&lt;/span&gt;&lt;span class="n"&gt;my_set&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;# {1, 100}
&lt;/span&gt;&lt;span class="n"&gt;my_set&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;# {1, 100} --&amp;gt; no duplicates!
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;new_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;           &lt;span class="c1"&gt;# {1, 2, 3, 4, 5, 6}
&lt;/span&gt;
&lt;span class="n"&gt;my_set&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;      &lt;span class="c1"&gt;# {1} --&amp;gt; Raises KeyError if element not found
&lt;/span&gt;&lt;span class="n"&gt;my_set&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;discard&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="c1"&gt;# {1} --&amp;gt; Doesn't raise an error if element not found
&lt;/span&gt;&lt;span class="n"&gt;my_set&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;          &lt;span class="c1"&gt;# {}
&lt;/span&gt;&lt;span class="n"&gt;new_set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="c1"&gt;# {1,2,3}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;set1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;set2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;set3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;set1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;union&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;set2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;               &lt;span class="c1"&gt;# {1,2,3,4,5}
&lt;/span&gt;&lt;span class="n"&gt;set4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;set1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;intersection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;set2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;        &lt;span class="c1"&gt;# {3}
&lt;/span&gt;&lt;span class="n"&gt;set5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;set1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;difference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;set2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;          &lt;span class="c1"&gt;# {1, 2}
&lt;/span&gt;&lt;span class="n"&gt;set6&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;set1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;symmetric_difference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;set2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;# {1, 2, 4, 5}
&lt;/span&gt;&lt;span class="n"&gt;set1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;issubset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;set2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                   &lt;span class="c1"&gt;# False
&lt;/span&gt;&lt;span class="n"&gt;set1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;issuperset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;set2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                 &lt;span class="c1"&gt;# False
&lt;/span&gt;&lt;span class="n"&gt;set1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isdisjoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;set2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                 &lt;span class="c1"&gt;# False --&amp;gt; return True if two sets have a null intersection.
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Frozenset
# hashable --&amp;gt; it can be used as a key in a dictionary or as an element in a set.
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;frozenset&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;frozenset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;collection&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#none"&gt;
  &lt;/a&gt;
  None
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;None is used for absence of a value and can be used to show nothing has been assigned to an object&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# NoneType
&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#comparison-operators"&gt;
  &lt;/a&gt;
  Comparison Operators
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;==&lt;/span&gt;                   &lt;span class="c1"&gt;# equal values
&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;                   &lt;span class="c1"&gt;# not equal
&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;                    &lt;span class="c1"&gt;# left operand is greater than right operand
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;                    &lt;span class="c1"&gt;# left operand is less than right operand
&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;                   &lt;span class="c1"&gt;# left operand is greater than or equal to right operand
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;                   &lt;span class="c1"&gt;# left operand is less than or equal to right operand
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# check if two operands refer to same object in memory
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#logical-operators"&gt;
  &lt;/a&gt;
  Logical Operators
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;# True
&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="c1"&gt;# True
&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;      &lt;span class="c1"&gt;# True
&lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;        &lt;span class="c1"&gt;# False
&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# True
&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;evaluates&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;boolean&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# perform action1
&lt;/span&gt;&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;evaluates&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;boolean&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# perform action2
&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# perform action3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#loops"&gt;
  &lt;/a&gt;
  Loops
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;my_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;my_tuple&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;my_list2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="n"&gt;my_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="s"&gt;'c'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 1, 2, 3
&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;my_tuple&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 1, 2, 3
&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;my_list2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# (1,2), (3,4), (5,6)
&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="s"&gt;'123'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 1, 2, 3
&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;my_dict&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="c1"&gt;# Dictionary Unpacking
&lt;/span&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 'a', 'b', 'c'
&lt;/span&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 1, 2, 3
&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;evaluates&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;boolean&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# action
&lt;/span&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;evaluates&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;boolean&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt; &lt;span class="c1"&gt;# break out of while loop
&lt;/span&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;evaluates&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;boolean&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;continue&lt;/span&gt; &lt;span class="c1"&gt;# continue to the next line in the block
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# waiting until user quits
&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s"&gt;'quit'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"What should I do?"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#range"&gt;
  &lt;/a&gt;
  Range
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;          &lt;span class="c1"&gt;# range(0, 10) --&amp;gt; 0 to 9
&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;        &lt;span class="c1"&gt;# range(1, 10)
&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="c1"&gt;# [0, 2, 4, 6, 8]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#enumerate"&gt;
  &lt;/a&gt;
  Enumerate
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;el&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'helloo'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;, &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;el&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# 0, h
# 1, e
# 2, l
# 3, l
# 4, o
# 5, o
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#counter"&gt;
  &lt;/a&gt;
  Counter
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;
&lt;span class="n"&gt;colors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'red'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'blue'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'yellow'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'blue'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'red'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'blue'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;# Counter({'blue': 3, 'red': 2, 'yellow': 1})
&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;most_common&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# ('blue', 3)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#named-tuple"&gt;
  &lt;/a&gt;
  Named Tuple
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Tuple is an immutable and hashable list.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Named tuple is its subclass with named elements.&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;
&lt;span class="n"&gt;Point&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Point'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'x y'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;# Point(x=1, y=2)
&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;             &lt;span class="c1"&gt;# 1
&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;              &lt;span class="c1"&gt;# 1
&lt;/span&gt;&lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'y'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 2
&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_fields&lt;/span&gt;        &lt;span class="c1"&gt;# Or: Point._fields #('x', 'y')
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;
&lt;span class="n"&gt;Person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Person'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'name height'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Jean-Luc'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;187&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;           &lt;span class="c1"&gt;# '187'
&lt;/span&gt;&lt;span class="s"&gt;'{p.height}'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;# '187'
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#ordereddict"&gt;
  &lt;/a&gt;
  OrderedDict
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Maintains order of insertion&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;OrderedDict&lt;/span&gt;
&lt;span class="c1"&gt;# Store each person's languages, keeping # track of who responded first. 
&lt;/span&gt;&lt;span class="n"&gt;programmers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OrderedDict&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;programmers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Tim'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'python'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'javascript'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;programmers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Sarah'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'C++'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;programmers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Bia'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Ruby'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Python'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Go'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;langs&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;programmers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;'--&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;lang&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;langs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#functions"&gt;
  &lt;/a&gt;
  Functions
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#args-and-kwargs"&gt;
  &lt;/a&gt;
  *args and **kwargs
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Splat (*) expands a collection into positional arguments, while splatty-splat (**) expands a dictionary into keyword arguments.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;args&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;kwargs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'x'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'y'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'z'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;some_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# same as some_func(1, 2, x=3, y=4, z=5)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#-inside-function-definition"&gt;
  &lt;/a&gt;
  * Inside Function Definition
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Splat combines zero or more positional arguments into a tuple, while splatty-splat combines zero or more keyword arguments into a dictionary.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#ordering-of-parameters"&gt;
  &lt;/a&gt;
  Ordering of parameters:
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;                  &lt;span class="c1"&gt;# f(1, 2, 3)
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;               &lt;span class="c1"&gt;# f(1, 2, 3)
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;               &lt;span class="c1"&gt;# f(1, 2, z=3)
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;            &lt;span class="c1"&gt;# f(1, 2, z=3)
&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;               &lt;span class="c1"&gt;# f(x=1, y=2, z=3)
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;            &lt;span class="c1"&gt;# f(x=1, y=2, z=3) | f(1, y=2, z=3)
&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;        &lt;span class="c1"&gt;# f(x=1, y=2, z=3) | f(1, y=2, z=3) | f(1, 2, z=3) | f(1, 2, 3)
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;     &lt;span class="c1"&gt;# f(x=1, y=2, z=3) | f(1, y=2, z=3) | f(1, 2, z=3) | f(1, 2, 3)
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;     &lt;span class="c1"&gt;# f(x=1, y=2, z=3) | f(1, y=2, z=3)
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c1"&gt;# f(x=1, y=2, z=3) | f(1, y=2, z=3) | f(1, 2, z=3)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#other-uses-of-"&gt;
  &lt;/a&gt;
  Other Uses of *
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;                &lt;span class="c1"&gt;# [1, 2, 3, 4]
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;                &lt;span class="c1"&gt;# {1, 2, 3, 4}
&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;                &lt;span class="c1"&gt;# (1, 2, 3, 4)
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'c'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="c1"&gt;# {'a': 1, 'b': 2, 'c': 3}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#lambda"&gt;
  &lt;/a&gt;
  Lambda
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# lambda: &amp;lt;return_value&amp;gt;
# lambda &amp;lt;argument1&amp;gt;, &amp;lt;argument2&amp;gt;: &amp;lt;return_value&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Factorial
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nb"&gt;reduce&lt;/span&gt;

&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="n"&gt;factorial&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Fibonacci
&lt;/span&gt;&lt;span class="n"&gt;fib&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#55
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#comprehensions"&gt;
  &lt;/a&gt;
  Comprehensions
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;         &lt;span class="c1"&gt;# [1, 2, ..., 10]
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;  &lt;span class="c1"&gt;# {6, 7, 8, 9}
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;iter&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;         &lt;span class="c1"&gt;# (5, 6, ..., 14)
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;      &lt;span class="c1"&gt;# {0: 0, 1: 2, ..., 9: 18}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="c1"&gt;# [0, 1, 2, 1, 2, 3, 2, 3, 4]
&lt;/span&gt;
&lt;span class="c1"&gt;# Is the same as:
&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#ternary-condition"&gt;
  &lt;/a&gt;
  Ternary Condition
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# &amp;lt;expression_if_true&amp;gt; if &amp;lt;condition&amp;gt; else &amp;lt;expression_if_false&amp;gt;
&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s"&gt;'zero'&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="c1"&gt;# ['zero', 1, 'zero', 3]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#map-filter-reduce"&gt;
  &lt;/a&gt;
  Map Filter Reduce
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nb"&gt;reduce&lt;/span&gt;
&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;            &lt;span class="c1"&gt;# [1, 2, 3, 4, 5, 6, 7, 8, 9,10]
&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;         &lt;span class="c1"&gt;# (6, 7, 8, 9)
&lt;/span&gt;&lt;span class="nb"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;acc&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;        &lt;span class="c1"&gt;# 45
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#any-all"&gt;
  &lt;/a&gt;
  Any All
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="nb"&gt;any&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="c1"&gt;# True if at least one item in collection is truthy, False if empty.
&lt;/span&gt;&lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;     &lt;span class="c1"&gt;# True if all items in collection are true
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#closures"&gt;
  &lt;/a&gt;
  Closures
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;We have a closure in Python when:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;A nested function references a value of its enclosing function and then&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;the enclosing function returns the nested function.&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_multiplier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;out&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;multiply_by_3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_multiplier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;multiply_by_3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;30&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;If multiple nested functions within enclosing function reference the same value, that value gets shared.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;To dynamically access function's first free variable use &lt;code&gt;'&amp;lt;function&amp;gt;.__closure__[0].cell_contents'&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#scope"&gt;
  &lt;/a&gt;
  Scope
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;If variable is being assigned to anywhere in the scope, it is regarded as a local variable, unless it is declared as a 'global' or a 'nonlocal'.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_counter&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;out&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;nonlocal&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_counter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#modules"&gt;
  &lt;/a&gt;
  Modules
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Runs main() if file wasn't imported.
&lt;/span&gt;    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module_name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module_name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;function_name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module_name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;
&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module_name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;function_name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;m_function&lt;/span&gt;
&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module_name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#iterators"&gt;
  &lt;/a&gt;
  Iterators
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;In this cheatsheet &lt;code&gt;'&amp;lt;collection&amp;gt;'&lt;/code&gt; can also mean an iterator.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;iter&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;collection&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;iter&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;to_exclusive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="c1"&gt;# Sequence of return values until 'to_exclusive'.
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;el&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;iter&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;           &lt;span class="c1"&gt;# Raises StopIteration or returns 'default' on end.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#generators"&gt;
  &lt;/a&gt;
  Generators
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Convenient way to implement the iterator protocol.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;
        &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;step&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#decorators"&gt;
  &lt;/a&gt;
  Decorators
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;A decorator takes a function, adds some functionality and returns it.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;decorator_name&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;function_that_gets_passed_to_decorator&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#debugger-example"&gt;
  &lt;/a&gt;
  Debugger Example
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Decorator that prints function's name every time it gets called.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;wraps&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;out&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Wraps is a helper decorator that copies metadata of function add() to function out().&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Without it &lt;code&gt;'add.__name__'&lt;/code&gt; would return &lt;code&gt;'out'&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#class"&gt;
  &lt;/a&gt;
  Class
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;User defined objects are created using the class keyword&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt; &lt;span class="c1"&gt;# Class Object Attribute
&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="c1"&gt;# Object Attribute
&lt;/span&gt;
    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_class_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#inheritance"&gt;
  &lt;/a&gt;
  Inheritance
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;staff_num&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;staff_num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;staff_num&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#multiple-inheritance"&gt;
  &lt;/a&gt;
  Multiple Inheritance
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;C&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;MRO determines the order in which parent classes are traversed when searching for a method:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mro&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="nc"&gt;C&lt;/span&gt;&lt;span class="s"&gt;'&amp;gt;, &amp;lt;class '&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="s"&gt;'&amp;gt;, &amp;lt;class '&lt;/span&gt;&lt;span class="sa"&gt;B&lt;/span&gt;&lt;span class="s"&gt;'&amp;gt;, &amp;lt;class '&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="s"&gt;'&amp;gt;]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#exceptions"&gt;
  &lt;/a&gt;
  Exceptions
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;ZeroDivisionError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"No division by zero!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Enter your age: '&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Oops!  That was no valid number.  Try again...'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# code that depends on the try block running successfully should be placed in the else block.
&lt;/span&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Carry on!'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#raising-exception"&gt;
  &lt;/a&gt;
  Raising Exception
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="nb"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'some error message'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#finally"&gt;
  &lt;/a&gt;
  Finally
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="nb"&gt;KeyboardInterrupt&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'oops'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'All done!'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#command-line-arguments"&gt;
  &lt;/a&gt;
  Command Line Arguments
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="n"&gt;script_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;arguments&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#file-io"&gt;
  &lt;/a&gt;
  File IO
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Opens a file and returns a corresponding file object.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&amp;lt;path&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#modes"&gt;
  &lt;/a&gt;
  Modes
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;'r'&lt;/code&gt;  - Read (default).&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;'w'&lt;/code&gt;  - Write (truncate).&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;'x'&lt;/code&gt;  - Write or fail if the file already exists.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;'a'&lt;/code&gt;  - Append.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;'w+'&lt;/code&gt; - Read and write (truncate).&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;'r+'&lt;/code&gt; - Read and write from the start.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;'a+'&lt;/code&gt; - Read and write from the end.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;'t'&lt;/code&gt;  - Text mode (default).&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;'b'&lt;/code&gt;  - Binary mode.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#file"&gt;
  &lt;/a&gt;
  File
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seek&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                      &lt;span class="c1"&gt;# Moves to the start of the file.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;     &lt;span class="c1"&gt;# Returns a line.
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readlines&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    &lt;span class="c1"&gt;# Returns a list of lines.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;           &lt;span class="c1"&gt;# Writes a string or bytes object.
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writelines&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;           &lt;span class="c1"&gt;# Writes a list of strings or bytes objects.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Methods do not add or strip trailing newlines.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#read-text-from-file"&gt;
  &lt;/a&gt;
  Read Text from File
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;read_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'utf-8'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readlines&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# or read()
&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;read_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#write-text-to-file"&gt;
  &lt;/a&gt;
  Write Text to File
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;write_to_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'w'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'utf-8'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#append-text-to-file"&gt;
  &lt;/a&gt;
  Append Text to File
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;append_to_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'utf-8'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#useful-libraries"&gt;
  &lt;/a&gt;
  Useful Libraries
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#csv"&gt;
  &lt;/a&gt;
  CSV
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;csv&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#read-rows-from-csv-file"&gt;
  &lt;/a&gt;
  Read Rows from CSV File
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;read_csv_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'utf-8'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;delimiter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;';'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#write-rows-to-csv-file"&gt;
  &lt;/a&gt;
  Write Rows to CSV File
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;write_to_csv_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'w'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'utf-8'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;writer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;delimiter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;';'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writerows&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#json"&gt;
  &lt;/a&gt;
  JSON
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ensure_ascii&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;indent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#read-object-from-json-file"&gt;
  &lt;/a&gt;
  Read Object from JSON File
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;read_json_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'utf-8'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#write-object-to-json-file"&gt;
  &lt;/a&gt;
  Write Object to JSON File
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;write_to_json_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;an_object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'w'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'utf-8'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;an_object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ensure_ascii&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;indent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#pickle"&gt;
  &lt;/a&gt;
  Pickle
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pickle&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pickle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pickle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#read-object-from-file"&gt;
  &lt;/a&gt;
  Read Object from File
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;read_pickle_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'rb'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;pickle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#write-object-to-file"&gt;
  &lt;/a&gt;
  Write Object to File
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;write_to_pickle_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;an_object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'wb'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;pickle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;an_object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#profile"&gt;
  &lt;/a&gt;
  Profile
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#basic"&gt;
  &lt;/a&gt;
  Basic
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;
&lt;span class="n"&gt;start_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# Seconds since
&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;duration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;start_time&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#math"&gt;
  &lt;/a&gt;
  Math
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pi&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;acos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;asin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tan&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;atan&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;degrees&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;radians&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;log10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;log2&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;inf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nan&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;isinf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;isnan&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#statistics"&gt;
  &lt;/a&gt;
  Statistics
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;statistics&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;median&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;variance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pvariance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pstdev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#random"&gt;
  &lt;/a&gt;
  Random
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shuffle&lt;/span&gt;
&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# random float between 0 and 1
&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# random integer between 0 and 100
&lt;/span&gt;&lt;span class="n"&gt;random_el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# select a random element from list
&lt;/span&gt;&lt;span class="n"&gt;shuffle&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# shuffles a list
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#datetime"&gt;
  &lt;/a&gt;
  Datetime
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Module 'datetime' provides 'date' &lt;code&gt;&amp;lt;D&amp;gt;&lt;/code&gt;, 'time' &lt;code&gt;&amp;lt;T&amp;gt;&lt;/code&gt;, 'datetime' &lt;code&gt;&amp;lt;DT&amp;gt;&lt;/code&gt; and 'timedelta' &lt;code&gt;&amp;lt;TD&amp;gt;&lt;/code&gt; classes. All are immutable and hashable.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Time and datetime can be 'aware' &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;, meaning they have defined timezone, or 'naive' &lt;code&gt;&amp;lt;n&amp;gt;&lt;/code&gt;, meaning they don't.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;If object is naive it is presumed to be in system's timezone.&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timedelta&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dateutil.tz&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;UTC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tzlocal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gettz&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#constructors"&gt;
  &lt;/a&gt;
  Constructors
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hour&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;minute&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;microsecond&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tzinfo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fold&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DT&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hour&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;minute&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TD&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;microseconds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;milliseconds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="n"&gt;minutes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hours&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;weeks&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Use &lt;code&gt;'&amp;lt;D/DT&amp;gt;.weekday()'&lt;/code&gt; to get the day of the week (Mon == 0).&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;'fold=1'&lt;/code&gt; means second pass in case of time jumping back for one hour.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#now"&gt;
  &lt;/a&gt;
  Now
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;DTn&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;DT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;                     &lt;span class="c1"&gt;# Current local date or naive datetime.
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DTn&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utcnow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;                      &lt;span class="c1"&gt;# Naive datetime from current UTC time.
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DTa&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;tz&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                     &lt;span class="c1"&gt;# Aware datetime from current tz time.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#timezone"&gt;
  &lt;/a&gt;
  Timezone
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;tz&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UTC&lt;/span&gt;                              &lt;span class="c1"&gt;# UTC timezone.
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;tz&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tzlocal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;                        &lt;span class="c1"&gt;# Local timezone.
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;tz&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gettz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&amp;lt;Cont.&amp;gt;/&amp;lt;City&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;          &lt;span class="c1"&gt;# Timezone from 'Continent/City_Name' str.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DTa&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DT&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;astimezone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;tz&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;            &lt;span class="c1"&gt;# Datetime, converted to passed timezone.
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Ta&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;DTa&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;DT&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tzinfo&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;tz&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;      &lt;span class="c1"&gt;# Unconverted object with new timezone.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#regex"&gt;
  &lt;/a&gt;
  Regex
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;regex&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Substitutes all occurrences.
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;regex&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;            &lt;span class="c1"&gt;# Returns all occurrences.
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;regex&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;maxsplit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Use brackets in regex to keep the matches.
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Match&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;regex&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;             &lt;span class="c1"&gt;# Searches for first occurrence of pattern.
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Match&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;regex&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;              &lt;span class="c1"&gt;# Searches only at the beginning of the text.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#match-object"&gt;
  &lt;/a&gt;
  Match Object
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Match&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;   &lt;span class="c1"&gt;# Whole match.
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Match&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Part in first bracket.
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Match&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# All bracketed parts.
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Match&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;   &lt;span class="c1"&gt;# Start index of a match.
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Match&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;     &lt;span class="c1"&gt;# Exclusive end index of a match.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#special-sequences"&gt;
  &lt;/a&gt;
  Special Sequences
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Expressions below hold true for strings that contain only ASCII characters. Use capital letters for negation.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="s"&gt;'\d'&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'[0-9]'&lt;/span&gt;          &lt;span class="c1"&gt;# Digit
&lt;/span&gt;&lt;span class="s"&gt;'\s'&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'[ &lt;/span&gt;&lt;span class="se"&gt;\t\n\r\f\v&lt;/span&gt;&lt;span class="s"&gt;]'&lt;/span&gt;  &lt;span class="c1"&gt;# Whitespace
&lt;/span&gt;&lt;span class="s"&gt;'\w'&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'[a-zA-Z0-9_]'&lt;/span&gt;   &lt;span class="c1"&gt;# Alphanumeric
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits
&lt;/h2&gt;

&lt;p&gt;Inspired by:  &lt;a href="https://zerotomastery.io/cheatsheets/python-cheat-sheet"&gt;https://zerotomastery.io/cheatsheets/python-cheat-sheet&lt;/a&gt;&lt;/p&gt;



&lt;h3&gt;Connect with me:&lt;/h3&gt;

&lt;p&gt;
&lt;a href="https://discord.gg/HKxUV6jXPj"&gt;
  &lt;img alt="AmnaAbd's Discord" src="https://res.cloudinary.com/practicaldev/image/fetch/s--qpcpFaS3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/peterthehan/peterthehan/master/assets/discord.svg"&gt;
&lt;/a&gt;
&lt;a href="https://twitter.com/AmnaAbd22"&gt;
  &lt;img alt="Amna Abdallah | Twitter" src="https://res.cloudinary.com/practicaldev/image/fetch/s--55PHPPhV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/peterthehan/peterthehan/master/assets/twitter.svg"&gt;
&lt;/a&gt;
&lt;a href="https://www.linkedin.com/in/amna-abdallah-2b615572/"&gt;
  &lt;img alt="AmnaAbd's LinkedIN" src="https://res.cloudinary.com/practicaldev/image/fetch/s--opORli7b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/peterthehan/peterthehan/master/assets/linkedin.svg"&gt;
&lt;/a&gt;
&lt;a href="https://open.spotify.com/user/vzhpqhqmrep0yz70cxzpi45b5"&gt;
  &lt;img alt="Amna's Spotify" src="https://res.cloudinary.com/practicaldev/image/fetch/s--mBvRh3aP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/peterthehan/peterthehan/master/assets/spotify.svg"&gt;
&lt;/a&gt;
&lt;a href="https://codepen.io/AmnaAbd"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--myiCxFTx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.jsdelivr.net/npm/simple-icons%403.0.1/icons/codepen.svg" alt="amnaabd"&gt;&lt;/a&gt;
&lt;a href="https://dev.to/amnaabd"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ec4IN74C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.jsdelivr.net/npm/simple-icons%403.0.1/icons/dev-dot-to.svg" alt="amnaabd"&gt;&lt;/a&gt;
&lt;a href="https://instagram.com/amna.amouna.3114"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6jSVYXZc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.jsdelivr.net/npm/simple-icons%403.0.1/icons/instagram.svg" alt="amnaabd"&gt;&lt;/a&gt;
&lt;/p&gt;

</description>
      <category>python</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Liman: Invalid Credentials Hatası Çözümü</title>
      <author>Turan Kılıç</author>
      <pubDate>Wed, 06 Oct 2021 12:21:46 +0000</pubDate>
      <link>https://dev.to/aciklab/liman-invalid-credentials-hatasi-cozumu-2ofi</link>
      <guid>https://dev.to/aciklab/liman-invalid-credentials-hatasi-cozumu-2ofi</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fV5eB6SO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kw58n49elqxyqcfcvk5l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fV5eB6SO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kw58n49elqxyqcfcvk5l.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ekranın sağ alt köşesinde ve bazı yeni eklenen sunucularda görülmektedir.&lt;/p&gt;

&lt;p&gt;Bu durumun 2 farklı şekilde çözülmektedir.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-sambahvl-eklentisinin-ayarlar%C4%B1n%C4%B1n-d%C3%BCzenlenmesi"&gt;
  &lt;/a&gt;
  1. Sambahvl Eklentisinin Ayarlarının Düzenlenmesi
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Eğer hatanın alındığı sunucu üzerinde Sambahvl eklentisi yoksa direkt 2. adıma geçiniz.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Liman arayüzünde "Sambahvl" eklentisine sahip olan sunucunun eklenti arayüzüne gidilir.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Zr0sizqA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/10v4p4j9ya3i6c25ny4y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zr0sizqA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/10v4p4j9ya3i6c25ny4y.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sağ yukarıdan eklenti ayarları simgesine girilir.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_PxGqDd3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h1odvpmgme4zt8pj3y03.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_PxGqDd3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h1odvpmgme4zt8pj3y03.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Açılan arayüzde domain oluşturulurken belirlenmiş admin kullanıcısı ve parolası girilir ve kaydedilerek çıkılır.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m77vaDLA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6x5au2tln3i6k20kf4rt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m77vaDLA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6x5au2tln3i6k20kf4rt.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-kasadan-sunucu-i%C3%A7in-y%C3%B6netici-anahtar%C4%B1-al%C4%B1nmas%C4%B1"&gt;
  &lt;/a&gt;
  2. Kasadan Sunucu için Yönetici Anahtarı Alınması
&lt;/h2&gt;

&lt;p&gt;Bu işlem için önce liman arayüzünde sol alt kısımda bulunan "Kasa" seçeneği seçilir.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--04qWgt3N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qlemwadwrjuybkowdiul.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--04qWgt3N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qlemwadwrjuybkowdiul.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Daha sonra "Anahtar Ekle" seçeneği seçilir.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OnnAAZ5s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/619fx2r44577b287al56.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OnnAAZ5s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/619fx2r44577b287al56.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Gerekli sunucu seçilir. Kullanıcı adı ve şifre kısmına admin kullanıcısı ve parolası girilir. Daha sonra "Anahtarı Ekle" butonuna basılır.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yn1SjP-y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hcg82pziqyjv7fhkwneg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yn1SjP-y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hcg82pziqyjv7fhkwneg.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Böylelikle tekrardan sunucu arayüzüne gelindiğinde hata alınmayacaktır.&lt;/p&gt;

</description>
      <category>liman</category>
      <category>aciklab</category>
    </item>
    <item>
      <title>Top 3 mistakes every Test Automation Engineer make</title>
      <author>Dilpreet Johal</author>
      <pubDate>Wed, 06 Oct 2021 11:55:02 +0000</pubDate>
      <link>https://dev.to/automationbro/top-3-mistakes-every-test-automation-engineer-makes-47f</link>
      <guid>https://dev.to/automationbro/top-3-mistakes-every-test-automation-engineer-makes-47f</guid>
      <description>&lt;p&gt;In this article, I want to talk to you guys about Top 3 mistakes that I have seen every test automation engineer makes or have made at some point in their career. So let's get started -&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mistake-1-using-sleep-in-your-code%C2%A0"&gt;
  &lt;/a&gt;
  Mistake #1: Using "Sleep" in your code -
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j3VjEM2K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7o8cjaw3c0whb226irpn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j3VjEM2K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7o8cjaw3c0whb226irpn.png" alt="Example of a test using sleep (pause)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is one of the most common mistake I have seen everyone makes whenever they need to "fix" a test. Now, may be you already know or have heard that using "sleep" is bad in your code but let's look into why exactly this is bad - &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tests-take-longer-to%C2%A0complete"&gt;
  &lt;/a&gt;
  Tests take longer to complete
&lt;/h3&gt;

&lt;p&gt;So this one is obvious, you are adding hardcoded sleep of course it will take longer to complete. This is important because you want faster feedback right, that's the whole point of Agile approach and if few of your tests are taking like 30 mins to an hour or even more, that's adding a lot of extra time in your build pipeline.&lt;br&gt;
And if you are thinking I know I am adding this 2 second here, who cares no one will notice, well that takes us to our next point.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#using-sleep-without-being-aware-of%C2%A0it"&gt;
  &lt;/a&gt;
  Using "sleep" without being aware of it
&lt;/h3&gt;

&lt;p&gt;In the image below, we are using a method called .open() and right after that we are doing a 2 seconds wait to make sure the page loads.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hvqr-0_0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oyewkx9zvtutxfjeipuw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hvqr-0_0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oyewkx9zvtutxfjeipuw.png" alt="Calling the .open() method in the test"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But, let's understand what is happening inside the .open() method. Here, we are waiting for 2 seconds again. So most likely, the person that added 2 seconds wait in the previous wasn't aware of the wait that's already within the method.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0DDX2XdH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nv28kqa03w5kgmokoq99.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0DDX2XdH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nv28kqa03w5kgmokoq99.png" alt=".open() method implementation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While the total 4 seconds wait might not seem that bad but think of large projects where you have 10s and 100s of files, it will be a big problem if you are using sleep commands everywhere.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#makes-your-tests-unstable-flakiness"&gt;
  &lt;/a&gt;
  Makes your tests unstable (flakiness)
&lt;/h3&gt;

&lt;p&gt;Adding sleep makes your test unstable because you don't know how long to wait for a particular page or an element to load. Taking a look at our previous example once again - &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Person A added 2 sec when they wrote the original test&lt;/li&gt;
&lt;li&gt;Person B had issues with 2 sec due to slowness so they ended up adding 2 seconds more&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now imagine if you are running your tests in the env that is slow then these tests might fail again, so all you are doing is going back and adding more time to your tests which takes us back to this whole problem once again!&lt;/p&gt;

&lt;p&gt;Ok by now I hope you have realized the problems with using sleep commands, so what should we do instead?&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#99-of-the-time-you-can-replace-sleep-commands-with-appropriate-wait-commands"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;99% of the time you can replace 'sleep' commands with appropriate 'wait' commands&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;And if you are thinking why only 99%? That's because you might run into some scenarios where the wait commands are just not working, and this is really extreme case but I will be honest that yes sometimes you will encounter those. In that particular case it is fine to use sleep but come back to that problem again and think if theres a better way to implement that solution.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#mistake-2-over-complicated-tests"&gt;
  &lt;/a&gt;
  Mistake #2: Over Complicated Tests
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FxZqTQF2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lptzs7eildpxdtr1myce.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FxZqTQF2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lptzs7eildpxdtr1myce.png" alt="Example of an over complicated test"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another common mistake that I have seen over the years is writing over complicated long &amp;amp; complex test as shown in the image above. One key thing to notice in the above image is that at the bottom we have 180k ms i.e. 3 minutes of timeout added as the test takes that long to complete. &lt;/p&gt;

&lt;p&gt;So if you are writing tests like this then lets talk about the disadvantages of writing such tests -&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#no-idea-what-test-is-trying-to%C2%A0do"&gt;
  &lt;/a&gt;
  No idea what test is trying to do
&lt;/h3&gt;

&lt;p&gt;So this one is funny because there are times where I have written long and complex tests and in couple of months when I came back to it, I had no clue what my test was trying to do. And of course, you can imagine how other team members would feel when they read this kind of code (all I can say is I don't want to be near them at that time!)&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#long-time-for-test-to%C2%A0complete%C2%A0"&gt;
  &lt;/a&gt;
  Long time for test to complete 
&lt;/h3&gt;

&lt;p&gt;This is obvious, when you write long tests, it will take long time to complete as well that's why we saw that 3 min timeout in the image above. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#longer-tests-causes-test-flakiness"&gt;
  &lt;/a&gt;
  Longer tests causes test flakiness
&lt;/h3&gt;

&lt;p&gt;What happens when we write long tests? Well, long tests are generally lot more unstable because simply theres a lot of things going on and due to that, it has a lot more chances to fail.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#difficult-to-debug-the%C2%A0code"&gt;
  &lt;/a&gt;
  Difficult to debug the code
&lt;/h3&gt;

&lt;p&gt;Which takes us to our last point, when the tests fail then oh boy! Good luck trying to debug this. Essentially, you will be running a test which takes 3–5 mins to complete and you are trying to find out in which line where exactly the issue is and how you can fix it. If you haven't run into this problem then I will say you are lucky as this is quite painful to work with.&lt;/p&gt;

&lt;p&gt;So what should we do instead? Well here's what I think - &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#test-should-focus-on-doing-1-thing-at-a-time"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Test should focus on doing 1 thing at a time.&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Now, don't take this statement to heart, by 1 thing it could be something that you and your team decides - can be 1 feature, 1 component, 1 E2E flow which completes in a reasonable amount of time (ideally less than a min).&lt;/p&gt;

&lt;p&gt;As long as the test has a single purpose which everyone understands, I think that's good enough to work with.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#mistake-3-test-dependency"&gt;
  &lt;/a&gt;
  Mistake #3: Test Dependency
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hSXesa9H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6da6e5q9dfvkd0oyswlg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hSXesa9H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6da6e5q9dfvkd0oyswlg.png" alt="Example of one test depending on another test"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the example above, the second test is dependent on the first test as that's where we open up the url for the page we are testing. This is bad because of few reasons:&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#unable-to-run-individual-test-on%C2%A0failure"&gt;
  &lt;/a&gt;
  Unable to run individual test on failure
&lt;/h3&gt;

&lt;p&gt;If the second test fails due to some reason, you will not be able to run that test only as it depending on the first test where we are opening up the url. The only options you have is to run both the tests which will take longer time to execute or you will have to refactor your tests which we will talk about shortly.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#changing-the-order-of-the-test-will-cause-the-test-to%C2%A0fail"&gt;
  &lt;/a&gt;
  Changing the order of the test will cause the test to fail
&lt;/h3&gt;

&lt;p&gt;If someone else comes and simply change the order of these tests, it will start failing again because their test buddy is not in the same order as before. This is another big issue as now you will need to know the order of each of these tests to run them in future.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#makes-it-difficult-to-refactor-the%C2%A0code"&gt;
  &lt;/a&gt;
  Makes it difficult to refactor the code
&lt;/h3&gt;

&lt;p&gt;Now, when you do decide to make refactor in your tests, it would be quite painful as you will need to understand how all these dependencies work and have to fix all that to be able to do any kind of refactor which will end up taking a lot more of your time.&lt;/p&gt;

&lt;p&gt;So what should we do instead?&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#tests-should-be-isolated-independent"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Tests should be Isolated / Independent.&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Your goal should be to write tests which can be ran individually without relying on any other tests or even any other data. This will give you a lot more flexibility if you want to do any refactor or simply reorganize your tests in future.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#lets-review"&gt;
  &lt;/a&gt;
  Let's Review
&lt;/h2&gt;

&lt;p&gt;Let's do a quick sum up of everything we covered in this article -&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Avoid using 'Sleep' in your code&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Do not write long and complex tests&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tests should not depend on each other&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hopefully if you avoid these mistakes you can create a stable and efficient test framework.&lt;/p&gt;

&lt;p&gt;If you enjoyed this article &amp;amp; would like to learn more about Test automation &amp;amp; Best Practices then you should check out my new course on &lt;a href="https://medium.com/r?url=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fwebdriverio-complete-beginner-course%2F%3FreferralCode%3D5190D58FC784B9F4E1AD"&gt;WebdriverIO&lt;/a&gt; where I teach you how to do Web Automation using the industry standard best practices. &lt;/p&gt;

&lt;p&gt;You can check out the promo video of the course below:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/xgDDYeoxQlI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>testing</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>How Does React Native Work?</title>
      <author>Max Tsurbeliov</author>
      <pubDate>Wed, 06 Oct 2021 11:49:21 +0000</pubDate>
      <link>https://dev.to/akveo/how-does-react-native-work-2a8h</link>
      <guid>https://dev.to/akveo/how-does-react-native-work-2a8h</guid>
      <description>&lt;p&gt;React Native is one of the leading cross-platform developing frameworks nowadays. &lt;a href="https://www.statista.com/statistics/869224/worldwide-software-developer-working-hours/"&gt;Recent research shows&lt;/a&gt; that 38% of developers use React Native to create mobile, desktop, and other types of apps in 2021.&lt;/p&gt;

&lt;p&gt;React Native is valuable because of the open-source, broad spectrum of features and application area it presents. In this article, we invite you to look under the hood of the framework and find out:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is React Native;&lt;/li&gt;
&lt;li&gt;How does React Native work?;&lt;/li&gt;
&lt;li&gt;React Native development process;&lt;/li&gt;
&lt;li&gt;React Native features;&lt;/li&gt;
&lt;li&gt;The future of React Native.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-react-native"&gt;
  &lt;/a&gt;
  What is React Native
&lt;/h2&gt;

&lt;p&gt;React Native was created in 2015 by Facebook. Developers wrote it in JavaScript after they faced the problem of rendering React web applications on mobile devices. It gained popularity very fast for its features and capabilities. Among the React Native applications are Instagram, Facebook, Tesla, Skype, UberEats, Walmart, and Shopify.&lt;/p&gt;

&lt;p&gt;Initially, the Facebook team designed React Native to create natively rendering Android, and iOS mobile apps, using React JS library. Then, due to the open environment of the framework, developers from all over the world contributed to it and extended its capabilities. Now, &lt;a href="https://reactnative.dev/docs/out-of-tree-platforms"&gt;it works with major mobile platforms&lt;/a&gt; and Linux, macOS, Windows, etc. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-react-native-work"&gt;
  &lt;/a&gt;
  How does React Native work?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#react-native-architecture"&gt;
  &lt;/a&gt;
  React Native architecture
&lt;/h3&gt;

&lt;p&gt;The cross-platform capability of React Native becomes possible owing to its unique architecture. &lt;/p&gt;

&lt;p&gt;The core element of React Native architecture is the Bridge. This system employs React library to render the application on a device. Simply put, the bridge transforms the JS code into the native components and vice versa. The bridge translates JavaScript into platform-specific components. It gets the JS call, leverages the APIs (Kotlin, Objective C, Java), which allows native rendering of an application. The process doesn’t affect user experience because these async calls take place apart from the main thread.&lt;/p&gt;

&lt;p&gt;However, if your app employs multiple threads and large amounts of data, this structure can cause delays. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#development-process"&gt;
  &lt;/a&gt;
  Development process
&lt;/h3&gt;

&lt;p&gt;React Native is based on React and uses the single JavaScript codebase to reuse the code on various platforms. Unlike Ionic and many other cross-platform development frameworks, React Native renders native components by invoking platform-specific APIs. For instance, to render UI components on iOS, React Native uses either Objective C or Swift APIs. As for Android mobile applications, it will be Java or Kotlin. In fact, a developer doesn’t need to know Objective C or Java to create the apps. &lt;/p&gt;

&lt;p&gt;The React Native development process happens in JavaScript, TypeScript, and JSX. The developers can reuse significant parts (up to 100%) of the code. &lt;/p&gt;

&lt;p&gt;Another peculiarity of React Native is its commands for component creation. Instead of HTML components, RN has specific components that replace them.&lt;/p&gt;

&lt;p&gt;Also, features like 3d party library support, hot reload, and vast UI libraries make the development process much more easy and productive for developers. When an application is ready, you can connect it with &lt;a href="https://www.akveo.com/blog/7-best-react-native-databases-and-how-to-choose-the-right-one-in-2021"&gt;a cloud or local database&lt;/a&gt; to provide the storage capacity.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-native-features"&gt;
  &lt;/a&gt;
  React Native features
&lt;/h2&gt;

&lt;p&gt;Here, we will elaborate on React Native features that make the framework prominent.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#npm-repository-support"&gt;
  &lt;/a&gt;
  NPM repository support
&lt;/h3&gt;

&lt;p&gt;NPM (Node Package Manager) streamlines React Native apps development process. NPM is a repository of pre-made libraries that developers can use working with React Native framework. This feature makes the development process much faster, allowing React Native developers to upload the code patterns from the NPM libraries. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-reusability"&gt;
  &lt;/a&gt;
  Code reusability
&lt;/h3&gt;

&lt;p&gt;This is the core feature of any cross-platform development framework. However, the percentage of code you can reuse varies from platform to platform. In the case of React Native, you can use almost all the code throughout the different platforms. This feature saves plenty of time and reduces costs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#flexible-programming-language"&gt;
  &lt;/a&gt;
  Flexible programming language
&lt;/h3&gt;

&lt;p&gt;The programming language and its flexibility play a crucial part in the framework’s performance and success. The more common the core language of the cross-platform development framework, the faster and easier the learning process becomes. It means you won’t have any problems training your JS developers to work with React Native. However, if you want to create a unique app faster, it makes sense &lt;a href="https://www.akveo.com/blog/how-to-hire-a-dedicated-react-native-developer-in-2021-ultimate-guide-interview-questions"&gt;to hire experienced React Native developers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Apart from that, React Native uses JavaScript as a base and supports TypeScript out-of-the-box. These peculiarities make the React Native platform accessible for a larger group of developers. &lt;a href="https://insights.stackoverflow.com/survey/2020#technology-programming-scripting-and-markup-languages-professional-developers"&gt;According to the latest developer survey&lt;/a&gt;, JS is the most popular programming language, with around 70% of developers using it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#strong-developer-community"&gt;
  &lt;/a&gt;
  Strong developer community
&lt;/h3&gt;

&lt;p&gt;React Native framework became popular among developers around the world almost instantly after its launch in 2015. Ever since, the community has been growing and contributing to the open-source framework, extending its functionality and making it faster. This characteristic secures the future of React Native cross-platform framework and makes it attractive for other developers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3d-party-libraries-support"&gt;
  &lt;/a&gt;
  3d party libraries support
&lt;/h3&gt;

&lt;p&gt;Another feature that makes React Native stand out from the other cross-platform frameworks is the 3d party libraries’ support. Integration with 3d party libraries empowers developers with more out-of-the-box solutions and broadens the development opportunities. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#high-performance-in-mobile-environments"&gt;
  &lt;/a&gt;
  High performance in mobile environments
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.akveo.com/blog/react-native-for-mobile-app-development-points-to-consider-in-2021"&gt;React Native has been working with mobile platforms&lt;/a&gt; (iOS, Android) from the first day of its existence. No wonder it has excellent performance with mobile apps development. React Native developers can reuse more code in the mobile environment than in any other, making it the fastest cross-platform framework for mobile apps now. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#live-amp-hot-reload"&gt;
  &lt;/a&gt;
  Live &amp;amp; Hot reload
&lt;/h3&gt;

&lt;p&gt;The HMR (Hot Module Replacement) facility allows React Native developers to change, add, and modify modules while the system is on the go. As a result, this feature streamlines the app development process in the following ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Saves time by updating only the changed code;&lt;/li&gt;
&lt;li&gt;Retains application’s state (that’s lost during the full reload);&lt;/li&gt;
&lt;li&gt;Updates the browser as soon as modifications in the JS code are made.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The live reload feature of React Native allows you to see the changes on your screen as soon as you change them. This feature is especially useful for mobile apps development. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rich-ui-capabilities%C2%A0"&gt;
  &lt;/a&gt;
  Rich UI capabilities 
&lt;/h3&gt;

&lt;p&gt;React Native framework is the go-to option if you give much attention to the UI of your application. The framework has exceptional rendering capabilities along with numerous UI libraries for all types of applications.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-future-of-react-native"&gt;
  &lt;/a&gt;
  The future of React Native
&lt;/h2&gt;

&lt;p&gt;The Facebook team, along with all the contributors from the developer community, continue upgrading the React Native environment. They add new features, widen the functionality of React Native, and expand its cross-platform capacity. &lt;/p&gt;

&lt;p&gt;There is no doubt that with the high performance and the dedicated developer community behind it, React Native is here to stay and will continue to emerge. Currently, React Native framework emerges in the following directions:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#streaming-model-upgrade"&gt;
  &lt;/a&gt;
  Streaming model upgrade
&lt;/h3&gt;

&lt;p&gt;Currently, React Native community is bringing to life the Fabric project that should change the existing mechanism once and for all. It will allow developers to invoke JavaScript synchronously on a given thread. This feature will reduce the main thread load time without hindering the response.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#moving-towards-platformagnosticism"&gt;
  &lt;/a&gt;
  Moving towards platform-agnosticism
&lt;/h3&gt;

&lt;p&gt;Platform-agnosticism is a certain app development philosophy that aims to create totally cross-platform applications. According to the concept, the ideal app is the one you can create once and use on every platform without any additional code manipulations. Although it’s not easy to achieve, the React Native community strives to make the framework capable of creating perfectly cross-platform applications.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bridge-simplification"&gt;
  &lt;/a&gt;
  Bridge simplification
&lt;/h3&gt;

&lt;p&gt;The next development direction React Native community is moving towards is bridge simplification. This will enhance direct invocation between native and JavaScript and allow the creation of new debugging tools.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#extension-of-async-capabilities"&gt;
  &lt;/a&gt;
  Extension of Async capabilities
&lt;/h3&gt;

&lt;p&gt;Async upgrade is aiming to enhance the asynchronous rendering of React Native framework. This, in its turn, will streamline asynchronous data handling and rendering.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Taking into account all the technologies and features React Native represents, we can say for sure that it is a top cross-platform development framework. Developer community recognition, thousands of outstanding applications with billiards of users prove it. With the support of Facebook and thousands of contributors, React Native will definitely evolve and make the app development process easier, faster, and more enjoyable.&lt;/p&gt;

&lt;p&gt;By the way, the Akveo developers’ team is proud to add value to the React Native community with the free and open-source UI Kitten based on the &lt;a href="https://eva.design/products"&gt;Eva Design system&lt;/a&gt;. Many developers saved their time, and money, using it. You can &lt;a href="https://akveo.github.io/react-native-ui-kitten/"&gt;try the Kitten and see all the benefits for yourself&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>reactnative</category>
      <category>beginners</category>
      <category>opensource</category>
    </item>
    <item>
      <title>🚀 The Missing Docker Crash Course for Developers</title>
      <author>Bobby Iliev</author>
      <pubDate>Wed, 06 Oct 2021 11:41:14 +0000</pubDate>
      <link>https://dev.to/bobbyiliev/the-missing-docker-crash-course-for-developers-2ccb</link>
      <guid>https://dev.to/bobbyiliev/the-missing-docker-crash-course-for-developers-2ccb</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction-to-docker"&gt;
  &lt;/a&gt;
  Introduction to Docker
&lt;/h1&gt;




&lt;p&gt;It is more likely than not that &lt;strong&gt;Docker&lt;/strong&gt; and containers are going to be part of your IT career in one way or another.&lt;/p&gt;

&lt;p&gt;In this blog post series I'll cover the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  What are Docker images, containers and Docker Hub&lt;/li&gt;
&lt;li&gt;  Installing Docker on Ubuntu Linux on a DigitalOcean Droplet&lt;/li&gt;
&lt;li&gt;  Working with Docker containers&lt;/li&gt;
&lt;li&gt;  Working with Docker images&lt;/li&gt;
&lt;li&gt;  Deploying a Dockerized app&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I'll be using &lt;strong&gt;DigitalOcean&lt;/strong&gt; for all of the demos, so I would strongly encourage you to create a &lt;strong&gt;DigitalOcean&lt;/strong&gt; account follow along. You would learn more by doing!&lt;/p&gt;

&lt;p&gt;To make things even better you can use my referral link to get a free $100 credit that you could use to deploy your virtual machines and test the guide yourself on a few &lt;strong&gt;DigitalOcean servers&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://m.do.co/c/2a9bba940f39"&gt;DigitalOcean $100 Free Credit&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Once you have your account here's how to deploy your first Droplet/server:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.digitalocean.com/docs/droplets/how-to/create/"&gt;https://www.digitalocean.com/docs/droplets/how-to/create/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'll be using &lt;strong&gt;Ubuntu 18.04&lt;/strong&gt; so I would recommend that you stick to the same so you could follow along.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-is-a-container"&gt;
  &lt;/a&gt;
  What is a container?
&lt;/h2&gt;

&lt;p&gt;According to the official definition from the &lt;a href="//docker.com"&gt;docker.com&lt;/a&gt; website, a container is a standard unit of software that packages up code and all its dependencies so the application runs quickly and reliably from one computing environment to another. A Docker container image is a lightweight, standalone, executable package of software that includes everything needed to run an application: code, runtime, system tools, system libraries, and settings.&lt;/p&gt;

&lt;p&gt;Container images become containers at runtime and in the case of Docker containers - images become containers when they run on Docker Engine. Available for both Linux and Windows-based applications, containerized software will always run the same, regardless of the infrastructure. Containers isolate software from its environment and ensure that it works uniformly despite differences for instance between development and staging.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DxUxL9qw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/April2020/container-what-is-container.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DxUxL9qw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/April2020/container-what-is-container.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-is-a-docker-image"&gt;
  &lt;/a&gt;
  What is a Docker image?
&lt;/h2&gt;

&lt;p&gt;A &lt;strong&gt;Docker Image&lt;/strong&gt; is just a template used to build a running Docker Container, similar to the ISO files and Virtual Machines. The containers are essentially the running instance of an image. Images are used to share a containerized applications. Collections of images are stored in registries like &lt;a href="https://hub.docker.com/"&gt;DockerHub&lt;/a&gt; or private registries.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eyWpF0pZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/April2020/1%2Ap8k1b2DZTQEW_yf0hYniXw.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eyWpF0pZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/April2020/1%2Ap8k1b2DZTQEW_yf0hYniXw.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-is-docker-hub"&gt;
  &lt;/a&gt;
  What is Docker Hub?
&lt;/h2&gt;

&lt;p&gt;DockerHub is the default &lt;strong&gt;Docker image registry&lt;/strong&gt; where we can store our &lt;strong&gt;Docker images&lt;/strong&gt;. You can think of it as GitHub for Git projects.&lt;/p&gt;

&lt;p&gt;Here's a link to the Docker Hub:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://hub.docker.com"&gt;https://hub.docker.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can sign up for a free account. That way you could push your Docker images from your local machine to DockerHub.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#installing-docker"&gt;
  &lt;/a&gt;
  Installing Docker
&lt;/h1&gt;

&lt;p&gt;Nowadays you can run Docker on Windows, Mac and of course Linux. I will only be going through the Docker installation for Linux as this is my operating system of choice.&lt;/p&gt;

&lt;p&gt;I'll deploy an &lt;strong&gt;Ubuntu VM on DigitalOcean&lt;/strong&gt; so feel free to go ahead and do the same:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.digitalocean.com/products/droplets/how-to/create"&gt;Create a Droplet DigitalOcean&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once your server is up and running, SSH to the Droplet and follow along!&lt;/p&gt;

&lt;p&gt;If you are not sure how to SSH, you can follow the steps here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.digitalocean.com/docs/droplets/how-to/connect-with-ssh/"&gt;https://www.digitalocean.com/docs/droplets/how-to/connect-with-ssh/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The installation is really straight forward, you could just run the following command, it should work on all major &lt;strong&gt;Linux&lt;/strong&gt; distros:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;wget -qO- https://get.docker.com | sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It would do everything that's needed to install &lt;strong&gt;Docker on your Linux machine&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;After that, set up Docker so that you could run it as a non-root user with the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo usermod -aG docker ${USER}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To test &lt;strong&gt;Docker&lt;/strong&gt; run the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker version
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To get some more information about your Docker Engine, you can run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker info
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the &lt;code&gt;docker info&lt;/code&gt; command, we can see how many running containers that we've got and some server information.&lt;/p&gt;

&lt;p&gt;The output that you would get from the docker version command should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C-_TwLai--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/tuGSemS.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C-_TwLai--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/tuGSemS.png" alt="docker version output"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In case you would like to install Docker on your Windows PC or on your Mac, you could visit the official Docker documentation here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.docker.com/docker-for-windows/install/"&gt;https://docs.docker.com/docker-for-windows/install/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.docker.com/docker-for-mac/install/"&gt;https://docs.docker.com/docker-for-mac/install/&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;That is pretty much it! Now you have Docker running on your machine!&lt;/p&gt;

&lt;p&gt;Now we are ready to start working with containers! We will pull a &lt;strong&gt;Docker image&lt;/strong&gt; from the &lt;strong&gt;DockerHub&lt;/strong&gt;, we will run a container, stop it, destroy it and more!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#working-with-docker-containers"&gt;
  &lt;/a&gt;
  Working with Docker containers
&lt;/h1&gt;

&lt;p&gt;Once you have your &lt;strong&gt;Ubuntu Droplet&lt;/strong&gt; ready, ssh to the server and follow along!&lt;/p&gt;

&lt;p&gt;So let's run our first Docker container! To do that you just need to run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker run hello-world
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will get the following output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mrAynivc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/April2020/docker-run.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mrAynivc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/April2020/docker-run.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We just ran a container based on the &lt;strong&gt;hello-world Docker Image&lt;/strong&gt;, as we did not have the image locally, docker pulled the image from the &lt;strong&gt;&lt;a href="https://hub.docker.com"&gt;DockerHub&lt;/a&gt;&lt;/strong&gt; and then used that image to run the container. &lt;br&gt;
All that happened was: the &lt;strong&gt;container ran&lt;/strong&gt;, printed some text on the screen and then exited.&lt;/p&gt;

&lt;p&gt;Then to see some information about the running and the stopped containers run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker ps -a
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will see the following information for your &lt;strong&gt;hello-world container&lt;/strong&gt; that you just ran:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;root@docker:~# docker ps -a
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMES
62d360207d08        hello-world         "/hello"            5 minutes ago       Exited (0) 5 minutes ago                       focused_cartwright
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to list the locally available Docker images on your host run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker images
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#pulling-an-image-from-docker-hub"&gt;
  &lt;/a&gt;
  Pulling an image from Docker Hub
&lt;/h2&gt;

&lt;p&gt;Let's run a more useful container like an &lt;strong&gt;Apache&lt;/strong&gt; container for example. &lt;/p&gt;

&lt;p&gt;First, we can pull the image from the docker hub with the &lt;strong&gt;docker pull command&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker pull webdevops/php-apache
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will see the following output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CUdZ5wID--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/April2020/docker-pull-php-apache.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CUdZ5wID--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/April2020/docker-pull-php-apache.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then we can get the image ID with the docker images command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker images
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output would look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NSztkHkn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/April2020/docker-images.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NSztkHkn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/April2020/docker-images.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note, you do not necessarily need to pull the image, this is just for demo pourpouses. When running the &lt;code&gt;docker run&lt;/code&gt; command, if the image is not available locally, it will automatically be pulled from Docker Hub.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After that we can use the &lt;strong&gt;docker run&lt;/strong&gt; command to spin up a new container:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker run -d -p 80:80 IMAGE_ID
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Quick rundown of the arguments that I've used:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;-d&lt;/code&gt;: it specifies that I want to run the container in the background. That way when you close your terminal the container would remain running.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;-p 80:80&lt;/code&gt;: this means that the traffic from the host on port 80 would be forwarded to the container. That way you could access the Apache instance which is running inside your docker container directly via your browser.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The output of the above command would look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SncWgyJd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/April2020/docker-run-image_id.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SncWgyJd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/April2020/docker-run-image_id.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With the docker info command now we can see that we have 1 running container. &lt;/p&gt;

&lt;p&gt;And with the &lt;code&gt;docker ps&lt;/code&gt; command we could see some useful information about the container like the container ID, when the container was started and etc.:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;root@docker:~# docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS              PORTS                                   NAMES
7dd1d512b50e        fd4f7e58ef4b        "/entrypoint supervi…"   About a minute ago   Up About a minute   443/tcp, 0.0.0.0:80-&amp;gt;80/tcp, 9000/tcp   pedantic_murdock
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#stopping-and-restarting-a-docker-container"&gt;
  &lt;/a&gt;
  Stopping and restarting a Docker Container
&lt;/h2&gt;

&lt;p&gt;Then you can stop the running container with the docker stop command followed by the container ID:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker stop CONTAINER_ID
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you need to you can start the container again:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker start CONTAINER_ID
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to restart the container you can use the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker restart CONTAINER_ID
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#accessing-a-running-container"&gt;
  &lt;/a&gt;
  Accessing a running container
&lt;/h2&gt;

&lt;p&gt;If you need to attach to the container and run some commands inside the container use the &lt;code&gt;docker exec&lt;/code&gt; command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker exec -it CONTAINER_ID /bin/bash 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That way you will get to a &lt;strong&gt;bash shell&lt;/strong&gt; in the container and execute some commands inside the container itself. &lt;/p&gt;

&lt;p&gt;Then to detach from the interactive shell press &lt;code&gt;CTRL+PQ&lt;/code&gt; that way you will not stop the container but just detached from the interactive shell.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QnHWD2v6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/April2020/docker-exec-stop1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QnHWD2v6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/April2020/docker-exec-stop1.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#deleting-a-container"&gt;
  &lt;/a&gt;
  Deleting a container
&lt;/h2&gt;

&lt;p&gt;To delete the container run first make sure that the container is not running and then run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker rm CONTAINER_ID
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you would like to delete the container and the image all together, just run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker rmi IMAGE_ID
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;With that you now know how to pull Docker images from the &lt;strong&gt;Docker Hub&lt;/strong&gt;, run, stop, start and even attach to Docker containers!&lt;/p&gt;

&lt;p&gt;We are ready to learn how to work with &lt;strong&gt;Docker images!&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-are-docker-images"&gt;
  &lt;/a&gt;
  What are Docker Images
&lt;/h1&gt;

&lt;p&gt;A Docker Image is just a template used to build a running Docker Container, similar to the ISO files and Virtual Machines. The containers are essentially the running instance of an image. Images are used to share a containerized applications. Collections of images are stored in registries like DockerHub or private registries.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#working-with-docker-images"&gt;
  &lt;/a&gt;
  Working with Docker images
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;docker run&lt;/code&gt; command downloads and runs images at the same time. But we could also only download images if we wanted to wit the docker pull command. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker pull ubuntu
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or if you want to get a specific version you could also do that with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker pull ubuntu:14.04
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then to list all of your images use the docker images command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker images
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You would get a similar output to:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EtctgC4U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/April2020/docker-images-list.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EtctgC4U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/April2020/docker-images-list.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The images are stored locally on your docker host machine.&lt;/p&gt;

&lt;p&gt;To take a look a the docker hub, go to: &lt;a href="https://hub.docker.com"&gt;https://hub.docker.com&lt;/a&gt; and you would be able to see where the images were just downloaded from.&lt;/p&gt;

&lt;p&gt;For example, here's a link to the &lt;strong&gt;Ubuntu image&lt;/strong&gt; that we've just downloaded:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://hub.docker.com/_/ubuntu"&gt;https://hub.docker.com/_/ubuntu&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There you could find some useful information.&lt;/p&gt;

&lt;p&gt;As Ubuntu 14.04 is really outdated, to delete the image use the &lt;code&gt;docker rmi&lt;/code&gt; command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker rmi ubuntu:14.04
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#modifying-images-adhoc"&gt;
  &lt;/a&gt;
  Modifying images ad-hoc
&lt;/h2&gt;

&lt;p&gt;One of the ways of modifying images is with ad-hoc commands. For example just start your ubuntu container.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker run -d -p 80:80 IMAGE_ID
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that to attach to your running container you can run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker exec -it container_name /bin/bash
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Install whatever packages needed then exit the container just press &lt;code&gt;CTRL+P+Q&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To then save your changes run the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker container commit ID_HERE
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then list your images and note your image ID:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker images ls
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The process would look as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OUzKolab--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/April2020/docker-commit.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OUzKolab--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/April2020/docker-commit.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you would notice your newly created image would not have a name nor a tag, so in order tag your image run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker tag IMAGE_ID YOUR_TAG
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if you list your images you would see the following output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--puH9mUA4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/April2020/docker-tag.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--puH9mUA4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/April2020/docker-tag.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#pushing-images-to-docker-hub"&gt;
  &lt;/a&gt;
  Pushing images to Docker Hub
&lt;/h2&gt;

&lt;p&gt;Now that we have our new image locally, let's see how we could push that new image to DockerHub.&lt;/p&gt;

&lt;p&gt;For that you would need a Docker Hub account first. Then once you have your account ready, in order to authenticate, run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker login
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then push your image to the &lt;strong&gt;Docker Hub&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker push your-docker-user/name-of-image-here
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output would look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qc325ZfR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/April2020/docker-push.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qc325ZfR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/April2020/docker-push.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After that you should be able to see your docker image in your docker hub account, in my case it would be here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cloud.docker.com/repository/docker/bobbyiliev/php-apache"&gt;https://cloud.docker.com/repository/docker/bobbyiliev/php-apache&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NNgQWnZI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/April2020/docker-hub.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NNgQWnZI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/April2020/docker-hub.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#modifying-images-with-dockerfile"&gt;
  &lt;/a&gt;
  Modifying images with Dockerfile
&lt;/h2&gt;

&lt;p&gt;We will go the Dockerfile a bit more in depth in the next blog post, for this demo we will only use a simple Dockerfile just as an example:&lt;/p&gt;

&lt;p&gt;Create a file called &lt;code&gt;Dockerfile&lt;/code&gt; and add the following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM alpine
RUN apk update
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All that this &lt;code&gt;Dockerfile&lt;/code&gt; does is to update the base Alpine image. &lt;/p&gt;

&lt;p&gt;To build the image run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker image build -t alpine-updated:v0.1 .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then you could again list your image and push the new image to the &lt;strong&gt;Docker Hub&lt;/strong&gt;!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#docker-images-knowledge-check"&gt;
  &lt;/a&gt;
  Docker images Knowledge Check
&lt;/h2&gt;

&lt;p&gt;Once you've read this post, make sure to test your knowledge with this Docker Images Quiz:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://quizapi.io/predefined-quizzes/common-docker-images-questions"&gt;https://quizapi.io/predefined-quizzes/common-docker-images-questions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that you know how to pull, modify, and push &lt;strong&gt;Docker images&lt;/strong&gt;, we are ready to learn more about the &lt;code&gt;Dockerfile&lt;/code&gt; and how to use it!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-a-dockerfile"&gt;
  &lt;/a&gt;
  What is a Dockerfile
&lt;/h1&gt;

&lt;p&gt;A &lt;strong&gt;Dockerfile&lt;/strong&gt; is basically a text file that contains all of the required commands to build a certain &lt;strong&gt;Docker image&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Dockerfile&lt;/strong&gt; reference page: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.docker.com/engine/reference/builder/"&gt;https://docs.docker.com/engine/reference/builder/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It lists the various commands and format details for Dockerfiles.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#dockerfile-example"&gt;
  &lt;/a&gt;
  Dockerfile example
&lt;/h2&gt;

&lt;p&gt;Here's a really basic example of how to create a &lt;code&gt;Dockerfile&lt;/code&gt; and add our source code to an image.&lt;/p&gt;

&lt;p&gt;First, I have a simple Hello world &lt;code&gt;index.html&lt;/code&gt; file in my current directory that I would add to the container with the following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;h1&amp;gt;Hello World - Bobby Iliev&amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And I also have a Dockerfile with the following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM webdevops/php-apache-dev
MAINTAINER Bobby I.
COPY . /var/www/html
WORKDIR /var/www/html
EXPOSE 8080
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is a screenshot of my current directory and the content of the files:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kp4l27kl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/April2020/dockerfile-example.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kp4l27kl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/April2020/dockerfile-example.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is a quick rundown of the Dockerfile:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;FROM&lt;/code&gt;: The image that we would use as a ground&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;MAINTAINER&lt;/code&gt;: The person who would be maintaining the image&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;COPY&lt;/code&gt;: Copy some files in the image&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;WORKDIR&lt;/code&gt;: The directory where you want to run your commands on start&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;EXPOSE&lt;/code&gt;: Specify a port that you would like to access the container on&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#docker-build"&gt;
  &lt;/a&gt;
  Docker build
&lt;/h2&gt;

&lt;p&gt;Now in order to build a new image from our &lt;code&gt;Dockerfile&lt;/code&gt;, we need to use the docker build command. The syntax of the docker build command is the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker build [OPTIONS] PATH | URL | -
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The exact command that we need to run is this one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker build -f Dockerfile -t your_user_name/php-apache-dev .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After the built is complete you can list your images with the docker images command and also run it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker run -d -p 8080:80 your_user_name/php-apache-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And again just like we did in the last step, we can go ahead and publish our image:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker login

docker push your-docker-user/name-of-image-here
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then you will be able to see your new image in your Docker Hub account (&lt;a href="https://hub.docker.com"&gt;https://hub.docker.com&lt;/a&gt;) you can pull from the hub directly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker pull your-docker-user/name-of-image-here
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For more information on the docker build make sure to check out the official documentation here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.docker.com/engine/reference/commandline/build/"&gt;https://docs.docker.com/engine/reference/commandline/build/&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#dockerfile-knowledge-check"&gt;
  &lt;/a&gt;
  Dockerfile Knowledge Check
&lt;/h2&gt;

&lt;p&gt;Once you've read this post, make sure to test your knowledge with this &lt;a href="https://quizapi.io/predefined-quizzes/basic-dockerfile-quiz"&gt;&lt;strong&gt;Dockerfile quiz&lt;/strong&gt;:&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://quizapi.io/predefined-quizzes/basic-dockerfile-quiz"&gt;https://quizapi.io/predefined-quizzes/basic-dockerfile-quiz&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;This is a really basic example, you could go above and beyond with your Dockerfiles!&lt;/p&gt;

&lt;p&gt;Now you know how to write a Dockerfile, how to build a new image from a Dockerfile using the docker build command!&lt;/p&gt;

&lt;p&gt;In the next step we will learn how to set up and work with the &lt;strong&gt;Docker Swarm&lt;/strong&gt; mode!&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#what-is-docker-swarm-mode"&gt;
  &lt;/a&gt;
  What is Docker Swarm mode
&lt;/h1&gt;

&lt;p&gt;According to the official &lt;strong&gt;Docker&lt;/strong&gt; docs, a swarm is a group of machines that are running &lt;strong&gt;Docker&lt;/strong&gt; and joined into a cluster. If you are running a &lt;strong&gt;Docker swarm&lt;/strong&gt; your commands would be executed on a cluster by a swarm manager. The machines in a swarm can be physical or virtual. After joining a swarm, they are referred to as nodes. I would do a quick demo shortly on my &lt;strong&gt;DigitalOcean&lt;/strong&gt; account!&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Docker Swarm&lt;/strong&gt; consists of &lt;strong&gt;manager nodes&lt;/strong&gt; and &lt;strong&gt;worker nodes&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;The manager nodes dispatch tasks to the worker nodes and on the other side Worker nodes just execute those tasks. For High Availability, it is recommended to have &lt;strong&gt;3&lt;/strong&gt; or &lt;strong&gt;5&lt;/strong&gt; manager nodes. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#docker-services"&gt;
  &lt;/a&gt;
  Docker Services
&lt;/h2&gt;

&lt;p&gt;To deploy an application image when Docker Engine is in swarm mode, you have create a service. A service is a group of containers of the same &lt;code&gt;image:tag&lt;/code&gt;. Services make it simple to scale your application. &lt;/p&gt;

&lt;p&gt;In order to have &lt;strong&gt;Docker services&lt;/strong&gt;, you must first have your &lt;strong&gt;Docker swarm&lt;/strong&gt; and nodes ready.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X2930z2U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/May2020/services-diagram.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X2930z2U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/May2020/services-diagram.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#building-a-swarm"&gt;
  &lt;/a&gt;
  Building a Swarm
&lt;/h2&gt;

&lt;p&gt;I'll do a really quick demo on how to build a &lt;strong&gt;Docker swarm with 3 managers and 3 workers&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;For that I'm going to deploy 6 droplets on DigitalOcean:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f0VnAZMl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/May2020/docker-swarm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f0VnAZMl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/May2020/docker-swarm.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then once you've got that ready, &lt;strong&gt;install docker&lt;/strong&gt; just as we did in the &lt;strong&gt;&lt;a href="https://devdojo.com/tutorials/introduction-to-docker-part-1"&gt;Introduction to Docker Part 1&lt;/a&gt;&lt;/strong&gt; and then just follow the steps here:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  Step 1
&lt;/h3&gt;

&lt;p&gt;Initialize the docker swarm on your first manager node:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker swarm init --advertise-addr your_dorplet_ip_here
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  Step 2
&lt;/h3&gt;

&lt;p&gt;Then to get the command that you need to join the rest of the managers simply run this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker swarm join-token manager
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: This would provide you with the exact command that you need to run on the rest of the swarm manager nodes. Example:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rKrvKPHY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/May2020/docker-swarm-join-managers-bobby-iliev.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rKrvKPHY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/May2020/docker-swarm-join-managers-bobby-iliev.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3"&gt;
  &lt;/a&gt;
  Step 3
&lt;/h3&gt;

&lt;p&gt;To get the command that you need for joining workers just run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker swarm join-token worker
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The command for workers would be pretty similar to the command for join managers but the token would be a bit different.&lt;/p&gt;

&lt;p&gt;The output that you would get when joining a manager would look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R-SJZVUg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/May2020/docker-join-manager.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R-SJZVUg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/May2020/docker-join-manager.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-4"&gt;
  &lt;/a&gt;
  Step 4
&lt;/h3&gt;

&lt;p&gt;Then once you have your join commands, &lt;strong&gt;ssh to the rest of your nodes and join them&lt;/strong&gt; as workers and managers accordingly.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#managing-the-cluster"&gt;
  &lt;/a&gt;
  Managing the cluster
&lt;/h1&gt;

&lt;p&gt;After you've run the join commands on all of your workers and managers, in order to get some information for your cluster status you could use these commands:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To list all of the available nodes run:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker node ls
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: This command can only be run from a &lt;strong&gt;swarm manager&lt;/strong&gt;!Output:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Icn5joNY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/May2020/docker-node-ls.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Icn5joNY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/May2020/docker-node-ls.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To get information for the current state run:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker info
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6G_FFSJ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/May2020/docker-info-bobby-iliev.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6G_FFSJ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/May2020/docker-info-bobby-iliev.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#promote-a-worker-to-manager"&gt;
  &lt;/a&gt;
  Promote a worker to manager
&lt;/h2&gt;

&lt;p&gt;To promote a worker to a manager run the following from &lt;strong&gt;one&lt;/strong&gt; of your manager nodes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker node promote node_id_here
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also note that each manager also acts as a worker, so from your docker info output you should see 6 workers and 3 manager nodes.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#using-services"&gt;
  &lt;/a&gt;
  Using Services
&lt;/h2&gt;

&lt;p&gt;In order to create a service you need to use the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker service create --name bobby-web -p 80:80 --replicas 5 bobbyiliev/php-apache
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that I already have my bobbyiliev/php-apache image pushed to the Docker hub as described in the previous blog posts.&lt;/p&gt;

&lt;p&gt;To get a list of your services run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker service ls
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F2TxHVLJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/May2020/docker-create-service.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F2TxHVLJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/May2020/docker-create-service.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then in order to get a list of the running containers you need to use the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker services ps name_of_your_service_here
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T7bFrt6B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/May2020/docker-service-ps.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T7bFrt6B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/May2020/docker-service-ps.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then you can visit the IP address of any of your nodes and you should be able to see the service! We can basically visit any node from the swarm and we will still get the to service.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#scaling-a-service"&gt;
  &lt;/a&gt;
  Scaling a service
&lt;/h2&gt;

&lt;p&gt;We could try shutting down one of the nodes and see how the swarm would automatically spin up a new process on another node so that it matches the desired state of 5 replicas.&lt;/p&gt;

&lt;p&gt;To do that go to your &lt;strong&gt;DigitalOcean&lt;/strong&gt; control panel and hit the power off button for one of your Droplets. Then head back to your terminal and run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker services ps name_of_your_service_here
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b40-Sp_j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/May2020/docker-replicas.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b40-Sp_j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/May2020/docker-replicas.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the screenshot above, you can see how I've shutdown the droplet called worker-2 and how the replica bobby-web.2 was instantly started again on another node called worker-01 to match the desired state of 5 replicas. &lt;/p&gt;

&lt;p&gt;To add more replicas run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker service scale name_of_your_service_here=7
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7FPNJHdq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/May2020/docker-more-replicas.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7FPNJHdq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/May2020/docker-more-replicas.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This would automatically spin up 2 more containers, you can check this with the docker service ps command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker service ps name_of_your_service_here
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then as a test try starting the node that we've shutdown and check if it picked up any tasks?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt;: Bringing new nodes to the cluster does not automatically distribute running tasks.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#deleting-a-service"&gt;
  &lt;/a&gt;
  Deleting a service
&lt;/h2&gt;

&lt;p&gt;In order to delete a service, all you need to do is to run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker service rm name_of_your_service
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8GkTqQhf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/May2020/docker-delete-service.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8GkTqQhf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/May2020/docker-delete-service.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you know how to initialize and scale a docker swarm cluster! For more information make sure to go through the official Docker documentation &lt;a href="https://docs.docker.com/engine/swarm/"&gt;here&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#docker-swarm-knowledge-check"&gt;
  &lt;/a&gt;
  Docker Swarm Knowledge Check
&lt;/h2&gt;

&lt;p&gt;Once you've read this post, make sure to test your knowledge with this &lt;strong&gt;&lt;a href="https://quizapi.io/predefined-quizzes/common-docker-swarm-interview-questions"&gt;Docker Swarm Quiz&lt;/a&gt;&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://quizapi.io/predefined-quizzes/common-docker-swarm-interview-questions"&gt;https://quizapi.io/predefined-quizzes/common-docker-swarm-interview-questions&lt;/a&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Well done for going through this Docker introduction tutorial! I hope that it was helpful and you've managed to learn some cool new things about &lt;strong&gt;Docker&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;As a next step make sure to spin up a few servers, install Docker and play around with all of the commands that you've learnt from this tutorial!&lt;/p&gt;

&lt;p&gt;Let me know if you have any questions or suggestions!&lt;/p&gt;

&lt;p&gt;Follow me on twitter at: &lt;a href="https://twitter.com/bobbyiliev_"&gt;@bobbyiliev_&lt;/a&gt;&lt;/p&gt;

</description>
      <category>docker</category>
      <category>devops</category>
      <category>linux</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>Git Tutorial: How to Fix 18 Common Mistakes</title>
      <author>Creative Tim</author>
      <pubDate>Wed, 06 Oct 2021 11:34:32 +0000</pubDate>
      <link>https://dev.to/creativetim_official/git-tutorial-how-to-fix-18-common-mistakes-4een</link>
      <guid>https://dev.to/creativetim_official/git-tutorial-how-to-fix-18-common-mistakes-4een</guid>
      <description>&lt;p&gt;This article is a collection of the 18 most frequently asked questions and their answers when it comes to using Git in a team. Some Git questions are more intimidating and may seem difficult to answer, even for experienced Git users. For example, did you forget to include a certain change or make a mistake in your commit message? Don’t worry. In these situations, it’s common to want to roll back or undo a change made by you or your team. You can do this with almost all activities in Git, such as commits, merges, local or remote changes, and even uncommitted changes. It can all be “undone”.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here’s the table of content for this article:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#1-how-to-create-a-git-branch"&gt;How to create a Git branch?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2-how-to-rename-a-git-branch"&gt;How to rename a Git branch?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#3-how-to-delete-a-local-git-branch"&gt;How to delete a local Git branch?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#4-how-to-delete-a-remote-git-branch"&gt;How to delete a remote Git branch?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#5-how-to-git-checkout-remote-branch"&gt;How to Git checkout remote branch?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#6-how-to-edit-amend-a-git-commit-message"&gt;How to edit (amend) a Git commit message?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#7-how-to-undo-the-last-commit"&gt;How to undo the last commit?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#8-how-to-git-revert-to-previous-commit"&gt;How to Git revert to the previous commit?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#9-how-to-revert-a-commit-that-has-been-pushed-to-the-remote"&gt;How to revert a commit that has been pushed to the remote?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#10-how-to-git-revert-single-file"&gt;How to Git revert a single file?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#11-how-to-undo-git-add"&gt;How to undo Git add?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#12-how-to-remove-a-file-from-git-without-removing-it-from-your-file-system"&gt;How to remove a file from gGit without removing it from your file system?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#13-git-pull-vs-git-fetch"&gt;Git Pull vs. Git Fetch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#14-how-to-force-git-pull-to-overwrite-local-files"&gt;How to force “Git pull” to overwrite local files?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#15-how-to-push-to-github-when-receiving-the-need-merge-error"&gt;How to push to GitHub when receiving the “need merge” error?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#16-how-to-create-tag-in-github-repository"&gt;How to create a tag in the GitHub repository?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#17-how-to-clone-all-remote-branches-in-git"&gt;How to clone all remote branches in Git?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#18-how-to-update-or-sync-a-forked-repository"&gt;How to update or sync a forked repository?&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kM9ecZZy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogct.creative-tim.com/blog/content/images/2021/09/github.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kM9ecZZy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogct.creative-tim.com/blog/content/images/2021/09/github.jpg" alt="github"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-how-to-create-a-git-branch"&gt;
  &lt;/a&gt;
  1. How to create a Git branch?
&lt;/h3&gt;

&lt;p&gt;Before starting to create a new branch, make sure that your master/main is updated with the latest changes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; $ git pull
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After the above step, you can create your new branch and switch directly to it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; $ git checkout -b &amp;lt;new-branch-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or, you can just create the new branch without switching to it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; $ git branch &amp;lt;new-branch-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to switch to your new branch after you created it, just use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; $ git checkout &amp;lt;new-branch-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that the branch is created, you can push it on GitHub:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; $ git push origin &amp;lt;new-branch-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-how-to-rename-a-git-branch"&gt;
  &lt;/a&gt;
  2. How to rename a Git branch?
&lt;/h3&gt;

&lt;p&gt;In order to rename a Git branch, one option would be to first switch to it and follow the below step:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; $ git checkout &amp;lt;old-branch-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Afterwards, you should see a message that confirms that the switch was successful:&lt;/p&gt;

&lt;p&gt;Switched to branch &lt;/p&gt;

&lt;p&gt;Now you can rename the branch by:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; $ git branch -m &amp;lt;new-branch-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another way to rename your Git branch is by using only one line, specifying both the old name and the new name:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; $ git branch -m &amp;lt;old-branch-name&amp;gt; &amp;lt;new-branch-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you have renamed your Git branch, it’s recommended to check its status:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; $ git branch -a
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-how-to-delete-a-local-git-branch"&gt;
  &lt;/a&gt;
  3. How to delete a local Git branch?
&lt;/h3&gt;

&lt;p&gt;When developers work on different features, they often create other branches, separated from the main one with the main code.&lt;/p&gt;

&lt;p&gt;Once the work on a feature is completed, it is often recommended to delete the branch.&lt;/p&gt;

&lt;p&gt;As Git doesn’t allow you to delete the branch that you are currently on, you must first switch to a branch that you are NOT deleting, and after that, you can delete the branch that you want to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; $ git checkout main // or master
 $ git branch -d &amp;lt;branch-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the branch hasn’t been pushed or merged, you can force the deletion of the branch by using -D instead of -d.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-how-to-delete-a-remote-git-branch"&gt;
  &lt;/a&gt;
  4. How to delete a remote Git branch?
&lt;/h3&gt;

&lt;p&gt;In order to delete a branch remotely, you should use the next command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; $ git push &amp;lt;remote-name&amp;gt; --delete &amp;lt;branch-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#5-how-to-git-checkout-remote-branch"&gt;
  &lt;/a&gt;
  5. How to Git checkout remote branch?
&lt;/h3&gt;

&lt;p&gt;When working in a team, you might use remote repositories that can be hosted or on a colleague's local copy. Each of the remote repositories contains its own branches. For switching to a remote branch, you will have first to fetch the content of the branch and switch to it after that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; $ git fetch --all
 $ git checkout &amp;lt;remote-branch-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#6-how-to-edit-amend-a-git-commit-message"&gt;
  &lt;/a&gt;
  6. How to edit (amend) a Git commit message?
&lt;/h3&gt;

&lt;p&gt;For some reason, in certain cases, you would want to change your commit message. First, you need to know that editing your commit message translates in creating a new commit and replacing the old one.&lt;/p&gt;

&lt;p&gt;If you haven’t pushed your commit yet to GitHub, and this exists only in your local repository, here is an easy way to change your last commit’s message. Go to the repository that contains your last commit in the command line and type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; $ git commit --amend
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, you need to edit the commit message and save your new commit. The next time you push, you should be able to see your new commit and message on GitHub. &lt;/p&gt;

&lt;p&gt;As you might have been in the situation that you have already pushed the commit to GitHub, don’t worry, there is still a way to change your most recent commit message. In order to do this, you will have to force push a commit with an amended message. Be advised; this is not recommended as it changes the history of your repository, so use this option only when it is absolutely needed.&lt;/p&gt;

&lt;p&gt;First, follow the steps from above and then type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; $ git push --force-with-lease &amp;lt;branch-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#7-how-to-undo-the-last-commit"&gt;
  &lt;/a&gt;
  7. How to undo the last commit?
&lt;/h3&gt;

&lt;p&gt;You accidentally committed the wrong files to Git, but didn't push the commit to your Git repository yet. Because you did not push to a remote repository yet, your changes are not public. At this point, you can undo your changes. The easiest way to undo the last Git commit is to execute the $ git reset command with the “–soft” option that will preserve changes done to your files. You have to specify the commit to undo which is “HEAD~1” in this case.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; $ git reset --soft HEAD-1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to delete the last commit, you can execute the &lt;code&gt;$ git reset&lt;/code&gt;  command with “-hard” option. The changes will be removed from the working directory and from the index, so &lt;em&gt;you will lose all modifications&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; $ git reset --hard HEAD-1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: If you are not familiar with this notation, “HEAD~1” means that you want to reset the HEAD (the last commit) to one commit before in the log history.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; $ git log --oneline
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#8-how-to-git-revert-to-the-previous-commit"&gt;
  &lt;/a&gt;
  8. How to git revert to the previous commit?
&lt;/h3&gt;

&lt;p&gt;First of all, get commits list in order to have the commit id, using the git log command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; $ git log --online
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to temporarily go back to the previous commit and then come back to where you were, all you have to do is check out the desired commit:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; $ git checkout &amp;lt;0c2a9da42&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or, if you want to make commits while you're there, go ahead and make a new branch while you're at it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; $ git checkout -b old-state &amp;lt;0c2a9da42&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On the other hand, if you want to really get rid of everything you've done since then, but you didn't push any of these commits, there is a possibility. All you have to do is simply reset:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; $ git reset --hard &amp;lt;0c2a9da42&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you have pushed the commits, there is still a way to get rid of them. Check the next topic to see how.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-how-to-revert-a-commit-that-has-been-pushed-to-the-remote"&gt;
  &lt;/a&gt;
  9. How to revert a commit that has been pushed to the remote?
&lt;/h3&gt;

&lt;p&gt;If you have already pushed your chain of commits to the remote repository, a &lt;em&gt;revert&lt;/em&gt; is a nicer way to cancel out changes. The revert command adds a new commit at the end of the chain.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; $ git revert &amp;lt;0c2a9da42&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#10-how-to-git-revert-single-file"&gt;
  &lt;/a&gt;
  10. How to Git revert single file?
&lt;/h3&gt;

&lt;p&gt;You have made multiple changes on a file and committed them. Now you want to return to a previous file version. You can do the following to revert a single file to its previous status.&lt;/p&gt;

&lt;p&gt;If the file isn’t committed, you can use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; $ git checkout &amp;lt;filename&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the file is already committed, you should find the hash of the commit and the path to your file and run this command in terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; $ git checkout &amp;lt;commit-hash&amp;gt; -- &amp;lt;path/to/file&amp;gt;

 // e.g.
 $ git checkout &amp;lt;0c2a9da42&amp;gt; -- assets/main.css
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see the commits which have made modifications to the given file(s) very easily, and you can get the correct commit hash by running the following command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; $ git log path/to/file
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#11-how-to-undo-git-add"&gt;
  &lt;/a&gt;
  11. How to undo Git add?
&lt;/h3&gt;

&lt;p&gt;You moved multiple files into the staging area with $ git add  command, but no longer want to be part of a commit, then a simple reset will do the job:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; // for all files
 $ git reset  // OR
 $ git reset HEAD // OR
 $ git reset 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to unstage a single file, you can use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; // for single file
 $ git reset &amp;lt;filename&amp;gt; // OR
 $ git reset HEAD &amp;lt;filename&amp;gt; // OR
 $ git reset @ &amp;lt;filename&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The changes you made will still be in the file/files. The above set of commands just remove that file/files from your staging area. The &lt;code&gt;$ git reset&lt;/code&gt; command allows you to &lt;em&gt;reset&lt;/em&gt; your current head to a specific state. You can reset the state of specific files as well as an entire branch. &lt;/p&gt;

&lt;p&gt;Note: &lt;em&gt;HEAD&lt;/em&gt; is a reference to the current commit. &lt;em&gt;@&lt;/em&gt; alone is a shortcut for head since Git v1.8.5&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#12-how-to-remove-a-file-from-git-without-removing-it-from-your-file-system"&gt;
  &lt;/a&gt;
  12. How to remove a file from Git without removing it from your file system?
&lt;/h3&gt;

&lt;p&gt;You committed the wrong file on Git, or you forgot to add a file to .gitignore and committed it. Now you want to remove the file from git but you don't want to remove it from your local development environment.&lt;/p&gt;

&lt;p&gt;Removing a single file with Git without deleting it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; $ git rm --cached &amp;lt;filename&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Removing multiple files with Git without deleting them&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; $ git rm --cached &amp;lt;filename1 filename2 filename3&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Removing a single directory with Git without deleting it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; $ git rm --cached &amp;lt;directory-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;--cached&lt;/code&gt; will remove from just the index but not allow you to delete the file on the local system. The files will be removed in the remote repository when you run &lt;code&gt;$ git push&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#13-git-pull-vs-git-fetch"&gt;
  &lt;/a&gt;
  13. Git Pull vs. Git Fetch
&lt;/h3&gt;

&lt;p&gt;Git pull and fetch are two commands that are commonly used, so knowing the difference between them will come in handy.&lt;/p&gt;

&lt;p&gt;Suppose you're working on a clone repository, which is basically a duplicate of another repository. In that case, it's important to keep it updated with the latest changes that might have been applied to the original. In order to do that and bring those changes locally, you are going to use the above commands.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; $ git fetch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the command that allows you to download an object from another repository but it will not do any file transferring, meaning that will not make any changes locally. Basically, it is just checking if any changes are available.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; $ git pull
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This  is the command that will bring those changes from the remote repository and that will integrate them with your local branch. In other words, git pull does the same as git fetch, only that it is followed by an additional action(s):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; // e.g.  
 $ git merge
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#14-how-to-force-git-pull-to-overwrite-local-files"&gt;
  &lt;/a&gt;
  14. How to force “git pull” to overwrite local files?
&lt;/h3&gt;

&lt;p&gt;If you want to overwrite everything with a copy from the remote branch, note that you will discard all your local changes.&lt;br&gt;
If you have local commits that you haven’t pushed yet, those will be lost as well. &lt;br&gt;
To overwrite/reset your local files, follow the below steps:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; $ git fetch --all
 $ git reset --hard origin/&amp;lt;branch-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#15-how-to-push-to-github-when-receiving-the-need-merge-error"&gt;
  &lt;/a&gt;
  15. How to push to GitHub when receiving the “need merge” error?
&lt;/h3&gt;

&lt;p&gt;If you didn’t run a  $ git pull before you tried to push your changes to the branch,  you’d be getting a merge error. When you get this error, it usually means that someone else pushed a commit to the same branch you are trying to push to, but you don’t have it locally yet.&lt;br&gt;
To fix the issue, run the below code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; $ git pull origin &amp;lt;branch-name&amp;gt;
 $ git push origin &amp;lt;branch-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to do a force push, meaning that you don’t want to merge your local branch with the remote one, you can use the below syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; $ git push -f origin &amp;lt;branch-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#16-how-to-create-a-tag-in-the-github-repository"&gt;
  &lt;/a&gt;
  16. How to create a tag in the GitHub repository?
&lt;/h3&gt;

&lt;p&gt;Git supports two types of tags: &lt;em&gt;lightweight&lt;/em&gt; and &lt;em&gt;annotated&lt;/em&gt;. &lt;br&gt;
A &lt;em&gt;lightweight&lt;/em&gt; tag is very much like a branch that doesn’t change — it’s just a pointer to a specific commit. &lt;br&gt;
&lt;em&gt;Annotated&lt;/em&gt; tags, however, are stored as full objects in the Git database. They’re checksummed; contain the tagger name, email, and date; have a tagging message. It’s generally recommended that you create annotated tags.&lt;/p&gt;

&lt;p&gt;Create a lightweight tag:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; $ git tag &amp;lt;tagname&amp;gt; // e.g $ git tag v1.0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Created Annotated tag (&lt;em&gt;recommened&lt;/em&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; $ git tag -a &amp;lt;tagname&amp;gt; // e.g $ git tag -a v1.0.0
 // or create tag with message
 $ git tag -a &amp;lt;tagname&amp;gt; -m "tag description" // e.g $ git tag -a v1.0.0 -m "First release"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When pushing to your remote repo, tags are NOT included by default. You will need to explicitly say that you want to push your tags to your remote repo.&lt;/p&gt;

&lt;p&gt;Push all locally tags:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; $ git push origin --tags
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Push a single tag:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; $ git push origin &amp;lt;tagname&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To list all tags, use the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; $ git tag
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#17-how-to-clone-all-remote-branches-in-git"&gt;
  &lt;/a&gt;
  17. How to clone all remote branches in Git?
&lt;/h3&gt;

&lt;p&gt;You can use the &lt;strong&gt;git clone command&lt;/strong&gt; to your local Git. It will clone the whole repo to your system, then change your current working directory to the cloned repository folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; $ git clone git://account_name/reponame
 $ cd reponame
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you have many remote branches that you want to fetch at once, do:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; $ git pull --all
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, look at the local branches in your repository:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; $ git branch 
 * main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But there are other branches hiding in your repository! You can see these using the -a flag:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; $ git branch -a
 * main
   remotes/origin/HEAD
   remotes/origin/main
   remotes/origin/another-branch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you just want to take a quick peek at an upstream branch, you can check it out directly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; $ git checkout origin/another-branch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But if you want to work on that branch, you'll need to create a local tracking branch which is done automatically by:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; $ git checkout another-branch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#18-how-to-update-or-sync-a-forked-repository"&gt;
  &lt;/a&gt;
  18. How to update or sync a forked repository?
&lt;/h3&gt;

&lt;p&gt;You have successfully forked your interested repository. You need to keep it up to date with the original repository. The original repository is commonly referred to upstream .&lt;/p&gt;

&lt;p&gt;Open your terminal and navigate to your cloned repository on local computer. Your local repository is not directly linked to the original repository. You must configure a remote that points to the upstream repository in Git.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; $ git remote -v // list all remote 
 $ git remote add upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git
 $ git remote -v // verify the new upstream repository
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are two steps required to sync your repository with the upstream: first, you must fetch from the remote, then you must merge the desired branch into your local branch.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; $ git fetch upstream
 $ git checkout main
 $ git merge upstream/main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Past the initial upstream setup and main checkout, all you need to do is run the following command to sync your main with upstream:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; $ git pull upstream main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EXiSesWN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogct.creative-tim.com/blog/content/images/2021/09/github-how-to.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EXiSesWN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogct.creative-tim.com/blog/content/images/2021/09/github-how-to.jpg" alt="github how to"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Final Thoughts&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Thanks for reading! These are the 18 repetitive questions that developers who use Git ask. We hope you found the answer you are looking for. If you encounter a problem in Git that is not on our list, share it with us in the comments section below. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Extra Resources&lt;/strong&gt;&lt;br&gt;
Check out our latest repos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/creativetimofficial/soft-ui-design-system/"&gt;Soft UI Design System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/creativetimofficial/soft-ui-dashboard/"&gt;Soft UI Dashboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/creativetimofficial/purity-ui-dashboard/"&gt;Purity UI Dashboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/creativetimofficial/muse-vue-ant-design-dashboard/"&gt;Muse Vue Ant Design Dashboard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>github</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
