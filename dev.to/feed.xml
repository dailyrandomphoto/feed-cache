<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>5 Best AWS Courses for Beginners</title>
      <author>javinpaul</author>
      <pubDate>Sun, 19 Dec 2021 05:43:57 +0000</pubDate>
      <link>https://dev.to/javinpaul/5-best-aws-courses-for-beginners-45hk</link>
      <guid>https://dev.to/javinpaul/5-best-aws-courses-for-beginners-45hk</guid>
      <description>&lt;p&gt;&lt;em&gt;Disclosure: This post includes affiliate links; I may receive compensation if you purchase products or services from the different links provided in this article.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.educative.io/courses/good-parts-of-aws?affiliate_id=5073518643380224"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0UvxG9_R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.educative.io/v2api/editorpage/6291676254961664/image/6148402588418048" alt="5 best AWS courses totake your skills to the next level" width="880" height="440"&gt;&lt;/a&gt;&lt;br&gt;
Hello Devs, if you want to learn AWS in 2022 and looking for the best resource to learn essential AWS services, concepts, and cloud computing fundamentals in general then you have come to the right place. &lt;/p&gt;

&lt;p&gt;In the past, I have shared the &lt;strong&gt;&lt;a href="https://javarevisited.blogspot.com/2019/07/top-5-online-courses-to-learn-cloud-computing-aws.html"&gt;best cloud computing courses&lt;/a&gt;&lt;/strong&gt; as well as &lt;strong&gt;&lt;a href="https://www.java67.com/2018/05/top-5-amazon-web-services-or-aws-courses-to-learn-online.html"&gt;best free AWS courses&lt;/a&gt;&lt;/strong&gt; but many of you asked me to share more comprehensive AWS courses and here we are with the list of best online courses to learn AWS in depth. &lt;/p&gt;

&lt;p&gt;In this list, I have shared the best Amazon Web Service courses from popular websites and online course platforms like &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2F"&gt;Coursera&lt;/a&gt;, &lt;a href="https://click.linksynergy.com/fs-bin/click?id=JVFxdTr9V80&amp;amp;offerid=323058.9409&amp;amp;type=3&amp;amp;subid=0"&gt;Udemy&lt;/a&gt;, &lt;a href="http://pluralsight.pxf.io/c/1193463/424552/7490?u=https%3A%2F%2Fwww.pluralsight.com%2Flearn"&gt;Pluralsight&lt;/a&gt;, and &lt;a href="http://linkedin-learning.pxf.io/c/1193463/449670/8005"&gt;LinkedIn Learning&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Whether you are starting from scratch or whether you are preparing for AWS certification these courses can help in both of your goals, but before that let's learn what is AWS and what its benefits offer.&lt;/p&gt;

&lt;p&gt;Amazon Web Services, or AWS, can be different things for different people. In the most simple terms, it is a cloud computing platform that provides a lot of features like Infrastructure as a service, or IaaS, platform as a service, or PaaS, and software as a service or SaaS. It also offers different services like database storage, organizational tools, and content delivery systems.&lt;/p&gt;

&lt;p&gt;As the name suggests, &lt;a href="https://aws.amazon.com/"&gt;Amazon Web Services&lt;/a&gt; was started by Amazon in 2006. It was initially created to handle Amazon's internal online retail operations, before offering the world's first pay-as-you-go cloud computing model to provide users with compute and storage facilities.&lt;/p&gt;

&lt;p&gt;AWS currently offers a host of different solutions for software developers. The main advantage that &lt;a href="https://medium.com/javarevisited/5-best-aws-courses-for-beginners-and-experienced-developers-to-learn-in-2021-563212409fbd"&gt;AWS&lt;/a&gt; has compared to its competitors is that its data centers can be used in up to 190 countries.&lt;/p&gt;

&lt;p&gt;AWS services can be used by educational institutions, government agencies, private organizations, and nonprofits.&lt;/p&gt;

&lt;p&gt;One of the main reasons that software developers turn to AWS is its flexibility. All the different services can be set up in different ways to match the user's needs. &lt;/p&gt;

&lt;p&gt;The Amazon Web Services portfolio comprises more than 100 services like infrastructure management, databases, application development and security, and databases.&lt;/p&gt;

&lt;p&gt;They also offer many role based certifications like &lt;a href="https://medium.com/javarevisited/6-best-aws-developer-associate-dva-c001-certification-practice-test-mock-exams-and-dumps-9e24573f509a"&gt;AWS Developer&lt;/a&gt;, &lt;a href="https://medium.com/javarevisited/6-best-aws-sysops-online-courses-for-devops-engineers-to-become-a-certified-aws-sysops-5c2ae9dad31d"&gt;AWS Admin&lt;/a&gt;, &lt;a href="https://medium.com/javarevisited/how-to-prepare-for-aws-solution-architect-associate-certification-saa-c01-saa-c02-exam-in-2021-a6e7e7e771fc"&gt;AWS Solution Architect&lt;/a&gt;, and much more. If you want to become a certified AWS professional then these courses can also help you prepare. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Fspecializations%2Faws-fundamentals"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XssSyRnb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/freeze/max/682/0%2A2ui893KAwAT_F9wz.gif" alt="My Favorite Courses to Learn Amazon Web Services (AWS) and Cloud Computing  for Beginners --- Best and Free" width="682" height="403"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#5-best-aws-courses-for-beginners-to-learn-in-2022"&gt;
  &lt;/a&gt;
  5 Best AWS Courses for Beginners to Learn in 2022
&lt;/h2&gt;

&lt;p&gt;Now that you know what is AWS and why you should learn AWS in 2022 and made the decision to learn AWS but are not sure where to start with, which resources to join, which courses to watch then don't worry. We have done the hard work and compiled a list of the best AWS Courses for Beginners to learn in 2022.&lt;/p&gt;

&lt;p&gt;Let's see them now&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-ultimate-aws-certified-solutions-architect-associate-2022"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Faws-certified-solutions-architect-associate-saa-c02%2F"&gt;Ultimate AWS Certified Solutions Architect Associate 2022&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;If you want to pass the AWS Certified Solutions Architect Associate Certification SAA-CO2, then this course is your best bet. This course will give you the most complete and comprehensive Amazon Web Services Cloud training.&lt;/p&gt;

&lt;p&gt;In this course, you will be able to perform real-world solutions architecture on the AWS platform and learn more about serverless fundamentals like Lambda, Cognito, and API Gateway. The course has also been fully updated to reflect the new SAA-CO2 Architect Associate Certification.&lt;/p&gt;

&lt;p&gt;When you buy this course, you will get lifetime access to more than 27 hours of on-demand video lectures, 12 articles, and 1 downloadable educational resource.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Course Duration: 27 hours&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Course Rating: 4.7 stars out of 5&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Course Instructor: Stephane Maarek&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Course Price: $14&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here is the link to join this course - &lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Faws-certified-solutions-architect-associate-saa-c02%2F"&gt;Ultimate AWS Certified Solutions Architect Associate 2022&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Faws-certified-solutions-architect-associate-saa-c02%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BKAMwUDC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-HT9maIz6HBA/YbydCENdj9I/AAAAAAAAqkc/eXVUuxqOGJgr-gGzSlebQFUDgKoIecfAQCNcBGAsYHQ/w297-h297/61estRxJrVL._SL1500_.jpg" alt="5 Best Amazon Web Service (AWS)  Courses to Learn online" width="297" height="297"&gt;&lt;/a&gt;\&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#2-aws-cloud-practitioner-essentials"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Flearn%2Faws-cloud-practitioner-essentials"&gt;AWS Cloud Practitioner Essentials&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This course is your perfect option if you are a beginner and is looking to gain an understanding of fundamental AWS Cloud concepts. By the time you complete this course, you will have a clear knowledge about the benefits of  AWS Cloud and its global infrastructure.&lt;/p&gt;

&lt;p&gt;This is the perfect stepping stone if you are preparing for the AWS Certified Cloud Practitioner Certification. You will learn more about the core AWS services like compute, network, databases, and storage.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Course Duration: Approximately 20 hours&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Course Rating: 4.8 stars out of 5&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Course Instructor: Rudy Chetty&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Course Price: $20&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;By the way, instead of joining these courses and specialization individually, you can also join the &lt;strong&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Fcourseraplus"&gt;Coursera Plus&lt;/a&gt;&lt;/strong&gt;, a subscription plan from Coursera which gives you unlimited access to their most popular courses, specialization, professional certificate, and guided projects.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Flearn%2Faws-cloud-practitioner-essentials"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xg2Whe9a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-DrIluqv8C7w/YbydYO3-ZPI/AAAAAAAAqkk/oEaVzcDlrpYi8gqKeReRJ2nOKG01G68eACNcBGAsYHQ/w386-h203/XDP%25257ECOURSE%252521%25257Eaws-cloud-practitioner-essentials.jpeg" alt="Best Coursera Course to learn AWS" width="386" height="202"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#3-fundamental-cloud-concepts-for-aws"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://pluralsight.pxf.io/c/1193463/424552/7490?u=https%3A%2F%2Fwww.pluralsight.com%2Fcourses%2Ffundamental-cloud-concepts-aws"&gt;Fundamental Cloud Concepts for AWS&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This is your best bet if you are looking for a simple and concise introduction to cloud computing on AWS. The course provides a comprehensive overview of cloud fundamentals which will be your first step in gaining the essential knowledge you need for the AWS Certified Cloud Practitioner certification exam.&lt;/p&gt;

&lt;p&gt;An AWS certification can be invaluable in this technological world. You will learn the value of cloud computing as well as all the basic concepts. You will get an understanding of how the entire global AWS infrastructure is organized. You will also get a sneak-peek at the economic side of cloud computing which will help you realize how cost-effective it is.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Course Duration: 2 hours&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Course Rating: 5 stars out of 5&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Course Instructor: David Tucker&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Course Price: $140 per year for the Premium plan&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;By the way, you will need a &lt;a href="http://pluralsight.pxf.io/c/1193463/424552/7490?u=https%3A%2F%2Fwww.pluralsight.com%2Flearn"&gt;Pluralsight membership&lt;/a&gt; to join this course which costs around $29 per month or $299 per year (14% discount). I highly recommend this subscription to all programmers as it provides instant access to more than 7000+ online courses to learn any tech skill. &lt;/p&gt;

&lt;p&gt;Alternatively, you can also use their &lt;strong&gt;&lt;a href="https://pluralsight.pxf.io/c/1193463/424552/7490?u=https%3A%2F%2Fwww.pluralsight.com%2Fpricing%2Ffree-trial"&gt;10-day-free-pass&lt;/a&gt;&lt;/strong&gt; to watch this course for FREE.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://pluralsight.pxf.io/c/1193463/424552/7490?u=https%3A%2F%2Fwww.pluralsight.com%2Fcourses%2Ffundamental-cloud-concepts-aws"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HGVGHEIt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-MtYcoMu2a3c/Ybydjn0tD2I/AAAAAAAAqko/az_dfRgBLTwTTLlpKq6IjfzGMu0VtV1VwCNcBGAsYHQ/w382-h233/image-res.img.153347ac-6cf0-453c-a5a0-cd5564a10379.png" alt="Best Pluralsight Course to learn AWS" width="382" height="233"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#4-aws-essential-training-for-developers"&gt;
  &lt;/a&gt;
  4. &lt;a href="http://linkedin-learning.pxf.io/c/1193463/449670/8005?u=https%3A%2F%2Fwww.linkedin.com%2Flearning%2Faws-essential-training-for-developers"&gt;AWS Essential Training for Developers &lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This course will help you overcome your fear of all the more than 100 different services offered by AWS and enable you to accomplish business objectives. With AWS skills getting more and more in-demand, it can be the difference between losing and landing your dream job.&lt;/p&gt;

&lt;p&gt;In this course, Jeremy Villeneuve, who is the founder of the IT Consulting firm Halvanta LLC, will give you a high-level look at the different ways applications can be hosted in AWS, and decide which AWS services match your needs. You will be introduced to the wonders of cloud computing by matching theoretical concepts to real-world hardware like hard disks and network switches.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Course Duration: 4 hours&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Course Instructor: Jeremy Villeneuve&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Course Price: $12 per month for an annual subscription&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;By the way, you would need a LinkedIn Learning membership to watch this course which costs around $19.99 per month but you can also watch this course for FREE by taking their &lt;strong&gt;&lt;a href="http://linkedin-learning.pxf.io/c/1193463/449670/8005?u=https%3A%2F%2Fwww.linkedin.com%2Flearning%2Faws-essential-training-for-developers"&gt;1-month-free-trail&lt;/a&gt;&lt;/strong&gt; which is a great way to explore their 16000+ online courses on the latest technology.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://linkedin-learning.pxf.io/c/1193463/449670/8005?u=https%3A%2F%2Fwww.linkedin.com%2Flearning%2Faws-essential-training-for-developers"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zvjqa64q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogger.googleusercontent.com/img/a/AVvXsEhayIk8y67LwI4AiZNDZTdeo4zvxK-2yfdZ68P9IfalS6w5q-GfDPLtLBjMehMNqJcQqKFqaFr2QIVZOHUelZGI-VEbnFQfHVKYz0SIS_KrpDVhPk-EvCSlNGNYEtL7rhfwJ8gdptqkgyn0LKB-1Xns2QM3CD6RTyE7IdaOjVTGzUpbfTwJqkNShjQE%3Dw374-h209" alt="Best LinkedIn Learning Course to learn AWS" width="300" height="168"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#5-amazon-web-services-certified-2022-4-certifications-udemy"&gt;
  &lt;/a&gt;
  &lt;strong&gt;5. &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Faws-certified-associate-architect-developer-sysops-admin%2F"&gt;Amazon Web Services Certified 2022 - 4 Certifications!&lt;/a&gt; [Udemy]&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This is your go-to course if you are looking to clear the AWS Certifications like Solutions Architect, Developer, SysOps Administrator, and Cloud Practitioner. In short, this is a 4-in 1 course and is a huge bargain at this price.&lt;/p&gt;

&lt;p&gt;When you purchase this course, you will get lifetime access to more than 46 hours of on-demand video lectures, 7 articles, and 37 downloadable educational resources. The entire course content is divided into 5 sections and 200 lectures.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Course Duration: 46 hours&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Course Rating: 4.5 stars out of 5&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Course Instructor: Paul Coady&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Course Price: $14&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here is the link to join this course - **&lt;/strong&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Faws-certified-associate-architect-developer-sysops-admin%2F"&gt;Amazon Web Services Certified 2022 - 4 Certifications!&lt;/a&gt;**&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Faws-certified-associate-architect-developer-sysops-admin%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qNB6yb_l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogger.googleusercontent.com/img/a/AVvXsEgUI8b4SyHRqffidNwLav2BbRBpSyyqQ2JPRMxxEVZ-Qyt0BhBUsGPKXygCTEmn1HKpllkgw-PIZq_50nMhl-Gobrpf4-qJ4BThtWmrFcUY2YRe7tVySqDOI20pODL3QPggSunyxZeLvRGoUDCE5IJfAsY21nGSLNvZjj6FTpsmfl4RXlcuSS-K5RV0%3Dw395-h222" alt="Best Udemy Course to learn AWS for Certifications" width="240" height="135"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#frequently-asked-questions"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Frequently Asked Questions&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Now that you know what is AWS and also see the best online courses to learn Amazon Web Service, let's see common questions asked by beginners while learning AWS&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. What is AWS for beginners?&lt;/strong&gt;&lt;br&gt;
If you are a complete beginner, I will put it to you in the simplest of terms. It is a cloud computing platform that provides a lot of features like Infrastructure as a service, or IaaS, platform as a service, or PaaS, and software as a service or SaaS. It also offers different services like database storage, organizational tools, and content delivery systems.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. What is the salary of AWS?&lt;/strong&gt;&lt;br&gt;
An AWS Certified Associate Developer can earn roughly $159,000 per year, which is frankly a lot of money. So, what are you gonna do with it?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Is AWS in-demand?&lt;/strong&gt;&lt;br&gt;
AWS skills are one of the most in-demand skills that an employer looks for and certification can be a huge boost to your job prospects.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Conclusion&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;These are the best courses to learn AWS in 2022. These are also the best resources if you are looking to clear any of the AWS certification exams like AWS developer or AWS Solution Architect associate in 2022. You can use these courses to prepare yourselves thoroughly and take the exam with strong knowledge.&lt;/p&gt;

&lt;p&gt;Other &lt;strong&gt;AWS and Cloud Computing Articles&lt;/strong&gt; you may like&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2019/07/top-5-google-cloud-platform-gcp-courses-certifications-online.html"&gt;Top 5 Google Cloud Courses and Certifications&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2019/05/top-5-courses-to-crack-aws-solutions-architect-associate-certification-exam-SAA-C01.html#axzz5rHwAwycj"&gt;Top 5 Courses to Crack AWS Solution Architect Associate Certification&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2019/08/how-to-crack-aws-certified-solution-architect-exam.html"&gt;How to Crack the AWS Solution Architect Associate Exam&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2020/05/top-5-amazon-web-services-aws-courses-for-beginners-and-experienced-programmers.html"&gt;Top 5 Courses to learn AWS for Beginners and Experienced Developers&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2020/05/top-5-courses-to-crack-aws-certified-developer-associate-certification-exam.html"&gt;Top 5 Courses to Crack AWS Certified Developer Associate Exam&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2020/04/top-5-course-to-crack-aws-certified-devops-engineer-professional-exam-certification.html"&gt;5 Courses to become AWS DevOps Engineer Professional &lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2020/04/top-5-course-to-crack-aws-solution-architect-professional-sap-c01-certification-exam.html"&gt;Top 5 Courses to become AWS Solution Architect Professional&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2020/04/top-5-course-to-crack-aws-certified-devops-engineer-professional-exam-certification.html"&gt;Top 5 Courses to Crack AWS DevOps Engineer Exam&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2020/06/top-5-course-to-crack-google-cloud-professional-data-engineer-certification.html"&gt;Top 5 Courses to pass Google Cloud Professional Data Engineer Certification&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2020/05/top-5-cloud-courses-for-java-and-spring-boot-developers.html"&gt;Top 5 AWS and Cloud Courses for Java Developers&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2020/07/top-5-courses-to-become-google-cloud-professional-architect.html"&gt;5 Best Courses to become Google Cloud Professional Cloud, Architect&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/top-10-courses-to-learn-amazon-web-services-aws-cloud-in-2020-best-and-free-317f10d7c21d"&gt;My Favorite Courses to learn AWS in depth&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2020/03/top-5-aws-certified-cloud-practitioner-mock-test-practice-questions.html"&gt;Top 5 Mock test and Exam Dumps for AWS Cloud Practitioner (CLF-C01)&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2020/02/top-5-courses-to-crack-aws-certified-cloud-practitioner-exam-certification-clf-c01.html"&gt;5 Best courses to Pass the AWS Cloud Practitioner exam&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2020/05/top-5-course-to-crack-google-cloud-associate-cloud-engineer-certification-exam.html"&gt;5 Courses to become Google Cloud Platform Associate Cloud Engineer&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.java67.com/2018/05/top-5-amazon-web-services-or-aws-courses-to-learn-online.html"&gt;5 Free Courses to learn Amazon Web Service&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2020/04/top-5-course-to-crack-aws-solution-architect-professional-sap-c01-certification-exam.html"&gt;Top 5 Courses to Crack AWS Solution Architect Professional Exam&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2019/08/top-5-free-aws-solution-architect-Associate-certification-dumps-practice-questions.html"&gt;5 Free AWS Solution Architect Associate Practice Test, Dumps, and Mock Exam&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/top-10-courses-to-learn-amazon-web-services-aws-cloud-in-2020-best-and-free-317f10d7c21d"&gt;How to prepare for AWS Solution Architect Certification&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reading this article so far. If you liked this list of the 5 best AWS Courses for Beginners, feel free to share it with your friends and family. Drop a comment if you have any doubts or questions and we will get back to you right away.&lt;/p&gt;

&lt;p&gt;P. S. - If you want to learn AWS but looking for a free course to start with then you can also check out this free AWS course - &lt;strong&gt;&lt;a href="https://click.linksynergy.com/fs-bin/click?id=JVFxdTr9V80&amp;amp;subid=0&amp;amp;offerid=323058.1&amp;amp;type=10&amp;amp;tmpid=14538&amp;amp;RD_PARM1=https%3A%2F%2Fwww.udemy.com%2Famazon-web-services-aws-v%2F"&gt;Amazon Web Service (AWS) - Zero to Hero&lt;/a&gt;&lt;/strong&gt; from Udemy. This course is completely free and you just need an Udemy account to join this course.&lt;/p&gt;

</description>
      <category>cloudcomputing</category>
      <category>aws</category>
      <category>programming</category>
      <category>development</category>
    </item>
    <item>
      <title>Connect Server with Express Engine- EJS Work as a Frontend</title>
      <author>Deepak</author>
      <pubDate>Sun, 19 Dec 2021 05:05:01 +0000</pubDate>
      <link>https://dev.to/deepakjaiswal/connect-server-with-express-engine-ejs-work-as-a-frontend-5do9</link>
      <guid>https://dev.to/deepakjaiswal/connect-server-with-express-engine-ejs-work-as-a-frontend-5do9</guid>
      <description>&lt;p&gt;many of user does not understand how we create our data to frontend in react so this article help for you.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;first we install&lt;/p&gt;

&lt;p&gt;npm install ejs&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;then set some cofigurations in your project&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;first make folder views
&lt;code&gt;app.set('view engine','ejs');&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#indexejs"&gt;
  &lt;/a&gt;
  index.ejs
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
`&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset="UTF-8"&amp;gt;
    &amp;lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&amp;gt;
    &amp;lt;title&amp;gt;Express Engine&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;%= heading  %&amp;gt; 
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;`
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;in our index.js we simple render the page index.ejs&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;`app.get('/',(req,res)=&amp;gt;{

   res.render('index.ejs',{heading:"first Page"});
})`
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;EJS work as a component based like in react &lt;/p&gt;

&lt;p&gt;simply use include file&lt;/p&gt;

&lt;p&gt;&lt;code&gt;include('header.ejs')&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;some developers are think ejs is tough for us but don&lt;code&gt;t worry about this is a simple like you work on html but some operation map array of content then use it like you use php as server .&lt;br&gt;
&lt;/code&gt;&amp;lt;% array.forEach(item=&amp;gt;{}) %&amp;gt;`&lt;/p&gt;

&lt;p&gt;we can do everything using ejs.&lt;/p&gt;

</description>
      <category>node</category>
      <category>express</category>
      <category>ejs</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Dockerfile for Go</title>
      <author>Young Yoshie</author>
      <pubDate>Sun, 19 Dec 2021 04:46:17 +0000</pubDate>
      <link>https://dev.to/youngyoshie/dockerfile-for-go-4jjp</link>
      <guid>https://dev.to/youngyoshie/dockerfile-for-go-4jjp</guid>
      <description>&lt;p&gt;Each time I start a new Go project, I repeat many steps.&lt;br&gt;
Like set up &lt;code&gt;.gitignore&lt;/code&gt;, CI configs, Dockerfile, ...&lt;/p&gt;

&lt;p&gt;So I decide to have a baseline Dockerfile like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; golang:1.18beta1-bullseye as builder&lt;/span&gt;

&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /build&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; go.mod .&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; go.sum .&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; vendor .&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nv"&gt;CGO_ENABLED&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0 &lt;span class="nv"&gt;GOOS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;linux &lt;span class="nv"&gt;GOARCH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;amd64 &lt;span class="nv"&gt;GOAMD64&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;v3 go build &lt;span class="nt"&gt;-o&lt;/span&gt; ./app main.go

&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; gcr.io/distroless/base-debian11&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; --from=builder /build/app /app&lt;/span&gt;

&lt;span class="k"&gt;ENTRYPOINT&lt;/span&gt;&lt;span class="s"&gt; ["/app"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I use &lt;a href="https://docs.docker.com/develop/develop-images/multistage-build/"&gt;multi-stage build&lt;/a&gt; to keep my image size small.&lt;br&gt;
First stage is &lt;a href="https://hub.docker.com/_/golang"&gt;Go official image&lt;/a&gt;,&lt;br&gt;
second stage is &lt;a href="https://github.com/GoogleContainerTools/distroless"&gt;Distroless&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Before Distroless, I use &lt;a href="https://hub.docker.com/_/alpine"&gt;Alpine official image&lt;/a&gt;,&lt;br&gt;
There is a whole discussion on the Internet to choose which is the best base image for Go.&lt;br&gt;
After reading some blogs, I discover Distroless as a small and secure base image.&lt;br&gt;
So I stick with it for a while.&lt;/p&gt;

&lt;p&gt;Also, remember to match Distroless Debian version with Go official image Debian version.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; golang:1.18beta1-bullseye as builder&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is Go image I use as a build stage.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /build&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; go.mod .&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; go.sum .&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; vendor .&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I use &lt;code&gt;/build&lt;/code&gt; to emphasize that I am building something in that directory.&lt;/p&gt;

&lt;p&gt;The 4 &lt;code&gt;COPY&lt;/code&gt; lines are familiar if you use Go enough.&lt;br&gt;
First is &lt;code&gt;go.mod&lt;/code&gt; and &lt;code&gt;go.sum&lt;/code&gt; because it defines Go modules.&lt;br&gt;
The second is &lt;code&gt;vendor&lt;/code&gt; because I use it a lot, this is not necessary but I use it because I don't want each time I build Dockerfile, I need to redownload Go modules.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nv"&gt;CGO_ENABLED&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0 &lt;span class="nv"&gt;GOOS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;linux &lt;span class="nv"&gt;GOARCH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;amd64 &lt;span class="nv"&gt;GOAMD64&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;v3 go build &lt;span class="nt"&gt;-o&lt;/span&gt; ./app main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is where I build Go program.&lt;br&gt;
&lt;code&gt;CGO_ENABLED=0&lt;/code&gt; because I don't want to mess with C libraries.&lt;br&gt;
&lt;code&gt;GOOS=linux GOARCH=amd64&lt;/code&gt; is easy to explain, Linux with x86-64.&lt;br&gt;
&lt;code&gt;GOAMD64=v3&lt;/code&gt; is new since &lt;a href="https://tip.golang.org/doc/go1.18#amd64"&gt;Go 1.18&lt;/a&gt;,&lt;br&gt;
I use v3 because I read about AMD64 version in &lt;a href="https://gitlab.archlinux.org/archlinux/rfcs/-/blob/master/rfcs/0002-march.rst"&gt;Arch Linux rfcs&lt;/a&gt;. TLDR's newer computers are already x86-64-v3.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; gcr.io/distroless/base-debian11&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; --from=builder /build/app /app&lt;/span&gt;

&lt;span class="k"&gt;ENTRYPOINT&lt;/span&gt;&lt;span class="s"&gt; ["/app"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, I copy &lt;code&gt;app&lt;/code&gt; to Distroless base image.&lt;/p&gt;

</description>
      <category>linux</category>
      <category>go</category>
      <category>docker</category>
    </item>
    <item>
      <title>Tips to Pass your AWS Certification on the 1st Try</title>
      <author>speechycode</author>
      <pubDate>Sun, 19 Dec 2021 03:50:17 +0000</pubDate>
      <link>https://dev.to/speechycode/tips-to-pass-your-aws-certification-on-the-1st-try-2p58</link>
      <guid>https://dev.to/speechycode/tips-to-pass-your-aws-certification-on-the-1st-try-2p58</guid>
      <description>&lt;p&gt;What is the AWS Certified Cloud Practitioner Exam? In short, it is a 65 question multiple-choice exam that tests  basic understanding of IT services and their use in the AWS Cloud platform.&lt;/p&gt;

&lt;p&gt;Several people have asked me what resources I used to pass the AWS Cloud Practitioner Exam. Scroll down for a list of the top 5 resources and tips that will help you pass your exam on your first try:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1) FreeCodeCamp &amp;amp; Andrew Brown's course&lt;/strong&gt;&lt;br&gt;
This FREE YouTube course covers everything that you need to know to pass the exam! Andrew Brown utilizes lecture slides and follow-along labs to help you fully understand each and every concept.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://youtu.be/SOTamWNgDKc"&gt;https://youtu.be/SOTamWNgDKc&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--prtFmv4l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oo9e8f6pqek1r4ypvv97.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--prtFmv4l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oo9e8f6pqek1r4ypvv97.png" alt="Freecodecamp" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;2) Hiroko Nishimura’s Introduction to AWS for Non-Engineers&lt;/strong&gt;&lt;br&gt;
This is a 4-part video course created in partnership with Linkedin Learning to help you begin learning about AWS and Cloud Computing from zero!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.linkedin.com/learning/paths/prepare-for-the-aws-certified-cloud-practitioner-exam"&gt;https://www.linkedin.com/learning/paths/prepare-for-the-aws-certified-cloud-practitioner-exam&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SC6lBnR1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4n6ij2m9tfter37wzqt4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SC6lBnR1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4n6ij2m9tfter37wzqt4.png" alt="Linkedin Learning" width="880" height="391"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;3) Utilize Online and Handwritten Flashcards&lt;/strong&gt;&lt;br&gt;
Science has proven that handwritten notes and flashcards are powerful in supporting the brain's capacity for retrieval of information. Create flashcard sets by hand as you study. You can also utilize Quizlet for online flashcards! &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://quizlet.com/search?query=Aws-Certified-Cloud-Practitioner"&gt;https://quizlet.com/search?query=Aws-Certified-Cloud-Practitioner&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O1b17-tN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zuokzyy7l9acmc8noc4x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O1b17-tN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zuokzyy7l9acmc8noc4x.png" alt="Quizlet" width="880" height="330"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;4) AWS Whitepapers&lt;/strong&gt;&lt;br&gt;
The "AWS Well-Architected Framework" whitepaper and the Overview of Amazon Web Services" whitepaper are highly useful for the exam! Read through these whitepapers to improve your understanding of each service and the best practices for designing and operating reliable, secure, efficient, and cost-effective systems in the cloud!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://docs.aws.amazon.com/wellarchitected/latest/framework/welcome.html"&gt;https://docs.aws.amazon.com/wellarchitected/latest/framework/welcome.html&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.aws.amazon.com/whitepapers/latest/aws-overview/introduction.html"&gt;https://docs.aws.amazon.com/whitepapers/latest/aws-overview/introduction.html&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9BhVEoRx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/koc56rsp2d7oeyvuzpwb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9BhVEoRx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/koc56rsp2d7oeyvuzpwb.png" alt="whitepaper" width="768" height="308"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;5) AWS Practice Exams&lt;/strong&gt;&lt;br&gt;
Take a full-length practice exam as often as possible. This will help you become more familiar with the type of questions that will appear on the exam. See the link below of an official AWS practice set of questions!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://d1.awsstatic.com/training-and-certification/docs-cloud-practitioner/AWS-Certified-Cloud-Practitioner_Sample-Questions.pdf"&gt;https://d1.awsstatic.com/training-and-certification/docs-cloud-practitioner/AWS-Certified-Cloud-Practitioner_Sample-Questions.pdf&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nRqkrSjJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0h53wkjqowwh0n1nugql.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nRqkrSjJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0h53wkjqowwh0n1nugql.png" alt="exam" width="880" height="169"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Good Luck!&lt;/em&gt; 🍀&lt;/p&gt;

</description>
      <category>aws</category>
      <category>beginners</category>
      <category>newbie</category>
      <category>career</category>
    </item>
    <item>
      <title>Easy to use software Documentation Builder</title>
      <author>Martin Tonev</author>
      <pubDate>Sun, 19 Dec 2021 03:19:34 +0000</pubDate>
      <link>https://dev.to/martintonev/easy-to-use-software-documentation-builder-51ab</link>
      <guid>https://dev.to/martintonev/easy-to-use-software-documentation-builder-51ab</guid>
      <description>&lt;p&gt;I`ve created this product because I always struggle with generating documentation in HTML or Word format.&lt;br&gt;
It is just a bit boring to make a menu and all the connected sections. Also, there are always so many revisions you end with 10 different files.&lt;/p&gt;

&lt;p&gt;So I create an online tool to build the navigation and storing the text after I quickly add my&lt;br&gt;
navigation and text I can share the URL to the product or export it to PDF.&lt;/p&gt;

&lt;p&gt;Also, I can manage all the revisions in one place&lt;/p&gt;

&lt;p&gt;It just saves time and boring stuff to do every time you lunch a new product.&lt;/p&gt;

&lt;p&gt;Check it out: &lt;a href="https://create-documentation-online.com/"&gt;https://create-documentation-online.com/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>dev</category>
    </item>
    <item>
      <title>Secure AWS-CDK deployments with GitHub Actions</title>
      <author>Simon</author>
      <pubDate>Sun, 19 Dec 2021 02:47:23 +0000</pubDate>
      <link>https://dev.to/simonireilly/secure-aws-cdk-deployments-with-github-actions-3jfk</link>
      <guid>https://dev.to/simonireilly/secure-aws-cdk-deployments-with-github-actions-3jfk</guid>
      <description>&lt;p&gt;GitHub actions enables continuous integration, and the aws-cdk enables infrastructure as code.&lt;/p&gt;

&lt;p&gt;This guide provides a secure way to automate the deployments of aws-cdk stacks, from GitHub actions to your AWS account.&lt;/p&gt;

&lt;p&gt;It's more secure because you do not have to store long lived credentials in your GitHub account, and, because only the open ID connect with GitHubs fingerprint can assume the deployment role 👍&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Originally published &lt;a href="https://blog.simonireilly.com/posts/secure-aws-cdk-deploys-with-github-actions"&gt;here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Relevant documentation for:

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-amazon-web-services"&gt;GitHub open ID connect
&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_create_oidc.html"&gt;Using open ID connect with AWS IAM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works
&lt;/h2&gt;

&lt;p&gt;We will utilise open ID connect, to grant GitHub a temporary federated identity. This identity will be trusted, to assume a role in your AWS account.&lt;/p&gt;

&lt;p&gt;When the identity (GitHub) assumes the roles, we will secure it's access by doing two things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Granting a temporary aws secret key and access key, that expires in an hour.&lt;/li&gt;
&lt;li&gt;Using claims from the JWT presented by GitHub to AWS to narrow the scope of the allowed identities.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;p&gt;When we are done we will have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A one-off GitHub action, that creates the identity provider and trust relationship using an aws-cdk stack.&lt;/li&gt;
&lt;li&gt;Another GitHub action that uses the identity to gain temporary access, and deploy aws-cdk stacks.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-bootstrap-stack"&gt;
  &lt;/a&gt;
  Creating the bootstrap stack
&lt;/h2&gt;

&lt;p&gt;We can create a new aws-cdk application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;bootstrap

npx aws-cdk@2.x init app &lt;span class="nt"&gt;--language&lt;/span&gt; typescript
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that we will use two components from IAM to create a provider, and a principal.&lt;/p&gt;

&lt;p&gt;We will use the principal to create a trust relationship between aws, and GitHub like so.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * Create an Identity provider for GitHub inside your AWS Account. This
 * allows GitHub to present itself to AWS IAM and assume a role.
 */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;provider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;OpenIdConnectProvider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;MyProvider&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://token.actions.githubusercontent.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;clientIds&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sts.amazonaws.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then establish the trust relationship by defining the conditions for this provider to act as a principal.&lt;/p&gt;

&lt;p&gt;I will provide an example that assumes you are &lt;a href="https://github.com/simonireilly"&gt;https://github.com/simonireilly&lt;/a&gt; and you want to deploy from all repository branches of a repo called awesome-project&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;githubOrganisation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;simonireilly&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="c1"&gt;// Change this to the repo you want to push code from&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;repoName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;awesome-project&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="cm"&gt;/**
 * Create a principal for the OpenID; which can allow it to assume
 * deployment roles.
 */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;GitHubPrincipal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;OpenIdConnectPrincipal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;provider&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;withConditions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;StringLike&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;token.actions.githubusercontent.com:sub&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="s2"&gt;`repo:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;githubOrganisation&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;repoName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:*`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally you want to establish the role that can be assumed by the OIDC principal. This will allow GitHub actions to use the AWS Roles, and mutate the AWS Resources you give it access to.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
  * Create a deployment role that has short lived credentials. The only
  * principal that can assume this role is the GitHub Open ID provider.
  *
  * This role is granted authority to assume aws cdk roles; which are created
  * by the aws cdk v2.
  */&lt;/span&gt;
&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Role&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GitHubActionsRole&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;assumedBy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GitHubPrincipal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Role assumed by GitHubPrincipal for deploying from CI using aws cdk&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;roleName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;github-ci-role&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;maxSessionDuration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Duration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hours&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="na"&gt;inlinePolicies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;CdkDeploymentPolicy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;PolicyDocument&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;assignSids&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;statements&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;PolicyStatement&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
          &lt;span class="na"&gt;effect&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Effect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ALLOW&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sts:AssumeRole&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
          &lt;span class="na"&gt;resources&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;`arn:aws:iam::&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:role/cdk-*`&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;}),&lt;/span&gt;
      &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;🚨 These permissions may be too broad for your use case. Consider adding a permissions boundary, or, opting to use a role other than the role automatically created by the cdk for its deployments 🚨&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploying-bootstrap"&gt;
  &lt;/a&gt;
  Deploying Bootstrap
&lt;/h2&gt;

&lt;p&gt;With a set of created access keys, you can deploy the bootstrap. This enables someone with higher privilege to setup the link for your team 👍&lt;/p&gt;

&lt;p&gt;This keeps you from storing long lived credentials in GitHub.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Bootstrap&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;workflow_dispatch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;inputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;AWS_ACCESS_KEY_ID&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Access&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Key&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;ID&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;with&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Permissions&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;to&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;deploy&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;IAM,&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;and&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;OIDC"&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
      &lt;span class="na"&gt;AWS_SECRET_ACCESS_KEY&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Secret&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Access&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Key&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;with&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Permissions&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;to&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;deploy&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;IAM,&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;and&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;OIDC"&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
      &lt;span class="na"&gt;AWS_REGION&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Region&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;to&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;deploy&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;to."&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;deploy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Git clone the repository&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v1&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Configure aws credentials&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;aws-actions/configure-aws-credentials@master&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;aws-access-key-id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ github.event.inputs.AWS_ACCESS_KEY_ID }}&lt;/span&gt;
          &lt;span class="na"&gt;aws-secret-access-key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ github.event.inputs.AWS_SECRET_ACCESS_KEY }}&lt;/span&gt;
          &lt;span class="na"&gt;aws-region&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ github.event.inputs.AWS_REGION }}&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-node@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;node-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;14"&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn install&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Synth stack&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn --cwd packages/bootstrap cdk synth&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deploy stack&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn --cwd packages/bootstrap cdk deploy --require-approval never&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you trigger this action the user must enter aws access keys and aws secrets that have the required privileges.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T03--NrZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ysob4ndwqpihfw1kxrie.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T03--NrZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ysob4ndwqpihfw1kxrie.png" alt="GitHub user interface showing drop-down to enter aws secrets" width="880" height="604"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#post-bootstrap-life"&gt;
  &lt;/a&gt;
  Post Bootstrap life
&lt;/h2&gt;

&lt;p&gt;With this stack deployed you can now ship any aws-cdk v2 deployments from the trusted repository, to the linked AWS account, without storing long lived credentials.&lt;/p&gt;

&lt;p&gt;All you need to do is instruct GitHUb actions to assume the github-ci-role role in your account, and it will get temporary credentials for one hour.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;  &lt;span class="na"&gt;deploy-infrastructure&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Git clone the repository&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v1&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Assume role using OIDC&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;aws-actions/configure-aws-credentials@master&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;role-to-assume&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;arn:aws:iam::&amp;lt;your-account-id-here&amp;gt;:role/github-ci-role&lt;/span&gt;
          &lt;span class="na"&gt;aws-region&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ env.AWS_REGION }}&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-node@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;node-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;14"&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn install&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Synth infrastructure stack&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn --cwd packages/infrastructure cdk synth&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deploy infrastructure stack&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn --cwd packages/infrastructure cdk deploy --require-approval never&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#next-steps-might-to-be"&gt;
  &lt;/a&gt;
  Next steps might to be
&lt;/h2&gt;

&lt;p&gt;Create another bootstrapping aws cdk stack, that allows only deploying from the &lt;code&gt;main&lt;/code&gt; branch, and point this one at your production AWS account if you have one 👍&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;StringLike&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;token.actions.githubusercontent.com:sub&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="s2"&gt;`repo:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;githubOrganisation&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:ref:/refs/head/main`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#follow-up"&gt;
  &lt;/a&gt;
  Follow up
&lt;/h2&gt;

&lt;p&gt;If you are interested in this stuff, you might like &lt;a href="https://simonireilly.gitbook.io/micro-teams-practical-guide-to-the-aws-estate/"&gt;microteams&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;A guide I am writing for scale ups, that are growing from one person AWS start-ups to multi-team organisations.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>github</category>
      <category>typescript</category>
      <category>devops</category>
    </item>
    <item>
      <title>Cloud Computing </title>
      <author>Md Shahriyar Al Mustakim Mitul</author>
      <pubDate>Sun, 19 Dec 2021 02:39:11 +0000</pubDate>
      <link>https://dev.to/mitul3737/cloud-computing-81a</link>
      <guid>https://dev.to/mitul3737/cloud-computing-81a</guid>
      <description>&lt;p&gt;&lt;strong&gt;Cloud Computing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Few terms we need to know:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
Virtualization: It allows the possibility of having multiple virtual machines (VMs) each running essentially a separate operating system and applications installed on 1 physical layer.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gGSTKjWD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/68ezod1rjzjkwmcq6u90.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gGSTKjWD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/68ezod1rjzjkwmcq6u90.png" alt=" 3VMs under 1 hardware" width="450" height="327"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Compute: It is mainly the brain which process workload&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Storage: It allows to save and store data&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Database: It allows to store structure sets of data used by applications&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Network: These resources provide the connectivity allowing all other resources (compute /storage / database ) to communicate with each other.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;so, Cloud computing is a remote virtual pool of on demand shared resources offering Compute, Storage, Database and Network services that can be rapidly deployed at scale&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cloud Deployment Models&lt;/strong&gt;&lt;br&gt;
1.Public Cloud: &lt;br&gt;
Vendor makes available the use of shared infrastructure , including &lt;em&gt;Compute, Storage, Database , Network resources.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Vendors provide all backend and physical maintenance and consumers can specify the geographic region in which the it resides to aid with data access. One can access the public cloud from anywhere through internet. &lt;/p&gt;

&lt;p&gt;2.Private Cloud: &lt;br&gt;
infrastructures are privately hosted. Hardware is usually on-premise. More capital expenditure is required to acquire the hosts and datacenter. Additional resources are needed for the day to day operations and maintenance of the equipment.&lt;/p&gt;

&lt;p&gt;3.Hybrid Cloud: &lt;br&gt;
Uses both public and private cloud. It is established when a network link is configured between the private cloud to services within a public cloud.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O0V05Fvr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pncmqx952djqg498l34k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O0V05Fvr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pncmqx952djqg498l34k.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Terms to know :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;On demand resourcing: When we want to provision a resource within a cloud, it provides immediately resources .&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Scalability: We can scale out environment resources both 'up and down' and 'in and out'&lt;br&gt;
Scaling up and down means the power and performance of an instance . example: using 1 instance  with greater CPU /memory power.&lt;br&gt;
Scaling in and out means adding or removing instances .&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Economy of scale: Due to huge scale of resources public cloud offerings, there are low resource costs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Flexibility and elasticity :The amount of resources, how long I want to use and what scale I want to use etc are open to me.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Utility based metering: Pay as you use. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Shared infrastructure: Multiple resources are connecting to one hardware which reduces cost.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;High available: these vendor services are very available globally&lt;br&gt;
Security: there are security provided by vendors&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Blog: &lt;a href="https://cloudacademy.com/blog/aws-shared-responsibility-model-security/"&gt;https://cloudacademy.com/blog/aws-shared-responsibility-model-security/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cloud service models&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1.SaaS(Software as a service): it is mainly delivery of an application that can widely distributed and accessed. ex: Google's gmail service&lt;/p&gt;

&lt;p&gt;2.PaaS( Platform as a service): &lt;br&gt;
One has access to framework form the operating system and up. The underlying architecture , host hardware , network component, OS etc are managed by vendor.&lt;/p&gt;

&lt;p&gt;3.IaaS( Infrastructure as a service): &lt;br&gt;
this allows one to architect own portion of the cloud by configuring virtual network . Given highest level of customization .&lt;br&gt;
moreover we have DRaaS, CaaS etc&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Benefits of cloud computing&lt;/strong&gt;&lt;br&gt;
1) Migrating their business to cloud&lt;br&gt;
2) Reduces less data traffics&lt;br&gt;
3) Back up &lt;br&gt;
4) Web hosting&lt;br&gt;
5) Test/ Dev Environment&lt;br&gt;
6) Big data. data manipulation&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Data center architecture&lt;/strong&gt;&lt;br&gt;
1) there are many servers globally which makes public vendors easily share services globally&lt;br&gt;
2) Physical Security: &lt;br&gt;
AWS's security: &lt;a href="https://aws.amazon.com/compliance/"&gt;https://aws.amazon.com/compliance/&lt;/a&gt;&lt;br&gt;
Microsoft: &lt;a href="https://docs.microsoft.com/en-us/compliance/"&gt;https://docs.microsoft.com/en-us/compliance/&lt;/a&gt;&lt;br&gt;
3)Network Infrastructure: AWS has (Virtual Private Clouds)VPC and Microsoft has (Virtual Network) VNet&lt;br&gt;
4) Servers : called as Instances or Virtual machine(VM)&lt;br&gt;
5) Storage: almost unlimited. &lt;/p&gt;

</description>
      <category>cloud</category>
      <category>aws</category>
      <category>community</category>
    </item>
    <item>
      <title>Life Pro Tips for TailwindCSS Projects</title>
      <author>Wade Zimmerman</author>
      <pubDate>Sun, 19 Dec 2021 01:51:44 +0000</pubDate>
      <link>https://dev.to/wadecodez/tips-to-enhance-tailwindcss-projects-34ap</link>
      <guid>https://dev.to/wadecodez/tips-to-enhance-tailwindcss-projects-34ap</guid>
      <description>&lt;p&gt;Recently, TailwindCSS released version 3.0 and the framework remains highly popular. Do you know all the little tricks for cleaner code?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S5_TiDQk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4j6381quzw1d95bztbw6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S5_TiDQk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4j6381quzw1d95bztbw6.png" alt="Image description" width="880" height="414"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#1-aspect-ratio"&gt;
  &lt;/a&gt;
  1. Aspect Ratio
&lt;/h1&gt;

&lt;p&gt;A clean UI requires all cards and images to be perfectly sized across all devices. There are too many screen sizes to use responsive scaling units like &lt;code&gt;em&lt;/code&gt;, &lt;code&gt;rem&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt;, or &lt;code&gt;vh/vw&lt;/code&gt; making media distorted on some platforms.&lt;/p&gt;

&lt;p&gt;Forcing a size for media is non-trivial with pixels but how do you force a responsive ratio? Perhaps, a profile banner is 1500x500 pixels but user uploaded content makes preserving user experiences challenging. The answer is aspect ratio containers.&lt;/p&gt;

&lt;p&gt;demo: &lt;a href="https://play.tailwindcss.com/hBXgOiGwv7"&gt;https://play.tailwindcss.com/hBXgOiGwv7&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;iframe&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"w-full aspect-video ..."&lt;/span&gt; 
        &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://www.youtube.com/ ..."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/iframe&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Aspect ratios will force the content to grow to the width of the container while auto-scaling the height to match the ratio to &lt;code&gt;16:9&lt;/code&gt;.  A node with a width of &lt;code&gt;1920&lt;/code&gt; will have a height of &lt;code&gt;1080&lt;/code&gt; while on mobile it will scale to &lt;code&gt;320x180&lt;/code&gt;.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#2-inset-positioning"&gt;
  &lt;/a&gt;
  2. Inset Positioning
&lt;/h1&gt;

&lt;p&gt;The inset technique plays nicely with aspect ratio containers. Perhaps, a square element needs nested scrolling content. The quickest solution is to use absolute positioning on a child element with full width and full height. Regardless this will take a few class names to correctly position the child element. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tvh5gjIH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7hysv1n1nntnz3ysw2xk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tvh5gjIH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7hysv1n1nntnz3ysw2xk.png" alt="Image description" width="634" height="439"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, Tailwind developers know this technique is common. Now a single utility class will handle all the positioning. Insets will fill or partially fill the entire parent node.&lt;/p&gt;

&lt;p&gt;demo: &lt;a href="https://play.tailwindcss.com/4ZTlx80ryN"&gt;https://play.tailwindcss.com/4ZTlx80ryN&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- Pin to top left corner --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"relative aspect-square ..."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"absolute left-0 top-0 h-1/2 w-1/2 ..."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;01&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- Span top edge --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"relative aspect-square ..."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"absolute inset-x-0 top-0 h-1/2 ..."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;02&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- Pin to top right corner --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"relative aspect-square ..."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"absolute top-0 right-0 h-1/2 w-1/2 ..."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;03&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- Span left edge --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"relative aspect-square ..."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"absolute inset-y-0 left-0 w-1/2 ..."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;04&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- Fill entire parent --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"relative aspect-square ..."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"absolute inset-0 ..."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;05&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- Span right edge --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"relative aspect-square ..."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"absolute inset-y-0 right-0 w-1/2 ..."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;06&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- Pin to bottom left corner --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"relative aspect-square ..."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"absolute bottom-0 left-0 h-1/2 w-1/2 ..."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;07&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- Span bottom edge --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"relative aspect-square ..."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"absolute inset-x-0 bottom-0 h-1/2 ..."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;08&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- Pin to bottom right corner --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"relative aspect-square ..."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"absolute bottom-0 right-0 h-1/2 w-1/2 ..."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;09&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h1&gt;
  &lt;a href="#divided-list-styling"&gt;
  &lt;/a&gt;
  Divided List Styling
&lt;/h1&gt;

&lt;p&gt;Tailwind is not perfect and often requires custom CSS to match the list styles of other popular frameworks like Boostrap. The iconic design places borders between each list item. &lt;/p&gt;

&lt;p&gt;The style is preferable because it shows a clear distinction between list items without needing complex structures like table, flexbox, or grid. Moreover, lists are more compatible across browsers.&lt;/p&gt;

&lt;p&gt;How do you quickly style a list like Bootstrap in Tailwind without writing custom CSS? Simple, use the &lt;code&gt;divide&lt;/code&gt; utility. &lt;/p&gt;

&lt;p&gt;demo: &lt;a href="https://play.tailwindcss.com/YpbjZdaJoU"&gt;https://play.tailwindcss.com/YpbjZdaJoU&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"divide-y border"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"p-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;a&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"p-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;b&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"p-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;c&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"p-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;d&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Thank you for reading my post. Now you know a few ways to reduce the number of utility classes included in your code. Here is a final product that uses all the techniques mentioned above: &lt;a href="https://play.tailwindcss.com/6mpXYGwfdE"&gt;https://play.tailwindcss.com/6mpXYGwfdE&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>tailwindcss</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>GraphQL Observability with Sentry</title>
      <author>Nick Amoscato</author>
      <pubDate>Sat, 18 Dec 2021 23:47:32 +0000</pubDate>
      <link>https://dev.to/namoscato/graphql-observability-with-sentry-34i6</link>
      <guid>https://dev.to/namoscato/graphql-observability-with-sentry-34i6</guid>
      <description>&lt;p&gt;At Fieldguide, &lt;a href="https://hasura.io/"&gt;Hasura&lt;/a&gt; exposes a &lt;a href="https://graphql.org/"&gt;GraphQL&lt;/a&gt; API on Postgres, extended with custom types implemented in a Node.js application's &lt;a href="https://www.apollographql.com/docs/apollo-server/"&gt;Apollo Server&lt;/a&gt;. Our front-end React application interacts with Hasura via &lt;a href="https://www.apollographql.com/docs/react/"&gt;Apollo Client&lt;/a&gt;, and our applications are managed on &lt;a href="https://www.heroku.com/"&gt;Heroku&lt;/a&gt;. GraphQL's inherent self-documentation has fueled an ecosystem of developer tooling, and its use with TypeScript results in highly efficient internal API development.&lt;/p&gt;

&lt;p&gt;While iteration speed is certainly a key product development metric, understanding the &lt;em&gt;behavior&lt;/em&gt; of features is equally important. This complementary information confirms development assumptions and surfaces inevitable bugs, providing a feedback loop that informs future iteration. Application behavior can be observed by generating proper telemetry data such as metrics, logs, and traces.&lt;/p&gt;

&lt;p&gt;We adopted &lt;a href="https://sentry.io/welcome/"&gt;Sentry&lt;/a&gt;, an error tracking and performance monitoring platform, in the beginning weeks of our product's inception. We have iterated on the integration over the past year, improving our ability to diagnose performance (traces) and triage errors (a subset of logs). This Sentry integration overview is derived from our specific Node.js GraphQL server and React GraphQL client, but the takeaways can be applied to any system with GraphQL interactions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#graphql-server"&gt;
  &lt;/a&gt;
  GraphQL Server
&lt;/h2&gt;

&lt;p&gt;Sentry provides informative &lt;a href="https://docs.sentry.io/"&gt;guides&lt;/a&gt; for many platforms. In our server's case, we apply Apollo Server v2 as an &lt;a href="https://expressjs.com/"&gt;Express&lt;/a&gt; middleware; therefore, Sentry's &lt;a href="https://docs.sentry.io/platforms/node/guides/express/"&gt;Express Guide&lt;/a&gt; with request, tracing, and error handlers is a great starting point.&lt;/p&gt;

&lt;p&gt;As part of initialization, we configure &lt;a href="https://docs.sentry.io/platforms/node/guides/express/configuration/options/#tracing-options"&gt;&lt;code&gt;tracesSampleRate&lt;/code&gt;&lt;/a&gt; such that a sampling of traces count towards our quota. Additionally, we bind a git commit hash (exposed via Heroku's &lt;a href="https://devcenter.heroku.com/articles/dyno-metadata"&gt;Dyno Metadata&lt;/a&gt; feature) to the &lt;a href="https://docs.sentry.io/platforms/node/guides/express/configuration/releases/#bind-the-version"&gt;release version&lt;/a&gt;, enabling Sentry to monitor &lt;a href="https://docs.sentry.io/product/releases/health/"&gt;release health&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Sentry's Express-compatible tracing handler starts a transaction for every incoming request with a name &lt;a href="https://github.com/getsentry/sentry-javascript/blob/6.15.0/packages/node/src/handlers.ts#L108-L143"&gt;derived from&lt;/a&gt; the HTTP method and path. This works well for REST APIs, but GraphQL entities are not identified by URLs, and by default &lt;em&gt;all&lt;/em&gt; GraphQL requests will be identified by &lt;code&gt;POST /graphql&lt;/code&gt;. To achieve proper specificity, we instantiate Apollo Server with a &lt;a href="https://www.apollographql.com/docs/apollo-server/v2/integrations/plugins/"&gt;custom plugin&lt;/a&gt; that qualifies &lt;a href="https://docs.sentry.io/platforms/node/guides/express/enriching-events/transaction-name/"&gt;transaction names&lt;/a&gt; with the contextual GraphQL operation when Apollo receives a request.&lt;/p&gt;

&lt;p&gt;
  Apollo Server plugin responding to the &lt;code&gt;requestDidStart&lt;/code&gt; event
  &lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Sentry&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@sentry/node&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ApolloServerPlugin&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;apollo-server-plugin-base&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sentryPlugin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ApolloServerPlugin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;requestDidStart&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;operationName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;scope&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Sentry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getCurrentHub&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;getScope&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;transaction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;getTransaction&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// retrieve ongoing transaction&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// qualify transaction name&lt;/span&gt;
                &lt;span class="c1"&gt;// i.e. "POST /graphql" -&amp;gt; "POST /graphql: MyOperation"&lt;/span&gt;
                &lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;setTransactionName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;operationName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
                &lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;/p&gt;

&lt;p&gt;Similarly, GraphQL errors differ from conventional REST APIs. Exceptions thrown while executing a GraphQL operation are represented as an &lt;code&gt;errors&lt;/code&gt; response body field and will not inherently be captured by Sentry's Express-compatible error handler. We report these errors with an identified user and context by extending our Apollo Server plugin as described in &lt;a href="https://blog.sentry.io/2020/07/22/handling-graphql-errors-using-sentry#reporting-errors-to-sentry-with-apollo-server-nodejs-typescript"&gt;this Sentry blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;
  Extended Apollo Server plugin responding to the &lt;code&gt;didEncounterErrors&lt;/code&gt; event
  &lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Sentry&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@sentry/node&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ApolloError&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;apollo-server-express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ApolloServerPlugin&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;apollo-server-plugin-base&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sentryPlugin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ApolloServerPlugin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;requestDidStart&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;operationName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// qualify transaction name&lt;/span&gt;
            &lt;span class="c1"&gt;// ...&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;didEncounterErrors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;operation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// ignore unparsed operations&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

                &lt;span class="nx"&gt;Sentry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;withScope&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentUser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                            &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                            &lt;span class="c1"&gt;// ...&lt;/span&gt;
                        &lt;span class="p"&gt;});&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;

                    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;originalError&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nx"&gt;ApolloError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                            &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// ignore user-facing errors&lt;/span&gt;
                        &lt;span class="p"&gt;}&lt;/span&gt;

                        &lt;span class="nx"&gt;Sentry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;captureException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                            &lt;span class="na"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                                &lt;span class="na"&gt;graphqlOperation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;operation&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;operation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="na"&gt;graphqlOperationName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;operationName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="p"&gt;},&lt;/span&gt;
                            &lt;span class="na"&gt;contexts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                                &lt;span class="na"&gt;graphql&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                                    &lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                    &lt;span class="na"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                                        &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                        &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                        &lt;span class="mi"&gt;2&lt;/span&gt;
                                    &lt;span class="p"&gt;),&lt;/span&gt;
                                    &lt;span class="na"&gt;errorPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="p"&gt;},&lt;/span&gt;
                            &lt;span class="p"&gt;},&lt;/span&gt;
                        &lt;span class="p"&gt;});&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;});&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;/p&gt;

&lt;p&gt;Finally, to gracefully handle scenarios when Heroku restarts our application (i.e. when deploying a new version), we &lt;a href="https://docs.sentry.io/platforms/node/guides/express/configuration/draining/"&gt;drain&lt;/a&gt; pending Sentry events before &lt;a href="https://expressjs.com/en/advanced/healthcheck-graceful-shutdown.html#graceful-shutdown"&gt;closing&lt;/a&gt; the Express server.&lt;/p&gt;

&lt;p&gt;
  Draining events for a graceful shutdown
  &lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Sentry&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@sentry/node&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;SIGTERM&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;shutdown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Shutting down via &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Sentry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;HTTP server closed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#graphql-client"&gt;
  &lt;/a&gt;
  GraphQL Client
&lt;/h2&gt;

&lt;p&gt;Our React application configuration follows Sentry's &lt;a href="https://docs.sentry.io/platforms/javascript/guides/react/"&gt;React Guide&lt;/a&gt; with their sampled browser tracing integration configured with &lt;a href="https://docs.sentry.io/platforms/javascript/guides/react/configuration/integrations/react-router/"&gt;React Router instrumentation&lt;/a&gt;. Additionally, we bind a git commit hash to the &lt;a href="https://docs.sentry.io/platforms/javascript/guides/react/configuration/releases/#bind-the-version"&gt;release version&lt;/a&gt;, analogous to our Express application.&lt;/p&gt;

&lt;p&gt;Apollo Client v3 telemetry is partially instrumented by &lt;a href="https://github.com/DiederikvandenB/apollo-link-sentry"&gt;Apollo Link Sentry&lt;/a&gt;, an &lt;a href="https://www.apollographql.com/docs/react/api/link/introduction/"&gt;Apollo Link&lt;/a&gt; middleware that records GraphQL operations as useful &lt;a href="https://docs.sentry.io/platforms/javascript/guides/react/enriching-events/breadcrumbs/"&gt;breadcrumbs&lt;/a&gt; amongst other features. We intentionally disable their transaction and fingerprint setting as we found the global scope confusing in non-GraphQL operation contexts.&lt;/p&gt;

&lt;p&gt;
  Apollo Link Sentry configuration
  &lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;SentryLink&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;apollo-link-sentry&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sentryLink&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SentryLink&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;setTransaction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;setFingerprint&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;attachBreadcrumbs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;includeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;/p&gt;

&lt;p&gt;Complementing this library, an &lt;a href="https://www.apollographql.com/docs/react/api/link/apollo-link-error/"&gt;&lt;code&gt;onError&lt;/code&gt; link&lt;/a&gt; actually reports GraphQL and network errors to Sentry with an explicit transaction name and context. The error handler arguments are not actually JavaScript &lt;code&gt;Error&lt;/code&gt; objects; therefore, &lt;a href="https://docs.sentry.io/platforms/javascript/guides/react/usage/#capturing-messages"&gt;&lt;code&gt;Sentry.captureMessage&lt;/code&gt;&lt;/a&gt; is invoked to improve readability within Sentry Issues. GraphQL errors are captured with a more granular &lt;a href="https://docs.sentry.io/platforms/javascript/guides/react/usage/sdk-fingerprinting/"&gt;fingerprint&lt;/a&gt;, splitting Sentry events into groups by GraphQL operation name.&lt;/p&gt;

&lt;p&gt;
  &lt;code&gt;onError&lt;/code&gt; link implementation
  &lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;onError&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@apollo/client/link/error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Sentry&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@sentry/react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;errorLink&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;onError&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;operation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;graphQLErrors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;networkError&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;Sentry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;withScope&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setTransactionName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;operation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;operationName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;apolloGraphQLOperation&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;operationName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;operation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;operationName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;operation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;extensions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;operation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extensions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;

        &lt;span class="nx"&gt;graphQLErrors&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;Sentry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;captureMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Sentry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Severity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;fingerprint&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;{{ default }}&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;{{ transaction }}&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="na"&gt;contexts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="na"&gt;apolloGraphQLError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="na"&gt;extensions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extensions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;networkError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;Sentry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;captureMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;networkError&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Sentry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Severity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;contexts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="na"&gt;apolloNetworkError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;networkError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="na"&gt;extensions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;networkError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;extensions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;/p&gt;

&lt;p&gt;Capturing transactions and errors associated with GraphQL operations has enabled us to better understand the behavior of our applications. However, this value is only unlocked by surfacing the actionable subset of telemetry data in a way that is most effective for the team and process. As features change and software abstractions evolve, instrumentation must be tuned with it. Continuous attention to observability will empower the team to proactively identify issues, creating a robust feedback loop that informs future development.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Are you passionate about observable product development? &lt;a href="https://www.fieldguide.io/careers"&gt;We're hiring&lt;/a&gt; across engineering, product, and design!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>graphql</category>
      <category>sentry</category>
      <category>node</category>
      <category>react</category>
    </item>
    <item>
      <title>How to create an awesome slack approval workflow</title>
      <author>Kartik Grewal</author>
      <pubDate>Sat, 18 Dec 2021 23:29:44 +0000</pubDate>
      <link>https://dev.to/canonic/how-to-create-an-awesome-slack-approval-workflow-1gdg</link>
      <guid>https://dev.to/canonic/how-to-create-an-awesome-slack-approval-workflow-1gdg</guid>
      <description>&lt;p&gt;Slack is a very popular workplace place, to a point where now it’s become a verb — “&lt;strong&gt;Slack me if you need something!&lt;/strong&gt;” — and there’s good reason for it. During these pandemic times, it’s so much more than just a chat app. &lt;/p&gt;

&lt;p&gt;Today, we’ll explore how we can do even more with &lt;strong&gt;Slack Approvals&lt;/strong&gt;. We’ll bring in &lt;a href="https://canonic.dev/?utm_source=dev.to&amp;amp;utm_medium=organic_article&amp;amp;utm_campaign=30daysofcanonic_uc_3&amp;amp;utm_term=header_canonic&amp;amp;utm_content=day_20"&gt;Canonic&lt;/a&gt; and use the power of slack approvals to approve or disapprove our message. We want the ability that whenever a message is added to the database, its respective slack approval message is sent, based on the response, the same gets updated in the database.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-dive-in"&gt;
  &lt;/a&gt;
  Let’s dive in! 🚀
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Step 1: Create necessary slack app &amp;amp; generate tokens&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let’s start with getting all the slack requirements in place. We have to &lt;a href="https://api.slack.com/apps"&gt;create an app with Slack&lt;/a&gt; and generate its respective tokens.&lt;/p&gt;

&lt;p&gt;For this step, we’ll follow the slack guides linked with the respective text as they’ll be the best source to get all these requirements.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uRkory45--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w7tv7zmwvc1el1cne1gg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uRkory45--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w7tv7zmwvc1el1cne1gg.png" alt="Step 1" width="880" height="336"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2: Starting with a slack integration workflow&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Jump to Canonic and clone this &lt;a href="https://app.canonic.dev/projects/61be5cc3b6586d0026b16023/graph?utm_source=dev.to&amp;amp;utm_medium=organic_article&amp;amp;utm_campaign=30daysofcanonic_uc_3&amp;amp;utm_term=step2_sample&amp;amp;utm_content=day_20"&gt;sample project&lt;/a&gt; which already has slack integration added, or create one for yourself and move to the API section to manually add the slack integration for your &lt;code&gt;createMessage&lt;/code&gt; API.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9FAPbHR7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oqrouqqxq3s06axdz6kv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9FAPbHR7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oqrouqqxq3s06axdz6kv.png" alt="Step 2" width="880" height="260"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will be asked to authenticate and add in a token (the one that we got in step 1) Once authorized you should have a green tick to reflect that.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--44_aV6Qz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nfu9p11rex8cq23yqpaj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--44_aV6Qz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nfu9p11rex8cq23yqpaj.png" alt="Step 2" width="784" height="940"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3: Slack payload creation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now that we have our integration set up complete and attached to our &lt;code&gt;createMessage&lt;/code&gt; API. Whenever we trigger this API, an approval message with the trigger message should be sent to slack. &lt;/p&gt;

&lt;p&gt;For this, we need to &lt;strong&gt;add our payload to slack&lt;/strong&gt;. For using this feature, we’ll use a slightly different payload than we usually do for a simple chat message. Our payload should look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"New approval request"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"blocks"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"header"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"plain_text"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"New request"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"emoji"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"section"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"fields"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"mrkdwn"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;title&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"actions"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"elements"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"button"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"plain_text"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"emoji"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Approve"&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"style"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"primary"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"click_me_123"&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"button"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"plain_text"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"emoji"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Reject"&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"style"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"danger"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"click_me_123"&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, in place of &lt;code&gt;click_me_123&lt;/code&gt;, we’ll add the URL for the respective API to get triggered when someone approves or disapproves it. For that, we’ll need to build a custom API. Let’s do that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4: Create custom API for approving/disapproving messages&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We now create a custom API in Canonic to look for the query parameters and update the respective record. Create a new API by clicking on the &lt;code&gt;+&lt;/code&gt; icon against the &lt;code&gt;Endpoints&lt;/code&gt; tab.&lt;/p&gt;

&lt;p&gt;Next, add details regarding the API.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yfn7YJ-l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u2cjkmbsxvod6uba3wn4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yfn7YJ-l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u2cjkmbsxvod6uba3wn4.png" alt="Step 4" width="828" height="386"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Go to the Code tab and add the following code to find the id for the message and add in the approval or disapproval in the database. We use query parameters to fetch the details then do the processing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;endpoint&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;approved&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findOneAndUpdate&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;$set&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;approved&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;approved&lt;/span&gt; &lt;span class="p"&gt;}},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;upsert&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 5: Update back the message&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We deploy this project to get the API URL. Click on the top right corner saying &lt;code&gt;deploy&lt;/code&gt;, then go to the docs to get its URL.&lt;/p&gt;

&lt;p&gt;We replace &lt;code&gt;**click_me_123**&lt;/code&gt; to*&lt;em&gt;&lt;code&gt;https://messages.can.canonic.dev/api/messages/approvalornot?id=1234&amp;amp;approved=false&lt;/code&gt;&lt;/em&gt;*  in the danger button and replace the same with &lt;strong&gt;&lt;code&gt;https://messages.can.canonic.dev/api/messages/approvalornot?id=1234&amp;amp;approved=true&lt;/code&gt;.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Now whenever a user will approve or disapprove, the following URL will get triggered saving the approval of the message in the database. This can be used in place of any Micro-service which is built is to handle slack integration or become a slack server for that business.&lt;/p&gt;

&lt;p&gt;Hope this guide helps you make your day a little bit more productive!&lt;br&gt;
Check out the sample project &lt;a href="https://app.canonic.dev/projects/61be5cc3b6586d0026b16023/graph?utm_source=dev.to&amp;amp;utm_medium=organic_article&amp;amp;utm_campaign=30daysofcanonic_uc_3&amp;amp;utm_term=step5_here&amp;amp;utm_content=day_20"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Thank you for reading this guide. If you happen to create any of these integrations, please remember to mention us on social media or drop us a line on our discord channel.&lt;/p&gt;

&lt;p&gt;You can also check out our other guides &lt;a href="https://dev.to/canonic/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Join us on &lt;a href="https://discord.gg/9dyytsM"&gt;Discord&lt;/a&gt; to discuss or share with our community. Write to us for any support requests at &lt;a href="https://support@canonic.dev/"&gt;support@canonic.dev&lt;/a&gt;. Check out our &lt;a href="https://www.canonic.dev/30-days-of-canonic/?utm_source=dev.to&amp;amp;utm_medium=organic_article&amp;amp;utm_campaign=30daysofcanonic_uc_3&amp;amp;utm_term=conclusion_website&amp;amp;utm_content=day_20"&gt;website&lt;/a&gt; to know more about Canonic.&lt;/p&gt;

</description>
      <category>slack</category>
      <category>frontend</category>
      <category>tutorial</category>
      <category>productivity</category>
    </item>
    <item>
      <title>100 Languages Speedrun: Episode 28: TeX</title>
      <author>Tomasz Wegrzanowski</author>
      <pubDate>Sat, 18 Dec 2021 23:15:56 +0000</pubDate>
      <link>https://dev.to/taw/100-languages-speedrun-episode-28-tex-b1j</link>
      <guid>https://dev.to/taw/100-languages-speedrun-episode-28-tex-b1j</guid>
      <description>&lt;p&gt;TeX (pronounced like "tech") is a typesetting system, which is still used for writing research papers in Mathematics, Computer Science, Physics, and related disciplines, and pretty much nothing else. Everyone else moved on to either WYSIWYG editors like Word, or to HTML, or maybe Markdown or something like that. But it still survives in its niche.&lt;/p&gt;

&lt;p&gt;Like every typesetting system, it comes with its own embedded programming language, and that's what we're going to use.&lt;/p&gt;

&lt;p&gt;Technically TeX is just the original system, and we'll also be using a lot of *TeX things (MacTeX, LaTeX, pdftex etc.), but that's meaningless distinction, so I won't mention it anymore.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hello-world"&gt;
  &lt;/a&gt;
  Hello, World!
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tex"&gt;&lt;code&gt;&lt;span class="k"&gt;\documentclass&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;minimal&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;\newcommand\hello&lt;/span&gt;&lt;span class="na"&gt;[1]&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;Hello, #1!&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;\begin{document}&lt;/span&gt;
&lt;span class="k"&gt;\hello&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;World&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;\end{document}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which with &lt;code&gt;pdflatex hello.tex&lt;/code&gt; generates a PDF page with the text "Hello, World!" (only relevant part shown):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y83B-_9f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ytdimkqih32jwjupmi7h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y83B-_9f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ytdimkqih32jwjupmi7h.png" alt="Hello" width="296" height="116"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What's going on here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;\documentclass{minimal}&lt;/code&gt; defines the kind of document we're making - as we're not really interested in any typesetting, we can just use &lt;code&gt;minimal&lt;/code&gt;. The most common type for actual documents would be &lt;code&gt;article&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;then follows basically equivalent of HTML &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; part&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;\begin{document} ... \end{document}&lt;/code&gt; is like HTML &lt;code&gt;&amp;lt;body&amp;gt; ... &amp;lt;/body&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;We define &lt;code&gt;\hello&lt;/code&gt; command with &lt;code&gt;\newcommand\hello[1]{Hello, #1!}&lt;/code&gt; - the &lt;code&gt;[1]&lt;/code&gt; says it takes one argument, then in the function body &lt;code&gt;#1&lt;/code&gt; refers to that argument.&lt;/li&gt;
&lt;li&gt;We call the function with &lt;code&gt;\hello{World}&lt;/code&gt; - there are no parentheses here, we defined explicitly it takes exactly one argument.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#loop"&gt;
  &lt;/a&gt;
  Loop
&lt;/h3&gt;

&lt;p&gt;Let's try to setup a loop from 11 to 20. Obviously the system comes with lists already (numbered with &lt;code&gt;\begin{enumerate} \item A \item B \end{enumerate}&lt;/code&gt;, bulleted with &lt;code&gt;\begin{itemize} \item A \item B \end{itemize}&lt;/code&gt;, and all the other usual kinds), but we'll be doing a FizzBuzz shortly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tex"&gt;&lt;code&gt;&lt;span class="k"&gt;\documentclass&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;minimal&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\setlength&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\parindent&lt;/span&gt;&lt;span class="p"&gt;}{&lt;/span&gt;0pt&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\usepackage&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;ifthen&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;% \numberloop{A}{B} prints all numbers from A to B&lt;/span&gt;
&lt;span class="k"&gt;\newcommand\numberloop&lt;/span&gt;&lt;span class="na"&gt;[2]&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;\newcounter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;i&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;\setcounter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;i&lt;span class="p"&gt;}{&lt;/span&gt;#1&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;\whiledo&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\not&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\value&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;i&lt;span class="p"&gt;}&lt;/span&gt;&amp;gt;#2&lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;\thei&lt;/span&gt;
      &lt;span class="k"&gt;\ifthenelse&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\equal&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;#2&lt;span class="p"&gt;}{&lt;/span&gt;&lt;span class="k"&gt;\thei&lt;/span&gt;&lt;span class="p"&gt;}}{&lt;/span&gt;.&lt;span class="p"&gt;}{&lt;/span&gt;,&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;\stepcounter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;i&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;\begin{document}&lt;/span&gt;
&lt;span class="k"&gt;\numberloop&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;10&lt;span class="p"&gt;}{&lt;/span&gt;100&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;\end{document}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which generates this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CDLhGJ2l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ra56r78r6m709lflqngi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CDLhGJ2l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ra56r78r6m709lflqngi.png" alt="Loop" width="880" height="131"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What's going on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;TeX has annoying default of having paragraph indent, we need to get rid of it with &lt;code&gt;\setlength{\parindent}{0pt}&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;we import a package called &lt;code&gt;ifthen&lt;/code&gt; with &lt;code&gt;\usepackage{ifthen}&lt;/code&gt; - it contains some control structures &lt;code&gt;\ifthenelse&lt;/code&gt; and &lt;code&gt;\whiledo&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;%&lt;/code&gt; indicates line comments&lt;/li&gt;
&lt;li&gt;we define command &lt;code&gt;\numberloop&lt;/code&gt; that takes two arguments&lt;/li&gt;
&lt;li&gt;inside it we define integer variable ("counter") &lt;code&gt;i&lt;/code&gt; and set it to &lt;code&gt;#1&lt;/code&gt; (first passed argument)&lt;/li&gt;
&lt;li&gt;there's nothing like &lt;code&gt;... &amp;lt;= ...&lt;/code&gt; in a loop, so loop condition must be &lt;code&gt;\not{... &amp;gt; ...}&lt;/code&gt; (or +1 one of the sides)&lt;/li&gt;
&lt;li&gt;inside the loop body, &lt;code&gt;\thei&lt;/code&gt; means "current value of &lt;code&gt;i&lt;/code&gt; counter"&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;\ifthenelse{\equal{#2}{\thei}}{.}{,}&lt;/code&gt; prints appropriate separator - &lt;code&gt;,&lt;/code&gt; normally, but &lt;code&gt;.&lt;/code&gt; in the final iteration.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;\stepcounter{i}&lt;/code&gt; increases counter &lt;code&gt;i&lt;/code&gt; by &lt;code&gt;1&lt;/code&gt; each time&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#fizzbuzz"&gt;
  &lt;/a&gt;
  FizzBuzz
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tex"&gt;&lt;code&gt;&lt;span class="k"&gt;\documentclass&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;minimal&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\setlength&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\parindent&lt;/span&gt;&lt;span class="p"&gt;}{&lt;/span&gt;0pt&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\usepackage&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;ifthen&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\usepackage&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;intcalc&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\usepackage&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;multicol&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;% \fizzbuzz{N} prints Fizz, Buzz, FizzBuzz, or N, according to the usual rules&lt;/span&gt;
&lt;span class="k"&gt;\newcommand\fizzbuzz&lt;/span&gt;&lt;span class="na"&gt;[1]&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;\ifthenelse&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\equal&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\intcalcMod&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;#1&lt;span class="p"&gt;}{&lt;/span&gt;15&lt;span class="p"&gt;}}{&lt;/span&gt;0&lt;span class="p"&gt;}}{&lt;/span&gt;FizzBuzz&lt;span class="p"&gt;}{&lt;/span&gt;
    &lt;span class="k"&gt;\ifthenelse&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\equal&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\intcalcMod&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;#1&lt;span class="p"&gt;}{&lt;/span&gt;5&lt;span class="p"&gt;}}{&lt;/span&gt;0&lt;span class="p"&gt;}}{&lt;/span&gt;Buzz&lt;span class="p"&gt;}{&lt;/span&gt;
      &lt;span class="k"&gt;\ifthenelse&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\equal&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\intcalcMod&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;#1&lt;span class="p"&gt;}{&lt;/span&gt;3&lt;span class="p"&gt;}}{&lt;/span&gt;0&lt;span class="p"&gt;}}{&lt;/span&gt;Fizz&lt;span class="p"&gt;}{&lt;/span&gt;#1&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;% \fizzbuzzloop{A}{B} prints all FizzBuzz entries from A to B&lt;/span&gt;
&lt;span class="k"&gt;\newcommand\fizzbuzzloop&lt;/span&gt;&lt;span class="na"&gt;[2]&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;\newcounter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;i&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;\setcounter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;i&lt;span class="p"&gt;}{&lt;/span&gt;#1&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;\whiledo&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\not&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\value&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;i&lt;span class="p"&gt;}&lt;/span&gt;&amp;gt;#2&lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;\fizzbuzz&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\thei&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;\linebreak&lt;/span&gt;
      &lt;span class="k"&gt;\stepcounter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;i&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;\begin{document}&lt;/span&gt;
&lt;span class="nt"&gt;\begin{multicols}&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;4&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\fizzbuzzloop&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;1&lt;span class="p"&gt;}{&lt;/span&gt;100&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;\end{multicols}&lt;/span&gt;
&lt;span class="nt"&gt;\end{document}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which generates this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mid7uFm1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/83eerdqg7iwoxyzgucdg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mid7uFm1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/83eerdqg7iwoxyzgucdg.png" alt="FizzBuzz" width="880" height="700"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A few things are going on here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;we import package for integer math &lt;code&gt;\usepackage{intcalc}&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;we import package for multi-column layout &lt;code&gt;\usepackage{multicol}&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;\fizzbuzz{N}&lt;/code&gt; does the FizzBuzz for one number&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;\fizzbuzzloop{A}{B}&lt;/code&gt; does the FizzBuzz for all numbers from A to B, with line breaks in between&lt;/li&gt;
&lt;li&gt;we wrap it all in a 4-column layout so the screenshot looks better&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#fibonacci"&gt;
  &lt;/a&gt;
  Fibonacci
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tex"&gt;&lt;code&gt;&lt;span class="k"&gt;\documentclass&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;minimal&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\setlength&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\parindent&lt;/span&gt;&lt;span class="p"&gt;}{&lt;/span&gt;0pt&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\usepackage&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;ifthen&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\usepackage&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;intcalc&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;% \fib{N} returns the Nth Fibonacci number&lt;/span&gt;
&lt;span class="k"&gt;\newcounter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;j&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\newcounter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;fiba&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\newcounter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;fibb&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\newcounter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;fibc&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\newcommand\fib&lt;/span&gt;&lt;span class="na"&gt;[1]&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;\setcounter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;j&lt;span class="p"&gt;}{&lt;/span&gt;1&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;\setcounter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;fiba&lt;span class="p"&gt;}{&lt;/span&gt;1&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;\setcounter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;fibb&lt;span class="p"&gt;}{&lt;/span&gt;1&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;\whiledo&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\value&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;j&lt;span class="p"&gt;}&lt;/span&gt; &amp;lt; #1&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;\setcounter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;fibc&lt;span class="p"&gt;}{&lt;/span&gt;&lt;span class="k"&gt;\intcalcAdd&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\thefiba&lt;/span&gt;&lt;span class="p"&gt;}{&lt;/span&gt;&lt;span class="k"&gt;\thefibb&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="k"&gt;\setcounter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;fiba&lt;span class="p"&gt;}{&lt;/span&gt;&lt;span class="k"&gt;\thefibb&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;\setcounter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;fibb&lt;span class="p"&gt;}{&lt;/span&gt;&lt;span class="k"&gt;\thefibc&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;\stepcounter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;j&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;\thefiba&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;% \fibloop{A}{B} prints all Fibonacci numbers from A to B&lt;/span&gt;
&lt;span class="k"&gt;\newcommand\fibloop&lt;/span&gt;&lt;span class="na"&gt;[2]&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;\newcounter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;i&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;\setcounter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;i&lt;span class="p"&gt;}{&lt;/span&gt;#1&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;\whiledo&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\not&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\value&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;i&lt;span class="p"&gt;}&lt;/span&gt;&amp;gt;#2&lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;\fib&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\thei&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;\linebreak&lt;/span&gt;
      &lt;span class="k"&gt;\stepcounter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;i&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;\begin{document}&lt;/span&gt;
&lt;span class="k"&gt;\raggedright&lt;/span&gt;
&lt;span class="k"&gt;\fibloop&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;1&lt;span class="p"&gt;}{&lt;/span&gt;20&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;\end{document}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which generates this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KW63RnVf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7imy1idwofui7ktblhs2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KW63RnVf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7imy1idwofui7ktblhs2.png" alt="Fib" width="130" height="914"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TeX has serious problems with recursion, so we do a loop calculation instead. Oh and while previous code might have implied that &lt;code&gt;\newcounter&lt;/code&gt; variables are local - they are all completely global, except for &lt;code&gt;#1&lt;/code&gt; etc. arguments.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#should-you-use-tex"&gt;
  &lt;/a&gt;
  Should you use TeX?
&lt;/h3&gt;

&lt;p&gt;Only if you're forced to by your journal. Otherwise no, it's completely obsolete.&lt;/p&gt;

&lt;p&gt;Historically its primary strength was math. In particular, supporting made-up mathematical notation each researcher would come up with (the normal notation was supported by everything anyway). But nowadays, other systems can do that too. For everything else, TeX was never good.&lt;/p&gt;

&lt;p&gt;TeX also seems to largely abandoning its existing programming language and &lt;a href="https://dev.to/taw/100-languages-speedrun-episode-04-lua-1ofm"&gt;embedding much saner Lua instead&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Even as an esoteric programming language, TeX's programming language doesn't really do anything too interesting. If you want a fun challenge, &lt;a href="https://dev.to/taw/100-languages-speedrun-episode-24-postscript-4i2k"&gt;writing Postscript is likely to provide a lot better one&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/taw/100-languages-speedrun"&gt;All code examples for the series will be in this repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/taw/100-languages-speedrun/tree/master/episode-28-tex"&gt;Code for the TeX episode is available here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>tex</category>
      <category>latex</category>
    </item>
    <item>
      <title>Creating a WordPress blog using AWS Lightsail and Cloudflare</title>
      <author>Oksana Horlock</author>
      <pubDate>Sat, 18 Dec 2021 22:10:59 +0000</pubDate>
      <link>https://dev.to/aws-builders/creating-a-wordpress-blog-using-aws-lightsail-and-cloudflare-22mk</link>
      <guid>https://dev.to/aws-builders/creating-a-wordpress-blog-using-aws-lightsail-and-cloudflare-22mk</guid>
      <description>&lt;p&gt;I started my own blog a little more than one year ago. I  had wanted to have my own blog for a while and had a lot of ideas about how I wanted to create it and experiment with different tools and services. However, since having a child, the time I have for learning and exploring has become a really precious commodity. So I knew that the sooner I launched the website, the better. The final little nudge was reading Steve Gordon’s post about blogging which you can find &lt;a href="https://www.stevejgordon.co.uk/become-a-better-developer-through-blogging-part-1"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;This post describes how I set up a simple site for my blog. Time constraint has been the main reason why I chose using WordPress and AWS Lightsail. I was quite surprised by how easy and quick it was to set everything up. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Prerequisites:&lt;/strong&gt; AWS account&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Creating a server&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I followed this blog post up to part 6: &lt;a href="https://aws.amazon.com/getting-started/hands-on/launch-a-wordpress-website/"&gt;https://aws.amazon.com/getting-started/hands-on/launch-a-wordpress-website/&lt;/a&gt;. to create a WordPress instance and attach a static IP to it. It is very easy and clear. FYI, Bitnami is an application stack that lets you host a WordPress website. So when you select the WordPress blueprint in AWS Lightsail, you are installing all the applications necessary to run WordPress on your server.&lt;/p&gt;

&lt;p&gt;I had bought a template to use, so after logging in to WordPress admin dashboard, I navigated to Appearance-&amp;gt;Themes-&amp;gt;Add new -&amp;gt;Upload, and uploaded my theme. The website was up on the internet and could be navigated to on the Internet by using its IP address! Wasn’t it supereasy?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Registering a domain name/creating DNS records&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I didn’t have a domain name, so I registered oxiehorlock.com using AWS Route 53, which is a Domain Name Service. Before you register a domain, you should check the pricing here: &lt;a href="https://d32ze2gidvkk54.cloudfront.net/Amazon_Route_53_Domain_Registration_Pricing_20140731.pdf"&gt;https://d32ze2gidvkk54.cloudfront.net/Amazon_Route_53_Domain_Registration_Pricing_20140731.pdf&lt;/a&gt;.  It varies depending on the top-level domain (the last part of the url, for example, .com or .org.uk). When registering a domain, a public hosted zone is created for you. This hosted zone has records about routing Internet traffic for your domain/subdomains. Two records will be created by default:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;type NS record – a nameserver record; it tells the Internet where to go to find out a domain’s IP address. There are several NS values – this is to ensure that if one name server is not available, the queries can go to another one.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;type SOA – a Start of Authority record; it contains some DNS information about the hosted zone, such as name name server that created the record, a serial number that you change when you can increment when you update the zone, retry interval and so on (info on record types AWS supports is &lt;a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/ResourceRecordTypes.html"&gt;here&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Following that I created an A record in my hosted zone. An A record is the most fundamental record and it routes traffic to a resource such as a web server. I mapped my brand spanking new domain name to the static IP of my WordPress instance.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zvtVeci1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nyxon2x0cucldzh27bh9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zvtVeci1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nyxon2x0cucldzh27bh9.png" alt="Image description" width="880" height="605"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After that oxiehorlock.com was navigable on the Internet.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Making the site secure&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First of all, I restricted access for port 22 to my own IP address (so that nobody else could SSH into the instance). I also didn’t want anyone to be able to access the empty blog so I restricted HTTP/HTTPS access to my own IP address too. These rules can be changed using the Networking tab of the Lightsail Console:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zAhx5v0H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kuyrs6f7lxjej24tgy07.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zAhx5v0H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kuyrs6f7lxjej24tgy07.png" alt="Image description" width="880" height="509"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I followed these tutorials to create an SSL certificate, firewall rules and securing the site using Cloudflare:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-using-lets-encrypt-certificates-with-wordpress#link-the-lets-encrypt-certificate-files-in-the-apache-directory-wordpress"&gt;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-using-lets-encrypt-certificates-with-wordpress#link-the-lets-encrypt-certificate-files-in-the-apache-directory-wordpress&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dannys.cloud/hardening-a-wordpress-website-on-aws-lightsail"&gt;https://dannys.cloud/hardening-a-wordpress-website-on-aws-lightsail&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Useful tip:&lt;/em&gt; since the instance runs on Linux, I had to use CLI. Since I didn't have a lot of experience with it at the point I was doing the setup, it was slightly tricky to edit and save files. The easiest way for me was to run &lt;em&gt;sudo nano path/to/file&lt;/em&gt; command, edit the file, type &lt;em&gt;Ctrl+X&lt;/em&gt;, and then Y or N, or &lt;em&gt;Ctrl+C&lt;/em&gt; to Cancel.&lt;/p&gt;

&lt;p&gt;I also removed Bitnami banner from the bottom right hand corner of the site pages by following the steps from this guide: &lt;a href="https://docs.bitnami.com/aws/how-to/bitnami-remove-banner/"&gt;https://docs.bitnami.com/aws/how-to/bitnami-remove-banner/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Although there is no need to change your DNS from Route53 to Cloudflare, after some time I did it for the sake of experiment, since I had not had much experience with anything to do with DNS before. &lt;br&gt;
To be able to use Cloudflare for DNS management, AWS name servers for the NS record in your hosted zone need to be changed to Cloudflare name servers. You would think that you would just go to the hosted zone, select the NS record from the list, and edit it, right? However, after waiting for a couple of days for the record to be updated, I started investigating what was wrong. It turned out the records needed to be changed from the Registered domains page:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4BPFpo5W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zlg3v85n1ejgpzki0az5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4BPFpo5W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zlg3v85n1ejgpzki0az5.png" alt="Image description" width="880" height="274"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From the moment you change your DNS provider, you will need to put all the DNS records there.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Costs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The pricing for deploying a WordPress on AWS Lightsail in the way that I did comprises:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;domain registration cost ($12)&lt;/li&gt;
&lt;li&gt;a monthly instance plan ($3.50)&lt;/li&gt;
&lt;li&gt;half a dollar per hosted zone per month&lt;/li&gt;
&lt;li&gt;DNS queries less than half a dollar per 1 000 000 000 queries (this will also include you using the site, for example amending the theme).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I sincerely hope my experience will help somebody out there to make deploying a WordPress website on AWS Lightsail a plan sailing.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>awscommunity</category>
      <category>lightsail</category>
    </item>
  </channel>
</rss>
