<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>The History of the Cloud with Jeffery Meyerson &amp;	Kelsey Hightower</title>
      <author>Ben Halpern</author>
      <pubDate>Wed, 23 Jun 2021 15:53:59 +0000</pubDate>
      <link>https://dev.to/devteam/the-history-of-the-cloud-with-jeffery-meyerson-kelsey-hightower-91a</link>
      <guid>https://dev.to/devteam/the-history-of-the-cloud-with-jeffery-meyerson-kelsey-hightower-91a</guid>
      <description>&lt;p&gt;This week, I'm joined by my friend &lt;a href="http://twitter.com/vaidehijoshi"&gt;Vaidehi Joshi&lt;/a&gt;, software engineer, creator of the Base.cs blog series, and co-host of the Base.cs podcast. &lt;/p&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/vaidehijoshi"&gt;@vaidehijoshi&lt;/a&gt;
 joins me to catch up with &lt;a href="https://twitter.com/kelseyhightower"&gt;Kelsey Hightower&lt;/a&gt;, staff developer advocate for the Google Cloud Platform, and &lt;a href="https://dev.to/software_daily"&gt;Jefferey Meyerson&lt;/a&gt;, founder of Software Daily and the host of the &lt;a href="https://dev.to/sedaily"&gt;Software Engineering Daily podcast&lt;/a&gt;, as we delve into the history of the Cloud. &lt;/p&gt;

&lt;p&gt;From the origins of AWS (for better or worse) to the gravitas of Microsoft, we discuss one of my favourite topics: culture, the birth of DevOps, and why Kelsey learned JavaScript.&lt;/p&gt;


&lt;div class="podcastliquidtag"&gt;
  &lt;div class="podcastliquidtag__info"&gt;
    &lt;a href="/devdiscuss/s5-e7-the-history-of-the-cloud"&gt;
      &lt;h1 class="podcastliquidtag__info__episodetitle"&gt;S5:E7 - The History of the Cloud&lt;/h1&gt;
    &lt;/a&gt;
    &lt;a href="/devdiscuss"&gt;
      &lt;h2 class="podcastliquidtag__info__podcasttitle"&gt;
        DevDiscuss ¬†

      &lt;/h2&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div id="record-s5-e7-the-history-of-the-cloud" class="podcastliquidtag__record"&gt;
    &lt;img class="button play-butt" id="play-butt-s5-e7-the-history-of-the-cloud" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png" alt="play"&gt;
    &lt;img class="button pause-butt" id="pause-butt-s5-e7-the-history-of-the-cloud" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png" alt="pause"&gt;
    &lt;img class="podcastliquidtag__podcastimage" id="podcastimage-s5-e7-the-history-of-the-cloud" alt="DevDiscuss" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZtvK04RF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j-SdIkjZ--/c_fill%2Cf_auto%2Cfl_progressive%2Cq_auto/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/235/08786d8b-7ef4-4c00-bc40-f4b3cbca5834.jpg"&gt;
  &lt;/div&gt;

  &lt;div class="hidden-audio" id="hidden-audio-s5-e7-the-history-of-the-cloud"&gt;
  
    
    Your browser does not support the audio element.
  
  &lt;div id="progressBar" class="audio-player-display"&gt;
    &lt;a href="/devdiscuss/s5-e7-the-history-of-the-cloud"&gt;
      &lt;img id="episode-profile-image" alt="S5:E7 - The History of the Cloud" width="420" height="420" src="https://res.cloudinary.com/practicaldev/image/fetch/s--zTELFWpP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--otY2jCJh--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_420/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/235/08786d8b-7ef4-4c00-bc40-f4b3cbca5834.jpg"&gt;
      &lt;img id="animated-bars" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZzrPEFmt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev.to/assets/animated-bars-4e8c57c8b58285fcf7d123680ad8af034cd5cd43b4d9209fe3aab49d1e9d77b3.gif" alt="animated volume bars"&gt;
    &lt;/a&gt;
    &lt;span id="barPlayPause"&gt;
      &lt;img class="butt play-butt" alt="play" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png"&gt;
      &lt;img class="butt pause-butt" alt="pause" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png"&gt;
    &lt;/span&gt;
    &lt;span id="volume"&gt;
      &lt;span id="volumeindicator" class="volume-icon-wrapper showing"&gt;
        &lt;span id="volbutt"&gt;
          &lt;img alt="volume" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vTou7JP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-cd20707230ae3fc117b02de53c72af742cf7d666007e16e12f7ac11ebd8130a7.png"&gt;
        &lt;/span&gt;
        &lt;span class="range-wrapper"&gt;
          
        &lt;/span&gt;
      &lt;/span&gt;
      &lt;span id="mutebutt" class="volume-icon-wrapper hidden"&gt;
        &lt;img alt="volume-mute" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--OX5NjT0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-mute-8f08ec668105565af8f8394eb18ab63acb386adbe0703afe3748eca8f2ecbf3b.png"&gt;
      &lt;/span&gt;
      &lt;span class="speed" id="speed"&gt;1x&lt;/span&gt;
    &lt;/span&gt;
    &lt;span class="buffer-wrapper" id="bufferwrapper"&gt;
      &lt;span id="buffer"&gt;&lt;/span&gt;
      &lt;span id="progress"&gt;&lt;/span&gt;
      &lt;span id="time"&gt;initializing...&lt;/span&gt;
      &lt;span id="closebutt"&gt;√ó&lt;/span&gt;
    &lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#our-guests-this-week-were"&gt;
  &lt;/a&gt;
  Our guests this week were...
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://devpods.herokuapp.com/profiles/6"&gt;Kelsey Hightower&lt;/a&gt; is a staff developer advocate at Google. Find Kelsey on Twitter &lt;a href="http://twitter.com/kelseyhightower"&gt;@kelseyhightower&lt;/a&gt; and GitHub &lt;a href="http://github.com/kelseyhightower"&gt;kelseyhightower&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://devpods.herokuapp.com/profiles/217"&gt;Jefferey Meyerson&lt;/a&gt; is the founder of Software Daily and the host of the Software Engineering Daily podcast. Find Jeffrey on Twitter &lt;a href="http://twitter.com/@the_prion"&gt;@the_prion&lt;/a&gt; and GitHub &lt;a href="http://github.com/crablar"&gt;crablar&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tune into S5E7 of DevDiscuss for more answers to the eternal question: where do clouds come from?&lt;/p&gt;




&lt;p&gt;&lt;em&gt;You can &lt;a href="//dev.to/devdiscuss"&gt;follow DevDiscuss&lt;/a&gt; to get episode notifications and listen right in your feed&lt;/em&gt; ‚Äî or subscribe on your platform of choice! Plus, if you leave us a review, we'll send you a free pack of thank-you stickers. Details &lt;a href="https://airtable.com/shr8oKAIMZgdYnBxx"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quick-listening-links"&gt;
  &lt;/a&gt;
  Quick Listening Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://podcasts.apple.com/us/podcast/s5-e7-the-history-of-the-cloud/id1513053883?i=1000526573975"&gt;Apple Podcasts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://open.spotify.com/episode/5sQF2ySnFaLPEnZWo78kq3"&gt;Spotify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://podcasts.google.com/feed/aHR0cHM6Ly9mZWVkcy5kZXZwb2RzLmRldi9kZXZkaXNjdXNzX3BvZGNhc3QueG1s/episode/aHR0cHM6Ly9kZXZwb2RzLmRldi9wb2RjYXN0cy9kZXZkaXNjdXNzLzQw?sa=X&amp;amp;ved=0CAQQkfYCahcKEwjQhrim0a3xAhUAAAAAHQAAAAAQAg"&gt;Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.listennotes.com/podcasts/devdiscuss/s5e6-home-automation-nerd-out-dHfmCZM-nK6/"&gt;Listen Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tunein.com/podcasts/Technology-Podcasts/DevDiscuss-p1324596/?topicId=163957839"&gt;TuneIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://feeds.codenewbie.org/devnews_podcast.xml"&gt;RSS Feed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://devpods.herokuapp.com/podcasts/devdiscuss/episodes/172"&gt;DEV Pods Site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;em&gt;Acknowledgements&lt;/em&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a class="mentioned-user" href="https://dev.to/levisharpe"&gt;@levisharpe&lt;/a&gt;
 for producing &amp;amp; mixing the show&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Our season five sponsors: &lt;a href="//cockroachlabs.com/devdiscuss"&gt;CockroachDB&lt;/a&gt;, &lt;a href="https://www.cloudways.com/en/?id=893892"&gt;Cloudways&lt;/a&gt;, &amp;amp; &lt;a href="https://rudderstack.com/?utm_source=devto&amp;amp;utm_medium=podcast&amp;amp;utm_campaign=CMPGN_3_PS&amp;amp;utm_content=None&amp;amp;utm_term=%7Bkeyword%7D&amp;amp;raid=6dbc05eeb293b421f68d02ce12648240"&gt;Rudderstack&lt;/a&gt;!&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#"&gt;
  &lt;/a&gt;
  üó£Ô∏èüó£Ô∏èüó£Ô∏è
&lt;/h1&gt;

</description>
      <category>discuss</category>
      <category>podcast</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Recursion explained üéâ</title>
      <author>Ben Matt, Jr.</author>
      <pubDate>Wed, 23 Jun 2021 15:12:35 +0000</pubDate>
      <link>https://dev.to/jrmatanda/recursion-explained-1d45</link>
      <guid>https://dev.to/jrmatanda/recursion-explained-1d45</guid>
      <description>&lt;p&gt;In this article we will break down all the concept you need to know before saying that you fully understand recursion. The goal is to talk about those concepts so that you can come up with your own definition of what recursion is üòã.&lt;/p&gt;

&lt;p&gt;Definition : Recursion is mostly described as a process that calls it self.&lt;br&gt;
It can also be described by a function that calls it self.&lt;/p&gt;

&lt;p&gt;Call Stack : In case we're calling a function or more multiple times in a program, &lt;br&gt;
their is a thing called "Call Stack" that is an actual stack in witch functions are placed &lt;br&gt;
on top of each other in terms of execution,&lt;br&gt;
so the call stack can hold informations about all the functions that are placed on it.&lt;/p&gt;

&lt;p&gt;So when using a recursive function what happen is we keep pushing the same function onto the "Call Stack".&lt;/p&gt;

&lt;p&gt;What's the main structure of a recursive function ? :&lt;/p&gt;

&lt;p&gt;A recursive function has two essential parts wich are the base case and a different input (or function argument). &lt;/p&gt;

&lt;p&gt;1) The base case :&lt;br&gt;
For the base case you can, think of it as a condition that causes the function to stop calling it self, in other words it stops the recursion.&lt;/p&gt;

&lt;p&gt;2) Different input : Everytime a recursive function is being called, we need to make sure that the input aren't the same.&lt;/p&gt;

&lt;p&gt;If one of the two or both are missing the process can resolve in what called a&lt;br&gt;
"Stack overflow" forcing you to spend hours looking for answers on stackoverflow.com üòâ.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>algorithms</category>
      <category>react</category>
      <category>reactnative</category>
    </item>
    <item>
      <title>6 ways to configure Webpack</title>
      <author>Benny Neugebauer</author>
      <pubDate>Wed, 23 Jun 2021 15:04:47 +0000</pubDate>
      <link>https://dev.to/typescripttv/6-ways-to-configure-webpack-5a33</link>
      <guid>https://dev.to/typescripttv/6-ways-to-configure-webpack-5a33</guid>
      <description>&lt;p&gt;&lt;a href="https://webpack.js.org/"&gt;Webpack&lt;/a&gt; is a build tool to make code, which was not primarily written for execution in browsers, executable in web browsers. With special plugins, webpack can manage many types of code, for example JavaScript, TypeScript, and Rust-generated WebAssembly.&lt;/p&gt;

&lt;p&gt;There are webpack plugins to also compile, minify, shim, chunk, and bundle code. However, webpack was not designed to execute tasks such as linting, building, or testing your app. For this purpose, there are task runners such as &lt;a href="https://gruntjs.com/"&gt;Grunt&lt;/a&gt;, &lt;a href="https://gulpjs.com/"&gt;Gulp&lt;/a&gt; or &lt;a href="https://docs.npmjs.com/cli/v7/commands/npx"&gt;npx&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In order to manage the functionality of webpack, it must be configured. Here are six different ways, in which webpack's configuration can be written.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-zero-config"&gt;
  &lt;/a&gt;
  1. Zero Config
&lt;/h2&gt;

&lt;p&gt;As of webpack version 4, you are not required to specify a configuration. By default, webpack assumes that your code starts at &lt;code&gt;src/index.js&lt;/code&gt; and will be bundled to &lt;code&gt;dist/main.js&lt;/code&gt;. This is very convenient and promotes &lt;a href="https://en.wikipedia.org/wiki/Convention_over_configuration"&gt;convention over configuration&lt;/a&gt; but it does not use webpack's full potential.&lt;/p&gt;

&lt;p&gt;Without a configuration, webpack does not know whether code should be compressed for faster execution or bundled with source maps for better tracking of errors. Webpack expresses its confusion with the following warning:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;WARNING in configuration&lt;/p&gt;

&lt;p&gt;The 'mode' option has not been set, webpack will fallback to 'production' for this value.&lt;/p&gt;

&lt;p&gt;Set 'mode' option to 'development' or 'production' to enable defaults for each environment.&lt;/p&gt;

&lt;p&gt;You can also set it to 'none' to disable any default behavior. Learn more: &lt;a href="https://webpack.js.org/configuration/mode/"&gt;https://webpack.js.org/configuration/mode/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's have a look at options to tell webpack how it should be configured.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-command-line-interface"&gt;
  &lt;/a&gt;
  2. Command Line Interface
&lt;/h2&gt;

&lt;p&gt;To see all available commands and options to configure webpack from the command line interface, you can run &lt;code&gt;webpack --help&lt;/code&gt;. This command will show you a list of arguments and how to use them. The following execution mimics the default (zero config) behaviour of webpack:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;webpack &lt;span class="nt"&gt;--entry&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;./src/index.js &lt;span class="nt"&gt;--output-path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;./dist &lt;span class="nt"&gt;--output-filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;main.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, CLI configurations can become quite long. In order to minimize the writing effort, there is also a shorthand version of the above command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;webpack ./src/index.js &lt;span class="nt"&gt;-o&lt;/span&gt; ./dist
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The simplified notation is at the expense of comprehensibility, which is why we will look at configuration files in the next step.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-commonjs-configuration-file"&gt;
  &lt;/a&gt;
  3. CommonJS Configuration File
&lt;/h2&gt;

&lt;p&gt;Webpack can be instructed to read in a configuration file. By default, a file named &lt;code&gt;webpack.config.js&lt;/code&gt; is being used. You can create it by using the &lt;code&gt;npx webpack init&lt;/code&gt; command or by writing it yourself:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;webpack.config.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src/index.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;development&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;module&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;exclude&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;node_modules&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.(&lt;/span&gt;&lt;span class="sr"&gt;js|jsx&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;$/i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;babel-loader&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dist&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The configuration uses the CommonJS module syntax with &lt;code&gt;require&lt;/code&gt; and &lt;code&gt;module.exports&lt;/code&gt;. Make sure that your &lt;code&gt;package.json&lt;/code&gt; does not define &lt;code&gt;"type": "module"&lt;/code&gt;, otherwise you will receive the following error:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[webpack-cli] ReferenceError: require is not defined&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The configuration file should also be in the root of your project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-esm-configuration-file"&gt;
  &lt;/a&gt;
  4. ESM Configuration File
&lt;/h2&gt;

&lt;p&gt;If your &lt;code&gt;package.json&lt;/code&gt; file specifies &lt;code&gt;"type": "module"&lt;/code&gt; and you want to make use of ECMAScript modules, then you can also modernize your webpack configuration:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;webpack.config.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src/index.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;development&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;module&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;exclude&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;node_modules&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.(&lt;/span&gt;&lt;span class="sr"&gt;js|jsx&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;$/i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;babel-loader&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./dist&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#5-typescript-configuration-file"&gt;
  &lt;/a&gt;
  5. TypeScript Configuration File
&lt;/h2&gt;

&lt;p&gt;For those of you who like to work with TypeScript, webpack offers the possibility to use a configuration file written in TypeScript. &lt;/p&gt;

&lt;p&gt;Webpack v5 already ships with TypeScript definitions, so you don't have to install &lt;a href="https://www.npmjs.com/package/@types/webpack"&gt;@types/webpack&lt;/a&gt; but you need to install &lt;a href="https://www.npmjs.com/package/typescript"&gt;typescript&lt;/a&gt;, &lt;a href="https://www.npmjs.com/package/ts-node"&gt;ts-node&lt;/a&gt; and &lt;a href="https://www.npmjs.com/package/@types/node"&gt;@types/node&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Because the extension &lt;code&gt;.ts&lt;/code&gt; does not correspond to the standard &lt;code&gt;.js&lt;/code&gt; extension, webpack has to be informed about this via the &lt;code&gt;--config&lt;/code&gt; argument:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;webpack &lt;span class="nt"&gt;--config&lt;/span&gt; webpack.config.ts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You also have to make sure that the test patterns of your "rules" and your "resolve" definitions include the TypeScript extension:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;webpack.config.ts&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Configuration&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;webpack&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Configuration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src/index.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;development&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;module&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;exclude&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;node_modules&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.[&lt;/span&gt;&lt;span class="sr"&gt;tj&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;sx&lt;/span&gt;&lt;span class="se"&gt;?&lt;/span&gt;&lt;span class="sr"&gt;$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;babel-loader&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./dist&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
  &lt;span class="na"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;extensions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.jsx&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.ts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.tsx&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;‚òùÔ∏è Because the exemplary webpack configuration loads &lt;a href="https://babeljs.io/"&gt;Babel&lt;/a&gt;, we can still point to a JavaScript entry file as Babel makes it possible to use JavaScript and TypeScript code simultaneously.&lt;/p&gt;

&lt;p&gt;‚ö†Ô∏è Please note that TypeScript configuration files cannot be used with ESM (see &lt;a href="https://github.com/webpack/webpack-cli/issues/2458"&gt;ESM in webpack.config.ts isn't supported&lt;/a&gt;).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-node-interface"&gt;
  &lt;/a&gt;
  6. Node Interface
&lt;/h2&gt;

&lt;p&gt;In addition to the execution via &lt;code&gt;webpack-cli&lt;/code&gt;, webpack also supports a programmatic interface. This allows you to compile your frontend code on a Node.js server. Here is an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;webpack&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;webpack&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;webpackConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;webappDir&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../webpack.config.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useWebpack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Express&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;webpackCompiler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;webpack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;webpackConfig&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;webpackDevMiddleware&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;webpack-dev-middleware&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;webpackHotMiddleware&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;webpack-hot-middleware&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;webpackDevMiddleware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;webpackCompiler&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;webpackHotMiddleware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;webpackCompiler&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;webappDir&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead of consuming your existing &lt;code&gt;webpack.config.js&lt;/code&gt; file, you can also pass a configuration object to the &lt;code&gt;webpack&lt;/code&gt; API.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#want-more"&gt;
  &lt;/a&gt;
  Want more?
&lt;/h2&gt;

&lt;p&gt;If you liked this post, then subscribe to &lt;a href="https://www.youtube.com/c/typescripttv"&gt;TypeScript TV&lt;/a&gt; on YouTube. Alternatively, you can follow me on &lt;strong&gt;DEV&lt;/strong&gt; to learn about best practices with TypeScript &amp;amp; JavaScript.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>La relaci√≥n entre una Lambda de Python y los Simpsons</title>
      <author>Ale S√°nchez</author>
      <pubDate>Wed, 23 Jun 2021 15:00:39 +0000</pubDate>
      <link>https://dev.to/alesanchez/la-relacion-entre-una-lambda-de-python-y-los-simpsons-5797</link>
      <guid>https://dev.to/alesanchez/la-relacion-entre-una-lambda-de-python-y-los-simpsons-5797</guid>
      <description>&lt;p&gt;Pues, aparentemente, has le√≠do bien. Hace aproximadamente un mes empec√© un Bootcamp de Big Data y Machine Learning en &lt;a href="https://www.corecode.school/bootcamp/big-data-machine-learning"&gt;Core Scool&lt;/a&gt; que est√° siendo una pasada (casi no se ha notado la publicidad). El caso es que en una de las clases se nos present√≥ el siguiente c√≥digo cuando habl√°bamos de &lt;a href="https://en.wikipedia.org/wiki/Currying"&gt;currying&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;potencias&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="n"&gt;potencias&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;potencias&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Todos en clase pensamos (ilusos de nosotros...) que el resultado de ese print iba a ser 16 (

&lt;span class="katex-element"&gt;
  &lt;span class="katex"&gt;&lt;span class="katex-mathml"&gt;242^4&lt;/span&gt;&lt;span class="katex-html"&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord"&gt;2&lt;/span&gt;&lt;span class="msupsub"&gt;&lt;span class="vlist-t"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mtight"&gt;4&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;
) pero cu√°l fue nuestra sorpresa (y la tuya si pruebas ese c√≥digo) al ver que el resultado era nada m√°s y nada menos que 65536. Pero... ¬øpor qu√©?&lt;/p&gt;

&lt;p&gt;Para resolver esa cuesti√≥n tengo que hablar del &lt;code&gt;scope&lt;/code&gt; y, para eso, voy a usar a Los Simpons. Vamos al l√≠o.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#a-por-las-met%C3%A1foras"&gt;
  &lt;/a&gt;
  A por las met√°foras
&lt;/h2&gt;

&lt;p&gt;Podr√≠a hacerte una definici√≥n t√©cnica de lo que es el scope, c√≥mo funciona y c√≥mo afecta, pero la verdad es que ese no es mi estilo en absoluto, as√≠ voy con una met√°fora.&lt;/p&gt;

&lt;p&gt;Como definici√≥n s√∫per general, simplificada y (si la analizas con detalle) parcialmente incorrecta, puedo decir que el scope es una forma que tiene python (y pr√°cticamente cualquier lenguaje) de compartimentar los accesos a las variables.&lt;/p&gt;

&lt;p&gt;Dicho esto, imagina que el c√≥digo es una casa. Concretamente, la casa de los Simpsons.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O5tAZhcq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ezahlpg9ckariyakk3b.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O5tAZhcq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ezahlpg9ckariyakk3b.jpg" alt="Plano simpsons"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;En esa casa hay distintas habitaciones e incluso distintas plantas. Imagina tambi√©n (por simplificar) que todas las estancias son independientes entre s√≠ y que, lo √∫nico com√∫n a todas ellas son los pasillos y las escaleras.&lt;/p&gt;

&lt;p&gt;Y, por √∫ltimo, imagina que si t√∫ est√°s en una habitaci√≥n y necesitas algo, solo puedes ir a buscarlo &lt;strong&gt;saliendo&lt;/strong&gt; de habitaciones.&lt;/p&gt;

&lt;p&gt;Con esto vas a entender el scope perfectamente. Trasladando esto a c√≥digo, podr√≠amos decir que cada habitaci√≥n de la casa es un scope distinto. Por simplicidad, vamos a quedarnos solo con la planta de arriba. Si pinto los scopes que habr√≠a en la casa de Los Simpsons, quedar√≠a algo como:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h7imA_XA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hwjx7hqxutlqewjbt0io.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h7imA_XA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hwjx7hqxutlqewjbt0io.png" alt="Plano de la casa con scopes superpuestos"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Si te fijas, cada habitaci√≥n tiene su propio color, porque es un scope distinto. Incluso las habitaciones que est√°n dentro de otras (el ba√±o que est√° dentro de la habitaci√≥n de Homer y Marge), ¬°tienen su propio color!&lt;/p&gt;

&lt;p&gt;Una cosa m√°s es que todo el pasillo y las escaleras tienen el mismo scope, el rojo intenso.&lt;/p&gt;

&lt;p&gt;Si yo te digo que como tienes una cama en la habitaci√≥n de Bart y otra en la de Lisa, tienes 2 camas juntas, me llamar√≠as loco, ¬øverdad? Porque no est√°n juntas, est√°n en habitaciones (scopes) diferentes. Pues con las variables es lo mismo.&lt;/p&gt;

&lt;p&gt;Vamos a detallar esto un poco m√°s, colocando objetos en algunas habitaciones:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d_dQUBky--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oznc6kitfmkmoirwc50r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d_dQUBky--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oznc6kitfmkmoirwc50r.png" alt="Plano de la casa con objetos superpuestos"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Puedes ver que he colocado una bici en el cuarto de Homer y Marge, un jarr√≥n (√°nfora) en el de Bart y un tambor en el pasillo.&lt;/p&gt;

&lt;p&gt;Ahora imagina que, como dijimos antes, no puedes ir a buscar nada entrando a otra habitaci√≥n, solo saliendo. Si estuvieses en el cuarto de Lisa y necesitases un jarr√≥n, ¬øpodr√≠as ir al cuarto de Bart a por √©l? Veamos...&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Sales de la habitaci√≥n de Lisa al pasillo ‚úî&lt;/li&gt;
&lt;li&gt;Entras al cuarto de Bart ‚ùå&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Has tenido que entrar en una habitaci√≥n, as√≠ que no puedes ir. Por lo tanto podemos decir que, estando en el cuarto de Lisa, no tienes ning√∫n jarr√≥n.&lt;/p&gt;

&lt;p&gt;Vamos a intentar lo mismo, desde le ba√±o de la habitaci√≥n de Homer y Marge, pero con la bici.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Sales del ba√±o a la habitaci√≥n de Homer y Marge ‚úî&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Ya tienes la bici!! Y, una vez que la tienes, puedes usarla todo lo que necesites.&lt;/p&gt;

&lt;p&gt;Una √∫ltima prueba! Vamos a intentar ir a por el tambor desde el ba√±o de Homer y Marge:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Sales del ba√±o a la habitaci√≥n de Homer y Marge ‚úî&lt;/li&gt;
&lt;li&gt;Sales de la habitaci√≥n al pasillo ‚úî&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Pues tambi√©n puedes! Entonces, como regla general puedo decir que, desde cualquier habitaci√≥n, puedes coger lo que est√© en el pasillo.&lt;/p&gt;

&lt;p&gt;Sin embargo no al contrario. Desde el pasillo, no puedes coger nada de ninguna habitaci√≥n (porque no puedes entrar).&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#qu%C3%A9-tiene-todo-esto-que-ver-con-python"&gt;
  &lt;/a&gt;
  ¬øQu√© tiene todo esto que ver con Python?
&lt;/h2&gt;

&lt;p&gt;Lo bonito de todo esto es que es aplicable a Python y a (pr√°cticamente) cualquier lenguaje moderno.&lt;/p&gt;

&lt;p&gt;Si el lenguaje solo tuviese un √∫nico scope, desde cualquier parte del c√≥digo podr√≠as modificar cualquier variable y ser√≠a un poco ca√≥tico y dif√≠cil de depurar.&lt;/p&gt;

&lt;p&gt;En Python hay 4 scopes distintos y hay un acr√≥nimo para recordarlos: LEGB. Son las siglas (en ingl√©s) de:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Local&lt;/li&gt;
&lt;li&gt;Envoltura (Enclosing)&lt;/li&gt;
&lt;li&gt;Global&lt;/li&gt;
&lt;li&gt;Incorporado (Built-in)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#c%C3%B3mo-se-crea-un-scope-en-python"&gt;
  &lt;/a&gt;
  C√≥mo se crea un scope en python
&lt;/h3&gt;

&lt;p&gt;Python crea scopes cuando se define:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Una funci√≥n &lt;code&gt;lambda&lt;/code&gt;: Cuando haces &lt;code&gt;lambda x: print(x)&lt;/code&gt; esa lambda est√° definiendo un scope local en el que existe la variable &lt;code&gt;x&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Una funci√≥n: Cuando creas una funci√≥n con la palabra &lt;code&gt;def&lt;/code&gt;, est√°s creando un scope. En el siguiente c√≥digo:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;param_1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;param_2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;param_1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;param_2&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Est√°s creando una funci√≥n que define un scope en el que se definen las variables &lt;code&gt;param_1&lt;/code&gt;, &lt;code&gt;param_2&lt;/code&gt; y &lt;code&gt;add&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Clases: Al definir una clase con la palabra reservada &lt;code&gt;class&lt;/code&gt;, tambi√©n se crea un scope. En este caso es un poco especial porque desde fuera s√≠ puedes acceder al scope de la clase (m√°s o menos). As√≠ que vamos a dejar este caso aparte.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En cualquiera de estos 3 casos, estar√°s creando un scope local y, por tanto, un c√≥digo como este:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;local_scope&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;local_scope&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hola"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# &amp;gt;&amp;gt; "Hola"
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Funciona perfectamente y estar√≠a creando un scope local en &lt;code&gt;local_scope&lt;/code&gt; que contendr√≠a la variable &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IMPORTANTE&lt;/strong&gt;: Un scope se crea EN LA LLAMADA a la funci√≥n y NO en su definici√≥n. Por eso, si llamas 100 veces a la funci√≥n &lt;code&gt;local_scope&lt;/code&gt;, tendr√°s 100 scopes diferentes. Esto es as√≠ incluso si haces llamadas recursivas.&lt;/p&gt;

&lt;p&gt;Otra cosa importante es que, cuando t√∫ defines una variable en la cabecera de una funci√≥n, esa variable &lt;strong&gt;ya existir√°&lt;/strong&gt; en el scope de esa funci√≥n. O lo que es lo mismo, ya est√° definida y puedes usarla en el scope local de esa funci√≥n todo lo que necesites.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scope-local"&gt;
  &lt;/a&gt;
  Scope local
&lt;/h3&gt;

&lt;p&gt;Es el que acabas de ver. Equivalente a una habitaci√≥n. Defines una funci√≥n (lambda o normal), y ah√≠ tienes tu scope. Todo lo que definas en la cabecera o en el cuerpo de la funci√≥n formar√° parte de tu scope local.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#envoltura"&gt;
  &lt;/a&gt;
  Envoltura
&lt;/h3&gt;

&lt;p&gt;Esto no es m√°s que un scope dentro de un scope. Lo mismo que pasaba con el ba√±o en el cuarto de Homer y Marge. Para hacer esto, lo √∫nico que tienes que hacer es crear un scope dentro de otro. Por ejemplo, anidando funciones:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;enclosing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;param_out&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;other_var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"HI"&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;enclosed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;param_in&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;other_var&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;param_out&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;param_in&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;enclosed&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Vamos a ver los scopes de este c√≥digo de una manera un poco m√°s gr√°fica:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8JAvWuzm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mriwxb3gylylv4wpx8pf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8JAvWuzm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mriwxb3gylylv4wpx8pf.png" alt="C√≥digo con scopes superpuestos"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;La funci√≥n &lt;code&gt;enclosing&lt;/code&gt; estar√≠a definiendo el scope naranja y la &lt;code&gt;enclosed&lt;/code&gt; un scope dentro del anterior.&lt;/p&gt;

&lt;p&gt;Por lo tanto, si ejecutamos ese c√≥digo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; function_in = enclosing("Out") 
&amp;gt;&amp;gt;&amp;gt; function_in("In") 
HI
Out
In
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pero sin embargo, si intentamos acceder directamente a la funci√≥n interna:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; enclosed&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"In"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
  File &lt;span class="s2"&gt;"&amp;lt;stdin&amp;gt;"&lt;/span&gt;, line 1, &lt;span class="k"&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;
NameError: name &lt;span class="s1"&gt;'enclosed'&lt;/span&gt; is not defined
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Se queja porque no podemos entrar en habitaciones, solo salir de ellas!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#global"&gt;
  &lt;/a&gt;
  Global
&lt;/h3&gt;

&lt;p&gt;El scope global ser√≠a el pasillo. Es un scope que est√° disponible para todos, es el mas general y tambi√©n se le llama scope de m√≥dulo (module scope). Es el scope general que tienes en tu archivo de Python. Un ejemplo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;super_global&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Estoy fuera de todo"&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_function&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;super_global&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_function_enclosing&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_function_enclosed&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;super_global&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;my_function_enclosed&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; print(super_global)
Estoy fuera de todo
&amp;gt;&amp;gt;&amp;gt; my_function()
Estoy fuera de todo
&amp;gt;&amp;gt;&amp;gt; my_function_enclosing()
Estoy fuera de todo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Todas tienen acceso a la variable &lt;code&gt;super_global&lt;/code&gt; porque s√≥lo tienen que salir de habitaciones para ir a buscarla.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#incorporado-builtin"&gt;
  &lt;/a&gt;
  Incorporado (Built-in)
&lt;/h3&gt;

&lt;p&gt;Este es un scope especial, es un scope en el que hay cosas que vienen por defecto con python y que no es necesario declarar, importar ni nada. Un ejemplo de lo que hay en este scope son las funciones &lt;code&gt;len&lt;/code&gt;, &lt;code&gt;sorted&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt;...&lt;/p&gt;

&lt;p&gt;Por eso podemos hacer cosas como:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;lst&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="mi"&gt;5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Sin necesidad de definir ni importar &lt;code&gt;len&lt;/code&gt; en ninguna parte.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#c%C3%B3mo-podemos-a%C3%B1adir-elementos-a-un-scope"&gt;
  &lt;/a&gt;
  ¬øC√≥mo podemos a√±adir elementos a un scope?
&lt;/h3&gt;

&lt;p&gt;Hay varias maneras de hacer esto. La primera y la m√°s evidente es declarando una nueva variable. Al hacer &lt;code&gt;my_var = "Hola"&lt;/code&gt; est√°s a√±adiendo una nueva variable &lt;code&gt;my_var&lt;/code&gt; a tu scope.&lt;/p&gt;

&lt;p&gt;Otra manera es usar un &lt;code&gt;import&lt;/code&gt;. Cuando t√∫ haces &lt;code&gt;import math&lt;/code&gt; est√°s trayendo todo lo que haya en el scope global del m√≥dulo &lt;code&gt;math&lt;/code&gt; a tu scope. Por eso puedes usar funciones como &lt;code&gt;sqrt&lt;/code&gt; en tu scope solo si importas primero &lt;code&gt;math&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Por √∫ltimo, me gustar√≠a remarcar que la √∫nica forma de declarar una nueva variable en un scope no es con la forma &lt;code&gt;var = "algo"&lt;/code&gt;. Cuando haces:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;param&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;param&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Est√°s a√±adiendo la variable &lt;code&gt;param&lt;/code&gt; al scope de la funci√≥n &lt;code&gt;func&lt;/code&gt; aunque no est√©s asign√°ndola a nada en ese momento. En el momento de la llamada se crear√° un scope para esa funci√≥n y esa variable se crear√° autom√°ticamente en el scope con el valor que haya recibido el par√°metro.&lt;/p&gt;

&lt;p&gt;Un √∫ltimo apunte es que al hacer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Tambi√©n est√°s a√±adiendo la variable &lt;code&gt;number&lt;/code&gt; a scope global (si el &lt;code&gt;for&lt;/code&gt; lo tienes dentro de una funci√≥n, lo a√±adir√≠as a esa funci√≥n).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#y-qu%C3%A9-leches-es-eso-del-shadowing"&gt;
  &lt;/a&gt;
  ¬øY qu√© leches es eso del shadowing?
&lt;/h3&gt;

&lt;p&gt;El &lt;em&gt;shadowing&lt;/em&gt; no es m√°s que "eclipsar" una variable de un scope externo con una variable de un scope interno. Vamos a verlo con un ejemplo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Soy global√≠sima"&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;modify&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
  &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Soy local√≠sima"&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;P√°rate un minuto y piensa qu√© deber√≠a imprimir ese c√≥digo...&lt;/p&gt;

&lt;p&gt;Te pongo la respuesta:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; print(var)
Soy global√≠sima
&amp;gt;&amp;gt;&amp;gt; modify()
Soy local√≠sima
&amp;gt;&amp;gt;&amp;gt; print(var)
Soy global√≠sima
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Un momento, un momento... ¬øno deber√≠a aparecer "Soy local√≠sima" dos veces? Porque estoy modificando la variable del scope global en la funci√≥n, ¬øcierto?&lt;/p&gt;

&lt;p&gt;Lo cierto es que no. Lo que estoy haciendo es &lt;strong&gt;definir&lt;/strong&gt; una variable nueva en el scope local que eclipsa (hace &lt;em&gt;shadowing&lt;/em&gt;) a la del scope global.&lt;/p&gt;

&lt;p&gt;De la misma manera, con scopes de envoltura, si hago esto:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;outter&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
  &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Estoy fuer√≠sima"&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Estoy dentro del t√≥"&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Y ejecuto esa funci√≥n, habr√° un comportamiento similar al anterior:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; outter()
Estoy fuer√≠sima
Estoy dentro del t√≥
Estoy fuer√≠sima
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Al re-asignar la variable &lt;code&gt;var&lt;/code&gt; en la funci√≥n &lt;code&gt;inner&lt;/code&gt;, lo que estoy haciendo es declarar una variable nueva que hace &lt;code&gt;shadowing&lt;/code&gt; a la externa.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pero-todo-esto-no-iba-de-una-lambda"&gt;
  &lt;/a&gt;
  ¬øPero todo esto no iba de una lambda?
&lt;/h2&gt;

&lt;p&gt;Pues s√≠!! Y ahora puedes entender perfectamente por qu√© pasaba aquello en nuestro c√≥digo. Vamos a volver al c√≥digo inicial:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;potencias&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="n"&gt;potencias&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;potencias&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Seg√∫n nuestra intuici√≥n eso deber√≠a dar 16, pero da 65535. Vamos a analizar el c√≥digo con los conocimientos que tenemos ahora.&lt;/p&gt;

&lt;p&gt;Sabes que tenemos un scope global que envuelve a todo el c√≥digo.&lt;/p&gt;

&lt;p&gt;Adem√°s sabes que una lambda, como buena funci√≥n, crea otro scope.&lt;/p&gt;

&lt;p&gt;Pero sabes una cosa m√°s... Que los scopes de una funci√≥n se crean &lt;strong&gt;en el momento de su llamada&lt;/strong&gt; y no en su definici√≥n.&lt;/p&gt;

&lt;p&gt;Eso significa que, cuando creas la primera lambda, el &lt;code&gt;number&lt;/code&gt; que tiene como exponente ser√° 2, en la segunda lambda ser√° 4 y en la tercera 16.&lt;/p&gt;

&lt;p&gt;Pero una vez que termina el bucle, &lt;code&gt;number&lt;/code&gt; permanece definido como 16, pues es el √∫ltimo valor de la lista. Entonces cuando llamas a &lt;code&gt;potencias[2]&lt;/code&gt; se llama la primera lambda, &lt;strong&gt;en ese momento&lt;/strong&gt; se crea un scope, y se busca number en el scope superior (el global) y, como es 16, al hacer &lt;code&gt;potencias[2](4)&lt;/code&gt; estamos haciendo 
&lt;span class="katex-element"&gt;
  &lt;span class="katex"&gt;&lt;span class="katex-mathml"&gt;16416^4&lt;/span&gt;&lt;span class="katex-html"&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord"&gt;1&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord"&gt;6&lt;/span&gt;&lt;span class="msupsub"&gt;&lt;span class="vlist-t"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mtight"&gt;4&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;
, que es nada m√°s y nada menos que nuestro resultado, 65535.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#c%C3%B3mo-solucionarlo"&gt;
  &lt;/a&gt;
  ¬øC√≥mo solucionarlo?
&lt;/h3&gt;

&lt;p&gt;Sabes que necesitas que &lt;code&gt;number&lt;/code&gt;, el exponente, quede &lt;strong&gt;definida&lt;/strong&gt; en el scope de la lambda en el momento de la creaci√≥n, en vez de acceder a la del scope global.&lt;/p&gt;

&lt;p&gt;Para eso sanes que si defines esa variable como argumento de la lambda y la igualamos a la superior, esa variable quedar√° definida y fijada con ese valor al crearla, incluso si la llamamos igual (por el shadowing).&lt;/p&gt;

&lt;p&gt;Si cambias el c√≥digo a:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;potencias&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="n"&gt;potencias&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;potencias&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Est√°s definiendo una variable &lt;code&gt;number&lt;/code&gt; dentro de ese scope, que tomar√° por defecto el valor que tenga la variable del bucle hom√≥nima en ese momento. Por eso cuando llames a &lt;code&gt;potencias[2](4)&lt;/code&gt;, se crear√° un scope para esa funci√≥n, pero con la variable number prefijada al valor que ten√≠a en el momento de la creaci√≥n de la lambda, pues ese valor por defecto es fijo.&lt;/p&gt;

&lt;p&gt;Ahora s√≠, el resultado de esa ejecuci√≥n es:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;potencias&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="mi"&gt;16&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#c%C3%B3mo-modificar-el-scope"&gt;
  &lt;/a&gt;
  C√≥mo modificar el scope
&lt;/h2&gt;

&lt;p&gt;Hay un par de opciones para modificar el scope de Python y, aunque √∫tiles, debemos tratarlas con mucho cuidado.&lt;/p&gt;

&lt;p&gt;Imagina que tienes, como en el ejemplo del shadowing, este c√≥digo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Soy global√≠sima"&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;modify&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
  &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Soy local√≠sima"&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Y t√∫ necesitas irremediablemente modificar la variable &lt;code&gt;var&lt;/code&gt; dentro de la funci√≥n. Hay una forma de modificar el scope de esa funci√≥n para que esa variable se "enlace" bidireccionalmente con la del scope global.&lt;/p&gt;

&lt;p&gt;Esto significa que tanto si la lees como si la modificas estar√°s modificando la del global. Para esto se usa la palabra &lt;code&gt;global&lt;/code&gt; seguida del nombre de la variable que queremos enlazar con una global. Si bien vimos que el c√≥digo anterior devolv√≠a:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; print(var)
Soy global√≠sima
&amp;gt;&amp;gt;&amp;gt; modify()
Soy local√≠sima
&amp;gt;&amp;gt;&amp;gt; print(var)
Soy global√≠sima
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Al cambiar el c√≥digo a:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Soy global√≠sima"&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;modify&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
  &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;
  &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Soy local√≠sima"&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;El resultado de ejecutarlo nuevamente ser√°:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; print(var)
Soy global√≠sima
&amp;gt;&amp;gt;&amp;gt; modify()
Soy local√≠sima
&amp;gt;&amp;gt;&amp;gt; print(var)
Soy local√≠sima
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hemos modificado la variable global satisfactoriamente!&lt;/p&gt;

&lt;p&gt;Ahora imagina, por otro lado, el siguiente c√≥digo que vimos tambi√©n en el shadowing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;outter&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
  &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Estoy fuer√≠sima"&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Estoy dentro del t√≥"&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Y, de nuevo, necesitas irremediablemente modificar la variable &lt;code&gt;var&lt;/code&gt; dentro de la funci√≥n &lt;code&gt;inner&lt;/code&gt;. En este caso &lt;code&gt;global&lt;/code&gt; no nos sirve, pues estar√≠amos enlazando &lt;code&gt;var&lt;/code&gt; a una variable del scope global llamada &lt;code&gt;var&lt;/code&gt;, que no existe. Si intentamos hacer esto:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;outter&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
  &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Estoy fuer√≠sima"&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;
    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Estoy dentro del t√≥"&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;El resultado es:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; outter()
Estoy fuer√≠sima
Estoy dentro del t√≥
Estoy fuer√≠sima
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Que es lo mismo que antes, solo que ahora en el scope global, tendremos una variable &lt;code&gt;var&lt;/code&gt; con el valor "Estoy dentro del t√≥", que no es lo que queremos.&lt;/p&gt;

&lt;p&gt;En este caso python nos ofrece otra palabra que se usa exactamente igual que la anterior y es &lt;code&gt;nonlocal&lt;/code&gt;. Esto lo que hace es buscar la variable etiquetada como &lt;code&gt;nonlocal&lt;/code&gt; en el scope superior (y en el superior de ese, y as√≠ sucesivamente) y enlazarla de manera bidireccional igual que se hac√≠a con global. Por tanto, si cambiamos el c√≥digo a:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;outter&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
  &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Estoy fuer√≠sima"&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;nonlocal&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;
    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Estoy dentro del t√≥"&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Estaremos enlazando la variable &lt;code&gt;var&lt;/code&gt; de inner, con la variable &lt;code&gt;var&lt;/code&gt; de outter y el resultado ser√°:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; outter()
Estoy fuer√≠sima
Estoy dentro del t√≥
Estoy dentro del t√≥
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ahora s√≠, una modificaci√≥n de la variable exterior desde la funci√≥n interior.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Importante&lt;/strong&gt;: &lt;code&gt;nonlocal&lt;/code&gt; busca en los scopes superiores de manera sucesiva hasta llegar al global. Si cuando llega al global no ha encontrado esa variable, dar√° un error. &lt;code&gt;nonlocal&lt;/code&gt; no permite enlazar una variable interna con una global, para eso tenemos la palabra &lt;code&gt;global&lt;/code&gt;. Un ejemplo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hola"&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;nonlocal&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;
    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Adios"&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  File "&amp;lt;stdin&amp;gt;", line 3
SyntaxError: no binding for nonlocal 'var' found
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Dice que no hay ninguna variable &lt;code&gt;var&lt;/code&gt; a la que enlazar. Sin embargo al cambiar por &lt;code&gt;global&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hola"&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;
    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Adios"&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;El c√≥digo funciona sin problemas.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#algunas-curiosidades-de-python"&gt;
  &lt;/a&gt;
  Algunas curiosidades de Python
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#el-scope-en-los-bucles"&gt;
  &lt;/a&gt;
  El scope en los bucles
&lt;/h3&gt;

&lt;p&gt;Ni un bucle &lt;code&gt;for&lt;/code&gt; ni un bucle &lt;code&gt;while&lt;/code&gt; definen un nuevo scope. Por tanto, cualquier variable que definas dentro de ellos seguir√° viva fuera del bucle. Incluso la variable que definas en el bucle en s√≠!!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;El resultado de esa ejecuci√≥n ser√°:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;0
1
2
3
4
&amp;gt;&amp;gt;&amp;gt; print(number)
4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;La variable &lt;code&gt;number&lt;/code&gt; sigue existiendo incluso despu√©s del bucle.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#el-scope-en-los-bloques-if"&gt;
  &lt;/a&gt;
  El scope en los bloques if
&lt;/h3&gt;

&lt;p&gt;Pasa exactamente igual que en los bucles, toda variable que definas dentro de un bloque if, estar√° disponible despu√©s.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hola"&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;El resultado ser√°:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Hola
Hola
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Algo muy similar a lo que pasaba en el anterior caso.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#el-scope-de-los-listdict-comprehension"&gt;
  &lt;/a&gt;
  El scope de los list/dict comprehension
&lt;/h3&gt;

&lt;p&gt;Sin embargo, en los list comprehension el scope se comporta ligeramente distinto. Al ejecutar el c√≥digo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Si luego intentamos acceder a &lt;code&gt;number&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; [number for number in range(5)]
[0, 1, 2, 3, 4]
&amp;gt;&amp;gt;&amp;gt; number
Traceback (most recent call last):
  File "&amp;lt;stdin&amp;gt;", line 1, in &amp;lt;module&amp;gt;
NameError: name 'number' is not defined
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Porque en un list/dict comprehension, las variables no se crean en el scope en el que est√©n, sino que solo existen durante el comprehesion concreto.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scope-en-un-tryexcept"&gt;
  &lt;/a&gt;
  Scope en un try/except
&lt;/h3&gt;

&lt;p&gt;Cuando tenemos un bloque &lt;code&gt;try/except&lt;/code&gt; podemos pensar que se van a comportar igual que un &lt;code&gt;if&lt;/code&gt;, pero hay una particularidad. Imagina el siguiente c√≥digo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Error"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Si intentamos acceder a &lt;code&gt;a&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; a
1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;La tenemos disponible en el scope sin problema. Pero ahora mira este c√≥digo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="nb"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Si ahora intentamos acceder a &lt;code&gt;e&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; e
Traceback (most recent call last):
  File "&amp;lt;stdin&amp;gt;", line 1, in &amp;lt;module&amp;gt;
NameError: name 'e' is not defined
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;La variable &lt;code&gt;e&lt;/code&gt;, aunque se define en el except y se entra por ah√≠, no se crea en el scope.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusiones"&gt;
  &lt;/a&gt;
  Conclusiones
&lt;/h2&gt;

&lt;p&gt;Pues b√°sicamente has entendido c√≥mo funcionan los scopes en Python, c√≥mo puedes usarlos a tu favor y qu√© cosas debes tener en cuenta.&lt;/p&gt;

&lt;p&gt;Adem√°s, has aprendido qu√© estructuras crean scopes en Python, c√≥mo traer variables nuevas a tu scope e incluso c√≥mo modificar el comportamiento de los scopes en Python con &lt;code&gt;global&lt;/code&gt; y &lt;code&gt;nonlocal&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Para cualquier duda que tengas te leo en los comentarios y, para aprender cosas como estas y &lt;strong&gt;mucho&lt;/strong&gt; m√°s molonas, no dejes de mirar los cursos de &lt;a href="https://www.corecode.school/bootcamp/big-data-machine-learning"&gt;Core Scool&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Nos vemos en el pr√≥ximo post!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Accordion Tabs with pure CSS</title>
      <author>Sergiy Babich</author>
      <pubDate>Wed, 23 Jun 2021 14:31:52 +0000</pubDate>
      <link>https://dev.to/sergiybabich/accordion-tabs-with-pure-css-35ji</link>
      <guid>https://dev.to/sergiybabich/accordion-tabs-with-pure-css-35ji</guid>
      <description>&lt;p&gt;Yep, this is yet another ‚Äúarticle‚Äù about how amazing pure CSS is and how you can do something cool without a line of JavaScript. Why am I bothering to write it?&lt;/p&gt;

&lt;p&gt;Because I am still fascinated by how amazing pure CSS is and how you can do something cool without a line of JavaScript.&lt;/p&gt;

&lt;p&gt;Before we start ‚Äî¬†you can find demo of this code hosted &lt;a href="https://sergiybabich.github.io/html-accordion-tabs/"&gt;here&lt;/a&gt; and the code itself hosted &lt;a href="https://github.com/sergiybabich/html-accordion-tabs"&gt;here&lt;/a&gt;. Feel free to explore and play around!&lt;/p&gt;

&lt;p&gt;&lt;small&gt;Final tiny disclaimer ‚Äî all this is just for fun and to show you how amazing CSS is.&lt;/small&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html-structure"&gt;
  &lt;/a&gt;
  HTML structure
&lt;/h2&gt;

&lt;p&gt;We will use very simple HTML markup to define our accordion tabs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;.tabs-container&lt;/code&gt; ‚Äî wrapper element to host all tab related elements;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;input.tab-actor&lt;/code&gt; ‚Äî hidden radio-button to control tab content visibility;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;label.tab-button&lt;/code&gt; ‚Äî label linked to input, serving as tab button;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.tab-content&lt;/code&gt; ‚Äî wrapper for any content you‚Äôll feel worth putting into;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The tiniest example ever will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"tab-container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"radio"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"tab-1"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"tabs"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"tab-actor"&lt;/span&gt; &lt;span class="na"&gt;checked&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"tab-1"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"tab-button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Lorem ipsum&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"tab-content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;‚Ä¶&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#how-this-works"&gt;
  &lt;/a&gt;
  How this works
&lt;/h2&gt;

&lt;p&gt;The main idea is to use the very simple yet powerful ability of HTML form controls to have a state and the ability to access this state with CSS pseudo-classes. To be more precise, I‚Äôll use &lt;code&gt;:checked&lt;/code&gt; pseudo-class here. This means I can style adjacent siblings of checked input using + combinator.&lt;/p&gt;

&lt;p&gt;To emulate tabs behaviour I need to be able to display only active tab content, and by active I mean one that is the closest adjacent to checked radio.&lt;/p&gt;

&lt;p&gt;Radio-button itself also should be hidden, leaving only the linked label to be visible and interactive. Long story short, this is how these tabs are intended to work. Let‚Äôs write some basic CSS code for our tabs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#some-basic-code"&gt;
  &lt;/a&gt;
  Some basic code
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--tab-button-order&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--tab-content-order&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.tab-container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-wrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.tab-actor&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.tab-button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;order&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--tab-button-order&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.tab-content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;order&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--tab-content-order&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.tab-actor&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nc"&gt;.tab-button&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nc"&gt;.tab-content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let‚Äôs go through each rule to understand what happens.&lt;/p&gt;

&lt;p&gt;First of all, I decided to create some CSS variables for order property, so this is what is inside &lt;code&gt;:root&lt;/code&gt; rule. We‚Äôll get back to this a bit later.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.tab-container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-wrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are using flex layout as it‚Äôll allow us to use an unknown amount of tabs because flex layout distributes its children automatically against fixed-width values we‚Äôll need to put manually otherwise.&lt;/p&gt;

&lt;p&gt;By default all flex items are cramped in one line, but we need our tab buttons to be placed at top and content at bottom. Using flex-wrap: wrap will allow flex layout to put large elements to next row.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"radio"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"tab-1"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"tabs"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"tab-actor"&lt;/span&gt; &lt;span class="na"&gt;checked&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"tab-1"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"tab-button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Lorem ipsum&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is how we link label to input ‚Äî using &lt;code&gt;id&lt;/code&gt; attribute for input and for attribute for label. When &lt;em&gt;input-label&lt;/em&gt; pair has same value for these attributes, clicking on label will activate input as we would click directly on input. This will allow us hide input:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.tab-actor&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we will add some black flex magic to achieve layout we want.&lt;/p&gt;

&lt;p&gt;HTML we wrote would result in next:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[tab]
[content]
[tab]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But what we need is following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[tab][tab]
[content]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To achieve our goal we will use an &lt;code&gt;order&lt;/code&gt; CSS property which orders (no puns intended) elements inside flex layout despite actual position in DOM-tree. The following code sets the order for &lt;code&gt;.tab-button&lt;/code&gt; elements to be at the start of layout and &lt;code&gt;.tab-content&lt;/code&gt; to be at:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.tab-button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;order&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--tab-button-order&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.tab-content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;order&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--tab-content-order&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;.tab-content&lt;/code&gt; is hidden by default. We will unhide active tab content using following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.tab-actor&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nc"&gt;.tab-button&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nc"&gt;.tab-content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It‚Äôs a big selector, for sure, but it does all the magic. All content is hidden and we want to display only content corresponding to the activated tab button. This selector literally says following:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Display content after button which follows checked input&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;+&lt;/code&gt; combinator selects immediately adjacent elements, this is why our HTML code should follow this exact order.&lt;/p&gt;

&lt;p&gt;There is another approach, using &lt;code&gt;~&lt;/code&gt; combinator, which is also adjacent, but not strict and selects &lt;strong&gt;all&lt;/strong&gt; matching adjacent elements. Using &lt;code&gt;~&lt;/code&gt; at first glance will shorten the selector to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.tab-actor&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nc"&gt;.tab-content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;but in this case first tab will activate all adjacent content, and to avoid this we‚Äôll need to specify which tab displays which content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Don't write code like this. Please. */&lt;/span&gt;
&lt;span class="nc"&gt;.tab-actor.tab-1&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nc"&gt;.tab-content.tab-1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;.tab-actor.tab-2&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nc"&gt;.tab-content.tab-2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;.tab-actor.tab-3&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nc"&gt;.tab-content.tab-3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;.tab-actor.tab-4&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nc"&gt;.tab-content.tab-4&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Not that much optimization, to be honest.&lt;/p&gt;

&lt;p&gt;Ok, now we have not that pretty, but actually working tabs with pure CSS and HTML.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#music-time"&gt;
  &lt;/a&gt;
  Music time!
&lt;/h2&gt;

&lt;p&gt;Or, to be precise ‚Äî time to convert tabs to the accordion.&lt;/p&gt;

&lt;p&gt;Why?&lt;/p&gt;

&lt;p&gt;On small screens tabs can be not the best approach to display content and exactly same layout we were trying to avoid at the beginning can come in handy:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Desktop:
[tab][tab]
[content]

Mobile:
[tab]
[tab]
[content]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All we need to do is just revert flex order and adjust button width for small screens:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;480px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.tab-button&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="nc"&gt;.tab-content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;order&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;initial&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.tab-button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That‚Äôs it. It just works.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#but-wait-there-is-more"&gt;
  &lt;/a&gt;
  But wait! There is more!
&lt;/h2&gt;

&lt;p&gt;It‚Äôs all cool and great, but these tabs are booooring. Let‚Äôs give them a bit of fanciness.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Arial&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;"Helvetica Neue"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Helvetica&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1280px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;margin-inline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.tab-container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.tab-button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-bottom-color&lt;/span&gt; &lt;span class="m"&gt;0.4s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.tab-actor&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nc"&gt;.tab-button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border-bottom-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;82&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;136&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We added some paddings, colours and a bit of animation. Nice! Looks great now! But, as you can notice, content in ¬´mobile¬ª mode is switching extremely boring, without a spark of joy. Let‚Äôs add this spark then:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;480px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.tab-button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;border-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#ccc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.tab-content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;ivory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.tab-container.full-height&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.tab-container.full-height&lt;/span&gt; &lt;span class="nc"&gt;.tab-content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;300ms&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.tab-container.full-height&lt;/span&gt; &lt;span class="nc"&gt;.tab-actor&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nc"&gt;.tab-button&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nc"&gt;.tab-content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What happens here? We added a &lt;code&gt;.full-height&lt;/code&gt; class to our &lt;code&gt;.tab-container&lt;/code&gt; and sprinkled some fun CSS over it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.tab-container.full-height&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Right here we are telling our accordion to occupy exactly full-screen height and order all children in column flex layout.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.tab-container.full-height&lt;/span&gt; &lt;span class="nc"&gt;.tab-content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;300ms&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.tab-container.full-height&lt;/span&gt; &lt;span class="nc"&gt;.tab-actor&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nc"&gt;.tab-button&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nc"&gt;.tab-content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we are casting some magic on &lt;code&gt;.tab-content&lt;/code&gt;, allowing it to expand and collapse with a neat animation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#epilogue"&gt;
  &lt;/a&gt;
  Epilogue
&lt;/h2&gt;

&lt;p&gt;That‚Äôs, my friends, is how I met‚Ä¶ Ah, sorry, it is how we can make responsive tabs which switch to accordion layout on the fly without a single line of JS.&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Bash cheat sheet: Top 28 commands for you to learn ü§∫</title>
      <author>Ankit Anand ‚ú®</author>
      <pubDate>Wed, 23 Jun 2021 14:30:15 +0000</pubDate>
      <link>https://dev.to/ankit01oss/bash-cheat-sheet-top-28-commands-for-you-to-learn-15ee</link>
      <guid>https://dev.to/ankit01oss/bash-cheat-sheet-top-28-commands-for-you-to-learn-15ee</guid>
      <description>&lt;p&gt;Hi there,&lt;/p&gt;

&lt;p&gt;Today I want to bring you a summary of top Bash commands. Bash is a very popular shell program. It stands for 'Bourne Again Shell'. There are also other types of shells, but Bash is the most widely available and used shell.&lt;/p&gt;

&lt;p&gt;Anything inside [ ] means that it's optional.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-raw-ls-endraw-list-directory-contents"&gt;
  &lt;/a&gt;
  1. &lt;code&gt;ls&lt;/code&gt; - List directory contents
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;ls&lt;/code&gt; is one of the most common commands. It is used to list the contents of a directory.&lt;/p&gt;

&lt;p&gt;Syntax: ls [options][files]&lt;br&gt;
Common options: -a, -l&lt;br&gt;&lt;br&gt;
&lt;code&gt;ls -a&lt;/code&gt; shows hidden(dot) files&lt;br&gt;
&lt;code&gt;ls -l&lt;/code&gt; shows file details&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2-raw-echo-endraw-prints-text-to-the-terminal-window"&gt;
  &lt;/a&gt;
  2. &lt;code&gt;echo&lt;/code&gt; - Prints text to the terminal window
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;echo&lt;/code&gt; prints text to the terminal window. It is used widely for printing status texts and values of environment variables.&lt;br&gt;
Syntax: echo [option(s)] [string(s)]&lt;br&gt;
Common options: -e, -n&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bash-3.2$ echo "hello"
hello
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#3-raw-touch-endraw-creates-a-file"&gt;
  &lt;/a&gt;
  3. &lt;code&gt;touch&lt;/code&gt; - Creates a file
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;touch&lt;/code&gt; can be used to create an empty file quickly. It can also be used to modify file timestamps.&lt;br&gt;
Syntax: touch [option(s)] file_name(s)&lt;br&gt;
Common options: -a, -m, -r, -d&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bash-3.2$ touch a b
bash-3.2$ ls
a     b
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#4-raw-mkdir-endraw-create-a-directory"&gt;
  &lt;/a&gt;
  4. &lt;code&gt;mkdir&lt;/code&gt; - Create a directory
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;mkdir&lt;/code&gt; is used to create new directories. You can create multiple directories simultaneously.&lt;br&gt;
Syntax: mkdir [option(s)] directory_name(s)&lt;br&gt;
Common options: -m, -p, -v&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bash-3.2$ ls
a     b
bash-3.2$ mkdir c
bash-3.2$ ls
a     b    c
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#5-raw-grep-endraw-search-for-particular-pattern"&gt;
  &lt;/a&gt;
  5. &lt;code&gt;grep&lt;/code&gt; - Search for particular pattern
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;grep&lt;/code&gt; is used for finding text in files. It comes in handy when you're tasked to find a particular string or pattern within a file.&lt;br&gt;
Syntax: &lt;code&gt;grep&lt;/code&gt; [option(s)] pattern [file(s)]&lt;br&gt;
Common options&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;-i&lt;/code&gt; performs a case-insensitive search&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-n&lt;/code&gt; displays the lines containing the pattern along with the line numbers&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-c&lt;/code&gt; displays the count of the matching patterns.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#6-raw-man-endraw-print-manual-or-get-help-for-a-command"&gt;
  &lt;/a&gt;
  6. &lt;code&gt;man&lt;/code&gt; - Print manual or get help for a command
&lt;/h3&gt;

&lt;p&gt;Use the &lt;code&gt;man&lt;/code&gt; command to bring up a manual for any command. For example, if you don't know what &lt;code&gt;mkdir&lt;/code&gt; does, then use the &lt;code&gt;man&lt;/code&gt; command to see its manual.&lt;br&gt;
Syntax: man [option(s)] keyword(s)&lt;br&gt;
Common options: -w, -f, -b&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bash-3.2$ man mkdir
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#7-raw-pwd-endraw-print-working-directory"&gt;
  &lt;/a&gt;
  7. &lt;code&gt;pwd&lt;/code&gt; - Print working directory
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;pwd&lt;/code&gt; command prints the working directory you are currently in.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#8-raw-cd-endraw-change-directory"&gt;
  &lt;/a&gt;
  8. &lt;code&gt;cd&lt;/code&gt; - Change directory
&lt;/h3&gt;

&lt;p&gt;You can change to a different directory with &lt;code&gt;cd&lt;/code&gt; command. Use &lt;code&gt;cd ..&lt;/code&gt; to go to the parent directory.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#9-raw-mv-endraw-move-or-rename-directory"&gt;
  &lt;/a&gt;
  9. &lt;code&gt;mv&lt;/code&gt; - Move or rename directory
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;mv&lt;/code&gt; is used to move or rename directories. Without this command, you would have to individually rename each file which is tedious.&lt;br&gt;
Syntax: mv [option(s)] argument(s)&lt;br&gt;
Common options: -i, -b&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#10-raw-rmdir-endraw-remove-directory"&gt;
  &lt;/a&gt;
  10. &lt;code&gt;rmdir&lt;/code&gt; - Remove directory
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;rmdir&lt;/code&gt; will remove empty directories. This can help clean up space on your computer and keep files and folders organized. There are two ways to remove directories: rm and rmdir. &lt;code&gt;rm&lt;/code&gt; will remove directories and files even if it's not empty whereas &lt;code&gt;rmdir&lt;/code&gt; will only delete empty directories.&lt;br&gt;
Syntax: rmdir [option(s)] directory_names&lt;br&gt;
Common options: -p&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#11-raw-locate-endraw-locate-a-specific-file-or-directory"&gt;
  &lt;/a&gt;
  11. &lt;code&gt;locate&lt;/code&gt; - Locate a specific file or directory
&lt;/h3&gt;

&lt;p&gt;It is the simplest way to find a file or directory. It searches a cached list of files to find the location of a specified file.&lt;br&gt;
Syntax: locate [option(s)] file_name(s)&lt;br&gt;
Common options: -q, -n, -i&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#12-raw-less-endraw-view-the-contents-of-a-text-file"&gt;
  &lt;/a&gt;
  12. &lt;code&gt;less&lt;/code&gt; - view the contents of a text file
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;less&lt;/code&gt; command allows you to view files without opening an editor. It‚Äôs faster to use, and there‚Äôs no chance of you inadvertently modifying the file.&lt;br&gt;
Syntax: less file_name&lt;br&gt;
Common options: -e, -f, -n&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#13-raw-compgen-endraw-shows-all-available-commands-aliases-and-functions"&gt;
  &lt;/a&gt;
  13. &lt;code&gt;compgen&lt;/code&gt; - Shows all available commands, aliases, and functions
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;compgen&lt;/code&gt; is a bash built-in command which is used to list all the commands that could be executed in the Linux system.&lt;br&gt;
Syntax: compgen [option(s)]&lt;br&gt;
Common options: -a, -c, -d&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#14-raw-gt-endraw-redirect-stdout"&gt;
  &lt;/a&gt;
  14. &lt;code&gt;&amp;gt;&lt;/code&gt; - Redirect stdout
&lt;/h3&gt;

&lt;p&gt;This takes the output from the preceding command that you‚Äôd normally see in the terminal and sends it to a file that you give it. As an example, take echo ‚Äútest‚Äù &amp;gt; dev1. Here it creates a file called dev1 and puts the echoed string into it.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#15-raw-head-endraw-read-the-start-of-a-file"&gt;
  &lt;/a&gt;
  15. &lt;code&gt;head&lt;/code&gt; - Read the start of a file
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;head&lt;/code&gt; command allows you to read the first few lines of a file. The default number is 10.&lt;br&gt;
Syntax: head [option(s)] file(s)&lt;br&gt;
Common options: -n, can be used to specify the number of lines to show&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#16-raw-tail-endraw-read-the-end-of-a-file"&gt;
  &lt;/a&gt;
  16. &lt;code&gt;tail&lt;/code&gt; - Read the end of a file
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;tail&lt;/code&gt; outputs the last few lines of a file. And, just like the &lt;code&gt;head&lt;/code&gt; command, the default is 10. &lt;br&gt;
Syntax: tail [option(s)] file_names&lt;br&gt;
Common options: -n&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#17-raw-cat-endraw-read-a-file-create-a-file-and-concatenate-files"&gt;
  &lt;/a&gt;
  17. &lt;code&gt;cat&lt;/code&gt; - Read a file, create a file, and concatenate files
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;cat&lt;/code&gt;, short for concatenate, is one of the most commonly used commands. It allows you to create single or multiple files, view file inclusions, concatenate files and redirect output in a terminal or file.&lt;br&gt;
Syntax: cat [option(s)] [file_name(s)] [-] [file_name(s)]&lt;br&gt;
Common options: -n&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#18-raw-endraw-pipe"&gt;
  &lt;/a&gt;
  18. &lt;code&gt;|&lt;/code&gt; - Pipe
&lt;/h3&gt;

&lt;p&gt;A pipe takes the standard output of one command and passes it as the input to another.&lt;br&gt;
Syntax: &lt;code&gt;|&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#19-raw-chmod-endraw-sets-the-file-permissions-flag-on-a-file-or-folder"&gt;
  &lt;/a&gt;
  19. &lt;code&gt;chmod&lt;/code&gt; - Sets the file permissions flag on a file or folder
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;chmod&lt;/code&gt; command is used to change the access mode of a file. The name is an abbreviation of change mode. &lt;br&gt;
Syntax: chmod [reference][operator][mode] file... &lt;br&gt;
Common options: -f, -v&lt;br&gt;
References are used to distinguish the users to whom the permissions apply. Operator is used to specify how the modes of a file should be adjusted. The modes indicate which permissions are to be granted or removed from the specified classes.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#20-raw-exit-endraw-exit-out-of-a-directory"&gt;
  &lt;/a&gt;
  20. &lt;code&gt;exit&lt;/code&gt; - Exit out of a directory
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;exit&lt;/code&gt; command is used to exit any kind of shell.&lt;br&gt;
Syntax: &lt;code&gt;exit&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#21-raw-history-endraw-list-your-most-recent-commands"&gt;
  &lt;/a&gt;
  21. &lt;code&gt;history&lt;/code&gt; - List your most recent commands
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;history&lt;/code&gt; command prints out your recent commands, one command per line. It also prints the history number for each command. Each command is associated with a number for easy reference. You can truncate the output by specifying a number after the command.&lt;br&gt;
Syntax: &lt;code&gt;history&lt;/code&gt;&lt;br&gt;
Common options: -c, -d&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#22-raw-clear-endraw-clear-your-terminal-window"&gt;
  &lt;/a&gt;
  22. &lt;code&gt;clear&lt;/code&gt; - Clear your terminal window
&lt;/h3&gt;

&lt;p&gt;This command is used to clear all previous commands and output from consoles and terminal windows. This keeps your terminal clean and removes the clutter so you can focus on subsequent commands and their output.&lt;br&gt;
Syntax: &lt;code&gt;clear&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#23-raw-cp-endraw-copy-files-and-directories"&gt;
  &lt;/a&gt;
  23. &lt;code&gt;cp&lt;/code&gt; - Copy files and directories
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;cp&lt;/code&gt; stands for copy. This command is used to copy files or groups of files or directory. &lt;br&gt;
Syntax: cp [option(s)] current_name new_name&lt;br&gt;
Common options: -r, -i, -b&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#24-raw-kill-endraw-terminate-stalled-processes"&gt;
  &lt;/a&gt;
  24. &lt;code&gt;kill&lt;/code&gt; - Terminate stalled processes
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;kill&lt;/code&gt; command allows you to terminate a process from the command line. You do this by providing the process ID (PID) of the process to kill. You can use the &lt;code&gt;ps&lt;/code&gt; command to find the PID. &lt;code&gt;kill&lt;/code&gt; is a built-in command of the bash shell.&lt;br&gt;
Syntax: kill [option(s)] PID(s)&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#25-raw-sleep-endraw-delay-a-process-for-a-specified-amount-of-time"&gt;
  &lt;/a&gt;
  25. &lt;code&gt;sleep&lt;/code&gt; - Delay a process for a specified amount of time.
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;sleep&lt;/code&gt; command is used in shell scripts to take a pause before the execution of the next command. For example, it can be used inside a script to pause before retrying a failed operation or inside a loop.&lt;br&gt;
Syntax: sleep number [suffix]&lt;br&gt;
Suffix is used to specify the unit of time and can be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;s&lt;/code&gt; - seconds(default)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;m&lt;/code&gt; - minutes&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;h&lt;/code&gt; - hours&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;d&lt;/code&gt; - days&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#26-raw-passwd-endraw-change-account-password"&gt;
  &lt;/a&gt;
  26. &lt;code&gt;passwd&lt;/code&gt; - Change account password
&lt;/h3&gt;

&lt;p&gt;You can change your account password using &lt;code&gt;passwd&lt;/code&gt; command. It will ask for your old password and then ask to enter your new password twice.&lt;br&gt;
Syntax: &lt;code&gt;passwd&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#27-raw-df-endraw-check-disk-space"&gt;
  &lt;/a&gt;
  27. &lt;code&gt;df&lt;/code&gt; - Check Disk Space
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;df&lt;/code&gt; command is used to get a detailed report on the system‚Äôs disk space usage. When used without any argument, the df command will display information about all mounted file systems.&lt;br&gt;
Syntax: df [options]... filesystem...&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#28-raw-comm-endraw-compare-two-files"&gt;
  &lt;/a&gt;
  28. &lt;code&gt;comm&lt;/code&gt; - Compare two files
&lt;/h3&gt;

&lt;p&gt;You can use &lt;code&gt;comm&lt;/code&gt; command to compare two sorted files line by line. To compare two sorted files using 'comm', you have to pass their names as arguments.&lt;br&gt;
Syntax: comm [OPTION]... FILE1 FILE2&lt;/p&gt;



&lt;p&gt;I hope you enjoyed this summary and learned something new. I will be coming up with more such notes soon.&lt;/p&gt;

&lt;p&gt;Please give me a follow if you liked it. üôå&lt;/p&gt;



&lt;p&gt;Currently building &lt;a href="https://bit.ly/35G7QXU"&gt;SigNoz&lt;/a&gt; - an open-source APM &amp;amp; observability tool üíô&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/SigNoz"&gt;
        SigNoz
      &lt;/a&gt; / &lt;a href="https://github.com/SigNoz/signoz"&gt;
        signoz
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      SigNoz helps developers monitor their applications &amp;amp; troubleshoot problems, an open-source alternative to DataDog, NewRelic, etc. üî• üñ•
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
  &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/de24bcecd48c187d949b173f240555967f58a5cd424760a73f7c06f791b892ec/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f646376336570696e782f696d6167652f75706c6f61642f76313631383930343435302f7369676e6f7a2d696d616765732f4c6f676f4769746875625f7369676662752e737667"&gt;&lt;img src="https://camo.githubusercontent.com/de24bcecd48c187d949b173f240555967f58a5cd424760a73f7c06f791b892ec/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f646376336570696e782f696d6167652f75706c6f61642f76313631383930343435302f7369676e6f7a2d696d616765732f4c6f676f4769746875625f7369676662752e737667" alt="SigNoz-logo" width="240"&gt;&lt;/a&gt;
  &lt;/p&gt;
&lt;p&gt;Monitor your applications and troubleshoot problems in your deployed applications, an open-source alternative to DataDog, New Relic, etc.&lt;/p&gt;
&lt;p&gt;
    &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/8bb1977f745ee8c8107f711ecfa901421a9b929f308fd431f7211508f8ddbd87/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e"&gt;&lt;img alt="License" src="https://camo.githubusercontent.com/8bb1977f745ee8c8107f711ecfa901421a9b929f308fd431f7211508f8ddbd87/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e"&gt;&lt;/a&gt;
    &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/4d7505d3f801c171da56fe726501ab9411207d82358bf10341021397fa3fe48e/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f70756c6c732f7369676e6f7a2f66726f6e74656e643f6c6162656c3d446f776e6c6f616473"&gt;&lt;img alt="Downloads" src="https://camo.githubusercontent.com/4d7505d3f801c171da56fe726501ab9411207d82358bf10341021397fa3fe48e/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f70756c6c732f7369676e6f7a2f66726f6e74656e643f6c6162656c3d446f776e6c6f616473"&gt;&lt;/a&gt;
    &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/cd33e47de8e2feb970abdef5de51f59e6c007958faf6c188c56dd4c4208e58a2/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f7369676e6f7a2f7369676e6f7a"&gt;&lt;img alt="GitHub issues" src="https://camo.githubusercontent.com/cd33e47de8e2feb970abdef5de51f59e6c007958faf6c188c56dd4c4208e58a2/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f7369676e6f7a2f7369676e6f7a"&gt;&lt;/a&gt; 
    &lt;a href="https://twitter.com/intent/tweet?text=Monitor%20your%20applications%20and%20troubleshoot%20problems%20with%20SigNoz,%20an%20open-source%20alternative%20to%20DataDog,%20NewRelic.&amp;amp;url=https://signoz.io/&amp;amp;via=SigNozHQ&amp;amp;hashtags=opensource,signoz,observability" rel="nofollow"&gt; 
        &lt;img alt="tweet" src="https://camo.githubusercontent.com/90bc908826728c0e4261acfff5619fd732c7be2b2a00624fce6363c9a3623c90/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f75726c2f687474702f736869656c64732e696f2e7376673f7374796c653d736f6369616c"&gt; &lt;/a&gt; 
&lt;/p&gt;

&lt;p&gt;SigNoz helps developers monitor applications and troubleshoot problems in their deployed applications. SigNoz uses distributed tracing to gain visibility into your software stack.&lt;/p&gt;
&lt;p&gt;üëâ You can see metrics like p99 latency, error rates for your services, external API calls and individual end points.&lt;/p&gt;
&lt;p&gt;üëâ You can find the root cause of the problem by going to the exact traces which are causing the problem and see detailed flamegraphs of individual request traces.&lt;/p&gt;

&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/863718997bae95953d22cbd6c1001d4ec23695aad4244d7de596660f33833496/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f646376336570696e782f696d6167652f75706c6f61642f76313631383930343033322f7369676e6f7a2d696d616765732f73637265656e7a792d313631383930343031333732395f636c737376792e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/863718997bae95953d22cbd6c1001d4ec23695aad4244d7de596660f33833496/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f646376336570696e782f696d6167652f75706c6f61642f76313631383930343033322f7369676e6f7a2d696d616765732f73637265656e7a792d313631383930343031333732395f636c737376792e706e67" alt="SigNoz Feature"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
üëá Features:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Application overview metrics like RPS, 50th/90th/99th Percentile latencies, and Error Rate&lt;/li&gt;
&lt;li&gt;Slowest endpoints in your application&lt;/li&gt;
&lt;li&gt;See exact request trace to figure out issues in downstream services, slow DB queries, call to 3rd party services like payment gateways, etc&lt;/li&gt;
&lt;li&gt;Filter traces by service name, operation, latency, error, tags/annotations.&lt;/li&gt;
&lt;li&gt;Aggregate metrics on filtered traces. Eg, you can get error‚Ä¶&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/SigNoz/signoz"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>devops</category>
      <category>linux</category>
      <category>bash</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Embedding Figma into your Dev Environment</title>
      <author>Debbie O'Brien</author>
      <pubDate>Wed, 23 Jun 2021 14:06:34 +0000</pubDate>
      <link>https://dev.to/debs_obrien/embedding-figma-into-your-dev-environment-ddj</link>
      <guid>https://dev.to/debs_obrien/embedding-figma-into-your-dev-environment-ddj</guid>
      <description>&lt;p&gt;We have often been faced with the problem of designs changing or being modified or developers not making the component exactly how the designer requested. When designs live in one place and component files in other it is often hard to keep things in sync. And once the component has been built the developer will probably never even open the designs again.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But what if we could create a better experience? What if we could add the designs directly into the developers working environment and have those designs update in real time!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With &lt;strong&gt;&lt;a href="https://harmony-docs.bit.dev/"&gt;Bit&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href="https://www.figma.com/"&gt;Figma&lt;/a&gt;&lt;/strong&gt; that is exactly what you can do. Let me show you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#update-design-see-changes-in-your-dev-environment"&gt;
  &lt;/a&gt;
  Update Design - See Changes in your dev Environment
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NoPEb0w6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4wr1jdbrtdm4tyy2jpzt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NoPEb0w6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4wr1jdbrtdm4tyy2jpzt.png" alt="Figma in Bit"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#figma-embeds"&gt;
  &lt;/a&gt;
  Figma Embeds
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.figma.com/"&gt;Figma&lt;/a&gt; is of the most used tools for designers today and it is what we use at &lt;a href="https://harmony-docs.bit.dev/"&gt;Bit&lt;/a&gt;. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Bit is like Git but for Components. It gives you the ability to build components in isolation with it's own versioning system making it easier to publish and share components across multiple projects and repos. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When a designer creates a component in Figma all we need to do to add this to our Bit component is use the share button in Figma which is located at the top right in the header. Then click on the 'Get embed code' link. This will give you an embed code that you can then use to embed directly into your docs file. Figma allows us to choose the permissions we want to give for this file, to be visible to anyone or just members on our team. As Bit is an open source product we have left our designs open for anyone to see them.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When we create components in Bit we create them in a folder and inside we have an index file that exports everything as well as a component file, the component docs file, the test file, the composition file for viewing the component and the styles if needed. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_jygYDC1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fu1xsf76dxwm6b6stu89.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_jygYDC1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fu1xsf76dxwm6b6stu89.png" alt="Figma in Bit"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#figma-and-bit"&gt;
  &lt;/a&gt;
  Figma and Bit
&lt;/h2&gt;

&lt;p&gt;There are of course other options for adding the Figma embed such as &lt;a href="https://dev.to/extending-bit/adding-a-new-tab"&gt;creating a new tab in your workspace&lt;/a&gt; and adding the Figma file there. However I quite like the dev experience of adding it to the components docs file as the compositions are shown just below the docs in the overview tab of the Bit workspace which is our developer environment complete with hot reloading and that means I get to see design and composition of my component right next to each other. &lt;/p&gt;

&lt;p&gt;It is a much better developer experience and also much better for review purposes too. However for more complex designs such as complete app components it might make more sense to add the Figma file to a new tab instead of in the docs.&lt;/p&gt;

&lt;p&gt;As our docs uses mdx we can literally just paste the embed code here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;iframe&lt;/span&gt;
  &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;border: 1px solid rgba(0, 0, 0, 0.1);&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;800&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;450&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://www.figma.com/embed?embed_host=share&amp;amp;url=https%3A%2F%2Fwww.figma.com%2Ffile%2FDaShaxpMbyWlvOGMFFUHCl%2Fbutton%3Fnode-id%3D0%253A1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;allowfullscreen&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/iframe&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However we will need to modify the styles to use brackets instead of quotes as we are using React to build our component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;iframe&lt;/span&gt;
  &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button.docs.mdx&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1px solid rgba(0, 0, 0, 0.1)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
  &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;800&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;450&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://www.figma.com/embed?embed_host=share&amp;amp;url=https%3A%2F%2Fwww.figma.com%2Ffile%2FDaShaxpMbyWlvOGMFFUHCl%2Fbutton%3Fnode-id%3D0%253A1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;allowfullscreen&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/iframe&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#figma-live-embed-in-bit-components-docs"&gt;
  &lt;/a&gt;
  Figma Live Embed in Bit Component's Docs
&lt;/h2&gt;

&lt;p&gt;This will work perfect and you will now see in your overview tab in the Bit workspace, that you have your Figma file embedded in your docs. This means that the developer can now start to developer the component in complete isolation based on the designs and can easily click on the link to open the Figma file to better inspect the components design. The developer then starts creating the various compositions needed for this component and once finished they can export the component and send the link to the designer and project manager for approval.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5GeRk5n0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o3w9hgh4c933irj2ve3n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5GeRk5n0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o3w9hgh4c933irj2ve3n.png" alt="Figma Button Docs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-a-figma-component"&gt;
  &lt;/a&gt;
  Create a Figma Component
&lt;/h2&gt;

&lt;p&gt;We can improve this further by creating a component for our Figma embed so that we add more styles or modify the width and height. This will make it easier to manage when we add further Figma embeds. We can also add a height and width attribute with default value which will allow the consumer to override it should they need to.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lazy-loading-our-iframes"&gt;
  &lt;/a&gt;
  Lazy Loading our iframes
&lt;/h3&gt;

&lt;p&gt;We can also add &lt;a href="https://web.dev/iframe-lazy-loading/"&gt;lazy loading for our iframe&lt;/a&gt; which is fully supported in Chrome and Chromium-based browsers. This will defer the offscreen iframe from being loaded until the user scrolls near to it which reduces memory usage. This is especially helpful for when adding Figma embeds to all our components as sometimes you might not scroll down to see the Figma file or might not need it and it will give users a much better user experience.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lazy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#figma-embed-component"&gt;
  &lt;/a&gt;
  Figma Embed Component
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;classNames&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;classnames&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./figma-embed.module.scss&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;FigmaEmbedProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/**
   * src for figma embed. Click on Share button in Figma and click on 'Get embed code' and then copy the value of the src attribute from the iframe.
   */&lt;/span&gt;
  &lt;span class="na"&gt;iframeSrc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="cm"&gt;/**
   * add lazy loading
   */&lt;/span&gt;
  &lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lazy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;eager&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="cm"&gt;/**
   * width of iframe
   */&lt;/span&gt;
  &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="cm"&gt;/**
   * height of iframe
   */&lt;/span&gt;
  &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HTMLAttributes&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HTMLIFrameElement&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;FigmaEmbed&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;iframeSrc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lazy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;100%&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;600&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;className&lt;/span&gt;
&lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;FigmaEmbedProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;iframe&lt;/span&gt;
      &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;classNames&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;iframe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
      &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;iframeSrc&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/iframe&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#using-your-figma-component"&gt;
  &lt;/a&gt;
  Using your Figma Component
&lt;/h3&gt;

&lt;p&gt;You can now use your Figma Component in any of your component docs by just changing the src of the iframe. You can also modify the height, width, styles and lazy loading if you wish or just use the default values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;FigmaEmbed&lt;/span&gt; &lt;span class="nx"&gt;iframeSrc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://www.figma.com/embed?embed_host=share&amp;amp;url=https%3A%2F%2Fwww.figma.com%2Ffile%2FDaShaxpMbyWlvOGMFFUHCl%2Fbutton%3Fnode-id%3D0%253A1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#see-examples"&gt;
  &lt;/a&gt;
  See Examples
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bit.dev/learn-bit-react/base-ui/figma/figma-embed/~code/figma-embed.tsx"&gt;Figma Component example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bit.dev/learn-bit-react/base-ui/ui/button"&gt;Button component with figma embed&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#new-to-bit"&gt;
  &lt;/a&gt;
  New to Bit
&lt;/h2&gt;

&lt;p&gt;If you haven't tried out Bit before I have created a &lt;a href="https://harmony-docs.bit.dev/tutorials/build-and-share-components"&gt;tutorial complete with video&lt;/a&gt; which will get you started. Have fun.&lt;/p&gt;

</description>
      <category>figma</category>
      <category>design</category>
      <category>bit</category>
    </item>
    <item>
      <title>Advogando √† favor da querid√≠ssima Fetch API</title>
      <author>Mariana Ramacciotti</author>
      <pubDate>Wed, 23 Jun 2021 13:45:16 +0000</pubDate>
      <link>https://dev.to/marianaramacciotti/advogando-a-favor-da-queridissima-fetch-api-ajf</link>
      <guid>https://dev.to/marianaramacciotti/advogando-a-favor-da-queridissima-fetch-api-ajf</guid>
      <description>&lt;h1&gt;
  &lt;a href="#eita-quanto-c%C3%B3digo"&gt;
  &lt;/a&gt;
  Eita, quanto c√≥digo!
&lt;/h1&gt;

&lt;p&gt;Ent√£o voc√™, assim como eu (novata nesse assunto) estava seguindo algum tutorial na internet explicando como fazemos &lt;strong&gt;requisi√ß√µes para o servidor&lt;/strong&gt;. Entretanto, contudo, todavia; o m√©todo utilizado pelo professor era com &lt;strong&gt;XMLHttpRequest&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Se voc√™ olhou para aquele c√≥digo enorme e pensou "puxa vida!", esse post √© para voc√™!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#voltando-um-pouquinho-como-requisi%C3%A7%C3%B5es-eram-feitas-antigamente"&gt;
  &lt;/a&gt;
  Voltando um pouquinho: Como requisi√ß√µes eram feitas antigamente?
&lt;/h2&gt;

&lt;p&gt;Antigamente o carregamento da p√°gina na web era simples: voc√™ enviaria uma solicita√ß√£o de um site a um servidor e, desde que nada desse errado, os ativos que formaram a p√°gina da web seriam baixados e exibidos em seu computador.&lt;/p&gt;

&lt;p&gt;O problema com este modelo √© que &lt;strong&gt;sempre que voc√™ deseja atualizar qualquer parte da p√°gina&lt;/strong&gt; (por exemplo, para exibir um novo conjunto de produtos) voc√™ precisa &lt;strong&gt;carregar a p√°gina inteira novamente&lt;/strong&gt;. Que experi√™ncia de usu√°rio esquisita, n√£o? &lt;/p&gt;

&lt;p&gt;Se voc√™ por acaso voc√™ j√° saiu de um site porque ficou irritado que o mesmo demorou 5 segundos pra carregar, provavelmente voc√™ n√£o curtiria se um site ficasse recarregando por completo para atualizar n√©? &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ah-a-tecnologia"&gt;
  &lt;/a&gt;
  Ah, a tecnologia...
&lt;/h2&gt;

&lt;p&gt;Isso levou √† cria√ß√£o de tecnologias que &lt;strong&gt;permitem que p√°ginas da web solicitem pequenos blocos de dados&lt;/strong&gt; (como HTML , XML , JSON ou texto simples) e &lt;strong&gt;os exibam apenas quando necess√°rio&lt;/strong&gt;, ajudando a resolver o problema.&lt;/p&gt;

&lt;p&gt;Isso √© obtido usando APIs como (se prepara):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;XMLHttpRequestchatinhooutdatedningu√©mseimporta ou...&lt;/li&gt;
&lt;li&gt;A bel√≠ssima lind√≠ssima maravilhosa &lt;strong&gt;API Fetch&lt;/strong&gt; dona da minha vida. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Essas tecnologias permitem que as p√°ginas da web tratem diretamente de fazer solicita√ß√µes HTTP para &lt;strong&gt;recursos espec√≠ficos dispon√≠veis em um servidor&lt;/strong&gt; e &lt;strong&gt;formatar os dados resultantes&lt;/strong&gt; conforme necess√°rio antes de serem exibidos.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#onde-encontro-isso-funcionando-na-pr%C3%A1tica"&gt;
  &lt;/a&gt;
  Onde encontro isso funcionando na pr√°tica?
&lt;/h2&gt;

&lt;p&gt;Entre em um site que voc√™ adora. Vou assumir que voc√™ curte um Netflixzinho de domingo, enrolado nas cobertas tomando chocolate quente... &lt;/p&gt;

&lt;p&gt;Dormindo no meio da s√©rie porque voc√™ est√° SUPER confort- &lt;em&gt;c-ham&lt;/em&gt; enfim. &lt;/p&gt;

&lt;p&gt;Agora no campo de busca, escreva o nome de uma s√©rie. Mas tem que ser boa, hein? Escreve l√°... &lt;strong&gt;Brooklyn Nine-Nine&lt;/strong&gt;; uma das melhores s√©ries que existem e s√≥ minha opini√£o importa.&lt;/p&gt;

&lt;p&gt;Assim que voc√™ clicar no bot√£o "Procurar", perceba que o conte√∫do principal mudar√°, mas a maioria das informa√ß√µes ao redor, como cabe√ßalho, rodap√©, menu de navega√ß√£o, etc., &lt;strong&gt;permanecer√£o as mesmas&lt;/strong&gt;. Isso √© o que? Isso √© Fant√°stico, pois: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;As atualiza√ß√µes de p√°gina s√£o muito mais r√°pidas e voc√™ n√£o precisa esperar a atualiza√ß√£o da p√°gina, o que significa que o site parece mais r√°pido e √°gil.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Menos dados s√£o baixados em cada atualiza√ß√£o, o que significa menos largura de banda desperdi√ßada. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Antigamente, essa t√©cnica era conhecida como &lt;strong&gt;AJAX&lt;/strong&gt;, porque &lt;strong&gt;utilizava a XMLHttpRequest para solicitar dados XML&lt;/strong&gt; (blergh). Normalmente, &lt;em&gt;esse n√£o √© o caso hoje em dia&lt;/em&gt; (am√©m), mas o resultado ainda √© o mesmo e o termo "Ajax" ainda √© frequentemente usado para descrever a t√©cnica.&lt;/p&gt;

&lt;p&gt;Resumindo: Ajax √© o tio que utiliza uma API da web como proxy para solicitar dados de maneira mais inteligente, em vez de apenas fazer o navegador recarregar a p√°gina inteira. Pois muito que bem.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#como-seria-solicitar-dados-com-essa-tal-de-api-fetch"&gt;
  &lt;/a&gt;
  Como seria solicitar dados com essa tal de api fetch?
&lt;/h2&gt;

&lt;p&gt;A API Fetch √© basicamente uma &lt;strong&gt;substitui√ß√£o moderna do XHR&lt;/strong&gt;; ela foi introduzido em navegadores recentemente para tornar as solicita√ß√µes ass√≠ncronas de HTTP &lt;strong&gt;mais f√°ceis de fazer&lt;/strong&gt; em JavaScript, tanto para desenvolvedores quanto para outras APIs que se baseiam no Fetch.&lt;/p&gt;

&lt;p&gt;"Ser√° que a fetch √© t√£o boa assim?" &lt;strong&gt;observe&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;

   &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;

   &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Que col√≠rio para os olhos, que monumento aben√ßoado, que vis√£o paradis√≠aca, que resposta para todas as perguntas sobre a complexidade da psiqu√™ humana... Agora que j√° terminei de elogiar, vamos explicar o que cada trem desse faz.&lt;/p&gt;

&lt;p&gt;1) &lt;strong&gt;fetch(url)&lt;/strong&gt;: Invocamos o m√©todo fetch passando a URL do recurso que queremos buscar.&lt;/p&gt;

&lt;p&gt;2) &lt;strong&gt;then()&lt;/strong&gt;: Retorna uma promessa. Se a promessa retornada for resolve, a fun√ß√£o dentro do m√©todo then() √© executada. Essa fun√ß√£o cont√©m o c√≥digo para lidar com os dados recebidos da API.&lt;/p&gt;

&lt;p&gt;3) &lt;strong&gt;catch()&lt;/strong&gt;: A API chamada usando fetch() pode estar inoperante ou outros erros podem ocorrer. Se isso acontecer, a promessa reject ser√° retornada. O m√©todo catch √© usado para lidar com reject. O c√≥digo dentro de catch() ser√° executado se um erro ocorrer ao chamar a API escolhida.&lt;/p&gt;

&lt;p&gt;E √© isto. √â isso. √â S√ì isso. &lt;/p&gt;

&lt;p&gt;Para voc√™ que ficou co√ßando a cabe√ßa (como eu) com a &lt;em&gt;XMLHttpRequestNingu√©mSeImporta&lt;/em&gt;, temos uma solu√ß√£o muito mais vi√°vel e f√°cil de aplicar. &lt;/p&gt;

&lt;p&gt;No c√≥digo acima, voc√™ est√° chamando a Fetch API e passando o URL para o servidor. Ent√£o, uma resposta √© recebida. No entanto, a resposta recebida &lt;strong&gt;n√£o vem formatada em JSON&lt;/strong&gt;, ou seja, n√£o vem conhecid√≠ssima como a noite de Par√≠s ou poderos√≠ssima como a espada de um samurai. &lt;/p&gt;

&lt;p&gt;Ela vem como um objeto com uma s√©rie de m√©todos que podem ser usados dependendo do que voc√™ quer fazer com as informa√ß√µes. &lt;/p&gt;

&lt;p&gt;Ent√£o vamos converter o objeto retornado em JSON; usando um m√©todo chamado (se prepara)... &lt;strong&gt;json()&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;// O in√≠cio de um sonho&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;erro&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;erro&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// Deu tudo errado&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;O GET informa o que queremos fazer ao acessar aqueles dados. Depois temos nossos dois casos como mencionado nos coment√°rios: o de sucesso e o de falha. &lt;/p&gt;

&lt;p&gt;√â isto! Espero que esse post tenha agu√ßado sua curiosidade para ler mais √† respeito :]&lt;/p&gt;

</description>
      <category>fetch</category>
    </item>
    <item>
      <title>Handle multiple exceptions with try catch and Promise.all</title>
      <author>Alisson Zampietro</author>
      <pubDate>Wed, 23 Jun 2021 13:36:26 +0000</pubDate>
      <link>https://dev.to/alissonzampietro/handle-multiple-exceptions-with-try-catch-and-promise-all-31fa</link>
      <guid>https://dev.to/alissonzampietro/handle-multiple-exceptions-with-try-catch-and-promise-all-31fa</guid>
      <description>&lt;p&gt;&lt;em&gt;Tools:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;NodeJS: 12.20&lt;/li&gt;
&lt;li&gt;sequelize: ^6.3.5&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Scenario:&lt;/em&gt; I have to create one Cash Register record in the database and associate it's products and treatments items in another table.&lt;br&gt;
&lt;em&gt;Data Input:&lt;/em&gt; Array of objects containing productId,  treatmentId and stuff &lt;/p&gt;

&lt;p&gt;&lt;em&gt;To help us ensure that all registers gonna be inserted successfully we're going to use the Sequelize's transactions.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The module called &lt;em&gt;CashRegisterService.register()&lt;/em&gt; is responsible to create the record in the table CashRegister and delegate the insertion of it's ternaries tables (ProductLines and TreatmentLines). &lt;/p&gt;

&lt;p&gt;Let's check how i planned my code in the beginning:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CashRegisterService&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;sequelize&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;cashRegister&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;CashRegister&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;upsert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;cashRegister&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Error when trying populate Cash Register&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;associateProductLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cashRegister&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;associateTreatmentLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cashRegister&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;

        &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can notice one thing: Even though we got an excepetion (related with the ternaries or even though the CashRegister model) we make the &lt;em&gt;.commit()&lt;/em&gt;, because while the ternaries functions is running, the code move foward and reach the &lt;em&gt;t.commit()&lt;/em&gt; code &lt;strong&gt;due to the Javascript's asynchronicity&lt;/strong&gt;, so it's going to create a CashRegister record in the database but it's going to crash if there's some problem inside the assocation ternaries methods . Let's fix it adding the await:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CashRegisterService&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;sequelize&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;cashRegister&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;CashRegister&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;upsert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;cashRegister&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Error when trying populate Cash Register&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;associateProductLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cashRegister&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
            &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;associateTreatmentLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cashRegister&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;

        &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now i'm getting the error &lt;em&gt;UnhandledPromiseRejectionWarning&lt;/em&gt;, and it's happening due i got a list of objects to insert using models CasgRegister, ProductLine and TreatmentLine, and as i told before that JavaScript is async, the commit runs before finish the object's list of insertion in the map function. To fix this problem, we're going to wrap the map function with the Promise function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CashRegisterService&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;sequelize&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;cashRegister&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;CashRegister&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;upsert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;cashRegister&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Error when trying populate Cash Register&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;associateProductLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cashRegister&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
            &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;associateTreatmentLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cashRegister&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;}))&lt;/span&gt;

        &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we're close, so our code only runs &lt;em&gt;t.commit()&lt;/em&gt; after we run all promises in our code snippet inside the map function, and any exception can be handled by the caller. Remember that i make all validations inside the &lt;em&gt;associates...&lt;/em&gt; functions, and if somethings is bad, i throw an exception that is handled by the register's caller function. We still have one problem, when we got some exception in the &lt;em&gt;.register()&lt;/em&gt; method (our main method), we don't treat this with rollback, so we just have to add a &lt;em&gt;.then()&lt;/em&gt; and a &lt;em&gt;.catch()&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CashRegisterService&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;sequelize&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;cashRegister&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;CashRegister&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;upsert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;cashRegister&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Error when trying populate Cash Register&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;associateProductLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cashRegister&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;associateTreatmentLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cashRegister&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;})).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rollback&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you think that there's something confusing, or impacting the understanding, or that i can improve, please i'm going to appreciate your feedback.&lt;/p&gt;

&lt;p&gt;See you guys&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>CSS Selectors: The Full Reference Guide üöÄ</title>
      <author>_ùô≤ùôæùô≥ùô¥</author>
      <pubDate>Wed, 23 Jun 2021 13:35:26 +0000</pubDate>
      <link>https://dev.to/underscorecode/css-selectors-the-full-reference-guide-3cbf</link>
      <guid>https://dev.to/underscorecode/css-selectors-the-full-reference-guide-3cbf</guid>
      <description>&lt;p&gt;Hello, everybody! üöÄ&lt;/p&gt;

&lt;p&gt;Today we'll be covering CSS selectors in depth.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of contents
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-is-a-css-selector"&gt;What is a selector in CSS?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#types-of-selectors"&gt;Types of selectors&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#universal-selector"&gt;Universal selector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#type-selector"&gt;Type selector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#class-selector"&gt;Class selector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#id-selector"&gt;ID selector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#attribute-selector"&gt;Attribute selector&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#grouping-selectors"&gt;Grouping selectors&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#group-selector"&gt;Group selector&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#combining-selectors"&gt;Combining selectors&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#descendant-combinator"&gt;Descendant combinator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#child-combinator"&gt;Child combinator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#general-sibling-combinator"&gt;General sibling combinator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#adj-sibling-combinator"&gt;Adjacent sibling combinator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#pseudo-classes"&gt;Pseudo-classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pseudo-elements"&gt;Pseudo-elements&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h1&gt;
  &lt;a href="#what-is-a-selector-in-css"&gt;
  &lt;/a&gt;
  What is a selector in CSS? &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;A CSS selector is a &lt;strong&gt;pattern&lt;/strong&gt; used to &lt;strong&gt;choose the HTML elements&lt;/strong&gt; that we want to &lt;strong&gt;style&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Speaking more technically, CSS selectors are able to &lt;strong&gt;select those HTML elements to which a style ruleset will be applied&lt;/strong&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#types-of-selectors"&gt;
  &lt;/a&gt;
  Types of selectors &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#1-universal-selector"&gt;
  &lt;/a&gt;
  1. Universal selector &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt; &lt;em&gt;*&lt;/em&gt; { style properties }&lt;/p&gt;

&lt;p&gt;This selector is represented by an &lt;strong&gt;asterisk&lt;/strong&gt; (*) and matches &lt;strong&gt;all the elements&lt;/strong&gt; in the HTML document.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Computer Science Eng.&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Mathematics&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Physics&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;coral&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This will apply a 1px solid coral border to all elements in the document.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hhcs9u2---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pljk80n8hmj0ihv68wdk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hhcs9u2---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pljk80n8hmj0ihv68wdk.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The border property shows very well the behavior of this selector. As you can observe in the image above, every element is now surrounded by a border, including the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; element and the &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; element. &lt;/p&gt;



&lt;p&gt;The universal selector is also used to &lt;strong&gt;avoid confusion&lt;/strong&gt; and make your code &lt;strong&gt;easier to read&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Let's take a look at the following examples:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="nd"&gt;:first-child&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;maroon&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="nd"&gt;:first-child&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;maroon&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;These two code snippets look both pretty much the same, right?&lt;/p&gt;

&lt;p&gt;Well, we only need to notice the &lt;strong&gt;blank space&lt;/strong&gt; between the type selector and the pseudo-class to realize that they're not exactly the same: the first one selects the first child of every &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element and the second one selects the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; elements that are first children themselves of another element.&lt;/p&gt;

&lt;p&gt;Don't panic yet, we'll be talking more in detail about &lt;strong&gt;pseudo-classes&lt;/strong&gt; and &lt;strong&gt;how selectors work&lt;/strong&gt; later on üôÇ&lt;/p&gt;

&lt;p&gt;For now, just keep in mind that in this example there are two different element selectors working together to apply a styling rule. Everything will make sense later. Promise.&lt;/p&gt;

&lt;p&gt;In any case, to distinguish one from the other and being able to see the blank space more clearly, &lt;strong&gt;we can make use of the universal selector&lt;/strong&gt;, as shown below:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nd"&gt;:first-child&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;maroon&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Speaking in terms of functionality, adding an asterisk symbol &lt;strong&gt;does nothing&lt;/strong&gt;, but it's useful to quickly &lt;strong&gt;identify the elements that are going to be targeted&lt;/strong&gt; and to keep your code &lt;strong&gt;neat and tidy&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#2-type-selector"&gt;
  &lt;/a&gt;
  2. Type selector &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt; &lt;em&gt;elemType&lt;/em&gt; { style properties }&lt;/p&gt;

&lt;p&gt;This selector matches &lt;strong&gt;all elements that belong to the specified type&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;A paragraph&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Another paragraph&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;One more paragraph&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;deeppink&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This will apply a font size of 1.5rem and a deep pink color to all &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; elements. Easy and direct.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jjVLGiSB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lajufuf1sxcuqf7qh7v1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jjVLGiSB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lajufuf1sxcuqf7qh7v1.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#3-class-selector"&gt;
  &lt;/a&gt;
  3. Class selector &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt; &lt;em&gt;.classname&lt;/em&gt; { style properties }&lt;/p&gt;

&lt;p&gt;This selector is represented by a &lt;strong&gt;period&lt;/strong&gt; (.) and matches &lt;strong&gt;all elements that contain the specified class&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"deeppink"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This is a deep pink paragraph&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"hotpink"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This is a hot pink paragraph&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"pink"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This is a regular pink paragraph&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"deeppink-bg"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This is a paragraph with a deep pink background&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"hotpink-bg"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This is a paragraph with a hot pink background&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"pink-bg"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This is a paragraph with a regular pink background&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.deeppink&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;deeppink&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.hotpink&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;hotpink&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.pink&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;pink&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.deeppink-bg&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;deeppink&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.hotpink-bg&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;hotpink&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.pink-bg&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;pink&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Group selector - Stay until the end to understand its
 behavior üòâ */&lt;/span&gt;
&lt;span class="nc"&gt;.deeppink-bg&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;.hotpink-bg&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;.pink-bg&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This will apply a different pink color variant to every &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element depending on the class they contain, styling either their text or their background.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ELbwokgu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jcqh7jakxg9aibe7jep4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ELbwokgu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jcqh7jakxg9aibe7jep4.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;Another way to specify a class selector is &lt;strong&gt;by appending the type of the element that contains the classname&lt;/strong&gt; in front of the regular class selector.&lt;/p&gt;

&lt;p&gt;Take a look at this example of a regular list:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"list-item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"list-item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"list-item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We could style every &lt;em&gt;list item&lt;/em&gt; like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.list-item&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Or like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="nc"&gt;.list-item&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Note that in this specific case it wouldn't be necessary to use this method because all the elements that contain the &lt;em&gt;list-item&lt;/em&gt; class are &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; elements, so appending the element type wouldn't make any difference .&lt;/p&gt;

&lt;p&gt;But let's have a look at this other example below:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;section&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"big"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;List of animals&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"big"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Cat&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"big"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Dog&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"big"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Monkey&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"big"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Dolphin&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"big"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Frog&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In this example, we have different types of elements referencing the same class, so, in order to apply &lt;strong&gt;different styling rules&lt;/strong&gt; to each of them, &lt;strong&gt;we need to specify the type of the elements&lt;/strong&gt; that contain that class. Otherwise, the elements won't be targeted properly and, consequently, the styles we're trying to apply won't be displayed as expected.&lt;/p&gt;

&lt;p&gt;So we should do something like the following to apply different rules depending on if the element is a heading or a paragraph:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="nc"&gt;.big&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;coral&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="nc"&gt;.big&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;orange&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---8ofQjZD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/it9a9k8vsyosjziprhbv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---8ofQjZD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/it9a9k8vsyosjziprhbv.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#4-id-selector"&gt;
  &lt;/a&gt;
  4. ID selector &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt; &lt;em&gt;#idname&lt;/em&gt; { style properties }&lt;/p&gt;

&lt;p&gt;This selector is represented by a &lt;strong&gt;hash&lt;/strong&gt; symbol (#) and matches &lt;strong&gt;the unique element that contains the specified id&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;table&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"users-table"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;th&amp;gt;&lt;/span&gt;Users&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;John Doe&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;Jane Doe&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;table&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"staff-table"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;th&amp;gt;&lt;/span&gt;Staff&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;Hannah Legend&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;Daniel Oaks&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Type selector */&lt;/span&gt;
&lt;span class="nt"&gt;table&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;/* ID selectors */&lt;/span&gt;
&lt;span class="nf"&gt;#users-table&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;#staff-table&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This will apply a black background color and a white text color to the table that matches the id &lt;em&gt;users-table&lt;/em&gt;, and a 1px solid black border to the table that matches the id &lt;em&gt;staff-table&lt;/em&gt;. Both of them receive a padding of 20px based on their type.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YBLdR7lz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lxf6mgk56mc7bz7xwfc6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YBLdR7lz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lxf6mgk56mc7bz7xwfc6.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; Even though HTML allows you to assign the same id value to several elements, &lt;strong&gt;you shouldn't ever do it&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If you need to apply the same style to a bunch of different elements, &lt;strong&gt;always use the class attribute&lt;/strong&gt;. You'll keep your code clean and will get rid of a possible confusion.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#5-attribute-selector"&gt;
  &lt;/a&gt;
  5. Attribute selector &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The attribute selector is more complex than the rest of the selectors and has &lt;strong&gt;several syntaxes&lt;/strong&gt; that can be applied to our HTML elements based on which &lt;strong&gt;condition&lt;/strong&gt; should be satisfied by them.&lt;/p&gt;

&lt;p&gt;In other words, it matches &lt;strong&gt;all the HTML elements which contain a specified attribute&lt;/strong&gt; and whose value for that attribute &lt;strong&gt;satisfies a given condition&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#attribute-selector-syntaxes"&gt;
  &lt;/a&gt;
  Attribute selector syntaxes
&lt;/h3&gt;
&lt;h3&gt;
  &lt;a href="#syntax-1"&gt;
  &lt;/a&gt;
  Syntax 1
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;[attr]&lt;/em&gt; { style properties }&lt;/p&gt;

&lt;p&gt;Matches elements with the &lt;strong&gt;specified attribute&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;nav&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Home&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/blog"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Blog&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/contact"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Contact&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/about"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;About&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Type selector */&lt;/span&gt;
&lt;span class="nt"&gt;nav&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;darkslategray&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Attribute selector */&lt;/span&gt;
&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;href&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This will apply a white color to every &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; element that contains the &lt;code&gt;href&lt;/code&gt; attribute, regardless of its value, and removes the underline.&lt;/p&gt;

&lt;p&gt;We're also styling the &lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt; element with a background color and some padding by making use of the type selector.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HXtAwOBa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gv6kb7j9gqb0bshhrft3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HXtAwOBa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gv6kb7j9gqb0bshhrft3.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#syntax-2"&gt;
  &lt;/a&gt;
  Syntax 2
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;[attr=value]&lt;/em&gt; { style properties }&lt;/p&gt;

&lt;p&gt;Matches elements whose &lt;strong&gt;value for &lt;em&gt;attr&lt;/em&gt; is exactly&lt;/strong&gt;  &lt;strong&gt;&lt;em&gt;value&lt;/em&gt;&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"username"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Username&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"username"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Username"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Password&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Password"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"text"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;chocolate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This will apply a chocolate text color to every &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element that has the &lt;code&gt;type&lt;/code&gt; attribute with an exact value of &lt;em&gt;text&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9g3kJiWp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/98clr2noel3w93i126t4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9g3kJiWp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/98clr2noel3w93i126t4.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;We could as well use this syntax to &lt;strong&gt;emulate the ID selector&lt;/strong&gt; (remember the example in section 4):&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"users-table"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"staff-table"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt; By using this attribute selector syntax, we are targeting elements that contain an &lt;em&gt;id&lt;/em&gt; attribute whose value is exactly &lt;em&gt;users-table&lt;/em&gt; or &lt;em&gt;staff-table&lt;/em&gt;. We're using this one syntax because an element can only have one &lt;em&gt;idname&lt;/em&gt;, so the value needs to be exact (=).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#syntax-3"&gt;
  &lt;/a&gt;
  Syntax 3
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;[attr~=value]&lt;/em&gt; { style properties }&lt;/p&gt;

&lt;p&gt;Matches elements whose &lt;strong&gt;value for &lt;em&gt;attr&lt;/em&gt; is a list of words separated by blanks and one of them is exactly&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;value&lt;/em&gt;&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en-gb en-us en-ca en-au en-nz"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Welcome!&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"fr-fr fr-ca fr-be"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Bienvenue!&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;~=&lt;/span&gt;&lt;span class="s1"&gt;"en-us"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;navy&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;~=&lt;/span&gt;&lt;span class="s1"&gt;"fr-fr"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This will apply a navy color to every &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element whose value for &lt;code&gt;lang&lt;/code&gt; is a list that contains the exact string &lt;em&gt;en-us&lt;/em&gt;. Same for all &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; elements whose value for &lt;code&gt;lang&lt;/code&gt; contains &lt;em&gt;fr-fr&lt;/em&gt;, applying a red color in this case.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EIFKMbEt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0qn0t4xfsmcp08kgjcwq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EIFKMbEt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0qn0t4xfsmcp08kgjcwq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;As well as the previous syntax, through which we could emulate the ID selector behavior, we can also use this one attribute syntax to &lt;strong&gt;emulate the behavior of the class selector&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;class&lt;/span&gt;&lt;span class="o"&gt;~=&lt;/span&gt;&lt;span class="s1"&gt;"list-item"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt; By using this attribute selector syntax, we are targeting elements that have a &lt;em&gt;class&lt;/em&gt; attribute whose value is a list that contains the string &lt;em&gt;list-item&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;We're using this specific syntax because an element can contain several classes and we're aiming at just one of them (~=). But even though the element had just one class, &lt;strong&gt;the value for the class attribute always acts like a list of values&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#syntax-4"&gt;
  &lt;/a&gt;
  Syntax 4
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;[attr|=value]&lt;/em&gt; { style properties }&lt;/p&gt;

&lt;p&gt;Matches elements whose &lt;strong&gt;value for &lt;em&gt;attr&lt;/em&gt; is exactly&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;value&lt;/em&gt;&lt;/strong&gt; &lt;strong&gt;or starts with&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;value&lt;/em&gt;&lt;/strong&gt; &lt;strong&gt;followed by a hyphen&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en-us"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Hello&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en-gb"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Hello&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;|=&lt;/span&gt;&lt;span class="s1"&gt;"en"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;cornflowerblue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;antiquewhite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This will apply a cornflower blue background color and an antique white text color to every &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element that has a &lt;code&gt;lang&lt;/code&gt; attribute whose value is exactly &lt;em&gt;en&lt;/em&gt; or starts with &lt;em&gt;en-&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P3SOBuOu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4hs7uwkhop6l34ae1ibe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P3SOBuOu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4hs7uwkhop6l34ae1ibe.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#syntax-5"&gt;
  &lt;/a&gt;
  Syntax 5
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;[attr^=value]&lt;/em&gt; { style properties }&lt;/p&gt;

&lt;p&gt;Matches elements whose &lt;strong&gt;value for &lt;em&gt;attr&lt;/em&gt; starts with&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;value&lt;/em&gt;&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#list1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Go to list 1&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#list2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Go to list 2&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;section&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Lists&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"list1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;List 1&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Milk&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Butter&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Eggs&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Sugar&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"list2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;List 2&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Oranges&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Lemons&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Strawberries&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Apples&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;href&lt;/span&gt;&lt;span class="o"&gt;^=&lt;/span&gt;&lt;span class="s1"&gt;"#"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;crimson&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This will apply a crimson color and a font size of 2rem to every &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; element that has a &lt;code&gt;href&lt;/code&gt; attribute whose value starts with &lt;em&gt;#&lt;/em&gt;.&lt;br&gt;
&lt;strong&gt;Output:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AxEpGji---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ej7ue7fvtvm7ml5cojma.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AxEpGji---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ej7ue7fvtvm7ml5cojma.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#syntax-6"&gt;
  &lt;/a&gt;
  Syntax 6
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;[attr$=value]&lt;/em&gt; { style properties }&lt;/p&gt;

&lt;p&gt;Matches elements whose &lt;strong&gt;value for &lt;em&gt;attr&lt;/em&gt; ends with&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;value&lt;/em&gt;&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"css-selectors-guide.pdf"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;CSS Selectors Guide&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;href&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;".pdf"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;slateblue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This will apply a slate blue color to every &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; element that has a &lt;code&gt;href&lt;/code&gt; attribute whose value ends with &lt;em&gt;.pdf&lt;/em&gt;.&lt;br&gt;
&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U-uhIl0z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vemqc0qkwnfbeacap4xr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U-uhIl0z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vemqc0qkwnfbeacap4xr.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#syntax-7"&gt;
  &lt;/a&gt;
  Syntax 7
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;[attr*=value]&lt;/em&gt; { style properties }&lt;/p&gt;

&lt;p&gt;Matches elements whose &lt;strong&gt;value for &lt;em&gt;attr&lt;/em&gt; contains at least one occurrence of&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;value&lt;/em&gt;&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"small-box"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This is a small box&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"big-box"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This is a big box&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;class&lt;/span&gt;&lt;span class="o"&gt;*=&lt;/span&gt;&lt;span class="s1"&gt;"box"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;burlywood&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This will apply a burlywood background color to every &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element that contains a &lt;code&gt;class&lt;/code&gt; attribute whose value has at least one occurrence of the string &lt;em&gt;box&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fW_s2XoF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v9ocd7x3jzxr5hc15chv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fW_s2XoF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v9ocd7x3jzxr5hc15chv.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#grouping-selectors"&gt;
  &lt;/a&gt;
  Grouping selectors &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Grouping selectors in CSS is basically used to &lt;strong&gt;put together&lt;/strong&gt; those elements of different type or with different id/classes that we want to apply the &lt;strong&gt;same style properties&lt;/strong&gt; to.&lt;/p&gt;

&lt;p&gt;Additionally, by using this technique, we'll get rid of redundancy and our code will be &lt;strong&gt;clean&lt;/strong&gt;, &lt;strong&gt;concise&lt;/strong&gt; and &lt;strong&gt;organized&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#group-selector"&gt;
  &lt;/a&gt;
  Group selector &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt; &lt;em&gt;elem1, ..., elemN&lt;/em&gt; { style properties }&lt;/p&gt;

&lt;p&gt;This selector is represented by a &lt;strong&gt;comma&lt;/strong&gt; (,) and matches &lt;strong&gt;all the elements stated in the list&lt;/strong&gt; and applies the same ruleset to all of them.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Computer Science Engineering&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;List of courses&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Algebra&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Calculus&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Physics&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Discrete Mathematics&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Introduction to Programming&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;darkred&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This will apply a dark red color to every &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Aow1sF9J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3hvbszl13m7vfy7f1uvm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Aow1sF9J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3hvbszl13m7vfy7f1uvm.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#combining-selectors"&gt;
  &lt;/a&gt;
  Combining selectors &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;CSS selectors can also be combined. By combining selectors, then we can define &lt;strong&gt;CSS combinators&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;CSS combinators are used to &lt;strong&gt;establish a relationship between different selectors&lt;/strong&gt; and are very useful to make your element selection &lt;strong&gt;more targeted&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#1-descendant-combinator"&gt;
  &lt;/a&gt;
  1. Descendant combinator &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt; &lt;em&gt;elem1 elem2&lt;/em&gt; { style properties }&lt;/p&gt;

&lt;p&gt;This combinator is represented by a &lt;strong&gt;single space&lt;/strong&gt; ( ) and matches &lt;strong&gt;all &lt;em&gt;elem2&lt;/em&gt; that are descendants of&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;elem1&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Consider the following navigation:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;nav&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&amp;gt;&lt;/span&gt;Home&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;a&amp;gt;&lt;/span&gt;People&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&amp;gt;&lt;/span&gt;Students&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;a&amp;gt;&lt;/span&gt;Faculty members&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;a&amp;gt;&lt;/span&gt;Discrete Mathematics&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;a&amp;gt;&lt;/span&gt;Programming&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;a&amp;gt;&lt;/span&gt;Physics&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;a&amp;gt;&lt;/span&gt;Algorithms&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&amp;gt;&lt;/span&gt;Staff members&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&amp;gt;&lt;/span&gt;About&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&amp;gt;&lt;/span&gt;Contact&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;nav&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;crimson&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;darkslateblue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This will apply a 1px solid crimson border, a dark slate blue color, a font size of 1.5rem and a bold font weight to every &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; element that is descendant of a &lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt; element, &lt;strong&gt;regardless of how nested they are&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NptW7b-H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2p6xm0nqrlni7anhvark.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NptW7b-H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2p6xm0nqrlni7anhvark.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#2-child-combinator"&gt;
  &lt;/a&gt;
  2. Child combinator &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt; &lt;em&gt;elem1 &amp;gt; elem2&lt;/em&gt; { style properties }&lt;/p&gt;

&lt;p&gt;This combinator is represented by a &lt;strong&gt;prompt&lt;/strong&gt; (&amp;gt;) and matches &lt;strong&gt;all &lt;em&gt;elem2&lt;/em&gt; that are direct children of&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;elem1&lt;/em&gt;&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"box"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This is a direct child of .box&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This is not a direct child of .box&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This is another direct child of .box&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.box&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;darkgoldenrod&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This will apply a dark golden color to every &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element that is a direct child of any element that has the class &lt;em&gt;box&lt;/em&gt;, so, in this HTML example, the first and last &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; elements will be selected, but not the one in the middle.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j_sHMKHA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hpmqn5iqgv3iob6w0bds.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j_sHMKHA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hpmqn5iqgv3iob6w0bds.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#3-general-sibling-combinator"&gt;
  &lt;/a&gt;
  3. General sibling combinator &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt; &lt;em&gt;elem1 ~ elem2&lt;/em&gt; { style properties }&lt;/p&gt;

&lt;p&gt;This combinator is represented by a &lt;strong&gt;tilde&lt;/strong&gt; (~) and matches &lt;strong&gt;all &lt;em&gt;elem2&lt;/em&gt; that are siblings to&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;elem1&lt;/em&gt;&lt;/strong&gt; &lt;strong&gt;and come after it&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"blue-mug.jpeg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"a regular blue coffee mug"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Blue mug&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Price: $15&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;darkblue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This will apply a dark blue color to every &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element which is a sibling of any &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; element and comes after it. In this example, both &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; elements will be selected.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XySZq72u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fzd07tw58z4i6dwq725o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XySZq72u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fzd07tw58z4i6dwq725o.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#4-adjacent-sibling-combinator"&gt;
  &lt;/a&gt;
  4. Adjacent sibling combinator &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt; &lt;em&gt;elem1 + elem2&lt;/em&gt; { style properties }&lt;/p&gt;

&lt;p&gt;This combinator is represented by a &lt;strong&gt;plus&lt;/strong&gt; symbol (+) and matches &lt;strong&gt;all &lt;em&gt;elem2&lt;/em&gt; that are siblings to&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;elem1&lt;/em&gt;&lt;/strong&gt; &lt;strong&gt;and appear immediately after it&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"blue-mug.jpeg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"a regular blue coffee mug"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Blue mug&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Price: $15&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;darkblue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In this case, only the first &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element will be selected, since the second one doesn't appear immediately after the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; element.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SllalOHu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6he4xnv2xj565trggu7p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SllalOHu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6he4xnv2xj565trggu7p.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#pseudoclasses"&gt;
  &lt;/a&gt;
  Pseudo-classes &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;A CSS pseudo-class is a keyword that is added to a selector and &lt;strong&gt;defines a special state&lt;/strong&gt; of the selected elements.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt; &lt;em&gt;elem:pseudo-class&lt;/em&gt; { style properties }&lt;/p&gt;

&lt;p&gt;This selector is represented by a &lt;strong&gt;colon&lt;/strong&gt; (:).&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Shopping list&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Milk&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Butter&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Eggs&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Sugar&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In this example, we're applying a black background color and a white text color to every &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element when the cursor hovers over it.&lt;/p&gt;

&lt;p&gt;Take a look at what happens when we hover over the &lt;em&gt;Butter&lt;/em&gt; element:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yGWZUQuI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kadphf9gvfhu0hab6vlc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yGWZUQuI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kadphf9gvfhu0hab6vlc.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Some of the &lt;strong&gt;most common CSS pseudo-classes&lt;/strong&gt; are:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;:active&lt;/code&gt;, &lt;code&gt;:hover&lt;/code&gt;, &lt;code&gt;:focus&lt;/code&gt;, &lt;code&gt;:disabled&lt;/code&gt;, &lt;code&gt;:checked&lt;/code&gt;, &lt;code&gt;:first-child&lt;/code&gt;, &lt;code&gt;:nth-child&lt;/code&gt;, &lt;code&gt;:first-of-type&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#pseudoelements"&gt;
  &lt;/a&gt;
  Pseudo-elements &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;A CSS pseudo-element is a keyword that is added to a selector to &lt;strong&gt;style a specific part&lt;/strong&gt; of the selected elements.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt; &lt;em&gt;elem:pseudo-element&lt;/em&gt; { style properties }&lt;/p&gt;

&lt;p&gt;This selector is represented by a &lt;strong&gt;double colon&lt;/strong&gt; (::).&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;CODE&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"_"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In this example, we're appending an underscore symbol in front of every &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z0vBDXSF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7p6dm0v4obsehzpedvf8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z0vBDXSF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7p6dm0v4obsehzpedvf8.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Some of the &lt;strong&gt;most common CSS pseudo-elements&lt;/strong&gt; are:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;::after&lt;/code&gt; (can also be written as &lt;code&gt;:after&lt;/code&gt;), &lt;code&gt;::before&lt;/code&gt; (can also be written as &lt;code&gt;:before&lt;/code&gt;), &lt;code&gt;::marker&lt;/code&gt;, &lt;code&gt;::placeholder&lt;/code&gt;, &lt;code&gt;::first-letter&lt;/code&gt;.&lt;/p&gt;



&lt;p&gt;And that's pretty much it üôÇ&lt;/p&gt;

&lt;p&gt;I hope this reference guide has been helpful for you.&lt;/p&gt;

&lt;p&gt;You can also check out the following related posts about CSS selectors on &lt;a href="https://instagram.com/underscorecode"&gt;@underscorecode&lt;/a&gt; Instagram account:&lt;/p&gt;


&lt;div class="instagram-position"&gt;
  &lt;iframe id="instagram-liquid-tag" src="https://www.instagram.com/p/CP8znDHsMmV/embed/captioned"&gt;
  &lt;/iframe&gt;
  
&lt;/div&gt;

&lt;div class="instagram-position"&gt;
  &lt;iframe id="instagram-liquid-tag" src="https://www.instagram.com/p/CQErX0PMe1I/embed/captioned"&gt;
  &lt;/iframe&gt;
  
&lt;/div&gt;

&lt;div class="instagram-position"&gt;
  &lt;iframe id="instagram-liquid-tag" src="https://www.instagram.com/p/CQWagoQsEdV/embed/captioned"&gt;
  &lt;/iframe&gt;
  
&lt;/div&gt;






&lt;p&gt;üéâ Don't forget to follow &lt;a class="mentioned-user" href="https://dev.to/underscorecode"&gt;@underscorecode&lt;/a&gt;
 on &lt;a href="https://instagram.com/underscorecode"&gt;Instagram&lt;/a&gt; and &lt;a href="https://twitter.com/underscorecode"&gt;Twitter&lt;/a&gt; for more daily webdev content üñ•üñ§&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>beginners</category>
    </item>
    <item>
      <title>What is Developer Relations?</title>
      <author>Sarah Lean üè¥Û†ÅßÛ†Å¢</author>
      <pubDate>Wed, 23 Jun 2021 13:19:56 +0000</pubDate>
      <link>https://dev.to/techielass/what-is-developer-relations-2opn</link>
      <guid>https://dev.to/techielass/what-is-developer-relations-2opn</guid>
      <description>&lt;p&gt;I've been in Developer Relations (DevRel) for nearly two years and recently I've been doing some thinking, career planning, reflection and such.  And as part of that I've been doing some research on what others within the DevRel community do as part of their roles and their career paths etc.  But I've also been doing some research with a wider audience and I found that some folks weren't sure what Developer Relations or had never heard of it.  So I thought it would be good to give you my definition of it.&lt;br&gt;&lt;br&gt;
Especially as I'm not a developer, but an IT Pro! üòâ&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#so-what-is-it"&gt;
  &lt;/a&gt;
  So what is it?
&lt;/h3&gt;

&lt;p&gt;Developer Relations or DevRel as you'll sometimes hear it referred to is the department or umbrella term within a company that is responsible for helping to build a community and help that community.  Under this department you'll find Advocacy, Events, Community Management, Content, Documentation and a lot more...   And obviously every company will define their Developer Relations department differently, so it might not include all those things. üòâ&lt;/p&gt;

&lt;p&gt;Developer Relations is something that's relatively new, but when we think of technical community engagement it's been around since like the 50s or 60s.  Developer Relations isn't trying to reinvent the wheel in that space, it's just trying to make it better.  And as things evolve terminology has changed as well. &lt;/p&gt;

&lt;p&gt;Again every company will have their own definition and goals for Developer Relations, but ultimately that department within the company should help to represent the external community, helping to give the feedback, concerns, suggestions that that community has back into the company to help make things better or understand where the education/content gaps are and improve them. &lt;/p&gt;

&lt;p&gt;Connecting the dots essentially. &lt;/p&gt;

&lt;p&gt;For me there are four key principles that Developer Relations should revolve around, and this is what drives me.  Others in the Developer Relations space might be different. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Community&lt;/strong&gt; - being involved, helping organise conferences etc&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Awareness&lt;/strong&gt; - helping to show the companies' product(s), mission and how those products can be used&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Feedback&lt;/strong&gt; - taking feedback from the audience back to the engineering team and vice versa&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Education&lt;/strong&gt; - helping audiences understand the companies' product(s) or even just understanding the industry and answering their questions&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#its-not-sales-or-marketing"&gt;
  &lt;/a&gt;
  It's not sales or marketing
&lt;/h3&gt;

&lt;p&gt;For me it's not about selling or about being a marketer.  It's about helping people to solve their problems or understand the use cases of a product or technology.  Developer Relations shouldn't be an extension of the company's sales team or marketing team. &lt;/p&gt;

&lt;p&gt;Yes you can work with these departments within your company to help each other and offer suggestions to make everything better. &lt;br&gt;
Again for me for a Developer Relations department to be truly successful, and trusted by the community it needs to sit separately from the sales and marketing departments. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#only-for-developers"&gt;
  &lt;/a&gt;
  Only for developers?
&lt;/h3&gt;

&lt;p&gt;One misconception I've seen is that Developer Relations is only for developers and for me that's definitely not the case. Developer Relations is the industry term but it doesn't mean it's only about talking to developers.  It's about talking to the community, the audience. &lt;/p&gt;

&lt;p&gt;For each organisation that audience will be different.  At some organisations it's only developers that they will talk to because the product they have is only aimed at developers.  For an organisation like Microsoft though, which is where I work, the audience is quite extensive, covering developers, IT Pros, business decision makers, database administrators, and well everyone else within the IT department. üëç&lt;/p&gt;

&lt;p&gt;It's ultimately about helping those that need help, regardless of their job title. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#advocacy"&gt;
  &lt;/a&gt;
  Advocacy
&lt;/h3&gt;

&lt;p&gt;I've also seen a lot of confusion over what job titles look like in Developer Relations.  Now there are a lot of different roles within Developer Relations, but you'll often see folks on Social Media and LinkedIn call themselves Cloud Advocate, Developer Advocate, Cloud Developer Advocate.  Those to me, are all the same role but with different word combinations. üòä&lt;/p&gt;

&lt;p&gt;These are often the folk that are most visible from a Developer Relations point of view, they'll be the people speaking at events, active on Social Media etc. &lt;/p&gt;

&lt;p&gt;At Microsoft we have a lot of Cloud Advocates that are geographically spread out and cover a variety of subject matters. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#technical"&gt;
  &lt;/a&gt;
  Technical
&lt;/h3&gt;

&lt;p&gt;Again another thing that has to happen for the Developer Relations department to be successful is to have people who have been there and done it, who are technical, who have experience of what they are talking about.  &lt;/p&gt;

&lt;p&gt;Some of the best Advocates I've seen help the community and be successful at their role are folks who have been in the IT industry for years and have experience of implementing IT systems, running them, building software etc. They know what they are talking about.  They aren't just talking heads who are pushed out onto stage when the company want, they are they because they have the skills, experience and passion to be out on that stage. &lt;/p&gt;

&lt;p&gt;But they also have to have the "soft skills" in their toolset as well.  Being able to relate to people, talk to them and understand how to communicate the knowledge across.  You don't need to be an extrovert but you do have to be able to interact with people. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#me-as-an-advocate"&gt;
  &lt;/a&gt;
  Me as an Advocate
&lt;/h3&gt;

&lt;p&gt;For me as an Advocate within a Developer Relations team, it can be hard sometimes as I'm not a Developer, I'm a Sys Admin/IT Pro/Operations person so it can be tricky trying to explain to people what my role and why I'm under that Developer Relations umbrella.  But for me I do this role because I want to help people, make their lives easier if I can, even if that means taking hard feedback back to our engineering teams.  My job isn't to sell, it's to help. &lt;/p&gt;

&lt;p&gt;It can be a LOT of work to create content, people don't see the hours spent in meetings, Camtasia, PowerPoint, Word, Photoshop, Premiere Pro that are required to write that blog, create that video, or create that Twitter thread.  Some weeks I do spend more time within PowerPoint than within Azure or doing anything "technical".  But it's part and parcel of the job, and it's no less important than the technical parts. &lt;/p&gt;

&lt;p&gt;If you've got any questions please do reach out to me!&lt;/p&gt;

</description>
      <category>devrel</category>
      <category>discuss</category>
      <category>career</category>
    </item>
    <item>
      <title>Escalando aplica√ß√µes automaticamente no Kubernetes usando KEDA</title>
      <author>Willian C√©sar</author>
      <pubDate>Wed, 23 Jun 2021 13:18:01 +0000</pubDate>
      <link>https://dev.to/willianccs/escalando-aplicacoes-automaticamente-no-kubernetes-usando-keda-c41</link>
      <guid>https://dev.to/willianccs/escalando-aplicacoes-automaticamente-no-kubernetes-usando-keda-c41</guid>
      <description>&lt;p&gt;Para quem ainda n√£o conhece o &lt;a href="https://keda.sh/"&gt;KEDA (Kubernetes Event-Driven Autoscaling)&lt;/a&gt;, √©:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Um componente leve e de finalidade √∫nica que pode ser adicionado a qualquer cluster do Kubernetes. Funciona junto com componentes Kubernetes padr√£o, como o Horizontal Pod Autoscaler (HPA) e pode estender a funcionalidade sem sobrescrever ou duplica√ß√£o.&lt;br&gt;
Retirado da documenta√ß√£o oficial&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Foi lan√ßado no fim de 2019 &lt;a href="https://cloudblogs.microsoft.com/opensource/2019/11/19/keda-1-0-release-kubernetes-based-event-driven-autoscaling/"&gt;(an√∫ncio oficial)&lt;/a&gt; e √© fruto de uma parceria entre Microsoft &amp;amp; Red Hat.&lt;/p&gt;

&lt;p&gt;E ele cumpre bem o lema, que √©: &lt;strong&gt;‚ÄúApplication autoscaling made simple‚Äù&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Nativamente o Kubernetes s√≥ permite configurar &lt;a href="https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/"&gt;HPA&lt;/a&gt; com as m√©tricas de CPU e mem√≥ria.&lt;br&gt;
Se quiser escalar as aplica√ß√µes utilizando outro tipo de m√©trica, por exemplo, lags de eventos ou filas, voc√™ precisa primeiro criar um adaptador de m√©tricas (custom metrics) para extrair as m√©tricas da fonte desejada. Entretanto se  precisar obter m√©tricas de v√°rias fontes usando v√°rios adaptadores, voc√™ est√° sem sorte porque apenas um por vez √© compat√≠vel (a menos que tenha mudado recentemente).&lt;/p&gt;

&lt;p&gt;J√° o KEDA extrai de uma &lt;a href="https://keda.sh/docs/2.3/scalers/"&gt;variedade de fontes&lt;/a&gt; e dimensiona automaticamente suas implanta√ß√µes de &lt;code&gt;0&lt;/code&gt; a &lt;code&gt;N-inst√¢ncias&lt;/code&gt; com base em sua configura√ß√£o no ScaledObject.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sbBw_34S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sav8cxq4lajkb3tfo7bk.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sbBw_34S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sav8cxq4lajkb3tfo7bk.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Outro ponto interessante √© que o KEDA n√£o ‚Äúreinventa a roda‚Äù e n√£o construiu seu pr√≥prio mecanismo de escalonamento, se aproveitando de HPAs do Kubernetes e dos secrets (&lt;strong&gt;TriggerAuthentication&lt;/strong&gt;) j√° usados pelas aplica√ß√µes.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#instalando-o-keda"&gt;
  &lt;/a&gt;
  INSTALANDO O KEDA
&lt;/h2&gt;

&lt;p&gt;As instru√ß√µes para implantar o KEDA s√£o muito simples e podem ser encontradas &lt;a href="https://keda.sh/docs/2.3/deploy/"&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Existem tr√™s maneiras de implantar KEDA em seu cluster Kubernetes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Helm charts&lt;/li&gt;
&lt;li&gt;Operator Hub&lt;/li&gt;
&lt;li&gt;Implantar YAMLs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Vamos usar a primeira op√ß√£o.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;helm repo add kedacore https://kedacore.github.io/charts
helm repo update

kubectl create ns keda
helm install keda kedacore/keda --namespace keda
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ap√≥s a instala√ß√£o teremos 2 deployments (KEDA Operator e KEDA Metrics API) rodando no cluster‚Ä¶&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl get deployment -n keda
NAME                              READY   UP-TO-DATE   AVAILABLE   AGE
keda-operator                     1/1     1            1           1h
keda-operator-metrics-apiserver   1/1     1            1           1h
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;e mais alguns CRDs dispon√≠veis:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl api-resources --api-group=keda.sh
NAME                     SHORTNAMES       APIGROUP   NAMESPACED   KIND
scaledjobs               sj               keda.sh    true         ScaledJob
scaledobjects            so               keda.sh    true         ScaledObject
triggerauthentications   ta,triggerauth   keda.sh    true         TriggerAuthentication
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;ScaledJobs*/ScaledObject&lt;/strong&gt;: Os ScaledJobs/ScaledObjects mapeiam uma fonte de evento para a jobs/deployments que voc√™ deseja dimensionar.&lt;br&gt;
&lt;strong&gt;TriggerAuthentication&lt;/strong&gt;: Se necess√°rio, este recurso cont√©m a configura√ß√£o de autentica√ß√£o necess√°ria para monitorar a origem do evento.&lt;/p&gt;

&lt;p&gt;O "ScaledObject" tamb√©m cria o HPA para voc√™.&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;O KEDA n√£o apenas dimensiona deployments, mas tamb√©m pode dimensionar seus jobs do Kubernetes. Em vez de ter muitos eventos processados ‚Äã‚Äãem sua implanta√ß√£o e aumentar ou diminuir com base no n√∫mero de mensagens que precisam ser consumidas, o KEDA pode ativar um trabalho para cada mensagem na origem do evento.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#exemplo-com-kafka"&gt;
  &lt;/a&gt;
  EXEMPLO COM KAFKA
&lt;/h2&gt;

&lt;p&gt;Vamos dar uma olhada mais de perto no &lt;a href="https://keda.sh/docs/2.3/concepts/scaling-deployments/"&gt;ScaledObject&lt;/a&gt; e &lt;a href="https://keda.sh/docs/2.3/scalers/apache-kafka/"&gt;Kafka trigger&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apiVersion: keda.sh/v1alpha1
kind: ScaledObject
metadata:
  name: kafka-consumer-scaler
  labels:
    deploymentName: my-kafka-consumer-service
  namespace: sample
spec:
  scaleTargetRef:
    deploymentName: my-kafka-consumer-service
  pollingInterval: 1        # Optional. Default: 30 seconds
  cooldownPeriod:  30       # Optional. Default: 300 seconds
  minReplicaCount: 0        # Optional. Default: 0
  maxReplicaCount: 10   # Optional. Default: 100
  triggers:
    - type: kafka
      metadata:
        topic: test-topic-1
        # brokerList: my-cluster-kafka-bootstrap.kafka:9092 - deprecated
        bootstrapServers: my-cluster-kafka-bootstrap.kafka:9092    
        consumerGroup: my-kafka-consumerGroup
        lagThreshold: '5'       # Default: 10
        offsetResetPolicy: latest
        allowIdleConsumers: false
      authenticationRef:
        name: keda-trigger-auth-kafka-credential
    ## Optional: list of topics to trigger
    #- type: kafka
    #   metadata:
    #     topic: test-topic-2
    #     bootstrapServers: my-cluster-kafka-bootstrap.kafka:9092    
    #     consumerGroup: my-kafka-consumerGroup
    #     lagThreshold: '5'     # Default: 10
    #     offsetResetPolicy: latest
    #     allowIdleConsumers: false
    #   authenticationRef:
    #     name: keda-trigger-auth-kafka-credential
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;O ScaledObject, TriggerAuthentication e a implanta√ß√£o referenciada em deploymentName precisam estar no mesmo namespace.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Apesar de serem valores opcionais, √© importante definir valores dentro dos padr√µes para seu neg√≥cio nos par√¢metros &lt;code&gt;minReplicaCount&lt;/code&gt; e &lt;code&gt;maxReplicaCount&lt;/code&gt;. Para evitar rebalanceamento de parti√ß√µes no Kafka E/OU evitar que muitos pods sejam iniciados - consumindo todos os recursos do cluster üí•.&lt;/li&gt;
&lt;li&gt;O par√¢metro &lt;code&gt;offsetResetPolicy&lt;/code&gt; pode ser earliest ou latest. Como o KEDA vai percorrer todos os t√≥picos, vale a pena entender como o c√≥digo (neg√≥cio) se comporta com duplicidade de eventos. &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Por padr√£o, o n√∫mero de r√©plicas n√£o exceder√° o n√∫mero de parti√ß√µes em um t√≥pico. Ou seja, se maxReplicaCount for definido mais do que o n√∫mero de parti√ß√µes, o escalonador n√£o vai atingir o valor definido. Caso queira mudar este comportamento, ajuste o par√¢metro &lt;code&gt;allowIdleConsumers&lt;/code&gt; para &lt;code&gt;true&lt;/code&gt;. Por√©m, se houver mais n√∫mero de consumidores do que n√∫mero de parti√ß√µes em um t√≥pico, o consumidor extra ter√° que ficar ocioso.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Para facilitar criamos um usu√°rio no Kafka com permiss√£o de somente leitura (&lt;code&gt;list&lt;/code&gt; e &lt;code&gt;describe&lt;/code&gt;) em todos os grupos e t√≥picos e referenciamos no TriggerAuthentication o &lt;strong&gt;secret&lt;/strong&gt; com este usu√°rio:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apiVersion: keda.sh/v1alpha1
kind: TriggerAuthentication
metadata:
  name: keda-trigger-auth-kafka-credential
  namespace: sample
spec:
  secretTargetRef:
  - key: sasl
    name: keda-credentials
    parameter: sasl
  - key: username
    name: keda-credentials
    parameter: username
  - key: password
    name: keda-credentials
    parameter: password
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#refer%C3%AAncias"&gt;
  &lt;/a&gt;
  REFER√äNCIAS:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://keda.sh/docs/2.3/"&gt;https://keda.sh/docs/2.3/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/"&gt;https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cloudblogs.microsoft.com/opensource/2020/04/06/kubernetes-event-driven-autoscaling-keda-cncf-sandbox-project/"&gt;https://cloudblogs.microsoft.com/opensource/2020/04/06/kubernetes-event-driven-autoscaling-keda-cncf-sandbox-project/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://keda.sh/resources/"&gt;https://keda.sh/resources/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#agradecimentos"&gt;
  &lt;/a&gt;
  AGRADECIMENTOS
&lt;/h2&gt;

&lt;p&gt;Obrigado √† &lt;a href="https://twitter.com/lipekis/status/1407064351010398208?s=20"&gt;todos os envolvidos&lt;/a&gt; que me incentivaram a escrever este artigo e revisaram o texto:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Felipe Lamar√£o Silva (@lipekis)&lt;/li&gt;
&lt;li&gt;Willian Itiho (@Willian_Itiho)&lt;/li&gt;
&lt;li&gt;Rafael Gomes (&lt;a class="mentioned-user" href="https://dev.to/gomex"&gt;@gomex&lt;/a&gt;
)&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>kubernetes</category>
      <category>keda</category>
    </item>
  </channel>
</rss>
