<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>JavaScript Loops And How To Use Them</title>
      <author>bo-iliev</author>
      <pubDate>Tue, 23 Feb 2021 08:30:43 +0000</pubDate>
      <link>https://dev.to/boiliev/javascript-loops-and-how-to-use-them-kfp</link>
      <guid>https://dev.to/boiliev/javascript-loops-and-how-to-use-them-kfp</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;When most people get asked if they know all the loops in JavaScript, the usual answer is 'The &lt;em&gt;while&lt;/em&gt; and &lt;em&gt;for&lt;/em&gt; loop. I know them all!'. Well, what if I told you that these aren't the only ones. There are &lt;strong&gt;five&lt;/strong&gt; in total JS loops. &lt;/p&gt;

&lt;p&gt;In this post we are going to see every one of these loops in action and when you are going to need to use them. &lt;/p&gt;

&lt;p&gt;In each example we are going to show today, our goal is to print out(console.log) the numbers from 1 to 10. Let's start by our trusty:&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#while-loop" class="anchor"&gt;
  &lt;/a&gt;
  While Loop
&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;while&lt;/code&gt; loop is probably the first loop that anybody learns when they start using JavaScript. It is used by many because of how simple it is. It goes a little something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let i = 0
while(i &amp;lt; 10){
    i++;
    console.log(i)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The code that we wrote keeps running until the condition isn't met anymore. So in the example above when the variable &lt;code&gt;i&lt;/code&gt; hits 10, the &lt;code&gt;while&lt;/code&gt; loop will end.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#for-loop" class="anchor"&gt;
  &lt;/a&gt;
  For Loop
&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;for&lt;/code&gt; loop is probably the most used loop in JS. This loop repeats a certain block when a condition is met. Here is a quick example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for(i = 1; i &amp;lt;= 10; i++){
    console.log(i);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the &lt;code&gt;for&lt;/code&gt; loop we first have to initialize the counter variable. What this means is we have to set the value of the var before the first execution of the code in our loop(&lt;code&gt;i = 1&lt;/code&gt;). Then we have to set our condition for the loop(&lt;code&gt;i &amp;lt;= 10&lt;/code&gt;). When the condition is met, it goes through the code once and comes back around, and it does that until the condition isn't met anymore. And finally, we have to increment our variable so that each time we loop we get a new value(&lt;code&gt;i++&lt;/code&gt;). We certainly wouldn't want to get stuck in an infinite loop.&lt;/p&gt;

&lt;p&gt;Now let's get to the lesser-known loops.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#dowhile-loop" class="anchor"&gt;
  &lt;/a&gt;
  Do...While Loop
&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;do...while&lt;/code&gt; loop is a variant of the &lt;code&gt;while&lt;/code&gt; loop. It's just turned the other way around.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let i = 0
do{
    i++;
    console.log(i);
}
while(i &amp;lt; 10)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It's pretty straightforward. It's just like the &lt;code&gt;while&lt;/code&gt; loop, you just start with the code that you want to have executed and then the condition that you want to have met. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Important Note!!!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The code in this loop is evaluated at the end of the loop, unlike the &lt;code&gt;while&lt;/code&gt; loop. So the code will always be executed one more time extra, even when the condition isn't met.&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#forin-loop" class="anchor"&gt;
  &lt;/a&gt;
  For...In Loop
&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;for...in&lt;/code&gt; is a special type of loop that iterates over the properties of an object.&lt;/p&gt;

&lt;p&gt;The goal for our last two loops is to print out the members of The Beatles.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let beatles = {
'Paul': 'McCartney',
'John': 'Lennon',
'George': 'Harrison',
'Ringo': 'Starr'
}

for(let member in beatles){
    console.log(member + beatles[member]);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The loop counter in the for-in loop is a string, not a number. It contains the name of the current property.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#forof-loop" class="anchor"&gt;
  &lt;/a&gt;
  For...Of Loop
&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;for...of&lt;/code&gt; loop does the same thing as the &lt;code&gt;for...in&lt;/code&gt; loop pretty much. It iterates over the elements of an array. It also executes the code for each of the elements of the index of the array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let beatles = ['Paul', 'John', 'George', 'Ringo']

for(let member of beatles){
    console.log(member);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Another important note to remember!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This loop doesn't work with objects like the for-in loop, because they are not iterable. &lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;These are all of the loops in JavaScript. Of course, the ones that you are going to use the most are the &lt;code&gt;for&lt;/code&gt; and &lt;code&gt;while&lt;/code&gt; loop. The &lt;code&gt;for...of&lt;/code&gt; loop is used all the time, while the &lt;code&gt;for...in&lt;/code&gt; loop is pretty uncommon these days. And for the &lt;code&gt;do...while&lt;/code&gt; loop, well, there isn't much to say. It isn't used that often. You will rarely want to execute a loop when a condition isn't met.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>Some important HTML tags, one should know about</title>
      <author>Aman Kumar Singh</author>
      <pubDate>Tue, 23 Feb 2021 06:09:57 +0000</pubDate>
      <link>https://dev.to/amankumarsingh01/html-tags-nobody-is-talking-about-2d8i</link>
      <guid>https://dev.to/amankumarsingh01/html-tags-nobody-is-talking-about-2d8i</guid>
      <description>&lt;p&gt;There are some html tags which is which is lesser talked but has potential to reduce the developer headache.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-lazy-loading-the-image" class="anchor"&gt;
  &lt;/a&gt;
  1. Lazy loading the image
&lt;/h1&gt;

&lt;p&gt;Lazy loading is a strategy to identify resources as non-blocking (non-critical) and load these only when needed. It's a way to shorten the length of the critical rendering path, which translates into reduced page load times.&lt;/p&gt;

&lt;p&gt;Lazy loading can occur on different moments in the application, but it typically happens on some user interactions such as scrolling and navigation. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;img src = "image.jpeg" alt = "Image" loading="lazy" /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This also works like magic with iframe and is supported in most of the browsers.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-picture-tag" class="anchor"&gt;
  &lt;/a&gt;
  2. Picture tag
&lt;/h1&gt;

&lt;p&gt;The HTML  element contains zero or more  elements and one &lt;a href="" class="article-body-image-wrapper"&gt;&lt;img&gt;&lt;/a&gt; element to offer alternative versions of an image for different display/device scenarios.&lt;/p&gt;

&lt;p&gt;The browser will consider each child  element and choose the best match among them. If no matches are found—or the browser doesn't support the  element—the URL of the &lt;a href="" class="article-body-image-wrapper"&gt;&lt;img&gt;&lt;/a&gt; element's src attribute is selected. The selected image is then presented in the space occupied by the &lt;a href="" class="article-body-image-wrapper"&gt;&lt;img&gt;&lt;/a&gt; element.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;picture&amp;gt;
    &amp;lt;source srcset="image800px.png"
            media="(min-width: 800px)"&amp;gt;
    &amp;lt;img src="imagedefault.png" alt="" /&amp;gt;
&amp;lt;/picture&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;This is supported by every browser except Internet Explorer.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#3-httpequiv-refresh" class="anchor"&gt;
  &lt;/a&gt;
  3 http-equiv= “refresh”
&lt;/h1&gt;

&lt;p&gt;I just want to discuss a usecase for this &lt;br&gt;
Suppose when a user first comes to your website, and you want to show him some loading screen for few seconds to pre-fetch content for a better user experience. In this case it is very useful.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;meta http-equiv="refresh" content="30; www.streamstyle.live"&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;this will redirect to streamstyle after 30 sec&lt;/p&gt;

&lt;p&gt;Instructions for content attribute:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The number of seconds until the page should be reloaded - only if the &lt;strong&gt;content&lt;/strong&gt; attribute contains a positive integer.&lt;/p&gt;

&lt;p&gt;The number of seconds until the page should redirect to another - only if the &lt;strong&gt;content&lt;/strong&gt; attribute contains a positive integer followed by the string ';url=', and a valid URL.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;
  &lt;a href="#4-progress" class="anchor"&gt;
  &lt;/a&gt;
  4. Progress
&lt;/h1&gt;

&lt;p&gt;The  tag represents the completion progress of a task.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;progress id="file" value="32" max="100"&amp;gt; 32% &amp;lt;/progress&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#5-datalist" class="anchor"&gt;
  &lt;/a&gt;
  5. Datalist
&lt;/h1&gt;

&lt;p&gt;The HTML  element contains a set of  elements that represent the permissible or recommended options available to choose from within other controls.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;label for="ice-cream-choice"&amp;gt;Choose a flavor:&amp;lt;/label&amp;gt;
&amp;lt;input list="ice-cream-flavors" id="ice-cream-choice" name="ice-cream-choice" /&amp;gt;

&amp;lt;datalist id="ice-cream-flavors"&amp;gt;
    &amp;lt;option value="Chocolate"&amp;gt;
    &amp;lt;option value="Coconut"&amp;gt;
    &amp;lt;option value="Mint"&amp;gt;
    &amp;lt;option value="Strawberry"&amp;gt;
    &amp;lt;option value="Vanilla"&amp;gt;
&amp;lt;/datalist&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;I Think Html and css is very powerful, and these can be used to inject life in some good websites just by using these two. Despite of heavy usage in industry many people don't dive in deep.&lt;/p&gt;

&lt;p&gt;Hope you enjoyed reading my article!&lt;/p&gt;

</description>
      <category>react</category>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Build mock-server with Reactend in one touch</title>
      <author>Orkhan Jafarov</author>
      <pubDate>Mon, 22 Feb 2021 22:55:59 +0000</pubDate>
      <link>https://dev.to/orkhanjafarovr/build-mock-server-with-reactend-in-one-touch-3n88</link>
      <guid>https://dev.to/orkhanjafarovr/build-mock-server-with-reactend-in-one-touch-3n88</guid>
      <description>&lt;p&gt;Hey there,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/reactend/reactend-express"&gt;&lt;strong&gt;Reactend&lt;/strong&gt;&lt;/a&gt; is still in experimental mode, but it's ready to go as a mock-server for now. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-mockserver-" class="anchor"&gt;
  &lt;/a&gt;
  What is mock-server ?
&lt;/h3&gt;

&lt;p&gt;Most of you know about it. But for any case I'll describe it. &lt;strong&gt;Mock-server&lt;/strong&gt; is a http-server with fake/mock data. Before you build your frontend, you need to have a backend that responses you data you need. In case if you're backend is not ready yet.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-can-reactend-help-you-" class="anchor"&gt;
  &lt;/a&gt;
  How can Reactend help you ?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;It provides you declarative way to build your http-server&lt;/li&gt;
&lt;li&gt;It uses &lt;a href="https://github.com/Marak/faker.js"&gt;faker.js&lt;/a&gt; inside that has a lot of fake &lt;a href="https://rawgit.com/Marak/faker.js/master/examples/browser/index.html"&gt;data methods&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Implement with any (Get, Post, Put and etc.) methods&lt;/li&gt;
&lt;li&gt;One touch run&lt;/li&gt;
&lt;li&gt;One tiny app file&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#how-it-looks-like" class="anchor"&gt;
  &lt;/a&gt;
  How it looks like?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H-yzxlCH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m7fgjtmsiuq7fyeruf11.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H-yzxlCH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m7fgjtmsiuq7fyeruf11.png" alt="mock-server reactend"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#lets-create-simple-mockserver" class="anchor"&gt;
  &lt;/a&gt;
  Let's create simple mock-server
&lt;/h3&gt;

&lt;p&gt;To start building with Reactend, you should run this or clone &lt;a href="https://github.com/reactend/reactend-faker-template"&gt;this repo&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-reactend my-app --template faker
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We need to mock:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Sign-up&lt;/strong&gt; and &lt;strong&gt;Sign-in&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Get user data&lt;/li&gt;
&lt;li&gt;Get orders&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#modify-srcappjs-to-base-app-structure" class="anchor"&gt;
  &lt;/a&gt;
  Modify src/app.js to base app structure
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;registerApp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Logger&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@reactend/express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MockServerApp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Logger&lt;/span&gt; &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"dev"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Router&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/api"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Magic will be here */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;registerApp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;MockServerApp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#mock-singup-and-signin" class="anchor"&gt;
  &lt;/a&gt;
  Mock sing-up and sign-in
&lt;/h3&gt;

&lt;p&gt;We put this code in Router as children. There - &lt;code&gt;{/* Magic will be here */}&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Post&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/sign-up"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Content&lt;/span&gt; &lt;span class="na"&gt;json&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;success&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Post&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/sign-in"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Header&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"AuthToken"&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"tokentokentoken"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Content&lt;/span&gt; &lt;span class="na"&gt;json&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;logged in&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#mock-user-data" class="anchor"&gt;
  &lt;/a&gt;
  Mock user data
&lt;/h3&gt;

&lt;p&gt;We use Res.Faker to get fake data, we will have user data with &lt;strong&gt;userId, profile and etc.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Post&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/user"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Faker&lt;/span&gt;
    &lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;random.uuid&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;isAdmin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name.findName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;avatar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;image.people&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;registeredAt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;date.past&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;on &lt;strong&gt;POST request&lt;/strong&gt; we got this json object&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"userId"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"26a3392f-d80c-4927-8f09-773f9979a6ea"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"isAdmin"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"profile"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"fullName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Enrique Moore"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"avatar"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"http://placeimg.com/640/480/people"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"registeredAt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2020-06-11T04:11:36.297Z"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#mock-users-order" class="anchor"&gt;
  &lt;/a&gt;
  Mock user's order
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Get&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/user/orders"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Faker&lt;/span&gt;
    &lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;random.uuid&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;commerce.productName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;commerce.color&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;qty&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;random.number&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;random.float&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Note. There're two props length (number of objects) and locale (default:en)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;on &lt;strong&gt;GET request&lt;/strong&gt; we got this json object&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"b2cab08e-ab41-4db4-a6ca-cafe4ae53812"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Sleek Frozen Bike"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"color"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"turquoise"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"qty"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;25725&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"price"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;37197.2&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"a0eadf9f-89d2-4d9d-8b10-069c72a43337"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Handmade Rubber Computer"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"color"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"tan"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"qty"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;56871&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"price"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;192.09&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;....&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#merge-them-all" class="anchor"&gt;
  &lt;/a&gt;
  Merge them all
&lt;/h2&gt;

&lt;p&gt;Now we have simple mock-server to work with our frontend part. We can get response  when we login, sing up, get user data and user's orders. We can even select locale, just need to pass locale prop in Res.Faker. ex. &lt;code&gt;&amp;lt;Res.Faker locale="az" ...&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;registerApp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@reactend/express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MockServerApp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Logger&lt;/span&gt; &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"dev"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Router&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/api"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Post&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/sign-up"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Content&lt;/span&gt; &lt;span class="na"&gt;json&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;success&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Post&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/sign-in"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Header&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"AuthToken"&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"tokentokentoken"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Content&lt;/span&gt; &lt;span class="na"&gt;json&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;logged in&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Post&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/user"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Faker&lt;/span&gt;
          &lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;random.uuid&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;isAdmin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="na"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name.findName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="na"&gt;avatar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;image.people&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="na"&gt;registeredAt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;date.past&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Get&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/user/orders"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Faker&lt;/span&gt;
          &lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;random.uuid&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;commerce.productName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;commerce.color&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;qty&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;random.number&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;random.float&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;registerApp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;MockServerApp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;So, now you have your tiny mock-server (Hooray!)&lt;/p&gt;

&lt;p&gt;You can also check &lt;a href="https://github.com/reactend/reactend-express"&gt;Reactend repo&lt;/a&gt; and try playground on &lt;a href="http://repl.it"&gt;repl.it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;New features are coming for &lt;strong&gt;Reactend&lt;/strong&gt;, so keep updated!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>node</category>
    </item>
    <item>
      <title>React Clean Code - Simple ways to write better and cleaner code</title>
      <author>Tyler Hawkins</author>
      <pubDate>Mon, 22 Feb 2021 17:22:02 +0000</pubDate>
      <link>https://dev.to/thawkin3/react-clean-code-simple-ways-to-write-better-and-cleaner-code-2loa</link>
      <guid>https://dev.to/thawkin3/react-clean-code-simple-ways-to-write-better-and-cleaner-code-2loa</guid>
      <description>&lt;p&gt;Clean code is more than just working code. Clean code is easy to read, simple to understand, and neatly organized. In this article we’ll look at eight ways we can write cleaner React code.&lt;/p&gt;

&lt;p&gt;In going through these suggestions, it’s important to remember that that’s exactly what these are: suggestions. If you disagree with any of them, that’s completely fine. However, these are practices that I’ve found helpful in writing my own React code. Let’s dive in!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#1-conditional-rendering-only-for-one-condition" class="anchor"&gt;
  &lt;/a&gt;
  1. Conditional rendering only for one condition
&lt;/h2&gt;

&lt;p&gt;If you need to conditionally render something when a condition is &lt;code&gt;true&lt;/code&gt; and not render anything when a condition is &lt;code&gt;false&lt;/code&gt;, don’t use a ternary operator. Use the &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; operator instead.&lt;/p&gt;

&lt;p&gt;Bad example:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Good example:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#2-conditional-rendering-on-either-condition" class="anchor"&gt;
  &lt;/a&gt;
  2. Conditional rendering on either condition
&lt;/h2&gt;

&lt;p&gt;If you need to conditionally render one thing when a condition is &lt;code&gt;true&lt;/code&gt; and render a different thing when the condition is &lt;code&gt;false&lt;/code&gt;, use a ternary operator.&lt;/p&gt;

&lt;p&gt;Bad example:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Good example:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#3-boolean-props" class="anchor"&gt;
  &lt;/a&gt;
  3. Boolean props
&lt;/h2&gt;

&lt;p&gt;A truthy prop can be provided to a component with just the prop name without a value like this: &lt;code&gt;myTruthyProp&lt;/code&gt;. Writing it like &lt;code&gt;myTruthyProp={true}&lt;/code&gt; is unnecessary.&lt;/p&gt;

&lt;p&gt;Bad example:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Good example:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#4-string-props" class="anchor"&gt;
  &lt;/a&gt;
  4. String props
&lt;/h2&gt;

&lt;p&gt;A string prop value can be provided in double quotes without the use of curly braces or backticks.&lt;/p&gt;

&lt;p&gt;Bad example:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Good example:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#5-event-handler-functions" class="anchor"&gt;
  &lt;/a&gt;
  5. Event handler functions
&lt;/h2&gt;

&lt;p&gt;If an event handler only takes a single argument for the &lt;code&gt;Event&lt;/code&gt; object, you can just provide the function as the event handler like this: &lt;code&gt;onChange={handleChange}&lt;/code&gt;. You don't need to wrap the function in an anonymous function like this: &lt;code&gt;onChange={e =&amp;gt; handleChange(e)}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Bad example:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Good example:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#6-passing-components-as-props" class="anchor"&gt;
  &lt;/a&gt;
  6. Passing components as props
&lt;/h2&gt;

&lt;p&gt;When passing a component as a prop to another component, you don’t need to wrap this passed component in a function if the component does not accept any props.&lt;/p&gt;

&lt;p&gt;Bad example:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Good example:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#7-undefined-props" class="anchor"&gt;
  &lt;/a&gt;
  7. Undefined props
&lt;/h2&gt;

&lt;p&gt;Undefined props are excluded, so don’t worry about providing an &lt;code&gt;undefined&lt;/code&gt; fallback if it's ok for the prop to be undefined.&lt;/p&gt;

&lt;p&gt;Bad example:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Good example:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#8-setting-state-that-relies-on-the-previous-state" class="anchor"&gt;
  &lt;/a&gt;
  8. Setting state that relies on the previous state
&lt;/h2&gt;

&lt;p&gt;Always set state as a function of the previous state if the new state relies on the previous state. React state updates can be batched, and not writing your updates this way can lead to unexpected results.&lt;/p&gt;

&lt;p&gt;Bad example:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Good example:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#honorable-mention" class="anchor"&gt;
  &lt;/a&gt;
  Honorable Mention
&lt;/h2&gt;

&lt;p&gt;The following practices are not React-specific but rather are good practices for writing clean code in JavaScript (and any programming language, for that matter).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Extract complex logic into clearly-named functions&lt;/li&gt;
&lt;li&gt;Extract magic numbers into constants&lt;/li&gt;
&lt;li&gt;Use clearly named variables&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Web Vitals Explained</title>
      <author>Laurie</author>
      <pubDate>Mon, 22 Feb 2021 17:00:55 +0000</pubDate>
      <link>https://dev.to/laurieontech/web-vitals-explained-114j</link>
      <guid>https://dev.to/laurieontech/web-vitals-explained-114j</guid>
      <description>&lt;p&gt;In my previous post, I talked about &lt;a href="https://laurieontech.com/posts/perf-tools/"&gt;automated performance testing tools&lt;/a&gt; and how Google uses these scores to help determine page rank in their algorithm. Specifically, I ended the post by mentioning the concept of "core web vitals". So let's talk about what that means!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#google" class="anchor"&gt;
  &lt;/a&gt;
  Google
&lt;/h2&gt;

&lt;p&gt;Google announced in 2020 that site performance was going to influence page rank and that they determined that performance score using three metrics they call &lt;a href="https://web.dev/vitals/"&gt;core web vitals&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Those metrics are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cumulative layout shift (CLS)&lt;/li&gt;
&lt;li&gt;Largest Contentful Paint (LCP)&lt;/li&gt;
&lt;li&gt;First input delay (FID)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So what do each of those metrics mean? And what influences them?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#largest-contentful-paint" class="anchor"&gt;
  &lt;/a&gt;
  Largest contentful paint
&lt;/h2&gt;

&lt;p&gt;This metric is meant to measure user experience when loading your site. A poor score typically points to render-blocking resources or slow server response time.&lt;/p&gt;

&lt;p&gt;The goal is to find the biggest blocker when loading the page. Typically, this is a font file or an image. If you're handling those well, the site itself will have a great loading experience.&lt;/p&gt;

&lt;p&gt;LCP correlates with an older metric called speed index. However, that could only be calculated when a tool was taking snapshots of the site as it loaded. LCP is a faster and cheaper way to determine the same types of performance problems.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cumulative-layout-shift" class="anchor"&gt;
  &lt;/a&gt;
  Cumulative layout shift
&lt;/h2&gt;

&lt;p&gt;Cumulative layout shift is a metric designed to measure visual stability. Largest Contentful Paint can be great, but if the page is constantly doing layout shifts as new information comes in, it becomes less relevant. It's also not a fun user experience to have things shift around as you're trying to interact with a page.&lt;/p&gt;

&lt;p&gt;Part of the reason Google focuses on this metric is to move against ads and sites that slam you with a bunch of pop-ups. Additionally, they don't want you to lazy load content that has a significant impact on the layout of your page, e.g. fonts. A user's first impression of your site should be a stable one.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#first-input-delay" class="anchor"&gt;
  &lt;/a&gt;
  First input delay
&lt;/h2&gt;

&lt;p&gt;First input delay is the most nuanced core web vital because in most &lt;a href="https://laurieontech.com/posts/perf-tools/"&gt;performance testing tools&lt;/a&gt; it isn't available.&lt;/p&gt;

&lt;p&gt;FID is meant to measure user experience when they first try to interact with a page. If a user presses a button, how long does the page take to respond? The tricky part is that measuring FID requires tracking how a real user interacts with a site. Let's understand why.&lt;/p&gt;

&lt;p&gt;Imagine this -- you simulate a page load and clicking the first button the system sees as soon as the page renders. It takes a second or more to register that click because React hasn't finished hydrating. This seems like a bad user experience. But is it? If a real user were to navigate to your site, they'd have to notice there was a button, move their cursor (or tab over to it) and then click the button. In the time it takes that to do that will they experience the same delay as the simulated test? Probably not.&lt;/p&gt;

&lt;p&gt;Unfortunately, real user data is expensive to gather. As a result, most testing tools estimate FID using a metric like Total Blocking Time (TBT). It's not a user-centric outcome, but it gives you an idea of how long it takes until your page can be interacted with.&lt;/p&gt;

&lt;p&gt;In most cases, you need everything to load faster than 100ms. Anything slower than that is perceived as not working.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#additional-metrics" class="anchor"&gt;
  &lt;/a&gt;
  Additional metrics
&lt;/h2&gt;

&lt;p&gt;While Google focuses on the three core web vitals, there are a number of other metrics that make up the larger set of web vitals.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Time to Interactive&lt;br&gt;
TTI is similar to TBT and is also sometimes used as an estimate for FID. It's focused on behaviors that block the browser from being interactive. However, it also measures network quiet time so it's not a 1:1 matchup with TBT.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;First CPU Idle&lt;br&gt;
This measures the first time at which the page's main thread is quiet enough to handle input.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;First Contentful Paint&lt;br&gt;
This is similar to LCP, but instead of measuring the time at which the largest asset paints, it measures when the first asset does.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#are-we-done-yet" class="anchor"&gt;
  &lt;/a&gt;
  Are we done yet?
&lt;/h2&gt;

&lt;p&gt;So far we've looked at the metrics that make up performance scores and the tools that provide them. The next post will focus on what behaviors impact this score and the best practices for improving them.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>performance</category>
      <category>javascript</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Add A Little Whimsy to Your Forms</title>
      <author>Jhey Tompkins</author>
      <pubDate>Mon, 22 Feb 2021 16:55:06 +0000</pubDate>
      <link>https://dev.to/jh3y/add-a-little-whimsy-to-your-forms-2c1f</link>
      <guid>https://dev.to/jh3y/add-a-little-whimsy-to-your-forms-2c1f</guid>
      <description>&lt;p&gt;It's the little things. Recently &lt;a href="https://jhey.dev"&gt;jhey.dev&lt;/a&gt; got the honor of making it onto &lt;a href="https://whimsical.club/"&gt;whimsical.club&lt;/a&gt;. It's "A curated list of sites with an extra bit of fun".&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--BnnJ4sEx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1174257719135678464/vY_M-Jbh_normal.jpg" alt="Max Böck profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Max Böck
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="comment-mentioned-user" href="https://dev.to/mxbck"&gt;@mxbck&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Finally found the time to put some new stuff up on &lt;a href="https://t.co/kUAnmKCrkH"&gt;whimsical.club&lt;/a&gt; 🎉&lt;br&gt;&lt;br&gt;check out these awesome sites by:&lt;br&gt;&lt;a href="https://twitter.com/madame_robot"&gt;@madame_robot&lt;/a&gt;&lt;br&gt;&lt;a href="https://twitter.com/lonekorean"&gt;@lonekorean&lt;/a&gt;&lt;br&gt;&lt;a href="https://twitter.com/tylersticka"&gt;@tylersticka&lt;/a&gt;&lt;br&gt;&lt;a href="https://twitter.com/jh3yy"&gt;@jh3yy&lt;/a&gt;&lt;br&gt;&lt;a href="https://twitter.com/lauracharvey"&gt;@lauracharvey&lt;/a&gt;&lt;br&gt;&lt;a class="comment-mentioned-user" href="https://dev.to/accudio"&gt;@accudio&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      13:40 PM - 20 Feb 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1363121393446105089" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1363121393446105089" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1363121393446105089" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;What's whimsy? It's that little bit of fun we can add to our projects. Something that gives our audience a little insight into who we are. It's also another way to connect with your viewers. Sarah Drasner summed this up well in a &lt;a href="https://css-tricks.com/in-defense-of-a-fussy-website/"&gt;recent article&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"While we’re all laser-focused on shipping the newest feature with the hottest software and the best Lighthouse scores, I’ve been missing a bit of the joy on the web. Apps are currently conveying little care for UX, guidance, richness, and — well, for humans trying to communicate through a computer, we’re certainly bending a lot to… the computer."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So. Today we're going to add a confetti blast when users submit a form. It could be a little joy when someone signs up for your newsletter. This is what I'm using it for. I added it You can see it in action at &lt;a href="https://jhey.dev"&gt;jhey.dev&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;Let's start with a form, a &lt;a href="https://codepen.io/jh3y/pen/vYyeayV"&gt;very basic form&lt;/a&gt;. For example, this form will take you to the sign-up for my newsletter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"whimsy-form"&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"https://www.getrevue.co/profile/jh3y/add_subscriber"&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"post"&lt;/span&gt; &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"whimsy-form__group"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;label&amp;gt;&lt;/span&gt;Email address&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="na"&gt;required=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"whimsy-form__actions"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Subscribe"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let's take that further and add some extra markup and styles to make it a little "friendlier". Here's a quick form we've put together with Tailwind.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/jh3y/embed/bGBojrG?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;At this point, it looks fine. You can always add a little "character" here with the copy you use. Use these opportunities to make a connection. "Want to stay in touch? I'd like to share things I learn with you" sounds better than "Sign up for my newsletter". Anyway, that's another post in itself!&lt;/p&gt;

&lt;p&gt;But, we want confetti!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/9RrdV7o2kJFy8/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/9RrdV7o2kJFy8/giphy.gif" alt="Pitchforks"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's hop into some JavaScript. We're going to use the &lt;code&gt;canvas-confetti&lt;/code&gt; package. It's perfect for our use case. You've got many options for grabbing this. We can use &lt;code&gt;skypack&lt;/code&gt; for our demos. You might want to install it in your project and &lt;code&gt;import&lt;/code&gt; it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;confetti&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://cdn.skypack.dev/canvas-confetti
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then we need to grab the submit button for our form along with the form itself.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;FORM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;form&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SUBMIT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;FORM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[type="submit"]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then tie up the confetti blast to our form submission.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;FORM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;confetti&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/jh3y/embed/QWGqVpM?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Well. That works. But, not how we want it to. For one, we miss the confetti as the browser opens a new tab. When we return, we see the confetti. But, it blasts out from the middle of the screen.&lt;/p&gt;

&lt;p&gt;Let's sort that out. We need to prevent the default action for the form from happening. We can &lt;code&gt;preventDefault&lt;/code&gt; on the event for that. And then, we will get the button position with &lt;code&gt;getBoundingClientRect&lt;/code&gt;. We can use that to determine where we want to fire the confetti from.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;confetti&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://cdn.skypack.dev/canvas-confetti&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;FORM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;form&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SUBMIT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;FORM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[type="submit"]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;BOUNDS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;SUBMIT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBoundingClientRect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="nx"&gt;confetti&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;origin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;BOUNDS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;BOUNDS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;BOUNDS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;BOUNDS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;FORM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The last thing to do is submit our form after a desired delay. We could wait until the end of the confetti. But, around a second is likely enough.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;FORM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;submit&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Putting it all together.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;confetti&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://cdn.skypack.dev/canvas-confetti&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;FORM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;form&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SUBMIT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;FORM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[type="submit"]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;BOUNDS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;SUBMIT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBoundingClientRect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="nx"&gt;confetti&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;origin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;BOUNDS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;BOUNDS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;BOUNDS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;BOUNDS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;FORM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;submit&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;FORM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Hurrah! 🎉 We have a little whimsy for our form.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/jh3y/embed/zYoEJPy?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;It's worth exploring &lt;a href="https://www.npmjs.com/package/canvas-confetti"&gt;the docs&lt;/a&gt; for &lt;code&gt;canvas-confetti&lt;/code&gt;. You can tweak the settings to your tastes and generate different effects. One option we should pay attention to is &lt;code&gt;disableForReducedMotion&lt;/code&gt;. I'd recommend setting this to "true" so we respect users with vestibular disorders.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;confetti&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;disableForReducedMotion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now we have some confetti, we could even take this a little further with some audio. Drop an &lt;code&gt;audio&lt;/code&gt; element into our markup and use the &lt;code&gt;preload&lt;/code&gt; attribute.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;audio&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://assets.codepen.io/605876/horn.mp3"&lt;/span&gt; &lt;span class="na"&gt;preload=&lt;/span&gt;&lt;span class="s"&gt;"auto"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/audio&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Using &lt;code&gt;preload&lt;/code&gt; ensures that the audio is ready for playback as soon as we hit our "Subscribe" button.&lt;/p&gt;

&lt;p&gt;All we need to do is tie that into our "onSubmit" function. Grab the audio element and use the "play" method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AUDIO&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;FORM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;audio&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Then inside "onSubmit"&lt;/span&gt;
&lt;span class="nx"&gt;AUDIO&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;play&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And there we have it. A whimsical sign up form that will give your users a little joy and something to remember when they submit a form. And you can take joy from knowing that you've shipped a little enhancement for your users. If a user disables JavaScript, your form still works without the bells and whistles.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/jh3y/embed/VwmMGGv?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;I figured people might want a React version too. Here you go!&lt;/p&gt;

&lt;p&gt;＼ʕ •ᴥ•ʔ／&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/jh3y/embed/WNoZPQy?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The same process but we can use &lt;code&gt;useRef&lt;/code&gt; to grab the element references.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thats-it" class="anchor"&gt;
  &lt;/a&gt;
  That's it!
&lt;/h2&gt;

&lt;p&gt;One way to add a little joy to your sites and apps. Think about combining this with some of the other things we've been looking at. You'll be well on your way to making awesome experiences for your users. As always, &lt;a href="https://twitter.com/jh3yy"&gt;let me know&lt;/a&gt; what you think and see you for the next one!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stay Awesome! ʕ •ᴥ•ʔ&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Ombromanie: Creating Hand Shadow stories with Azure Speech and TensorFlow.js Handposes</title>
      <author>Jen Looper</author>
      <pubDate>Mon, 22 Feb 2021 15:58:59 +0000</pubDate>
      <link>https://dev.to/azure/ombromanie-creating-hand-shadow-stories-with-azure-speech-and-tensorflow-js-handposes-3cln</link>
      <guid>https://dev.to/azure/ombromanie-creating-hand-shadow-stories-with-azure-speech-and-tensorflow-js-handposes-3cln</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This is an article for all those big siblings who sneaked flashlights into their bedroom to cast scary shadows onto the wall, and for all the little kids, or the grownups who are still kids at heart, who were thus deliciously entertained.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Have you ever tried to cast hand shadows on a wall? It is the easiest thing in the world, and yet to do it well requires practice and just the right setup. To cultivate your #cottagecore aesthetic, try going into a completely dark room with just one lit candle, and casting hand shadows on a plain wall. The effect is startlingly dramatic. What fun!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d06Uztbc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4vuuwdz6sgzlc6wbp59y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d06Uztbc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4vuuwdz6sgzlc6wbp59y.png" alt="practicing hand shadows"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Even a tea light suffices to create a great effect&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In 2020, and now into 2021, many folks are reverting back to basics as they look around their houses, reopening dusty corners of attics and basements and remembering the simple crafts that they used to love. Papermaking, anyone? All you need is a few tools and torn up, recycled paper. Pressing flowers? All you need is newspaper, some heavy books, and patience. And hand shadows? Just a candle.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HOKt4XsS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/g9fc20uizkrr4fokskta.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HOKt4XsS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/g9fc20uizkrr4fokskta.jpeg" alt="handshadow1 on TikTok"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This TikTok creator has thousands of views for their handshadow tutorials&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But what's a developer to do when trying to capture that #cottagecore vibe in a web app? &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#high-tech-for-the-cottage" class="anchor"&gt;
  &lt;/a&gt;
  High Tech for the Cottage
&lt;/h2&gt;

&lt;p&gt;While exploring the art of hand shadows, I wondered whether some of the &lt;a href="https://github.com/jlooper/posedance"&gt;recent work&lt;/a&gt; I had done for body poses might be applicable to hand poses. What if you could tell a story on the web using your hands, and somehow save a video of the show and the narrative behind it, and send it to someone special? In lockdown, what could be more amusing than sharing shadow stories between friends or relatives, all virtually?&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ZWvZBEeS4qQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hand shadow casting is a folk art probably originating in China; if you go to tea houses with stage shows, you might be lucky enough to view one like this!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#a-show-of-hands" class="anchor"&gt;
  &lt;/a&gt;
  A Show Of Hands
&lt;/h2&gt;

&lt;p&gt;When you start researching hand poses, it's striking how much content there is on the web on the topic. There has been work since at least 2014 on creating fully articulated hands within the research, simulation, and gaming sphere:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HEbRgLdP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xaajsrtmvm9m5f74ne8r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HEbRgLdP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xaajsrtmvm9m5f74ne8r.png" alt="Hands Free"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;MSR throwing hands&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are dozens of handpose libraries already on GitHub: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/topics/hand-tracking"&gt;An entire GitHub topic on hand tracking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/xinghaochen/awesome-hand-pose-estimation"&gt;'Awesome' list for hand tracking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sites.google.com/view/hands2019/challenge"&gt;Challenges and hackathons&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are many applications where tracking hands is a useful activity:&lt;/p&gt;

&lt;p&gt;• Gaming&lt;br&gt;
• Simulations / Training&lt;br&gt;
• "Hands free" uses for remote interactions with things by moving the body&lt;br&gt;
• Assistive technologies&lt;br&gt;
• TikTok effects 🏆&lt;br&gt;
• Useful things like &lt;a href="https://mcclanahoochie.com/accordionhands/"&gt;Accordion Hands apps&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the more interesting new libraries, &lt;a href="https://dev.to/midiblocks/introducing-handsfree-js-integrate-hand-face-and-pose-gestures-to-your-frontend-4g3p"&gt;handsfree.js&lt;/a&gt;, offers an excellent array of demos in its effort to move to a hands free web experience:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mt-rcAD---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/l228n9e09eiu16g3csvp.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mt-rcAD---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/l228n9e09eiu16g3csvp.gif" alt="handsfree"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Handsfree.js, a very promising project&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As it turns out, hands are pretty complicated things. They &lt;strong&gt;each&lt;/strong&gt; include 21 keypoints (vs PoseNet's 17 keypoints for an entire body). Building a model to support inference for such a complicated grouping of keypoints has provenn challenging.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tc-kdfq8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/v8sl83we0tbpofbtdu5v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tc-kdfq8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/v8sl83we0tbpofbtdu5v.png" alt="keypoints"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are two main libraries available to the web developer when incorporating hand poses into an app: TensorFlow.js's handposes, and MediaPipe's. HandsFree.js uses both, to the extent that they expose APIs. As it turns out, neither TensorFlow.js nor MediaPipe's handposes are perfect for our project. We will have to compromise.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/tensorflow/tfjs-models/tree/master/handpose"&gt;TensorFlow.js's handposes&lt;/a&gt; allow access to each hand keypoint and the ability to draw the hand to canvas as desired. HOWEVER, it only currently supports single hand poses, which is not optimal for good hand shadow shows.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://google.github.io/mediapipe/solutions/hands"&gt;MediaPipe's handpose models&lt;/a&gt; (which are used by TensorFlow.js) do allow for dual hands BUT its API does not allow for much styling of the keypoints so that drawing shadows using it is not obvious.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;One other library, &lt;a href="https://github.com/andypotato/fingerpose"&gt;fingerposes&lt;/a&gt;, is optimized for finger spelling in a sign language context and is worth a look.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Since it's more important to use the Canvas API to draw custom shadows, we are obliged to use TensorFlow.js, hoping that either it will soon support multiple hands OR handsfree.js helps push the envelope to expose a more styleable hand.&lt;/p&gt;

&lt;p&gt;Let's get to work to build this app.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#scaffold-a-static-web-app" class="anchor"&gt;
  &lt;/a&gt;
  Scaffold a Static Web App
&lt;/h2&gt;

&lt;p&gt;As a Vue.js developer, I always use the Vue CLI to scaffold an app using &lt;code&gt;vue create my-app&lt;/code&gt; and creating a standard app. I set up a basic app with two routes: Home and Show. Since this is going to be deployed as an Azure Static Web App, I follow my standard practice of including my app files in a folder named &lt;code&gt;app&lt;/code&gt; and creating an &lt;code&gt;api&lt;/code&gt; folder to include an Azure function to store a key (more on this in a minute).&lt;/p&gt;

&lt;p&gt;In my package.json file, I import the important packages for using TensorFlow.js and the Cognitive Services Speech SDK in this app. Note that TensorFlow.js has divided its imports into individual packages:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@tensorflow-models/handpose&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^0.0.6&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@tensorflow/tfjs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^2.7.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@tensorflow/tfjs-backend-cpu&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^2.7.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@tensorflow/tfjs-backend-webgl&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^2.7.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@tensorflow/tfjs-converter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^2.7.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@tensorflow/tfjs-core&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^2.7.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;microsoft-cognitiveservices-speech-sdk&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^1.15.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#set-up-the-view" class="anchor"&gt;
  &lt;/a&gt;
  Set up the View
&lt;/h2&gt;

&lt;p&gt;We will draw an image of a hand, as detected by TensorFlow.js, onto a canvas, superimposed onto a video suppled by a webcam. In addition, we will redraw the hand to a second canvas (shadowCanvas), styled like shadows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"canvas-wrapper column is-half"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;canvas&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"output"&lt;/span&gt; &lt;span class="na"&gt;ref=&lt;/span&gt;&lt;span class="s"&gt;"output"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/canvas&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;video&lt;/span&gt;
        &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"video"&lt;/span&gt;
        &lt;span class="na"&gt;ref=&lt;/span&gt;&lt;span class="s"&gt;"video"&lt;/span&gt;
        &lt;span class="na"&gt;playsinline&lt;/span&gt;
        &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"
          -webkit-transform: scaleX(-1);
           transform: scaleX(-1);
           visibility: hidden;
           width: auto;
           height: auto;
           position: absolute;
         "&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;gt;&amp;lt;/video&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"column is-half"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;canvas&lt;/span&gt;
       &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"has-background-black-bis"&lt;/span&gt;
       &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"shadowCanvas"&lt;/span&gt;
       &lt;span class="na"&gt;ref=&lt;/span&gt;&lt;span class="s"&gt;"shadowCanvas"&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/canvas&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#load-the-model-start-keyframe-input" class="anchor"&gt;
  &lt;/a&gt;
  Load the Model, Start Keyframe Input
&lt;/h2&gt;

&lt;p&gt;Working asynchronously, load the Handpose model. Once the backend is setup and the model is loaded, load the video via the webcam, and start watching the video's keyframes for hand poses. It's important at these steps to ensure error handling in case the model fails to load or there's no webcam available.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;mounted&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setBackend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;backend&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;//async load model, then load video, then pass it to start landmarking&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;handpose&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Model is loaded! Now loading video&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;webcam&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;webcam&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadVideo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;landmarksRealTime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;webcam&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#setup-the-webcam" class="anchor"&gt;
  &lt;/a&gt;
  Setup the Webcam
&lt;/h2&gt;

&lt;p&gt;Still working asynchronously, set up the camera to provide a stream of images&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;setupCamera&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mediaDevices&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mediaDevices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUserMedia&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Browser API navigator.mediaDevices.getUserMedia not available&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;video&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$refs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mediaDevices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUserMedia&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;video&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;facingMode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;user&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;VIDEO_WIDTH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;VIDEO_HEIGHT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;srcObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onloadedmetadata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#design-a-hand-to-mirror-the-webcams" class="anchor"&gt;
  &lt;/a&gt;
  Design a Hand to Mirror the Webcam's
&lt;/h2&gt;

&lt;p&gt;Now the fun begins, as you can get creative in drawing the hand on top of the video. This landmarking function runs on every keyframe, watching for a hand to be detected and drawing lines onto the canvas - red on top of the video, and black on top of the shadowCanvas. Since the shadowCanvas background is white, the hand is drawn as white as well and the viewer only sees the offset shadow, in fuzzy black with rounded corners. The effect is rather spooky!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;landmarksRealTime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;//start showing landmarks&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;videoWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;videoWidth&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;videoHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;videoHeight&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="c1"&gt;//set up skeleton canvas&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$refs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;

      &lt;span class="c1"&gt;//set up shadowCanvas&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shadowCanvas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$refs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shadowCanvas&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;

      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2d&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shadowCanvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2d&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="p"&gt;...&lt;/span&gt;

      &lt;span class="c1"&gt;//paint to main&lt;/span&gt;

      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clearRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;videoWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;videoHeight&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;strokeStyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillStyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shadowCanvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="c1"&gt;//paint to shadow box&lt;/span&gt;

      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clearRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;videoWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;videoHeight&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shadowColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;black&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shadowBlur&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shadowOffsetX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shadowOffsetY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lineWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lineCap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;round&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillStyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;white&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;strokeStyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;white&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shadowCanvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="c1"&gt;//now you've set up the canvases, now you can frame its landmarks&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;frameLandmarks&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#for-each-frame-draw-keypoints" class="anchor"&gt;
  &lt;/a&gt;
  For Each Frame, Draw Keypoints
&lt;/h2&gt;

&lt;p&gt;As the keyframes progress, the model predict new keypoints for each of the hand's elements, and both canvases are cleared and redrawn.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;predictions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;estimateHands&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;predictions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;predictions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;landmarks&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;drawKeypoints&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="nx"&gt;predictions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;annotations&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;requestAnimationFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;frameLandmarks&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#draw-a-lifelike-hand" class="anchor"&gt;
  &lt;/a&gt;
  Draw a Lifelike Hand
&lt;/h2&gt;

&lt;p&gt;Since TensorFlow.js allows you direct access to the keypoints of the hand and the hand's coordinates, you can manipulate them to draw a more lifelike hand. Thus we can redraw the palm to be a polygon, rather than resembling a garden rake with points culminating in the wrist.&lt;/p&gt;

&lt;p&gt;Re-identify the fingers and palm:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;     &lt;span class="nx"&gt;fingerLookupIndices&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;thumb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="nx"&gt;indexFinger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="nx"&gt;middleFinger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="nx"&gt;ringFinger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="nx"&gt;pinky&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="nx"&gt;palmLookupIndices&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;palm&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;...and draw them to screen:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fingers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fingerLookupIndices&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;fingers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;finger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fingers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;points&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fingerLookupIndices&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;finger&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;keypoints&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;drawPath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;points&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;palmArea&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;palmLookupIndices&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;palmArea&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;palm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;palmArea&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;points&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;palmLookupIndices&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;palm&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;keypoints&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;drawPath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;points&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;With the models and video loaded, keyframes tracked, and hands and shadows drawn to canvas, we can implement a speech-to-text SDK so that you can narrate and save your shadow story. &lt;/p&gt;

&lt;p&gt;To do this, get a key from the Azure portal for &lt;a href="https://docs.microsoft.com/en-us/azure/cognitive-services/speech-service/?WT.mc_id=academic-14261-cxa"&gt;Speech Services&lt;/a&gt; by creating a Service:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XEnt_4Zj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/j0h40v2q83g3trhfworg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XEnt_4Zj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/j0h40v2q83g3trhfworg.png" alt="Speech Service"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can connect to this service by importing the sdk:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;import * as sdk from "microsoft-cognitiveservices-speech-sdk";&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;...and start audio transcription after obtaining an API key which is stored in an Azure function in the &lt;code&gt;/api&lt;/code&gt; folder. This function gets the key stored in the Azure portal in the Azure Static Web App where the app is hosted.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;startAudioTranscription&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//get the key&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/api/getKey&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;//sdk&lt;/span&gt;

        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;speechConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SpeechConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromSubscription&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;eastus&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;audioConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;AudioConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromDefaultMicrophoneInput&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;recognizer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;sdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SpeechRecognizer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;speechConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;audioConfig&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;recognizer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;recognized&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;story&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;recognizer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startContinuousRecognitionAsync&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In this function, the SpeechRecognizer gathers text in chunks that it recognizes and organizes into sentences. That text is printed into a message string and displayed on the front end.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#display-the-story" class="anchor"&gt;
  &lt;/a&gt;
  Display the Story
&lt;/h2&gt;

&lt;p&gt;In this last part, the output cast onto the shadowCanvas is saved as a stream and recorded using the MediaRecorder API:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shadowCanvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;captureStream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 60 FPS recording&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;recorder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MediaRecorder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;mimeType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;video/webm;codecs=vp9&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;recorder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ondataavailable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;chunks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}),&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;recorder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;...and displayed below as a video with the storyline in a new div:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;video&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;video&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fullBlob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Blob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;chunks&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;downloadUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createObjectURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fullBlob&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;downloadUrl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;story&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;autoplay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;controls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This app can be deployed as an Azure Static Web App using the excellent &lt;a href="https://github.com/microsoft/vscode-azurestaticwebapps"&gt;Azure plugin for Visual Studio Code&lt;/a&gt;. And once it's live, you can tell durable shadow stories!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m7dwaqm3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pkxdujhsgmpnyykj5500.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m7dwaqm3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pkxdujhsgmpnyykj5500.png" alt="ASWA"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Try Ombromanie &lt;a href="https://aka.ms/ombromanie"&gt;here&lt;/a&gt;. The codebase is available &lt;a href="https://aka.ms/ombromanie-code"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Take a look at Ombromanie in action:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/HV__puO1Dco"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://azure.microsoft.com/overview/ai-platform/dev-resources/?OCID=AID3029145&amp;amp;WT.mc_id=ca-14261-jelooper"&gt;Learn more about AI on Azure&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=h281NX568rU&amp;amp;list=PLLasX02E8BPBkMW8mAyNcRxk4e3l-l_p0&amp;amp;index=4"&gt;Azure AI Essentials Video covering speech and language&lt;/a&gt;&lt;br&gt;
&lt;a href="https://azure.microsoft.com/en-us/free/?OCID=AID3029145&amp;amp;WT.mc_id=ca-14261-jelooper"&gt;Azure free account sign-up&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>javascript</category>
      <category>vue</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How I Prepare Designs For Development  (Complete Guide)</title>
      <author>Gedalya Krycer</author>
      <pubDate>Mon, 22 Feb 2021 15:48:34 +0000</pubDate>
      <link>https://dev.to/gedalyakrycer/how-i-prepare-designs-for-development-complete-guide-2kjc</link>
      <guid>https://dev.to/gedalyakrycer/how-i-prepare-designs-for-development-complete-guide-2kjc</guid>
      <description>&lt;h4&gt;
  &lt;a href="#tldr" class="anchor"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h4&gt;

&lt;p&gt;Doing your due diligence in a website’s planning and design stages can save countless development hours and headaches. In this guide, I will detail the 10 stages I typically go through before touching code.&lt;/p&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents" class="anchor"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;🏁 &lt;a href="#intro"&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#for"&gt;Who This Is For&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#important"&gt;Important notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#background"&gt;My Background&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#10-stage-process" class="anchor"&gt;
  &lt;/a&gt;
  10 Stage Process
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#1-creative-brief" class="anchor"&gt;
  &lt;/a&gt;
  1. &lt;a href="#brief"&gt;Creative Brief&lt;/a&gt;
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#2-feature-list" class="anchor"&gt;
  &lt;/a&gt;
  2. &lt;a href="#features"&gt;Feature List&lt;/a&gt;
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#3-sitemap" class="anchor"&gt;
  &lt;/a&gt;
  3. &lt;a href="#sitemap"&gt;Sitemap&lt;/a&gt;
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#4-wireframe" class="anchor"&gt;
  &lt;/a&gt;
  4. &lt;a href="#wireframe"&gt;Wireframe&lt;/a&gt;
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#5-prototype" class="anchor"&gt;
  &lt;/a&gt;
  5. &lt;a href="#prototype"&gt;Prototype&lt;/a&gt;
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#6-design-system" class="anchor"&gt;
  &lt;/a&gt;
  6. &lt;a href="#designSystem"&gt;Design System&lt;/a&gt;
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#7-component-flow" class="anchor"&gt;
  &lt;/a&gt;
  7. &lt;a href="#componentFlow"&gt;Component Flow&lt;/a&gt;
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#8-optimize-images" class="anchor"&gt;
  &lt;/a&gt;
  8. &lt;a href="#optimize"&gt;Optimize Images&lt;/a&gt;
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#9-development-notes" class="anchor"&gt;
  &lt;/a&gt;
  9. &lt;a href="#devNotes"&gt;Development Notes&lt;/a&gt;
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#10-trello-production-board" class="anchor"&gt;
  &lt;/a&gt;
  10. &lt;a href="#trello"&gt;Trello Production Board&lt;/a&gt;
&lt;/h4&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  🏁 Introduction
&lt;/h1&gt;

&lt;p&gt;Let's be honest, starting a website or app from the ground up is pretty daunting. There is a lot to consider, what with all the possible tech stacks to use, where to host it, and does it make sense to use a framework or not...&lt;/p&gt;

&lt;p&gt;Today, however, I would like to take a step back and focus on what happens before we ever open WebStorm or Visual Studio Code. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#before-we-can-code-we-need-to-know" class="anchor"&gt;
  &lt;/a&gt;
  Before we can code, we need to know...
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;What features to build &lt;/li&gt;
&lt;li&gt;Why they are important&lt;/li&gt;
&lt;li&gt;Who they are important to&lt;/li&gt;
&lt;li&gt;How to align on our vision with the decision-makers for the project&lt;/li&gt;
&lt;li&gt;How to easily transition from strategy to design to development &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this guide, we will cover how I approach implementing strategy and design in 10 key stages.&lt;/p&gt;

&lt;p&gt;It may seem like a lot of steps, but each one clarifies the goals and direction of the website in a meaningful way. By the end there should be little to no changes or questions once the programming begins. &lt;/p&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#who-this-is-for" class="anchor"&gt;
  &lt;/a&gt;
  Who This Is For
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Someone who is starting to freelance and wants to help clients with the site's design &amp;amp; content + development. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The "Web Gal/Guy" responsible for all things "Our Website/App" in a small company/startup.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Students looking to level up their group projects and portfolio work.    &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Developers who want to understand the decision-making behind many submitted tasks in Jira / Trello / Basecamp / Monday.com / Asana &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#important-notes" class="anchor"&gt;
  &lt;/a&gt;
  Important Notes
&lt;/h3&gt;

&lt;p&gt;1 — This is my full process, but it's totally valid to streamline it for very quick/small projects.&lt;/p&gt;

&lt;p&gt;2 — This guide does not outline specific UX tactics, like personas or user interviews. These are still great to do if you can and I will indicate where they can be slotted in. &lt;/p&gt;

&lt;p&gt;3 — The following stages are based around a "Waterfall" methodology, as opposed to "Agile" which is a favorite in software development.  &lt;/p&gt;

&lt;p&gt;Both are awesome, but I personally like "Waterfall" for client websites because the stages are so clearly defined. &lt;/p&gt;

&lt;p&gt;If you are curious to learn more, &lt;a href="https://www.productplan.com/glossary/waterfall/"&gt;check out this resource&lt;/a&gt;. &lt;/p&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#my-background" class="anchor"&gt;
  &lt;/a&gt;
  My Background
&lt;/h3&gt;

&lt;p&gt;Since early 2020 I’ve been studying and working in front-end web development. Most recently working as a React Native developer for an IOS fitness app.  &lt;/p&gt;

&lt;p&gt;Before that I worked for about 5 years as a multi-disciplinary designer and team lead at a design agency. &lt;/p&gt;

&lt;p&gt;From 2018-2020 I focused solely on web design, account management, HR, and managing our global development teams. &lt;/p&gt;

&lt;p&gt;It was during this 2 year period that I really got an appreciation  for the "process of web design”.  &lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back to top&lt;/a&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#10-stage-process" class="anchor"&gt;
  &lt;/a&gt;
  10 Stage Process
&lt;/h1&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creative-brief" class="anchor"&gt;
  &lt;/a&gt;
  Creative Brief
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--83GGNwTz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4391p4hrtkyld8sv1uf8.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--83GGNwTz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4391p4hrtkyld8sv1uf8.jpg" alt="creative brief"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A creative brief (also know as RFP or project brief) outlines the details and things to consider for the project. This is usually the starting point to understand what the project is about. &lt;/p&gt;

&lt;p&gt;They are awesome and I always review them multiple times to fully understand what is needed. Usually, I will have at least one follow-up call to clarify my understanding of it.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#sadly-we-dont-live-in-a-perfect-world" class="anchor"&gt;
  &lt;/a&gt;
  Sadly, we don't live in a perfect world
&lt;/h4&gt;

&lt;p&gt;It is all too common to not get one of these at the start of the project. Often times the project kicks off with &lt;em&gt;"I want a modern &amp;amp; unique website"&lt;/em&gt; or &lt;em&gt;"Marketing is looking to up our traffic"&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;For those who are not sure... this is not enough info to go on. I would not know how to build you an effective website, based on &lt;em&gt;"it should be modern"&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;It is totally ok and honestly imperative to ask more questions. It shows you are thinking from a place of strategy and experience when asking to formulate a creative brief with your client / boss / teacher. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#some-key-questions-to-ask" class="anchor"&gt;
  &lt;/a&gt;
  Some Key Questions to Ask
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Q1 — Why are you looking for a new site or refresh?&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
Don't make assumptions. Have the other person tell you their "pain points". (What they are looking to solve.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Q2 — Who will be visiting this site? (Target Demographic)&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
You are really not building a website for your client/boss. You are building it to meet the needs of their customer. &lt;/p&gt;

&lt;p&gt;A medical website should be built differently if the visitors are experienced doctors vs patients who are not sure what they are looking for.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Q3 — How will you know if this website is successful? (Key Performance Indicators)&lt;/em&gt;&lt;/strong&gt; &lt;br&gt;
You won't know if you did a good job if the project goals are not clear. "It looks great" is sadly not a measurable metric of success on its own. It's just one way to get there.&lt;/p&gt;

&lt;p&gt;Also, believe it or not, not everyone is looking for high traffic as a priority metric. Sometimes it is more important to have a small targeted audience with a very high rate of conversion.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Example: Account portal for existing customers that makes it easy for them to update billing info, cutting down 40% of technical related calls.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Q4 — Which of your competitor's do you think have effective websites?&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
Yes, do your research as well, but they are the experts in their given market. Let them give you examples of who they think are doing a great job. Competitor sites can give you a lot of insight on what to do or to stay away from. &lt;/p&gt;

&lt;p&gt;Our clients might not know how to verbalize what "modern website" means. However, you may notice that their competitor's website has online ordering, while they only have PDF menus. It was what they were getting at, but you are making it an actionable solution. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Q5 — What are your immediate business goals and where is your business going in the next 2-3 years?&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
Being able to consider solutions for both current and future goals is a huge value add. &lt;/p&gt;

&lt;p&gt;This also allows you to help them prioritize features. Maybe they want a shop page, but they won't have the team to support it for another year.&lt;/p&gt;

&lt;p&gt;This is a great opportunity to look out for them and save some money/time upfront. Yes, you might make a little less up front, but you will gain a happy client for life.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Q6 — When is the launch date?&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
Everyone wants their site up ASAP, but sometimes that means in at the end of Q1 in 3 months and other times that means next week. It is important to know which it is. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Q7 — Who is my point of contact and who will be approving stages?&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
If you are working with a new team or group of clients this is super important. It can mean the difference between staying up all night making edits because one person said they don't like a core feature. &lt;/p&gt;

&lt;p&gt;(Big difference between feedback from the CEO funding the project and a junior associate who can't authorize final decisions.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Q8 — Do you have existing brand/development guidelines?&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
This will greatly help specify what design and development solutions can be made and what is not allowed. &lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back to top&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#feature-list" class="anchor"&gt;
  &lt;/a&gt;
  Feature List
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gPp7HSr3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cptc2weddyl6dih1ucn7.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gPp7HSr3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cptc2weddyl6dih1ucn7.jpg" alt="Feature List"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If it wasn't specified in the Creative Brief already, I use the feature list to roughly outline the scope of the project. I like to do this in Trello as a checklist, but it can easily be done in a Word/Google doc. &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#things-to-consider-including" class="anchor"&gt;
  &lt;/a&gt;
  Things to consider including...
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Roughly how many pages there are&lt;/li&gt;
&lt;li&gt;Calling out big sections like blogs, account portals, or payment functionality&lt;/li&gt;
&lt;li&gt;If there are animations and roughly where are they&lt;/li&gt;
&lt;li&gt;Does the site need search capabilities or not&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This does not need to be incredibly specific or even final. There are stages dedicated to that later on. This is just a way to get some idea on paper of what is being planned. &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#depending-on-the-project-this-can-happen-at-different-stages" class="anchor"&gt;
  &lt;/a&gt;
  Depending on the project this can happen at different stages...
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If it is a client project I will include this as part of the proposal to help align on the size of the project. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If it is a school or work assignment this is my first pass at understanding how it should be built. It makes it easier to ask questions too. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back to top&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#sitemap" class="anchor"&gt;
  &lt;/a&gt;
  Sitemap
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SjHfVyFo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qttxwzrl41tbcb5ymu3o.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SjHfVyFo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qttxwzrl41tbcb5ymu3o.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A sitemap (in the design stage) is a visual representation of all the pages on the site and how they connect to each other. It is incredibly valuable in working out IA (information architecture) and how the user will navigate the site. &lt;/p&gt;

&lt;p&gt;Sitemaps should not be overly complex. They just have to communicate the page names, any major sections on those pages, and how they connect. &lt;/p&gt;

&lt;p&gt;I really like this stage, because it allows me to quickly align the site structure with my team or client. For something that is so simple looking, it is very very important for working out the user experience for the site.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;If you are doing a deep dive on User Experience, that should start happening right before this stage. Insights gathered from interviews, personas, and A/B testing can help inform the sitemap and future stages.&lt;/em&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Lastly, for this stage and the Wireframes and Prototype stages, I use and recommend Figma. You can learn more about this awesome free tool, with my workshop below. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/gedalyakrycer" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X_UMWGU6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--n_opOIn4--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/537261/8c5707dc-338c-449f-b608-cc896b161638.jpeg" alt="gedalyakrycer image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/gedalyakrycer/learn-figma-an-introduction-for-developers-54e3" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Learn Figma: An Introduction For Developers&lt;/h2&gt;
      &lt;h3&gt;Gedalya Krycer ・ Dec 28 '20 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#figma&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#design&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;a href="#top"&gt;Back to top&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wireframe" class="anchor"&gt;
  &lt;/a&gt;
  Wireframe
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LMMcssM_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/llm9ti4ksf7ncpt6347d.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LMMcssM_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/llm9ti4ksf7ncpt6347d.jpg" alt="Wireframe Collage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the first official "design" stage, where we drill down a little deeper than the sitemap. &lt;/p&gt;

&lt;p&gt;Now that we have a high-level view of the website, we can use the wireframes to sketch out where sections and features will live on the page. &lt;/p&gt;

&lt;p&gt;The keyword above is "&lt;strong&gt;sketch&lt;/strong&gt;". Wireframes are not meant to be pixel perfect. They are not final. What they are is a way to quickly test out and present ideas relating to content and functionality. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#example" class="anchor"&gt;
  &lt;/a&gt;
  Example
&lt;/h4&gt;

&lt;p&gt;Let's say you have 6 images to show on the page. You can approach the layout in a few ways. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;You could display them in a grid, with the images opening up in a lightbox.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Another option is a full-width carousel that cycles through the images every few seconds.  &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The wireframe lets you quickly layout both options, without creating pixel-perfect designs that take hours to complete. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#things-i-consider-with-wireframes" class="anchor"&gt;
  &lt;/a&gt;
  Things I Consider With Wireframes
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Wireframes are not the final design! To help communicate this I always create them in black and white, with generic fonts and shapes for images.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Clients and team-members reviewing the wireframes should just be focusing on content, features, and rough layout.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Because wireframes are a great way to proof content, I always try to use "near to final" copy and not lorem ipsum text. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;While they can be sketches on paper, I like to build simple and clean layouts in Figma. If a section does indeed stay, I won't have to start from scratch when designing it for real. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back to top&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prototype" class="anchor"&gt;
  &lt;/a&gt;
  Prototype
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---UhgkaFC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cy8xzar9ans9p7x677aw.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---UhgkaFC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cy8xzar9ans9p7x677aw.jpg" alt="Prototype Screens"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is where we get to truly implement all of our research and planning.  It's ok if you are not a designer. The following sections can also be a helpful guide as what to look for in a design partner.&lt;/p&gt;

&lt;p&gt;The prototype design (also called High-Fidelity Mockup) is where I will show how every major screen will look before we begin coding.&lt;/p&gt;

&lt;p&gt;This is where we work out the final design and user experience solutions. It is at this point where we apply things like brand colors, graphics, and a final layout. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JoDuGK6w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rzrfe0zr7m4dr56b6tf0.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JoDuGK6w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rzrfe0zr7m4dr56b6tf0.jpg" alt="Mobile Screens"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Depending on the complexity of the design and project requirements, I will also create mobile-specific screens. It makes coding with a "mobile-first" approach a lot easier. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KwBZauMv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pvr8fzo46ljzw895nxlo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KwBZauMv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pvr8fzo46ljzw895nxlo.png" alt="Design Flow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also find it helpful to position all the pages in the same structure as the sitemap or user flow. &lt;/p&gt;

&lt;p&gt;Programs like Figma makes it really easy to do this and draw lines between them on how they connect. &lt;/p&gt;

&lt;p&gt;It gives another opportunity to validate if the path the user is supposed to take for a particular action makes sense. &lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back to top&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#design-system" class="anchor"&gt;
  &lt;/a&gt;
  Design System
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wuulMLpj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9ggux1ym28mht3h977i8.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wuulMLpj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9ggux1ym28mht3h977i8.jpg" alt="Design System"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The prototype design should not only look good but make the design and development process easier. &lt;/p&gt;

&lt;p&gt;It is important to create a Design System, which holds any major and/or repeatable styles, components, and assets.&lt;/p&gt;

&lt;p&gt;For example, a design system will usually have any typography styles used and the full-color palette. Components like navigation, footer, or a button will live there as well. &lt;/p&gt;

&lt;p&gt;This way if there is an edit, you only need to make it once in the Design System. If set up correctly programs like Figma will update that element or style across the design automatically. &lt;/p&gt;

&lt;p&gt;It is also super helpful when you do start coding. I use the style guide as my CSS blueprint which makes setting up color variables and typography elements so much easier.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i1qh6gtX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3x7c2rugxnwirnzw7h7n.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i1qh6gtX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3x7c2rugxnwirnzw7h7n.jpg" alt="Multi Screen Design System"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The design system can come in all sizes. You can start small and then grow it as your project get's more complex. Below is a general list of sections I generally use in the design system. (Not all are always applicable.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mobile &amp;amp; Desktop Grids&lt;/strong&gt;&lt;br&gt;
For example a 12-col grid for desktop and a 2- or 4-col grid for mobile. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Colors&lt;/strong&gt;&lt;br&gt;
This includes any brand colors, hex codes, variable names, and their tints/shades. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Typography&lt;/strong&gt;&lt;br&gt;
This includes h1-h6 headlines, body lg/md/sm, and email versions because only default fonts are allowed in marketing emails.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Buttons&lt;/strong&gt; (Website &amp;amp; Email)&lt;br&gt;
I try to include any button on the site with default, hover, active and disabled states. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UI Components&lt;/strong&gt;&lt;br&gt;
This is for major repeatable elements that are not navigation. Things like logos, card elements, form fields, hero banners, etc. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Navigation&lt;/strong&gt;&lt;br&gt;
I have found that navigation components can often have a lot of states and sometimes many types for larger sites. So they get their own section. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Icons&lt;/strong&gt;&lt;br&gt;
Any UI specific icons that are not the logo. Things like arrows, chevrons, menus, profile silhouettes, etc&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Effects&lt;/strong&gt;&lt;br&gt;
This contains styles for Box Shadows, Inset Box Shadows,  Layer Blurs, and Background Blurs. &lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back to top&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#component-flow" class="anchor"&gt;
  &lt;/a&gt;
  Component Flow
&lt;/h2&gt;

&lt;p&gt;Recently I have started building "Component Flows" diagrams for my React projects. It is a way to visually plan and track the structure of React components. &lt;/p&gt;

&lt;p&gt;The top-level shows the main folders inside of the standard "components" folder. Each of these folders is color-coded. &lt;/p&gt;

&lt;p&gt;The tree under it shows how the components will be structured in the app. The components are also colored to match the folders they live in. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SG24MmXY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mojolwo7cni0l9yv3gyd.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SG24MmXY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mojolwo7cni0l9yv3gyd.jpg" alt="React Component Flow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is incredibly helpful, because not all components that appear together, live in the same folders. For example, the &lt;code&gt;&amp;lt;ButtonPrimary /&amp;gt;&lt;/code&gt; component appears in several different sections, but its file lives in the "UI" folder. &lt;/p&gt;

&lt;p&gt;This makes it much easier for me to structure my app and then later find things during development. &lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back to top&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#optimize-images" class="anchor"&gt;
  &lt;/a&gt;
  Optimize Images
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4d68pTC7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7zq757wqk7g2ldvuuxym.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4d68pTC7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7zq757wqk7g2ldvuuxym.png" alt="Tiny Png Website"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A huge issue with many website's page performance is that they are using large images. If a homepage has 10 images on it and each is 3mb, then that page has to download 30mb. That is is bigger than some full websites! &lt;/p&gt;

&lt;p&gt;Ideally, most images should be under 200kb or at least 650kb if it is a large hero image. There are always exceptions to the rule, but even if this works for 80% of the images that is a huge performance save!&lt;/p&gt;

&lt;p&gt;Using Photoshop or Adobe Lightroom, I make sure the image resolution is 72dpi and bring the width/height down to double the needed size. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Monitors can't process any more than that, but many cameras shoot at 144dpi or even full print quality of 300dpi. This is undeeded added weight to the fie. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The 2x size can help if, I need to use the image for retina displays. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is done before I bring it into Figma, allowing it to run quicker and for production to already starting with optimized files. &lt;/p&gt;

&lt;p&gt;Before I upload to the site I will also typically run the images through &lt;a href="https://tinypng.com/"&gt;tinypng.com&lt;/a&gt;. This site does an amazing compressing the images with very little file decay or artifacting. As you can tell in the image above, the change is night and day. &lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back to top&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#development-notes" class="anchor"&gt;
  &lt;/a&gt;
  Development Notes
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--appb-tOi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tev78hxev4bse8ms5m6r.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--appb-tOi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tev78hxev4bse8ms5m6r.jpg" alt="Developer Comments"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once the design is done and the assets like images are ready to go, I like to also add developer notes to the design. &lt;/p&gt;

&lt;p&gt;This is made really easy by Figma, where you can drop a comment pin anywhere on the design and even tag other people in it. &lt;/p&gt;

&lt;p&gt;It is a great place to add reminders for animations, API references, and coordinating between co-workers.  &lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back to top&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#trello-production-board" class="anchor"&gt;
  &lt;/a&gt;
  Trello Production Board
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bXObMXrl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w3d4cf5wzoeozo0c0n19.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bXObMXrl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w3d4cf5wzoeozo0c0n19.jpg" alt="Trello Board"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Technically this step can start at the beginning. I find it so valuable to track the project from design through development on a Trello board. &lt;/p&gt;

&lt;p&gt;My go-to workflow is a Kataban methodology, where tasks are tracked in 3 lists — "To Do", "Doing" and "Done". &lt;/p&gt;

&lt;p&gt;Often times I will expand this out to have the following lists in order...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. MISC/Resources:&lt;/strong&gt; API keys, logins, brand guides, and things that will be helpful throughout the project. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Future Features:&lt;/strong&gt; This holds anything that will be great to add if we have time/budget, but are not critical to the launch of the site. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. To Do:&lt;/strong&gt; Pending items that are critical to launching the site. Often times this is tagged with the person that will be working on it and a due date.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Doing:&lt;/strong&gt; Tasks that are actively being worked on. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Review:&lt;/strong&gt; Items that are ready for review by a teammate or a client. These might go back to "To Do" or "Doing" if there are edits. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. Done:&lt;/strong&gt; These are items that have been fully completed. It is great to track the progress of the project and show clients how much was already completed. &lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back to top&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#summary" class="anchor"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;I hope this was helpful! It may seem like a lot, but as you can probably tell, each stage builds on the next. &lt;/p&gt;

&lt;p&gt;I am a firm believer that it is faster to spend more time doing it right up front, then redo things later on because of miscommunication. &lt;/p&gt;

&lt;p&gt;Is there anything on isn't on this list, but should be? I'd love to learn how you keep projects, expectations, or communication on track! &lt;/p&gt;

&lt;p&gt;Happy (Strategy, Designing) Coding! 🤓&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Thumbnail designed with &lt;a href="https://www.figma.com/"&gt;Figma&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>design</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Reveal the command behind an alias with ZSH</title>
      <author>Camilo Martinez</author>
      <pubDate>Mon, 22 Feb 2021 15:33:50 +0000</pubDate>
      <link>https://dev.to/equiman/reveal-the-command-behind-an-alias-with-zsh-4d96</link>
      <guid>https://dev.to/equiman/reveal-the-command-behind-an-alias-with-zsh-4d96</guid>
      <description>&lt;p&gt;I love alias commands, but also always like to 🕵️‍♀️ spy on what is the real command behind an alias. There are a lot of ways to see it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using the &lt;code&gt;alias &amp;lt;command&amp;gt;&lt;/code&gt; on terminal&lt;/li&gt;
&lt;li&gt;Using the keyboard shortcut combination &lt;code&gt;ctrl+x a&lt;/code&gt; (not &lt;code&gt;ctrl+x+a&lt;/code&gt;) to expand it&lt;/li&gt;
&lt;li&gt;Using the &lt;a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/globalias"&gt;globalias&lt;/a&gt; plugin&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But all of them need an extra step, and I found a way to see it always before the command runs.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#reveal" class="anchor"&gt;
  &lt;/a&gt;
  Reveal
&lt;/h1&gt;

&lt;p&gt;We can use a function to search the command associated with an alias adding this script on &lt;code&gt;~/.zshrc&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;alias_for&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;~ &lt;span class="s1"&gt;'[[:punct:]]'&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;return
  &lt;/span&gt;&lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;found&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt; &lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; &lt;span class="nv"&gt;$found&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
    &lt;/span&gt;&lt;span class="nv"&gt;found&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;found&lt;/span&gt;&lt;span class="p"&gt;//\\//&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;                      &lt;span class="c"&gt;# Replace backslash with slash&lt;/span&gt;
    &lt;span class="nv"&gt;found&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;found&lt;/span&gt;&lt;span class="p"&gt;%\&lt;/span&gt;&lt;span class="s1"&gt;'}                         # Remove end single quote
    found=${found#"${1}='&lt;/span&gt;&lt;span class="s2"&gt;"}                   # Remove alias name
    echo "&lt;/span&gt;&lt;span class="p"&gt;\e[32m❯ \e[33m&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;found&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="p"&gt;\e[0m&lt;/span&gt;&lt;span class="s2"&gt;"        # Return with colors
  fi
}

expand_command_line() {
  [[ &lt;/span&gt;&lt;span class="nv"&gt;$# &lt;/span&gt;&lt;span class="s2"&gt;-eq 0 ]] &amp;amp;&amp;amp; return                    # If there's no input, return. Else...
  local found_alias="&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;alias_for &lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"         # Check if there's an alias for the comand.
  if [[ -n &lt;/span&gt;&lt;span class="nv"&gt;$found_alias&lt;/span&gt;&lt;span class="s2"&gt; ]]; then              # If there was
    echo &lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;found_alias&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;                       # Print it. 
  fi
}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now we need to run this function every time the alias is entered. Happily, ZSH has a &lt;a href="http://zsh.sourceforge.net/Doc/Release/Functions.html"&gt;preexec&lt;/a&gt; function that can be associated with a hook. Just add this script after the previous on &lt;code&gt;~/.zshrc&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;autoload &lt;span class="nt"&gt;-U&lt;/span&gt; add-zsh-hook                      &lt;span class="c"&gt;# Load the zsh hook module. &lt;/span&gt;
add-zsh-hook preexec expand_command_line      &lt;span class="c"&gt;# Adds the hook &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I'm not thinking to remove this hook, but you can do it with this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;add-zsh-hook &lt;span class="nt"&gt;-d&lt;/span&gt; preexec expand_command_line &lt;span class="c"&gt;# Remove it for this hook.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Once finish, reopen all terminals or update his source running &lt;code&gt;source ~/.zshrc&lt;/code&gt; command and now you can see those secret commands.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#example" class="anchor"&gt;
  &lt;/a&gt;
  Example
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zYl6bUdF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/27sukg7wdvfmyjaxuvye.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zYl6bUdF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/27sukg7wdvfmyjaxuvye.png" alt="alias"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Yellow:&lt;/strong&gt; alias&lt;br&gt;
&lt;strong&gt;Red:&lt;/strong&gt; command behind revealed&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Sources&lt;/strong&gt;: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/18143307/print-executed-alias-in-zsh-or-bash/18370868#comment116396914_18370868"&gt;Stackoverflow - Print executed alias&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://superuser.com/questions/1514569/how-to-expand-aliases-inline-in-zsh#:~:text=Just%20press%20C%2Dx%20a%20%2C%20not,function%20to%20expand%20the%20alias."&gt;Stackoverfloow - Expand alias command&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://misc.flogisoft.com/bash/tip_colors_and_formatting"&gt;Bash Colors&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;strong&gt;That’s All Folks!&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Happy Coding&lt;/strong&gt; 🖖&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/equiman"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sbQqp7D6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/im18z7jhm102axyxiapk.png" alt="Buy me a cofee"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>bash</category>
      <category>tutorial</category>
      <category>terminal</category>
    </item>
    <item>
      <title>Introduction to Vue Watchers</title>
      <author>Linda</author>
      <pubDate>Mon, 22 Feb 2021 13:36:47 +0000</pubDate>
      <link>https://dev.to/lindaojo/introduction-to-vue-watchers-2jhc</link>
      <guid>https://dev.to/lindaojo/introduction-to-vue-watchers-2jhc</guid>
      <description>&lt;p&gt;In this article, we will be discussing watchers, one of the core concepts in Vue.js.&lt;/p&gt;

&lt;p&gt;Watchers, just as the name implies are used to watch out for changes in a property previously defined in the data object. It is triggered whenever the value of that property changes.&lt;/p&gt;

&lt;p&gt;Let's create a watcher for an "answer" property below. The watcher must have the same name as the property being observed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;watch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The Watcher above will log the "answer" property to the console anytime its value changes.&lt;/p&gt;

&lt;p&gt;We can also access the old property value and new property value in a Watcher by adding two optional parameters as shown below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;watch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;oldAnswer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newAnswer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`The answer has been changed from &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;oldAnswer&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; to &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;newAnswer&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If we want to monitor the changes of items within an array or the properties of an object we use "deep". Let's watch out for changes in the "person" Object below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;person&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Linda&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Female&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;signedIn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;watch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;person&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;deep&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Vue now watches for changes within the person Object&lt;/span&gt;
      &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isSignedIn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;records&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As a practical example, I have created a simple "App" where we use a Watcher to monitor the number of times a user has signed.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/LindaOjo/embed/qBqPZYm?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;That's all folks, See you next week!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>vue</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>AWS CDK - One-Step S3 Websites with esbuild</title>
      <author>Matt Morgan</author>
      <pubDate>Mon, 22 Feb 2021 13:12:32 +0000</pubDate>
      <link>https://dev.to/aws-builders/aws-cdk-one-step-s3-websites-with-esbuild-2e3h</link>
      <guid>https://dev.to/aws-builders/aws-cdk-one-step-s3-websites-with-esbuild-2e3h</guid>
      <description>&lt;p&gt;I &lt;a href="https://dev.to/elthrasher/aws-cdk-aws-lambda-nodejs-module-9ic"&gt;wrote previously&lt;/a&gt; about using &lt;a href="https://docs.aws.amazon.com/cdk/api/latest/docs/aws-lambda-nodejs-readme.html"&gt;aws-lambda-nodejs&lt;/a&gt; with &lt;a href="https://esbuild.github.io/"&gt;esbuild&lt;/a&gt; to write Lambda functions in TypeScript and use inline building and bundling without the need for a separate build step.&lt;/p&gt;

&lt;p&gt;When I first wrote that article, it was something of a curiosity to me. I was actually bundling my functions with webpack and thought that was going pretty well, but after a couple of iterations and a closer look, I was sold. The simplicity and versatility of this approach is just too good. Plus esbuild is so fast! I wanted to see if I could apply the same principles to building, bundling and deploying a UI application to an S3 Bucket website. I first looked to see if there was 3rd party support for such a construct, but it turns out that isn't needed and AWS CDK includes everything you need!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents" class="anchor"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#tldr"&gt;tl;dr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#app"&gt;App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#esbuild"&gt;esbuild&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#s3-deployment"&gt;S3 Deployment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#testing"&gt;Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#next-steps"&gt;Next Steps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#tldr" class="anchor"&gt;
  &lt;/a&gt;
  tl;dr&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Want to cut the line? Okay, here's &lt;a href="https://github.com/elthrasher/cdk-esbuild-s3-website"&gt;the code repo&lt;/a&gt;!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#app" class="anchor"&gt;
  &lt;/a&gt;
  App&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Let's begin with the inevitable setup junk and then make a very simple React app. Don't like React? No problem. You could use basically anything, but I'm going to use TypeScript and bundling and React has good support for both.&lt;/p&gt;

&lt;p&gt;Many readers will already be familiar with installing TypeScript and setting up linting and so forth. You can skip ahead to &lt;a href="https://github.com/elthrasher/cdk-esbuild-s3-website/blob/main/package.json"&gt;my repo&lt;/a&gt; to see what I did. If all this setup stuff gets you down, maybe check out &lt;a href="https://github.com/projen/projen"&gt;projen&lt;/a&gt;. I'll call out a few of the dependencies I installed: &lt;code&gt;esbuild&lt;/code&gt;, &lt;code&gt;@aws-cdk/aws-s3&lt;/code&gt;, &lt;code&gt;@aws-cdk/aws-s3-deployment&lt;/code&gt;, &lt;code&gt;react&lt;/code&gt; and &lt;code&gt;react-dom&lt;/code&gt;. Again, check the repo because there are a lot of dependencies needed.&lt;/p&gt;

&lt;p&gt;I like to stick all those dependencies in a single package.json file at the root of my project. This is unorthodox, but it probably shouldn't be because it works quite well. More on that later.&lt;/p&gt;

&lt;p&gt;Now I'll add a simple React app by putting an &lt;code&gt;index.html&lt;/code&gt; file in &lt;code&gt;./website&lt;/code&gt; and a &lt;a href="https://github.com/elthrasher/cdk-esbuild-s3-website/tree/main/ui"&gt;couple of tsx files&lt;/a&gt; in &lt;code&gt;./ui&lt;/code&gt;. These conventions aren't very important since we can import code from any part of the project but in this app, &lt;code&gt;./ui&lt;/code&gt; contains the source for the UI app and &lt;code&gt;./website&lt;/code&gt; will hold the html index file and also the build output.&lt;/p&gt;

&lt;p&gt;That's it for my React code, but since I didn't use a tool like create-react-app, I still need a way to run a local server and bundle my code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#esbuild" class="anchor"&gt;
  &lt;/a&gt;
  esbuild&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;There's a lot to like about esbuild. It's written in golang and is very fast. It's a newer project, but it's gaining features like crazy. It's not quite as mature as webpack so it's still missing a few things like hot module reload, but &lt;a href="https://github.com/zaydek/esbuild-hot-reload"&gt;workarounds exist&lt;/a&gt;. &lt;a href="https://esbuild.github.io/"&gt;The docs&lt;/a&gt; are pretty good, but there's a lot of ground to cover for a tool like this. One thing that's easy to overlook is esbuild ships with a local dev server. No need to bring your own!&lt;/p&gt;

&lt;p&gt;Like other bundlers, esbuild has a command line interface as well as a way to run build scripts. I intend to use a lot of the options, so I'll go for a build script. It's possible to use JavaScript for the build script, but I'm going to write mine in TypeScript so I can be sure I use the esbuild interfaces and call signatures correctly. This is easy enough to do with &lt;code&gt;ts-node&lt;/code&gt; and is the exact same thing I'm &lt;a href="https://github.com/elthrasher/cdk-esbuild-s3-website/blob/main/cdk.json#L2"&gt;already doing with CDK&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are two commands that I'll want to use: &lt;code&gt;build&lt;/code&gt; and &lt;code&gt;serve&lt;/code&gt;. The &lt;code&gt;serve&lt;/code&gt; command also builds the app so there's no need to use both of these together. I decided to use a single script for both since my build arguments won't change much. As this is going to be a npm script, I decided I'd give an optional argument to indicate my script is a build script, or else it will serve.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;build&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;BuildOptions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;BuildResult&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;serve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ServeResult&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;esbuild&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;env&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;build&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;production&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;development&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buildOptions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;BuildOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;bundle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;define&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;process.env.NODE_ENV&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`"&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"`&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="c1"&gt;// must be double-quoted&lt;/span&gt;
  &lt;span class="na"&gt;entryPoints&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ui/index.tsx&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tsx&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;logLevel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;warning&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;minify&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;outdir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;website/js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;sourcemap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;BuildResult&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;ServeResult&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;build&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;build&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buildOptions&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;serve&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;servedir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;website&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;buildOptions&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The script will be called via &lt;code&gt;ts-node esbuild.ts build&lt;/code&gt; for a build or &lt;code&gt;ts-node esbuild.ts&lt;/code&gt; to serve. I'll add &lt;code&gt;ts-node esbuild.ts&lt;/code&gt; as a script for the &lt;code&gt;start&lt;/code&gt; script and the build one goes under &lt;code&gt;build:website&lt;/code&gt;. Again, the conventions are loose, so get your own if you don't like mine.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"npm run clean &amp;amp;&amp;amp; npm run build:website"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build:website"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ts-node esbuild.ts build"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"clean"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"rimraf cdk.out coverage website/js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"deploy"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"npm run clean &amp;amp;&amp;amp; cdk deploy"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"lint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"eslint . --ext=.js,.ts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"pretest"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"npm run lint"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"npm run clean &amp;amp;&amp;amp; ts-node esbuild.ts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"jest --coverage"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Based on the options I've chosen, I'm going to grab TypeScript files from &lt;code&gt;./ui&lt;/code&gt; and wind up with a bundled js file in &lt;code&gt;./website/js&lt;/code&gt;. This app isn't transpiling or minifying the html, but there are some plugins to do that with esbuild. I'll also use the &lt;code&gt;define&lt;/code&gt; option to tell React I want to run in development mode when running the web server or production mode when bundling.&lt;/p&gt;

&lt;p&gt;At this point I can &lt;code&gt;npm start&lt;/code&gt; to check my progress.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--91K09fSf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nhsxzdyi9gf08chl4lmr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--91K09fSf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nhsxzdyi9gf08chl4lmr.png" alt="localhost screenshot" title="stuff"&gt;&lt;/a&gt;Design skills!&lt;/p&gt;

&lt;p&gt;Okay, that looks good (or like it's working anyway). I can also run &lt;code&gt;npm run build&lt;/code&gt; and see my transpiled code under &lt;code&gt;./website/js&lt;/code&gt;. So the esbuild part of this is all set.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#s3-deployment" class="anchor"&gt;
  &lt;/a&gt;
  S3 Deployment&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;One way to do this is implement an S3 deployer with a nice interface like &lt;a href="https://github.com/nideveloper/CDK-SPA-Deploy"&gt;CDK-SPA-Deploy&lt;/a&gt; and then add an npm script like &lt;code&gt;npm run build &amp;amp;&amp;amp; cdk deploy&lt;/code&gt;, but doing that wouldn't achieve my dream of an integrated UI build to match my Lambda function build. To do that, we'll need to dig into a couple of modules.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/cdk/api/latest/docs/aws-s3-deployment-readme.html"&gt;aws-s3-deployment&lt;/a&gt; is still marked experimental at the time of this writing, so bear that in mind, but it works pretty well. The concept here is similar to what we saw in aws-lambda-nodejs, but instead of automatically integrating with esbuild, we need to provide our own arbitrary build process. There are a couple of limitations, but it still works quite well.&lt;/p&gt;

&lt;p&gt;To begin with, we need to create an S3 bucket for website deployments.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;websiteBucket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Bucket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;WebsiteBucket&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;autoDeleteObjects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;publicReadAccess&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;removalPolicy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;RemovalPolicy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DESTROY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;websiteIndexDocument&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;index.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As a quick aside, I've enabled &lt;code&gt;autoDeleteObjects&lt;/code&gt; which is a recent CDK feature. CloudFormation lacks the capability to auto-clean an S3 bucket to remove it and so any attempt to delete a bucket (as one often does when one is experimenting) will cause the delete to fail and you're stuck manually removing stuff. When we provision a bucket with &lt;code&gt;autoDeleteObjects&lt;/code&gt; enabled, we'll automatically get a new Lambda function added to our stack that is triggered on stack delete and handles the cleanup. This is the same technique and framework I used to &lt;a href="https://dev.to/elthrasher/exploring-aws-cdk-a-million-a-minute-dynamodb-and-providerframework-e92"&gt;populate a database on deploy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Creating the bucket is quite straightforward, so how do we bundle and ship the code? To do that we'll need &lt;code&gt;@aws-cdk/aws-s3-deployment&lt;/code&gt;. This construct, which leans heavily on the core and assets constructs, will bundle code, stage it in a staging bucket, then move it to our website location.&lt;/p&gt;

&lt;p&gt;The deployment construct expects an array of source bundles matching the &lt;code&gt;ISource&lt;/code&gt; interface. We can produce such a bundle with &lt;code&gt;Source.asset&lt;/code&gt;. Without a build process, we'd just give &lt;code&gt;Source.asset&lt;/code&gt; a path to a directory or zip file, but if we look at the 2nd argument, &lt;code&gt;AssetOptions&lt;/code&gt;, we can find an intriguing option to add bundling.&lt;/p&gt;

&lt;p&gt;Asset bundling uses Docker to provide a runtime and command for the bundling. My experience with this on aws-lambda-nodejs is that it wasn't really welcome in an environment that is already likely to be running NodeJS. It makes sense for a polyglot framework like CDK to leverage Docker for various runtimes, but going without is faster (Docker adds lots of overhead) and the Docker runtimes are a bit hard to work with. In any case, Docker is the default at the time of this writing and we must implement &lt;code&gt;tryBundle&lt;/code&gt; to attempt local bundling. This is a &lt;em&gt;synchronous&lt;/em&gt; function that returns a boolean. If it returns true and if there is some kind of file in the expected output directory, then it was considered successful. If it returns false, or if the function isn't given an implementation, then the Docker build is attempted.&lt;/p&gt;

&lt;p&gt;So saying, here's how I implemented the bundling:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;execOptions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ExecSyncOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;stdio&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ignore&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;inherit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bundle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Source&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;asset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../ui&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;bundling&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sh&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;echo "Docker build not supported. Please install esbuild."&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;BundlingDockerImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromRegistry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;alpine&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="na"&gt;local&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;tryBundle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;outputDir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="nx"&gt;execSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;esbuild --version&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;execOptions&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="cm"&gt;/* istanbul ignore next */&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;execSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;npm run build&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;execOptions&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;copySync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../website&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;outputDir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;execOptions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;recursive&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Regrettably, the &lt;code&gt;tryBundle&lt;/code&gt; function signature is synchronous and cannot resolve promises. I'd rather call my &lt;code&gt;esbuild.ts&lt;/code&gt; programmatically instead of dropping to the shell for an npm script. &lt;code&gt;execSync&lt;/code&gt; works fine enough and will throw errors dutifully, but it would be very fine if I had more options in this integration.&lt;/p&gt;

&lt;p&gt;I used &lt;code&gt;copySync&lt;/code&gt; from the &lt;code&gt;fs-extra&lt;/code&gt; package to copy my build output into the expected outputDir. This is a small hack as it would be better for esbuild to send its output directly to the outputDir. We could probably provide that as another argument, but esbuild is not currently copying the index.html, so some extra work would be needed in the build script to manage that. I don't mind the hack in this example code, but to grow this, I'd probably look for the build script to manage all the files.&lt;/p&gt;

&lt;p&gt;As for the Docker build, I actually gave it a try, but it looks like my entire workspace is shared with the container meaning it's linux OS now has my MacOS npm modules and I got some permission errors when I tried to &lt;code&gt;npm install&lt;/code&gt;. I didn't really want the Docker build anyway, so I'm just pulling an alpine image to give an error message. Another opportunity for improvement here.&lt;/p&gt;

&lt;p&gt;These minor complaints aside, it works very well! I need only add my bucket deployment and I'm off!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BucketDeployment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DeployWebsite&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;destinationBucket&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;websiteBucket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;sources&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;bundle&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I'll also put in a &lt;code&gt;CfnOutput&lt;/code&gt; so I have easy access to my website url.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;CfnOutput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;webUrl&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;websiteBucket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bucketWebsiteUrl&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;There's nothing else to it. Now we &lt;code&gt;npm run deploy&lt;/code&gt; and our site is live!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6oEqjAhP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rum86fphfuznmpr3dpww.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6oEqjAhP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rum86fphfuznmpr3dpww.png" alt="Deployed S3 Website"&gt;&lt;/a&gt;Looks even better on AWS&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing" class="anchor"&gt;
  &lt;/a&gt;
  Testing&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This isn't an article about monorepos or how to fullstack, but I do want to call out how my CDK and React dependencies are living in harmony in the same package.json file. Normally when I see fullstack apps, each chunk of it has its own package.json file. I get why that's the norm, but the downside of it is all the linting and testing and all the other dependencies that go into each of those manifests. Do you use husky or lint-staged? Okay, time to install those eight times. Perhaps not a big deal, but I really believe we can gain something from simplifying our projects. There are some real issues with the JS ecosystem and all these node_modules all over the place isn't doing anyone any favors.&lt;/p&gt;

&lt;p&gt;Okay, so that little rant was a prelude to testing. Try it. &lt;code&gt;npm t&lt;/code&gt; runs eslint across the whole app (React code, CDK code and eventual backend/whatever code) and then runs all the unit tests as one suite.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wzFBLvi0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dwhxzbyh4o5h20cdz3ab.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wzFBLvi0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dwhxzbyh4o5h20cdz3ab.png" alt="Tests passed"&gt;&lt;/a&gt;I ❤️ this&lt;/p&gt;

&lt;p&gt;The other thing I'll draw attention to is my &lt;code&gt;ui-app-stack.spec.ts&lt;/code&gt; test which uses a Jest snapshot and matchers. I think snapshot testing is a great fit for CDK since the real purpose of CDK is to turn imperative code into CloudFormation. I can capture a snapshot of the cfn template and compare future runs to it. Of course we can write more tests on top of that, but to me the ROI of the snapshot is high here.&lt;/p&gt;

&lt;p&gt;So what's with the matchers? Asset hashes shift every time there's a change in the code. For example, without the matchers, if I grab a snapshot and then change one character, I wind up with a failing diff that looks like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vAyoasic--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tmegffb943h2g8y7bd6h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vAyoasic--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tmegffb943h2g8y7bd6h.png" alt="Snapshot diff of hashes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Matchers prevent that. It also means that my unit test doesn't notice these changes. To me, that's correct. I don't like the idea of developers getting in the mindset that you just blindly commit snapshots when they change. The diffs should be meaningful and represent intended results. For example:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U6n2yC_S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/15tz5twwhv7hk5h1c19s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U6n2yC_S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/15tz5twwhv7hk5h1c19s.png" alt="Snapshot diff of removal policy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'm heading for production and don't want my files to accidentally be deleted! This is a purposeful change which should be represented in the snapshot and cause a snapshot change. Anyway, I'm sure you see my point. I've had this discussion with others who feel that the snapshot should record the hashes since that was the state of the app at the time so YMMV. If you're in a situation with relatively low code churn, that could make a lot of sense!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-steps" class="anchor"&gt;
  &lt;/a&gt;
  Next Steps&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;I'm encouraged by the amount of customization I can put into my build job in CDK and work toward a goal of building cohesive fullstack apps. There are definitely some critical things missing from this little example, like CloudFront distributions, hosted zones, etc. I'm curious if the aws-s3-deployment module is going to be powerful enough to do all of that for me or if we'll need to rely on community constructs like cdk-spa-deploy.&lt;/p&gt;

&lt;p&gt;Another thing to puzzle out is patterns for grabbing Cfn output and bundling that into our UI applications. For example, outputting an API Gateway URL and then including that in a UI application. It's actually fairly complicated to do that because Cfn variables don't resolve until the deployment is completely finished. There are a few options out there, most of which involve either building something via Lambda or putting extra config in S3 after a build. It'll be interesting to see if this project or community can support a really ergonomic way to manage this challenge. I may bring in some of my own ideas in a future post.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://publicdomainreview.org/collection/fortunio-liceti-s-monsters-1665"&gt;COVER IMAGE&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cdk</category>
      <category>serverless</category>
      <category>esbuild</category>
    </item>
    <item>
      <title>Super readable String operations with `delete_prefix` and `delete_suffix`</title>
      <author>matt swanson</author>
      <pubDate>Mon, 22 Feb 2021 13:00:00 +0000</pubDate>
      <link>https://dev.to/swanson/super-readable-string-operations-with-deleteprefix-and-deletesuffix-2e8h</link>
      <guid>https://dev.to/swanson/super-readable-string-operations-with-deleteprefix-and-deletesuffix-2e8h</guid>
      <description>&lt;p&gt;One reason I love writing Ruby is that it’s optimized for programmer happiness. The Ruby community values code that is super readable.&lt;/p&gt;

&lt;p&gt;Programmers coming from other ecosystems are often shocked at much Ruby looks like pseudo-code. Between the standard library and extensions like &lt;code&gt;ActiveSupport&lt;/code&gt;, working with Ruby means you can write code in a natural way.&lt;/p&gt;

&lt;p&gt;A great example of this are the String methods &lt;code&gt;delete_prefix&lt;/code&gt; and &lt;code&gt;delete_suffix&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usage" class="anchor"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;

&lt;p&gt;You can use &lt;code&gt;delete_prefix&lt;/code&gt; to, as the name says, delete a substring from the beginning of a string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="s2"&gt;"BoringRails!"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;delete_prefix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Boring"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#=&amp;gt; "Rails!"&lt;/span&gt;

&lt;span class="s2"&gt;"#programming"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;delete_prefix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"#"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#=&amp;gt; "programming"&lt;/span&gt;

&lt;span class="s2"&gt;"ISBN: 9780091929787"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;delete_prefix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"ISBN: "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#=&amp;gt; "9780091929787"&lt;/span&gt;

&lt;span class="s2"&gt;"mailto:test@example.com"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;delete_prefix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"mailto:"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#=&amp;gt; "test@example.com"&lt;/span&gt;

&lt;span class="n"&gt;github_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"https://github.com/rails/rails"&lt;/span&gt;
&lt;span class="n"&gt;repo_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;github_url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;delete_prefix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"https://github.com/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#=&amp;gt; "rails/rails"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Compare this method to other options like &lt;code&gt;gsub&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;github_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"https://github.com/rails/rails"&lt;/span&gt;
&lt;span class="n"&gt;repo_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;github_url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;gsub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"https://github.com/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#=&amp;gt; "rails/rails"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;While &lt;code&gt;gsub&lt;/code&gt; is more flexible (it can take a Regex and swap multiple occurences), the code doesn’t read as naturally as &lt;code&gt;delete_prefix&lt;/code&gt;. And &lt;code&gt;delete_prefix&lt;/code&gt; is &lt;a href="https://docs.rubocop.org/rubocop-performance/cops_performance.html#performancedeleteprefix"&gt;more performant&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;If you want to remove characters at the end of a string, you have two main options: &lt;code&gt;chomp&lt;/code&gt; and &lt;code&gt;delete_suffix&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="s2"&gt;"report.csv"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;chomp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;".csv"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#=&amp;gt; "report"&lt;/span&gt;

&lt;span class="s2"&gt;"report.csv"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;delete_suffix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;".csv"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#=&amp;gt; "report"&lt;/span&gt;

&lt;span class="s2"&gt;"150 cm"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;delete_suffix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"cm"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to_i&lt;/span&gt;
&lt;span class="c1"&gt;#=&amp;gt; 150&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Stylistically, &lt;code&gt;chomp&lt;/code&gt; has a bit more of the whimsy that you might expect from Ruby, while &lt;code&gt;delete_suffix&lt;/code&gt; is a nice mirroring of &lt;code&gt;delete_prefix&lt;/code&gt; and more explicitly named. Both have similar &lt;a href="https://github.com/JuanitoFatas/fast-ruby#stringsub-vs-stringchomp-vs-stringdelete_suffix-code"&gt;performance benchmarks&lt;/a&gt; and are faster than &lt;code&gt;sub&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#additional-resources" class="anchor"&gt;
  &lt;/a&gt;
  Additional Resources
&lt;/h2&gt;

&lt;p&gt;Ruby API Docs: &lt;a href="https://ruby-doc.org/core-2.5.1/String.html#method-i-delete_prefix"&gt;String#delete_prefix&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ruby API Docs: &lt;a href="https://ruby-doc.org/core-2.5.1/String.html#method-i-delete_suffix"&gt;String#delete_suffix&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ruby Bug Tracker: &lt;a href="https://bugs.ruby-lang.org/issues/12694"&gt;Feature discussion&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;String method benchmarks: &lt;a href="https://github.com/JuanitoFatas/fast-ruby#string"&gt;Fast Ruby - String&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://twitter.com/_swanson"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0llgMsYy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://boringrails.com/images/twitter-banner.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
