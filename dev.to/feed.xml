<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>🚀20 Best CSS3 Library For Developers.</title>
      <author>Code with mosh</author>
      <pubDate>Thu, 12 Aug 2021 10:28:49 +0000</pubDate>
      <link>https://dev.to/gyygrr/20-best-css3-library-for-developers-4ele</link>
      <guid>https://dev.to/gyygrr/20-best-css3-library-for-developers-4ele</guid>
      <description>&lt;p&gt;Web Developers used to spend a lot of time creating beautiful CSS. Thanks to the CSS libraries, we now have a better, faster, and more effective way to build responsive websites and web applications.&lt;/p&gt;
&lt;p&gt;Are you still looking for the best CSS libraries? Do you want to know which library you should try? In this article, we have 20 best CSS libraries for your inspiration.&lt;/p&gt;
&lt;h2&gt;
&lt;br&gt;
&lt;a href="https://dev.to/chetan_atrawalkar/20-best-css3-library-for-developers-58p#how-do-css-libraries-work"&gt;&lt;/a&gt;🤔 How do CSS libraries work?&lt;/h2&gt;
&lt;p&gt;CSS library gives web developers a basic structure, which includes grid, interactive UI patterns, web typography, tooltips, buttons, form elements, icons. This structure helps web developers to start quickly and efficiently when they are designing a website or web applications.&lt;/p&gt;
&lt;p&gt;Here we have put together &lt;span&gt;20 best CSS libraries.&lt;/span&gt; We hope you like them, and most importantly, find the best one for your needs.&lt;/p&gt;
&lt;h4&gt;
&lt;br&gt;
&lt;a href="https://dev.to/chetan_atrawalkar/20-best-css3-library-for-developers-58p#lets-go"&gt;&lt;/a&gt;Let's go....🤩&lt;/h4&gt;
&lt;br&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/20-best-css3-library-for-developers/&amp;amp;ved=2ahUKEwii76qFzaPyAhWvyzgGHX9RA-kQFnoECAMQBQ&amp;amp;usg=AOvVaw2AtoxfMkY_y5JPLB2VuSdV"&gt;🚀20 Best CSS3 Library For Developers&lt;/a&gt;&lt;/b&gt;.

</description>
    </item>
    <item>
      <title>10 front-end projects (with designs) to help improve your coding skills</title>
      <author>Code with mosh</author>
      <pubDate>Thu, 12 Aug 2021 10:24:50 +0000</pubDate>
      <link>https://dev.to/gyygrr/10-front-end-projects-with-designs-to-help-improve-your-coding-skills-15p1</link>
      <guid>https://dev.to/gyygrr/10-front-end-projects-with-designs-to-help-improve-your-coding-skills-15p1</guid>
      <description>&lt;p&gt;&lt;span&gt;Are you aspiring to become a front-end developer? Then you should start building a portfolio right away! And the best to do so is by completing front end projects. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;That’s why in this article, we’re discussing many front end project ideas so you can get started and build a robust portfolio. Our list has projects of different skill levels so you can choose one according to your level of interest and expertise. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Read More: &lt;b&gt;&lt;a href="https://www.codelivly.com/frontend-developer-beginners-project-idea-for-developers-2021/"&gt;Frontend Project For Beginners developer&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
    </item>
    <item>
      <title>Kinx v1.0.3 Relaeased.</title>
      <author>Kray-G</author>
      <pubDate>Thu, 12 Aug 2021 10:20:05 +0000</pubDate>
      <link>https://dev.to/krayg/kinx-v1-0-3-relaeased-4lde</link>
      <guid>https://dev.to/krayg/kinx-v1-0-3-relaeased-4lde</guid>
      <description>&lt;p&gt;Hello everyone!&lt;/p&gt;

&lt;p&gt;I published Kinx v1.0.3 as an official release. See &lt;a href="https://github.com/Kray-G/kinx/releases"&gt;Release Page&lt;/a&gt; for details or I put the history since v1.0.0 at the bottom of this article.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reference

&lt;ul&gt;
&lt;li&gt;First motivation ... &lt;a href="https://dev.to/krayg/kinx-as-a-script-language-4iko"&gt;The post of introduction&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Kinx, I wanted a scripting language with a syntax of C family.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Repository ... &lt;a href="https://github.com/Kray-G/kinx"&gt;&lt;/a&gt;&lt;a href="https://github.com/Kray-G/kinx"&gt;https://github.com/Kray-G/kinx&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;I am waiting for pull requests.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Any comments are welcome.&lt;br&gt;
And also I'll wait for a star on Github!&lt;/p&gt;

&lt;p&gt;See you!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#change-log"&gt;
  &lt;/a&gt;
  Change Log
&lt;/h2&gt;

&lt;p&gt;Here is a change log since v1.0.0.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#v103-officially-released-20210810"&gt;
  &lt;/a&gt;
  V1.0.3 (Officially Released) - 2021/08/10
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  Improvements

&lt;ul&gt;
&lt;li&gt;  #308: Improvement of the stack usage.&lt;/li&gt;
&lt;li&gt;  Some feedbacks from V1.1.0.

&lt;ul&gt;
&lt;li&gt;  Supported putting a comma at the end of an argument's list for both declaration and calling.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;  Bug Fixed

&lt;ul&gt;
&lt;li&gt;  #302: Fixed a prblem of the string optimization.&lt;/li&gt;
&lt;li&gt;  #305: Fixed a prblem of no POPC in try.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#v102-officially-released-20210521"&gt;
  &lt;/a&gt;
  V1.0.2 (Officially Released) - 2021/05/21
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  Bug Fixed

&lt;ul&gt;
&lt;li&gt;  #284: Fixed a segmentation fault problem on Linux.&lt;/li&gt;
&lt;li&gt;  #288: Incorrect message is displayed when &lt;code&gt;File.open&lt;/code&gt; failed.&lt;/li&gt;
&lt;li&gt;  #289: &lt;code&gt;File.setFiledate&lt;/code&gt; does not work correctly.&lt;/li&gt;
&lt;li&gt;  #293: Fixed a problem of a stack overflow with &lt;code&gt;=~&lt;/code&gt; or &lt;code&gt;!~&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#v101-officially-released-20210422"&gt;
  &lt;/a&gt;
  V1.0.1 (Officially Released) - 2021/04/22
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  Improvements

&lt;ul&gt;
&lt;li&gt;  Improved type analysis for the language server.&lt;/li&gt;
&lt;li&gt;  Improved Array.keySet() for &lt;code&gt;Array&lt;/code&gt; itself.&lt;/li&gt;
&lt;li&gt;  #264: Supported to change directory.&lt;/li&gt;
&lt;li&gt;  #265: Supported &lt;code&gt;$pwd&lt;/code&gt; for getting a current directory.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;  Bug Fixed

&lt;ul&gt;
&lt;li&gt;  #235: Crash when using &lt;code&gt;_&lt;/code&gt; outside a function.&lt;/li&gt;
&lt;li&gt;  #236: Can't specify the class as a return type of function.&lt;/li&gt;
&lt;li&gt;  #237: Comparing between variables having a string is failed.&lt;/li&gt;
&lt;li&gt;  #256: Comparison operator will be failed with an integer on LHS and a variable(double) on RHS.&lt;/li&gt;
&lt;li&gt;  #257: Fails a destructuring assignment when declaration with const.&lt;/li&gt;
&lt;li&gt;  #258: There is a case that the bytecode is not outputted.&lt;/li&gt;
&lt;li&gt;  #267: Can't use a variable name using an upper case in debugger.&lt;/li&gt;
&lt;li&gt;  #269: Object item is removed by flatten().&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#v100-official-release-20210316"&gt;
  &lt;/a&gt;
  V1.0.0 (Official Release) - 2021/03/16
&lt;/h3&gt;

&lt;p&gt;This is 1st official release version.&lt;/p&gt;

</description>
      <category>kinx</category>
      <category>javascript</category>
      <category>ruby</category>
    </item>
    <item>
      <title>Story time with Treblle: The curious case of password reset</title>
      <author>Vedran Cindrić</author>
      <pubDate>Thu, 12 Aug 2021 09:47:53 +0000</pubDate>
      <link>https://dev.to/treblle/story-time-with-treblle-the-curious-case-of-password-reset-e1a</link>
      <guid>https://dev.to/treblle/story-time-with-treblle-the-curious-case-of-password-reset-e1a</guid>
      <description>&lt;p&gt;While working in our previous development company we were developing a new platform for a dear client. Our role was to develop the entire back-end with an API for mobile apps. Another development company, on a different side of the planet, was tasked to develop the mobile apps. At the beginning we had a lot of common challenges like communication, syncing time zones, documentation questions and others. I asked the client if we could add Treblle on the API side so we would eliminate some of these problems.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;As soon as we added Treblle and made a few calls to the API it was 100x easier.&lt;/strong&gt; The documentation was auto generated and updated, the mobile devs saw what they were doing. More importantly we also saw what they were doing so it was easier to understand how they were using the API and what problems they were facing. &lt;strong&gt;Interestingly enough our client also got into APIs and started to learn what we're doing, when we're working and when not 😎.&lt;/strong&gt; He was also a huge fan of the fact he could see the API response time because he felt like the app was slow and thought it was on the back-end side. Turns out it wasn't. Anyway…&lt;/p&gt;

&lt;p&gt;The app we were working on was already on the App store and the mobile team was preparing to do a new important update. When you are sending apps to the App Store if your app requires a login you HAVE to provide Apple with a login combination. We knew that, so we provided the credentials since day one and never changed them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The mobile team uploaded the new build, sent the app for review and after 2-3 days the build was rejected.&lt;/strong&gt; The reason Apple specified was "Login credentials were incorrect". Our client called me and was super irritated by the fact that the app got rejected. He started asking me why we changed the login data and explaining how he needed the update live ASAP. Now when something like this happens there aren’t a lot of options you have as a developer.&lt;/p&gt;

&lt;p&gt;One option is to investigate what happened by trying to login and reporting back to the client if it worked. What's even crazier is - if it works then why couldn't Apple login?! If it doesn’t work then you have to investigate your own team and the mobile apps team to see who changed the credentials and how. Finally you have to come back to your client and tell him xyz happened, we know what it was, we fixed it and 100% it won’t happen again.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The first thing I thought was let's use Treblle to see all the login attempts in the last 24 hours.&lt;/strong&gt; With Treblle you can view all requests between the API and apps including location and device data. Immediately I saw a request that happened a few hours ago, from an iOS device from Sunnyvale, California (Apple HQ). I also saw that they did in fact use the phone number we provided them for login, and that the API did return an error message saying that the login credentials were incorrect?!&lt;/p&gt;

&lt;p&gt;This is where it got interesting. With Treblle you can click on any request and find "More requests like this". Treblle will then go and find all requests made to the API from the same user. Taking into account things like IP, location and even the user ID. &lt;strong&gt;Because I could see requests in chronological order, as they were made by the Apple testers, I saw that the first thing they did was made a call to an API endpoint that resets the password&lt;/strong&gt; 🤣 I was shocked. I triple checked and realized exactly what happened. The app had a password reset option on the login screen. Apple testers clicked on reset password first. That sent an SMS with the new password. Since we used a made up phone number they didn’t get the SMS and didn’t think it would change the password.&lt;/p&gt;

&lt;p&gt;At that point I sent my client a link to the request on Treblle and explained to him what happened and what they did. We made a fix which wouldn’t change the password straight away but rather send a reset link in the SMS first. Not something my client wanted but got the job done. We sent the app for review and it got approved the next day😎 And yes, the first thing Apple did was the tried to reset the password 🚀.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If we didn't have Treblle I can guarantee you we would have never known what happened.&lt;/strong&gt; More importantly without Treblle we would have never been able to “prove” to the client what exactly happened. No other tool could help us figure this out that fast and easy. With Treblle it was clear as day to us, to him and to the mobile team. Since then the client always asked if Treblle was added to the API 💪🏻&lt;/p&gt;

</description>
      <category>tooling</category>
      <category>api</category>
      <category>ios</category>
      <category>startup</category>
    </item>
    <item>
      <title>GitHub 10 Repos for JavaScript Developer</title>
      <author>Suprabha</author>
      <pubDate>Thu, 12 Aug 2021 09:22:51 +0000</pubDate>
      <link>https://dev.to/suprabhasupi/github-10-repo-for-javascript-developer-23a9</link>
      <guid>https://dev.to/suprabhasupi/github-10-repo-for-javascript-developer-23a9</guid>
      <description>&lt;p&gt;I've included 10 amazing GitHub repos which will help you to become a better JavaScript Developer. These repository will clear your all doubts in Javascript, also you can practise more problems using the below repos.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-javascript-algorithms"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://github.com/trekhleb/javascript-algorithms"&gt;JavaScript Algorithms&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Star:&lt;/strong&gt; ~116k ⭐️&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UyJUVF51--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/UhCNtkl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UyJUVF51--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/UhCNtkl.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This repository contains JavaScript based examples of many popular algorithms and data structures.

Each algorithm and data structure has its own separate README with related explanations and links for further reading (including ones to YouTube videos).
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-javascript-questions"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://github.com/lydiahallie/javascript-questions"&gt; JavaScript Questions&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Star:&lt;/strong&gt; ~37k ⭐️&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xgYhqmQQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/DmCQnR7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xgYhqmQQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/DmCQnR7.png" alt="JavaScript Questions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;
This repository contains a long list of (advanced) JavaScript questions along with their explanations and gets frequently updated
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-clean-code-javascript"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://github.com/ryanmcdermott/clean-code-javascript"&gt;Clean Code JavaScript&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Star:&lt;/strong&gt; ~56k ⭐️&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7A0Onwm---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/jihs1hw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7A0Onwm---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/jihs1hw.png" alt="Clean Code JavaScript"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;
This repository consists of the software engineering principles, from Robert C. Martin's book Clean Code, adapted for JavaScript. It's a guide for producing readable, reusable, and refactored software in JavaScript.
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-awesome-javascript"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://github.com/sorrycc/awesome-javascript"&gt;Awesome JavaScript&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jzHf1xC7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/CfIRLyn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jzHf1xC7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/CfIRLyn.png" alt="Awesome JavaScript"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Star:&lt;/strong&gt; ~25k ⭐️&lt;/p&gt;

&lt;p&gt; A collection of awesome browser-side JavaScript libraries and resources. This repository contains a list of variety of frameworks, template engines, articles and post, documentations, reactive and functional programming 
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-30-seconds-of-code"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://github.com/30-seconds/30-seconds-of-code"&gt;30 seconds of Code&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Star:&lt;/strong&gt; ~82k ⭐️&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VB3Rx000--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/nUdPeX9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VB3Rx000--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/nUdPeX9.png" alt="30 seconds of Code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This repository contains a huge collection of short JavaScript code snippets which can be super useful while working on your JavaScript projects thus increasing your efficiency and knowledge.
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-you-dont-know-js"&gt;
  &lt;/a&gt;
  6. &lt;a href="https://github.com/getify/You-Dont-Know-JS"&gt;You don't know JS&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Star:&lt;/strong&gt; ~143k ⭐️&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jj4_V46k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Cw7SIHY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jj4_V46k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Cw7SIHY.png" alt="You don't know JS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This repo is a series of books on core mechanisms of the Javascript language. The 2nd edition of the series is currently in progress, while the first edition is available and is entirely free to read online!
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-js-interviews"&gt;
  &lt;/a&gt;
  7. &lt;a href="https://github.com/kdn251/interviews"&gt;JS Interviews&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Star:&lt;/strong&gt; ~53k ⭐️&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VLiWs6TK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ggWI35r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VLiWs6TK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ggWI35r.png" alt="Awesome Interviews"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; Your personal guide to Software Engineering technical interviews.
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-frontend-checklist"&gt;
  &lt;/a&gt;
  8. &lt;a href="https://github.com/thedaviddias/Front-End-Checklist"&gt;Front-End Checklist&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Star:&lt;/strong&gt; ~55k ⭐️&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PM5_dpGE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/PwqNb28.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PM5_dpGE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/PwqNb28.png" alt="Front-End Checklist"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are a million things to take care of when you launch a website. So how do you ensure you have taken care of things that can break your product when it goes into production. Enter Front-end Checklist.
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-front-end-interview-handbook"&gt;
  &lt;/a&gt;
  9. &lt;a href="https://github.com/yangshun/front-end-interview-handbook"&gt; Front End interview handbook&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Star:&lt;/strong&gt; ~31k ⭐️&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G6xGTJ1Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/qojLPd1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G6xGTJ1Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/qojLPd1.png" alt=" Front End interview handbook"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This repo promises to make you go from zero to front-end interview hero even if you don't have prior interview experience. And, from the number of stargazers it has, it looks like it delivers on that promise.
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-airbnb-javascript"&gt;
  &lt;/a&gt;
  10. &lt;a href="https://github.com/airbnb/javascript"&gt;Airbnb JavaScript&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Star:&lt;/strong&gt; ~113k ⭐️&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X1HbjgIe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/SSJGliq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X1HbjgIe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/SSJGliq.png" alt="Airbnb JavaScript"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A mostly reasonable approach to JavaScript
&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
Thanks for reading the article ❤️&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/suprabhasupi"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aDe0OdcG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/4t25pJE.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;
        🌟 &lt;a href="https://twitter.com/suprabhasupi"&gt; Twitter&lt;/a&gt;
      &lt;/td&gt;
      &lt;td&gt;
        📚 &lt;a href="https://gum.co/css-pseudo-class-elements"&gt; Ebooks&lt;/a&gt;
      &lt;/td&gt;
&lt;td&gt;
        🌟 &lt;a href="https://www.instagram.com/suprabhasupi/"&gt; Instagram&lt;/a&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>github</category>
    </item>
    <item>
      <title>Deploying our code at Feather</title>
      <author>vincent Audoire</author>
      <pubDate>Thu, 12 Aug 2021 09:01:04 +0000</pubDate>
      <link>https://dev.to/feather-insurance/deploying-our-code-at-feather-1h6a</link>
      <guid>https://dev.to/feather-insurance/deploying-our-code-at-feather-1h6a</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This article is part of our internal documentation at Feather. We build our product in the open and share our learnings with the community. We're always looking for talents to join our team &lt;a href="https://feather-insurance.com/careers"&gt;check out our careers page&lt;/a&gt;!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;At Feather, we love simple and efficient solutions. We firmly believe in continuous development and continuous integration with the shortest iteration cycle. Our workflows need to be designed so that if we need to deploy to productions &lt;em&gt;hundreds&lt;/em&gt; of times a day, we are be able to do so. &lt;/p&gt;

&lt;p&gt;We have been invested in automated tests from the start: we practice unit testing, integration testing, end to end tests, and more. We feel confident that we aren't breaking anything while developing. &lt;/p&gt;

&lt;p&gt;We use a branching policy inspired by &lt;a href="https://trunkbaseddevelopment.com"&gt;Trunk Based Development&lt;/a&gt; with the use of &lt;a href="https://martinfowler.com/articles/feature-toggles.html"&gt;Features Toggles&lt;/a&gt; in order to keep our velocity as high as possible. For version control, we're using GitHub and our continuous integration and continuous development runs on &lt;a href="https://github.com/features/actions"&gt;GitHub Actions&lt;/a&gt;. To learn more about this, check out our article on the &lt;a href="https://dev.to/feather-insurance/branching-policy-at-feather-3jjh"&gt;Branching policy at Feather&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This article describes our release and deployment policy. We have found a way to keep everyone on the team updated on important changes and have integrated it into our development workflow.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#deploying-our-code"&gt;
  &lt;/a&gt;
  Deploying our code
&lt;/h1&gt;

&lt;p&gt;Every commit pushed to the &lt;em&gt;main&lt;/em&gt; branch will trigger a staging build. In addition to this, every commit pushed to the &lt;em&gt;main&lt;/em&gt; branch will draft a new release on GitHub with the help of the &lt;a href="https://github.com/release-drafter/release-drafter"&gt;release drafter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The drafted release will contain all the commits added since the previous release and a suggested new version for the (soon to be) new release. The suggested new version is following the &lt;a href="https://semver.org"&gt;Semantic Versioning&lt;/a&gt; rules.&lt;/p&gt;

&lt;p&gt;In order to deploy our code to production, we simply need to click on the "Publish release" button on GitHub. From there, a GitHub action will take over and take care of the following: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Deploy the code to production.&lt;/li&gt;
&lt;li&gt;Notify the team (on Slack) about a new release being deployed and let them know what's changed.&lt;/li&gt;
&lt;li&gt;Bump &lt;code&gt;package.json&lt;/code&gt; version to one of the drafted releases and push the changes to GitHub.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#checklist-for-releasing"&gt;
  &lt;/a&gt;
  Checklist for releasing ✅
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jAYZUacn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yir3xgvd6ijkhsu62fc9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jAYZUacn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yir3xgvd6ijkhsu62fc9.png" alt="draft-release-detail-view"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In order to publish a release we need to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Check that the SemVer is correct&lt;/li&gt;
&lt;li&gt;Check that the "Raw changelog" section contains the changes we wish to deploy&lt;/li&gt;
&lt;li&gt;Check that the "What’s changed" section is descriptive enough. This will be read by non-techies 🤓&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If everything is correct ✅, click on (4) "Publish release". The version will shortly go live and the changelog will be sent to the whole team.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#release-notes"&gt;
  &lt;/a&gt;
  Release notes
&lt;/h1&gt;

&lt;p&gt;Everyone on the team is following our release notes, so they have to be easy to read. That's why we've split the notes into two sections: a high-level summary that is added by the person publishing the release and the raw changelog that's compiled of all the commit messages.&lt;/p&gt;

&lt;p&gt;You can use our release drafter template in your project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;name-template:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'app:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;v$RESOLVED_VERSION'&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;tag-template:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'v$RESOLVED_VERSION'&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;template:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;What’s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Changed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;🤩&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;_Please&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;insert&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;human&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;readable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;changelog&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;based&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;on&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;raw&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;changelog_&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Raw&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;changelog&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;📃&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;$CHANGES&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It looks like this in our Slack:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pa1eCiv---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ny7iuiegqdimv3otlr6x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pa1eCiv---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ny7iuiegqdimv3otlr6x.png" alt="release-note-slack"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>githubaction</category>
      <category>ci</category>
      <category>cd</category>
    </item>
    <item>
      <title>How to Create Forms with Webix JavaScript</title>
      <author>Serhii Pylypchuk</author>
      <pubDate>Thu, 12 Aug 2021 08:57:50 +0000</pubDate>
      <link>https://dev.to/serhiipylypchuk1991/how-to-create-forms-with-webix-javascript-m61</link>
      <guid>https://dev.to/serhiipylypchuk1991/how-to-create-forms-with-webix-javascript-m61</guid>
      <description>&lt;p&gt;The daily routine of a typical programmer consists of monotonous keystrokes and coffee breaks. A good programmer can reach the desired result with fewer keystrokes. And I don't mean the "&lt;em&gt;Ctrl+C / Ctrl+V&lt;/em&gt;" combination, as you might think :) In this article, I want to tell you how to save precious time and nerves if you need to create a beautiful and functional form.&lt;/p&gt;

&lt;p&gt;There are many libraries that provide a large number of features for working with forms. But today we will consider only one of the most convenient and multifunctional tools for building app interfaces of any complexity. It is about the Webix library and its capabilities.&lt;/p&gt;

&lt;p&gt;To prove that these are not empty words, we will create a small app for bookselling and see how to implement an &lt;strong&gt;order form&lt;/strong&gt; using Webix components.&lt;/p&gt;

&lt;p&gt;You can find the full source code and live demo &lt;a href="https://github.com/serhiipylypchuk1991/book-store-service"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Webix and Its Capabilities&lt;/h1&gt;

&lt;p&gt;Webix UI is a &lt;a href="https://webix.com/"&gt;JavaScript library&lt;/a&gt; that allows you to create a responsive design without worrying about the app's performance. The range of possibilities is represented by UI components of varying complexity. It can be a simple button and a complex solution. Each widget includes a whole set of methods and properties for flexible configuring and controlling. Besides, the library has extra tools. For example, event handling, methods of working with data, interaction with the server, styling themes and much more. You can find out more information about capabilities in the &lt;a href="https://docs.webix.com/"&gt;documentation&lt;/a&gt;. Now it is time to move on to the practice.&lt;/p&gt;

&lt;h1&gt;Main Preparations&lt;/h1&gt;

&lt;p&gt;In order to use the Webix library, we need to include it in the main index.html file. It is worth mentioning here that the library is distributed in 2 versions: the basic &lt;a href="https://webix.com/get-webix-gpl/"&gt;GPL&lt;/a&gt; and extended &lt;a href="https://webix.com/download/"&gt;Pro&lt;/a&gt; version. The GPL version is free and provides a wide set of features that cover 97.26% of our day-to-day needs. But for working with forms, which are the main topic of this article, we will need some special features of the advanced version. I will mention them in the process. Based on this, we will use the extended Pro trial version to get the most impact.&lt;/p&gt;

&lt;p&gt;To get the trial version of the library, we need to visit the &lt;a href="https://webix.com/download/"&gt;download page&lt;/a&gt;, enter the necessary data and get a link for downloading the coveted archive.&lt;/p&gt;

&lt;p&gt;The archive includes the &lt;strong&gt;&lt;em&gt;webix/codebase/&lt;/em&gt;&lt;/strong&gt; folder with two sacred files, namely: &lt;em&gt;"webix.js"&lt;/em&gt; and &lt;em&gt;"webix.css"&lt;/em&gt;. In order for the Webix magic to start working, we need to move this folder into the root of our project and include the library source files in the &lt;em&gt;index.html&lt;/em&gt; file:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;It's worth noting that these files are also available via the CDN at the following links:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;We'll use local files, as they work faster and do not need Internet access (sometimes it happens). The &lt;em&gt;index.html&lt;/em&gt; file looks like this:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;We have created a basic &lt;em&gt;index.html&lt;/em&gt; file and included all the necessary tools. Let's start with making an overview of our app.&lt;/p&gt;

&lt;h1&gt;Application Overview&lt;/h1&gt;

&lt;p&gt;We have a small bookselling app. It consists of a toolbar and two replaceable modules, namely:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;module with a catalog of books&lt;/li&gt;
&lt;li&gt;module with a book description and order form.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The module with the catalog consists of small blocks, 2 items in one row. Each block contains a short description of the product and button to order. It is worth clarifying here that we use the &lt;strong&gt;&lt;a href="https://docs.webix.com/desktop__dataview.html"&gt;dataview&lt;/a&gt;&lt;/strong&gt; widget for creating this module. In the browser, we will see the following result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--60VwABo2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xu2qk4w6hikm0tuxlviv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--60VwABo2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xu2qk4w6hikm0tuxlviv.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When clicking on the "&lt;strong&gt;Buy now&lt;/strong&gt;" button, the user will see the module with a detailed description of the product. For its creation we use the &lt;strong&gt;&lt;a href="https://docs.webix.com/desktop__template.html"&gt;template&lt;/a&gt;&lt;/strong&gt; widget. Next to the product description we will place the module with our form, which this article is devoted to. In the browser, we will see the following result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ueGGcBTG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6i1r65310u3ubtb3h746.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ueGGcBTG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6i1r65310u3ubtb3h746.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And now our task is to add a module with a form, where the user can enter all the necessary data for ordering. As you may know, the purpose of any form is collecting information from users. In our case, we are going to collect the following data:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;information about the order and its delivery&lt;/li&gt;
&lt;li&gt;information about the user&lt;/li&gt;
&lt;li&gt;information about the payment.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each form should contain input fields and various controls, namely: checkboxes, radiobuttons, selectors, buttons and much more. Considering the data we need to collect, our form will be large enough.&lt;/p&gt;

&lt;p&gt;If we don't want to scare off the user with a large number of fields and controls, let's divide the form into semantic groups mentioned above. Each group will deal with each particular order step. Group will be placed in a separate tab and the user will be able to navigate back and forth through them. There will be 3 tabs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the first one includes an order form with the possibility to choose between the *"pick-up"* and *"delivery"* options. If the user chooses *"delivery"*, the app will display some extra fields for entering the desired delivery address&lt;/li&gt;
&lt;li&gt;the second one includes a form for user's personal data&lt;/li&gt;
&lt;li&gt;the last tab includes a form to collect information about the user's credit card. , where the user may enter information about the credit card.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The interface of each form will be created in a separate file and saved to a variable. These variables will be used for building the layout in the &lt;em&gt;index.html&lt;/em&gt; file.&lt;/p&gt;

&lt;h1&gt;Layout for Module with Forms&lt;/h1&gt;

&lt;p&gt;In this article, we will not dive into the details of building the entire app layout. If you would like to study this topic more deeply, read the &lt;a href="https://webix-ui.medium.com/creating-a-booking-application-with-webix-ui-32e1ee42e799"&gt;Creating a Booking App with Webix UI&lt;/a&gt; article. You can also refer to the &lt;strong&gt;&lt;a href="https://docs.webix.com/desktop__layout.html"&gt;layout&lt;/a&gt;&lt;/strong&gt; documentation. There you will find an exhaustive description of all properties and methods with corresponding samples.&lt;/p&gt;

&lt;p&gt;Here we are interested in only the part of the layout containing the tabs with forms. These tabs will be switched by the user dynamically. For such cases, Webix provides a special &lt;strong&gt;&lt;a href="https://docs.webix.com/api__refs__ui.multiview.html"&gt;multiview&lt;/a&gt;&lt;/strong&gt; component. The needed modules (in our case it is the forms) have to be placed in the array of the &lt;strong&gt;&lt;em&gt;cells&lt;/em&gt;&lt;/strong&gt; property. When initial loading, the first element of this array will be displayed. To navigate between modules, we need to set them a unique &lt;strong&gt;id&lt;/strong&gt;. The code of layout looks like this:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;We have created the layout with forms. Now let's get down to the forms directly. And we start with the order form.&lt;/p&gt;

&lt;h1&gt;Order Form&lt;/h1&gt;

&lt;p&gt;The order form will consist of two logical parts. The first part will contain the fields for information about the order itself, and the second one - about its delivery.&lt;/p&gt;

&lt;p&gt;Initially, the form will be displayed only with the "&lt;strong&gt;Order Information&lt;/strong&gt;" section:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VZf0a8bl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9eqbn0qwd4nryx87mh2j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VZf0a8bl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9eqbn0qwd4nryx87mh2j.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The second one "&lt;strong&gt;Delivery Information&lt;/strong&gt;" section will be hidden by default. We will show it only if the user selects the corresponding option of the &lt;strong&gt;radio&lt;/strong&gt; control. The order form with 2 sections will look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h05aqpBa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pzhe3s1mvd7f7k2rh7hw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h05aqpBa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pzhe3s1mvd7f7k2rh7hw.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To navigate through the tabs with forms, we will use the "&lt;strong&gt;Back&lt;/strong&gt;" and "&lt;strong&gt;Next&lt;/strong&gt;" buttons. The former button returns us to the catalog of goods, and the latter displays the next form.&lt;/p&gt;

&lt;p&gt;Now let's take a look at how to implement all of this in code.&lt;/p&gt;

&lt;p&gt;To collect data from users, Webix provides a special &lt;a href="https://docs.webix.com/desktop__form.html"&gt;&lt;strong&gt;form&lt;/strong&gt;&lt;/a&gt; widget and a number of related &lt;a href="https://docs.webix.com/desktop__controls.html"&gt;&lt;strong&gt;controls&lt;/strong&gt;&lt;/a&gt;. The form organisation is similar to the &lt;a href="https://docs.webix.com/desktop__layout.html"&gt;&lt;strong&gt;layout&lt;/strong&gt;&lt;/a&gt; component. We can divide form into rows and columns, putting the necessary controls into the corresponding containers.&lt;/p&gt;

&lt;p&gt;We create a form in the &lt;em&gt;order_form.js&lt;/em&gt; file and save it to the &lt;strong&gt;order_form&lt;/strong&gt; variable:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Here we also need to define the form layout mentioned above. For doing this, the widget has dedicated &lt;a href="https://docs.webix.com/api__link__ui.form_cols_config.html"&gt;&lt;strong&gt;&lt;em&gt;cols&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;, &lt;a href="https://docs.webix.com/api__link__ui.form_rows_config.html"&gt;&lt;strong&gt;&lt;em&gt;rows&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt; and &lt;a href="https://docs.webix.com/api__link__ui.form_elements_config.html"&gt;&lt;strong&gt;&lt;em&gt;elements&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt; properties. The first two properties allow us to divide the component interface into columns and rows. The &lt;strong&gt;&lt;em&gt;elements&lt;/em&gt;&lt;/strong&gt; property we are going to use, allows us to place the form elements as rows. All we need to do is to place two sections with the desired fields into the array of this property. Now let's tackle these sections.&lt;/p&gt;

&lt;h2&gt;The "Order Information" Section&lt;/h2&gt;

&lt;p&gt;To group the form fields into sections, we use the &lt;a href="https://docs.webix.com/api__refs__ui.fieldset.html"&gt;&lt;strong&gt;fieldset&lt;/strong&gt;&lt;/a&gt; component. The first section is "&lt;strong&gt;Order Information&lt;/strong&gt;". It combines several inputs for collecting the order data. The name of this section is defined via the &lt;strong&gt;&lt;em&gt;label&lt;/em&gt;&lt;/strong&gt; property. The desired controls will be described in the object of the &lt;strong&gt;&lt;em&gt;body&lt;/em&gt;&lt;/strong&gt; property.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;All the fields within this section will be arranged in rows. For this, we need to put them inside the array of the &lt;strong&gt;&lt;em&gt;rows&lt;/em&gt;&lt;/strong&gt; property. Now let's create these fields.&lt;/p&gt;

&lt;h3&gt;Special Field for Order Name&lt;/h3&gt;

&lt;p&gt;Let's start with the field that contains the order name. It doesn't need any data entry, since its value is set dynamically. To create this field, we can use 2 label components and arrange them as columns. The first component will contain the field name, and the second one will contain the name of the selected item (in our case it is the book title).&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now the section looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KMSHhtNZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3817e11u5mm86i4377jd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KMSHhtNZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3817e11u5mm86i4377jd.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the second label we need to set the &lt;strong&gt;&lt;em&gt;name&lt;/em&gt;&lt;/strong&gt; property to the &lt;strong&gt;&lt;em&gt;order_name&lt;/em&gt;&lt;/strong&gt; value. The unique name is required to access corresponding form elements. The reason is that the value of this control will be set and read dynamically via the form API. We also need to specify the unique names for other fields, the values ​​of which we are going to set or read.&lt;/p&gt;

&lt;h3&gt;Control for Goods Amount Setting&lt;/h3&gt;

&lt;p&gt;In this section we need to give the user an ability to indicate the desired number of goods. To do this, let's use the special &lt;a href="https://docs.webix.com/desktop__counter.html"&gt;&lt;strong&gt;counter&lt;/strong&gt;&lt;/a&gt; tool and specify its label and unique name. We can also define the min and max values via the dedicated &lt;strong&gt;&lt;em&gt;min&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;max&lt;/em&gt;&lt;/strong&gt; properties.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now the section looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9IgmBmT_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3s5phx5y3trmhms0lh93.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9IgmBmT_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3s5phx5y3trmhms0lh93.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Input Field for Gift Card&lt;/h3&gt;

&lt;p&gt;Now let's create a field where the user can enter a gift card number. It is best to use the &lt;a href="https://docs.webix.com/desktop__text.html"&gt;&lt;strong&gt;text&lt;/strong&gt;&lt;/a&gt; control here. Besides the name and label, we can set a placeholder via the &lt;strong&gt;&lt;em&gt;placeholder&lt;/em&gt;&lt;/strong&gt; property and a special icon on the right part of the field via the &lt;strong&gt;&lt;em&gt;clear&lt;/em&gt;&lt;/strong&gt; property. The icon will appear when the user enters data in the field. When he clicks on this icon, the entered data will be deleted and the icon will disappear.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now the section looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EW0Ppx0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/khit0sf4bq5du8yj7j28.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EW0Ppx0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/khit0sf4bq5du8yj7j28.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Special Field for Order Price&lt;/h3&gt;

&lt;p&gt;Next, we have a field for displaying the order price. The price, as well as the order name, is set dynamically via the form's API and changes depending on the selected parameters. Here we do the same as with the order name field: use 2 &lt;a href="https://docs.webix.com/desktop__label.html"&gt;&lt;strong&gt;label&lt;/strong&gt;&lt;/a&gt; components, place them as columns and set the name to the second one through its &lt;strong&gt;&lt;em&gt;name&lt;/em&gt;&lt;/strong&gt; property.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now the section looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IRhwmLRG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x2kwtzqgdhde58dxtdr9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IRhwmLRG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x2kwtzqgdhde58dxtdr9.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Control for Order Receiving Method&lt;/h3&gt;

&lt;p&gt;In this section, we have to implement the field where the user can select the receiving order method: pick-up or delivery. We can do this via the &lt;a href="https://docs.webix.com/desktop__radio.html"&gt;&lt;strong&gt;radio&lt;/strong&gt;&lt;/a&gt; control with two options. The label of this control will be empty, because the radio button names are informative enough. The options data for the radio buttons are set via the &lt;strong&gt;&lt;em&gt;options&lt;/em&gt;&lt;/strong&gt; property.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now let's make it so that if the user switches between the "&lt;em&gt;Delivery&lt;/em&gt;" and "&lt;em&gt;Pick-up&lt;/em&gt;" options, the "&lt;strong&gt;Delivery Information&lt;/strong&gt;" section will be displayed or hidden correspondingly. Let me remind you that the "&lt;em&gt;Pick-up&lt;/em&gt;" option is selected by default, and the section itself is hidden.&lt;/p&gt;

&lt;p&gt;To handle the desired event, we need to specify the special &lt;strong&gt;&lt;em&gt;on&lt;/em&gt;&lt;/strong&gt; property into the constructor of the &lt;strong&gt;radio&lt;/strong&gt; control. In the object of this property, we also need to specify the required event (in our case, it is &lt;em&gt;onChange&lt;/em&gt;) and set to it the desired handler.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;First, we get the current value of the &lt;strong&gt;radio&lt;/strong&gt; control via its &lt;strong&gt;getValue()&lt;/strong&gt; method. If the value is 1 (the "&lt;em&gt;pick-up&lt;/em&gt;" option is selected), we will hide the "&lt;strong&gt;Delivery Information&lt;/strong&gt;" section via its &lt;strong&gt;hide()&lt;/strong&gt; method.&lt;/p&gt;

&lt;p&gt;If the value is 2 (the "&lt;em&gt;delivery&lt;/em&gt;" option is selected), we will display the "&lt;strong&gt;Delivery Information&lt;/strong&gt;" section via its &lt;strong&gt;show()&lt;/strong&gt; method.&lt;/p&gt;

&lt;p&gt;The whole section looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1UoYXvjc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yktlnysgpne0oos8yauh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1UoYXvjc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yktlnysgpne0oos8yauh.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;The "Delivery Information" Section&lt;/h2&gt;

&lt;p&gt;Now let's move on to the "&lt;strong&gt;Delivery Information&lt;/strong&gt;" section. It combines the fields for entering the delivery address. We create it in the same way as the previous "&lt;strong&gt;Order Information&lt;/strong&gt;" section. As mentioned above, this section is hidden by default. To do this, we need to set its &lt;strong&gt;&lt;em&gt;hidden&lt;/em&gt;&lt;/strong&gt; property to &lt;em&gt;true&lt;/em&gt;.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;To ship the order, we need to get a delivery address. For this, we will create special fields in which the user can enter the following parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;country&lt;/li&gt;
&lt;li&gt;address within the country:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;region&lt;/li&gt;
&lt;li&gt;city&lt;/li&gt;
&lt;li&gt;street and house&lt;/li&gt;
&lt;li&gt;zip code&lt;/li&gt;
&lt;/ul&gt;




&lt;li&gt;desired shipping date&lt;/li&gt;

&lt;li&gt;additional instructions.&lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;Besides, we will provide the user with the ability to insure the delivery. And as a nice bonus, the user will be able to choose the desired packaging color, which I personally attach great importance to :) Now let's start implementing our plan.&lt;/p&gt;

&lt;h3&gt;Control for Country Selection&lt;/h3&gt;

&lt;p&gt;Let's make it so that the user doesn’t enter the country name but selects it from the drop-down list. For creating this field we can use the &lt;a href="https://docs.webix.com/desktop__combo.html"&gt;&lt;strong&gt;combo&lt;/strong&gt;&lt;/a&gt; tool of the Webix library. In addition to the standard set of properties ( &lt;em&gt;label, name, clear and placeholder&lt;/em&gt; ), we need to parse data for the drop-down list options. This is done via the &lt;strong&gt;&lt;em&gt;options&lt;/em&gt;&lt;/strong&gt; property. The data can be set either as an array with data (if they are on the client) or as the path to the data on the server. The data schema should be as follows:&lt;/p&gt;

&lt;pre&gt;
[
    { "id":1, "value":"Canada" },
    { "id":2, "value":"United Kingdom" },
    ...
]
&lt;/pre&gt;

&lt;p&gt;The library allows us to make the fields required for filling. To do this, we need to set the &lt;strong&gt;&lt;em&gt;required&lt;/em&gt;&lt;/strong&gt; property to &lt;em&gt;true&lt;/em&gt;. As a result, we will see a special red marker at the top right corner of the label. Looking ahead, if the user leaves such a field empty and runs validation, it will turn in red and the data will not be sent.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now the section looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O-sO5nGW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2jdba24k0chtqdzxyp5c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O-sO5nGW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2jdba24k0chtqdzxyp5c.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Input Fields for Delivery Address&lt;/h3&gt;

&lt;p&gt;All the fields for addresses within the country will contain the same settings. To create them, we use the well-known &lt;strong&gt;text&lt;/strong&gt; control and a set of basic properties: &lt;em&gt;label, name, clear, placeholder and required&lt;/em&gt;.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now the section looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ktE15lb6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4gsuuj9o2tj89xez1agr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ktE15lb6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4gsuuj9o2tj89xez1agr.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Control for Shipping Date Selection&lt;/h3&gt;

&lt;p&gt;We can ask the user about the desired shipping date of the order. And here, instead of the usual input field, Webix provides us with a special &lt;a href="https://docs.webix.com/desktop__datepicker.html"&gt;&lt;strong&gt;datepicker&lt;/strong&gt;&lt;/a&gt; widget. When the user clicks on it, the component will display a compact calendar, in which he can select the required shipping date. In addition to the basic properties mentioned above, we can specify the format for displaying the date via the &lt;strong&gt;&lt;em&gt;format&lt;/em&gt;&lt;/strong&gt; property. To read more about all capabilities of this widget, visit its &lt;a href="https://docs.webix.com/api__refs__ui.datepicker.html"&gt;documentation&lt;/a&gt; page.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now the section looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0UQxk0OD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lpoz4t5p3a06deppyfsx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0UQxk0OD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lpoz4t5p3a06deppyfsx.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Field for Additional Instructions&lt;/h3&gt;

&lt;p&gt;It is difficult to foresee the fields for each specific situation. Sometimes it happens that the user wants to specify the additional delivery instructions. For example, he wants the order to be left on the porch of the house or packed in additional packaging. Let's give the user such ability in our form.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://docs.webix.com/desktop__textarea.html"&gt;&lt;strong&gt;textarea&lt;/strong&gt;&lt;/a&gt; component is the best decision for such an issue. If you have worked with plain HTML forms, you should be familiar with this element. In addition to the standard settings of this widget, we will set a fixed height via its &lt;strong&gt;&lt;em&gt;height&lt;/em&gt;&lt;/strong&gt; property.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now the section looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pRxE89FA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z4z9b8h0ndzwjgrj3vtf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pRxE89FA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z4z9b8h0ndzwjgrj3vtf.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Control for Applying Insurance&lt;/h3&gt;

&lt;p&gt;Let's provide our users with the ability to insure order delivery.&lt;/p&gt;

&lt;p&gt;To apply for insurance, we will use the &lt;a href="https://docs.webix.com/desktop__switch.html"&gt;&lt;strong&gt;switch&lt;/strong&gt;&lt;/a&gt; control. It is a toggle button that allows the user to switch between two opposite values ​​(0 and 1). Besides the label and name, we can specify 2 inside labels for active and passive states. This can be done via its &lt;strong&gt;&lt;em&gt;onLabel&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;offLabel&lt;/em&gt;&lt;/strong&gt; properties.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h3&gt;Control for Сolor Selection&lt;/h3&gt;

&lt;p&gt;As mentioned above, we will give users the ability to choose the packaging color. For this, the Webix library provides several widgets, namely: &lt;a href="https://docs.webix.com/desktop__colorpicker.html"&gt;&lt;strong&gt;colorpicker&lt;/strong&gt;&lt;/a&gt;, &lt;a href="https://docs.webix.com/desktop__colorselector.html"&gt;&lt;strong&gt;colorselect&lt;/strong&gt;&lt;/a&gt; and &lt;a href="https://docs.webix.com/desktop__colorboard.html"&gt;&lt;strong&gt;colorboard&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Since we only have 4 types of color packages, the best option would be the &lt;strong&gt;colorboard&lt;/strong&gt; widget with a limited palette.&lt;/p&gt;

&lt;p&gt;We can specify the palette colors via the &lt;strong&gt;&lt;em&gt;palette&lt;/em&gt;&lt;/strong&gt; property and the default color via the &lt;strong&gt;&lt;em&gt;value&lt;/em&gt;&lt;/strong&gt; property. Let's also set fixed dimensions for each palette box via the corresponding &lt;strong&gt;&lt;em&gt;width&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;height&lt;/em&gt;&lt;/strong&gt; properties, and remove the border around the component using its &lt;strong&gt;&lt;em&gt;borderless&lt;/em&gt;&lt;/strong&gt; property.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The whole section looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nBWuoEL6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gq5vf6jzsmar9vhv7fpz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nBWuoEL6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gq5vf6jzsmar9vhv7fpz.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Buttons for Navigation&lt;/h2&gt;

&lt;p&gt;For the order form we have to implement one more important part. It is about buttons for switching to the next form and back to the trade list. For creating these buttons we will use the &lt;a href="https://docs.webix.com/desktop__button.html"&gt;&lt;strong&gt;button&lt;/strong&gt;&lt;/a&gt; component.&lt;/p&gt;

&lt;p&gt;To apply built-in styling, we need to set the css property to the corresponding webix class. In our case, it is about the &lt;em&gt;webix_secondary&lt;/em&gt; and &lt;em&gt;webix_primary&lt;/em&gt; classes.&lt;/p&gt;

&lt;p&gt;The button name is set via its &lt;strong&gt;&lt;em&gt;label&lt;/em&gt;&lt;/strong&gt; property. For completeness, it is worth noting that along with the label of each button, we will place a small arrow to indicate the button's purpose. The left arrow for going back (in this case, to the goods list), and the right one for going forward to the next form. To define built-in webix icons, we need to use dedicated css classes.&lt;/p&gt;

&lt;p&gt;Both these buttons will be displayed as columns. For this, we need to put them into the array of the &lt;strong&gt;&lt;em&gt;cols&lt;/em&gt;&lt;/strong&gt; property.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The buttons look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VUkTr-KD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fdli8kquu97ffqk3takf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VUkTr-KD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fdli8kquu97ffqk3takf.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The order form interface is ready. Now we need to include the &lt;em&gt;order_form.js&lt;/em&gt; file into &lt;em&gt;index.html&lt;/em&gt; and put the &lt;strong&gt;order_form&lt;/strong&gt; variable into the layout code. In the browser, we will see the following result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--siYPOTqF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fx67ackf8tl2cpo8593r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--siYPOTqF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fx67ackf8tl2cpo8593r.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;User Form&lt;/h2&gt;

&lt;p&gt;After the user has entered the necessary information about the order, we need to get his personal data. It is required for identifying the user when he comes to pick up his order or receives it through the delivery service.&lt;/p&gt;

&lt;p&gt;Let's create a separate form with fields for entering the following personal data:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;first and last name&lt;/li&gt;
&lt;li&gt;age&lt;/li&gt;
&lt;li&gt;gender&lt;/li&gt;
&lt;li&gt;contact information:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;email&lt;/li&gt;
&lt;li&gt;phone number.&lt;/li&gt;
&lt;/ul&gt;




&lt;/ul&gt;

&lt;p&gt;The user form will look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--siYPOTqF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fx67ackf8tl2cpo8593r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--siYPOTqF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fx67ackf8tl2cpo8593r.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's see how to implement this in the code.&lt;/p&gt;

&lt;p&gt;We create a form in the &lt;em&gt;user_form.js&lt;/em&gt; file and save it to the &lt;strong&gt;user_form **variable. After this we define the "&lt;/strong&gt;User Information**" section with the fields mentioned above.&lt;/p&gt;

&lt;h3&gt;Input Fields for First and Last Name&lt;/h3&gt;

&lt;p&gt;Now let's move on to the fields in which the user can enter its first and last name. To create them, we can use the well-known &lt;strong&gt;text&lt;/strong&gt; control. As in the previous form, for these controls we also specify a standard set of properties, namely: &lt;em&gt;label, name, placeholder, clear and required&lt;/em&gt;.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now the section looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f5L7SXef--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v8mdqq4q7vjrsmhkixni.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f5L7SXef--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v8mdqq4q7vjrsmhkixni.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Controls for Age and Gender&lt;/h3&gt;

&lt;p&gt;Next, we have 2 optional fields. It is about a counter with which the user can indicate his age and radio buttons for choosing a gender.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Counter&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To get the user age, we can use the &lt;strong&gt;counter&lt;/strong&gt; control. We have already used it to define the number of goods.&lt;/p&gt;

&lt;p&gt;The age of our customer should be in the range from 18 to 100. These parameters can be set via the &lt;strong&gt;&lt;em&gt;min&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;max&lt;/em&gt;&lt;/strong&gt; properties.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Radio&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To get the user gender, we can use the &lt;strong&gt;radio&lt;/strong&gt; control. We have also used it to select the method of the order receiving. The widget will consist of 2 options, namely: &lt;em&gt;Male&lt;/em&gt; and &lt;em&gt;Female&lt;/em&gt;.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now the section looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gOrYWRR3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aoc02kvbdx4b78sziub8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gOrYWRR3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aoc02kvbdx4b78sziub8.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Input Fields for Contact Information&lt;/h3&gt;

&lt;p&gt;To contact the user for clarifying any additional information and notifying about the order readiness or its dispatch, we need to get its contact information.&lt;/p&gt;

&lt;p&gt;Let's create 2 fields in which the user can enter his email and phone number. For this, we use the *&lt;em&gt;text **control and specify the set of standard properties (*label, name, placeholder, clear and required&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;A special emphasis should be placed on the phone number field. Here we can apply a special mask for entering a phone number. To do this we need to set the &lt;strong&gt;&lt;em&gt;pattern&lt;/em&gt;&lt;/strong&gt; property to the built-in &lt;strong&gt;&lt;em&gt;webix.patterns.phone&lt;/em&gt;&lt;/strong&gt; value. It is worth mentioning here that this is one of those features that are available only in the PRO version. In &lt;a href="https://docs.webix.com/desktop__formatted_text_inputs.html"&gt;this&lt;/a&gt; article, you can find more information about the input field formatting.&lt;/p&gt;

&lt;p&gt;The mask allows users to enter only 11 characters of the phone number, adds a "+" sign at the beginning of the number and encloses the telephone operator code in parentheses. Other characters will be ignored.&lt;/p&gt;

&lt;p&gt;Let's give a little hint for filling this field and add a short message at the bottom of the input. For this, we can use the &lt;strong&gt;&lt;em&gt;bottomLabel&lt;/em&gt;&lt;/strong&gt; property.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The whole section looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nUrQfWlg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p5nd27n3xtagesnwlr81.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nUrQfWlg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p5nd27n3xtagesnwlr81.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For this form, we also need to add navigation buttons. Here we don't have to bother too much and just copy the similar code from the previous form. The differences will only be visible when we make these buttons workable.&lt;/p&gt;

&lt;p&gt;The user form interface is ready. Now we just need to include the &lt;em&gt;user_form.js&lt;/em&gt; file into &lt;em&gt;index.html&lt;/em&gt; and put the &lt;strong&gt;user_form&lt;/strong&gt; variable into layout code. In the browser, we will see the following result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dlVyRllW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3r4grx1wpceubhqohloc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dlVyRllW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3r4grx1wpceubhqohloc.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;Payment form&lt;/h1&gt;

&lt;p&gt;After the user has entered personal data, we need to get his credit card information for paying the order through a special service.&lt;/p&gt;

&lt;p&gt;Let's create a separate form for payment information and collect the following data:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;card number&lt;/li&gt;
&lt;li&gt;cardholder's name&lt;/li&gt;
&lt;li&gt;expiration date&lt;/li&gt;
&lt;li&gt;CVV code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The payment form will look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WdQEayz---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z8vn1go5qxq3l8igiwww.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WdQEayz---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z8vn1go5qxq3l8igiwww.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We create a form in the &lt;em&gt;payment_form.js&lt;/em&gt; file and save it to the &lt;strong&gt;payment_form&lt;/strong&gt; variable. After this, we define the "&lt;strong&gt;Payment Information&lt;/strong&gt;" section with the fields mentioned above.&lt;/p&gt;

&lt;p&gt;The first field is intended for the card number. Besides the standard properties of the &lt;strong&gt;text&lt;/strong&gt; control (&lt;em&gt;label, name, placeholder, clear and required&lt;/em&gt;), we also specify a built-in mask for entering the card number: &lt;strong&gt;&lt;em&gt;pattern: webix.patterns.card&lt;/em&gt;&lt;/strong&gt;. It means that the user can enter only 16 digits indicated on the front of his card. Other characters will be ignored. I would like to remind you that masks are only available in the Pro version.&lt;/p&gt;

&lt;p&gt;Next, we need to create a field for entering the name of the cardholder. The &lt;strong&gt;text&lt;/strong&gt; control of this field will also include the standard set of properties mentioned above.&lt;/p&gt;

&lt;p&gt;The controls for selecting card expiration date deserve more attention. Here we can use 2 &lt;a href="https://docs.webix.com/desktop__richselect.html"&gt;&lt;strong&gt;richselect&lt;/strong&gt;&lt;/a&gt; components. When the user clicks on it, the widget will display a drop-down list with options. The data for these options are set via the &lt;strong&gt;&lt;em&gt;options&lt;/em&gt;&lt;/strong&gt; property.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now we move on to the field for entering the CVV code. Here the user needs to enter 3 secret digits indicated on the back of the card. The &lt;strong&gt;text *&lt;em&gt;control of this field will also include a standard set of properties. Besides, we can set the *&lt;/em&gt;*type&lt;/strong&gt;* property to the &lt;em&gt;password&lt;/em&gt; value, to define the type of the field. It will display asterisks instead of the entered data. We will also specify a custom mask via the &lt;strong&gt;&lt;em&gt;pattern&lt;/em&gt;&lt;/strong&gt; property. So now the user can enter only 3 digits of the CVV code.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Let's add some control for saving the entered data in the browser settings. If the user enters data and checks this control, he can reuse payment data the next time. For this, we use the &lt;a href="https://docs.webix.com/desktop__checkbox.html"&gt;&lt;strong&gt;checkbox&lt;/strong&gt;&lt;/a&gt; control with the &lt;strong&gt;&lt;em&gt;name&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;labelRight&lt;/em&gt;&lt;/strong&gt; properties. The second property will display the label on the right part of the control&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;For this form, we also need to add corresponding buttons for going back and making the order. Here we just copy the similar code from the previous form and rename the second button to "&lt;strong&gt;Make order&lt;/strong&gt;".&lt;/p&gt;

&lt;p&gt;The payment form interface is ready. Now we just need to include the &lt;em&gt;payment_form.js&lt;/em&gt; file into index.html and put the &lt;strong&gt;payment_form&lt;/strong&gt; variable into layout code. In the browser, we will see the following result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ImGYucqL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iw7i62kp45gwd3kufw8r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ImGYucqL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iw7i62kp45gwd3kufw8r.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;How to Get the App Working&lt;/h1&gt;

&lt;p&gt;Above we have described the layout and interface of our forms. But this is only half the way. Now let's get them to work. And for this, Webix has all the necessary tools.&lt;/p&gt;

&lt;h3&gt;The List of Goods&lt;/h3&gt;

&lt;p&gt;And we will start from the main page, where the list of goods is displayed. Each block on this page consists of a short description and the "&lt;strong&gt;Buy now&lt;/strong&gt;" button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xRtk90Xu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/igyyjs2wzyd3hnrn3d1d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xRtk90Xu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/igyyjs2wzyd3hnrn3d1d.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When the user clicks on this button, we need to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;show the module with the order form&lt;/li&gt;
&lt;li&gt;fill out the order form with the data of the selected book.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To implement the mentioned above, we need to handle the button &lt;strong&gt;click&lt;/strong&gt; event. This can be done via the corresponding &lt;strong&gt;&lt;em&gt;onClick&lt;/em&gt;&lt;/strong&gt; property of the &lt;strong&gt;dataview&lt;/strong&gt; widget. Inside the object of this property, we specify the &lt;em&gt;css&lt;/em&gt; class of our button and set a handler to it as a value.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;To fill out the order form fields, we can use its &lt;strong&gt;setValues()&lt;/strong&gt; method and pass the object with the needed data as a parameter.&lt;/p&gt;

&lt;p&gt;As you remember, we have set the name for all form fields via the &lt;strong&gt;&lt;em&gt;name&lt;/em&gt;&lt;/strong&gt; property. In the data object, we use these names as the keys and set them to the corresponding values.&lt;/p&gt;

&lt;p&gt;If we pass only the data object to the method, it will remove all the form values ​​and set new values specified in the object. In this case, the delivery information will also be cleared and the user will need to enter the address again.&lt;/p&gt;

&lt;p&gt;To avoid this inconvenience, we can pass the &lt;em&gt;true&lt;/em&gt; value to the method as the second parameter. So now the method will change only the values passed in the object.&lt;/p&gt;

&lt;p&gt;After all the data manipulation, we can switch the &lt;strong&gt;multiview&lt;/strong&gt; component to the next module using its &lt;strong&gt;show()&lt;/strong&gt; method.&lt;/p&gt;

&lt;h3&gt;How to Calculate the Order Price&lt;/h3&gt;

&lt;p&gt;Now we need to calculate the order price and update it every time when the user changes the number of goods or applies the insurance control.&lt;/p&gt;

&lt;p&gt;To listen to any change in the form fields, we need to use the &lt;strong&gt;&lt;em&gt;on&lt;/em&gt;&lt;/strong&gt; property. In the object of this property, we can specify the desired event and its handler.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;So now we need to create this handler. And it will look like this:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Here we get an object with the form values ​​via its &lt;strong&gt;getValues()&lt;/strong&gt; method. It is worth noting that this object will include only the fields value with the &lt;strong&gt;&lt;em&gt;name&lt;/em&gt;&lt;/strong&gt; property.&lt;/p&gt;

&lt;p&gt;The price variable stores the total goods price. It depends on the initial price (set in the hidden &lt;em&gt;initial_price&lt;/em&gt; field) and the goods count.&lt;/p&gt;

&lt;p&gt;Next, we need to check the insurance that can be applied in the "&lt;strong&gt;Delivery Information&lt;/strong&gt;" section and will affect the order price. For this, we check the visibility of the "&lt;strong&gt;Delivery Information&lt;/strong&gt;" section using the &lt;strong&gt;isVisible()&lt;/strong&gt; method. It returns &lt;em&gt;true&lt;/em&gt; if the section is visible and &lt;em&gt;false&lt;/em&gt; if not.&lt;/p&gt;

&lt;p&gt;If the section is visible, we need to check the state of the &lt;strong&gt;switch&lt;/strong&gt; control (if enabled - value 1, if disabled - value 0) and generate the final order cost. If the insurance is applied, we will increase the cost by 20%.&lt;/p&gt;

&lt;p&gt;When the final order price is ready, we need to update it in the corresponding &lt;strong&gt;Price&lt;/strong&gt; field. To do this, we can use the &lt;strong&gt;setValues​​()&lt;/strong&gt; method and update only the field we need.&lt;/p&gt;

&lt;p&gt;Now the order price is updated dynamically when the user changes the number of goods and applies the insurance.&lt;/p&gt;

&lt;h3&gt;How to Navigate Between Forms&lt;/h3&gt;

&lt;p&gt;In each form of our application, we have created the "&lt;strong&gt;Back&lt;/strong&gt;" and "&lt;strong&gt;Next&lt;/strong&gt;" buttons to navigate between tabs.&lt;/p&gt;

&lt;p&gt;The "&lt;strong&gt;Back&lt;/strong&gt;" button will switch the &lt;strong&gt;multiview&lt;/strong&gt; component to the previous module, and the "&lt;strong&gt;Next&lt;/strong&gt;" button to the next one. To get the buttons to work, we need to catch the click events and set the appropriate handlers.&lt;/p&gt;

&lt;p&gt;To handle the click event, the &lt;strong&gt;button&lt;/strong&gt; control has a special &lt;strong&gt;&lt;em&gt;click&lt;/em&gt;&lt;/strong&gt; property.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;In the handler of the "&lt;strong&gt;Back&lt;/strong&gt;" button of the user form, we go back to the trade list via its &lt;strong&gt;show()&lt;/strong&gt; method.&lt;/p&gt;

&lt;pre&gt;
function goBackCustomHandler(){
    $$("trade_list").show(); //go to the trade list
}
&lt;/pre&gt;

&lt;p&gt;In the same handlers of two other forms, we go to the previous module via the &lt;strong&gt;back()&lt;/strong&gt; method of the &lt;strong&gt;multiview&lt;/strong&gt; widget, which contains the tabs with the forms.&lt;/p&gt;

&lt;pre&gt;
function goBackCustomHandler(){
    $$("form_multiview").back(); //go to the previous module
}
&lt;/pre&gt;

&lt;p&gt;In the handler of the "&lt;strong&gt;Next&lt;/strong&gt;" button, we also use the &lt;strong&gt;show()&lt;/strong&gt; method to display the desired module, included in the &lt;strong&gt;multiview&lt;/strong&gt; component.&lt;/p&gt;

&lt;pre&gt;
function goNextCustomHandler(){
    $$("id_of_next_form").show();
}
&lt;/pre&gt;

&lt;p&gt;In this way we will change tabs dynamically.&lt;/p&gt;

&lt;h3&gt;How to Validate the Forms&lt;/h3&gt;

&lt;p&gt;When the user clicks on the "&lt;strong&gt;Next&lt;/strong&gt;" button and before switching to the next form, we need to validate the current form. This can be done in the "&lt;strong&gt;Next&lt;/strong&gt;" button handler:&lt;/p&gt;

&lt;pre&gt;
function goNextCustomHandler(){
    if($$("id_of_current_form").validate()){
        $$("id_of_next_form").show();
    }
}
&lt;/pre&gt;

&lt;p&gt;Here we run the validation of the current form via its &lt;strong&gt;validate()&lt;/strong&gt; method. It will return true if the validation is successful, and false if not. It should be noted here that the method checks only those form fields for which we applied the rules. Webix allows setting these rules for a separate field via its &lt;a href="https://docs.webix.com/api__ui.text_required_config.html"&gt;&lt;strong&gt;&lt;em&gt;required&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt; and &lt;a href="https://docs.webix.com/api__ui.text_validate_config.html"&gt;&lt;strong&gt;&lt;em&gt;validate&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt; properties, and for the whole form via its &lt;a href="https://docs.webix.com/api__link__ui.form_rules_config.html"&gt;&lt;strong&gt;&lt;em&gt;rules&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt; property.&lt;/p&gt;

&lt;p&gt;I hope you still remember that for the required fields we defined the required property. This property adds a red asterisk to the labels of the required fields. By default, such fields are validated by the built-in &lt;strong&gt;&lt;em&gt;webix.rules.isNotEmpty&lt;/em&gt;&lt;/strong&gt; rule and must be filled. If at least one of these fields is not filled in, the validation method will return an error and the fields will be highlighted in red.&lt;/p&gt;

&lt;p&gt;The unvalidated order form will look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C2wz1-zG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mll6xgmudyzujgq06tvg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C2wz1-zG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mll6xgmudyzujgq06tvg.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If all the required fields of this form are filled in, or the "Delivery Information" section is hidden, the multiview will be switched to the next form.&lt;/p&gt;

&lt;p&gt;Besides the &lt;strong&gt;&lt;em&gt;required&lt;/em&gt;&lt;/strong&gt; property with the default validation rule, we can apply other built-in rules or define our own. Let's set such rules for checking the email and phone number in the user form. And this can be done in the object of the &lt;strong&gt;&lt;em&gt;rules&lt;/em&gt;&lt;/strong&gt; property of the form.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;To check the email address, we use the built-in &lt;strong&gt;&lt;em&gt;webix.rules.isEmail&lt;/em&gt;&lt;/strong&gt; rule, and for the phone number we use our own condition. Since the phone number consists of 11 digits, we will return an error if the entered value length is less than the required one.&lt;/p&gt;

&lt;p&gt;To make the field validation more informative, let's add a hint that will be displayed if the validation method returns an error. For the required fields, we need to specify the &lt;strong&gt;&lt;em&gt;invalidMessage&lt;/em&gt;&lt;/strong&gt; property and set it to the error message.&lt;/p&gt;

&lt;p&gt;The unvalidated user form will look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mBhOF2zs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1f28uq7e9bygo85x4vv7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mBhOF2zs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1f28uq7e9bygo85x4vv7.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In case the user navigates to the previous form and then comes back, let's clear the validation markers of the current form. To do this, we can use the &lt;strong&gt;clearValidation()&lt;/strong&gt; method of the form and call it in the "&lt;strong&gt;Back&lt;/strong&gt;" button handler.&lt;/p&gt;

&lt;h3&gt;How to Make Order&lt;/h3&gt;

&lt;p&gt;In the last payment form, we have created the "&lt;strong&gt;Make order&lt;/strong&gt;" button instead of the "&lt;strong&gt;Next&lt;/strong&gt;" button. This button runs validation and, if successful, collects data from all three forms, clears the current form and displays the main page with the goods list. The handler code will look like this:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;In a real example, the collected data needs to be sent to the server for further processing. But this is the topic of another article.&lt;/p&gt;

&lt;h1&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;You can find the full source code and live demo &lt;a href="https://github.com/serhiipylypchuk1991/book-store-service"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this article, we have detailed how to create forms using the Webix library, and now we know:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;how to connect the library&lt;/li&gt;
&lt;li&gt;how to describe UI components using JSON syntax&lt;/li&gt;
&lt;li&gt;how to use component methods&lt;/li&gt;
&lt;li&gt;how to set the event handlers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And most importantly, we have learned how to work with Webix forms, apply various controls and use methods for managing the form (collecting and setting data, validation, etc.).&lt;/p&gt;

&lt;p&gt;As you can see, the widget names, their methods and properties are intuitive and easy to use. In fact, this is only a small part of everything that the library can offer. For more detailed information, you can go to the &lt;a href="https://docs.webix.com/"&gt;documentation&lt;/a&gt;, which contains a detailed description of all the possibilities with examples.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>html</category>
    </item>
    <item>
      <title>Python ile REST-API Servisi Oluşturma</title>
      <author>Ali Buğra Okkalı</author>
      <pubDate>Thu, 12 Aug 2021 08:26:17 +0000</pubDate>
      <link>https://dev.to/aciklab/rest-api-e26</link>
      <guid>https://dev.to/aciklab/rest-api-e26</guid>
      <description>&lt;h1&gt;
  &lt;a href="#rest-api-nedir-"&gt;
  &lt;/a&gt;
  REST API Nedir ?
&lt;/h1&gt;

&lt;p&gt;REST  (&lt;strong&gt;R&lt;/strong&gt;epresentational &lt;strong&gt;S&lt;/strong&gt;tate &lt;strong&gt;T&lt;/strong&gt;ransfer)  Temsili Durum Aktarımı anlamına gelir. &lt;/p&gt;

&lt;p&gt;Bir istemci bir sunucudan kaynaklar hakkında bilgi almak için bir istekte bulunduğunda, sunucu kaynağın mevcut durumunu istemci makineye geri aktarır.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bay7ekfe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k1evd4zhnf0822vxgohz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bay7ekfe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k1evd4zhnf0822vxgohz.png" alt="representational-state-transfer-diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yukarıdaki şekilde de görebilceğiniz gibi , istemci bir veri tabanı sunucusundan veri talep edebileceğiniz PC'nizdir ve tüm iletişim REST API'leri üzerinden yapılır.&lt;/p&gt;

&lt;p&gt;Bunun için de birkaç farklı yöntem vardır :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;GET&lt;/strong&gt; - İstemci tarafından sunucudan veri seçmek veya almak için kullanılır.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;POST&lt;/strong&gt; - İstemci tarafından sunucuya veri göndermek veya yazmak için kullanılır.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;PUT&lt;/strong&gt; - İstemci tarafından sunucudaki mevcut verileri güncellemek için kullanılır.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;DELETE&lt;/strong&gt; - İstemci tarafından sunucudaki mevcut verileri silmek için kullanılır.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#rest-api-nas%C4%B1l-olu%C5%9Fturulur-"&gt;
  &lt;/a&gt;
  REST API Nasıl Oluşturulur ?
&lt;/h1&gt;

&lt;p&gt;API'ler Java, C#, Python vb. gibi istediğiniz herhangi bir programlama dili kullanılarak oluşturulabilir.&lt;/p&gt;

&lt;p&gt;Bu uygulamada, bir API oluşturmak için Python'u kullanacağız ve bunun için Flask olarak bilinen bir kütüphaneden yararlanacağız. Flask, bizim için bir sunucu oluşturmak için ağır kaldırmanın çoğunu yapan popüler bir hafif web uygulaması geliştirme çerçevesidir ve geliştiriciler olarak yalnızca API'leri oluşturmak için iş mantığına odaklanmamız gerekir.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#kurulum"&gt;
  &lt;/a&gt;
  Kurulum
&lt;/h1&gt;

&lt;p&gt;Şimdi, Rest-API'yi oluşturmak için kullanacağımız flask, flask_restful ve veri işlemede kullanacağımız pandas paketlerini python3-pip ile kuralım.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo apt install python3-pip
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ pip3 install flask
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ pip3 install flask_restful
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ pip3 install pandas
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#kod"&gt;
  &lt;/a&gt;
  Kod
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://github.com/abugraokkali/Rest-API"&gt;https://github.com/abugraokkali/Rest-API&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Gerekli paketlerin import edilmesi.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from flask import Flask
from flask_restful import Api, Resource, reqparse
import pandas as pd
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Api nesnesinin oluşturulması.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app = Flask(__name__)
api = Api(app)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;GET çağırıldığında users.csv okunması, dict formatına çevrilmesi ve döndürülmesi.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Users(Resource):
    def get(self):
        data = pd.read_csv('users.csv')
        data = data.to_dict('records')
        return {'data' : data}, 200
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;POST çağırıldığında girdilerin parse edilmesi ve users.csv'ye bir satır eklenmesi.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    def post(self):
        parser = reqparse.RequestParser()
        parser.add_argument('name', required=True)
        parser.add_argument('age', required=True)
        parser.add_argument('city', required=True)
        args = parser.parse_args()

        data = pd.read_csv('users.csv')

        new_data = pd.DataFrame({
            'name'      : [args['name']],
            'age'       : [args['age']],
            'city'      : [args['city']]
        })

        data = data.append(new_data, ignore_index = True)
        data.to_csv('users.csv', index=False)
        return {'data' : new_data.to_dict('records')}, 201
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Çoğu zaman bir API'de kaynağınızın birden çok URL'si olacaktır. Api nesnesindeki add_resource() fonksiyonu ile birden çok URL iletebilirsiniz. Her biri bir Resource'a yönlendirilecektir.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;api.add_resource(Users, '/users')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#%C3%A7al%C4%B1%C5%9Ft%C4%B1rma"&gt;
  &lt;/a&gt;
  Çalıştırma
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ python3 flask_app.py 

Serving Flask app 'flask_app' (lazy loading)

Environment: production
WARNING: This is a development server. Do not use it in a production deployment.
Use a production WSGI server instead.

Debug mode: off

Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#testler"&gt;
  &lt;/a&gt;
  Testler
&lt;/h1&gt;

&lt;p&gt;Testler için bir VSCode eklentisi olan Thunder Client kullanılmıştır.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;GET http://127.0.0.1:5000/users&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u_3EO-CE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qtd021cvv7nybf27qmby.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u_3EO-CE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qtd021cvv7nybf27qmby.png" alt="GET"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;POST http://127.0.0.1:5000/users?name=Bugra&amp;amp;age=29&amp;amp;city=Istanbul&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hLIk-xo9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aikrp3i508nvv1a79dur.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hLIk-xo9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aikrp3i508nvv1a79dur.png" alt="POST"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;GET http://127.0.0.1:5000/users&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_Ft4f2UH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rqd9id7b5l8ooqo82wmf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_Ft4f2UH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rqd9id7b5l8ooqo82wmf.png" alt="GET2"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;GET http://127.0.0.1:5000/Tom&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CigUkQKt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xpm5ksl5wwph7tn946b2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CigUkQKt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xpm5ksl5wwph7tn946b2.png" alt="GET3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Ali Buğra Okkalı&lt;br&gt;
HAVELSAN - 2021&lt;/em&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>flask</category>
      <category>api</category>
    </item>
    <item>
      <title>Cost reduction techniques: Lesson for travel app development</title>
      <author>Adamo Digital</author>
      <pubDate>Thu, 12 Aug 2021 08:15:59 +0000</pubDate>
      <link>https://dev.to/adamodigitalco/cost-reduction-techniques-lesson-for-travel-app-development-22f3</link>
      <guid>https://dev.to/adamodigitalco/cost-reduction-techniques-lesson-for-travel-app-development-22f3</guid>
      <description>&lt;p&gt;&lt;em&gt;Apparently, the &lt;a href="https://adamodigital.com/travel-hospitality-software-development"&gt;travel software development&lt;/a&gt; market becomes more competitive, which leads to small companies or startups demanding cost reduction techniques to maximize their profits&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Indeed, applying &lt;strong&gt;IT cost reduction strategies&lt;/strong&gt; is now an essential requirement when travel startup demand to set foot in this competitive market. These cost reduction methods can support small businesses in managing their budget more effectively and avoiding the redundant cost that is unnecessary. From that, a business can minimize their development cost, focus on what is vital in the development process, where to hire a dedicated development company, which area they should spend. Therefore, cost-cutting strategies for companies are now needed more than ever. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#advantages-of-applying-costcutting-techniques"&gt;
  &lt;/a&gt;
  Advantages of applying cost-cutting techniques
&lt;/h2&gt;

&lt;p&gt;By applying effective types of cost reduction techniques in &lt;a href="https://adamodigital.com/"&gt;software development&lt;/a&gt;, a business can spend their money to enhance other activities, including marketing, customer services, and employee support.&lt;/p&gt;

&lt;p&gt;As the profit is increased, management may spend more on providing amenities to workers. It will ensure more productivity at work and more cordial relationships between management and workers; also reduce the labor turnover. &lt;/p&gt;

&lt;p&gt;With the money spending on the essential sector, the travel business can create competitive advantages over competitors. Travel app publishers can deliver different practical functions to users and continuously search for improvement based on user feedback. Also, the quality of the app can also be enhanced to reduce the concerns of bugs and lags from mobile travel users. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#factors-affecting-travel-app-development-cost"&gt;
  &lt;/a&gt;
  Factors affecting travel app development cost
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dsr4WYsf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dug2cqqg9kdbc0u6jpem.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dsr4WYsf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dug2cqqg9kdbc0u6jpem.jpg" alt="Cost reduction technique"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;1. The number and complexity of features:&lt;/strong&gt; Definitely, the number of features and their complexity is one of the critical factors that affect &lt;a href="https://adamodigital.com/travel-portal-development"&gt;travel app development&lt;/a&gt; cost. The less time and effort to build the software, the lower the price will be.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Operating systems:&lt;/strong&gt; The travel app development cost depends on the type and number of operating systems, such as IOS, Android, Windows, Linux, etc. For example, developing a native &lt;a href="https://adamodigital.com/our-services"&gt;software solution&lt;/a&gt; for IOS only will be less costly than for IOS and Android. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. UI and UX design:&lt;/strong&gt; UI and UX design is a critical development stage that businesses should focus on. Design size and complexity affect the budget for developing a &lt;a href="https://adamodigital.com/our-portfolio"&gt;software project&lt;/a&gt;. More screens, pages, handcrafted elements, complex animations will lead to more cost of this stage.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Quality assurance:&lt;/strong&gt; In this process, QA engineers will check the system for bugs, errors, and compliance with the project specification. Also, they have to ensure the software provides a consistent user experience on all devices and platforms. Glitches, maintenance, bugs are the problems of the increase in final price.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Third-party API integration:&lt;/strong&gt; In the &lt;a href="https://adamodigital.com/about-us"&gt;software development&lt;/a&gt; process, third-party service integration is necessary to enable functionality. With API integration, engineers are able to save time and effort. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cost-reduction-methods-for-travel-app-publishers"&gt;
  &lt;/a&gt;
  Cost reduction methods for travel app publishers
&lt;/h3&gt;

&lt;p&gt;Most new businesses, when starting developing travel apps, usually pay for services that not necessary. They mostly pay for their tools, vehicles, applications, services, and even excessive fees. That’s why travel app businesses need cost reduction consultants to ensure they are following the correct methods. Bellow are most effective IT cost reduction strategies:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#you-should-start-with-evaluating-your-business-expenses"&gt;
  &lt;/a&gt;
  You should start with evaluating your business expenses
&lt;/h4&gt;

&lt;p&gt;Among cost-saving methods in a company, evaluating the expenses is the most effective one. Travel app publishers can cut down unused services and products, vendors that are bugging down. Businesses need carefully considering which elements are crucial should be invested in &lt;a href="https://adamodigital.com/booking-engines"&gt;travel app development&lt;/a&gt;. The money from redundant services should be spent on organizational growth campaigns to increase business efficiency quickly. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#understand-target-market"&gt;
  &lt;/a&gt;
  Understand target market
&lt;/h4&gt;

&lt;p&gt;Defining a target market is a massive priority for reducing costs. In the tourism industry, rather than spending money to create an app similar to competitors, businesses should focus on finding answers to solve traveler’s problems. From that, businesses can avoid marketing costs, advertisement costs as users have to install the unique app to get the solution. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#hire-remote-contractors-and-freelancers"&gt;
  &lt;/a&gt;
  Hire remote contractors and freelancers
&lt;/h4&gt;

&lt;p&gt;Of course, hiring a freelancer can be a very effective cost reduction strategy for your business. Businesses can avoid the cost of renting office space and co-working offices. Additionally, companies don’t need to provide benefits to freelancers because they are often self-employed. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#automate-as-much-as-possible"&gt;
  &lt;/a&gt;
  Automate as much as possible
&lt;/h4&gt;

&lt;p&gt;Automation is about replacing humans with computers to smaller timeframes for production, meaning fewer person hours and consequently reduced costs. Additionally, applying automation in &lt;a href="https://adamodigital.com/travel-hospitality-software-development"&gt;travel app development&lt;/a&gt; can enable developers to avoid time-consuming tasks and spend more time on other important ones. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#partnering-with-experts"&gt;
  &lt;/a&gt;
  Partnering with experts
&lt;/h4&gt;

&lt;p&gt;Definitely, partnering with &lt;a href="https://adamodigital.com/dedicated-software-development-team"&gt;offshore software development teams&lt;/a&gt; can be a valuable strategy for reducing the cost. These outsourcing software development teams can be highly competitive in pricing, especially in countries like Vietnam. Adamo Digital - a professional &lt;a href="https://adamodigital.com/"&gt;software development company&lt;/a&gt;, will provide full-cycle services in software development, especially in the travel industry with the best price on the market. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#build-a-minimum-viable-product"&gt;
  &lt;/a&gt;
  Build a minimum viable product
&lt;/h4&gt;

&lt;p&gt;In those types of cost reduction techniques, MVP development is a valuable method to reduce the cost of developing a software project and faster receive a working solution. This method is widely used to test ideas, attract investors, and better time-to-market.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Where to develop a mobile app for travel?&lt;/strong&gt; &lt;em&gt;As mentioned above, Vietnam is the ideal place for travel startups who want to develop a mobile or web application due to its competitive price.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>startup</category>
      <category>costreduction</category>
      <category>strategies</category>
    </item>
    <item>
      <title>These habits will make you a better developer</title>
      <author>Benjamin Kalungi</author>
      <pubDate>Thu, 12 Aug 2021 08:08:06 +0000</pubDate>
      <link>https://dev.to/bk_973/these-habits-will-make-you-a-better-developer-4gl7</link>
      <guid>https://dev.to/bk_973/these-habits-will-make-you-a-better-developer-4gl7</guid>
      <description>&lt;p&gt;Learning how to code isn't the end of the journey for a software developer; it's just the beginning of a new journey. Developers need to open up their minds to learning new stuff at anytime. This would lead to growth and improvement of skill and these improvements would lead to career success thereafter.&lt;/p&gt;

&lt;p&gt;The Software Industry is indeed fast-paced with lots of new technologies poping up quite often. This kind of race leads to an ever-increasing demand for top talent. What that means for developers is that they have to be willing to keep up with the pace in order to stay relevant to potential employers or clients.&lt;/p&gt;

&lt;p&gt;But keeping up with this flashy pace is easier said than done and staying relevant requires some serious hardwork and consistency. In this article I'll share with you seven proven habits that will make you a better developer. These habits worked for me and if you are willing to put in the work, they will work for you as too.&lt;/p&gt;

&lt;p&gt;Let's get started.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Read other people's code&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Exposure to expert work will most likely make you an expert too, atleast in some way. You will be able to learn way too much from other people's code e.g new concepts, tricks, best practices, etc. Continually doing this will inspire your own ideas and insights when writing your own code. It's easy; Go to github.com, fork some repositories and do some deep reading.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Be clear about what you know and what you don't yet know&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It's a good trait to let go of your geeky ego and accept what you don't yet know. It'll really be a great way for you to learn. It's such a wonderful habit that comes with multiple benefits for you as a developer eg. You will have clear guidance on the specificity of the questions that you want to seek answers to, Your focus will be put to the areas where you need it most, You'll get quality answers to your questions since your questions will be to the point, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Share your knowlege and skill&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;No developer is an island; Just the way you need support from other devs, it's the same way that they need your support. However little the contribution might seem, it'll make a bigger difference in the long run and the community will be proud you. So whichever opportunity that you get to giveout something, never hesitate. These contributions can be made in multiple forms eg. answering a question on stackoverflow.com, a reply to a tweet, publishing an article, a comment on someone else's article, contribution to opensource, etc. Just share something whenever you get a chance.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Be social&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Oh God I just can't believe I have to mention this! Don't forget to be human my friend whether it's online or offline. Making this a habit will open up so many doors for you as a developer eg.&lt;/p&gt;

&lt;p&gt;On the humanity side of things; you wont suck and many people will love to be around you, engaging with you, etc. You'll be able to impact the world in a naturally appealing way.&lt;/p&gt;

&lt;p&gt;And on the developer side of things; you'll become a wonderful colleague to work with and your team members, your manager, your boss, your clients, will easily love you. It's absolute that work naturally becomes a breeze when engaging with a team-member who's socially welcoming and easy to approach.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Build with other people&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Although it's sometimes cool to build stuff alone, building with other people is much more awsome and the benefits will be clear. The active support you'll get from team members is priceless. These folks will help alot in clarifying your key strengths and weakness. The benefits are obvious; getting to know the areas where you strive will enable you to use your energy effiently and save time. You will also learn faster with a team than when you're solo since you'll be getting guidance from other members.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Utilize your perspective&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Your perspective is so important, it's what makes you standout from others. So undermining your own views and insights is quite unfair. It's important to count on your own thoughts too whenever you're faced with a challenge in code. Instead of always coping code from elsewhere, first try your best to take on the challenge using your own perspective.&lt;/p&gt;

&lt;p&gt;How's that beneficial to a dev who's seeking to be on top of the game?&lt;/p&gt;

&lt;p&gt;You'll be able to discover a lot about your own thoughts. Piquing your thoughts will lead to magical things in your day-to-day life as a developer.The process will you teach you good problem solving techniques and as a developer, this is what matters most in the world.&lt;/p&gt;

&lt;p&gt;The other thing is that you'll learn to reason about computer programs quite so well. This is a no-brainer! To a developer, the merits of this are self-explanatory. Every dev strives to be able to understand code and if you learn this habit, it'll get you there.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Practice Practice, Repeat&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Using your newly found knowledge to build stuff is useful too. Without practice your knowledge will not stick and your skill wont improve. So after going through the boring learning process and finally grasping that cool technique, make sure you craft stuff with it. Do it always, whether it's out of curiosity or expression of your ideas.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Habits aren't that easy to get used to but a little bit of work will get us there day by day. If you found the above points valuable, make them part of your daily routine you'll ultimately become a better developer. If you think I forgot to include some relevant info, please share it with me in the comments below.&lt;/p&gt;

&lt;p&gt;Thanks for stopping by.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>productivity</category>
      <category>programming</category>
      <category>career</category>
    </item>
    <item>
      <title>GitHub's In-Built New Feature: Quickly Open Any Repository In Visual Studio Code</title>
      <author>Yogesh Chavan</author>
      <pubDate>Thu, 12 Aug 2021 08:07:38 +0000</pubDate>
      <link>https://dev.to/myogeshchavan97/github-s-in-built-new-feature-quickly-open-any-repository-in-visual-studio-code-4fkc</link>
      <guid>https://dev.to/myogeshchavan97/github-s-in-built-new-feature-quickly-open-any-repository-in-visual-studio-code-4fkc</guid>
      <description>&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;GitHub has added in-built support to easily open your repository in Visual Studio Code.&lt;/p&gt;

&lt;p&gt;Previously, we either need to use &lt;a href="https://levelup.gitconnected.com/how-to-browse-project-files-on-github-as-if-you-are-browsing-in-your-ide-1022f153af42?source=friends_link&amp;amp;sk=259b3aea4a293b09a21e8871234dfa20"&gt;octotree&lt;/a&gt; extension to browse files or use &lt;a href="https://github.com/conwnet/github1s"&gt;github1s&lt;/a&gt; to view in Visual Studio Code.&lt;/p&gt;

&lt;p&gt;But github1s was opening just a read-only editor where you can't make any modifications to files.&lt;/p&gt;

&lt;p&gt;Now, with GitHub's in-built support, you can quickly open any GitHub repository in Visual Studio Code and get the look and feels of it. &lt;/p&gt;

&lt;p&gt;Almost all the features of Visual Studio Code you can explore in this feature.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-open-repository-in-visual-studio-code"&gt;
  &lt;/a&gt;
  How to Open Repository in Visual Studio Code
&lt;/h2&gt;

&lt;p&gt;Just press . (dot) on your keyboard when browsing any GitHub repository and it will be opened in Visual Studio Code on the browser.&lt;/p&gt;

&lt;p&gt;For example, Suppose, you're on &lt;a href="https://github.com/myogeshchavan97/spotify-music-search-app"&gt;Spotify Music Search App Repository&lt;/a&gt; and you press . (dot), then you'll be redirected to Visual Studio Code with your repository opened in it as shown below:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/mII50cepKg4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;It's so cool 😍.&lt;/p&gt;

&lt;p&gt;Currently, you can't open a terminal to execute the code. But you get the full power and feel of Visual Studio Code and you can even edit the code.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For now, If you want to execute the code in the repository, you can replace the github with githubbox in your GitHub repository URL and it will open CodeSandbox where you can see your code and execute it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For example, the URL &lt;a href="https://github.com/myogeshchavan97/spotify-music-search-app"&gt;https://github.com/myogeshchavan97/spotify-music-search-app&lt;/a&gt; will become &lt;a href="https://githubbox.com/myogeshchavan97/spotify-music-search-app"&gt;https://githubbox.com/myogeshchavan97/spotify-music-search-app&lt;/a&gt; after replacing github with githubbox.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To learn more about the Visual Studio Code Web editor, check out &lt;a href="https://github.com/features/codespaces"&gt;this link&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading!
&lt;/h3&gt;

&lt;p&gt;Check out my recently published &lt;a href="https://master-redux.yogeshchavan.dev/"&gt;Mastering Redux&lt;/a&gt; course.&lt;/p&gt;

&lt;p&gt;In this course, you will build 3 apps along with food ordering app and you'll learn:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Basic and advanced Redux&lt;/li&gt;
&lt;li&gt;How to manage the complex state of array and objects&lt;/li&gt;
&lt;li&gt;How to use multiple reducers to manage complex redux state&lt;/li&gt;
&lt;li&gt;How to debug Redux application&lt;/li&gt;
&lt;li&gt;How to use Redux in React using react-redux library to make your app reactive.&lt;/li&gt;
&lt;li&gt;How to use redux-thunk library to handle async API calls and much more&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and then finally we'll build a complete &lt;a href="https://www.youtube.com/watch?v=2zaPDfCKAvM"&gt;food ordering app&lt;/a&gt; from scratch with stripe integration for accepting payments and deploy it to the production.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/3w0DGum"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Taa9-Eif--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gist.github.com/myogeshchavan97/98ae4f4ead57fde8d47fcf7641220b72/raw/c3e4265df4396d639a7938a83bffd570130483b1/banner.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Want to stay up to date with regular content regarding JavaScript, React, Node.js? &lt;a href="https://www.linkedin.com/in/yogesh-chavan97/"&gt;Follow me on LinkedIn&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/myogeshchavan97"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xG4nnUnu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/default-yellow.png"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>node</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Learning Python- Intermediate course: Day 7, Making Python modules</title>
      <author>Aatmaj</author>
      <pubDate>Thu, 12 Aug 2021 07:36:45 +0000</pubDate>
      <link>https://dev.to/aatmaj/learning-python-intermediate-course-day-7-making-python-modules-kmf</link>
      <guid>https://dev.to/aatmaj/learning-python-intermediate-course-day-7-making-python-modules-kmf</guid>
      <description>&lt;h2&gt;
  &lt;a href="#we-have-learnt-how-to-use-predefined-python-modules-today-we-will-create-our-very-own-python-module-so-put-your-seatbelts-on-for-this-thrilling-python-journey"&gt;
  &lt;/a&gt;
  We have learnt how to use predefined python modules. Today we will create our very own Python module. 🤩 So put your seatbelts on for this thrilling Python journey🚀
&lt;/h2&gt;




&lt;h3&gt;
  &lt;a href="#modules-in-python"&gt;
  &lt;/a&gt;
  Modules in Python
&lt;/h3&gt;

&lt;p&gt;Creating a module in Python is a very easy task. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZMscObLU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gimh5787334irbtozlp6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZMscObLU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gimh5787334irbtozlp6.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Step I&lt;/strong&gt; Make a python file named mymodule.py &lt;em&gt;(or any other name ending with &lt;code&gt;.py&lt;/code&gt;)&lt;/em&gt; which contains various functions. Do this in Python IDLE or any other IDE.
Here is a sample file-
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hi"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hello"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;printer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Step II&lt;/strong&gt; Save the python file (or copy-paste the file) in the Lib (not libs) folder of the Python source code.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J8SAzllr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p0h2lhupyhf1kvi16htj.png" alt="image"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qRxyq5qW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lch7es61p6z5h4omr62o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qRxyq5qW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lch7es61p6z5h4omr62o.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Step III&lt;/strong&gt; In the file in which you want to use the module, write &lt;code&gt;import mymodule&lt;/code&gt; &lt;em&gt;(import the relevant module name)&lt;/em&gt; After that, just use the functions in the module as predefined functions. Simple !!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is the program which uses the functions in our module.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;mymodule&lt;/span&gt;
&lt;span class="n"&gt;mymodule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;printer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Welcome to Python intermediate course!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mymodule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;mymodule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We now save it in a file named 'mymoduletester' and run it.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yRZj_8FW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/38ckjf3y6kcdx9tiiuhs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yRZj_8FW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/38ckjf3y6kcdx9tiiuhs.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After we run the file, an output is generated in a command line window.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gRr-Dqkw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6nyx30dz7bw9ptrzucz9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gRr-Dqkw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6nyx30dz7bw9ptrzucz9.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;OUTPUT-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Python 3.10.0a2 (tags/v3.10.0a2:114ee5d, Nov  3 2020, 00:37:42) [MSC v.1927 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license()" for more information.
&amp;gt;&amp;gt;&amp;gt; 
= RESTART: C:/Users/aatma/AppData/Local/Programs/Python/Python310/Lib/mymoduletester.py
Welcome to Python intermediate course!
5
hello

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it! We have successfully made our own module and used it in our code!🤓 Cool!😎&lt;/p&gt;

&lt;p&gt;I have used the IDLE for Python over here, but you are free to use any editor you want. We can have the same effect by using the online GDB compiler as shown below.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MWojobPq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/175gnpj0k8xzvqi8kct2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MWojobPq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/175gnpj0k8xzvqi8kct2.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;✌️So friends that's all for now. 😊 Hope you all are having fun.😎 Please let me know in the comment section below 👇. And don't forget to like the post if you did. 😍 I am open to any suggestions or doubts. 🤠 Just post in the comments below or gmail me. 😉&lt;br&gt;
Thank you all👍&lt;/p&gt;

&lt;p&gt;Also please visit the &lt;a href="https://github.com/Aatmaj-Zephyr/Learning-Python"&gt;Learning-Python repo&lt;/a&gt; made especially for this course and don't forget to star it too&lt;/p&gt;

</description>
      <category>learningpython</category>
      <category>python</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
