<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Should You Invent a New Query Language? (Probably Not)
</title>
      <author>Arctype Team</author>
      <pubDate>Tue, 13 Jul 2021 15:01:13 +0000</pubDate>
      <link>https://dev.to/arctype/should-you-invent-a-new-query-language-probably-not-2mof</link>
      <guid>https://dev.to/arctype/should-you-invent-a-new-query-language-probably-not-2mof</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---zHtcJL1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626187654704/_O66zLi8V.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---zHtcJL1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626187654704/_O66zLi8V.png" alt="Featured .png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"What's worse than data silos? Data silos that invent their own query language." - Erik Bernhardsson&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In his infamous and widely discussed blog post named '&lt;a href="https://erikbern.com/2018/08/30/i-dont-want-to-learn-your-garbage-query-language.html"&gt;I don't want to learn your garbage query language&lt;/a&gt;,' &lt;a href="https://erikbern.com/"&gt;Erik Bernhardsson&lt;/a&gt; expressed what so many other Data Engineers and Analysts related with so strongly. Namely, that he "really [doesn't] like software that invents its own query language" and that he "just [wants his] SQL back.&lt;/p&gt;

&lt;p&gt;The fairly short-yet-passionate rant summarized the almost universal experience that technologies that require their own language often produce a whole new different set of complexities.&lt;/p&gt;

&lt;p&gt;There has been an explosion of different types of databases in the last 10 years (Just take a look at the sheer number of NoSQL database types in &lt;a href="https://dev.to__GHOST_URL__/newsql/"&gt;my last article&lt;/a&gt;), and increased specialization is forcing Data Engineers and Analysts to learn an even greater number of new programming languages.&lt;/p&gt;

&lt;p&gt;Each of them has its own syntax and specific weirdness, and while ORMs sometimes help, they often make things even more difficult. &lt;/p&gt;

&lt;p&gt;That being said, new Query Languages are often necessary (like in the case of NoSQL databases). This begs the question, how can we tell whether a new language actually adds more value than problems it creates? To answer this, we need to take a deep look at what causes all this conflict.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-are-there-so-many-query-languages"&gt;
  &lt;/a&gt;
  Why are there so many Query Languages?
&lt;/h2&gt;

&lt;p&gt;There are a lot of Query Languages out there. So many that even the &lt;a href="https://github.com/AnanthaRajuC/List-of-programming-language-lists/blob/master/Query%20language.md"&gt;most comprehensive lists&lt;/a&gt; leave out many important players. I wouldn't even want to attempt to gather a list like this because it seems new ones are added every minute. So let's take a look at what causes this? &lt;/p&gt;

&lt;p&gt;In short, there are so many different Query Languages because there are so many different things to query. In addition, data often has to be stored in various models with varying kinds of schemas and varying degrees of separation between physical and logical schema. For example, data stored in a relational database requires different technology and syntax than data stored in JSON files.&lt;/p&gt;

&lt;p&gt;An early hierarchical or network database query language will look quite different from a relational query language. In the early days of databases, one had to explicitly navigate the paths between records. That also explains why the last decade has been particularly "fruitful" due to new challenges created by NoSQL. Just take a look at the number of different NoSQL categories in &lt;a href="https://www.coursera.org/"&gt;my last blog post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Even within relational databases, different vendors want to offer special features and functions through their own SQL dialects (T-SQL, PostgreSQL, etc.). &lt;/p&gt;

&lt;p&gt;All of this adds up quickly, and in retrospect, it was inevitable that we would end up with a myriad of options to store and query data. Overall that is actually an excellent thing because that way, there is constant improvement through competition.&lt;/p&gt;

&lt;p&gt;However, development slowdowns due to too many different query languages persist, so Object-Relational-Mappers (ORMs) were invented. As we are about to see, though, they also often complicate things even more. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-orms-dont-always-help"&gt;
  &lt;/a&gt;
  Why ORMs Don't Always Help
&lt;/h2&gt;

&lt;p&gt;Let's first take a deeper look at what ORMs are and why you might want to use them.&lt;/p&gt;

&lt;p&gt;Object-Relational-Mapping is a process often used in computer science to convert data between incompatible &lt;a href="https://en.wikipedia.org/wiki/Type_system"&gt;type systems&lt;/a&gt; through &lt;a href="https://en.wikipedia.org/wiki/Object-oriented_programming"&gt;object-oriented programming languages&lt;/a&gt;. The goal is to create an abstract database layer of 'database objects' that can then be queried using the programming language of your choice. &lt;/p&gt;

&lt;p&gt;Long story short, it allows you to interact with your database using your language of choice &lt;strong&gt;instead&lt;/strong&gt; of that database's Query Language. This is best explained through a quick example using SQL:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;SELECT * FROM users WHERE name = 'Jane Doe';&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Object-relational mapping is the idea of writing queries like the one above and much more complicated ones, using the object-oriented paradigm of your preferred programming language. That is where ORMs come in. ORMs libraries that implement this technique in different programming languages. For example, using a JavaScript ORM, the above query would now look something like this:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var orm = require('generic-orm-library');var user = orm("users").where({ name: 'Jane Doe' });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;There are, of course, plenty of good things that can come from using an ORM:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;No SQL&lt;/strong&gt;: If you've read &lt;a href="https://dev.to__GHOST_URL__/reimagining-the-sql-curriculum/"&gt;my blog post about learning SQL&lt;/a&gt; but still aren't convinced that you should learn SQL, then ORMs allow you to use a programming language of your choice.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;No Dialects&lt;/strong&gt;: ORMs abstract away the database system so that switching from MySQL to PostgreSQL, for example, is much easier.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Extra Features&lt;/strong&gt;: Some ORMs have advanced features such as support for transactions, connection pooling, migrations, seeds,  and streams that can be useful in some cases.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Performance&lt;/strong&gt;: If you really aren't any good at SQL, then an  ORM will perform better than you for some queries.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As you probably already deduced from the title of this section, there are also plenty of cons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Performance&lt;/strong&gt;: If you are a master at SQL, you can probably get more performant queries by writing them yourself.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Learning&lt;/strong&gt;: ORMs don't work like normal Query Languages, so if that's what you are used to, there is overhead involved in learning how to use them.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Too Many&lt;/strong&gt;: The learning problem only worsens when you consider just &lt;a href="https://en.wikipedia.org/wiki/List_of_object%E2%80%93relational_mapping_software"&gt;how many&lt;/a&gt; different ORMs there are, and each has its own learning process.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Configuration&lt;/strong&gt;: The initial configuration of an ORM can take a long time and be a pain.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Black Box&lt;/strong&gt;: The layer of abstraction that ORMs provide can hinder getting at the real problem of a query or database issue.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To summarize, ORM's alleged benefit is that they cut down development time by adding an abstraction layer, but it often produces an even bigger headache. Instead of using SQL, you now have to scroll back and forth in some ORM documentation to determine how to write the most basic queries. Debugging can also be an issue because sometimes an ORM translates a query "into some monstrosity that joins 17 tables using a full table scan",  and you end up "with bloated higher-level data classes rather than easy to understand tuples or dicts that contain the data in a dumb simple format that is trivial to introspect."&lt;/p&gt;

&lt;p&gt;So, ORMs can be useful but don't necessarily help with the underlying problem—there are already too many query languages. So what can be done? Should we follow Erik's advice and put a "30-year moratorium on inventing new query languages."&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-should-you-invent-a-new-query-language"&gt;
  &lt;/a&gt;
  When Should You Invent a New Query Language?
&lt;/h2&gt;

&lt;p&gt;While Erik's call for a moratorium was certainly more of a joke than a serious solution (I think), it did express the sentiment that we need to stop adding so many query languages so quickly pretty well. &lt;/p&gt;

&lt;p&gt;It's certainly appreciated that many of these are necessary to deal with new classes of data, new ways that data is stored, or simply too much new data, but how do we know which ones were necessary and which ones weren't? &lt;/p&gt;

&lt;p&gt;This is why I suggest a few simple guiding questions and rules for any new developer who might feel the urge to add to the query language ecosystem:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#is-my-language-just-another-dialect"&gt;
  &lt;/a&gt;
  Is My Language Just Another Dialect?
&lt;/h3&gt;

&lt;p&gt;This one seems too obvious, but even big organizations like Oracle and Microsoft couldn't quite follow this rule, resulting in dialects like T-SQL and PL/SQL. &lt;/p&gt;

&lt;p&gt;At this point, almost every database has its own ways of defining stored procedures, functions, triggers, and differences that are even more pronounced than for queries and data definitions. &lt;/p&gt;

&lt;p&gt;For example, the scripting language for Sybase and SQL Server is called T-SQL. Strictly speaking, SQL Server is the database, and T-SQL is the language, but the two are often used interchangeably when referring to code.&lt;/p&gt;

&lt;p&gt;MySQL's scripting language is quite different from T-SQL, as can be seen in the documentation in the &lt;a href="https://dev.mysql.com/doc/refman/5.7/en/language-structure.html"&gt;reference&lt;/a&gt; manual. The first major difference you will probably encounter is that &lt;code&gt;IF&lt;/code&gt; is only allowed in programming blocks. The second will be the delimiter, then the word &lt;code&gt;go&lt;/code&gt;, and the differences multiply from there. &lt;/p&gt;

&lt;p&gt;So please don't create another SQL dialect. That doesn't mean that we shouldn't iterate and improve on SQL, but don't try to do something unnecessarily fancy that nobody asked for because no one will bother learning it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#does-my-language-solve-anything-new"&gt;
  &lt;/a&gt;
  Does My Language Solve Anything New?
&lt;/h3&gt;

&lt;p&gt;This rule is very similar to the first one, only more broadly applicable. There are many databases and types of data where standard SQL can't get the job done. Graph Databases are a good example of this because, in their case, both the storage and languages were designed specifically to do things that relational databases simply couldn't. &lt;/p&gt;

&lt;p&gt;That doesn't mean that you should add to the list of well-established Graph Query languages like &lt;strong&gt;&lt;a href="https://www.opencypher.org/about"&gt;Cypher&lt;/a&gt;&lt;/strong&gt;,which is already extremely popular. It was created by Neo4j for use with their own graph database and eventually open-sourced as a separate project called &lt;a href="https://www.opencypher.org/"&gt;openCypher&lt;/a&gt;, which allows any database to implement the same language. It's very visual—using ASCII characters to make shapes for clean and expressive queries.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;MATCH (d:Database)-[:USES]-&amp;gt;(Cypher)-[:QUERIES]-&amp;gt;(:Model:Graph)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Another widely used graph query language is &lt;strong&gt;SPARQL&lt;/strong&gt;, which looks like SQL and was created by the W3C to query RDF graph models. It’s not as common as the other two languages but has unique features because of the subject-predicate-object data model. It can even be used with SQL databases that have tables modeled after RDF structures. Some graph databases also support their own languages like ArangoDB, DGraph, TigerGraph, etc.&lt;/p&gt;

&lt;p&gt;The most common graph query language at the moment would be &lt;a href="http://tinkerpop.apache.org/gremlin.html"&gt;&lt;strong&gt;Gremlin&lt;/strong&gt;&lt;/a&gt;, which is part of the &lt;a href="http://tinkerpop.apache.org/"&gt;Apache TinkePop&lt;/a&gt; graph computing framework. It is simple to write, easy to learn, and widely supported by many graph databases and even non-graph databases that can emulate graph queries. On the other hand, it can be verbose for long queries but generally works well for both OLTP and analysis work.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;g.V().has("lang","gremlin").out("supported_by").values("db_name")&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;That being said, the time is ripe for an international standard graph query language. Industry vendors, including Neo4j and TigerGraph, have called this out, and I definitely agree. As graphs continue to see widespread adoption, we have certainly reached a tipping point for this industry, and at this point, you'd probably be doing more harm than good by adding another language to the mix.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#is-my-language-easy-to-use"&gt;
  &lt;/a&gt;
  Is My Language Easy to Use?
&lt;/h3&gt;

&lt;p&gt;If you have made it this far and your language solves a novel use case that no one has worked on before, you might actually have a point by making your own query language—this is why the last question focuses on how you should go about it that. &lt;/p&gt;

&lt;p&gt;Ask yourself, "How long will it take for others to learn my new language?". If your answer is "a couple of weeks," then you should start dedicating a lot of time to simplify your syntax as much as possible. &lt;/p&gt;

&lt;p&gt;This doesn't just mean creating tutorials and documentation, which should be self-explanatory. Instead, this means that you will have to make a serious effort to provide processes and abstractions that let a novice pick up your language and solve your main use case in a matter of hours, if not minutes.&lt;/p&gt;

&lt;p&gt;If you don't think you can do that, your language probably isn't ready yet.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;SQL is one of the most ubiquitous programming languages today, but countless others deserve recognition as well. These languages are often tied to specific technologies that solve use cases that relational databases simply can't. &lt;/p&gt;

&lt;p&gt;However, this has lead to an overproduction of query languages, which has significantly slowed down development times due to steep learning curves. ORMs were introduced to solve that problem but ended up complicating matters even more.&lt;/p&gt;

&lt;p&gt;That is why smart developers should be wary of introducing yet another query language to the mix. To guide this decision, I laid out some key questions they should be asking themselves to take a good look at the existing ecosphere, use cases, and simplicity.&lt;/p&gt;

&lt;p&gt;That being said, nothing quite beats working in good ole' SQL, especially when you have access to a world-class &lt;strong&gt;SQL editor&lt;/strong&gt; like Arctype.&lt;/p&gt;

&lt;p&gt;Arctype has built a collaborative SQL editor that allows you to share databases, queries, and dashboards with anyone easily. Join our growing community and &lt;a href="http://www.arctype.com/downloads"&gt;try out Arctype today&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>database</category>
      <category>ordbms</category>
      <category>softwaredevelopment</category>
    </item>
    <item>
      <title>Play Games To Learn Coding 🎮</title>
      <author>Mr. Unity Buddy</author>
      <pubDate>Tue, 13 Jul 2021 14:36:12 +0000</pubDate>
      <link>https://dev.to/unitybuddy/play-games-to-learn-coding-40n0</link>
      <guid>https://dev.to/unitybuddy/play-games-to-learn-coding-40n0</guid>
      <description>&lt;p&gt;Hello, buddies! There are interactive courses, tons of online tutorials to learn coding, and one of my personal favorite ways to practice coding: fun free games!&lt;/p&gt;

&lt;p&gt;While a coding game alone probably isn’t going to teach you everything you need to know about coding, these free fun games can be a really incredible way to practice the skills you’re learning. If you’re anything like me, you’ll suddenly realize you’ve spent the last four hours reinforcing your coding skills without even realizing it!😮😮&lt;/p&gt;

&lt;p&gt;I've tried out some of the most entertaining and useful games for learning to code. So would like to share it with you!😁😁&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#codecombat"&gt;
  &lt;/a&gt;
  &lt;a href="https://codecombat.com/"&gt;CodeCombat&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B8OTl43b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624645674602/hkevrxNhS.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B8OTl43b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624645674602/hkevrxNhS.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CodeCombat is my favorite! It is one of the best free website to play Python games. Apart from Python, it supports Javascript and Coffeescript like languages as well. The UI of the game is amazing and there are sounds that will make you feel that you are actually playing a normal game.&lt;/p&gt;

&lt;p&gt;Supported Languages - Python, Javascript, CoffeeScript, C++(for subscribers)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codecombat.com/"&gt;Play CodeCombat&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#codingame"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.codingame.com/start"&gt;CodinGame&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CY13poE7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624645912380/ElJkvN1NH.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CY13poE7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624645912380/ElJkvN1NH.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CodinGame offers up fun free games to help learn more than 25 programming languages, including JavaScript, Ruby, and PHP. One of the great things about CodinGame is that you can play with friends or colleagues, and also enter international coding competitions.&lt;/p&gt;

&lt;p&gt;Supported Languages - Python, Javascript, C++, C#, C, Ruby, Go and many more!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.codingame.com/"&gt;Play CodinGame&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#robocode"&gt;
  &lt;/a&gt;
  &lt;a href="https://robocode.sourceforge.io/"&gt;Robocode&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--juZ74Bvi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624959375620/wNqxry4WM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--juZ74Bvi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624959375620/wNqxry4WM.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Wouldn’t it be great to practice your coding skills by programming the robot tanks that fight against each other (sound exciting, right?).&lt;/p&gt;

&lt;p&gt;Yes, you can do the same with this renowned game – Robocode. Robocode allows you to develop a robot battle tank using programming languages like Java or .NET to battle against other tanks. You need to write the AI for the robot to let it know what to do and how to reacts to events happening in the battleground.&lt;/p&gt;

&lt;p&gt;Supported Languages - Java, C# and Scala&lt;/p&gt;

&lt;p&gt;&lt;a href="https://robocode.sourceforge.io/"&gt;Play Robocode&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#flexbox-defense"&gt;
  &lt;/a&gt;
  &lt;a href="http://www.flexboxdefense.com/"&gt;Flexbox Defense&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JkcmoY-n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624959680906/EIfUQBxge.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JkcmoY-n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624959680906/EIfUQBxge.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Flexbox Defense is indeed one of the best ways to strengthen your knowledge and skills of CSS Flexbox! It is actually a Tower Defense Game where you’re required to stop the incoming enemies from getting past your defenses by moving the towers into position so these turrets can shoot the invading enemies before they go over you. You’re required to use the ‘justify-content’ property on the tower group container to position your towers.&lt;/p&gt;

&lt;p&gt;Supported Languages - CSS&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.flexboxdefense.com/"&gt;Play Flexbox Defense&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-hunt"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.microsoft.com/en-us/p/code-hunt-game/9nblggh6d0gs?activetab=pivot:overviewtab"&gt;Code Hunt&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0jZcAX8F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624959955224/rLIPH9er1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0jZcAX8F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624959955224/rLIPH9er1.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Another mention in the list that can help you to practice and advance your programming skills within the gaming environment is Code Hunt. It is a coding game from Microsoft Research where you solve a series of coding puzzles to complete various rounds. Meanwhile, it works on a creative and unique format where each puzzle is presented with test cases only and no specification is provided. You’re first required to identify the pattern and then code the solution.&lt;/p&gt;

&lt;p&gt;Supported Languages - Java and C#&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.microsoft.com/en-us/p/code-hunt-game/9nblggh6d0gs?activetab=pivot:overviewtab"&gt;Get Code Hunt&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#checkio"&gt;
  &lt;/a&gt;
  &lt;a href="https://checkio.org/"&gt;CheckIO&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dt5BTlvg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624960310066/-lZcnPqPa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dt5BTlvg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624960310066/-lZcnPqPa.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
CheckIO is a coding game that allows you to enhance your programming skills, particularly for two languages – Python and TypeScript. The game is recommended to beginners as well as advanced programmers to level up the coding skills as it provides you with numerous exciting challenges of different complexity levels to solve. Every set of these challenges is positioned at a distinct island and users need to solve the required coding challenge or puzzle to traverse from one island to another. Also, the enriching and supportive community of CheckIO helps you to share knowledge &amp;amp; experiences with various brilliant minds across the world.&lt;/p&gt;

&lt;p&gt;Supported Languages - Python, TypeScript&lt;/p&gt;

&lt;p&gt;&lt;a href="https://checkio.org/"&gt;Play CheckIO&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#screeps"&gt;
  &lt;/a&gt;
  &lt;a href="https://screeps.com/"&gt;Screeps&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NY1Wlz9x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624960346115/_wcPW4l7Q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NY1Wlz9x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624960346115/_wcPW4l7Q.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Here comes another popular coding game for all the programmers – Screeps! It is an online real-time strategy game that requires you to have at least some basic knowledge of programming. In this game, you’re required to create your own colony in a particular world shared with all the players. And the colony will be able to mine resources, build units and conquer territory. &lt;/p&gt;

&lt;p&gt;Supported Languages - Javascript, C++, C#&lt;/p&gt;

&lt;p&gt;&lt;a href="https://screeps.com/"&gt;Play Screeps&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learn-vim-by-playing-vim-adventure"&gt;
  &lt;/a&gt;
  Learn Vim By Playing &lt;a href="https://vim-adventures.com/"&gt;Vim Adventure&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--44--RC1n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624959483302/z2jRROqji.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--44--RC1n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624959483302/z2jRROqji.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Well, this is not a game to learn a language but it is very useful!&lt;/p&gt;

&lt;p&gt;If you often struggle with using the VIM code editor, then Vim Adventures is surely meant for you!! Vim Adventures is an online game that allows you to learn VIM keyboard shortcuts and other prominent VIM concepts in an entertaining &amp;amp; interesting way with the help of a Zelda-like game environment. This game makes it easier to learn and understand this powerful text editor, Vim, that subsequently helps you to become a more efficient programmer.&lt;/p&gt;

&lt;p&gt;So buddies, that's it for today! Feel free to add your favourite coding game in the comments and Happy Coding!&lt;/p&gt;

</description>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Netflix Clone Using React and TMDb</title>
      <author>Thomas Gilmore</author>
      <pubDate>Tue, 13 Jul 2021 14:26:00 +0000</pubDate>
      <link>https://dev.to/thomasgilmore/netflix-clone-using-react-and-tmdb-32gb</link>
      <guid>https://dev.to/thomasgilmore/netflix-clone-using-react-and-tmdb-32gb</guid>
      <description>&lt;p&gt;I created a Netflix Clone using React and &lt;a href="https://www.themoviedb.org/"&gt;The Movie Database (TMDb)&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;The Movie Database API was used to fetch the movie images and posters to populate the Netflix Clone. So the images of the movies will change from time to time when viewing the link based off of what is returned from fetching the api.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;LINK&lt;/strong&gt;: &lt;a href="https://gilmore-netflix-clone.netlify.app/"&gt;https://gilmore-netflix-clone.netlify.app/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>api</category>
    </item>
    <item>
      <title>7 GitHub projects to make you a better Go Developer💥</title>
      <author>Ankit Anand ✨</author>
      <pubDate>Tue, 13 Jul 2021 14:18:52 +0000</pubDate>
      <link>https://dev.to/ankit01oss/7-github-projects-to-make-you-a-better-go-developer-2nmh</link>
      <guid>https://dev.to/ankit01oss/7-github-projects-to-make-you-a-better-go-developer-2nmh</guid>
      <description>&lt;p&gt;Go is a compiled, concurrent, garbage-collected, statically typed language developed at Google. Go was designed to be an excellent tool for writing large software projects.&lt;/p&gt;

&lt;p&gt;According to 2020 stackoverflow developer survey, Go was the 3rd most wanted programming language to learn.&lt;/p&gt;

&lt;p&gt;So today, I want to share 7 amazing GitHub projects that will help you become a better Go developer. While some repos can help you have a self-learning path for Go, others can be useful for your workflows.🤓&lt;/p&gt;

&lt;p&gt;So let's get started. 👊&lt;/p&gt;




&lt;p&gt;Currently building &lt;a href="https://bit.ly/3h2Ky4V"&gt;SigNoz&lt;/a&gt; - an open-source application performance monitoring tool. Backend of SigNoz is built in Go.&lt;/p&gt;

&lt;p&gt;Check out our GitHub repo👇&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/SigNoz"&gt;
        SigNoz
      &lt;/a&gt; / &lt;a href="https://github.com/SigNoz/signoz"&gt;
        signoz
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      SigNoz helps developers monitor their applications &amp;amp; troubleshoot problems, an open-source alternative to DataDog, NewRelic, etc. 🔥 🖥
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
  &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/de24bcecd48c187d949b173f240555967f58a5cd424760a73f7c06f791b892ec/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f646376336570696e782f696d6167652f75706c6f61642f76313631383930343435302f7369676e6f7a2d696d616765732f4c6f676f4769746875625f7369676662752e737667"&gt;&lt;img src="https://camo.githubusercontent.com/de24bcecd48c187d949b173f240555967f58a5cd424760a73f7c06f791b892ec/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f646376336570696e782f696d6167652f75706c6f61642f76313631383930343435302f7369676e6f7a2d696d616765732f4c6f676f4769746875625f7369676662752e737667" alt="SigNoz-logo" width="240"&gt;&lt;/a&gt;
  &lt;/p&gt;
&lt;p&gt;Monitor your applications and troubleshoot problems in your deployed applications, an open-source alternative to DataDog, New Relic, etc.&lt;/p&gt;
&lt;p&gt;
    &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/8bb1977f745ee8c8107f711ecfa901421a9b929f308fd431f7211508f8ddbd87/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e"&gt;&lt;img alt="License" src="https://camo.githubusercontent.com/8bb1977f745ee8c8107f711ecfa901421a9b929f308fd431f7211508f8ddbd87/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e"&gt;&lt;/a&gt;
    &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/4d7505d3f801c171da56fe726501ab9411207d82358bf10341021397fa3fe48e/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f70756c6c732f7369676e6f7a2f66726f6e74656e643f6c6162656c3d446f776e6c6f616473"&gt;&lt;img alt="Downloads" src="https://camo.githubusercontent.com/4d7505d3f801c171da56fe726501ab9411207d82358bf10341021397fa3fe48e/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f70756c6c732f7369676e6f7a2f66726f6e74656e643f6c6162656c3d446f776e6c6f616473"&gt;&lt;/a&gt;
    &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/cd33e47de8e2feb970abdef5de51f59e6c007958faf6c188c56dd4c4208e58a2/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f7369676e6f7a2f7369676e6f7a"&gt;&lt;img alt="GitHub issues" src="https://camo.githubusercontent.com/cd33e47de8e2feb970abdef5de51f59e6c007958faf6c188c56dd4c4208e58a2/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f7369676e6f7a2f7369676e6f7a"&gt;&lt;/a&gt; 
    &lt;a href="https://twitter.com/intent/tweet?text=Monitor%20your%20applications%20and%20troubleshoot%20problems%20with%20SigNoz,%20an%20open-source%20alternative%20to%20DataDog,%20NewRelic.&amp;amp;url=https://signoz.io/&amp;amp;via=SigNozHQ&amp;amp;hashtags=opensource,signoz,observability" rel="nofollow"&gt; 
        &lt;img alt="tweet" src="https://camo.githubusercontent.com/90bc908826728c0e4261acfff5619fd732c7be2b2a00624fce6363c9a3623c90/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f75726c2f687474702f736869656c64732e696f2e7376673f7374796c653d736f6369616c"&gt; &lt;/a&gt; 
&lt;/p&gt;

&lt;p&gt;SigNoz helps developers monitor applications and troubleshoot problems in their deployed applications. SigNoz uses distributed tracing to gain visibility into your software stack.&lt;/p&gt;

&lt;p&gt;👉 You can see metrics like p99 latency, error rates for your services, external API calls and individual end points.&lt;/p&gt;

&lt;p&gt;👉 You can find the root cause of the problem by going to the exact traces which are causing the problem and see detailed flamegraphs of individual request traces.&lt;/p&gt;

&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/863718997bae95953d22cbd6c1001d4ec23695aad4244d7de596660f33833496/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f646376336570696e782f696d6167652f75706c6f61642f76313631383930343033322f7369676e6f7a2d696d616765732f73637265656e7a792d313631383930343031333732395f636c737376792e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/863718997bae95953d22cbd6c1001d4ec23695aad4244d7de596660f33833496/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f646376336570696e782f696d6167652f75706c6f61642f76313631383930343033322f7369676e6f7a2d696d616765732f73637265656e7a792d313631383930343031333732395f636c737376792e706e67" alt="SigNoz Feature"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
👇 Features:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Application overview metrics like RPS, 50th/90th/99th Percentile latencies, and Error Rate&lt;/li&gt;
&lt;li&gt;Slowest endpoints in your application&lt;/li&gt;
&lt;li&gt;See exact request trace to figure out issues in downstream services, slow DB queries, call to 3rd party services like payment gateways, etc&lt;/li&gt;
&lt;li&gt;Filter traces by service name, operation, latency, error, tags/annotations.&lt;/li&gt;
&lt;li&gt;Aggregate metrics on filtered traces. Eg, you can get error…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/SigNoz/signoz"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#1-awesome-go"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://github.com/avelino/awesome-go"&gt;Awesome Go&lt;/a&gt;
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;⭐ Github stars: 65.4k&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can call it the encyclopedia of Go programming language. Just bookmark it to come back to whenever you need something in Go. It is a massive curated list of awesome Go frameworks, libraries and software&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/avelino"&gt;
        avelino
      &lt;/a&gt; / &lt;a href="https://github.com/avelino/awesome-go"&gt;
        awesome-go
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A curated list of awesome Go frameworks, libraries and software
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
&lt;a rel="noopener noreferrer" href="https://github.com/avelino/awesome-go/raw/master/tmpl/assets/logo.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sDprQZtq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/avelino/awesome-go/raw/master/tmpl/assets/logo.png" alt="awesome-go" title="awesome-go"&gt;&lt;/a&gt; Awesome Go&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://travis-ci.com/avelino/awesome-go" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5e9e9b3df118887a7c39908d4bf4b2034694d111f0be12d90e3415d7f4e882b2/68747470733a2f2f7472617669732d63692e636f6d2f6176656c696e6f2f617765736f6d652d676f2e7376673f6272616e63683d6d6173746572" alt="Build Status"&gt;&lt;/a&gt;
&lt;a href="https://github.com/sindresorhus/awesome"&gt;&lt;img src="https://camo.githubusercontent.com/abb97269de2982c379cbc128bba93ba724d8822bfbe082737772bd4feb59cb54/68747470733a2f2f63646e2e7261776769742e636f6d2f73696e647265736f726875732f617765736f6d652f643733303566333864323966656437386661383536353265336136336531353464643865383832392f6d656469612f62616467652e737667" alt="Awesome"&gt;&lt;/a&gt;
&lt;a href="http://gophers.slack.com/messages/awesome" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b6f0a177b8a98ed13425a0b9dd119f24983c735e5d5c5b5ef6dbefacf16b6b84/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6a6f696e2d75732532306f6e253230736c61636b2d677261792e7376673f6c6f6e6743616368653d74727565266c6f676f3d736c61636b26636f6c6f72423d726564" alt="Slack Widget"&gt;&lt;/a&gt;
&lt;a href="https://app.netlify.com/sites/awesome-go/deploys" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/9550a643d86ace967dba246113078ec50ffdbf03ac16d71684786ef81d9e5225/68747470733a2f2f6170692e6e65746c6966792e636f6d2f6170692f76312f6261646765732f38336136646362652d306461362d343333652d623538362d6636383130393238366264352f6465706c6f792d737461747573" alt="Netlify Status"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.producthunt.com/posts/awesome-go?utm_source=badge-featured&amp;amp;utm_medium=badge&amp;amp;utm_souce=badge-awesome-go" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ecd51497915779e2875cd5267606b26f5acbfc07154cd536c8735babdbeb581b/68747470733a2f2f6170692e70726f6475637468756e742e636f6d2f776964676574732f656d6265642d696d6167652f76312f66656174757265642e7376673f706f73745f69643d323931353335267468656d653d6c69676874" alt="awesome-go - Curated list awesome Go frameworks, libraries and software | Product Hunt" width="250" height="54"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Sponsorships&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://m.do.co/c/bd3b723c0a36?utm_medium=opensource&amp;amp;utm_source=awesome-go" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8b91494fce850c947b7c122a0b1211283e48b787c94ec3d19479673544d5dfb7/68747470733a2f2f6176656c696e6f2e72756e2f73706f6e736f72732f646f5f6c6f676f5f686f72697a6f6e74616c5f626c75652d3231302e706e67" alt="Digital Ocean"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;We have no monthly cost&lt;/strong&gt;&lt;em&gt;, but we have employees &lt;strong&gt;working hard&lt;/strong&gt; to maintain the Awesome Go, with money raised we can repay the effort of each person involved! All billing and distribution will be open to the entire community.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A curated list of awesome Go frameworks, libraries and software. Inspired by &lt;a href="https://github.com/vinta/awesome-python"&gt;awesome-python&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;
Contributing&lt;/h3&gt;
&lt;p&gt;Please take a quick gander at the &lt;a href="https://github.com/avelino/awesome-go/blob/master/CONTRIBUTING.md"&gt;contribution guidelines&lt;/a&gt; first. Thanks to all &lt;a href="https://github.com/avelino/awesome-go/graphs/contributors"&gt;contributors&lt;/a&gt;; you rock!&lt;/p&gt;
&lt;h4&gt;
&lt;em&gt;If you see a package or project here that is no longer maintained or is not a good fit, please submit a pull request to improve this file. Thank you!&lt;/em&gt;
&lt;/h4&gt;
&lt;h3&gt;
Contents&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/avelino/awesome-go/master/#awesome-go"&gt;Awesome Go&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/avelino/awesome-go/master/#audio-and-music"&gt;Audio and Music&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/avelino/awesome-go/master/#authentication-and-oauth"&gt;Authentication and OAuth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/avelino/awesome-go/master/#bot-building"&gt;Bot Building&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/avelino/awesome-go/master/#build-automation"&gt;Build Automation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/avelino/awesome-go/master/#command-line"&gt;Command Line&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/avelino/awesome-go/master/#configuration"&gt;Configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/avelino/awesome-go/master/#continuous-integration"&gt;Continuous Integration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/avelino/awesome-go/master/#css-preprocessors"&gt;CSS Preprocessors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/avelino/awesome-go/master/#data-structures"&gt;Data Structures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/avelino/awesome-go/master/#database"&gt;Database&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/avelino/awesome-go/master/#database-drivers"&gt;Database Drivers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/avelino/awesome-go/master/#date-and-time"&gt;Date and Time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/avelino/awesome-go/master/#distributed-systems"&gt;Distributed Systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/avelino/awesome-go/master/#dynamic-dns"&gt;Dynamic DNS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/avelino/awesome-go/master/#email"&gt;Email&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/avelino/awesome-go/master/#embeddable-scripting-languages"&gt;Embeddable Scripting Languages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/avelino/awesome-go/master/#error-handling"&gt;Error Handling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/avelino/awesome-go/master/#file-handling"&gt;File Handling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/avelino/awesome-go/master/#financial"&gt;Financial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/avelino/awesome-go/master/#forms"&gt;Forms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/avelino/awesome-go/master/#functional"&gt;Functional&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/avelino/awesome-go/master/#game-development"&gt;Game Development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;br&gt;
  &lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/avelino/awesome-go"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;h2&gt;
  &lt;a href="#2-standard-go-project-layout"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://github.com/golang-standards/project-layout"&gt;Standard Go Project Layout&lt;/a&gt;
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;⭐ Github stars: 24.6k&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This repo contains a basic layout for Go application projects. Although it's not an official standard defined by the core Go dev team, it is a set of common historical and emerging project layout patterns in the Go ecosystem.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/golang-standards"&gt;
        golang-standards
      &lt;/a&gt; / &lt;a href="https://github.com/golang-standards/project-layout"&gt;
        project-layout
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Standard Go Project Layout
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Standard Go Project Layout&lt;/h1&gt;
&lt;p&gt;Translations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/golang-standards/project-layout/master/README_ko.md"&gt;한국어 문서&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/golang-standards/project-layout/master/README_zh.md"&gt;简体中文&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/golang-standards/project-layout/master/README_zh-TW.md"&gt;正體中文&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://raw.githubusercontent.com/golang-standards/project-layout/master/README_zh-CN.md"&gt;简体中文&lt;/a&gt; - ???&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/golang-standards/project-layout/master/README_fr.md"&gt;Français&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/golang-standards/project-layout/master/README_ja.md"&gt;日本語&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/golang-standards/project-layout/master/README_ptBR.md"&gt;Portuguese&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/golang-standards/project-layout/master/README_es.md"&gt;Español&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/golang-standards/project-layout/master/README_ro.md"&gt;Română&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/golang-standards/project-layout/master/README_ru.md"&gt;Русский&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/golang-standards/project-layout/master/README_tr.md"&gt;Türkçe&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Overview&lt;/h2&gt;
&lt;p&gt;This is a basic layout for Go application projects. It's &lt;strong&gt;&lt;code&gt;not an official standard defined by the core Go dev team&lt;/code&gt;&lt;/strong&gt;; however, it is a set of common historical and emerging project layout patterns in the Go ecosystem. Some of these patterns are more popular than others. It also has a number of small enhancements along with several supporting directories common to any large enough real world application.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;If you are trying to learn Go or if you are building a PoC or a simple project for yourself this project layout is an overkill. Start with something really simple instead (a single &lt;/code&gt;main.go&lt;code&gt;file and&lt;/code&gt;go.mod&lt;code&gt; is more than enough).&lt;/code&gt;&lt;/strong&gt; As your project grows keep in mind that it'll be important to make sure your code is well structured…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/golang-standards/project-layout"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#3-go-kit"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://github.com/go-kit/kit"&gt;Go kit&lt;/a&gt;
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;⭐ Github stars: 20.5k&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Go kit is a programming toolkit for building microservices in Go. Go kit solves common problems in distributed systems and application architecture so you can focus on delivering business value.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/go-kit"&gt;
        go-kit
      &lt;/a&gt; / &lt;a href="https://github.com/go-kit/kit"&gt;
        kit
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A standard library for microservices.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Go kit&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/go-kit/kit/workflows/CI/badge.svg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ungTBiHx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/go-kit/kit/workflows/CI/badge.svg" alt="GitHub Workflow Status"&gt;&lt;/a&gt;
&lt;a href="https://pkg.go.dev/github.com/go-kit/kit?tab=doc" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/f275f3caa8e17b8198d808fbbeedfcfb710368633d8109e75c456663d0cb4f5d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f676f2e6465762d7265666572656e63652d3030376439633f6c6f676f3d676f266c6f676f436f6c6f723d7768697465267374796c653d666c61742d737175617265" alt="GoDev"&gt;&lt;/a&gt;
&lt;a href="https://codecov.io/gh/go-kit/kit" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b0fd8c978a9e20977dcfa2ab1f2ee17e7b00ba4f629c537828046c96183efa9d/68747470733a2f2f636f6465636f762e696f2f67682f676f2d6b69742f6b69742f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov"&gt;&lt;/a&gt;
&lt;a href="https://goreportcard.com/report/go-kit/kit" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/87320c26cc42c3a21a86f8f5189b45e50288df57011694ff9b11bf5011015833/68747470733a2f2f676f7265706f7274636172642e636f6d2f62616467652f676f2d6b69742f6b6974" alt="Go Report Card"&gt;&lt;/a&gt;
&lt;a href="https://sourcegraph.com/github.com/go-kit/kit?badge" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/d064f392236e444e1c6b43e0be16ab301e85ec0a7e643c037f1f073d7280c68b/68747470733a2f2f736f7572636567726170682e636f6d2f6769746875622e636f6d2f676f2d6b69742f6b69742f2d2f62616467652e737667" alt="Sourcegraph"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Go kit&lt;/strong&gt; is a &lt;strong&gt;programming toolkit&lt;/strong&gt; for building microservices
(or elegant monoliths) in Go. We solve common problems in distributed
systems and application architecture so you can focus on delivering
business value.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Website: &lt;a href="https://gokit.io" rel="nofollow"&gt;gokit.io&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Mailing list: &lt;a href="https://groups.google.com/forum/#!forum/go-kit" rel="nofollow"&gt;go-kit&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Slack: &lt;a href="https://gophers.slack.com" rel="nofollow"&gt;gophers.slack.com&lt;/a&gt; &lt;strong&gt;#go-kit&lt;/strong&gt; (&lt;a href="https://gophersinvite.herokuapp.com/" rel="nofollow"&gt;invite&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Sponsors&lt;/h2&gt;
&lt;p&gt;Click on Sponsor, above, for more information on sponsorship.&lt;/p&gt;
&lt;h2&gt;
Motivation&lt;/h2&gt;
&lt;p&gt;Go has emerged as the language of the server, but it remains underrepresented
in so-called "modern enterprise" companies like Facebook, Twitter, Netflix, and
SoundCloud. Many of these organizations have turned to JVM-based stacks for
their business logic, owing in large part to libraries and ecosystems that
directly support their microservice architectures.&lt;/p&gt;
&lt;p&gt;To reach its next level of success, Go needs more than simple primitives and
idioms. It needs a comprehensive toolkit, for coherent distributed programming
in the large. Go kit is a set of packages and best practices, which provide a
comprehensive, robust, and…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/go-kit/kit"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#4-go-design-patterns"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://github.com/tmrts/go-patterns"&gt;Go Design patterns&lt;/a&gt;
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;⭐ Github stars: 15.4k&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This repo contains a curated collection of idiomatic design &amp;amp; application patterns for Go language. You can find patterns like: creational patterns, structural patterns, behavioral patterns, concurrency patterns, messaging patterns.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/tmrts"&gt;
        tmrts
      &lt;/a&gt; / &lt;a href="https://github.com/tmrts/go-patterns"&gt;
        go-patterns
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Curated list of Go design patterns, recipes and idioms
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
  &lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/tmrts/go-patterns/master//gopher.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9SWrCNNh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/tmrts/go-patterns/master/gopher.png" height="400"&gt;&lt;/a&gt;
  &lt;/p&gt;
&lt;h1&gt;
    Go Patterns
    &lt;br&gt;
    &lt;a href="http://travis-ci.org/tmrts/go-patterns" rel="nofollow"&gt;&lt;img alt="build-status" src="https://camo.githubusercontent.com/519be221a7bba8e367452b4d550decb3b284535377ac8a2956ad2fe959218c96/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6275696c642d70617373696e672d627269676874677265656e2e7376673f7374796c653d666c61742d737175617265"&gt;&lt;/a&gt;
    &lt;a href="https://github.com/sindresorhus/awesome"&gt;&lt;img alt="awesome" src="https://camo.githubusercontent.com/575717fa64059cfa6ef0b7322a3b33c5432f7afb02cfb6fe9fb4165e2b9d04ad/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f617765736f6d652d2545322539432539332d6666363962342e7376673f7374796c653d666c61742d737175617265"&gt;&lt;/a&gt;
    &lt;a href="https://github.com/tmrts/go-patterns/blob/master/LICENSE"&gt;&lt;img alt="license" src="https://camo.githubusercontent.com/51f2e325174be9e5d12300714e720630a3baa1f6877422276c9a108e8da37ffc/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4170616368652532304c6963656e7365253230322e302d4539314536332e7376673f7374796c653d666c61742d737175617265"&gt;&lt;/a&gt;
  &lt;/h1&gt;
&lt;p&gt;A curated collection of idiomatic design &amp;amp; application patterns for Go language.&lt;/p&gt;
&lt;h2&gt;
Creational Patterns&lt;/h2&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Pattern&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Status&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://raw.githubusercontent.com/tmrts/go-patterns/master//creational/abstract_factory.md"&gt;Abstract Factory&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Provides an interface for creating families of releated objects&lt;/td&gt;
&lt;td&gt;✘&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://raw.githubusercontent.com/tmrts/go-patterns/master//creational/builder.md"&gt;Builder&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Builds a complex object using simple objects&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://raw.githubusercontent.com/tmrts/go-patterns/master//creational/factory.md"&gt;Factory Method&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Defers instantiation of an object to a specialized function for creating instances&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://raw.githubusercontent.com/tmrts/go-patterns/master//creational/object-pool.md"&gt;Object Pool&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Instantiates and maintains a group of objects instances of the same type&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://raw.githubusercontent.com/tmrts/go-patterns/master//creational/singleton.md"&gt;Singleton&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Restricts instantiation of a type to one object&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h2&gt;
Structural Patterns&lt;/h2&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Pattern&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Status&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://raw.githubusercontent.com/tmrts/go-patterns/master//structural/bridge.md"&gt;Bridge&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Decouples an interface from its implementation so that the two can vary independently&lt;/td&gt;
&lt;td&gt;✘&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://raw.githubusercontent.com/tmrts/go-patterns/master//structural/composite.md"&gt;Composite&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Encapsulates and provides access to a number of different objects&lt;/td&gt;
&lt;td&gt;✘&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://raw.githubusercontent.com/tmrts/go-patterns/master//structural/decorator.md"&gt;Decorator&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Adds behavior to an object, statically or dynamically&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://raw.githubusercontent.com/tmrts/go-patterns/master//structural/facade.md"&gt;Facade&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Uses one type as an API to a number of others&lt;/td&gt;
&lt;td&gt;✘&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://raw.githubusercontent.com/tmrts/go-patterns/master//structural/flyweight.md"&gt;Flyweight&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Reuses existing instances of objects with similar/identical state to minimize resource usage&lt;/td&gt;
&lt;td&gt;✘&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://raw.githubusercontent.com/tmrts/go-patterns/master//structural/proxy.md"&gt;Proxy&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;…&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/tmrts/go-patterns"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#5-learn-go-with-testdriven-development"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://github.com/quii/learn-go-with-tests"&gt;Learn Go with test-driven development&lt;/a&gt;
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;⭐ Github stars: 14.6k&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Go is a good language for learning test-driven development as Go's standard library provides a built-in testing package. This repo has a list of Go fundamentals with examples of test-driven code implementations.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/quii"&gt;
        quii
      &lt;/a&gt; / &lt;a href="https://github.com/quii/learn-go-with-tests"&gt;
        learn-go-with-tests
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Learn Go with test-driven development
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Learn Go with Tests&lt;/h1&gt;
&lt;p&gt;
  &lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/quii/learn-go-with-tests/main/red-green-blue-gophers-smaller.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AXyqadgr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/quii/learn-go-with-tests/main/red-green-blue-gophers-smaller.png"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/deniseyu21" rel="nofollow"&gt;Art by Denise&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://travis-ci.org/quii/learn-go-with-tests" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/724b73cf0a39a6e651e0b4a0430b76bf505c2c90ac01b42a9ffcddba150d79db/68747470733a2f2f7472617669732d63692e6f72672f717569692f6c6561726e2d676f2d776974682d74657374732e7376673f6272616e63683d6d61696e" alt="Build Status"&gt;&lt;/a&gt;
&lt;a href="https://goreportcard.com/report/github.com/quii/learn-go-with-tests" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/69cf45f9477d56e6674a3543386ce4c452d4367414d97c63500353f713bc8050/68747470733a2f2f676f7265706f7274636172642e636f6d2f62616467652f6769746875622e636f6d2f717569692f6c6561726e2d676f2d776974682d7465737473" alt="Go Report Card"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Formats&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://quii.gitbook.io/learn-go-with-tests" rel="nofollow"&gt;Gitbook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/quii/learn-go-with-tests/releases"&gt;EPUB or PDF&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Translations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://studygolang.gitbook.io/learn-go-with-tests" rel="nofollow"&gt;中文&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://larien.gitbook.io/aprenda-go-com-testes/" rel="nofollow"&gt;Português&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://andmorefine.gitbook.io/learn-go-with-tests/" rel="nofollow"&gt;日本語&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://miryang.gitbook.io/learn-go-with-tests/" rel="nofollow"&gt;한국어&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Support me&lt;/h2&gt;
&lt;p&gt;I am proud to offer this resource for free, but if you wish to give some appreciation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/quii" rel="nofollow"&gt;Tweet me @quii&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.buymeacoffee.com/quii" rel="nofollow"&gt;Buy me a coffee ☕&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sponsors/quii"&gt;Sponsor me on GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Why&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Explore the Go language by writing tests&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Get a grounding with TDD&lt;/strong&gt;. Go is a good language for learning TDD because it is a simple language to learn and testing is built-in&lt;/li&gt;
&lt;li&gt;Be confident that you'll be able to start writing robust, well-tested systems in Go&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/quii/learn-go-with-tests/main/why.md"&gt;Watch a video, or read about why unit testing and TDD is important&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Table of contents&lt;/h2&gt;
&lt;h3&gt;
Go fundamentals&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://raw.githubusercontent.com/quii/learn-go-with-tests/main/install-go.md"&gt;Install Go&lt;/a&gt; - Set up environment for productivity.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://raw.githubusercontent.com/quii/learn-go-with-tests/main/hello-world.md"&gt;Hello, world&lt;/a&gt; - Declaring variables, constants, if/else statements, switch, write your first go program and write your first test. Sub-test syntax and closures.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://raw.githubusercontent.com/quii/learn-go-with-tests/main/integers.md"&gt;Integers&lt;/a&gt; - Further Explore function…&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/quii/learn-go-with-tests"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#6-the-ultimate-go-study-guide"&gt;
  &lt;/a&gt;
  6. &lt;a href="https://github.com/ardanlabs/gotraining"&gt;The Ultimate Go Study Guide&lt;/a&gt;
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;⭐ Github stars: 14.3k&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The Ultimate Go Study Guide is a collection of notes for students taking the Ultimate Go class. It is compiled of sample programs with line-by-line comments to help students follow the code better. You will find the link to the repo's content in readme.md file.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/hoanhan101"&gt;
        hoanhan101
      &lt;/a&gt; / &lt;a href="https://github.com/hoanhan101/ultimate-go"&gt;
        ultimate-go
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      The Ultimate Go Study Guide
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
The Ultimate Go Study Guide&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/ardanlabs/gotraining-studyguide"&gt;This material has been acquired and actively maintained by Ardan Labs →&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Stargazers over time&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://starchart.cc/hoanhan101/ultimate-go" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/11cb354f44bac3d265569d45dbf9ba17a5f6bfc2194acc941f6d60f9a78fe1c8/68747470733a2f2f7374617263686172742e63632f686f616e68616e3130312f756c74696d6174652d676f2e737667" alt="Stargazers over time"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/hoanhan101/ultimate-go"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;h2&gt;
  &lt;a href="#7-1000-handcrafted-go-examples-exercises-and-quizzes"&gt;
  &lt;/a&gt;
  7. &lt;a href="https://github.com/inancgumus/learngo"&gt;1000+ Hand-crafted Go examples, exercises and quizzes&lt;/a&gt;
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;⭐ Github stars: 9.8k&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Inside this repository, you will find thousands of Go examples, exercises and quizzes.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/inancgumus"&gt;
        inancgumus
      &lt;/a&gt; / &lt;a href="https://github.com/inancgumus/learngo"&gt;
        learngo
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      1000+ Hand-Crafted Go Examples, Exercises, and Quizzes
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
A Huge Number of Go Examples, Exercises and Quizzes&lt;/h1&gt;
&lt;p&gt;Best way of learning is doing. Inside this repository, you will find thousands of Go examples, exercises and quizzes. I initially created this repository for my &lt;strong&gt;&lt;a href="https://www.udemy.com/course/learn-go-the-complete-bootcamp-course-golang/?referralCode=5CE6EB34E2B1EF4A7D37" rel="nofollow"&gt;Go: Bootcamp Course&lt;/a&gt;&lt;/strong&gt;. Later on, I added a lot of exercises, and I wanted every programmer who is not yet enrolled in the course to learn for free as well. So here it is. Enjoy.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Available in the following languages:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/inancgumus/learngo"&gt;English&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/inancgumus/learngo/master/translation/spanish"&gt;Spanish&lt;/a&gt;&lt;/strong&gt; &lt;em&gt;(WIP: Please Contribute)&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
❤️ Help other fellow developers&lt;/h2&gt;
&lt;p&gt;Sharing is free but caring is priceless. &lt;a href="https://twitter.com/intent/tweet?text=I%27m%20learning%20%23golang%20with%201000%2B%20hand-crafted%20examples%2C%20exercises%2C%20and%20quizzes.&amp;amp;url=https://github.com/inancgumus/learngo&amp;amp;via=inancgumus" rel="nofollow"&gt;So, now please click here&lt;/a&gt; and share this repository on Twitter.&lt;/p&gt;
&lt;h2&gt;
Stay in touch&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://twitter.com/inancgumus" rel="nofollow"&gt;Follow me on Twitter&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;I usually tweet Go tips and tricks.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/inancgumus" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8aba8b84e477d1962d203f9867ce54c8394d08ee93c9880e749f43aa425d355a/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f666f6c6c6f772f696e616e6367756d75732e7376673f7374796c653d736f6369616c266c6162656c3d40696e616e6367756d7573" alt="@inancgumus"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://eepurl.com/c4DMNX" rel="nofollow"&gt;Subscribe to my newsletter&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Get updates from me.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://blog.learngoprogramming.com" rel="nofollow"&gt;Read my blog&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Followed by 5K+ developers, and contains dozens of illustrated articles about Go.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.youtube.com/channel/UCYxepZhtnFIVRh8t5H_QAdg?view_as=subscriber" rel="nofollow"&gt;Watch my Youtube channel&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
License&lt;/h2&gt;
&lt;p&gt;Whole materials are licensed…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/inancgumus/learngo"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;p&gt;I hope you enjoyed this list. I will be coming up with more such amazing resources soon. So, stay tuned! 🙂&lt;/p&gt;

</description>
      <category>go</category>
      <category>webdev</category>
      <category>github</category>
      <category>devops</category>
    </item>
    <item>
      <title>How to improve imports in your code</title>
      <author>tsuyan</author>
      <pubDate>Tue, 13 Jul 2021 14:15:13 +0000</pubDate>
      <link>https://dev.to/tsuyusk/how-to-improve-imports-in-your-code-a2k</link>
      <guid>https://dev.to/tsuyusk/how-to-improve-imports-in-your-code-a2k</guid>
      <description>&lt;p&gt;Hello, there!&lt;/p&gt;

&lt;p&gt;After a while without new posts, I decided to come back with a really useful tip to simplify your code and reduce repetition.&lt;/p&gt;

&lt;p&gt;Have you ever saw a code like this ?&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t68xIUB4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2di1gwpgz9ct89nfq54v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t68xIUB4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2di1gwpgz9ct89nfq54v.png" alt="many_imports"&gt;&lt;/a&gt;&lt;br&gt;
Wouldn't It be great if we could simply shorten it to this ?&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BSkZaY1I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w3dsayxdhwlol63xf7zg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BSkZaY1I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w3dsayxdhwlol63xf7zg.png" alt="simplified_imports"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Well, It's possible!&lt;/p&gt;

&lt;p&gt;In order to do it, we will simply create a file named 'index.(js/ts)' inside components' folder, and add the following code in it:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ktd7iZmQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rc64qti3sn571grwt8kp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ktd7iZmQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rc64qti3sn571grwt8kp.png" alt="exports_index_ts"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And now you can import components easier from other files without needing to repeat their names.&lt;/p&gt;



&lt;p&gt;If you think that it is still not worth it, because in index.(js/ts) the components are still being imported, there is another solution:&lt;/p&gt;

&lt;p&gt;Instead of default exporting components&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Input&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Simply export them without default keyword&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Input&lt;/span&gt; &lt;span class="p"&gt;(...)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And in index.(js/ts) do this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VYK-T6Jy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xu81dxxum68zxrbddji9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VYK-T6Jy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xu81dxxum68zxrbddji9.png" alt="second_way_to_simplify"&gt;&lt;/a&gt; &lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>nextjs</category>
    </item>
    <item>
      <title>Improving Visibility Without Being Annoying w/ Anders Wallgren</title>
      <author>Conor Bronsdon</author>
      <pubDate>Tue, 13 Jul 2021 14:10:15 +0000</pubDate>
      <link>https://dev.to/linearb/improving-visibility-without-being-annoying-w-anders-wallgren-23ji</link>
      <guid>https://dev.to/linearb/improving-visibility-without-being-annoying-w-anders-wallgren-23ji</guid>
      <description>&lt;p&gt;It’s safe to say that everyone wants more visibility into their software delivery process.&lt;/p&gt;

&lt;p&gt;When project management and git systems don’t talk to each other, we have only small islands of visibility and no way to connect them. Anders Wallgren, the VP of Technology Strategy at Cloudbees, joins the &lt;a href="https://devinterrupted.com/podcast/improving-visibility-without-being-annoying/"&gt;Dev Interrupted podcast&lt;/a&gt; to help us connect these islands, and discuss the outcome-based metrics we should all be using to make the software development process more visible.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#listen-to-the-full-episode"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Listen to the full episode&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/22fh3bcXA3qVIjoyulxC71"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#episode-highlights-include"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Episode Highlights include:&lt;/strong&gt;
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;How to increase development visibility without &lt;a href="https://linearb.io/blog/data-driven-dev-team/"&gt;micromanaging&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Which team-based metrics are best for pipeline visibility&lt;/li&gt;
&lt;li&gt;Why it’s important to look at your software at the feature level&lt;/li&gt;
&lt;li&gt;What the future holds for software delivery pipeline visibility&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#join-the-dev-interrupted-discord-server"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Join the Dev Interrupted Discord Server&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;With over 1200 members, the Dev Interrupted Discord Community is the best place for Engineering Leaders to engage in daily conversation. No sales people allowed. &lt;a href="https://discord.gg/devinterrupted"&gt;Join the community &amp;gt;&amp;gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wzIBzHH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19j3dzgz4r4kzav3w6z8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wzIBzHH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19j3dzgz4r4kzav3w6z8.png" alt="Join the Dev Interrupted Discord Community!"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>management</category>
      <category>devops</category>
      <category>productivity</category>
    </item>
    <item>
      <title>How to add a sparkline to your Vue.js app</title>
      <author>Corentin</author>
      <pubDate>Tue, 13 Jul 2021 14:02:31 +0000</pubDate>
      <link>https://dev.to/frenchcooc/how-to-add-a-sparkline-for-your-vue-js-app-1c4h</link>
      <guid>https://dev.to/frenchcooc/how-to-add-a-sparkline-for-your-vue-js-app-1c4h</guid>
      <description>&lt;p&gt;Very recently, I was looking to add a neat sparkline to a Vue.js application of my own. &lt;/p&gt;

&lt;p&gt;As always, I googled just that, looking for &lt;a href="https://www.google.com/search?q=sparkline+vue.js"&gt;sparkline vue.js&lt;/a&gt; or &lt;a href="https://www.google.com/search?q=sparkline+npm"&gt;sparkline npm&lt;/a&gt;. But I couldn't find something that was easy, with a small footprint and yet customizable.&lt;/p&gt;

&lt;p&gt;After playing a bit with &lt;a href="https://www.chartjs.org/"&gt;Chart.js&lt;/a&gt;, I just stopped and considered how I could build a decent, yet very simple, sparkline component (i.e. without any dependency).&lt;/p&gt;

&lt;p&gt;If you look at how npm's sparkline works as well as the ones from Stripe's dashboard, you will quickly realize that it's just a SVG element that you customize with JavaScript.&lt;/p&gt;

&lt;p&gt;So bear with me, I'll show you how to do just that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h2&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/sparkline-ex2dn"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#behind-the-scene"&gt;
  &lt;/a&gt;
  Behind the scene
&lt;/h2&gt;

&lt;p&gt;The sparkline is just a Vue.js component where you provide the coordinates of the sparkline as an array. Here's how I've rendered the sparkline in the example above:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;sparkline&lt;/span&gt; &lt;span class="na"&gt;v-bind:data=&lt;/span&gt;&lt;span class="s"&gt;"[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31]"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/sparkline&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The source code of the component is the following:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;As you might have noticed, the code renders an &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; HTML element by computing the coordinates of the different &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;There are two &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt;. One for the blue line. And another one for the blue background. I've used the color &lt;code&gt;#1f8ceb&lt;/code&gt; but of course this is totally customizable, just like the width/height of the sparkline.&lt;/p&gt;

&lt;p&gt;That component is pretty basic and contrary to NPM or Stripe, it doesn't handle when a mouse hovers the &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt;. I didn't need that for my use case, but if ever you implement it, feel free to edit the &lt;a href="https://gist.github.com/Frenchcooc/e4748ad6275984a01868153e3c0d8a1e"&gt;gist&lt;/a&gt; and share it with the community.&lt;/p&gt;

</description>
      <category>vue</category>
      <category>javascript</category>
      <category>chart</category>
    </item>
    <item>
      <title>So what *is* privacy? (In the context of privacy tech)</title>
      <author>Jack F.</author>
      <pubDate>Tue, 13 Jul 2021 13:41:11 +0000</pubDate>
      <link>https://dev.to/oblivious/so-what-is-privacy-in-the-context-of-privacy-tech-e4g</link>
      <guid>https://dev.to/oblivious/so-what-is-privacy-in-the-context-of-privacy-tech-e4g</guid>
      <description>&lt;p&gt;&lt;strong&gt;Privacy, as a concept, often lacks a clear definition. However, privacy-enhancing technologies can be generally categorised into two broad desiderata. The purpose of this post is to lay these goals out clearly in accessible terms.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When someone talks about privacy, what on earth do they mean? If you consult a dictionary, you'll likely get a definition based on not being observed by others and free from public or third-party attention. This could lead to many definitions in the context of technology. The term can range in context from preventing browser tracking through cookies, to limiting your digital footprint from being shared by data holders. At Oblivious, we focus on the latter, allowing organizations who collect information to use and manipulate it in a safe and secure manner, such that you (a data subject) can rest assured that no superfluous data sharing is performed.&lt;/p&gt;

&lt;p&gt;Indeed the definition of privacy can cause a lot of confusion. Lawyers, politicians, security experts, and technologists all talk about privacy but often mean quite different things. If you reading this you are maybe aware of privacy-enhancing technologies (PETs) which are technological ways of dealing with privacy problems that, frankly speaking, often arise due to the exploitation of other data technologies that no legal frameworks can sufficiently deal with. Federated learning, homomorphic encryption, differential privacy, secure enclaves are all examples of PETs, which come in handy when you want to ensure privacy.&lt;/p&gt;

&lt;p&gt;In short, the two major groups of privacy technology are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Input privacy allows multiple parties to input sensitive data to be combined for some pre-agreed purpose.&lt;/li&gt;
&lt;li&gt;Output privacy prevents the reverse engineering of inputs given the outputs of a function.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#input-privacy"&gt;
  &lt;/a&gt;
  Input Privacy
&lt;/h2&gt;

&lt;p&gt;Let’s start with the first scenario wherein two millionaires want to determine who is richer but do not want to reveal each others' wealth. This is a classic 40-year old problem in computer science called Yao’s millionaire’s problem. It forms the basis of so-called multi-party computation or input privacy. It describes situations when two or more parties wish to evaluate a joint function depended on everyone's sensitive inputs, however, they do not want to reveal those inputs to each other. &lt;/p&gt;

&lt;p&gt;Here, a range of solutions may be employed. All the parties can simply give their inputs to a trusted friend, lawyer or consulting company as often happens in real life. However, if they want to employ cryptography they have even more options - they can use secure multi-party computation protocols (SMPC), which evaluate a function directly on encrypted data. It is based on a range of cryptographic primitives, which are still heavily researched - from garbled circuits to homomorphic encryption. A caveat here is that using these approaches severely slows down the computation and as always with new cryptographic protocols one has to be very careful with the threat models employed and how different subprotocols are combined. If you make a mistake at this step, it could have the consequence of not encrypting the data in the first place!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RPtj6qR0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9pr3eosihh5hyokvzpm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RPtj6qR0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9pr3eosihh5hyokvzpm.png" alt="Multiple inputs coming in and out of a function from different parties."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another option is to refer to hardware-based approaches called trusted execution environments or secure enclaves, whereby the parties send their encrypted data to a chip or a virtual machine (VM) with additional security layers. This chip or the cloud provider hosting the VM cryptographically sign and hash the software that is run that combines the data, attesting to the data providers that it is safe for the data to be decrypted. Major chip and cloud providers have moved towards this direction under the umbrella of confidential computing in recent years. As an example, AWS has recently launched its Nitro Enclaves and you can read more about this in our previous blog post.‌&lt;/p&gt;

&lt;p&gt;All three options have their pros and cons, you are either trusting in humans, cryptography, or the chip/cloud providers cryptographic attestation and consequently they are bottlenecked by human (bureaucracy and human processing), cryptographic (often large packet sizes with many rounds of communication) or hardware-based (RAM) limitations. Nevertheless, all three tackle this challenge of data collaboration.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#output-privacy"&gt;
  &lt;/a&gt;
  Output Privacy
&lt;/h2&gt;

&lt;p&gt;Let’s say we have chosen our favourite approach to input privacy and each party is happy that nobody else can see their sensitive inputs. They might even use it multiple times with slightly different inputs and parties. Can they safely announce the end of their “privacy problem”? Well, not really as we have not looked carefully at the output of this function!&lt;/p&gt;

&lt;p&gt;If one or more parties receive the output, there surely is some information about each others' input in it. It may well be that by running it multiple times with different inputs the others can work out our inputs from the outputs. To prevent this in many cases output privacy techniques can be employed.&lt;br&gt;
Output privacy challenges are very well-known to statistics bureaus. Wherever you live, it is quite likely that within the last 10 years you have taken part in a census. When the census data is aggregated and shared, statistics bureaus employ statistical disclosure control techniques to ensure that no individual or house can be identified from the published data.&lt;br&gt;
How do you do that? One technique that helps in this is the so-called k-anonymity. It is very intuitive and you have probably used or thought about it already without being aware of it. When releasing data you group people together and publish data for that group. For example, you group people under the age brackets, districts, etc, and ensure that in the smallest identifiable group there is at least k number of people.&lt;/p&gt;

&lt;p&gt;Another option, which is very often used in data science, is synthetic data. Large corporates that work with external parties such as data science consultants do not usually give away their proprietary data during the pilot phases of joint projects or for testing purposes but instead often give them fake data that resemble and share statistical properties of the underlying data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---33V61w6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dxsatqbzo73y4dhj9a86.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---33V61w6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dxsatqbzo73y4dhj9a86.png" alt="Outputs of a function being perturbed by noise to prevent reverse-engineering."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The US census bureau has decided to use another cryptographic technique called differential privacy for its 2020 census. Differential privacy is gaining usage and popularity due to its mathematical guarantees and widespread applicability. It works by adding appropriate noise to the output of a function. The challenge here is to add such amount of noise that the output still provides useful information but prevents anyone who has access to that output from reverse-engineering the original data - in particular information about individuals. The rule of thumb is that the larger the dataset, the smaller noise needs to be added to the aggregated output to ensure privacy. Hence, the large-scale data published by the census bureau are equal to what the true underlying value that they would normally publish is. However, at the township or district level, the noise kicks in and the values differ slightly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#comparing-and-contrasting"&gt;
  &lt;/a&gt;
  Comparing and Contrasting
&lt;/h2&gt;

&lt;p&gt;Reading the above, you might be thinking that these sound very different and, well, you are kind of right! Input privacy really takes into account each known party and their interactions in a calculation. It prevents each party from learning something they shouldn't be able to about other parties' inputs. Output privacy does the same for the party who receives the output of a calculation - typically limiting their ability to learn about individuals rather than aggregates.‌&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#putting-everything-together"&gt;
  &lt;/a&gt;
  Putting everything together
&lt;/h2&gt;

&lt;p&gt;‌&lt;br&gt;
Now that we are pros when speaking about input privacy and output privacy techniques, it becomes natural to combine them together to ensure privacy in a larger set of use cases. We can evaluate join queries over data coming from multiple sources both without seeing the data in plaintext and giving guarantees about the output privacy. Such end-to-end privacy systems are something that we at Oblivious are very much focused on. If you want to have a run at playing with how secure enclaves can be used in conjunction with differentially private output guarantees, give us a shout!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hWJUf289--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rj8f9xyeadt9xyxwmgzb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hWJUf289--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rj8f9xyeadt9xyxwmgzb.png" alt="Placing systems with differential privacy inside trusted execution environments."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-buzzword-mapper"&gt;
  &lt;/a&gt;
  Bonus: Buzzword Mapper
&lt;/h2&gt;

&lt;p&gt;As a bonus for making it to the end of the article, we thought we'd map some privacy-tech buzzwords to the type of privacy they enforce. Hopefully, at the next (socially distanced) cocktail party you go to when the cryptographer starts spouting on about one of these you'll at least have a bearing on what they are trying to achieve:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--90oS-fBU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vb48im735fb2fry71oih.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--90oS-fBU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vb48im735fb2fry71oih.png" alt="Buzzwords, what they endeavour to do and how."&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>privacy</category>
      <category>security</category>
      <category>datascience</category>
      <category>cryptography</category>
    </item>
    <item>
      <title>The Scrum master shuffle</title>
      <author>Jelle Smeets</author>
      <pubDate>Tue, 13 Jul 2021 13:28:08 +0000</pubDate>
      <link>https://dev.to/smeetsmeister/the-scrum-master-shuffle-2ome</link>
      <guid>https://dev.to/smeetsmeister/the-scrum-master-shuffle-2ome</guid>
      <description>&lt;p&gt;When you have been scrum master for the same team for a longer period, it can become more difficult to find areas of improvement for the team. If you are unsure of what the next step in the development of your team should be, the Scrum master shuffle might be interesting for you.&lt;/p&gt;

&lt;p&gt;In this blogpost we will dive into the Scrum master shuffle, I'll explain what it is, how to use it, and the lessons I learned from it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-scrum-master-shuffle"&gt;
  &lt;/a&gt;
  The Scrum master shuffle
&lt;/h2&gt;

&lt;p&gt;The goal of the Scrum master shuffle is to switch teams with another Scrum master in your organization for a short time, usually, we do one or two sprints. During this shuffle, you will effectively become a Scrum master for a different team.&lt;/p&gt;

&lt;p&gt;If you are a Scrum master in one team for a longer period of time, it is normal to get blind spots. There are things you don't notice anymore but will catch the eye of a fresh Scrum master.&lt;/p&gt;

&lt;p&gt;The other benefit besides having a fresh pair of eyes on your blind spots, is to get the team outside of their normal routine. A new Scrum master will probably shake up things, and it might get some of team members that have settled down to the situation to get that spark again.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#steps"&gt;
  &lt;/a&gt;
  Steps
&lt;/h2&gt;

&lt;p&gt;The steps for a successful Scrum master shuffle are the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pick a Scrum master to shuffle with.&lt;/li&gt;
&lt;li&gt;Inform your team that this is for gathering insights, and the goal is to improve. It is in no way a punishment for underperforming.&lt;/li&gt;
&lt;li&gt;Do a short 1 on 1 with the product owner and stakeholder of your new team, and inform them that the idea behind the shuffle is to improve the team.&lt;/li&gt;
&lt;li&gt;During the shuffle write down things that catch your attention. This will be input for the bullet point below.&lt;/li&gt;
&lt;li&gt;Do a weekly or biweekly meeting with the Scrum master you are shuffling with. The main goal of the meeting: "Is there anything that caught your eye?"&lt;/li&gt;
&lt;li&gt;At the end of the shuffle plan a small retrospective with the team, "is there anything I did differently than your Scrum master?", try to get input on the team what they liked, and what they liked less.&lt;/li&gt;
&lt;li&gt;Evaluate all findings, and pick which ones you or the team wants to implement.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#takeaways"&gt;
  &lt;/a&gt;
  Takeaways
&lt;/h2&gt;

&lt;p&gt;In the past I have done the Scrum master shuffle a couple of times now, my main takeaways and tips for the best result are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pick a Scrum master that has a different "style" than you have, this will usually result in better results than if you pick a Scrum master with the same style, as they will probably notice the same things.&lt;/li&gt;
&lt;li&gt;Make sure the team trusts the situation and doesn't feel like they have a temporary Scrum master to get them back on track.&lt;/li&gt;
&lt;li&gt;At the start of shuffling you want to be in an observing mode, try to observe what is happening before you try to correct behavior.&lt;/li&gt;
&lt;li&gt;Keep an open mind, and try not to judge the team for their behaviour, its a result of working together.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you can see in the takeaways above, the key to a successful Scrum master shuffle is to keep an open mind, try not to judge the team you are in and get them to trust you.&lt;/p&gt;

&lt;p&gt;If you are interested in other lessons I learned as a starting Scrum master? Check out &lt;a href="https://blog.jellesmeets.nl/lists/4-lessons-i-learned-as-a-starting-scrum-master/"&gt;The 4 lessons I learned as a starting scrum master&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>agile</category>
      <category>career</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Magic Link Authentication and Route Controls with Supabase and Next.js</title>
      <author>Nader Dabit</author>
      <pubDate>Tue, 13 Jul 2021 13:15:36 +0000</pubDate>
      <link>https://dev.to/dabit3/magic-link-authentication-and-route-controls-with-supabase-and-next-js-leo</link>
      <guid>https://dev.to/dabit3/magic-link-authentication-and-route-controls-with-supabase-and-next-js-leo</guid>
      <description>&lt;p&gt;While &lt;a href="https://supabase.io/"&gt;Supabase&lt;/a&gt; is widely known for their real-time database and API layer, one of the things I like about it is the number of easy to set up &lt;a href="https://supabase.io/docs/guides/auth"&gt;authentication mechanisms&lt;/a&gt; it offers out of the box.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0klkAzRc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qzcg7ckpfmra2y3yezdf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0klkAzRc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qzcg7ckpfmra2y3yezdf.png" alt="Supabase Auth"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#magic-link"&gt;
  &lt;/a&gt;
  Magic Link
&lt;/h3&gt;

&lt;p&gt;One of my favorites is Magic Link. You've probably used magic link in the past. Magic link sends a link to the user via email containing a link to authenticate with the service via a custom URL and access token.&lt;/p&gt;

&lt;p&gt;When the user visits the URL, a session is set in their browser storage and the user is redirected back to the app, authenticating the user in the process.&lt;/p&gt;

&lt;p&gt;This is becoming a very popular way to authenticate users as they do not have to keep up with another password, it provides a really great user experience.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nextjs"&gt;
  &lt;/a&gt;
  Next.js
&lt;/h3&gt;

&lt;p&gt;With Next.js, you have the ability to not only protect routes with client-side authorization, but for added security you can do server-side authorization and redirects in &lt;a href="https://nextjs.org/docs/basic-features/data-fetching#getserversideprops-server-side-rendering"&gt;&lt;code&gt;getServerSideProps&lt;/code&gt;&lt;/a&gt; if a cookie has been set and is available in the request context.&lt;/p&gt;

&lt;p&gt;This is also where Supabase comes in handy. There is built-in functionality for setting and getting the cookie for the signed in user in SSR and API routes:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#setting-the-user-in-an-api-route"&gt;
  &lt;/a&gt;
  Setting the user in an API route
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;supabase&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../client&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;supabase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAuthCookie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#getting-the-user-in-an-ssr-or-api-route"&gt;
  &lt;/a&gt;
  Getting the user in an SSR or API route
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getServerSideProps&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;supabase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUserByCookie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="cm"&gt;/* if user is present, do something with the user data here */&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Server-side redirects are typically preferred over client-side redirects from an SEO perspective - it's harder for search engines to understand how client-side redirects should be treated.&lt;/p&gt;

&lt;p&gt;You are also able to access the user profile from an API route using the &lt;code&gt;getUserByCookie&lt;/code&gt; function, opening up an entirely new set of use cases and functionality.&lt;/p&gt;

&lt;p&gt;With Next.js and Supabase you can easily implement a wide variety of applications using this combination of SSG, SSR, and client-side data fetching and user authorization, making the combination (and any framework that offers this combination of capabilities) extremely useful and powerful.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-well-be-building"&gt;
  &lt;/a&gt;
  What we'll be building
&lt;/h3&gt;

&lt;p&gt;In this post, we'll build out a Next.js app that enables navigation, authentication, authorization, redirects (client and server-side), and a profile view.&lt;/p&gt;

&lt;p&gt;The project that we'll be building is a great starting point for any application that needs to deal with user identity, and is a good way to understand how user identity works and flows throughout all of the different places in a project using a modern hybrid framework like Next.js.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The final code for this project is located &lt;a href="https://github.com/dabit3/supabase-nextjs-auth"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#building-the-app"&gt;
  &lt;/a&gt;
  Building the app
&lt;/h2&gt;

&lt;p&gt;To get started, you first need to create a Supabase account and project.&lt;/p&gt;

&lt;p&gt;To do so, head over to &lt;a href="//Supabase.io"&gt;Supabase.io&lt;/a&gt; and click &lt;strong&gt;Start Your Project&lt;/strong&gt;. Authenticate with GitHub and then create a new project under the organization that is provided to you in your account.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i9j6RgBg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d068rhoheuboefej4o70.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i9j6RgBg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d068rhoheuboefej4o70.jpeg" alt="Creating Supabase account"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Give the project a Name and Password and click Create new project.&lt;/p&gt;

&lt;p&gt;It will take approximately 2 minutes for your project to be created.&lt;/p&gt;

&lt;p&gt;Next, open your terminal and create a new Next.js app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-next-app supabase-next-auth

&lt;span class="nb"&gt;cd &lt;/span&gt;supabase-next-auth
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The only dependency we'll need is the &lt;a href="https://github.com/supabase/supabase-js"&gt;&lt;code&gt;@supabase/supabase-js&lt;/code&gt;&lt;/a&gt; package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; @supabase/supabase-js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#configuring-the-supabase-credentials"&gt;
  &lt;/a&gt;
  Configuring the Supabase credentials
&lt;/h3&gt;

&lt;p&gt;Now that the Next.js app is created, it needs a to know about the Supabase project in order to interact with it.&lt;/p&gt;

&lt;p&gt;The best way to do this is using environment variables. Next.js allows environment variables to be set by creating a file called &lt;strong&gt;.env.local&lt;/strong&gt; in the root of the project and storing them there.&lt;/p&gt;

&lt;p&gt;In order to expose a variable to the browser you have to prefix the variable with &lt;strong&gt;NEXT_PUBLIC&lt;/strong&gt;_.&lt;/p&gt;

&lt;p&gt;Create a file called &lt;strong&gt;.env.local&lt;/strong&gt; at the root of the project, and add the following configuration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;NEXT_PUBLIC_SUPABASE_URL=https://app-id.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY=your-public-api-key
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can find the values of your API URL and API Key in the Supabase dashboard settings:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NaUDHjRf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kbrp6pj3m5pj1vf6l9rd.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NaUDHjRf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kbrp6pj3m5pj1vf6l9rd.jpeg" alt="Supabase config"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-the-supabase-client"&gt;
  &lt;/a&gt;
  Creating the Supabase client
&lt;/h3&gt;

&lt;p&gt;Now that the environment variables have been set, we can create a Supabase instance that can be imported whenever we need it.&lt;/p&gt;

&lt;p&gt;Create a file named &lt;strong&gt;client.js&lt;/strong&gt; in the root of the project with the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* client.js */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createClient&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@supabase/supabase-js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;supabase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NEXT_PUBLIC_SUPABASE_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NEXT_PUBLIC_SUPABASE_ANON_KEY&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;supabase&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#updating-the-index-page"&gt;
  &lt;/a&gt;
  Updating the &lt;strong&gt;index&lt;/strong&gt; page
&lt;/h3&gt;

&lt;p&gt;Next, let's update &lt;strong&gt;pages/index.js&lt;/strong&gt; to be something more simple than what is provided out of the box. This is just meant to serve as a basic landing page&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* pages/index.js */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../styles/Home.module.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="nx"&gt;World&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;       &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/main&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#creating-the-sign-in-screen"&gt;
  &lt;/a&gt;
  Creating the sign in screen
&lt;/h3&gt;

&lt;p&gt;Next, let's create the Sign In screen. This will serve a form input for the user to provide their email address.&lt;/p&gt;

&lt;p&gt;When the user submits the form, they will receive a magic link to sign in. This will work for both new as well as existing users!&lt;/p&gt;

&lt;p&gt;Create a new file in the &lt;strong&gt;pages&lt;/strong&gt; directory named &lt;strong&gt;sign-in.js&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* pages/sign-in.js */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../styles/Home.module.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;supabase&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../client&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setEmail&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;submitted&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setSubmitted&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;signIn&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;supabase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;signIn&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="nx"&gt;email&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setSubmitted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;submitted&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Please&lt;/span&gt; &lt;span class="nx"&gt;check&lt;/span&gt; &lt;span class="nx"&gt;your&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;sign&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;Sign&lt;/span&gt; &lt;span class="nx"&gt;In&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
          &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setEmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
          &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
        &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;signIn&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Sign&lt;/span&gt; &lt;span class="nx"&gt;In&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;       &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/main&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The main thing in this file is this line of code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;supabase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;signIn&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;email&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By only providing the email address of the user, magic link authentication will happen automatically.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#profile-view"&gt;
  &lt;/a&gt;
  Profile view
&lt;/h3&gt;

&lt;p&gt;Next, let's create the profile view. Create a new file in the &lt;strong&gt;pages&lt;/strong&gt; directory named &lt;strong&gt;profile.js&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* pages/profile.js */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;supabase&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../client&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Profile&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setProfile&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fetchProfile&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetchProfile&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;profileData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;supabase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;profileData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/sign-in&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setProfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;profileData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;signOut&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;supabase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;signOut&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/sign-in&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;maxWidth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;420px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;96px auto&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="nx"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;signOut&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Sign&lt;/span&gt; &lt;span class="nx"&gt;Out&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To check for the currently signed in user we call &lt;code&gt;supabase.auth.user()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If the user is signed in, we set the user information using the &lt;code&gt;setProfile&lt;/code&gt; function set up using the &lt;code&gt;useState&lt;/code&gt; hook.&lt;/p&gt;

&lt;p&gt;If the user is not signed in, we client-side redirect using the &lt;code&gt;useRouter&lt;/code&gt; hook.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#api-route"&gt;
  &lt;/a&gt;
  API Route
&lt;/h3&gt;

&lt;p&gt;In &lt;strong&gt;pages/_app.js&lt;/strong&gt; we'll be needing to call a function to set the cookie for retrieval later in the SSR route.&lt;/p&gt;

&lt;p&gt;Let's go ahead and create that API route and function. This will be calling the &lt;code&gt;setAuthCookie&lt;/code&gt; API given to us by the Supabase client.&lt;/p&gt;

&lt;p&gt;Create a new file named &lt;strong&gt;auth.js&lt;/strong&gt; in the &lt;strong&gt;pages/api&lt;/strong&gt; folder and add the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* pages/api/auth.js */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;supabase&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../client&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;supabase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAuthCookie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#nav-auth-listener-and-setting-the-session-cookie"&gt;
  &lt;/a&gt;
  Nav, auth listener, and setting the session cookie
&lt;/h3&gt;

&lt;p&gt;The largest chunk of code we'll need to write will be in &lt;strong&gt;pages/app.js&lt;/strong&gt;. Here are the things we need to implement here:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Navigation&lt;/li&gt;
&lt;li&gt;A listener to fire when authentication state changes (provided by Supabase)&lt;/li&gt;
&lt;li&gt;A function that will set the cookie with the user session&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In addition to this, we'll also need to keep up with the authenticated state of the user. We do this so we can toggle links, showing or hiding certain links based on if the user is or isn't signed in.&lt;/p&gt;

&lt;p&gt;We'll demonstrate this here by only showing the &lt;strong&gt;Sign In&lt;/strong&gt; link to users who are not signed in, and hiding it when they are.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* pages/_app.js */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../styles/globals.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/link&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;supabase&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../client&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pageProps&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;authenticatedState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setAuthenticatedState&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;not-authenticated&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/* fires when a user signs in or out */&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;authListener&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;supabase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onAuthStateChange&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;handleAuthChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SIGNED_IN&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setAuthenticatedState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;authenticated&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/profile&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SIGNED_OUT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setAuthenticatedState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;not-authenticated&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="nx"&gt;checkUser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;authListener&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unsubscribe&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;checkUser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/* when the component loads, checks user to show or hide Sign In link */&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;supabase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setAuthenticatedState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;authenticated&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleAuthChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/* sets and removes the Supabase cookie */&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/auth&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Headers&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
      &lt;span class="na"&gt;credentials&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;same-origin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;session&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;nav&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;navStyle&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;linkStyle&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Link&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/profile&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;linkStyle&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Profile&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Link&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;authenticatedState&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;not-authenticated&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/sign-in&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;linkStyle&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Sign&lt;/span&gt; &lt;span class="nx"&gt;In&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Link&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/protected&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;linkStyle&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Protected&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Link&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/nav&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;navStyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;linkStyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;marginRight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The last page we need to implement is the route that will demonstrate server-side protection and redirects.&lt;/p&gt;

&lt;p&gt;Since we have already implemented setting the cookie, we should now be able to read the cookie on the server if the user is signed in.&lt;/p&gt;

&lt;p&gt;Like I mentioned previously, we can do this with the &lt;code&gt;getUserByCookie&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;Create a new file in the &lt;strong&gt;pages&lt;/strong&gt; directory named &lt;strong&gt;protected.js&lt;/strong&gt; and add the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;supabase&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../client&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Profile&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;maxWidth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;420px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;96px auto&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="kr"&gt;protected&lt;/span&gt; &lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getServerSideProps&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/* check to see if a user is set */&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;supabase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUserByCookie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="cm"&gt;/* if no user is set, redirect to the sign-in page */&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="na"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;destination&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/sign-in&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="cm"&gt;/* if a user is set, pass it to the page via props */&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#testing-it-out"&gt;
  &lt;/a&gt;
  Testing it out
&lt;/h2&gt;

&lt;p&gt;Now the app is built and we can test it out!&lt;/p&gt;

&lt;p&gt;To run the app, open your terminal and run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the app loads, you should be able to sign up, and sign in using the magic link. Once signed in, you should be able to view the profile page and see your user id as well as your email address.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-metadata-and-attributes"&gt;
  &lt;/a&gt;
  Setting metadata and attributes
&lt;/h3&gt;

&lt;p&gt;If you want to continue building out the user's profile, you can do so easily using the &lt;code&gt;update&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;For example, let's say we wanted to allow the user's to set their location. We can do so with the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;supabase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; 
  &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;city&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;New York&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, when we fetch the user's data, we should be able to view their metadata:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3XCKPecQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3l0m3ie9r7ohtmnsu4nf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3XCKPecQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3l0m3ie9r7ohtmnsu4nf.png" alt="User Metadata"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The final code for this project is located &lt;a href="https://github.com/dabit3/supabase-nextjs-auth"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>react</category>
      <category>nextjs</category>
    </item>
    <item>
      <title>Why you should write constants on the LHS for comparisons?</title>
      <author>Manish</author>
      <pubDate>Tue, 13 Jul 2021 13:00:49 +0000</pubDate>
      <link>https://dev.to/reclusivecoder/why-you-should-write-constants-on-the-lhs-for-comparisons-de2</link>
      <guid>https://dev.to/reclusivecoder/why-you-should-write-constants-on-the-lhs-for-comparisons-de2</guid>
      <description>&lt;p&gt;I picked up this practice some 20+ years ago in my first job. It was part of the commandments for us newbie programmers back then - we mostly coded in C/C++ those days. We have come a long way since, but I'd argue that this practice could help you save from a blunder some day.&lt;/p&gt;

&lt;p&gt;Let me just quote the commandment here -     &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Thou shall &lt;em&gt;always&lt;/em&gt; put the literals/constants on the LHS and variable on the RHS in the &lt;code&gt;if&lt;/code&gt; condition for equality!&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Code samples:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;deleteAll&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
   &lt;span class="c1"&gt;// delete all records&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;quantity&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
   &lt;span class="c1"&gt;// report not available&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The rationale here is simple – occasionally we programmers, lost in our efforts to solve the complex problems of universe, end up using a single assignment operator &lt;code&gt;=&lt;/code&gt; instead of the comparison operator &lt;code&gt;==&lt;/code&gt; unknowingly. In case of the languages where &lt;code&gt;if&lt;/code&gt; condition does not only accept a boolean (like C, C++), this could result in unintentional assignment instead of comparison. Moreover, your compiler won’t be able to catch it for these languages (most IDEs these days warn about this though), or it will go unnoticed in scripts like JavaScript. However, when you use literal/constant on the LHS, even an accidental, unintentional assignment is not possible. i.e. you simply cannot have this, compiler will flag an error –&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;quantity&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
   &lt;span class="c1"&gt;// report not available&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But the compiler, or your IDE &lt;em&gt;might&lt;/em&gt; not flag an error for this -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;quantity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
   &lt;span class="c1"&gt;// report not available&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;..and that’s &lt;em&gt;exactly&lt;/em&gt; the point. We let the compiler do the work of finding such bugs instead of realizing it at the runtime, and then eventually spending hours debugging and tracking down one small unintentional assignment, which should have been an equality comparison in the first place.&lt;/p&gt;

&lt;p&gt;This approach &lt;em&gt;still&lt;/em&gt; makes sense in 2021 including languages like Java, Kotlin (only boolean in &lt;code&gt;if&lt;/code&gt; condition) etc. for the following reasons - &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Consider boolean comparison itself in Java, what would happen here (ignoring compiler warning for assignment, among tons of other deprecation warnings) if the following code is unintentionally added?
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deleteAll&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
    &lt;span class="c1"&gt;//delete everything?&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On the other hand, when you write code like this, the compiler would be able to help you, right? 😥&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;deleteAll&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
    &lt;span class="c1"&gt;//delete everything?&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;More importantly, you seldom code in a single language as you grow as a software developer. There are times when you need to come up with a small snippet of JavaScript code (well, JS is ubiquitous - ain't disappearing for another two decades or more). All these things would be still valid there. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It is not about any one particular language/technology, it is more about developing better coding practices. These practices help us in the long run, and make us better programmers. 😃&lt;/p&gt;

</description>
      <category>programming</category>
      <category>codenewbie</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Python UNIT Testing</title>
      <author>Ramu Ummadishetty</author>
      <pubDate>Tue, 13 Jul 2021 12:53:56 +0000</pubDate>
      <link>https://dev.to/ramushetty/python-unit-testing-2b3p</link>
      <guid>https://dev.to/ramushetty/python-unit-testing-2b3p</guid>
      <description>&lt;h1&gt;
  &lt;a href="#unit-testing"&gt;
  &lt;/a&gt;
  UNIT Testing
&lt;/h1&gt;

&lt;p&gt;It is the processing of testing whether a particular unit is working properly or not is called unit testing&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#test-scenario-vs-test-case-vs-test-suite"&gt;
  &lt;/a&gt;
  Test Scenario vs Test Case vs Test Suite
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Test Scenario consists of multiple test case for single scenario&lt;/li&gt;
&lt;li&gt;So there will be different scenarios consists of test cases for a given application example of one scenario is testing login functionality.&lt;/li&gt;
&lt;li&gt;Test Suite is something like grouping of test cases and executing them at a time&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#implementing-python-unit-testing"&gt;
  &lt;/a&gt;
  Implementing Python Unit testing
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;We will use Python in-built module &lt;strong&gt;unittest&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;We will  use &lt;strong&gt;TestCase&lt;/strong&gt; class to implement&lt;/li&gt;
&lt;li&gt;We also use 3 instance methods &lt;strong&gt;setUp(), test(), tearDown()&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Here is the simple test class&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wDccXfUb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/obnzxr2vrxyila0t4b63.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wDccXfUb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/obnzxr2vrxyila0t4b63.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Output of above code is &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SHce8rZI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dowo3gufp6a3isitzvmj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SHce8rZI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dowo3gufp6a3isitzvmj.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Here we need to be careful that setUp and tearDown method names are fixed but we can change the test method name as we like bit it need to be prefix with "test" example test_sample(), test1().&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We can include as many test methods we want into the class&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#note"&gt;
  &lt;/a&gt;
  Note
&lt;/h2&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For every test method setUp(),tearDown() methods will be executed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To avoid this repeated call of setUp and tearDown methods we can use &lt;strong&gt;setUpClass(), tearDownClass()&lt;/strong&gt; methods, now only one time setup and teardown methods are called regardless of how many number of testcases.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Hf4B1NkD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z4ea5me8gwpc7jkml8mv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hf4B1NkD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z4ea5me8gwpc7jkml8mv.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O/P&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kusOQc29--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i3e60n9pg3v9e6bb454a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kusOQc29--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i3e60n9pg3v9e6bb454a.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also use assert functions in test method &lt;/p&gt;

&lt;p&gt;Hope you learned something!!!&lt;br&gt;
Happy coding!!!&lt;/p&gt;

</description>
      <category>python</category>
      <category>testing</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
