<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network. Open source and radically transparent.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>PWA / SPA / AMP</title>
      <author>Swapnil Sagar</author>
      <pubDate>Sat, 28 Nov 2020 05:23:03 +0000</pubDate>
      <link>https://dev.to/swapnil09/pwa-spa-amp-55pk</link>
      <guid>https://dev.to/swapnil09/pwa-spa-amp-55pk</guid>
      <description>&lt;p&gt;If you are into Web Development in 2020 and working in latest technologies like React, Gatsby, Etc. then you must be familiar with SPA, PWA and AMP. These are some new abbreviations which every dev should be familiar with. These technologies gave a step-up to the community in terms of Web functionalities. Lets have a look in them one-by-one.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pwa" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;PWA&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;PWA&lt;/strong&gt;&lt;/em&gt; stands for PROGRESSIVE WEB APP. This is an app built from the web technologies we all know and love, like HTML, CSS, and JavaScript, but with a feel and functionality that rivals an actual native app. Thanks to a couple of smart additions, you can turn almost any website into a progressive web app. This means that you can build a PWA rather quickly, in regards to a native app that’s pretty difficult to develop. Plus, you can offer all the features of native apps, like push notifications, offline support, and much more.&lt;/p&gt;

&lt;p&gt;Progressive Web Apps are web apps that use emerging web browser APIs and features along with traditional progressive enhancement strategy to bring a native app-like user experience to cross-platform web applications.&lt;/p&gt;

&lt;p&gt;Many sites you find online are actually a progressive web app. Take twitter.com, for instance. If you visit that site on your smartphone, you can install it to your home screen. Now, on opening the saved Twitter site, you’ll notice that it looks and performs just like a native app. There’s no browser window or nothing. There’s no difference in running it from an iPhone or an Android smartphone. Simply log in and you’re good to go. That’s a major benefit of building your web app with a PWA in mind.&lt;/p&gt;

&lt;p&gt;
  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9NTLGl8i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/swQ5x2J/pwa-app.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9NTLGl8i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/swQ5x2J/pwa-app.jpg"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;In order to call a Web App a PWA, technically speaking it should have the following features: &lt;strong&gt;Secure contexts (HTTPS), one or more Service Workers, and a manifest file&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;-&amp;gt; Secure contexts (HTTPS)&lt;br&gt;
The web application must be served over a secure network. Being a secure site is not only a best practice, but it also establishes your web application as a trusted site especially if users need to make secure transactions. Most of the features related to a PWA such as geolocation and even service workers are available only once the app has been loaded using HTTPS.&lt;/p&gt;

&lt;p&gt;-&amp;gt; Service workers&lt;br&gt;
A service worker is a script that allows intercepting and control of how a web browser handles its network requests and asset caching. With service workers, web developers can create reliably fast web pages and offline experiences.&lt;br&gt;
Manifest file&lt;/p&gt;

&lt;p&gt;-&amp;gt; A JSON file that controls how your app appears to the user and ensures that progressive web apps are discoverable. It describes the name of the app, the start URL, icons, and all of the other details necessary to transform the website into an app-like format.&lt;/p&gt;

&lt;p&gt;You can check PWA availablity on a site by accessing &lt;strong&gt;lighout&lt;/strong&gt; through inspect element.&lt;/p&gt;

&lt;p&gt;For Example:&lt;/p&gt;

&lt;p&gt;
  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RrRYPQ9N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/yWVptWc/pwa-web.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RrRYPQ9N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/yWVptWc/pwa-web.jpg"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;em&gt;PWAs are gaining popularity. Many big sites are PWAs, like Starbucks.com, Pinterest.com, Washingtonpost.com and Uber.com are actually installable on your home screen and offer a comparable experience to their native apps.&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#spa" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;SPA&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;A &lt;strong&gt;single-page application (SPA)&lt;/strong&gt; is a web application or website that interacts with the user by dynamically rewriting the current web page with new data from the web server, instead of the default method of the browser loading entire new pages. The goal is faster transitions that make the website feel more like a native app.&lt;/p&gt;

&lt;p&gt;A (SPA) is a web app or site that fits into one single page. SPA provides a more flexible, desktop-like user-experience and gives better performance.&lt;/p&gt;

&lt;p&gt;It allows the development of a smoother and more controlled UX, hiding web complexity (requests, responses, etc.) SPA swaps only the content that is requested by the user, loading HTML data in chunks.&lt;/p&gt;

&lt;p&gt;There are two types of SPA: one embeds the content of multiple pages into one ‘shell’ page; with the other, one single app uses Ajax to retrieve content whenever a user clicks a link, so only the content that changes will be updated on the page, while the rest of the page remains with no reloads.&lt;/p&gt;

&lt;p&gt;
  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yG6W8toX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.aalpha.net/wp-content/uploads/2019/11/single-page-app-india.gif" class="article-body-image-wrapper"&gt;&lt;img width="80%" src="https://res.cloudinary.com/practicaldev/image/fetch/s--yG6W8toX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.aalpha.net/wp-content/uploads/2019/11/single-page-app-india.gif"&gt;&lt;/a&gt;
&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#why-you-need-a-single-page-web-app" class="anchor"&gt;
  &lt;/a&gt;
  Why You Need a Single Page Web App
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;It’s perfect if you have a large-scale app with a complex user interface and hundreds of content pages, and you need to satisfy a large and diverse audience (thousands of users) that uses multiple devices&lt;/li&gt;
&lt;/ol&gt;

&lt;ol&gt;
&lt;li&gt;If you need a super rapid site with dynamic data loading and improved UX&lt;/li&gt;
&lt;/ol&gt;




&lt;h4&gt;
  &lt;a href="#advantages-of-single-page-apps" class="anchor"&gt;
  &lt;/a&gt;
  Advantages of Single Page Apps
&lt;/h4&gt;

&lt;p&gt;➤ Faster and snappier user experience&lt;/p&gt;

&lt;p&gt;➤ Decrease in page-load time&lt;/p&gt;

&lt;p&gt;➤ No reload or execution with each new page request&lt;/p&gt;

&lt;p&gt;➤ Dynamic loading of page or part of page’s content&lt;/p&gt;

&lt;p&gt;➤ Simpler interaction for end-user with a single page&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#when-to-use-a-spa" class="anchor"&gt;
  &lt;/a&gt;
  WHEN TO USE A SPA
&lt;/h4&gt;

&lt;p&gt;You might be asking, “When should I use a single page application?” When you have a business or a personal website that needs a dynamic platform and small data volume, the single-page application is a good idea. It is also a great option if you are planning to develop a mobile app in the future, since, as we mentioned above, the backend API can be used for both the web and mobile apps.&lt;/p&gt;

&lt;p&gt;The main drawback is the SEO, but the architecture is suitable for Software-as-a-Service (SaaS) platforms, closed communities, and social networks (which is why Facebook uses it). The reason for this is that these sites don’t need optimization for search on Google.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#amp" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;AMP&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;AMP&lt;/strong&gt;&lt;/em&gt; (originally an acronym for &lt;strong&gt;Accelerated Mobile Pages&lt;/strong&gt;) is an open source HTML framework developed by the AMP Open Source Project It was originally created by Google as a competitor to Facebook Instant Articles and Apple News.&lt;/p&gt;

&lt;p&gt;AMP provides a straightforward way to create web pages that are fast, smooth-loading and prioritize the user-experience above all else.&lt;br&gt;
AMP is a simple and robust format to ensure your website is fast, user-first, and makes money. AMP provides long-term success for your web strategy with distribution across popular platforms and reduced operating and development costs.&lt;/p&gt;


&lt;h4&gt;
  &lt;a href="#in-simpler-words" class="anchor"&gt;
  &lt;/a&gt;
  In Simpler Words
&lt;/h4&gt;

&lt;p&gt;Technically speaking, AMP removes cumbersome HTML, CSS and JavaScript elements, resulting in a stripped-down page that only includes the most vital content (text, images, videos, and of course, site ads). This makes AMP lightning speed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To experience AMP Webiste yourself &lt;a href="https://amp-article.herokuapp.com/"&gt;Click Here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;


&lt;h5&gt;
  &lt;a href="#what-makes-amp-pages-load-so-quickly" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What makes AMP pages load so quickly?&lt;/strong&gt;
&lt;/h5&gt;

&lt;p&gt;Google has a strict set of optimisations that significantly improve page loading times:&lt;/p&gt;

&lt;p&gt;➥ Allow only asynchronous scripts&lt;/p&gt;

&lt;p&gt;➥ Size all resources statically&lt;/p&gt;

&lt;p&gt;➥ Don’t let extension mechanisms block rendering&lt;/p&gt;

&lt;p&gt;➥ Keep all third-party JavaScript out of the critical path&lt;/p&gt;

&lt;p&gt;➥ All CSS must be inline and size-bound&lt;/p&gt;

&lt;p&gt;➥ Font triggering must be efficient&lt;/p&gt;

&lt;p&gt;➥ Minimise style recalculations&lt;/p&gt;

&lt;p&gt;➥ Only run GPU-accelerated animations&lt;/p&gt;

&lt;p&gt;➥ Prioritise resource loading&lt;/p&gt;

&lt;p&gt;➥ Load pages in an instant&lt;/p&gt;



&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html amp lang="en"&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset="utf-8"&amp;gt;
    &amp;lt;script async src="https://cdn.ampproject.org/v0.js"&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;title&amp;gt;Hello, AMPs&amp;lt;/title&amp;gt;
    &amp;lt;link rel="canonical" href="https://amp.dev/documentation/guides-and-tutorials/start/create/basic_markup/"&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width,minimum-scale=1,initial-scale=1"&amp;gt;
    &amp;lt;script type="application/ld+json"&amp;gt;
      {
        "@context": "http://schema.org",
        "@type": "NewsArticle",
        "headline": "Open-source framework for publishing content",
        "datePublished": "2015-10-07T12:02:41Z",
        "image": [
          "logo.jpg"
        ]
      }
    &amp;lt;/script&amp;gt;
    &amp;lt;style amp-boilerplate&amp;gt;body{-webkit-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-moz-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-ms-animation:-amp-start 8s steps(1,end) 0s 1 normal both;animation:-amp-start 8s steps(1,end) 0s 1 normal both}@-webkit-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-moz-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-ms-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-o-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}&amp;lt;/style&amp;gt;&amp;lt;noscript&amp;gt;&amp;lt;style amp-boilerplate&amp;gt;body{-webkit-animation:none;-moz-animation:none;-ms-animation:none;animation:none}&amp;lt;/style&amp;gt;&amp;lt;/noscript&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;h1&amp;gt;Welcome to the mobile web&amp;lt;/h1&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;p&gt;Read the official AMP Documentation &lt;a href="https://amp.dev/documentation/?format=websites"&gt;HERE&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>react</category>
      <category>ux</category>
    </item>
    <item>
      <title>A powerful backend ready for your next app 🚀</title>
      <author>Hatem Hosny</author>
      <pubDate>Sat, 28 Nov 2020 01:05:35 +0000</pubDate>
      <link>https://dev.to/hatemhosny/a-powerful-backend-ready-for-your-next-app-55a</link>
      <guid>https://dev.to/hatemhosny/a-powerful-backend-ready-for-your-next-app-55a</guid>
      <description>&lt;p&gt;I am a primarily frontend developer. &lt;/p&gt;

&lt;p&gt;Whenever I start a new project I keep going into the dilemma of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Which backend?&lt;/li&gt;
&lt;li&gt;Which database?&lt;/li&gt;
&lt;li&gt;Which hosting provider? &lt;/li&gt;
&lt;li&gt;Which complexity for the cloud service provider will I have to go through this time?&lt;/li&gt;
&lt;li&gt;What if I need later on to move to another provider?&lt;/li&gt;
&lt;li&gt;Should I go serverless?&lt;/li&gt;
&lt;li&gt;Do I need authentication? should I use a 3rd party service for that?&lt;/li&gt;
&lt;li&gt;How to handle HTTPS certificates issuing and renewal?&lt;/li&gt;
&lt;li&gt;How about the CI/CD setup?&lt;/li&gt;
&lt;li&gt;How to get a convenient local development environment that also matches production deployment?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Services like Firebase and AWS Amplify, have always been appealing. However, I felt uncomfortable with having marked restrictions on the database design (with lots of de-normalization) because of pay-per-read model. I know, I know, this is how NoSQL works, but still I was not happy. In addition, I do not want to &lt;a href="https://hackernoon.com/how-we-spent-30k-usd-in-firebase-in-less-than-72-hours-307490bd24d"&gt;pay $30K in 72 hours because of a coding mistake&lt;/a&gt;. And then &lt;a href="https://firebase.google.com/docs/firestore/solutions/search"&gt;not be able to do a basic full-text search&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Serverless can be very cost-effective on small scale but can be quite expensive on large scales. I want to have a predictable budget.&lt;/p&gt;

&lt;p&gt;In addition, the ease of local development with a cloud backend was concerning. There are many good solutions or workarounds for all of these questions, but none felt as easy and flexible for the requirements of different projects.&lt;/p&gt;

&lt;p&gt;All of that, and we have not even started talking about what I care about most, my app!&lt;/p&gt;

&lt;p&gt;Frontend development has become complex enough to also get distracted by all of these questions.&lt;/p&gt;

&lt;p&gt;Recently, I have come across &lt;a href="https://github.com/parse-community/parse-server"&gt;Parse server&lt;/a&gt;. It is a project that was acquired by Facebook (parse.com) and was later open-sourced when they decided to stop providing the cloud service. It is such a nice project that ticks nearly all my boxes.&lt;/p&gt;

&lt;p&gt;So, I created a monorepo starter project that is managed by &lt;a href="https://docs.docker.com/compose/"&gt;Docker Compose&lt;/a&gt; which runs the feature-rich ready-to-use setup that works out of the box for local development and can be easily deployed.&lt;/p&gt;

&lt;p&gt;You can find it on github: &lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJ70wriM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/hatemhosny"&gt;
        hatemhosny
      &lt;/a&gt; / &lt;a href="https://github.com/hatemhosny/parse-starter"&gt;
        parse-starter
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A powerful backend ready for your next app 🚀
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#feature-summary" class="anchor"&gt;
  &lt;/a&gt;
  Feature Summary
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://github.com/parse-community/parse-server"&gt;Parse server&lt;/a&gt;&lt;/strong&gt;: Backend-as-a-Service (BaaS) that features:

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://parseplatform.org/#sdks"&gt;SDKs&lt;/a&gt; for popular platforms&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.parseplatform.org/rest/guide/"&gt;REST API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.parseplatform.org/graphql/guide/"&gt;Graphql API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.parseplatform.org/parse-server/guide/#live-queries"&gt;LiveQuery&lt;/a&gt; for realtime apps&lt;/li&gt;
&lt;li&gt;Security features including authentication, &lt;a href="https://docs.parseplatform.org/js/guide/#users"&gt;users&lt;/a&gt;, &lt;a href="https://docs.parseplatform.org/js/guide/#roles"&gt;roles&lt;/a&gt;, &lt;a href="https://docs.parseplatform.org/rest/guide/#object-level-access-control"&gt;access control lists (ACL)&lt;/a&gt; and &lt;a href="https://docs.parseplatform.org/rest/guide/#class-level-permissions"&gt;class-level permissions (CLP)&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.parseplatform.org/parse-server/guide/#oauth-and-3rd-party-authentication"&gt;3rd party authentication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.parseplatform.org/parse-server/guide/#push-notifications"&gt;Push notifications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Adapters for &lt;a href="https://docs.parseplatform.org/parse-server/guide/#configuring-file-adapters"&gt;file storage&lt;/a&gt; and &lt;a href="https://docs.parseplatform.org/parse-server/guide/#configuring-cache-adapters"&gt;caching&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.parseplatform.org/rest/guide/#analytics"&gt;Analytics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.parseplatform.org/rest/guide/#cloud-code"&gt;Cloud code&lt;/a&gt; for custom server-side logic&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.parseplatform.org/rest/guide/#hooks"&gt;Web hooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Runs on top of &lt;a href="https://expressjs.com"&gt;Express&lt;/a&gt; allowing the use of Express middleware&lt;/li&gt;
&lt;li&gt;Comprehensive &lt;a href="https://docs.parseplatform.org/"&gt;documentation&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Large &lt;a href="https://github.com/parse-community"&gt;community&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://www.mongodb.com"&gt;MongoDB&lt;/a&gt;&lt;/strong&gt; database.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://github.com/parse-community/parse-dashboard"&gt;Parse dashboard&lt;/a&gt;&lt;/strong&gt; (optional): a powerful dashboard for managing the parse server.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;API-First Headless CMS&lt;/strong&gt; (optional): using &lt;a href="https://chiselcms.com"&gt;chisel-cms&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A sample realtime &lt;strong&gt;frontend app&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Automatic HTTPS&lt;/strong&gt; for the frontend and backend using &lt;a href="https://caddyserver.com"&gt;Caddy server&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Reproducible setup using &lt;strong&gt;&lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt;&lt;/strong&gt; containers managed by a single &lt;strong&gt;&lt;a href="https://docs.docker.com/compose"&gt;Docker Compose&lt;/a&gt;&lt;/strong&gt; file.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Local development workflow&lt;/strong&gt; with hot reload for frontend and backend.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Easy deployment&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;CI/CD&lt;/strong&gt; (&lt;a href="https://www.atlassian.com/continuous-delivery/principles/continuous-integration-vs-delivery-vs-deployment"&gt;continuous integration and deployment&lt;/a&gt;): using &lt;a href="https://docs.github.com/en/free-pro-team@latest/actions"&gt;github actions&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Optional &lt;strong&gt;deployment to multiple environments&lt;/strong&gt; (e.g. development, staging and production).&lt;/li&gt;
&lt;li&gt;Highly &lt;strong&gt;configurable&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;The whole stack is &lt;strong&gt;open source&lt;/strong&gt; with no vendor lock-in or pay-per-request restrictions.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#getting-started" class="anchor"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;Run the shell command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker-compose up
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;By default, the following will be served:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;parse server backend: &lt;span&gt;https:&lt;/span&gt;//localhost:1337/api&lt;/li&gt;
&lt;li&gt;parse graphql API: &lt;span&gt;https:&lt;/span&gt;//localhost:1337/graphql&lt;/li&gt;
&lt;li&gt;parse dashboard: &lt;span&gt;https:&lt;/span&gt;//localhost:1337/dashboard&lt;/li&gt;
&lt;li&gt;frontend local dev server (with HMR): &lt;span&gt;https:&lt;/span&gt;//localhost:1234&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After &lt;a href="https://github.com/hatemhosny/parse-starter#production-build"&gt;production build&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;frontend app: &lt;span&gt;https:&lt;/span&gt;//localhost&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When &lt;a href="https://github.com/hatemhosny/parse-starter#headless-cms"&gt;CMS is enabled&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;chisel CMS: &lt;span&gt;https:&lt;/span&gt;//localhost:1337&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now you can edit/replace the app in the &lt;code&gt;frontend&lt;/code&gt; directory and start building your own app making use of the feature-rich backend.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deployment" class="anchor"&gt;
  &lt;/a&gt;
  Deployment
&lt;/h2&gt;

&lt;p&gt;Docker and Docker Compose significantly simplify deployment. All the setup and dependencies are already taken care of in the docker images.&lt;/p&gt;

&lt;p&gt;So, in principle, the steps required for deployment are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Defining the variables for the deployment environment.&lt;/li&gt;
&lt;li&gt;Building the docker images and verifying them.&lt;/li&gt;
&lt;li&gt;Running the containers on the host server.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Although this can be done manually, it is greatly simplified using the included automated CI/CD setup that uses github actions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quick-start" class="anchor"&gt;
  &lt;/a&gt;
  Quick Start
&lt;/h3&gt;

&lt;p&gt;Assuming you can connect using SSH to your server which has Docker and Docker Compose installed (see &lt;a href="https://github.com/hatemhosny/parse-starter#server-setup"&gt;Server Setup&lt;/a&gt;), and that you have a github personal access token (see &lt;a href="https://github.com/hatemhosny/parse-starter#container-registry"&gt;Container Registry&lt;/a&gt;), add the following &lt;a href="https://github.com/hatemhosny/parse-starter#github-secrets"&gt;Github Secrets&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PROD_DOCKER_REGISTRY_TOKEN: your personal github access token&lt;/li&gt;
&lt;li&gt;PROD_SSH_HOST: your server IP address&lt;/li&gt;
&lt;li&gt;PROD_SSH_KEY: your server SSH private key&lt;/li&gt;
&lt;li&gt;PROD_ENV_VARS: edit the following example with your values
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  HOST_NAME=mywebsite.com
  APP_ID=myappid
  MASTER_KEY=mymasterkey
  PARSE_DASHBOARD_USER_ID=user
  PARSE_DASHBOARD_USER_PASSWORD=pass
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Note: The environment variable &lt;code&gt;HOST_NAME&lt;/code&gt; is required for remote deployment.&lt;/p&gt;

&lt;p&gt;Now pushing code to main/master branch should trigger build and deploy to your server. Note that you can follow the progress and read logs of CI/CD workflows on the "Actions" tab in the gihub repo.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thats-it" class="anchor"&gt;
  &lt;/a&gt;
  That's it!
&lt;/h2&gt;

&lt;p&gt;You have launched your powerful backend locally and deployed it within a few minutes.&lt;/p&gt;

&lt;p&gt;You can find the documentation and configuration details in the github repo: &lt;a href="https://github.com/hatemhosny/parse-starter"&gt;https://github.com/hatemhosny/parse-starter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is clearly not the magic bullet that solves all the problems of the world, but it has made my life easier, and I hope it makes yours too.&lt;/p&gt;

&lt;p&gt;Please let me know your suggestions/advices/comments, and I would be very grateful for contributions.&lt;/p&gt;

&lt;p&gt;Happy coding, go build some great apps!&lt;/p&gt;

</description>
      <category>backend</category>
      <category>docker</category>
      <category>javascript</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Easiest way to set up your Github profile page</title>
      <author>Aleks Popovic</author>
      <pubDate>Fri, 27 Nov 2020 20:26:11 +0000</pubDate>
      <link>https://dev.to/alekswritescode/easiest-way-to-set-up-your-github-profile-page-3gn8</link>
      <guid>https://dev.to/alekswritescode/easiest-way-to-set-up-your-github-profile-page-3gn8</guid>
      <description>&lt;p&gt;If you are a developer you probably have a GitHub account, and if you're like me your profile page is probably empty. I would even say barren. Utterly uninteresting? If that's true then you are at the right place, because in this tutorial I am going to show you some quick and easy tips to make your GitHub profile at least somewhat presentable.&lt;/p&gt;

&lt;p&gt;If you prefer a video version you can watch me set up my GitHub profile page on YouTube and you can follow along:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/OIFN1pe72B4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#setting-up-the-repo" class="anchor"&gt;
  &lt;/a&gt;
  Setting up the repo
&lt;/h1&gt;

&lt;p&gt;To start off - you need to have a GitHub account, which I assume you do. You will also need to create a super-secret type of repo, which is just a repo with the exact same name as your GitHub account name. You need to initialize it as a public repo with a ReadMe file, because that is where all the magic happens.&lt;/p&gt;

&lt;p&gt;We need to edit the readme file with some markdown and it will all show up on our profile page once we commit the changes. You can do all of these edits straight from the GitHub's file editor, or you can do it from your preferred text editor and upload the changes to your repo after you are finished. If you are unfamiliar with markup or need a quick refresher you can always reference this &lt;a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet" rel="noopener noreferrer"&gt;Markdown Cheatsheet&lt;/a&gt; on GitHub.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#using-images" class="anchor"&gt;
  &lt;/a&gt;
  Using images
&lt;/h1&gt;

&lt;p&gt;You can use images in your ReadMe file, just as you would in regular markdown/HTML. For ease of access you can opt to upload your images into the same repo as your profile ReadMe, and then you can access them like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="p"&gt;![&lt;/span&gt;&lt;span class="nv"&gt;logo&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="sx"&gt;BannerTransparent.png&lt;/span&gt; &lt;span class="nn"&gt;"banner"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

// Logo is the image alt text
// BannerTransparent.png is the image we are showing (it needs to be on the same level as the ReadMe file)
// banner is the popup text you get on hover. Feel free to change these to fit your image.
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;or like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/BannerTransparent.png"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"banner"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

// Regular HTML works in markdown
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can also align your images, as well as your other page elements, to left, right, or center, by using the "align" property (works only with HTML syntax):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/BannerTransparent.png"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"banner"&lt;/span&gt; &lt;span class="na"&gt;align=&lt;/span&gt;&lt;span class="s"&gt;"center"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

// Instead of "center" you can use "left" or "right"
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#headings-and-text-in-markdown" class="anchor"&gt;
  &lt;/a&gt;
  Headings and text in markdown
&lt;/h1&gt;

&lt;p&gt;To create headings you need to use the hashtag symbol - #. The number of symbols determines the heading level.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="gh"&gt;# Hi there and welcome to my GitHub page 👋 - level 1&lt;/span&gt;

&lt;span class="gu"&gt;## Hi there and welcome to my GitHub page 👋 - level 2&lt;/span&gt;

&lt;span class="gu"&gt;### Hi there and welcome to my GitHub page 👋 - level 3&lt;/span&gt;

&lt;span class="gu"&gt;#### Hi there and welcome to my GitHub page 👋 - level 4&lt;/span&gt;

&lt;span class="gu"&gt;##### Hi there and welcome to my GitHub page 👋 - level 5&lt;/span&gt;

&lt;span class="gu"&gt;###### Hi there and welcome to my GitHub page 👋 - level 6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;For the main part of your profile you can write any sort of text without specific markdown syntax and GitHub will even give you some prompts, like "I am currently working on...", "My interests are..." and similar. You can customize that however you like, but I want to focus on some very useful tools that you can use to showcase your skills, tools, programming languages and other GitHub stats.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#set-up-custom-tech-badges" class="anchor"&gt;
  &lt;/a&gt;
  Set up custom tech badges
&lt;/h1&gt;

&lt;p&gt;Most of us will want to display the technologies we use in our day to day work and there are two awesome tools you can use to create very nice and shiny badges for pretty much any tech you use. They are &lt;a href="https://shields.io/" rel="noopener noreferrer"&gt;Shields.io&lt;/a&gt; and &lt;a href="https://simpleicons.org/" rel="noopener noreferrer"&gt;SimpleIcons.org&lt;/a&gt; and here is an example of what you can create with them.&lt;/p&gt;

&lt;p&gt;Style: For the Badge&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s-IqY3MF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/React-61DAFB%3Flogo%3Dreact%26logoColor%3Dwhite%26style%3Dfor-the-badge" class="article-body-image-wrapper"&gt;&lt;img alt="React" src="https://res.cloudinary.com/practicaldev/image/fetch/s--s-IqY3MF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/React-61DAFB%3Flogo%3Dreact%26logoColor%3Dwhite%26style%3Dfor-the-badge"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j7m3BVuu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/Angular-DD0031%3Flogo%3Dangular%26logoColor%3Dwhite%26style%3Dfor-the-badge" class="article-body-image-wrapper"&gt;&lt;img alt="Angular" src="https://res.cloudinary.com/practicaldev/image/fetch/s--j7m3BVuu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/Angular-DD0031%3Flogo%3Dangular%26logoColor%3Dwhite%26style%3Dfor-the-badge"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fj8nuJ1A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/JavaScript-F7DF1E%3Flogo%3Djavascript%26logoColor%3Dwhite%26style%3Dfor-the-badge" class="article-body-image-wrapper"&gt;&lt;img alt="JavaScript" src="https://res.cloudinary.com/practicaldev/image/fetch/s--fj8nuJ1A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/JavaScript-F7DF1E%3Flogo%3Djavascript%26logoColor%3Dwhite%26style%3Dfor-the-badge"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o0thHcDc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/Sass-CC6699%3Flogo%3Dsass%26logoColor%3Dwhite%26style%3Dfor-the-badge" class="article-body-image-wrapper"&gt;&lt;img alt="Sass" src="https://res.cloudinary.com/practicaldev/image/fetch/s--o0thHcDc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/Sass-CC6699%3Flogo%3Dsass%26logoColor%3Dwhite%26style%3Dfor-the-badge"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rwtiuYX2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/Gatsby-663399%3Flogo%3Dgatsby%26logoColor%3Dwhite%26style%3Dfor-the-badge" class="article-body-image-wrapper"&gt;&lt;img alt="Gatsby" src="https://res.cloudinary.com/practicaldev/image/fetch/s--rwtiuYX2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/Gatsby-663399%3Flogo%3Dgatsby%26logoColor%3Dwhite%26style%3Dfor-the-badge"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J2Hysenr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/GraphQL-E10098%3Flogo%3Dgraphql%26logoColor%3Dwhite%26style%3Dfor-the-badge" class="article-body-image-wrapper"&gt;&lt;img alt="GraphQl" src="https://res.cloudinary.com/practicaldev/image/fetch/s--J2Hysenr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/GraphQL-E10098%3Flogo%3Dgraphql%26logoColor%3Dwhite%26style%3Dfor-the-badge"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;Style: Flat&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z6yMcB83--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/React-61DAFB%3Flogo%3Dreact%26logoColor%3Dwhite%26style%3Dflat" class="article-body-image-wrapper"&gt;&lt;img alt="React" src="https://res.cloudinary.com/practicaldev/image/fetch/s--z6yMcB83--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/React-61DAFB%3Flogo%3Dreact%26logoColor%3Dwhite%26style%3Dflat"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5rUvVEis--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/Angular-DD0031%3Flogo%3Dangular%26logoColor%3Dwhite%26style%3Dflat" class="article-body-image-wrapper"&gt;&lt;img alt="Angular" src="https://res.cloudinary.com/practicaldev/image/fetch/s--5rUvVEis--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/Angular-DD0031%3Flogo%3Dangular%26logoColor%3Dwhite%26style%3Dflat"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0fJ5qg1P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/JavaScript-F7DF1E%3Flogo%3Djavascript%26logoColor%3Dwhite%26style%3Dflat" class="article-body-image-wrapper"&gt;&lt;img alt="JavaScript" src="https://res.cloudinary.com/practicaldev/image/fetch/s--0fJ5qg1P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/JavaScript-F7DF1E%3Flogo%3Djavascript%26logoColor%3Dwhite%26style%3Dflat"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b4pCKBqn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/Sass-CC6699%3Flogo%3Dsass%26logoColor%3Dwhite%26style%3Dflat" class="article-body-image-wrapper"&gt;&lt;img alt="Sass" src="https://res.cloudinary.com/practicaldev/image/fetch/s--b4pCKBqn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/Sass-CC6699%3Flogo%3Dsass%26logoColor%3Dwhite%26style%3Dflat"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tHZ0eUP---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/Gatsby-663399%3Flogo%3Dgatsby%26logoColor%3Dwhite%26style%3Dflat" class="article-body-image-wrapper"&gt;&lt;img alt="Gatsby" src="https://res.cloudinary.com/practicaldev/image/fetch/s--tHZ0eUP---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/Gatsby-663399%3Flogo%3Dgatsby%26logoColor%3Dwhite%26style%3Dflat"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pAFdmwIG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/GraphQL-E10098%3Flogo%3Dgraphql%26logoColor%3Dwhite%26style%3Dflat" class="article-body-image-wrapper"&gt;&lt;img alt="GraphQl" src="https://res.cloudinary.com/practicaldev/image/fetch/s--pAFdmwIG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/GraphQL-E10098%3Flogo%3Dgraphql%26logoColor%3Dwhite%26style%3Dflat"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;Style: Flat Square&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2gJ4Tghj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/React-61DAFB%3Flogo%3Dreact%26logoColor%3Dwhite%26style%3Dflat-square" class="article-body-image-wrapper"&gt;&lt;img alt="React" src="https://res.cloudinary.com/practicaldev/image/fetch/s--2gJ4Tghj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/React-61DAFB%3Flogo%3Dreact%26logoColor%3Dwhite%26style%3Dflat-square"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EiF2I4w0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/Angular-DD0031%3Flogo%3Dangular%26logoColor%3Dwhite%26style%3Dflat-square" class="article-body-image-wrapper"&gt;&lt;img alt="Angular" src="https://res.cloudinary.com/practicaldev/image/fetch/s--EiF2I4w0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/Angular-DD0031%3Flogo%3Dangular%26logoColor%3Dwhite%26style%3Dflat-square"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n4IcCsI1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/JavaScript-F7DF1E%3Flogo%3Djavascript%26logoColor%3Dwhite%26style%3Dflat-square" class="article-body-image-wrapper"&gt;&lt;img alt="JavaScript" src="https://res.cloudinary.com/practicaldev/image/fetch/s--n4IcCsI1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/JavaScript-F7DF1E%3Flogo%3Djavascript%26logoColor%3Dwhite%26style%3Dflat-square"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l_16DGZZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/Sass-CC6699%3Flogo%3Dsass%26logoColor%3Dwhite%26style%3Dflat-square" class="article-body-image-wrapper"&gt;&lt;img alt="Sass" src="https://res.cloudinary.com/practicaldev/image/fetch/s--l_16DGZZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/Sass-CC6699%3Flogo%3Dsass%26logoColor%3Dwhite%26style%3Dflat-square"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S9WzvPXR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/Gatsby-663399%3Flogo%3Dgatsby%26logoColor%3Dwhite%26style%3Dflat-square" class="article-body-image-wrapper"&gt;&lt;img alt="Gatsby" src="https://res.cloudinary.com/practicaldev/image/fetch/s--S9WzvPXR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/Gatsby-663399%3Flogo%3Dgatsby%26logoColor%3Dwhite%26style%3Dflat-square"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UTv63bWx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/GraphQL-E10098%3Flogo%3Dgraphql%26logoColor%3Dwhite%26style%3Dflat-square" class="article-body-image-wrapper"&gt;&lt;img alt="GraphQl" src="https://res.cloudinary.com/practicaldev/image/fetch/s--UTv63bWx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/GraphQL-E10098%3Flogo%3Dgraphql%26logoColor%3Dwhite%26style%3Dflat-square"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;Style: Plastic&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--byJOPBeq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/React-61DAFB%3Flogo%3Dreact%26logoColor%3Dwhite%26style%3Dplastic" class="article-body-image-wrapper"&gt;&lt;img alt="React" src="https://res.cloudinary.com/practicaldev/image/fetch/s--byJOPBeq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/React-61DAFB%3Flogo%3Dreact%26logoColor%3Dwhite%26style%3Dplastic"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TJtieuLN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/Angular-DD0031%3Flogo%3Dangular%26logoColor%3Dwhite%26style%3Dplastic" class="article-body-image-wrapper"&gt;&lt;img alt="Angular" src="https://res.cloudinary.com/practicaldev/image/fetch/s--TJtieuLN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/Angular-DD0031%3Flogo%3Dangular%26logoColor%3Dwhite%26style%3Dplastic"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--diFBNADr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/JavaScript-F7DF1E%3Flogo%3Djavascript%26logoColor%3Dwhite%26style%3Dplastic" class="article-body-image-wrapper"&gt;&lt;img alt="JavaScript" src="https://res.cloudinary.com/practicaldev/image/fetch/s--diFBNADr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/JavaScript-F7DF1E%3Flogo%3Djavascript%26logoColor%3Dwhite%26style%3Dplastic"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rOgEOVIj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/Sass-CC6699%3Flogo%3Dsass%26logoColor%3Dwhite%26style%3Dplastic" class="article-body-image-wrapper"&gt;&lt;img alt="Sass" src="https://res.cloudinary.com/practicaldev/image/fetch/s--rOgEOVIj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/Sass-CC6699%3Flogo%3Dsass%26logoColor%3Dwhite%26style%3Dplastic"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zpQv1MOf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/Gatsby-663399%3Flogo%3Dgatsby%26logoColor%3Dwhite%26style%3Dplastic" class="article-body-image-wrapper"&gt;&lt;img alt="Gatsby" src="https://res.cloudinary.com/practicaldev/image/fetch/s--zpQv1MOf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/Gatsby-663399%3Flogo%3Dgatsby%26logoColor%3Dwhite%26style%3Dplastic"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EAaT2o8o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/GraphQL-E10098%3Flogo%3Dgraphql%26logoColor%3Dwhite%26style%3Dplastic" class="article-body-image-wrapper"&gt;&lt;img alt="GraphQl" src="https://res.cloudinary.com/practicaldev/image/fetch/s--EAaT2o8o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/GraphQL-E10098%3Flogo%3Dgraphql%26logoColor%3Dwhite%26style%3Dplastic"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The syntax is really simple, and like I said, you can create a custom badge for any technology, language or tool you can think of. Here is what it looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://img.shields.io/badge/BadgeText-HexColor?logo=SimpleIconName&amp;amp;logoColor=ColorName&amp;amp;style=ShieldStyle"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let's break down all of the properties from that Url.&lt;/p&gt;

&lt;p&gt;The BadgeText is your label or badge text. In my examples above those would be React, Angular, Gatsby etc.&lt;/p&gt;

&lt;p&gt;HexColor is hex value of the color you want for your badge. If you want to stick with the official logo color for the tech/tool you are putting on the badge - you can find that on &lt;a href="https://simpleicons.org/" rel="noopener noreferrer"&gt;SimpleIcons.org&lt;/a&gt;. Just enter your tech in the search bar and you will get the logo image, logo name and it's hex color value. It's pretty sweet. While you are there make sure to grab the logo name as well, since that is what you need to use instead of the SimpleIconName in my example Url above.&lt;/p&gt;

&lt;p&gt;Replace ColorName to a desired logo color. You can find the list of available color names on &lt;a href="https://shields.io/" rel="noopener noreferrer"&gt;Shields.io&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Lastly, you need to switch ShieldStyle with one of the four values I mentioned above: plastic, flat, flat-square or for-the-badge. This will change the shape and look of your badge and you can see the examples above.&lt;/p&gt;

&lt;p&gt;There are additional properties that you can change which I didn't use here, and you can find them on the official website.&lt;/p&gt;

&lt;p&gt;Once you are done creating you badges you will probably want to put them in a single line in your GitHub ReadMe. To do this you need to wrap all image tags into a paragraph tag and it will work like a charm.&lt;/p&gt;

&lt;p&gt;Here is the code example for what I used in my profile ReadMe:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"React"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://img.shields.io/badge/React-61DAFB?logo=react&amp;amp;logoColor=white&amp;amp;style=for-the-badge"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"Angular"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://img.shields.io/badge/Angular-DD0031?logo=angular&amp;amp;logoColor=white&amp;amp;style=for-the-badge"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"JavaScript"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://img.shields.io/badge/JavaScript-F7DF1E?logo=javascript&amp;amp;logoColor=white&amp;amp;style=for-the-badge"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"HTML"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://img.shields.io/badge/HTML-E34F26?logo=html5&amp;amp;logoColor=white&amp;amp;style=for-the-badge"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"Css"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://img.shields.io/badge/CSS-1572B6?logo=css3&amp;amp;logoColor=white&amp;amp;style=for-the-badge"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"Sass"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://img.shields.io/badge/Sass-CC6699?logo=sass&amp;amp;logoColor=white&amp;amp;style=for-the-badge"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"Gatsby"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://img.shields.io/badge/Gatsby-663399?logo=gatsby&amp;amp;logoColor=white&amp;amp;style=for-the-badge"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"GraphQl"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://img.shields.io/badge/GraphQL-E10098?logo=graphql&amp;amp;logoColor=white&amp;amp;style=for-the-badge"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"C Sharp"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://img.shields.io/badge/C%23-239120?logo=c-sharp&amp;amp;logoColor=white&amp;amp;style=for-the-badge"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"Unity"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://img.shields.io/badge/Unity-000000?logo=unity&amp;amp;logoColor=white&amp;amp;style=for-the-badge"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you want to create contact cards/badges you can make them the same way. Like I said, you are not limited to just programming language logos. If you want them to link to your email or social media you will have to wrap them inside of a url tag, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://www.youtube.com/channel/UCu3RVedqyL5o776xyQlbyAw"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt;
    &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"Youtube"&lt;/span&gt;
    &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://img.shields.io/badge/youtube-FF0000?logo=youtube&amp;amp;logoColor=white&amp;amp;style=for-the-badge"&lt;/span&gt;
  &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://twitter.com/alekswritescode"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt;
    &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"Twitter"&lt;/span&gt;
    &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://img.shields.io/badge/Twitter-1DA1F2?logo=twitter&amp;amp;logoColor=white&amp;amp;style=for-the-badge"&lt;/span&gt;
  &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://www.instagram.com/aleks.popovic/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt;
    &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"Instagram"&lt;/span&gt;
    &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://img.shields.io/badge/Instagram-E4405F?logo=instagram&amp;amp;logoColor=white&amp;amp;style=for-the-badge"&lt;/span&gt;
  &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://www.linkedin.com/in/alekspopovic/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt;
    &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"Linkedin"&lt;/span&gt;
    &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://img.shields.io/badge/linkedin-0077B5?logo=linkedin&amp;amp;logoColor=white&amp;amp;style=for-the-badge"&lt;/span&gt;
  &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#github-stats" class="anchor"&gt;
  &lt;/a&gt;
  GitHub Stats
&lt;/h1&gt;

&lt;p&gt;If you are interested into setting up all sorts of different stats on your GitHub profile you should definitely check out &lt;a href="https://github.com/anuraghazra/github-readme-stats" rel="noopener noreferrer"&gt;this awesome repo&lt;/a&gt;. I will show you how to use a couple of cool widgets from there, namely - GitHub Stats Card and Top Languages Card.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#github-stats-card" class="anchor"&gt;
  &lt;/a&gt;
  Github Stats Card
&lt;/h1&gt;

&lt;p&gt;There is an easy way to display all of your GitHub stats using this simple widget. You just need to take this line of code in markdown or HTML, enter your GitHub username and paste it into your ReadMe file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="p"&gt;![&lt;/span&gt;&lt;span class="nv"&gt;github stats&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="sx"&gt;https://github-readme-stats.vercel.app/api?username=YourUsername&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://github-readme-stats.vercel.app/api?username=YourUsername"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Apart from entering your username, which is mandatory to see the stats, you can also enter other parameters to customize the display card. One of them is theme, which you can use to set up one of existing color themes. You can find the full list of them in the repo, but you can also customize all of the colors on your own, or even submit a new theme.&lt;/p&gt;

&lt;p&gt;Here is an example of how you can customize the card to display stats for private repos, use a custom card title, show icons for each stat and use a custom color for text, title and icons:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt;
  &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://github-readme-stats.vercel.app/api?username=alekspopovic&amp;amp;count_private=true&amp;amp;title_color=FD9047&amp;amp;icon_color=FD9047&amp;amp;text_color=0C2233&amp;amp;custom_title=Aleks+Popovic's+GitHub+Stats&amp;amp;show_icons=true"&lt;/span&gt;
&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can find the list of all parameters in the repo, as well as their potential values.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#top-languages-card" class="anchor"&gt;
  &lt;/a&gt;
  Top Languages Card
&lt;/h1&gt;

&lt;p&gt;If you want to show your visitors what programming languages you mostly use in your repos there is an easy way to do that as well. Here is the code you need to enter into your ReadMe and don't forget to enter your own username:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="p"&gt;![&lt;/span&gt;&lt;span class="nv"&gt;Top languages&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="sx"&gt;https://github-readme-stats.vercel.app/api/top-langs/?username=alekspopovic&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt;
  &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://github-readme-stats.vercel.app/api/top-langs/?username=alekspopovic"&lt;/span&gt;
&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As far as additional parameters go you can use hide to block one or more languages from showing, langs_count to increase or decrease the number of languages shown (default value is 5) and layout=compact to display a one-line graphical spread with a percentage list.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#wakatime-week-stats" class="anchor"&gt;
  &lt;/a&gt;
  Wakatime Week Stats
&lt;/h1&gt;

&lt;p&gt;This one gets an honorable mention since I don't use Wakatime myself, but it looks very cool so I couldn't leave it out. If you never heard about it - Wakatime is an "open source plugin for metrics about your programming". It measures your daily productivity and tracks all sorts of stats about your programming languages and general coding habits.&lt;/p&gt;

&lt;p&gt;To use it you will need to create an account on their &lt;a href="https://wakatime.com/" rel="noopener noreferrer"&gt;official website&lt;/a&gt; and follow the setup instructions for your favorite IDE or text editor.&lt;/p&gt;

&lt;p&gt;After that you can use it in a similar way to the previous two, but this time you will need to swap in your Wakatime username.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="p"&gt;![&lt;/span&gt;&lt;span class="nv"&gt;Wakatime stats&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="sx"&gt;https://github-readme-stats.vercel.app/api/wakatime?username=USERNAME&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt;
  &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://github-readme-stats.vercel.app/api/wakatime?username=USERNAME"&lt;/span&gt;
&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you are using Wakatime please let me know what are your impressions and if it's helped you with your productivity. I'm really curious because I am considering to start using it myself.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#additional-inspiration" class="anchor"&gt;
  &lt;/a&gt;
  Additional inspiration
&lt;/h1&gt;

&lt;p&gt;Like I said in the introduction - my GitHub profile was empty just a couple of days ago. I was inspired to add stuff to it when I saw &lt;a href="https://twitter.com/TheJackForge/status/1329818490555957248" rel="noopener noreferrer"&gt;this Twitter thread&lt;/a&gt; by Jack Forge. I was scrolling through the multitude of responses, clicking to all the different profiles and I thought to myself - Damn, these people have really cool looking GitHub profiles. I want to make something like that.&lt;/p&gt;

&lt;p&gt;Once I did that I wanted to share what I found and figured out with you. You can find some pretty nice profiles in there, but if you want some more examples of what can be done with just some markdown - you can check out &lt;a href="https://github.com/abhisheknaiidu/awesome-github-profile-readme" rel="noopener noreferrer"&gt;this great repo&lt;/a&gt; with a list of awesome GitHub profiles.&lt;/p&gt;

&lt;p&gt;If you want to check out my modest GitHub profile which features most of the examples I outlined in this tutorial you can find it &lt;a href="https://github.com/alekspopovic" rel="noopener noreferrer"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you have any questions or comments you can reach out to me on &lt;a href="https://twitter.com/alekswritescode" rel="noopener noreferrer"&gt;Twitter&lt;/a&gt; and &lt;a href="https://www.instagram.com/aleks.popovic/" rel="noopener noreferrer"&gt;Instagram&lt;/a&gt;, where I also post interesting code tidbits and designs.&lt;/p&gt;

&lt;p&gt;I also regularly upload React and web dev tutorials to YouTube, so if that's your cup of tea feel free to support me by subscribing to &lt;a href="https://www.youtube.com/channel/UCu3RVedqyL5o776xyQlbyAw" rel="noopener noreferrer"&gt;my channel&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>portfolio</category>
      <category>programming</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>18 tips/tricks for Junior JavaScript Developer</title>
      <author>Mehul Lakhanpal</author>
      <pubDate>Fri, 27 Nov 2020 18:37:52 +0000</pubDate>
      <link>https://dev.to/318097/18-tips-tricks-for-junior-javascript-developer-57oa</link>
      <guid>https://dev.to/318097/18-tips-tricks-for-junior-javascript-developer-57oa</guid>
      <description>&lt;h3&gt;
  &lt;a href="#1-convert-to-string" class="anchor"&gt;
  &lt;/a&gt;
  1. Convert to string
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// '123'&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// '123'&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// '123'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-convert-to-number" class="anchor"&gt;
  &lt;/a&gt;
  2. Convert to number
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;123&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 123&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// 123&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// 123&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-convert-to-boolean" class="anchor"&gt;
  &lt;/a&gt;
  3. Convert to boolean
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Solution 1 - Use double-exclamation (!!) to convert to boolean&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;

&lt;span class="c1"&gt;// Solution 2 - Pass the value to Boolean()&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-problem-with-the-string-raw-false-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  4. Problem with the string &lt;code&gt;'false'&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;false&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;

&lt;span class="c1"&gt;// The best way to check would be,&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;false&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#5-null-vs-undefined" class="anchor"&gt;
  &lt;/a&gt;
  5. null vs undefined
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;null&lt;/code&gt; is a value, whereas &lt;code&gt;undefined&lt;/code&gt; is not.&lt;code&gt;null&lt;/code&gt; is like an empty &lt;strong&gt;box&lt;/strong&gt;, and &lt;code&gt;undefined&lt;/code&gt; is no box at all.&lt;br&gt;
ex.,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;default value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// default value&lt;/span&gt;
&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// default value&lt;/span&gt;

&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// null&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;When &lt;code&gt;null&lt;/code&gt; is passed, the default value is not taken, whereas when &lt;code&gt;undefined&lt;/code&gt; or nothing is passed the default value is taken.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-truthy-and-falsy-values" class="anchor"&gt;
  &lt;/a&gt;
  6. Truthy and Falsy values
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Falsy values&lt;/strong&gt; - &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;""&lt;/code&gt; (empty string), &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;, &amp;amp; &lt;code&gt;NaN&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Truthy values&lt;/strong&gt; - &lt;code&gt;"false"&lt;/code&gt;, &lt;code&gt;"0"&lt;/code&gt;, &lt;code&gt;{}&lt;/code&gt; (empty object), &amp;amp; &lt;code&gt;[]&lt;/code&gt; (empty array)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-what-changes-can-be-made-with-raw-const-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  7. What changes can be made with &lt;code&gt;const&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;const&lt;/code&gt; is used when the value does not change. ex,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Codedrops&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Codedrops.tech&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Error&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="c1"&gt;// Error&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Codedrops&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="c1"&gt;// Error&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;But it can be used to update value in previously assigned arrays/objects &lt;strong&gt;references&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Works&lt;/span&gt;
&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Works&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Codedrops&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Works&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#8-difference-between-double-equal-and-triple-equal" class="anchor"&gt;
  &lt;/a&gt;
  8. Difference between double equal and triple equal
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Double equal - Converts both the operands to the same type and then compares&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;

&lt;span class="c1"&gt;// Triple equal - Does not convert to same type&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#9-better-way-to-accept-arguments" class="anchor"&gt;
  &lt;/a&gt;
  9. Better way to accept arguments
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;downloadData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;resourceId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;searchText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pageNo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="nx"&gt;downloadData&lt;/span&gt;&lt;span class="p"&gt;(...);&lt;/span&gt; &lt;span class="c1"&gt;// need to remember the order&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Simpler way to do this-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;downloadData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;resourceId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;searchText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pageNo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;limit&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="nx"&gt;downloadData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;resourceId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/posts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;searchText&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;programming&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#10-rewriting-normal-function-as-arrow-function" class="anchor"&gt;
  &lt;/a&gt;
  10. Rewriting normal function as arrow function
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;can be rewritten as&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#11-return-an-objectexpression-from-arrow-function" class="anchor"&gt;
  &lt;/a&gt;
  11. Return an object/expression from arrow function
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hi&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#12-convert-a-set-to-an-array" class="anchor"&gt;
  &lt;/a&gt;
  12. Convert a set to an array
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Set(6) {1, 2, 4, 5, 6, 7}&lt;/span&gt;

&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// TypeError: set.map is not a function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To convert to an array,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#13-check-if-a-value-is-an-array" class="anchor"&gt;
  &lt;/a&gt;
  13. Check if a value is an array
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// object&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#14-object-keys-are-stored-in-insertion-order" class="anchor"&gt;
  &lt;/a&gt;
  14. Object keys are stored in insertion order
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Human&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;address&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Earth&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;profession&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Coder&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// name, age, address, profession&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;code&gt;Objects&lt;/code&gt; maintain the order in which the keys were created.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#15-nullish-coalescing-operator" class="anchor"&gt;
  &lt;/a&gt;
  15. Nullish coalescing operator
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 100&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;code&gt;Nullish coalescing operator&lt;/code&gt; (??) returns the right-hand side value only if the left-hand side value is &lt;code&gt;undefined&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#16-map" class="anchor"&gt;
  &lt;/a&gt;
  16. map()
&lt;/h3&gt;

&lt;p&gt;It is a utility function which helps in &lt;strong&gt;applying a function on every element of the array&lt;/strong&gt;.&lt;br&gt;
It returns a &lt;strong&gt;new&lt;/strong&gt; array, which contains the values returned from that applied function. ex.,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;numList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;square&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;squares&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;numList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;square&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;squares&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [1, 4, 9]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here, the function &lt;code&gt;square&lt;/code&gt; is applied to every element. i.e., 1, 2, 3.&lt;/p&gt;

&lt;p&gt;The returned value of that function is returned as the new  element value.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#17-trycatchfinally-real-example" class="anchor"&gt;
  &lt;/a&gt;
  17. try..catch..finally - Real example
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://jsonplaceholder.typicode.com/posts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// if error occurs here, then all the statements &lt;/span&gt;
    &lt;span class="c1"&gt;//in the try block below this wont run.&lt;/span&gt;
    &lt;span class="c1"&gt;// Hence cannot turn off loading here.&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setToastMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;finally&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Turn off loading irrespective of the status.&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;getData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#18-destructuring" class="anchor"&gt;
  &lt;/a&gt;
  18. Destructuring
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;success&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;programming&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;javascript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;computer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;unknownProperty&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;unknownProperty&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 5 'test'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;Thanks for reading 💙&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
Follow &lt;strong&gt;@codedrops.tech&lt;/strong&gt; for daily posts.&lt;br&gt;&lt;br&gt;
&lt;a href="https://www.instagram.com/codedrops.tech/"&gt;Instagram&lt;/a&gt; ● &lt;a href="https://twitter.com/codedrops_tech"&gt;Twitter&lt;/a&gt; ● &lt;a href="https://www.facebook.com/codedrops.tech/"&gt;Facebook&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Micro-Learning ● Web Development ● Javascript ● MERN stack ● Javascript&lt;br&gt;&lt;br&gt;
&lt;strong&gt;&lt;a href="https://www.codedrops.tech/"&gt;codedrops.tech&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>beginners</category>
    </item>
    <item>
      <title>What was your win this week?</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Fri, 27 Nov 2020 16:21:02 +0000</pubDate>
      <link>https://dev.to/devteam/what-was-your-win-this-week-16ip</link>
      <guid>https://dev.to/devteam/what-was-your-win-this-week-16ip</guid>
      <description>&lt;p&gt;Happy Friday!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Looking back on your week — what was something you're proud of?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;All wins count — big or small 🎉&lt;/p&gt;

&lt;p&gt;Examples of 'wins' include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Starting a new project&lt;/li&gt;
&lt;li&gt;Landing a new job&lt;/li&gt;
&lt;li&gt;Nailing a new recipe... or whatever else made you feel proud. ❤️&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;I hope you all have a great weekend!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/WRhlnRNZqQIhi/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/WRhlnRNZqQIhi/giphy.gif" alt="Weekend Dog"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>weeklyretro</category>
    </item>
    <item>
      <title>Have you built any projects with Electron?</title>
      <author>Madza</author>
      <pubDate>Fri, 27 Nov 2020 11:40:35 +0000</pubDate>
      <link>https://dev.to/madza/have-you-built-any-projects-with-electron-58bi</link>
      <guid>https://dev.to/madza/have-you-built-any-projects-with-electron-58bi</guid>
      <description>&lt;p&gt;Thanks to &lt;a href="https://www.electronjs.org/"&gt;Electron&lt;/a&gt; you can build cross-platform desktop apps with JavaScript, HTML, and CSS. It's an &lt;a href="https://github.com/electron/electron"&gt;open-source&lt;/a&gt; project, that uses Chromium and Node.js and is actively maintained by GitHub.&lt;/p&gt;

&lt;p&gt;It's been in my eye for a while, so I'm curious have you built any projects with it, and what was your experience?&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>javascript</category>
      <category>electron</category>
      <category>desktop</category>
    </item>
    <item>
      <title>FE Jargon you should know - SSG,  SSR,  CSR,  VDOM</title>
      <author>Alexandru-Dan Pop</author>
      <pubDate>Fri, 27 Nov 2020 11:16:08 +0000</pubDate>
      <link>https://dev.to/alexandrudanpop/fe-jargon-you-should-know-ssg-ssr-csr-vdom-22b0</link>
      <guid>https://dev.to/alexandrudanpop/fe-jargon-you-should-know-ssg-ssr-csr-vdom-22b0</guid>
      <description>&lt;p&gt;If you have heard lately talks about &lt;strong&gt;SSG, SSR, CSR, VDOM&lt;/strong&gt; - and you were like: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What the heck is that? 🤔 &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then this article is for you and aims to be a &lt;em&gt;mini dictionary&lt;/em&gt; for modern frontend terminology and jargon.&lt;/p&gt;

&lt;p&gt;Please leave a 🧡 &amp;amp; 🦄 if you enjoy this article &amp;amp; follow me on &lt;a href="https://twitter.com/alexandrudanpop"&gt;Twitter&lt;/a&gt; where I post more cool content.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#csr" class="anchor"&gt;
  &lt;/a&gt;
  CSR
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Client side rendering&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The general way of building frontend applications those days is writing them using libraries like &lt;strong&gt;React, Angular, Vue, or Svelte&lt;/strong&gt; and then building them in a javascript bundle. This bundle is referenced in our single HTML file. CSR (client-side rendering) is rendering our markup in the browser. If that sounds complicated, look at the image below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8VHzfN4H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ht4ffj3rdmj9a22x6rz3.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8VHzfN4H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ht4ffj3rdmj9a22x6rz3.PNG" alt="CSR flow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#this-image-represents-two-stages" class="anchor"&gt;
  &lt;/a&gt;
  This image represents two stages:
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Dotted gray line represents the deployment of our FE code to a server. As you can see the deploy step generates an HTML file and a bundle.js file.&lt;/li&gt;
&lt;li&gt;Dashed green line represents how a browser gets to paint our app: 

&lt;ol&gt;
&lt;li&gt;Browser - STEP 1 - The browser requests the HTML file&lt;/li&gt;
&lt;li&gt;Browser - STEP 2 - The browser requests the JS file&lt;/li&gt;
&lt;li&gt;Browser - STEP 3 - Perform Client-side rendering (CSR)&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;✅ As an advantage - &lt;strong&gt;CSR is the most straight-forward way to build a SPA&lt;/strong&gt; (single page app). So it's the easiest and fastest way for developers.&lt;/p&gt;

&lt;p&gt;❗ The main disadvantage of this approach is that after &lt;em&gt;Step 1&lt;/em&gt;, we cannot show anything to the user. &lt;strong&gt;We need to wait until JS is downloaded, parsed &amp;amp; executed (&lt;em&gt;Step 3&lt;/em&gt;), and only then our users can see the app.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ssg" class="anchor"&gt;
  &lt;/a&gt;
  SSG
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Static site generation&lt;/strong&gt; - this is when you are pre-rendering a website with a framework or library that is producing static HTML pages. &lt;/p&gt;

&lt;p&gt;For example, you could be writing a React application, but you want its output to be static HTML pages. This might be because you enjoy React, but you also want the performance of pre-rendered content. Something like a blog, a presentation website, or an e-shop. &lt;/p&gt;

&lt;p&gt;If the content doesn't change often, it makes sense to render at build time, instead of loading all the javascript in the browser and only then building the HTML that the user will interact with.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--piYozBui--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/a5bsiornhtwefefakmdb.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--piYozBui--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/a5bsiornhtwefefakmdb.PNG" alt="SSG flow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Comparing to CSR -&amp;gt; you can see we have lots of HTML files resulting from our build step. We also have HTML available to render in the browser in Step 2.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Additionally, SSG sites can be hydrated after the initial page is loaded. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ok, if that sounded weird, that just means after the initial HTML page is loaded, it can also load the CSR library so when the user navigates to the next page, it happens instantly, rendered on the client, without other network calls.&lt;/p&gt;

&lt;p&gt;✅ SSG sites will create the &lt;strong&gt;most performant web apps&lt;/strong&gt; provided the hosting is also good.&lt;/p&gt;

&lt;p&gt;❗ Content needs to be fetched always at build time. This means we need to build &amp;amp; deploy every time the content changes. This is &lt;strong&gt;not feasible for highly dynamic content&lt;/strong&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ssr" class="anchor"&gt;
  &lt;/a&gt;
  SSR
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Server-side rendering&lt;/strong&gt;&lt;br&gt;
Server-side rendering is a pretty old technique. Any application that renders HTML on the server can be called an SSR app. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LltZC-eF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/oyveukr28dfjv8hc4u73.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LltZC-eF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/oyveukr28dfjv8hc4u73.PNG" alt="SSR flow"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#but-this-looks-like-the-ssg-pic" class="anchor"&gt;
  &lt;/a&gt;
  But this looks like the SSG pic...
&lt;/h3&gt;

&lt;p&gt;Hmm.. kind of, but here you can see we actually don't treat our server just like a dumb provider of static content, instead we are actually doing something useful with it. We are generating the HTML every time our user needs it. This is slower than SSG because the server needs to compute the HTML.&lt;/p&gt;

&lt;p&gt;The generic &lt;em&gt;code that runs on a server&lt;/em&gt; in this picture could be a &lt;em&gt;Node.js Express App or Ruby or Python&lt;/em&gt;. &lt;strong&gt;The thing that we achieve with this approach is the dynamic control of our content, headers &amp;amp; meta tags (that can serve for SEO)&lt;/strong&gt;. And a plus can also be the performance. We don't stress our app consumers downloading a bunch of JS and only then rendering HTML (CSR), we give it straight away. The caveat is that we need to account for the fact that our server needs to be performant doing the generation &amp;amp; also support the load we throw at it. &lt;/p&gt;

&lt;p&gt;✅ SSR sites provide us the most flexibility in terms of what we want to display to users despite fast content changes &amp;amp; how we optimize our response headers &amp;amp; meta tags for SEO.&lt;/p&gt;

&lt;p&gt;❗ Extra complexity due to the server-side code &amp;amp; we need to scale our server in case we receive more load. SSR and SSG don't have this problem, they can be thrown on a good CDN and that just scales to any load.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;SSR, SSG, CSR - can be combined.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Modern frameworks like &lt;strong&gt;Next.js (for React)&lt;/strong&gt; or &lt;strong&gt;NuxtJS (for Vue)&lt;/strong&gt; allow us to write applications that can serve multiple purposes and we can combine those techniques with it.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#vdom" class="anchor"&gt;
  &lt;/a&gt;
  VDOM
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Virtual DOM&lt;/strong&gt;&lt;br&gt;
The Virtual DOM is an in-memory representation of our UI elements. Frameworks like React, Angular &amp;amp; Vue use a Virtual DOM to &lt;strong&gt;not paint&lt;/strong&gt; in the real DOM the same thing multiple times. Because the real Browser DOM is slow to paint things, those frameworks use a VDOM as an optimization to keep track and only re-paint the things that are necessary.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/BYbgopx44vo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-article" class="anchor"&gt;
  &lt;/a&gt;
  Next article
&lt;/h2&gt;

&lt;p&gt;The next post will be more about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Micro-frontends&lt;/li&gt;
&lt;li&gt;Building &amp;amp; bundling related topics - CodeSplitting, Transpiling, Tree shaking &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For &lt;strong&gt;React&lt;/strong&gt; specific things to know - I  wrote about it in-depth in &lt;a href="https://blog.alexandrudanpop.dev/posts/react-js-top-things-to-know-3onj/"&gt;my other article.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For a description of more general concepts - you should also read the very nice &lt;a href="https://css-tricks.com/web-nerd-terminology-explained/"&gt;Web Nerd Terminology&lt;/a&gt; blog post on CSS tricks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusions" class="anchor"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h2&gt;

&lt;p&gt;Hope those explanations help - please leave a 🧡 &amp;amp; 🦄 to support the effort of creating this article. &lt;br&gt;
More cool content on &lt;a href="https://twitter.com/alexandrudanpop"&gt;Twitter&lt;/a&gt; 🔥🔥.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#comment-below" class="anchor"&gt;
  &lt;/a&gt;
  👇 &lt;strong&gt;Comment below&lt;/strong&gt; 👇
&lt;/h3&gt;

&lt;p&gt;Do you use SSR, SSG, CSR, or all of them?&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
    </item>
    <item>
      <title>Recreating the React workflow in vanilla JavaScript</title>
      <author>Matija Turčec</author>
      <pubDate>Fri, 27 Nov 2020 11:15:13 +0000</pubDate>
      <link>https://dev.to/maturc/recreating-the-react-workflow-in-vanilla-javascript-449c</link>
      <guid>https://dev.to/maturc/recreating-the-react-workflow-in-vanilla-javascript-449c</guid>
      <description>&lt;p&gt;Recently, I have been experimenting with different approaches for building vanilla JavaScript apps. And I got the idea to recreate basic React functionality in order to get a similar workflow as in React. This would enable me to keep the benefits of vanilla JavaScript while having the structure of React apps. It would also make it easy to migrate code into React if the app grows.&lt;/p&gt;

&lt;p&gt;By the end of this post, I will show you how to make a counter component with code that looks almost identical to React code, without using any React. As can be seen here:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;elements&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;typed-html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;notReact&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../notReact&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;notReact&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;increaseCounter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;notReact&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addOnClick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;increaseCount&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;increaseCounter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="na"&gt;isHigherThan5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;notReact&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;isHigherThan5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Yes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;No&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isHigherThan5&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Counter: &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"increaseCount"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Increase count&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Is the count higher than 5? &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;strong&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isHigherThan5&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;strong&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can find the repository &lt;a href="https://github.com/maturc/notReact"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#setup" class="anchor"&gt;
  &lt;/a&gt;
  Setup
&lt;/h1&gt;

&lt;p&gt;The first thing that I did was that I installed webpack and typescript. The main reason why I'm using typescript is because it makes it easy to use jsx, otherwise it's not mandatory. The same could likely be done with babel as well.&lt;/p&gt;

&lt;p&gt;After a standard webpack and typescript installation, I installed &lt;a href="https://github.com/nicojs/typed-html"&gt;typed-html&lt;/a&gt; &lt;code&gt;npm install --save typed-html&lt;/code&gt;. This is a package that lets us use jsx inside of typescript &lt;code&gt;tsx&lt;/code&gt; files.&lt;br&gt;
After it was installed, I added the following lines into the typescript config file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;compilerOptions&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;jsx&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;jsxFactory&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;elements.createElement&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This factory comes with some limitations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; Error: Property 'foo' does not exist on type 'JSX.IntrinsicElements'.&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"bar"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; Error:  Property 'foo' does not exist on type 'HtmlAnchorTag'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We can't use props and components like we usually would in React, instead, a component will be a function call and the function arguments will be props.&lt;/p&gt;

&lt;p&gt;Now, what does the jsx factory even do?&lt;br&gt;
It transpiles the jsx into a string. That works for me, because I wanted to do the rending with a simple &lt;code&gt;.innerHTML&lt;/code&gt;. But if you want to get some other kind of output, you could use some other factory or even make your own.&lt;br&gt;
You could also avoid using jsx and just use template literals instead.&lt;/p&gt;

&lt;p&gt;Before I started coding I also had to create an index.html file.&lt;br&gt;
/public/index.html&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"theme-color"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"#000000"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;App&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;noscript&amp;gt;&lt;/span&gt;You need to enable JavaScript to run this app.&lt;span class="nt"&gt;&amp;lt;/noscript&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"root"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"bundle.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#rendering" class="anchor"&gt;
  &lt;/a&gt;
  Rendering
&lt;/h1&gt;

&lt;p&gt;Now that everything was set up, it was time to dive into JavaScript.&lt;/p&gt;

&lt;p&gt;First I made a file called &lt;code&gt;notReact.ts&lt;/code&gt; and put it inside of the &lt;code&gt;/src&lt;/code&gt; folder. This file is where all of the rendering and state logic was located in.&lt;br&gt;
First I made a function closure and put two functions inside of it. One for initialization and one for rendering.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;notReact&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;_root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Element&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;_templateCallback&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ITemplateCallback&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rootElement&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Element&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;templateCallback&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ITemplateCallback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;_root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;rootElement&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;_templateCallback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;templateCallback&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;_root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_templateCallback&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;


&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ITemplateCallback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;code&gt;init()&lt;/code&gt; has two arguments, a root element that will be used as a template container and a callback function that returns a string, containing all of the html.&lt;br&gt;
The &lt;code&gt;render()&lt;/code&gt; function calls the template callback and assigns it to the &lt;code&gt;.innerHTML&lt;/code&gt; of the root element.&lt;/p&gt;

&lt;p&gt;Next, I made the &lt;code&gt;index.ts&lt;/code&gt; and the &lt;code&gt;App.tsx&lt;/code&gt; file and put both of them inside of the &lt;code&gt;/src&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;Then I initialized the rendering and called the &lt;code&gt;App&lt;/code&gt; component inside of the &lt;code&gt;index.ts&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;notReact&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./notReact&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;notReact&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;DOMContentLoaded&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Inside of the &lt;code&gt;App&lt;/code&gt; component I wrote a simple "Hello world".&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;elements&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;typed-html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      Hello world;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here is the result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o3-xs5VY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4z216v62i3kcmsri5bhb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o3-xs5VY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4z216v62i3kcmsri5bhb.png" alt="result"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#state-and-event-listeners" class="anchor"&gt;
  &lt;/a&gt;
  State and event listeners
&lt;/h1&gt;

&lt;p&gt;Now that the rendering was done, it was time to write the &lt;code&gt;useState&lt;/code&gt; hook, while also creating a basic counter application to test it out.&lt;br&gt;
First I created another component called &lt;code&gt;Counter.tsx&lt;/code&gt; and put it inside of the &lt;code&gt;components&lt;/code&gt; folder.&lt;br&gt;
I wrote it the same way it would be written in regular React, with the exception of the &lt;code&gt;onClick&lt;/code&gt; event that I omitted for now.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;elements&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;typed-html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;notReact&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../notReact&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;notReact&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;increaseCounter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Counter: &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Increase count&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;After that, I had to change the App component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;elements&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;typed-html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./components/Counter&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;With everything being ready, it was time to write the useState hook.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;notReact&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;hooks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;hooks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;hooks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;initValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;_idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;setState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;hooks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;_idx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;newValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;idx&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;idx&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//resets on rerender&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;There are two local variables. An array variable called &lt;code&gt;hooks&lt;/code&gt; that contains all of the state values. And the &lt;code&gt;idx&lt;/code&gt; variable which is the index used to iterate over the &lt;code&gt;hooks&lt;/code&gt; array.&lt;/p&gt;

&lt;p&gt;Inside of the &lt;code&gt;useState()&lt;/code&gt; function, a state value together with a setter function get returned for each &lt;code&gt;useState()&lt;/code&gt; call.&lt;/p&gt;

&lt;p&gt;Now we have a working &lt;code&gt;useState&lt;/code&gt; hook, but we can't test it out yet. We need to add an &lt;code&gt;onclick&lt;/code&gt; event listener to the button first. The problem here is that if we add it directly into the jsx, the function will be undefined because of the way the html is being rendered here.&lt;br&gt;
To fix this, I had to update the &lt;code&gt;notReact.ts&lt;/code&gt; file again.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;notReact&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;_eventArray&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IEventArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;_eventArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//the array gets emptied on rerender&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;handleEventListeners&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleEventListeners&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;_eventArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;addOnClick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;_eventArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;addOnClick&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;IEventArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I made a local variable named &lt;code&gt;eventArray&lt;/code&gt;. It's an array of objects, containing all elements that have an &lt;code&gt;onclick&lt;/code&gt; event, together with a callback function for each of those events.&lt;br&gt;
The &lt;code&gt;document&lt;/code&gt; has an &lt;code&gt;onclick&lt;/code&gt; event listener. On each click it checks if the target element is equal to one of the event array elements. If it is, it fires it's callback function.&lt;/p&gt;

&lt;p&gt;Now let's update the Counter component so that the button has an onclick event:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="nx"&gt;notReact&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addOnClick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;increaseCount&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;increaseCounter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Counter: &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"increaseCount"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Increase count&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here is the result so far:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tdWB8-_G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2jygc0by93ci95h2y5ec.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tdWB8-_G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2jygc0by93ci95h2y5ec.gif" alt="counter demo"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#side-effects" class="anchor"&gt;
  &lt;/a&gt;
  Side effects
&lt;/h1&gt;

&lt;p&gt;The last thing that I added was the &lt;code&gt;useEffect&lt;/code&gt; hook.&lt;br&gt;
Here is the code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;notReact&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;hooks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dependancyArray&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;oldDependancies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;hooks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;hasChanged&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;oldDependancies&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;hasChanged&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dependancyArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;some&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;dep&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dep&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;oldDependancies&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;hooks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dependancyArray&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;idx&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hasChanged&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;addOnClick&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It saves dependancies from the last render and checks if they changed. If they did change the callback function gets called.&lt;/p&gt;

&lt;p&gt;Lets try it in action! I added a message bellow the button that changes if the counter gets higher than 5.&lt;br&gt;
Here is the final counter Component code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;elements&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;typed-html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;notReact&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../notReact&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;notReact&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;increaseCounter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;notReact&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addOnClick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;increaseCount&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;increaseCounter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="na"&gt;isHigherThan5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;notReact&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;isHigherThan5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Yes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;No&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isHigherThan5&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Counter: &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"increaseCount"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Increase count&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Is the count higher than 5? &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;strong&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isHigherThan5&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;strong&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--epbaiAS8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wcf2atu0yeu1vo7cz53l.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--epbaiAS8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wcf2atu0yeu1vo7cz53l.gif" alt="final demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;This is it! The component is looking a lot like actual React now. Changing it for React would be trivial, the only thing that would need to be changed is the &lt;code&gt;onclick&lt;/code&gt; event and the imports.&lt;/p&gt;

&lt;p&gt;If you enjoy working in React, an approach like this might be worth trying out. Just keep in mind that this code isn't very tested and there could possibly be a lot of bugs, especially when there are a lot of different states. The code has a lot of room for improvement and expansion. It's not a lot of code though, so it would be easy to change it based on your project requirements.&lt;/p&gt;

&lt;p&gt;I didn't go very in depth about my implementation of the useState and useEffect hooks. But if you want more details, you can check out this &lt;a href="https://www.youtube.com/watch?v=KJP1E-Y-xyo"&gt;talk&lt;/a&gt;, it's what inspired my implementation.&lt;/p&gt;

&lt;p&gt;Again, all of the code can be found in &lt;a href="https://github.com/maturc/notReact"&gt;this repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thank you for reading!&lt;/strong&gt; 😁&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Do you prefer Fetch or Axios?</title>
      <author>Madza</author>
      <pubDate>Fri, 27 Nov 2020 10:30:39 +0000</pubDate>
      <link>https://dev.to/madza/do-you-prefer-fetch-or-axios-1j14</link>
      <guid>https://dev.to/madza/do-you-prefer-fetch-or-axios-1j14</guid>
      <description>&lt;p&gt;One of the fundamental tasks of any web application is to communicate with servers through the HTTP protocol. This can be easily achieved using Fetch or Axios.&lt;/p&gt;

&lt;p&gt;The Fetch API is built-in most modern browsers and provides a fetch() method defined on the window object, while Axios is a specific 3rd party Javascript library you must install manually.&lt;/p&gt;

&lt;p&gt;Which method do you usually use and do you think adding a library (around 4.4KB gzip) is worth it for the extra features it brings?&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>discuss</category>
      <category>http</category>
      <category>api</category>
    </item>
    <item>
      <title>React Hooks I use everyday.</title>
      <author>Gautham Vijayan</author>
      <pubDate>Fri, 27 Nov 2020 09:46:46 +0000</pubDate>
      <link>https://dev.to/gautham495/react-hooks-i-use-everyday-2a7j</link>
      <guid>https://dev.to/gautham495/react-hooks-i-use-everyday-2a7j</guid>
      <description>&lt;p&gt;In this post I will list out all the React Hooks I use in a daily basis for my projects.&lt;/p&gt;

&lt;p&gt;Here are the list of them.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;useState.&lt;/li&gt;
&lt;li&gt;useRef.&lt;/li&gt;
&lt;li&gt;useEffect.&lt;/li&gt;
&lt;li&gt;useDispatch.&lt;/li&gt;
&lt;li&gt;useReducer.&lt;/li&gt;
&lt;li&gt;useSelector.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;1. useState:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;setstate&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;React's useState is used to take care of the state of the React component.&lt;/p&gt;

&lt;p&gt;It is used all the time during projects for transferring props from one component to another component.&lt;/p&gt;

&lt;p&gt;There are a lot of usecases for useState.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. useRef&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;UseRef is used to manipulate the dom elements just like we do in vanilla JS like,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;QuerySelector with addEventListener&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;or with React class component like,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;React.createRef()&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;useRef has &lt;strong&gt;.current&lt;/strong&gt; which we can be used to manipulate the html attributes like &lt;strong&gt;value,name&lt;/strong&gt; in React.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. useEffect&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getuser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;api_url&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;getuser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;},[])&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;UseEffect is similar to &lt;strong&gt;compononetDidMount&lt;/strong&gt; but in a more easy manner.&lt;/p&gt;

&lt;p&gt;When we want to load user data from our backend API when the page loads for the first time we can use &lt;strong&gt;useEffect.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;By using the empty braces([]) in the second argument, we instruct react to call the &lt;strong&gt;getuser function&lt;/strong&gt; only once when the page loads.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. useDispatch&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useDispatch&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;UseDispatch is used to dispatch an action when we are using  Redux for central state management in our website.&lt;/p&gt;

&lt;p&gt;This comes from the &lt;strong&gt;'react-redux'&lt;/strong&gt; module and is super handy.&lt;/p&gt;

&lt;p&gt;Before this we have write &lt;strong&gt;mapdispatchtoprops&lt;/strong&gt; but &lt;strong&gt;useDispatch&lt;/strong&gt; replaced it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. useReducer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;UseReducer is used when we are dealing with Context API.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. useSelector&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;selector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;variable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;useSelector is used to get the state of the redux's central state.&lt;/p&gt;

&lt;p&gt;We can easily manipulate the state with the useSelector hook.&lt;/p&gt;

&lt;p&gt;Before useSelector was introduced we need to use &lt;strong&gt;mapstatetoprops&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;These are the list of React hooks I use everyday.&lt;/p&gt;

&lt;p&gt;If there are more hooks you use, please share in the comments and let myself and fellow developers know about it.&lt;/p&gt;

&lt;p&gt;You can also create &lt;strong&gt;custom hook&lt;/strong&gt; yourself and &lt;strong&gt;reuse&lt;/strong&gt; it in your application as well.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading" class="anchor"&gt;
  &lt;/a&gt;
  Thank you for reading!!
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt; &lt;u&gt;Check out my portfolio: &lt;/u&gt; &lt;a href="https://gautham-portfolio.netlify.app/"&gt;Gautham's portfolio&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt; &lt;u&gt; Check out my blog: &lt;/u&gt;&lt;a href="https://coding-magnified.tech"&gt;coding-magnified.tech&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#my-other-articles" class="anchor"&gt;
  &lt;/a&gt;
  &lt;u&gt;My Other Articles: &lt;/u&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/gautham495/universal-css-properties-everyone-must-use-4kie"&gt;Universal CSS properties everyone must know&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/gautham495/creating-a-new-react-app-with-create-react-app-4e9m"&gt;Create-react-app&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/gautham495/basic-git-knowledge-for-beginners-m4p"&gt;Git for beginners&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/gautham495/changing-headers-in-react-with-react-helmet-d0d"&gt;Change headers in react with react-helmet&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/gautham495/know-how-to-apply-box-shadow-on-all-four-sides-43pn"&gt;Know How to apply box-shadow on all four sides.&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/gautham495/simple-css-selectors-for-beginners-2i44"&gt;Simple CSS Selectors&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/gautham495/css-pseudo-elements-for-beginners-53ob"&gt;CSS Pseudo Elements&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Connecting Gutenberg and Frontity</title>
      <author>Reyes Martínez</author>
      <pubDate>Fri, 27 Nov 2020 09:37:40 +0000</pubDate>
      <link>https://dev.to/frontity/connecting-gutenberg-and-frontity-35e3</link>
      <guid>https://dev.to/frontity/connecting-gutenberg-and-frontity-35e3</guid>
      <description>&lt;p&gt;This is a written version of the &lt;em&gt;"Connecting Gutenberg and Frontity: A Case Study"&lt;/em&gt; talk that Mario Santos (Product Manager at Frontity) gave at the &lt;a href="https://javascriptforwp.com/conference/"&gt;2020 JavaScript for WordPress Conference&lt;/a&gt;. You can find the slides &lt;a href="https://drive.google.com/file/d/1o4hZ8hscnY8WmUERXDbXE45IVsk8tn7E/view"&gt;here&lt;/a&gt; and watch the full talk on &lt;a href="https://www.youtube.com/watch?v=5EIqBfD_LTY"&gt;Youtube&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.youtube.com/watch?v=5EIqBfD_LTY"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BsnGX024--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://img.youtube.com/vi/5EIqBfD_LTY/0.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Gutenberg (also known as the block editor) is already being used by many WordPress users. Rolled into WordPress 5.0, it has reinvented the experience of creating and managing content in WordPress.&lt;/p&gt;

&lt;p&gt;In this talk, Mario walks you through the process we followed to rebuild our website (&lt;a href="https://frontity.org/"&gt;frontity.org&lt;/a&gt;) with Gutenberg and Frontity. He shares all the challenges and lessons learnt, and what we considered to be the best approach to solve them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-contents" class="anchor"&gt;
  &lt;/a&gt;
  Table of contents
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Introduction&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#why-use-gutenberg-and-frontity-together"&gt;Why use Gutenberg and Frontity together?&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#goals-of-the-process"&gt;Goals of the process&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Connecting Gutenberg and Frontity&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#how-did-we-implement-it"&gt;How did we implement it?&lt;/a&gt;

&lt;ol&gt;
&lt;li&gt;Adapting Frontity to Gutenberg&lt;/li&gt;
&lt;li&gt;Block patterns&lt;/li&gt;
&lt;li&gt;Template parts&lt;/li&gt;
&lt;li&gt;@frontity/html2react&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Conclusions&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#what-went-well"&gt;What went well&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#lessons-learnt-and-next-steps"&gt;Lessons learnt and next steps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;h1&gt;
  &lt;a href="#why-use-gutenberg-and-frontity-together" class="anchor"&gt;
  &lt;/a&gt;
  Why use Gutenberg and Frontity together?
&lt;/h1&gt;

&lt;p&gt;As you already know, WordPress as a publishing tool is great. That is one of the main reasons why it's widely used for different websites. In addition, Gutenberg opened a new paradigm which is revolutionizing the way we build, edit, and publish online. Its goal is to make the publishing experience even easier. &lt;/p&gt;

&lt;p&gt;By using Gutenberg with a React framework like Frontity, you can benefit from the best of these two worlds.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BUnG8NAV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://frontity.org/wp-content/uploads/2020/11/Why-Gutenberg-and-Frontity.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BUnG8NAV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://frontity.org/wp-content/uploads/2020/11/Why-Gutenberg-and-Frontity.png" alt="Why Gutenberg and Frontity asset"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First, you will get a great &lt;strong&gt;editing experience&lt;/strong&gt; thanks to WordPress and Gutenberg. Frontity allows you to maintain the publishing workflow with all the awesome functionalities that are already made for the WordPress editor.&lt;/p&gt;

&lt;p&gt;On the other hand, because Frontity is based on React, you will be able to create more complex user interfaces while having a &lt;strong&gt;great developer experience&lt;/strong&gt;. In the same way that WordPress usage is increasing each year and is the most popular CMS, React is becoming a popular library for taking over front-end development.&lt;/p&gt;

&lt;p&gt;Lastly, thanks to Frontity's unique approach, combining WordPress and React has never been easier. The framework deals with all the setup needed like Babel, WebPack, the WordPress REST API, the routing... so that you can focus on building your React theme.&lt;/p&gt;

&lt;p&gt;If you are interested in knowing more about why Frontity can be a great fit for your project as well as our vision, take a look at this &lt;a href="https://www.youtube.com/watch?v=9OkLcgxNSLo"&gt;introductory talk about the framework&lt;/a&gt; that our co-founder Pablo gave at the JavaScript for WordPress Conference.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#goals-of-the-process" class="anchor"&gt;
  &lt;/a&gt;
  Goals of the process
&lt;/h1&gt;

&lt;p&gt;Before starting the migration, we defined the project's goals and requirements that we needed to keep in mind during the whole process. This helped us prioritize and make other decisions later.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#explain-frontity-better" class="anchor"&gt;
  &lt;/a&gt;
  Explain Frontity better
&lt;/h4&gt;

&lt;p&gt;After discontinuing the development of Frontity PRO (our previous product) in order to focus on Frontity Framework, we hadn't updated our website to reflect the changes to the product. We felt that the new framework wasn't being properly explained. We had been working on new features which were not mentioned in the homepage, and some of the benefits of using Frontity weren't clearly expressed. For these reasons, our first and main goal was to redesign the whole website to explain everything better and start getting more traction.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#make-everything-editable-from-gutenberg" class="anchor"&gt;
  &lt;/a&gt;
  Make everything editable from Gutenberg
&lt;/h4&gt;

&lt;p&gt;Sometimes when developing a website, you are tempted to hardcode specific parts of the content or layout that you don't plan to update frequently. An example could be the header or the footer of a website. This can be even more tempting in a headless setup, where some aspects might be a bit more difficult to implement.&lt;/p&gt;

&lt;p&gt;In our case, we wanted the marketing team or any other member of the team to be able to easily change the website's copy, or to add or delete sections in the future without having to rely on the dev team. Such flexibility was an essential requirement for us. In the end, this is what a CMS like WordPress is for, right?&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#create-new-pages-easily" class="anchor"&gt;
  &lt;/a&gt;
  Create new pages easily
&lt;/h4&gt;

&lt;p&gt;This is closely related to the previous point: we wanted the ability to create new pages in an easy way. Not just simple pages, but also more complex ones in which we could reuse different layout elements. We thought that, with a proper implementation, we should be able to build nice landing pages just by reusing some patterns of the homepage.&lt;/p&gt;

&lt;p&gt;We knew this was going to be another requirement at some point (for building the &lt;a href="https://frontity.org/partner/10up/"&gt;10up partner page&lt;/a&gt; or similar ones, for example). And again, we didn't want anyone to have to depend on the dev team to do this.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#find-the-best-way-to-connect-gutenberg-and-frontity" class="anchor"&gt;
  &lt;/a&gt;
  Find the best way to connect Gutenberg and Frontity
&lt;/h4&gt;

&lt;p&gt;&lt;span&gt;Frontity aims to solve all the challenges that a headless setup may cause. For this reason, we want to ensure that Frontity's integration with the WordPress block editor is as smooth as possible. This was the perfect opportunity to understand it better, learn from our own experience, and work on solutions for any issue&lt;/span&gt; we might encounter.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#connecting-gutenberg-and-frontity" class="anchor"&gt;
  &lt;/a&gt;
  Connecting Gutenberg and Frontity
&lt;/h3&gt;

&lt;h1&gt;
  &lt;a href="#how-did-we-implement-it" class="anchor"&gt;
  &lt;/a&gt;
  How did we implement it?
&lt;/h1&gt;

&lt;p&gt;We based the implementation on 4 important aspects and reasons.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Adapting Frontity to Gutenberg&lt;/strong&gt;. This allowed us to use the block editor just as it is.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Block patterns&lt;/strong&gt;. This enabled us to reuse layout elements in different parts of the website easily.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Template parts&lt;/strong&gt;. This made it possible to edit common elements that are used in all pages (e.g. the header or footer).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;@frontity/html2react&lt;/strong&gt;. This allowed us to add React logic to any HTML element we wanted.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#1-adapting-frontity-to-gutenberg" class="anchor"&gt;
  &lt;/a&gt;
  1. Adapting Frontity to Gutenberg
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#11-how-gutenberg-works" class="anchor"&gt;
  &lt;/a&gt;
  1.1. How Gutenberg works?
&lt;/h3&gt;

&lt;p&gt;In order to find the best way to connect Frontity and Gutenberg, we had to understand first how Gutenberg works:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xVF6RUpN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://frontity.org/wp-content/uploads/2020/11/Gutenberg-flow-vertical.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xVF6RUpN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://frontity.org/wp-content/uploads/2020/11/Gutenberg-flow-vertical.png" alt="Gutenberg flow asset"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Add any block from the WordPress editor&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Just as they do in any WordPress site, users can create their desired layout using the block editor. They first select the blocks they are going to use, and then define their specific properties. There are Gutenberg blocks for almost everything, and each block has different properties. For example, the paragraph block has a property to change the text colour, and in the image block you'll find properties to change the image's size or alignment. Similarly with the video block, which has different properties to change the controls or activate the autoplay functionality.&lt;/p&gt;

&lt;p&gt;In our case, we didn't find anything that we couldn't already do with the built-in Gutenberg blocks. This means that we didn't have to create any custom blocks for our website, which made the implementation much easier.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Gutenberg outputs the HTML adding some classes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Once the user saves a post, Gutenberg outputs the HTML and adds different classes to match each block's properties defined by the user. It doesn't output the block attributes but valid HTML.&lt;/p&gt;

&lt;p&gt;This is important because, in the end, both Gutenberg and React are basically just HTML. In other words, we don't have to link each block with React. The Gutenberg HTML, with the classes it adds, is available in the REST API and is fetched by Frontity automatically. This allows Frontity to work with it in the same way it works with any common post. It doesn't require any further integration. We just have to add React logic to the HTML elements we want.&lt;/p&gt;

&lt;p&gt;This is an example of the image block, aligned to the right:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;figure class="wp-block-image alignright size-large"&amp;gt;
  &amp;lt;img
    src="..."
    class="wp-image-6616"
    alt="AWSM F1 Frontity Theme screenshot"
    ...
  /&amp;gt;
&amp;lt;/figure&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Gutenberg adds two css files to match that classes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In order to match the layout defined in the editor, Gutenberg creates two css files which add the logic to style the post. Since Frontity is already getting the HTML from the REST API, this is great because we just have to add these files in our Frontity theme to match the classes output in the HTML. From there, Gutenberg is already supported, and we simply have to add React logic to the HTML elements we want.&lt;/p&gt;

&lt;p&gt;This would be the css that matches the previous example:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.wp-block-image .alignright {
  float: right;
  margin-left: 1em;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;There are two exceptions that are not included in these files: colour palette and font sizes.&lt;/p&gt;

&lt;p&gt;In Gutenberg, you can define a &lt;a href="https://developer.wordpress.org/block-editor/developers/themes/theme-support/#block-color-palettes"&gt;theme palette&lt;/a&gt; (a set of colours) in order to select your own colours in the block editor. Gutenberg will create the new class &lt;code&gt;has-$slug-color&lt;/code&gt; but this won't be included in the theme.css and style.css. So we have to make it match from within Frontity. We can add our own colours by adding this simple snippet to WordPress:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;add_action( 'after_setup_theme', 'prefix_register_colors' );
function prefix_register_colors() {
    add_theme_support(
        'editor-color-palette', array(
            /* Frontity colors */
            array(
                'name'  =&amp;gt; esc_html__( 'Frontity', 'nude' ),
                'slug' =&amp;gt; 'frontity',
                'color' =&amp;gt; '#1f38c5',
            ),
            array(
                'name'  =&amp;gt; esc_html__( 'Primary', 'nude' ),
                'slug' =&amp;gt; 'primary',
                'color' =&amp;gt; '#0f1c64',
            ),
        )
    );
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The same happens with the different &lt;a href="https://developer.wordpress.org/block-editor/developers/themes/theme-support/#block-font-sizes"&gt;font sizes&lt;/a&gt;. You can define your own set of font sizes to replace the default ones, and Gutenberg will add the class &lt;code&gt;has-$slug-font-size&lt;/code&gt; with this simple snippet:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;add_theme_support( 'editor-font-sizes', array(
    array(
        'name'      =&amp;gt; __( 'Large', 'nude' ),
        'shortName' =&amp;gt; __( 'L', 'nude' ),
        'size'      =&amp;gt; 20,
        'slug'      =&amp;gt; 'large'
    ),
    array(
        'name'      =&amp;gt; __( 'Medium', 'nude' ),
        'shortName' =&amp;gt; __( 'M', 'nude' ),
        'size'      =&amp;gt; 16,
        'slug'      =&amp;gt; 'medium'
    ),
    array(
        'name'      =&amp;gt; __( 'Small', 'nude' ),
        'shortName' =&amp;gt; __( 'S', 'nude' ),
        'size'      =&amp;gt; 14,
        'slug'      =&amp;gt; 'small'
    )
) );
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Imagine we have a paragraph, then we change the font size to &lt;em&gt;medium&lt;/em&gt; and we select the &lt;em&gt;frontity&lt;/em&gt; color, previously included in our theme palette. Gutenberg will output something like this:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;p class="has-medium-font-size has-frontity-color has-text-color&amp;gt;
  My formatted paragraph
&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#12-how-to-adapt-frontity-to-this-workflow" class="anchor"&gt;
  &lt;/a&gt;
  1.2. How to adapt Frontity to this workflow
&lt;/h3&gt;

&lt;p&gt;Knowing this, in order to integrate Gutenberg in your Frontity project you just have to add the styling logic which is lacking, as the HTML output by Gutenberg will be available in the REST API.&lt;/p&gt;

&lt;p&gt;This is how we did it. First, we added the content of the theme.css and the style.css files that Gutenberg creates. The content of both files is available in the &lt;a href="https://plugins.trac.wordpress.org/browser/gutenberg/tags/9.2.1/build/block-library"&gt;SVN repository&lt;/a&gt;, and you can select any version of Gutenberg you are using. Once we had this logic, we created these two css files in &lt;a href="https://github.com/frontity/frontity.org/tree/dev/packages/frontity-org-theme/src/components/styles/gutenberg"&gt;our Frontity theme&lt;/a&gt;, and we imported them into the &lt;a href="https://github.com/frontity/frontity.org/blob/dev/packages/frontity-org-theme/src/components/index.tsx"&gt;index.js file&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { connect, css, Global, Head, styled } from "frontity";
...
import gutenbergStyle from "./styles/gutenberg/style.css";
import gutenbergTheme from "./styles/gutenberg/theme.css";

const Theme = ({ state }) =&amp;gt; {
  const data = state.source.get(state.router.link);

  return (
    &amp;lt;&amp;gt;
      &amp;lt;Global styles={css(gutenbergStyle)} /&amp;gt;
      &amp;lt;Global styles={css(gutenbergTheme)} /&amp;gt;
      ...
    &amp;lt;/&amp;gt;
  );
};

export default connect(Theme);
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;After doing this, everything added from Gutenberg was supported except the colours and the font-sizes. As previously mentioned, we had defined our own colour palette and font-sizes.&lt;/p&gt;

&lt;p&gt;In order to match the different colours we had created, the first step we took was to add them to Frontity state as well. To do so, we added them to &lt;code&gt;state.theme.colors&lt;/code&gt; in the &lt;a href="https://github.com/frontity/frontity.org/blob/dev/packages/frontity-org-theme/src/state/index.ts#L5-L17"&gt;index.ts file&lt;/a&gt; of our theme. Now they were accessible from any part of our Frontity project. Apart from this, we created two processors (&lt;a href="#html2react-processors"&gt;explained later&lt;/a&gt;): one for the &lt;a href="https://github.com/frontity/frontity.org/blob/dev/packages/frontity-org-theme/src/processors/text-color.tsx"&gt;text-color&lt;/a&gt;, and other for the &lt;a href="https://github.com/frontity/frontity.org/blob/dev/packages/frontity-org-theme/src/processors/background-color.tsx"&gt;background-color&lt;/a&gt; that extracts the colour which is used and, looking into &lt;code&gt;state.theme.colors&lt;/code&gt;, adds the css needed for this.&lt;/p&gt;

&lt;p&gt;Moreover, we created a new util named &lt;a href="https://github.com/frontity/frontity.org/blob/dev/packages/frontity-org-theme/src/utils/index.ts#L3-L16"&gt;addAlpha&lt;/a&gt; (used in these processors) to add opacity to these colours if a specific class is matched. This isn't supported by Gutenberg yet, so we decided to implement it ourselves.&lt;/p&gt;

&lt;p&gt;On the other hand, to match the font-sizes, we added the css we wanted for the specific classes. We did it using a &lt;a href="https://github.com/frontity/frontity.org/blob/dev/packages/frontity-org-theme/src/processors/paragraph.ts#L26-L36"&gt;processor&lt;/a&gt;, but this can be done directly in the css files:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.has-small-font-size {
    font-size: 14px;
    line-height: 20px;
}

.has-medium-font-size {
    font-size: 16px;
    line-height: 24px;
}

.has-small-font-size {
    font-size: 20px;
    line-height: 32px;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;And that's it. Now that we had connected Gutenberg and Frontity, we just needed to add the React logic to the HTML elements we wanted.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-block-patterns" class="anchor"&gt;
  &lt;/a&gt;
  2. Block patterns
&lt;/h2&gt;

&lt;p&gt;From the Gutenberg side, we realised that we were using the same layouts in different parts of the website. We wanted to be able to reuse them in an easy way, not only for the existing pages but also for future ones. After some research, we decided to use &lt;a href="https://developer.wordpress.org/block-editor/developers/block-api/block-patterns/"&gt;Block Patterns&lt;/a&gt; for this purpose.&lt;/p&gt;

&lt;p&gt;Block patterns are basically a group of Gutenberg blocks that have been combined together to create a page layout. Once you have created a block pattern, it can be reused throughout your website. That is, you can combine different blocks with different properties, create a pattern and placed it anywhere you like. Then you will only have to change the content within it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MZP2Ue3U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://frontity.org/wp-content/uploads/2020/11/Block-patterns.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MZP2Ue3U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://frontity.org/wp-content/uploads/2020/11/Block-patterns.png" alt="Block Patterns asset"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A good example of a block pattern can be found in the &lt;a href="https://frontity.org/#why-frontity"&gt;"Why Frontity?"&lt;/a&gt; section. As you can see, all the feature items follow the same pattern: they have an icon with a squared background, a heading 4, and a paragraph with medium font size. Instead of building each item from scratch, we created a block pattern with the required properties and reused it to list each of the different features.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#21-how-to-create-block-patterns" class="anchor"&gt;
  &lt;/a&gt;
  2.1. How to create block patterns
&lt;/h3&gt;

&lt;p&gt;Here's the code that you can include in your &lt;code&gt;functions.php&lt;/code&gt; or in a Code Snippet. However, for a more detailed explanation, please check the &lt;a href="https://developer.wordpress.org/block-editor/developers/block-api/block-patterns/"&gt;Block Patterns documentation&lt;/a&gt;.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;?php

register_block_pattern(
   'pattern-slug',
   array(
       'title'   =&amp;gt; __( 'Pattern name' ),
       'content' =&amp;gt; '...Gutenberg HTML...',
   )
);
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;After adding this simple function, the patterns that you've created will appear in the Gutenberg editor. In order to create the HTML, what we did first was to create the patterns using the visual editor. Then we changed the properties that we needed. Once we had considered them finished, we switched from the visual to the code editor and copied and pasted the HTML. Doing things this way made everything much easier.&lt;/p&gt;

&lt;p&gt;For this you don't have to do anything in your Frontity project. This only affects the Gutenberg editing experience.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#22-how-to-use-them" class="anchor"&gt;
  &lt;/a&gt;
  2.2. How to use them
&lt;/h3&gt;

&lt;p&gt;Once we had created the patterns, it was really easy to use them in the Gutenberg editor. On the same button that you use to add blocks there's a new tab named Patterns where you can find the ones that were previously defined.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IqlNsTeY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://frontity.org/wp-content/uploads/2020/11/Add-block-patterns-1024x810.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IqlNsTeY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://frontity.org/wp-content/uploads/2020/11/Add-block-patterns-1024x810.png" alt="How to add block patterns asset"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-template-parts" class="anchor"&gt;
  &lt;/a&gt;
  3. Template parts
&lt;/h2&gt;

&lt;p&gt;The Gutenberg plugin in its experimental version creates a new Custom Post type named &lt;a href="https://developer.wordpress.org/block-editor/tutorials/block-based-themes/#what-is-needed-to-create-a-block-based-theme"&gt;Template Parts&lt;/a&gt;, which is an important part of &lt;a href="https://developer.wordpress.org/block-editor/tutorials/block-based-themes/"&gt;block-based themes&lt;/a&gt;. We decided to use it for the common elements on every page, such as the footer or the header.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VkEiBSZe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://frontity.org/wp-content/uploads/2020/11/Template-parts.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VkEiBSZe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://frontity.org/wp-content/uploads/2020/11/Template-parts.png" alt="Template parts asset"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As they are a CPT, we can edit them just as we do with any other post or page, and WordPress then outputs the content in the REST API. For example, if we create a Template Part for the footer using WordPress, we can fetch the content in this endpoint: &lt;a href="https://frontity.org/wp-json/wp/v2/template-parts?slug=footer"&gt;https://frontity.org/wp-json/wp/v2/template-parts?slug=footer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After creating all the template parts that we needed, the next step was to fetch them in our Frontity app and make sure they were available for every page. In order to achieve this, we had to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; &lt;a href="https://github.com/frontity/frontity.org/blob/dev/frontity.settings.js#L26-L35"&gt;Include the Template Parts CPT&lt;/a&gt; in the &lt;code&gt;frontity.settings.js&lt;/code&gt; file. As we're including &lt;code&gt;/blog/&lt;/code&gt; for the post permalinks, we had to add that as well.&lt;/li&gt;
&lt;li&gt; &lt;a href="https://github.com/frontity/frontity.org/blob/dev/packages/frontity-org-theme/src/state/index.ts#L20-L26"&gt;Create an array&lt;/a&gt; in the &lt;code&gt;index.js&lt;/code&gt; file of our theme to define all the template parts that we wanted to fetch.&lt;/li&gt;
&lt;li&gt; &lt;a href="https://github.com/frontity/frontity.org/blob/dev/packages/frontity-org-theme/src/actions.ts#L5-L9"&gt;Create a Frontity action&lt;/a&gt; to fetch all these template parts &lt;a href="https://docs.frontity.org/learning-frontity/actions#beforessr-server-only-__"&gt;Before Server Side Rendering&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;At this point, our Frontity state already had the content of all the template parts. Now we just had to create the React components that would consume this content. For example, we created &lt;a href="https://github.com/frontity/frontity.org/blob/dev/packages/frontity-org-theme/src/components/footer.tsx"&gt;the &lt;code&gt;&amp;lt;Footer /&amp;gt;&lt;/code&gt; component&lt;/a&gt; for the footer template part.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-frontityhtml2react" class="anchor"&gt;
  &lt;/a&gt;
  4. @frontity/html2react
&lt;/h2&gt;

&lt;p&gt;Finally, in order to add React logic to just the HTML elements where we wanted to create a more complex interface, we used the &lt;a href="https://docs.frontity.org/api-reference-1/frontity-html2react"&gt;&lt;code&gt;@frontity/html2react&lt;/code&gt; package&lt;/a&gt;. This package not only parses all the HTML content, but also allows you to hook into any HTML element that you want to extend or modify.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I0bvWUiD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://frontity.org/wp-content/uploads/2020/11/html2react-vertical.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I0bvWUiD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://frontity.org/wp-content/uploads/2020/11/html2react-vertical.png" alt="html2react asset"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It does this based on two important aspects: &lt;strong&gt;nodes&lt;/strong&gt; and &lt;strong&gt;processors&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#41-html2react-nodes" class="anchor"&gt;
  &lt;/a&gt;
  4.1. html2react nodes
&lt;/h3&gt;

&lt;p&gt;Nodes are the JavaScript objects the package returns once you have hooked into an HTML element with all the information about it. Let's imagine we have this small piece of HTML and we hook into it:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="wp-block-group jsforwp"&amp;gt;
   &amp;lt;h4&amp;gt;Heading&amp;lt;/h4&amp;gt;
   &amp;lt;p&amp;gt;Paragraph&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;What we are going to get in our React app is this object:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
 "type": "element",
 "component": "div",
 "props": { "className": "wp-block-group jsforwp" },
 "children": [ 
   { heading-object },
   { paragraph-object }
 ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;As you can see, all the information about the HTML element is still available. We have the HTML tag and all its attributes, so we can do whatever we want. We even have the children object and, although it's not included here because it's a simple example, we could find the properties of the parent attribute as well.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#42-html2react-processors" class="anchor"&gt;
  &lt;/a&gt;
  4.2. html2react processors
&lt;/h3&gt;

&lt;p&gt;Processors are the place where you specify which HTML element you want to hook into, and how you want to modify it. For a deeper explanation, please take a look at &lt;a href="https://docs.frontity.org/api-reference-1/frontity-html2react#create-your-own-processors"&gt;our docs&lt;/a&gt;. Below is a very quick summary:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;name&lt;/strong&gt;: just the name of the processor.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;priority&lt;/strong&gt;: this allows you to select which processors should run before the others.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;test&lt;/strong&gt;: this is the function to select which HTML elements you want to hook into. It's basically an &lt;em&gt;if&lt;/em&gt; statement. If &lt;code&gt;test&lt;/code&gt; is true, then the processor runs.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;processor&lt;/strong&gt;: this is the function where you apply any modification you want. Here you can change the styles, add new children, or change it into a full React component for example.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here's a quick example based on the previous case. Here we are telling our app: if you find an element with the class "jsforwp", then run the processor. And in the processor function we are making some changes.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const jsforwp = {
 name: "jsforwp",
 priority: 10,
 test: ({ node }) =&amp;gt;
   node.type === "element" &amp;amp;&amp;amp;
   node.props?.className?.split(" ").includes("jsforwp"),
 processor: ({ node }) =&amp;gt; {
   //Change styles
   node.props.css = css`background: blue;`;

   //Add a new children
   node.children.unshift(Logo);

   //Substitute it for a React Component
   node.component = NewJSforWP

   return node;
 },
};
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#43-use-cases" class="anchor"&gt;
  &lt;/a&gt;
  4.3. Use cases
&lt;/h3&gt;

&lt;p&gt;The above approaches allowed us to add React logic to any element in the content, which is pretty powerful. Let's take a look at some examples on our own website.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lazy load&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In order to improve the performance, we decided to lazy load the heavier elements like videos, iframes, or tweets. This way we don't load them until the user is close to reach them when scrolling. Instead of doing this with PHP, we did it with html2react. For example, we created a &lt;a href="https://github.com/frontity/frontity.org/blob/dev/packages/frontity-org-theme/src/processors/lazy-video.ts"&gt;processor&lt;/a&gt; that hooks onto any video element, and swaps it for a React component that uses a Frontity hook to lazy load it.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Element,Processor } from "@frontity/html2react/types";

import LazyVideo from "../components/lazy-video";

export const lazyVideo: Processor&amp;lt;Element&amp;gt; = {
  name: "lazy-video",
  test: ({ node }) =&amp;gt; node.type === "element" &amp;amp;&amp;amp; node.component === "video",
  processor: ({ node }) =&amp;gt; {
    node.component = LazyVideo;

    return node;
  },
};
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;You can see above that we are importing the &lt;code&gt;&amp;lt;LazyVideo /&amp;gt;&lt;/code&gt; component. This is basically the same HTML we received but using the &lt;a href="https://docs.frontity.org/api-reference-1/frontity-hooks#hooks"&gt;&lt;code&gt;useInView&lt;/code&gt; hook&lt;/a&gt;, where we are not loading the video until we are 600px above it:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import useInView from "@frontity/hooks/use-in-view";
import React from "react";

const LazyVideo = ({ children, ...props }) =&amp;gt; {
  const { ref, inView } = useInView({
    rootMargin: "600px",
    triggerOnce: true,
  });

  return (
    &amp;lt;&amp;gt;
      &amp;lt;video ref={ref} {...(inView &amp;amp;&amp;amp; props)}&amp;gt;
        {children}
      &amp;lt;/video&amp;gt;
    &amp;lt;/&amp;gt;
  );
};

export default LazyVideo;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Web browser layout&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We decided to add a top bar to some elements of the website to make it look as if the element is inside a web browser window. This was useful for images or iframes for example, and prevented us from having to create it for every element.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--60F_4ixk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://frontity.org/wp-content/uploads/2020/11/Web-browser-iframe--1024x386.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--60F_4ixk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://frontity.org/wp-content/uploads/2020/11/Web-browser-iframe--1024x386.png" alt="Web browser iframe asset"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The top, grey bar and the three dots, which simulate the browser window, aren't added to the image or the iframe directly. Instead, we added this HTML with React by creating &lt;a href="https://github.com/frontity/frontity.org/blob/dev/packages/frontity-org-theme/src/processors/web-browser.tsx"&gt;this processor&lt;/a&gt;:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import TopBar from "../components/window-top-bar";

export const webBrowser = {
  name: "web-browser",
  test: ({ node }) =&amp;gt;
    node.type === "element" &amp;amp;&amp;amp;
    node.props?.className?.split(" ").includes("has-browser-window"),

  processor: ({ node }) =&amp;gt; {
    const topFrame: Element = {
      type: "element",
      component: TopBar,
      props: {},
      // we need to pass empty props, because other processors might
      // expect `.props` to exist
    };

    node.children.unshift(topFrame);

    ...

    return node;
  },
};
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;As you can see, we added the component &lt;code&gt;&amp;lt;TopBar /&amp;gt;&lt;/code&gt; to the children array. And if you take a look at &lt;a href="https://github.com/frontity/frontity.org/blob/dev/packages/frontity-org-theme/src/components/window-top-bar.tsx"&gt;the component&lt;/a&gt;, you also will see that we just added the HTML for the bar and the dots with some styles:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { css, styled } from "frontity";
import React from "react";

const Dot = styled.span`
  display: inline-block;
  width: 9px;
  height: 9px;
  margin-left: 5px;
  border-radius: 100%;
  background-color: rgba(15, 28, 100, 0.2);
  vertical-align: baseline;
  margin-top: 12px;
`;

const WindowTopBar = () =&amp;gt; (
  &amp;lt;div
    css={css`
      height: 32px;
      padding-left: 10px;
    `}
  &amp;gt;
    &amp;lt;Dot /&amp;gt;
    &amp;lt;Dot /&amp;gt;
    &amp;lt;Dot /&amp;gt;
  &amp;lt;/div&amp;gt;
);

export default WindowTopBar;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Now we have the possibility to add this window effect to any element by adding the class &lt;code&gt;has-browser-window&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We are following a similar approach for the buttons and links on our website. Apart from reusing them in different sections, we wanted to display the Frontity monogram logo before the text.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4_TsDF5X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://frontity.org/wp-content/uploads/2020/11/Frontity-buttons-and-links.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4_TsDF5X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://frontity.org/wp-content/uploads/2020/11/Frontity-buttons-and-links.png" alt="Frontity buttons and links asset"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since we didn't want to have to add it manually to each button and link from within Gutenberg, we instead created a processor to deal with this. &lt;a href="https://github.com/frontity/frontity.org/blob/dev/packages/frontity-org-theme/src/processors/links-buttons.tsx"&gt;This processor&lt;/a&gt; adds the Frontity monogram by default unless we add another icon from Gutenberg or specify that we don't want an icon.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Terminal&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is another example (more complex than the previous ones) of how we used use JavaScript with Gutenberg. If you take a look at the different code blocks that we have, they all look similar.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RsjuAfap--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://frontity.org/wp-content/uploads/2020/11/Styled-components-example.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RsjuAfap--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://frontity.org/wp-content/uploads/2020/11/Styled-components-example.png" alt="Styled components example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Apart from adding the layout in a similar way to the previous example, we're using a JavaScript library named &lt;a href="https://prismjs.com/"&gt;Prism&lt;/a&gt; for the syntax highlighting. Rather than defining the colors for each piece of code from Gutenberg, it's Prism.js which takes care of this and makes sure they look similar. It works with any code block.&lt;/p&gt;

&lt;p&gt;And you can go even further. For example, we're using another React library, &lt;a href="https://www.npmjs.com/package/react-typist"&gt;react-typist&lt;/a&gt;, to load the terminal letter by letter in the homepage's hero. While the commands are editable from WordPress, the effect is made with React (with one of the multiple npm packages that are available).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Newsletter&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is the last example and probably the most complex one of our website. At the bottom of each page, we included a form to subscribe to the &lt;a href="https://frontity.org/#newsletter"&gt;Frontity newsletter&lt;/a&gt;. We also did this with React rather than PHP.&lt;/p&gt;

&lt;p&gt;If you fill out the first form (the email address field), a second form will be loaded and then the "Thank you" message. This is connected with our Google Tag Manager account and the email services. Although the form's content is editable from WordPress, the logic to manage all this was, again, made with React.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusions" class="anchor"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h3&gt;

&lt;h1&gt;
  &lt;a href="#what-went-well" class="anchor"&gt;
  &lt;/a&gt;
  What went well
&lt;/h1&gt;

&lt;p&gt;In general, we were able to achieve most of our goals. Knowing that the main purpose was to explain Frontity better, we considered it a success and are happy with the end result. In addition, the design implementation was great. Here are some of our conclusions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;✔️&lt;/strong&gt; &lt;strong&gt;Gutenberg features were really helpful&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Although we had already worked with Gutenberg, there were many different use cases to address in this migration and we were somewhat concerned about it. However, some of Gutenberg's latest features, such as the Block Patterns or the Template Parts, were really helpful in connecting Gutenberg with Frontity and facilitated much of the process.&lt;/p&gt;

&lt;p&gt;✔️ &lt;strong&gt;We managed to make everything editable from WordPress&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We can now edit everything from the WordPress editor. Even the command lines, the header or the footer (which in many websites are hardcoded) are editable in our case. This is great because it allows us to leverage the great editing experience and all the benefits of Gutenberg while using Frontity.&lt;/p&gt;

&lt;p&gt;✔️ &lt;strong&gt;Creating new pages is easy&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is related to the previous point too. Creating new landing pages from scratch, or reusing the block patterns and styles that were already created for the homepage, is pretty easy now. In addition, we don't have to rely on the development team to make these changes. A couple of great examples are the &lt;a href="https://frontity.org/about-us/"&gt;About Us&lt;/a&gt; page and the &lt;a href="https://frontity.org/partner/10up/"&gt;10up Partner&lt;/a&gt; page, both of which we built afterwards without coding anything.&lt;/p&gt;

&lt;p&gt;Here's a quick demo of how we created a new page from scratch:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.youtube.com/watch?v=5EIqBfD_LTY"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BsnGX024--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://img.youtube.com/vi/5EIqBfD_LTY/0.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;✔️ &lt;strong&gt;There was nothing that we couldn't do&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In Frontity PRO, our previous product for big publishers, we had already tested this approach and the &lt;code&gt;@frontity/html2react&lt;/code&gt; package worked great. But there were a lot of new, different use cases this time that hadn't been developed before. The good news is that, after creating many diverse processors, we were able to do everything with the built-in Gutenberg blocks and html2react. There are still things to improve and there might be use cases that we didn't cover for sure, but the experience has been great so far.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lessons-learnt-and-next-steps" class="anchor"&gt;
  &lt;/a&gt;
  Lessons learnt and next steps
&lt;/h1&gt;

&lt;p&gt;1. In some parts, we struggled to deal with the CSS that Gutenberg adds as well as to overwrite its styles. One of the things that might be causing this problem is that we add all the css directly to our Frontity app. We would like to work on a Frontity - Gutenberg package that deals with the CSS and solves this. This would allow you to select the Gutenberg plugin version styles that you want to import and add the css used in each page. There's an open conversation about this in this &lt;a href="https://community.frontity.org/t/gutenberg-css/480"&gt;Feature Discussion&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;2. We decided to use html2react processors for too many things. In the end, using them for every single Gutenberg block that we wanted to modify doesn't seem right. Writing processors for adding styles to HTML classes feels strange, like an extra step between CSS and HTML. If we start a similar process again, we would consider if some of these processors could be moved to global css.  &lt;/p&gt;

&lt;p&gt;Apart from this, it would be great to have some generic processors for basic tasks, like adding styles. Also for improving the Html2React API by adding a better way to select elements and modify them. We might want to add higher abstractions for common uses cases:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;CSS-only processors&lt;/strong&gt;: if we feel that adding css with the processors is the proper approach, it would be useful to have a nicer API while keeping everything hackable. We are already talking about this &lt;a href="https://community.frontity.org/t/better-class-name-tests-in-processors/966"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Transform parent-child HTML nodes into parent-child React components&lt;/strong&gt;: this would ease the way we add React logic to some elements. There's an ongoing conversation &lt;a href="https://community.frontity.org/t/gutenberg-frontity-integration/1467"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Reuse processors between different projects&lt;/strong&gt;: sometimes there are interesting processors that could be reused in different projects. For example, the way we are importing the Prism.js library for the code blocks, could be useful for other users. We are also discussing about the best way to share them &lt;a href="https://community.frontity.org/t/how-to-share-html2react-processors/3069"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;3. Gutenberg is still in an early stage and we had to code functionalities which might be solved by the block editor in the future. For example, the util we created for adding opacity to the colors it's something that could be added from Gutenberg.&lt;/p&gt;

&lt;p&gt;4. Finally, we want Frontity to be updated with all the upcoming Gutenberg functionalities. Some of its latest features, such as the Block Patterns or the Template Parts, have already been very useful for us. We will keep track of the updates and continue exploring the best way to integrate them with Frontity.  &lt;/p&gt;

&lt;p&gt;Actually, we are currently researching the &lt;a href="https://developer.wordpress.org/block-editor/tutorials/block-based-themes/"&gt;block-based themes&lt;/a&gt; and the Full Site Editing experience the Gutenberg team is working on. We really like what they are achieving, and it would be really powerful to integrate Frontity with a block-based theme.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#closing-words" class="anchor"&gt;
  &lt;/a&gt;
  Closing words
&lt;/h2&gt;

&lt;p&gt;We hope this post gives you a better understanding of how we integrated Gutenberg and Frontity, and how they can work together. We do believe this is a powerful approach to leverage the power of the block editor as well as to combine the best of WordPress and React.&lt;/p&gt;

&lt;p&gt;In order to fully understand the &lt;code&gt;html2react&lt;/code&gt; package, we recommend you take look &lt;a href="https://docs.frontity.org/api-reference-1/frontity-html2react"&gt;at our docs&lt;/a&gt;. If you are curious to see frontity.org's code, here's the public &lt;a href="https://github.com/frontity/frontity.org"&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For any other questions you might have, hit us up on &lt;a href="https://twitter.com/frontity"&gt;Twitter&lt;/a&gt; or our &lt;a href="https://community.frontity.org/"&gt;community forum&lt;/a&gt;. We will be happy to help!&lt;/p&gt;




&lt;p&gt;&lt;em&gt;This post was originally published at &lt;a href="https://frontity.org/blog/connecting-gutenberg-and-frontity/"&gt;frontity.org/blog&lt;/a&gt; and written by Mario Santos.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>wordpress</category>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Beginner-friendly python project ideas (with implementation)</title>
      <author>Saloni Goyal</author>
      <pubDate>Fri, 27 Nov 2020 09:33:55 +0000</pubDate>
      <link>https://dev.to/blender/beginner-friendly-python-project-ideas-2j60</link>
      <guid>https://dev.to/blender/beginner-friendly-python-project-ideas-2j60</guid>
      <description>&lt;p&gt;👋 devs, &lt;/p&gt;

&lt;p&gt;I recently came across this &lt;a href="https://www.dataquest.io/blog/python-projects-for-beginners/"&gt;blog&lt;/a&gt; with some very good project ideas targeted at beginners. If you feel like a noob in python programming, you can try and build one of these projects. &lt;/p&gt;

&lt;p&gt;Some of the project ideas are - &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Fun Python projects for &lt;strong&gt;game dev&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rock, Paper, Scissors &lt;/li&gt;
&lt;li&gt;Guessing Game &lt;/li&gt;
&lt;li&gt;Hangman &lt;/li&gt;
&lt;li&gt;Snake&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Fun Python project ideas for &lt;strong&gt;building data skills&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Find out How Much Money You've Spent on Amazon&lt;/li&gt;
&lt;li&gt;Analyze Survey Data &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Fun Python projects for beginner &lt;strong&gt;web devs&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;URL shortener&lt;/li&gt;
&lt;li&gt;Build a Simple Web Page with Django &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Fun Python projects for aspiring &lt;strong&gt;app developers&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Password generator&lt;/li&gt;
&lt;li&gt;Use Tweepy to create a Twitter bot&lt;/li&gt;
&lt;li&gt;Create a Crypto App with Python&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All the code is included, just try to read through it and follow the explanations to understand the code. There will definitely be few new keywords which you have not seen before which you can look up and learn them on the go.&lt;/p&gt;

&lt;p&gt;Once you understand the code, try to implement it yourself on your machine. You can also add them to your GitHub account and show them here on dev.&lt;/p&gt;

&lt;p&gt;When you learn more things, you can re-visit these projects and improve them and/or add new features to them.&lt;/p&gt;

&lt;p&gt;Thanks for reading! Hope it is useful. &lt;/p&gt;

&lt;p&gt;P.S. I am not affiliated with Dataquest in any way. :)&lt;/p&gt;

</description>
      <category>python</category>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
