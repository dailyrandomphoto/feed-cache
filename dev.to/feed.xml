<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network. Open source and radically transparent.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>You Can Run Containers on AWS Amplify Now</title>
      <author>swyx</author>
      <pubDate>Fri, 11 Dec 2020 14:24:37 +0000</pubDate>
      <link>https://dev.to/swyx/you-can-run-containers-on-aws-amplify-now-23ka</link>
      <guid>https://dev.to/swyx/you-can-run-containers-on-aws-amplify-now-23ka</guid>
      <description>&lt;p&gt;The second week of &lt;a href="https://reinvent.awsevents.com/"&gt;AWS re:Invent&lt;/a&gt; brought a surprise major announcement from the AWS Amplify team: &lt;strong&gt;You can run Docker containers as AWS Amplify APIs now&lt;/strong&gt;!!!&lt;/p&gt;

&lt;p&gt;The main Achilles heel of migrating to serverless architectures is having to relearn and rewrite traditional serverful code. With &lt;a href="https://aws.amazon.com/blogs/mobile/zero-effort-container-deployment-for-graphql-and-rest-apis-and-web-hosting-with-amplify-cli/"&gt;the new Amplify Serverless Containers&lt;/a&gt;, it is now possible to deploy code in stateful Docker containers with the &lt;em&gt;exact same workflow&lt;/em&gt; as the rest of Amplify CLI.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# example of the new CLI workflow, see docs for details&lt;/span&gt;
&lt;span class="c"&gt;# Amplify CLI version 4.39+&lt;/span&gt;

&lt;span class="nv"&gt;$ &lt;/span&gt;amplify init &lt;span class="c"&gt;# if you're setting up new Amplify project&lt;/span&gt;

&lt;span class="nv"&gt;$ &lt;/span&gt;amplify configure project
 &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; Do you want to &lt;span class="nb"&gt;enable &lt;/span&gt;container-based deployments? Yes

&lt;span class="nv"&gt;$ &lt;/span&gt;amplify add api

Please &lt;span class="k"&gt;select &lt;/span&gt;from one of the below mentioned services: REST
? Which service would you like to use 
  API Gateway + Lambda 
‚ùØ API Gateway + AWS Fargate &lt;span class="o"&gt;(&lt;/span&gt;Container-based&lt;span class="o"&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;For the first time, this opens up the possibility of running &lt;strong&gt;Rails, Django, Laravel&lt;/strong&gt;, or any other traditionally serverful APIs &lt;em&gt;seamlessly&lt;/em&gt; alongside a serverless architecture. If it fits in a Docker container, you can run it! This thus unlocks the full capabilities of their respective ecosystems. &lt;/p&gt;

&lt;p&gt;Emphasis on &lt;em&gt;seamless&lt;/em&gt; integration: this means that frontend and mobile developers don't need to go to 9 months of cloud school (having to learn the details of VPC, subnets, NACLs, IAM policies, SSL generation, continuous deploy, cost optimization, etc) just in order to get a containerized API up and running on AWS.&lt;/p&gt;

&lt;p&gt;This, to me, is a big deal for a number of interrelated reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Long Running Code&lt;/strong&gt;: AWS Lambda functions are limited to 15 minutes. If I need to run longer tasks, like video conversion or batch processing, I would have to jump out of my existing workflow and use a completely different set of tools. Now, I can run Rails + &lt;a href="https://github.com/mperham/sidekiq"&gt;Sidekiq&lt;/a&gt; or &lt;a href="https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-xxii-background-jobs"&gt;Flask + Celery&lt;/a&gt; with just an industry standard &lt;code&gt;docker-compose.yml&lt;/code&gt;. Because Amplify's Serverless Containers feature uses AWS Fargate, we may in future have the option of vertically scaling system resources as needed, beyond the traditional &lt;a href="https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html"&gt;resource constraints&lt;/a&gt; of AWS Lambda.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Access Entire Ecosystems&lt;/strong&gt;: Libraries and frameworks that were written for serverful paradigms typically become useless when shifting to serverless/Jamstack architectures, requiring yet another learning curve and search for tools. Now you are free to mix and match them - anything that runs in a Docker container is fair game (and &lt;em&gt;everything&lt;/em&gt; runs in a Docker container!)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Incremental Migration&lt;/strong&gt;: This also means that it is no longer a heavy lift to move existing apps and codebases to a serverless/Jamstack architecture. As long as you can separate your UI layer from your API layer, you are now able to host your UI on &lt;a href="https://aws.amazon.com/blogs/aws/amplify-console-hosting-for-fullstack-serverless-web-apps/"&gt;Amplify Console&lt;/a&gt;, and your APIs as a REST or GraphQL service with API Gateway + AWS Fargate.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Easy Access to other &lt;a href="https://docs.amplify.aws/cli/start/workflows#amplify-category-add"&gt;Amplify categories&lt;/a&gt;&lt;/strong&gt;: because this plugs right into the Amplify API category workflow, this means that your code inside your containers get all the same benefits of Amplify APIs like easy authentication with Amazon Cognito and easy access to Amplify-managed resources like &lt;a href="https://docs.amplify.aws/cli/storage/overview"&gt;Storage&lt;/a&gt;, &lt;a href="https://docs.amplify.aws/cli/function"&gt;Functions&lt;/a&gt;, &lt;a href="https://docs.amplify.aws/cli/graphql-transformer/overview"&gt;GraphQL&lt;/a&gt; and more. Because networking is handled for you, you can &lt;em&gt;even talk to other containers&lt;/em&gt; - the default &lt;code&gt;docker-compose.yml&lt;/code&gt; example in the CLI shows how you can make an Express (JS) app interoperate with a Flask (Python) app!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, yeah. I think this is awesome - You can run basically anything on AWS Amplify now - meaning that you spend less time wrangling infrastructure and more time writing valuable features. Don't take my word for it, see &lt;a href="https://twitter.com/IamStan/status/1337088737243783174?s=20"&gt;Ant Stanley&lt;/a&gt; (organizer of Serverless Days and overall cloud expert):&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ceO-EJGM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1316347776071094272/hLHrZQc__normal.jpg" alt="Ant Stanley Partial Landscaping #BLM profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Ant Stanley Partial Landscaping #BLM
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="comment-mentioned-user" href="https://dev.to/iamstan"&gt;@iamstan&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P4t6ys1m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      This is awesome. Easiest way to run a stateful workload in the cloud. Got Wordpress, Django, Express, Joomla, Flask, Laravel etc ... this is the easiest and quickest way to get it running in a scalable way in the cloud. &lt;a href="https://t.co/vTjfKShQtd"&gt;twitter.com/renebrandel/st‚Ä¶&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      17:36 PM - 10 Dec 2020
    &lt;/div&gt;

      &lt;div class="ltag__twitter-tweet__quote"&gt;
        &lt;div class="ltag__twitter-tweet__quote__header"&gt;
          &lt;span class="ltag__twitter-tweet__quote__header__name"&gt;
            Rene Brandel
          &lt;/span&gt;
          @renebrandel
        &lt;/div&gt;
        ‚≠êÔ∏èNEW: @AWSAmplify now supports containers‚≠êÔ∏è

üëâ Deploy APIs &amp;amp; host web apps using @awscloud Fargate
üëâ Build &amp;amp; deploy pipeline out-of-the-box
üëâ Single &amp;amp; multi-container deployments (incl. networking)

Amazing work by @panchorodriguez @menyao &lt;a class="comment-mentioned-user" href="https://dev.to/undef_obj"&gt;@undef_obj&lt;/a&gt;
 

https://t.co/YBhqVkqnCS
      &lt;/div&gt;

    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1337088737243783174" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-reply-action.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1337088737243783174" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-retweet-action.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      2
      &lt;a href="https://twitter.com/intent/like?tweet_id=1337088737243783174" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-like-action.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
      10
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


</description>
      <category>aws</category>
    </item>
    <item>
      <title>How Java Has Advanced In The Past 6 Years (From Java 8 to Java 15)</title>
      <author>Wejdi</author>
      <pubDate>Fri, 11 Dec 2020 13:00:11 +0000</pubDate>
      <link>https://dev.to/wejdi_gh/how-java-has-advanced-in-the-past-6-years-from-java-8-to-java-15-4gj3</link>
      <guid>https://dev.to/wejdi_gh/how-java-has-advanced-in-the-past-6-years-from-java-8-to-java-15-4gj3</guid>
      <description>&lt;h1&gt;
  &lt;a href="#java-release-cycle" class="anchor"&gt;
  &lt;/a&gt;
  Java Release Cycle
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8rb5PGY6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ixge2lyra4pg9695apg8.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8rb5PGY6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ixge2lyra4pg9695apg8.PNG" alt="Java Release"&gt;&lt;/a&gt;&lt;br&gt;
Until version 8 , Java version release  was one every 3 years ,so there were few versions with many features.&lt;/p&gt;

&lt;p&gt;It was therefore complicated to deliver a new version of Java and complicated for developers to upgrade their applications due to the number of changes included.&lt;/p&gt;

&lt;p&gt;This pace no longer keeps up with the reality of the IT world where everything is going faster and faster! So Java architects decided to publish a version every 6 months (therefore a fixed schedule)&lt;/p&gt;

&lt;p&gt;In each version, all the ready features are incorporated, those that are not ready will be delivered in the next one (no more late version).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#java-8-most-important-features-with-examples" class="anchor"&gt;
  &lt;/a&gt;
  Java 8 most important Features with Examples
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m84mWFWl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/q5owx5pm8ihx15ftowfe.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m84mWFWl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/q5owx5pm8ihx15ftowfe.jpg" alt="java 8"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1) New Features in Java language&lt;/strong&gt;&lt;br&gt;
‚óè &lt;strong&gt;forEach() method&lt;/strong&gt;&lt;br&gt;
Java 8 has introduced forEach method in java.lang.Iterable interface so that while writing code we focus on business logic only.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tMDCOk6I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bkjtewsoc1esrs4tvne1.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tMDCOk6I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bkjtewsoc1esrs4tvne1.PNG" alt="foreach"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Lambda Expression&lt;/strong&gt;&lt;br&gt;
The biggest new feature of Java 8 is language level support for lambda expressions (Project Lambda).&lt;br&gt;
 Lambda Expressions syntax is (argument) -&amp;gt; (body).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YKY7uRll--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pnil6wy1puzm8hhhjg17.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YKY7uRll--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pnil6wy1puzm8hhhjg17.PNG" alt="lambada exemples"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Interface‚Äôs default and Static Methods&lt;/strong&gt;&lt;br&gt;
Prior to java 8, interface in java can only have abstract methods. All the methods of interfaces are public &amp;amp; abstract by default. Java 8 allows the interfaces to have default and static methods. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;-Default methods :&lt;/em&gt; The reason we have default methods in interfaces is to allow the developers to add new methods to the interfaces without affecting the classes that implements these interfaces.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xxh2xa4v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vnr8ilfar20f2ybj9nnh.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xxh2xa4v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vnr8ilfar20f2ybj9nnh.PNG" alt="default interface method"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;-Static methods :&lt;/em&gt; in interfaces are similar to the default methods except that we cannot override these methods in the classes that implements these interfaces.&lt;br&gt;
For example, there are many static methods on the new Stream interface. This makes ‚Äúhelper‚Äù methods easier to find since they can be located directly on the interface, instead of a different&lt;br&gt;
class such as StreamUtil or Streams.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BNYCrXG9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7e2843453cqpimh0dde6.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BNYCrXG9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7e2843453cqpimh0dde6.PNG" alt="static interface method"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Functional Interface&lt;/strong&gt;&lt;br&gt;
In Java 8 a functional interface is defined as an interface with exactly one abstract method. This even applies to interfaces that were created with previous versions of Java.&lt;br&gt;
Java 8 comes with several new functional interfaces in the package, java.util.function.&lt;br&gt;
 -Function - takes an object of type T and returns R.&lt;br&gt;
 -Supplier - just returns an object of type T.&lt;br&gt;
 -Predicate - returns a boolean value based on input of type T.&lt;br&gt;
 -Consumer - performs an action with given object of type T.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GWZtr59B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ek81rt1zsumtf1y5fg51.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GWZtr59B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ek81rt1zsumtf1y5fg51.PNG" alt="lambada exemples"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Method References&lt;/strong&gt;&lt;br&gt;
Method references are a special type of lambda expressions. They're often used to create simple lambda expressions by referencing existing methods.&lt;br&gt;
There are four kinds of method references:&lt;br&gt;
  -Static methods&lt;br&gt;
  -Instance methods of particular objects&lt;br&gt;
  -Instance methods of an arbitrary object of a particular type&lt;br&gt;
  -Constructor&lt;br&gt;
Exemple :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ucq9KeOY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/m68oku3tsecmy1fh3i75.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ucq9KeOY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/m68oku3tsecmy1fh3i75.PNG" alt="Reference methods"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) New Features in Java libraries&lt;/strong&gt;&lt;br&gt;
‚óè &lt;strong&gt;Stream API&lt;/strong&gt;&lt;br&gt;
The Stream interface is such a fundamental part of Java 8 .&lt;/p&gt;

&lt;p&gt;We can use Java Stream API to implement internal iteration, that is better because java framework is in control of the iteration.&lt;/p&gt;

&lt;p&gt;The Stream interface supports the map/filter/reduce pattern and executes lazily, forming the basis&lt;br&gt;
(along with lambdas) for functional-style programming in Java 8.&lt;/p&gt;

&lt;p&gt;There are also corresponding primitive streams (IntStream, DoubleStream, and LongStream) for performance reasons.&lt;/p&gt;

&lt;p&gt;With Java 8, Collection interface has two methods to generate a Stream :&lt;br&gt;
 -stream():Returns a sequential stream considering collection as its source.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_TsuiUTz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/08eppxbjnzf62vhxztq4.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_TsuiUTz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/08eppxbjnzf62vhxztq4.PNG" alt="stream"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;-parallelStream() : Returns a parallel Stream considering collection as its source.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lwH6ofYH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/i9afzmhbyfwjk5ku4o39.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lwH6ofYH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/i9afzmhbyfwjk5ku4o39.PNG" alt="parallelStream"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Optional&lt;/strong&gt;&lt;br&gt;
Java 8 comes with the Optional class in the java.util package for avoiding null return values (and thus NullPointerException).&lt;/p&gt;

&lt;p&gt;If a value is present, isPresent() will return true and get() will return the value. Stream terminal operations return Optional object. &lt;br&gt;
Some of these methods are:&lt;br&gt;
 -Optional reduce(BinaryOperator accumulator)&lt;br&gt;
 -Optional min(Comparator&amp;lt;? super T&amp;gt; comparator)&lt;br&gt;
 -Optional max(Comparator&amp;lt;? super T&amp;gt; comparator)&lt;br&gt;
 -Optional findFirst()&lt;br&gt;
 -Optional findAny()&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Date/Time API&lt;/strong&gt;&lt;br&gt;
With Java 8, a new Date-Time API is introduced to cover the following drawbacks of old date-time API:&lt;br&gt;
 -Not thread safe&lt;br&gt;
 -Poor design&lt;br&gt;
 -Difficult time zone handling &lt;/p&gt;

&lt;p&gt;Java 8 Date Time API consists of following packages:&lt;br&gt;
1.java.time Package: This is the base package of new Java Date Time API. such as LocalDate, LocalTime, LocalDateTime, Instant, Period, Duration etc. All of these classes are immutable and thread safe.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;java.time.chrono Package: This package defines generic APIs for non ISO calendar systems. We can extend AbstractChronology class to create our own calendar system.&lt;/li&gt;
&lt;li&gt;java.time.temporal Package: This package contains temporal objects and we can use it for find out specific date or time related to date/time object. For example, we can use these to find out the first or last day of the month. You can identify these methods easily because they always have format ‚ÄúwithXXX‚Äù.&lt;/li&gt;
&lt;li&gt;java.time.zone Package: This package contains classes for supporting different time zones and their rules.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#java-9-most-important-features-with-examples" class="anchor"&gt;
  &lt;/a&gt;
  Java 9 most important Features with Examples
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a0BRQeQV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vtqupju2h7sz78m9r9fl.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a0BRQeQV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vtqupju2h7sz78m9r9fl.jpg" alt="java9"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Java 9 included better support for multi-gigabyte heaps, better native code integration, a different default garbage collector (G1, for "shorter response times") and a self-tuning JVM.&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Java Platform Module System (Project Jigsaw)&lt;/strong&gt;&lt;br&gt;
It is a new kind of Java programing component that can be used to collect Java code (classes and packages). The main goal of this project is to easily scale down application to small devices. In Java 9, JDK itself has divided into set of modules to make it more lightweight. It also allows us to develop modular applications.&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;JShell: the interactive Java REPL&lt;/strong&gt;&lt;br&gt;
JShell is a REPL (Read Evaluate Print Loop) tool and run from the command line.&lt;br&gt;
It is an interactive Java Shell tool, it allows us to execute Java code from the shell and shows output immediately.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iTnbh9Rp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/y1ii6ukss5fn89qs2lwh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iTnbh9Rp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/y1ii6ukss5fn89qs2lwh.png" alt="Jshell"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Process API Improvements&lt;/strong&gt;&lt;br&gt;
Java has improved its process API in Java 9 version, they have added couple new classes and methods to ease the controlling and managing.&lt;br&gt;
Two new interfcase in Process API:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;java.lang.ProcessHandle&lt;/li&gt;
&lt;li&gt;java.lang.ProcessHandle.Info&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LyA4EAaB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/m3g4nfqky7gd8uund1kv.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LyA4EAaB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/m3g4nfqky7gd8uund1kv.PNG" alt="process"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Interface Private Methods&lt;/strong&gt;&lt;br&gt;
In Java 9, we can create private methods inside an interface. Interface allows us to declare private methods that help to share common code between non-abstract methods.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--59IF0kD2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ajt9ru8f3giai9vt5e6f.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--59IF0kD2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ajt9ru8f3giai9vt5e6f.PNG" alt="private methods"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Java Collection Factory Methods&lt;/strong&gt;&lt;br&gt;
Factory methods are special type of static methods that are used to create unmodifiable instances of collections. It means we can use these methods to create list, set and map of small number of elements.&lt;br&gt;
It is unmodifiable, so adding new element will throw java.lang.UnsupportedOperationException&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6AN6lH3y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fkecqmzel3hl03dt0p6w.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6AN6lH3y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fkecqmzel3hl03dt0p6w.PNG" alt="private methods"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Stream API Improvement&lt;/strong&gt;&lt;br&gt;
The Streams API is arguably one of the best improvements to the Java standard library in a long time.&lt;br&gt;
In Java 9, Stream API has improved and new 4 methods are added to the Stream interface :iterate(), dropWhile(), takeWhile(), ofNullable().&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5kQQ2pK2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/yqn475h0w14cseqkztxn.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5kQQ2pK2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/yqn475h0w14cseqkztxn.PNG" alt="stram improvement"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Reactive Streams&lt;/strong&gt;&lt;br&gt;
Java SE 9 Reactive Streams API is a Publish/Subscribe Framework to implement Asynchronous, Scalable and Parallel applications.&lt;br&gt;
Reactive Streams is about asynchronous processing of stream, so there should be a Publisher and a Subscriber. The Publisher publishes the stream of data and the Subscriber consumes the data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O5CA-72j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/y5a9vy6zgy0dcimzkhqd.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O5CA-72j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/y5a9vy6zgy0dcimzkhqd.PNG" alt="reactive stream"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;HTTP 2 Client&lt;/strong&gt;&lt;br&gt;
A new way of performing HTTP calls arrives with Java 9. This much overdue replacement for the old HttpURLConnection API also supports WebSockets and HTTP/2 protocol.&lt;br&gt;
 It supports both Synchronous (Blocking Mode) and Asynchronous Modes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lCM2O3p8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cry4pz2f7t4cw5g9cicj.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lCM2O3p8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cry4pz2f7t4cw5g9cicj.PNG" alt="HTTP2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;G1 Garbage Collector&lt;/strong&gt; &lt;br&gt;
The ‚ÄúGarbage-first‚Äù garbage collector, aka G1, is a concurrent multi-threaded GC. It mostly works alongside the application threads (much like the concurrent mark sweep GC) and is designed to offer shorter, more predictable pause times ‚Äì while still achieving high throughput.&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Other new Fectures&lt;/strong&gt; &lt;br&gt;
  -Stack-Walking API&lt;br&gt;
  -Filter Incoming Serialization Data&lt;br&gt;
  -Deprecate the Applet API&lt;br&gt;
  -Indify String Concatenation&lt;br&gt;
  -Enhanced Method Handles&lt;br&gt;
  -Java Platform Logging API and Service&lt;br&gt;
  -Compact Strings&lt;br&gt;
  -Parser API for Nashorn&lt;br&gt;
  -Javadoc Search&lt;br&gt;
  -HTML5 Javadoc&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#java-10-most-important-features-with-examples" class="anchor"&gt;
  &lt;/a&gt;
  Java 10 most important Features with Examples
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vJhRtYZh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/v5l3nqa2knbcurs0k3i9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJhRtYZh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/v5l3nqa2knbcurs0k3i9.png" alt="java10"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Java 10 is the fastest release of a java version in its 23-year history. Java has been criticized for its slow growth and evolution, but Java 10 just shattered that concept. &lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Local-Variable Type Inference&lt;/strong&gt; &lt;br&gt;
Local variable type inference is the biggest new feature in Java 10 for developers. &lt;br&gt;
Similar to Javascript, Kotlin, and Scala, now Java will also have a var keyword that allows you to declare a local variable without specifying its type.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--05yxDyE4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vwuidgs0dtfup44djuve.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--05yxDyE4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vwuidgs0dtfup44djuve.PNG" alt="var"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Time-Based Release Versioning&lt;/strong&gt; &lt;br&gt;
From JDK 10 release, Java has adopted a new schedule of a new release every six months. There is a lot of debate whether this is a practical approach or not, larger companies also appreciated the stability and the low rate of change of Java so far.&lt;/p&gt;

&lt;p&gt;Oracle has responded to these concerns and continues to&lt;br&gt;
offer long-term releases on a regular basis, but also at&lt;br&gt;
longer intervals. And after Java 8, it is Java 11, which will&lt;br&gt;
receive a long term support again. &lt;/p&gt;

&lt;p&gt;In fact, Java 9 and Java 10 support has just ended, since&lt;br&gt;
Java 11 is out.&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Application Class-Data Sharing&lt;/strong&gt; &lt;br&gt;
This feature extends the existing CDS feature for allowing application classesto be placed in the shared archive in order to improve startup and footprint.&lt;/p&gt;

&lt;p&gt;The general idea was that when the JVM first launched, anything loaded was serialized and stored in a file on disk that could be reloaded on future launches of the JVM.&lt;/p&gt;

&lt;p&gt;This meant that multiple instances of the JVM shared the class metadata so it wouldn‚Äôt have to load them all every time.&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Parallel Full GC for G1&lt;/strong&gt; &lt;br&gt;
G1 garbage collector was made default in JDK 9.However, the full GC for G1 used a single threaded mark sweepcompact algorithm.&lt;/p&gt;

&lt;p&gt;This has been changed to the parallel mark-sweep-compact algorithm&lt;br&gt;
in Java 10 effectively reducing the stop-the-world time during full GC.&lt;/p&gt;

&lt;p&gt;This change won‚Äôt help the best-case performance times of the&lt;br&gt;
garbage collector, but it does significantly reduce the worst-case&lt;br&gt;
latencies. &lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Garbage-Collector Interface&lt;/strong&gt;&lt;br&gt;
This is one more interesting and useful Java 10 feature which improves the code isolation of different garbage collectors by introducing a common Garbage Collector Interface.&lt;/p&gt;

&lt;p&gt;It will help in the future for adding new GC without changing existing codebase, also help in removing or housekeeping of the previous GC.&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Root Certificates&lt;/strong&gt;&lt;br&gt;
With Java 10, Oracle has open-sourced the root certificates in&lt;br&gt;
Oracle‚Äôs Java SE Root CA program in order to make OpenJDK&lt;br&gt;
builds more attractive to developers and to reduce the&lt;br&gt;
differences between those builds and Oracle JDK builds. &lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Thread-Local Handshakes&lt;/strong&gt;&lt;br&gt;
This is an internal JVM feature to improve performance.&lt;br&gt;
This feature provides a way to execute a callback on threads without performing a global VM safepoint. Make it both possible and cheap to stop individual threads and not just all threads or none.&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;API‚Äôs Added&lt;/strong&gt;&lt;br&gt;
-List, Map &amp;amp; Set Interfaces are added with a static copyOf(Collection) method. Its returns an unmodifiable List, Map or Set containing the entries provided. For a List, if the given List is subsequently modified, the returned List will not reflect such modifications.&lt;/p&gt;

&lt;p&gt;-Optional &amp;amp; its primitive variations get a method orElseThrow(). This is exactly same as get(), however the java doc states that it is a preferred alternative then get().&lt;/p&gt;

&lt;p&gt;-Collectors class gets various methods for collecting unmodifiable collections (Set, List, Map).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wx5LqoZ2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fxuvgxld30whuxngzikx.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wx5LqoZ2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fxuvgxld30whuxngzikx.PNG" alt="java10 added API"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#java-11-most-important-features-with-examples" class="anchor"&gt;
  &lt;/a&gt;
  Java 11 most important Features with Examples
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wA_o2lh9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/a050qvgs7mxaqkgnk1ke.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wA_o2lh9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/a050qvgs7mxaqkgnk1ke.png" alt="java11"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Java 11 is the second LTS release after Java 8. Since Java 11, Oracle JDK would no longer be free for commercial use.&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Running Java File&lt;/strong&gt;&lt;br&gt;
We can avoid the compilation phase. We can compile execute in one command. We use the java command. It will implicitly compile without saving the.class file. &lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Java String Methods&lt;/strong&gt;&lt;br&gt;
1) isBlank(): This method returns true if the string is empty or contains only white spaces code points.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DDLl15qF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zadb2rugxjfknimvfpxp.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DDLl15qF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zadb2rugxjfknimvfpxp.PNG" alt="isBlank"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2) lines() :  returns a reference for a stream of strings that are substrings we received after splitting by lines.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QFNw0VKa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dqx783h4vabzoj8rh1uo.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QFNw0VKa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dqx783h4vabzoj8rh1uo.PNG" alt="lines"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;3) strip(), stripLeading() and the stripTrailing : remove white spaces from the beginning, the ending and the remr of the string. Itis a 'Unicode-Aware' evolution of trim();&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--onvh-OwZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/aet1nuovc035j8lv8isb.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--onvh-OwZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/aet1nuovc035j8lv8isb.PNG" alt="strip"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4) repeat(): method repeats the string on which it is invoked the number of times it receives.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HF0XjE11--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/n289nynt5pocl6z8tmgy.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HF0XjE11--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/n289nynt5pocl6z8tmgy.PNG" alt="repeat"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Using var in Lambda Expressions&lt;/strong&gt;&lt;br&gt;
As of Java 11 we can use the var keyword within lambda expressions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jiKOtRqr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/c02pc0eui5hf21c5g69c.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jiKOtRqr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/c02pc0eui5hf21c5g69c.PNG" alt="lambda var"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When using var in a lambda expression we must use it on all parameters and we cannot mix it with using specific types.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1TpDOa7H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/eacab6dimdj0w90l9262.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1TpDOa7H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/eacab6dimdj0w90l9262.PNG" alt="lambda var error"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Nested Based Access Control&lt;/strong&gt;&lt;br&gt;
Before Java 11, Java allows classes and interfaces to be nested within each other. These nested types have unrestricted access to each other, including to private fields, methods, and constructors.&lt;/p&gt;

&lt;p&gt;As of Java 11, there are new methods in Class class that assist us with getting information about the created nest. These methods include the following: &lt;br&gt;
&lt;strong&gt;getNestHost()&lt;/strong&gt; : This returns the nest host of the nest to which this Class object belongs&lt;br&gt;
&lt;strong&gt;getNestMembers()&lt;/strong&gt; : This returns an array containing Class objects representing all the members of the nest to which this Class object belongs&lt;br&gt;
&lt;strong&gt;isNestemateOf()&lt;/strong&gt; : This determines if the given Class is a nestmate of this Class object&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HaJ2chHC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ix4hyxo9zqqa9lspn2vz.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HaJ2chHC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ix4hyxo9zqqa9lspn2vz.PNG" alt="nested1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--38bLkQAl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2h3fdm1tr67yxom3ueag.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--38bLkQAl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2h3fdm1tr67yxom3ueag.PNG" alt="nested2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Epsilon: A No-Op Garbage Collector&lt;/strong&gt;&lt;br&gt;
As of Java 11, the JVM has an experimental feature that allows us to run the JVM without any actual memory reclamation.&lt;/p&gt;

&lt;p&gt;The goal is to provide a completely passive garbage collector implementation with a bounded allocation limit and the lowest latency overhead possible.&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;ZGC Scalable Low Latency GC&lt;/strong&gt;&lt;br&gt;
As of Java 11, we can use the ZGC. This new GC is available as an experimental feature.&lt;br&gt;
ZGC is a scalable low latency garbage collector. It performs the expensive work concurrently without stopping the execution of application threads for more than 10ms. &lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;HTTP Client&lt;/strong&gt;&lt;br&gt;
As of Java 11, the HTTP Client API is more standardized. The new API supports both HTTP/1.1 and HTTP/2. The new API also supports HTML5 WebSockets. &lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Files Reading and Writing&lt;/strong&gt;&lt;br&gt;
Java 11 introduces two new methods that significantly assist with reading and writing strings from and to files : &lt;strong&gt;readString()&lt;/strong&gt;, &lt;strong&gt;writeString()&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---8ZQv3_8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4lg6psnlecbb7zl43863.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---8ZQv3_8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4lg6psnlecbb7zl43863.PNG" alt="write read file"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Flight Recorder&lt;/strong&gt;&lt;br&gt;
Flight Recorder which earlier used to be a commercial add-on in Oracle JDK is now open-sourced since Oracle JDK is itself not free anymore.&lt;/p&gt;

&lt;p&gt;JFR is a profiling tool used to gather diagnostics and profiling data from a running Java application.&lt;/p&gt;

&lt;p&gt;Its performance overhead is negligible and that‚Äôs usually below 1%. Hence it can be used in production applications.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#java-12-most-important-features-with-examples" class="anchor"&gt;
  &lt;/a&gt;
  Java 12 most important Features with Examples
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aOlCi7Ct--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/i4o37y7z0x06hstbnzif.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aOlCi7Ct--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/i4o37y7z0x06hstbnzif.jpg" alt="java12"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Java 12 was launched on March 19 2019 , which is a part of the six-month release cycle.&lt;br&gt;
It is a Non-LTS version. Hence it won‚Äôt have long term support.&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;JVM Changes&lt;/strong&gt;&lt;br&gt;
‚Äì Shenandoah A Low-Pause-Time Garbage Collector: Java 12 adds Shenandoah, an experimental garbage-collection algorithm, to reduce garbage-collection pause times by performing evacuation work concurrently with running of Java threads.&lt;/p&gt;

&lt;p&gt;-Prompt return of unused committed memory: G1 to automatically return Java heap memory to the operating system when idle. This memory is released in a reasonable period of time when there is very low application activity.&lt;/p&gt;

&lt;p&gt;-Abortable Mixed Collections for G1: Improvements in G1 efficiency include making G1 mixed collections abortable if they might exceed the defined pause target. This is done by splitting the mixed collection set into mandatory and optional.&lt;/p&gt;

&lt;p&gt;-Default CDS Archives: The end goal is to improve the JDK build process by generating a class data-sharing (CDS) archive. Among the goals for this feature are: &lt;br&gt;
1) Improve out-of-the-box startup time.&lt;br&gt;
2) Get rid of the need to run -Xshare: dump to benefit from the CDS.&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Switch Expressions&lt;/strong&gt;&lt;br&gt;
There are two main changes to switch in Java with this JEP:&lt;br&gt;
1) Introduction of case L -&amp;gt; syntax that removes the need for break statements, because only the statements next to -&amp;gt; is executed.&lt;br&gt;
2) switch can be an expression, so it can have a value, or it can return a value.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NKwAXg5k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vm93e579q93u5gawc8bb.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NKwAXg5k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vm93e579q93u5gawc8bb.PNG" alt="switch 12 "&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;File.mismatch method&lt;/strong&gt;&lt;br&gt;
Java 12 added the following method to compare two files:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--46MUFGal--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4v705r4h56opasd4lyfu.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--46MUFGal--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4v705r4h56opasd4lyfu.PNG" alt="file mismatch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This method returns the position of the first mismatch or -1L if there is no mismatch.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ypT9KXb6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5nrl3e4zgnmsac42gtuy.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ypT9KXb6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5nrl3e4zgnmsac42gtuy.PNG" alt="mismatch 1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5BK6u3l4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qlovtmmwclaltd8xyolu.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5BK6u3l4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qlovtmmwclaltd8xyolu.PNG" alt="mismatch result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Compact Number Formatting&lt;/strong&gt;&lt;br&gt;
Java 12 extends existing number formatting APIs to provide support for locale-sensitive compact number formatting.&lt;br&gt;
Now numbers like 1000 (for example) can be formatted as "1K" (short style) or "1 thousand" (long style).  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xw-JxvRb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lxyxsc4xcdacz4zjjo4x.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xw-JxvRb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lxyxsc4xcdacz4zjjo4x.PNG" alt="number formatter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Teeing Collectors&lt;/strong&gt;&lt;br&gt;
Teeing Collector is the new collector utility introduced in the Streams API.&lt;br&gt;
This collector has three arguments ‚Äì Two collectors and a Bi-function.&lt;br&gt;
All input values are passed to each collector and the result is available in the Bi-function.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qq83aDfF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2a59u9j7syqx23ijwf41.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qq83aDfF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2a59u9j7syqx23ijwf41.PNG" alt="teening collectors"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Java Strings New Methods&lt;/strong&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#1-javalangstring-" class="anchor"&gt;
  &lt;/a&gt;
  1) java.lang.String :
&lt;/h5&gt;

&lt;p&gt;-indent‚Äã(int n): Adjusts the indentation of each line of this string based on the value of n, and normalizes line termination characters.&lt;/p&gt;

&lt;p&gt;-If n &amp;gt; 0, then n spaces (U+0020) are inserted at the beginning of each line.&lt;br&gt;
 -If n &amp;lt; 0, then up to n white space characters are removed from the beginning of each line. If a given line does not contain sufficient white space then all leading white space characters are removed. The tab character is also treated as a single character.&lt;br&gt;
 -If n = 0, then the line remains unchanged. However, line terminators are still normalized&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0Z9TizYw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ifwc5bwm239bc7lfablu.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0Z9TizYw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ifwc5bwm239bc7lfablu.PNG" alt="sring indent"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;- R transform‚Äã(Function&amp;lt;? super String,‚Äã? extends R&amp;gt; f): This method allows the application of a function to this string.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ptMlxaX2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7g58ogj3qwc475x4rcfj.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ptMlxaX2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7g58ogj3qwc475x4rcfj.PNG" alt="sring transform"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#2-jvm-constants-api-" class="anchor"&gt;
  &lt;/a&gt;
  2) JVM Constants API :
&lt;/h5&gt;

&lt;p&gt;The Constants API methods don‚Äôt have much usage for normal development related tasks.&lt;/p&gt;

&lt;p&gt;-Optional describeConstable(): Returns an Optional containing the nominal descriptor for this instance, which is the instance itself.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QHhdIaZS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3edzvvdbulmryv3yalga.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QHhdIaZS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3edzvvdbulmryv3yalga.PNG" alt="DescribeConstable"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;-String resolveConstantDesc‚Äã(MethodHandles.Lookup lookup): Resolves this instance as a ConstantDesc, the result of which is the instance itself.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7eg0LXAA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/m6tz6gbtnt6bz9n7r9m0.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7eg0LXAA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/m6tz6gbtnt6bz9n7r9m0.PNG" alt="resolveConstantDesc"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;#Java 13 most important Features with Examples#&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F5NbRxCt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pyr9zxal2olw9zto769c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F5NbRxCt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pyr9zxal2olw9zto769c.png" alt="java13"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Java 13 was released for production use on 17th September 2019. There are not a lot of developer-specific features in Java 13 because of the 6-month release cycle.&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Switch Expressions&lt;/strong&gt;&lt;br&gt;
We initially saw switch expressions in JDK 12. Java 13's switch expressions build on the previous version by adding a new yield statement.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8rloCmJx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jqe3upy8cpx093gbjdja.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8rloCmJx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jqe3upy8cpx093gbjdja.PNG" alt="switch 13"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Text Blocks&lt;/strong&gt;&lt;br&gt;
Text blocks for multi-line Strings such as embedded JSON, XML, HTML, etc.It allows us to create multiline strings easily. The multiline string has to be written inside a pair of triple-double quotes.&lt;/p&gt;

&lt;p&gt;Earlier, to embed JSON in our code, we would declare it as a String literal:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gbjjY4bH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/npib8c06mk8ptsjaeekw.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gbjjY4bH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/npib8c06mk8ptsjaeekw.PNG" alt="json string"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, it‚Äôs useful in easily creating HTML and JSON strings in our Java program :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y8j8CVQD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/e4d9cwtnob2ta7ox3jzn.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y8j8CVQD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/e4d9cwtnob2ta7ox3jzn.PNG" alt="json html 13"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, java.lang.String now has three new methods to manipulate text blocks:&lt;br&gt;
1) formatted(Object‚Ä¶ args): it‚Äôs similar to the String format() method. It‚Äôs added to support formatting with the text blocks.&lt;/p&gt;

&lt;p&gt;2) stripIndent(): used to remove the incidental white space characters from the beginning and end of every line in the text block. This method is used by the text blocks and it preserves the relative indentation of the content.&lt;/p&gt;

&lt;p&gt;3) translateEscapes(): returns a string whose value is this string, with escape sequences translated as if in a string literal.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qgrvJt1Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1a9spp58z224ed9gk8lg.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qgrvJt1Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1a9spp58z224ed9gk8lg.PNG" alt="string 13"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ynFZVH9L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/un3viqud5q1v36zsznsy.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ynFZVH9L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/un3viqud5q1v36zsznsy.PNG" alt="output string 13"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Dynamic CDS Archive&lt;/strong&gt;&lt;br&gt;
Class data sharing (CDS) has been a prominent feature of Java HotSpot VM for a while now. It allows class metadata to be shared across different JVMs to reduce startup time and memory footprint.&lt;br&gt;
Now, the creation of CDS archive and using it is much easier.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m_uCsziQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fkmhagirwvv6qehfsvzy.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m_uCsziQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fkmhagirwvv6qehfsvzy.PNG" alt="dynamic cds"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;ZGC: Uncommit Unused Memory&lt;/strong&gt;&lt;br&gt;
The Z Garbage Collector was introduced in Java 11 as a low-latency garbage collection mechanism.It adds a short pause time before the heap memory cleanup. But, the unused memory was not being returned to the operating system.&lt;/p&gt;

&lt;p&gt;Starting with Java 13, the ZGC now returns uncommitted memory to the operating system by default.&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;FileSystems.newFileSystem() Method&lt;/strong&gt;&lt;br&gt;
Three new methods have been added to the FileSystems class to make it easier to use file system providers, which treats the contents of a file as a file system : &lt;br&gt;
-newFileSystem(Path)&lt;br&gt;
-newFileSystem(Path, Map)&lt;br&gt;
-newFileSystem(Path, Map, ClassLoader)&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;DOM and SAX Factories with Namespace Support&lt;/strong&gt;&lt;br&gt;
There are new methods to instantiate DOM and SAX factories with Namespace support:&lt;br&gt;
-newDefaultNSInstance()&lt;br&gt;
-newNSInstance()&lt;br&gt;
-newNSInstance(String factoryClassName, ClassLoader classLoader)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VJrQ9kTD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hxcst95ew27cxqddv8c8.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VJrQ9kTD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hxcst95ew27cxqddv8c8.PNG" alt="dom sax"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Miscellaneous Changes&lt;/strong&gt;&lt;br&gt;
 Java 13 has given us a few more notable changes:&lt;br&gt;
-java.time ‚Äì new official Japanese era name added&lt;br&gt;
-javax.crypto ‚Äì support for MS Cryptography Next Generation (CNG)&lt;br&gt;
-javax.security ‚Äì property jdk.sasl.disabledMechanisms added to disable SASL mechanisms&lt;br&gt;
-javax.xml.crypto ‚Äì new String constants introduced to represent Canonical XML 1.1 URIs&lt;br&gt;
-javax.xml.parsers ‚Äì new methods added to instantiate DOM and SAX factories with namespaces support&lt;br&gt;
-Unicode support upgraded to version 12.1&lt;br&gt;
-Support added for Kerberos principal name canonicalization and cross-realm referrals&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#java-14-most-important-features-with-examples" class="anchor"&gt;
  &lt;/a&gt;
  Java 14 most important Features with Examples
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S5Nj6L9p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bz5heu9oo66h0k0e04yr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S5Nj6L9p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bz5heu9oo66h0k0e04yr.png" alt="java 14"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Keeping up with the six-month cycle tradition, Java 14, another non-LTS version is scheduled to release on March 17, 2020.&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Switch Expressions&lt;/strong&gt;&lt;br&gt;
Switch Expressions after staying a preview feature in the last two releases ‚ÄìJava 12 and Java 13 have finally attained permanent status in Java 14.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h1fZmSZR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/apoow4x49kwaxtq99wb9.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h1fZmSZR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/apoow4x49kwaxtq99wb9.PNG" alt="switch 14"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Pattern Matching for instanceof&lt;/strong&gt;&lt;br&gt;
The old way to typecast a type to another type is:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DxOHp-qR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xbd7i5f9wk9mw4x7h75t.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DxOHp-qR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xbd7i5f9wk9mw4x7h75t.PNG" alt="instance old"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The new way is :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aJnatqEI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gx0hoss6tdcsr3brwh5j.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aJnatqEI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gx0hoss6tdcsr3brwh5j.PNG" alt="instance new"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the above code, the instance jd would be only assigned if obj is of type Journaldev. The scope of the variable is limited to the conditional block only.&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Helpful NullPointerExceptions&lt;/strong&gt;&lt;br&gt;
 Improvement in NullPointerExceptions exception message generated by JVM.&lt;/p&gt;

&lt;p&gt;Before Java 14:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UPEtZoS2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/w54hfu2bg28ykvbeheez.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UPEtZoS2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/w54hfu2bg28ykvbeheez.PNG" alt="NullPointer old "&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Java 14 introduced a new JVM feature which gives better insights with a more descriptive stack as shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YWPFHWm9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/71h80cqpvochy3k4tzxq.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YWPFHWm9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/71h80cqpvochy3k4tzxq.PNG" alt="NullPointer new "&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Records&lt;/strong&gt;&lt;br&gt;
We need to write a lot of low-value, repetitive code to write a simple data carrier class responsibly: constructors, accessors, equals(), hashCode(), toString(), etc. To avoid this repetitive code, Java is planned to use record.&lt;/p&gt;

&lt;p&gt;Before Java 14 :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TsL5DtLd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/p0bx7johm33vr7sa0lol.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TsL5DtLd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/p0bx7johm33vr7sa0lol.PNG" alt="records old"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After Java 14 : &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YOf540GT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tw3j4a5q7td1y7qjqwsx.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YOf540GT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tw3j4a5q7td1y7qjqwsx.PNG" alt="record new"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Furthermore, we can add additional fields, methods, and constructor to the record in the following way:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lrOwK1G_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8m84zdewhycsqvb9cuys.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lrOwK1G_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8m84zdewhycsqvb9cuys.PNG" alt="record extra PNG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Few important things to note about Records:&lt;br&gt;
-A record can neither extend a class nor it can be extended by another class. It‚Äôs a final class.&lt;br&gt;
-Records Can Implement Interfaces.&lt;br&gt;
-Records support multiple constructors.&lt;br&gt;
-Records Allow Modifying Accessor Methods.&lt;br&gt;
-Records cannot be abstract.&lt;br&gt;
-Records cannot extend any other class and cannot define instance fields inside the body. Instance fields must be defined in the state description only.&lt;br&gt;
-Declared fields are private and final.&lt;br&gt;
-The body of a record allows static fields and methods.&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Text Blocks&lt;/strong&gt;&lt;br&gt;
Text Blocks were introduced as a preview feature in Java 13 with the goal to allow easy creation of multiline string literals. It‚Äôs useful in easily creating HTML and JSON or SQL query strings.&lt;/p&gt;

&lt;p&gt;In Java 14, Text Blocks are still in preview with some new additions:&lt;br&gt;
-Backslash for displaying nice-looking multiline string blocks.&lt;br&gt;
-\s is used to consider trailing spaces which are by default ignored by the compiler. It preserves all the spaces present before it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IRPkQGqQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5uqmxpz2aw6n85fz75ww.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IRPkQGqQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5uqmxpz2aw6n85fz75ww.PNG" alt="text blocks 14"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Foreign-Memory Access API&lt;/strong&gt;&lt;br&gt;
An effective Java API is to be introduced in the Java 14 JDK, which enables Java applications to safely and efficiently access foreign memory stored outside the Java heap. The foreign-memory access API introduces three main abstractions: MemorySegment, MemoryAddress and MemoryLayout.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#java-15-most-important-features-with-examples" class="anchor"&gt;
  &lt;/a&gt;
  Java 15 most important Features with Examples
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RQEXKex9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/r9hfyio1u2vrkyb5tqzt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RQEXKex9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/r9hfyio1u2vrkyb5tqzt.png" alt="java 15"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Java 15 (Java SE 15) and its Java Development Kit 15 (JDK 15) open-source has been released on 15 September 2020.&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Sealed Classes&lt;/strong&gt;&lt;br&gt;
Sealed classes have been there in Kotlin since a while and Java 15 finally introduces this feature for better control over inheritance.&lt;br&gt;
A class can be sealed by using the &lt;strong&gt;sealed&lt;/strong&gt; modifier.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_h00nre3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9qvrwynkx41gg95zwym2.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_h00nre3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9qvrwynkx41gg95zwym2.PNG" alt="sealed class"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, the above code means, only the classes defined after the keyword &lt;strong&gt;permits&lt;/strong&gt; are allowed to extend the Vehicle sealed class.&lt;/p&gt;

&lt;p&gt;Every permitted class must be set with an explicit modifier. It can either be final or sealed or non-sealed :&lt;br&gt;
-A permitted subclass that‚Äôs declared final cannot be extended further.&lt;br&gt;
-A permitted subclass that‚Äôs declared sealed can be extended further but only by classes that are permitted by the subclass.&lt;br&gt;
-A permitted subclass may be declared non-sealed can be extended further by any class. The superclass cannot restrict the subclasses further down this class hierarchy.&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Hidden Classes&lt;/strong&gt;&lt;br&gt;
While most developers won't find a direct benefit from them, anyone who works with dynamic bytecode or JVM languages will likely find them useful.&lt;/p&gt;

&lt;p&gt;The goal of hidden classes is to allow the runtime creation of classes that are not discoverable.&lt;/p&gt;

&lt;p&gt;Classes such as these typically have a short lifecycle, and thus, hidden classes are designed to be efficient with both loading and unloading.&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Foreign Memory API&lt;/strong&gt;&lt;br&gt;
Foreign memory access is already an incubating feature of Java 14. In Java 15, the goal is to continue its incubation status while adding several new features:&lt;br&gt;
-A new VarHandle API, to customize memory access var handles&lt;br&gt;
-Support for parallel processing of a memory segment using the Spliterator interface&lt;br&gt;
-Enhanced support for mapped memory segments&lt;br&gt;
-Ability to manipulate and dereference addresses coming from things like native calls&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Garbage Collectors&lt;/strong&gt;&lt;br&gt;
In Java 15, both ZGC and Shenandoah will be no longer be experimental. Both will be supported configurations that teams can opt to use, while the G1 collector will remain the default.&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;The Nashorn JavaScript engine&lt;/strong&gt;&lt;br&gt;
Of note, The Nashorn JavaScript engine, originally introduced in Java 8, is now removed. With the introduction of GraalVM and other VM technologies recently, it's clear Nashorn no longer has a place in the JDK ecosystem.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;This article presented the evolution of Java from Java 8 to Java 15 .&lt;/p&gt;

&lt;p&gt;Java has evolved enormously as a language and as an ecosystem since Java 8 was released over six years ago by adding many new features help to make Java a competitive option compared to other JVM-based rivals.&lt;/p&gt;

</description>
      <category>java</category>
    </item>
    <item>
      <title>Copy URL To Clipboard On Npm Run Start</title>
      <author>David Dal Busco</author>
      <pubDate>Fri, 11 Dec 2020 12:11:37 +0000</pubDate>
      <link>https://dev.to/daviddalbusco/copy-url-to-clipboard-on-npm-run-start-3gp</link>
      <guid>https://dev.to/daviddalbusco/copy-url-to-clipboard-on-npm-run-start-3gp</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KLXoeBNK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AvO-uFCV6MmXmDCbHS5iO-Q.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KLXoeBNK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AvO-uFCV6MmXmDCbHS5iO-Q.jpeg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Photo by &lt;a href="https://unsplash.com/@giabyte?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Gia Oris&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;I am not sure anyone will ever need the following tricks but, at my client‚Äôs place, we have an application which can only be accessed through an URL which contains a dynamic base64 parameter. Needless to say, it makes its local development a bit inconvenient.&lt;/p&gt;

&lt;p&gt;In addition, I have to admit, I am not a big fan of CLI‚Äôs options which can automatically open browser. Even though I mostly use the Chrome Incognito mode for development purpose, I like to switch often between browsers to try out what I developed.&lt;/p&gt;

&lt;p&gt;Finally, I don‚Äôt use bookmarks (don‚Äôt judge me) and, I often switch between technologies. Therefore, without configuration, every time another port has to be used ( &lt;code&gt;:3333&lt;/code&gt; or &lt;code&gt;:4200&lt;/code&gt; or &lt;code&gt;:8000&lt;/code&gt; or &lt;code&gt;:8100&lt;/code&gt; etc.).&lt;/p&gt;

&lt;p&gt;That‚Äôs why I had the idea to add a pre-start script to the application which should copy the start URL of the application to my clipboard. Doing so, I can then just select a browser, paste the URI and, I am good to go.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#dependencies" class="anchor"&gt;
  &lt;/a&gt;
  Dependencies
&lt;/h3&gt;

&lt;p&gt;In order to copy or read value to the clipboard from a NodeJS script, I used the library &lt;a href="https://github.com/sindresorhus/clipboardy"&gt;clipboardy&lt;/a&gt; which implement such a cross-platform feature.&lt;/p&gt;

&lt;p&gt;In addition, I also added &lt;a href="https://github.com/chalk/chalk"&gt;chalk&lt;/a&gt; ann &lt;a href="https://github.com/sindresorhus/boxen"&gt;boxen&lt;/a&gt; to print out the URL to the console in a stylish way.&lt;/p&gt;

&lt;p&gt;You may notice that all these dependencies are open source and developed by the same person, &lt;a href="https://twitter.com/sindresorhus"&gt;Sindre Sorhus&lt;/a&gt;, which definitely deserve a shout-out for this awesome contribution and work üëç.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i clipboardy chalk boxen &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#script" class="anchor"&gt;
  &lt;/a&gt;
  Script
&lt;/h3&gt;

&lt;p&gt;Once the dependencies fetched, I created the pre-start script itself. In this example, I create a file &lt;code&gt;start-url.js&lt;/code&gt; at the root of the project.&lt;/p&gt;

&lt;p&gt;The script primary generates the &lt;code&gt;url&lt;/code&gt; which I am looking to copy in my clipboard. On purpose, I am using an &lt;code&gt;Hello World üëã&lt;/code&gt; string to demonstrate that it is possible to encode complex parameters.&lt;/p&gt;

&lt;p&gt;To print out a nice message, I use &lt;code&gt;chalk&lt;/code&gt; with colors, in for- and background, and the bold option. I use &lt;code&gt;\n\n&lt;/code&gt; to create newlines. It is worth to notice that the library offer many options such as combining or nesting styles.&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;clipboardy&lt;/code&gt; to copy the URL to the clipboard is actually really few work and can be solved by calling its function &lt;code&gt;copy&lt;/code&gt; with the all URL as input parameter.&lt;/p&gt;

&lt;p&gt;Finally, in a &lt;code&gt;console.log&lt;/code&gt; , I print out the message inside a box generated with &lt;code&gt;boxen&lt;/code&gt; .&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;write&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;copy&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;clipboardy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;chalk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;chalk&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;boxen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;boxen&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;encodeURIComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World üëã&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`http://localhost:3333/profile/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;chalk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;yellow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Your URL&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;`\n\n&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;chalk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;`\n\n&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;chalk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;grey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Copied local address to clipboard!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;chalk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;red&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Cannot copy &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; to clipboard ü•∫\n\n&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;boxen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;borderStyle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;round&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;borderColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;yellow&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#life-cycle" class="anchor"&gt;
  &lt;/a&gt;
  Life Cycle
&lt;/h3&gt;

&lt;p&gt;Thanks to &lt;a href="https://docs.npmjs.com/cli/v6/using-npm/scripts"&gt;npm&lt;/a&gt; it is possible to execute scripts at different life cycles. Because I was looking to copy the URL when I start locally the application, I added it as a &lt;code&gt;prestart&lt;/code&gt; script to my &lt;code&gt;package.json&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"prestart"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"node start-url.js"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You might ask ‚ÄúBut David, why a prestart and not poststart?‚Äù to which I would answer that &lt;code&gt;prestart&lt;/code&gt; is executed for sure. On the contrary, &lt;code&gt;poststart&lt;/code&gt;, is indeed also executed but, only when the &lt;code&gt;start&lt;/code&gt; life cycle would be released. If your local server, as often, would stay active to watch for changes, &lt;code&gt;poststart&lt;/code&gt; would only resolve when you would cancel your local server.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#demo" class="anchor"&gt;
  &lt;/a&gt;
  Demo
&lt;/h3&gt;

&lt;p&gt;Everything being in place, when I hit &lt;code&gt;npm run start&lt;/code&gt; in my console, the URL is generated, copied to the clipboard and, I notice the following output.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BTN_SgeS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2Ald-QYTtC5iBSisGVvNzPMA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BTN_SgeS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2Ald-QYTtC5iBSisGVvNzPMA.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If I open one of my browser, I can paste the result in the navigation bar.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--exYQWh5Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AglgIo-xgThAKIlL-Y1uqtw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--exYQWh5Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AglgIo-xgThAKIlL-Y1uqtw.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, hit &lt;code&gt;enter&lt;/code&gt; and access my URL with the generated parameters.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O4sv78cO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AZgx91lAb1eO8wN66IqYuYA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O4sv78cO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AZgx91lAb1eO8wN66IqYuYA.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#summary" class="anchor"&gt;
  &lt;/a&gt;
  Summary
&lt;/h3&gt;

&lt;p&gt;As underlined in the introduction of this post, I am really not sure if anyone will ever need this solution ever üòÖ. Anyway, I hope it was a fun read and let me know if you would improve anything.&lt;/p&gt;

&lt;p&gt;To infinity and beyond!&lt;/p&gt;

&lt;p&gt;David&lt;/p&gt;




&lt;p&gt;You can reach me out on &lt;a href="https://twitter.com/daviddalbusco"&gt;Twitter&lt;/a&gt; and, why not, give a try to &lt;a href="https://deckdeckgo.com/"&gt;DeckDeckGo&lt;/a&gt; for your next presentations.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://deckdeckgo.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q4yatxfq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://deckdeckgo.com/assets/meta/deckdeckgo-meta.png" alt="DeckDeckGo"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>node</category>
      <category>npm</category>
    </item>
    <item>
      <title>Three unusual qualities we look for to hire amazing developers</title>
      <author>Douglas Parsons</author>
      <pubDate>Fri, 11 Dec 2020 12:05:00 +0000</pubDate>
      <link>https://dev.to/dglsparsons/three-unusual-qualities-we-look-for-to-hire-amazing-developers-50pd</link>
      <guid>https://dev.to/dglsparsons/three-unusual-qualities-we-look-for-to-hire-amazing-developers-50pd</guid>
      <description>&lt;p&gt;Here at Shamaazi, we‚Äôve recently gone through a round of hiring‚Ä¶ and wow, hiring is hard!&lt;/p&gt;

&lt;p&gt;It‚Äôs challenging finding engineers who have the right qualities, attitude and personality to join a team. We‚Äôre a &lt;strong&gt;tiny&lt;/strong&gt; company, with just 2 engineers, so any new teammates have a massive impact on our products and culture.&lt;/p&gt;

&lt;p&gt;We‚Äôre super careful about who we hire because of this.&lt;/p&gt;

&lt;p&gt;We don‚Äôt expect or search for rockstar developers who can recite algorithms and live and breath software. We don‚Äôt expect the world‚Äôs most qualified experts in the technology we use. We don‚Äôt expect people to spend every moment of their spare time programming.&lt;/p&gt;

&lt;p&gt;The qualities we do look for are probably considered unusual compared to most software engineering outfits. Let's take a look at the three we use to ensure a good fit for working at Shamaazi.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#eagleeyed-attention-to-detail-" class="anchor"&gt;
  &lt;/a&gt;
  Eagle-eyed attention to detail üîç &lt;a href="#eagle-eyed-attention-to-detail-%F0%9F%94%8D"&gt;#&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;We give our potential candidates a short engineering assignment as part of our hiring process. We explicitly request that they don't spend more than an hour on it, but it still gives us a vast amount of information that just simply isn't evident from their CV.&lt;/p&gt;

&lt;p&gt;Reviewing these assignments has been eye-opening. Most solutions lack attention to detail in at least one area. We begin by asking relatively simple questions of the submissions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Correctness&lt;/strong&gt; ‚Äì does the solution work for all inputs?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Validation&lt;/strong&gt; ‚Äì are the inputs validated, what happens if we try to break the system?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Testing&lt;/strong&gt; ‚Äì How do we know their solution is correct? Is there any proof that it reliably works?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Quality&lt;/strong&gt; ‚Äì How easy is their solution to understand, maintain or extend?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most technical tests we‚Äôve seen fail on at least two or three of these, if not all four. Quite simply, they lack attention to detail in both their quality and behaviour.&lt;/p&gt;

&lt;p&gt;This lack of attention to detail also applies to CVs. We‚Äôve seen poor grammar, typos and even sentences that don‚Äôt make sense! Quite frankly, if they can‚Äôt complete a short assignment with rigour, or can‚Äôt write a CV without errors, can we really trust them with a product that could shape the future of our company?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-ability-to-express-clearly-" class="anchor"&gt;
  &lt;/a&gt;
  The ability to express clearly üó£Ô∏è &lt;a href="#the-ability-to-express-clearly-%F0%9F%97%A3%EF%B8%8F"&gt;#&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Writing good code, a good CV, or writing prose all have a lot in common. They are all forms of &lt;a href="https://dev.to/dglsparsons/why-effective-communication-is-the-key-skill-for-being-an-awesome-programmer-546"&gt;communication&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Writing good code is about communicating a set of requirements both to the computer, and to a future maintainer, CVs communicate your skills and knowledge to a potential employer, and prose is a form of communicating ideas by writing them down.&lt;/p&gt;

&lt;p&gt;As a result, the ability to express yourself clearly is super important. Engineering teams don‚Äôt work in isolation, and working remotely causes a whole new set of challenges for communication. In order to stay well-aligned, agile, and have the ability to discuss complicated topics, we communicate constantly as a team. This is a fundamental aspect of a team being &lt;a href="https://timreview.ca/article/567"&gt;high-performing&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So, when reviewing engineers, we have to consider a few key questions: Does their code communicate its purpose clearly? Is it well structured? Well written? Does it clearly separate concerns? Does it have sensible naming? Does their CV communicate their strengths and experience eloquently and concisely? When prompted in an interview, can a candidate clearly express their thought-process? Can they articulate complicated ideas?&lt;/p&gt;

&lt;p&gt;If the answer to all of these is ‚Äòyes‚Äô, then we know we have a candidate who is going to be a delight to work with.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-positive-outlook-" class="anchor"&gt;
  &lt;/a&gt;
  A positive outlook üòÑ &lt;a href="#a-positive-outlook-%F0%9F%98%84"&gt;#&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This one sounds strange, but I was first introduced to the idea by Patrick Collison, the Founder and CEO of Stripe. In his excellent talk &lt;a href="https://www.youtube.com/watch?v=fPfYN5gU_C0"&gt;‚ÄòHow to Scale‚Äô&lt;/a&gt;, Patrick discusses in great depth the difficulties in building the culture he wanted.&lt;/p&gt;

&lt;p&gt;At an ideal company, we would go to work and everyone would be happy. People would love their jobs and be enthusiastic and supportive. The question then becomes: ‚Äòhow do we create a company where this is the culture? Where the atmosphere is happy‚Äô. This is an incredible challenge, one that has no easy solution.&lt;/p&gt;

&lt;p&gt;As a side note, if anyone knows how to build a company that can turn unhappy people into happy ones, please let me know (I‚Äôd like to send my parents there)!&lt;/p&gt;

&lt;p&gt;Thankfully, Patrick Collison also shared his ‚Äòcheat‚Äô to achieve this. Simply hire people who are happy, positive people already. This is the culture we want to build, so we‚Äôre taking the same shortcut he did at Stripe. By hiring happy people, we can ensure we maintain a happy culture.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-thoughts-" class="anchor"&gt;
  &lt;/a&gt;
  Closing Thoughts &lt;a href="#closing-thoughts"&gt;#&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;As a tiny company, we have to be incredibly careful about the people we hire. They can have a massive impact on our products, for better or for worse, and contribute heavily towards our culture. Because of this, we deliberately look for these three qualities as signs of excellence in people.&lt;/p&gt;

&lt;p&gt;If we can find people to hire who show three key qualities: a happy outlook, the ability to express themselves clearly, and a keen eye for details, then we know they will be a brilliant hire.&lt;/p&gt;




&lt;p&gt;Would you like to hear more about our hiring process? Do you want to know more about the problems people have in our technical assessment, or the common errors on CVs? Get in touch and let me know.&lt;/p&gt;




&lt;p&gt;Enjoyed this post? Want to share your thoughts on the matter? Found this article helpful? Disagree with me? Let me know by &lt;a href="https://twitter.com/dglsparsons"&gt;messaging me on Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
      <category>career</category>
    </item>
    <item>
      <title>Boilerplate - the Angular vs React difference</title>
      <author>Dean Radcliffe</author>
      <pubDate>Fri, 11 Dec 2020 10:25:49 +0000</pubDate>
      <link>https://dev.to/deanius/boilerplate-the-angular-vs-react-difference-2cbk</link>
      <guid>https://dev.to/deanius/boilerplate-the-angular-vs-react-difference-2cbk</guid>
      <description>&lt;p&gt;In React - a component is a function that returns a DOM tree (possibly by calling other component-functions). To test the function, you call it with different arguments, and assert different results.&lt;/p&gt;

&lt;p&gt;In Angular, a component is a class, with a decorator and a corresponding module, which must be registered by some other component's module, and whose dependencies are injected via a constructor (whew - say that twice!) It's a class, but you never call new yourself on the component in prod code or tests. To test an Angular component involves setting up mock providers, repeating some of the registration of imports/declarations etc so that the test environment (or Storybook) satisfies all the same things the prod code has.&lt;/p&gt;

&lt;p&gt;The difference is the amount of boilerplate.&lt;/p&gt;

&lt;p&gt;Boilerplate/configuration is not code you step through, or write 'from the head' or test-drive - it's stuff you trial-and-error your way through, with manuals and examples. A part of every coders job, yes, but hopefully a decreasing amount over time. Boilerplate gives you a low BizCode-to-FrameworkCode ratio, and leaves BizCode coupled tightly to the framework. I wrote some Angular tests where I manually new-ed up a component. They didn't get me very far.&lt;/p&gt;

&lt;p&gt;I think this difference is why React is eating the world - the mental model is simple enough yet composes arbitrarily, and you can do amazing things with it. There are fewer concepts to wire together in tests and code to simply get the return value of a function merged into the DOM. I'm not crapping on Angular or those who like it - it's powerful and opinionated. But newer frameworks (React, Vue, Svelte) area generally simpler, and that's a trend that won't likely reverse, imho. So let's hop the next bus out of boilerplate-town - we won't miss it.&lt;/p&gt;

</description>
      <category>react</category>
      <category>angular</category>
      <category>functional</category>
    </item>
    <item>
      <title>Java: OOP in brief</title>
      <author>Supriya Nivrutti Kolhe</author>
      <pubDate>Fri, 11 Dec 2020 10:14:02 +0000</pubDate>
      <link>https://dev.to/supriya2371997/java-oop-in-brief-4hlf</link>
      <guid>https://dev.to/supriya2371997/java-oop-in-brief-4hlf</guid>
      <description>&lt;p&gt;Q1: what do you mean by OOP concept?&lt;br&gt;
Q2: List of OOP Features?&lt;br&gt;
Q3: Why use OOP concepts or advantages of OOP?&lt;br&gt;
Q4: Disadvantages of OOP?&lt;br&gt;
Q5: Difference between Procedural and OOP programming?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: For detailed information on OOP feature click on one you wish to explore&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;1. what do you mean by OOP concept:-&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;1.1 stands for Object-Oriented Programming.&lt;br&gt;
1.2 OOP is a methodology or paradigm to design a program using classes and objects.&lt;br&gt;
1.3 OOP simplifies software development and maintenance by providing a few concepts such as:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ymOHw4aF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rewxsx85fqmolo6r49p9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ymOHw4aF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rewxsx85fqmolo6r49p9.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. List of OOP Features:-&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;2.1 class: a collection of object &amp;amp; logical entity, eg. bike&lt;br&gt;
2.2 object: a real-life entity that has state &amp;amp; behaviour of its own, eg. colour&lt;br&gt;
2.3 Inheritance: acquiring properties and behaviour from another class, eg. father and son&lt;br&gt;
2.4 Polymorphism: one task in different ways, speak can be as meow and for the dog, it can be woof.&lt;br&gt;
2.5 Abstraction: hiding internal details and showing functionality, eg. ATM machine&lt;br&gt;
2.6 Encapsulation: binding/ wrapping code &amp;amp; data together into a single unit, eg. capsule containing different medicines&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;3. Why use OOP concepts or advantages of OOP:-&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;3.1 faster&lt;br&gt;
3.2 Simple and provide a clear understanding and structure of code&lt;br&gt;
3.3 reusability - able to reuse content and behaviour of the existing class in a new class.&lt;br&gt;
3.4 code optimisation&lt;br&gt;
3.5 Modifiability i.e. easy to update&lt;br&gt;
3.6 Secure because of data hiding concept&lt;br&gt;
3.7 easy to upgrade from small to large system&lt;br&gt;
3.8 we cn eliminate redundant code and extend the use of existing classes&lt;br&gt;
3.9 possible to have multiple objects&lt;br&gt;
3.10 easy to partition the work in a project based on objects&lt;br&gt;
3.11 provide message passing technique for communication between objects&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;4. Disadvantages of OOP:-&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;4.1 require more memory to increase speed&lt;br&gt;
4.2 larger program size&lt;br&gt;
4.3 not suitable for all type of programs&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;5. Difference between OOP programming &amp;amp; Procedural oriented language:-&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;OOPs makes development and maintenance easier i.e. if code grows it's easy to manage it&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;POL is not easy to manage &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;OOP provide data hiding&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;in procedure-oriented programming global data can be accessed from anywhere&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7MBa_2ig--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dliqxhamrky8rak7bz1j.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7MBa_2ig--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dliqxhamrky8rak7bz1j.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;OOP follows the bottom-up approach&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;POL follows the top-down approach&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;OOP have many access specifiers such as public, private, protected etc&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;POL does not have any&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;updation in OOP based program is easy&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;updation in POL based program is difficult&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;because of data hiding, OOP is secure&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;POL doesn't have any proper way of data hiding, thus it is less secure&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;in OOP data is more important&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;in POL functions are more important&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;OOP is mainly used to solve real-world problems&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;POL is mainly used for unreal issues&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bbZZGs3c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pdokcalwp2nycijouyok.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bbZZGs3c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pdokcalwp2nycijouyok.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;/blockquote&gt;

</description>
      <category>java</category>
      <category>oop</category>
    </item>
    <item>
      <title>Intro epicReact.dev Review</title>
      <author>Jannik Wienecke</author>
      <pubDate>Fri, 11 Dec 2020 09:51:01 +0000</pubDate>
      <link>https://dev.to/jannikwienecke/intro-epicreact-dev-review-3pe6</link>
      <guid>https://dev.to/jannikwienecke/intro-epicreact-dev-review-3pe6</guid>
      <description>&lt;center&gt;
&lt;br&gt;
Hello folks, this first post is a short introduction to my series, reviewing and summarising the epicReact.dev Course by Kent C. Dodds.&lt;br&gt;
&lt;/center&gt;



&lt;p&gt;In this series I want to review the most important principles that I have learned, repeat the materials another time for myself, write about it to deepen my understanding, explain it and give code examples.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-course-is-divided-into-8-subcourses" class="anchor"&gt;
  &lt;/a&gt;
  The course is divided into 8 Sub-Courses:
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;React Fundamentals&lt;/li&gt;
&lt;li&gt;React Hooks&lt;/li&gt;
&lt;li&gt;Advanced React Hooks&lt;/li&gt;
&lt;li&gt;Advanced React Patterns&lt;/li&gt;
&lt;li&gt;React Perfomance&lt;/li&gt;
&lt;li&gt;Testing React Apps&lt;/li&gt;
&lt;li&gt;React Suspense (&lt;strong&gt;Experimental&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;Build an Epic React App&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Each of the chapters as the names describe focus on a specific concept and topic. For each Course I will write a review which will come within the next weeks.&lt;br&gt;
I won't cover the last chapter though, since it mostly covers the same concepts as the previous chapters.&lt;/p&gt;

&lt;p&gt;The course is built based on the eggHead.io learning style. Meaning, the instructor shortly gives you an overview about the task that you are expected to solve by yourself. Then you will find instructions about the task itself and background information with links to posts or third party libraries.&lt;br&gt;
Within the file that you have to write the solution in, you'll find additional hints and tips to successfully solve this exercise:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;// Tip create useState with the name counter and setCounter&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Maybe, inside the React Hooks Course you see the comment above, giving you the hint that you need React.useState, so you know you have to create this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;// create useState with the name counter and setCounter&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCounter&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Each of the Courses is divided into multiple topics which each contain several exercises. Each Exercise again has several Extra Credit Exercises. For those, you won't find any tips. This is intentional and should force the student to find the solution by himself.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#who-is-this-course-for" class="anchor"&gt;
  &lt;/a&gt;
  Who is this Course for?
&lt;/h3&gt;

&lt;p&gt;Before I started this course I had done some courses on Udemy and FrontendMasters, watched several talks on Youtube and build several small Apps(non professional). While I found that I knew most of what was teached in the first 4 Courses, I still learned something in every course. Further I only knew the most of the content of the Advanced React Patterns because I watched Kent C. Dodds Workshop about it at FrontendMasters.&lt;br&gt;
From the courses 5-7 I learned a lot. I had almost never used testing and profiling before, so this was a lot new and really helpful stuff. Further, the Suspense Concepts which are an experimental feature, were great. Giving you a glimpse into what will come in the future. The Last Course, building an App helped you to remember and deepen the understanding, since a lot of the material was repeated.  &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#so-who-should-takes-the-course" class="anchor"&gt;
  &lt;/a&gt;
  So who should takes the course:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;I think someone without any Javascript experience should first buy a Course in Udemy or some other plattform (or buy a book) &lt;/li&gt;
&lt;li&gt;Someone with Javascript but without any React Experience can take the course but I think it will be very challenging. Maybe a short introduction into react and some reading can be very helpful&lt;/li&gt;
&lt;li&gt;Someone with Javascript and React Experience should definitely take the Course. It will bring you to the next level. It will teach you most of what you need to know to work as a Frontend Developer.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#should-experienced-developer-take-the-course" class="anchor"&gt;
  &lt;/a&gt;
  Should experienced developer take the course?
&lt;/h4&gt;

&lt;p&gt;In my opinion yes. First of all while writing our programs we often get comfortable with our way of writing code. We forget stuff doesn't keep up with new material and come across bad habits. Taking the course will give you a fresh perspective, remind you of basic principles and will definitively teach you some new concepts. &lt;/p&gt;




&lt;p&gt;To sum it up, I enjoyed taking the course, I learned a lot and I will come back to the course material to recap and to use some of the great code snippets that the instructor will show you. In total, it took me about 3 weeks to finish the course!! Each day I spend about 4 hours on the material. So there is a lot of it :)&lt;/p&gt;

&lt;p&gt;PS: The Materials are open source. So everyone can use it and work through by himself. Though I recommend, buying the course, since firstly you support the creator, and secondly having the videos, will clarify a lot if you get stuck and will give you more insides. Further, the Extra Credits won't have tips that help you solve the exercise. So, its very helpful to get the explanation for why something is done the way it is shown in the solution.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Check out the reviews of the individual chapters that will come in the future. Those will be a lot more focused on the contents itself and will contain more code examples&lt;/em&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>testing</category>
      <category>epicreact</category>
    </item>
    <item>
      <title>How is React different from vanilla JS</title>
      <author>Aman Sethi</author>
      <pubDate>Fri, 11 Dec 2020 09:14:06 +0000</pubDate>
      <link>https://dev.to/amansethi00/how-is-react-different-from-vanilla-js-4lfn</link>
      <guid>https://dev.to/amansethi00/how-is-react-different-from-vanilla-js-4lfn</guid>
      <description>&lt;h1&gt;
  &lt;a href="#vanilla-js" class="anchor"&gt;
  &lt;/a&gt;
  Vanilla Js
&lt;/h1&gt;

&lt;p&gt;VanillaJS is a name to refer to using plain JavaScript without any additional libraries. All major web browsers have a built-in JavaScript engine that executes the code on the user's device. It is the language to communicate with the browsers directly. Let it be any framework Angular, React, etc they are all built on top of vanilla JS. When making small web apps using vanilla JS or any of the framework wouldn't make any big of a difference. But when there are more functionalities to be added code gets messier.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#react" class="anchor"&gt;
  &lt;/a&gt;
  React
&lt;/h1&gt;

&lt;p&gt;It is a framework built on vanilla JS. Think of it as the middleware to communicate with the browser. Modern browsers provide many functionalities that improve user experience and provide good visual animations also. To communicate with the browser we use vanilla JS. But the code gets many times too long making things look complicated in vanilla JS. React hides these complexities and let a developer access the features of the browser using less code. Also, I would like to remind you here that &lt;em&gt;React is a &lt;code&gt;declarative&lt;/code&gt; language for this reason.&lt;/em&gt;  &lt;/p&gt;

&lt;p&gt;React is a &lt;code&gt;Component-Based&lt;/code&gt; framework. This means components are once written and used multiple times within the app. In vanilla JS it is not the same case as everything has to be hard-wired to make things work.&lt;/p&gt;

&lt;p&gt;React can also render on the server using Node and power mobile apps using &lt;code&gt;React Native&lt;/code&gt;.Many companies use React Native for their mobile app because the same code can be deployed to both &lt;code&gt;Play Store&lt;/code&gt; and &lt;code&gt;App Store&lt;/code&gt;.This helps them ship out new features and information to their users in less time.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I hope that this article helped you learn something new today. If it did you can follow me on &lt;a href="https://twitter.com/amansethi00"&gt;Twitter&lt;/a&gt;, to stay connected.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Setting up TypeScript 4 with ESLint &amp; Prettier in Visual Studio Code</title>
      <author>Sam Piggott</author>
      <pubDate>Fri, 11 Dec 2020 09:06:58 +0000</pubDate>
      <link>https://dev.to/sam_piggott/setting-up-typescript-4-with-eslint-prettier-in-visual-studio-code-4e5n</link>
      <guid>https://dev.to/sam_piggott/setting-up-typescript-4-with-eslint-prettier-in-visual-studio-code-4e5n</guid>
      <description>&lt;p&gt;Okay, if you've stumbled on this article, chances are you probably want this information as quick and easy as possible. &lt;/p&gt;

&lt;p&gt;I'll keep things as short as I can, but we will be walking through everything step-by-step.&lt;/p&gt;

&lt;p&gt;Here's a quick introduction on what everything is that we'll be setting up today:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;TypeScript 4&lt;/strong&gt; is an evolution of JavaScript which brings strict typing (and much more!) to the JavaScript language. I've got a whole article introducing TypeScript &lt;a href="https://dev.to/sam_piggott/getting-started-with-typescript-as-a-javascript-developer-4b3l"&gt;right here&lt;/a&gt; if you're interested in learning more.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;ESLint&lt;/strong&gt; is a tool which scans your code for errors in your codebase, and offers fixes as you go (also known as "linting").&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Prettier&lt;/strong&gt; is a code formatter which formats your code to make it look prettier (hence the name!)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#prefer-video" class="anchor"&gt;
  &lt;/a&gt;
  Prefer video?
&lt;/h2&gt;

&lt;p&gt;Before we get started - I've recorded a video available with all of the following steps in it:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/q5rA2cNqm-8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The video is part of a completely free &lt;strong&gt;16 part series&lt;/strong&gt; available to watch &lt;strong&gt;for free&lt;/strong&gt; over on my YouTube channel. &lt;a href="https://www.youtube.com/watch?v=vugSEGpPsEo&amp;amp;list=PL7siRj7spTbBfiNQ1kBVuytL8-I8DZWZq"&gt;Click here to get the full course!&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hold-up-why-is-this-guide-so-long" class="anchor"&gt;
  &lt;/a&gt;
  Hold up - why is this guide so long?!
&lt;/h2&gt;

&lt;p&gt;There are other ways to get up and running with these tools quickly (such as running an &lt;code&gt;npx&lt;/code&gt; command, pre-installing everything). &lt;/p&gt;

&lt;p&gt;Here's why I think you should follow this (longer) guide instead:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Full transparency as to what you're installing, step-by-step (no unwanted libraries or bloat)&lt;/li&gt;
&lt;li&gt;Installing everything step-by-step (with explanations) makes it easier to debug particular bugs if any of these tools fail&lt;/li&gt;
&lt;li&gt;A greater understanding of the individual tools will make it easier to extend or change any of the tools' behaviour later!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#just-want-the-code" class="anchor"&gt;
  &lt;/a&gt;
  Just want the code?
&lt;/h2&gt;

&lt;p&gt;With all of that said - if you'd rather just get up and running quickly, I've written a git repo with everything described in this guide. It's available &lt;a href="https://github.com/Sarghm/typescript-eslint-prettier-template"&gt;right here.&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;If it's useful, I'd appreciate a star! ‚ú®&lt;/p&gt;

&lt;p&gt;Still here? Alright! On with the show!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-typescript" class="anchor"&gt;
  &lt;/a&gt;
  Installing TypeScript
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; We'll start by creating a new folder to use as a root for our project. In your command line, enter the following command (replacing &lt;code&gt;my-new-project&lt;/code&gt; with your project's name):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;my-new-project
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Next, we need to get our project set up using &lt;strong&gt;Yarn&lt;/strong&gt;. To do this, we'll need to enter the folder we've just created and initialise our project.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;my-new-project
yarn init
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;This should give us an interactive series of steps where we can enter all the relevant information for our project in.&lt;/p&gt;

&lt;p&gt;Enter values for all of these if you have anything specific, or just press Enter to use the defaults for each (shown in parentheses after each question).&lt;/p&gt;

&lt;p&gt;The only one to pay attention to is the &lt;strong&gt;entry point&lt;/strong&gt; - make sure you enter &lt;code&gt;./build/index.js&lt;/code&gt; rather than just &lt;code&gt;index.js&lt;/code&gt;. I'll highlight why later in the article.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RsJ3VT2W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/euJIg30.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RsJ3VT2W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/euJIg30.png" alt="Yarn Init interactive steps"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; Okay, now that we've initialised our project, let's go ahead and install TypeScript into our project. &lt;/p&gt;

&lt;p&gt;Using the same command line (still navigated to the &lt;code&gt;my-new-project&lt;/code&gt; directory), enter the following command:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add typescript &lt;span class="nt"&gt;--dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;This will add TypeScript to our &lt;code&gt;devDependencies&lt;/code&gt;. For more information on the difference between &lt;code&gt;dependencies&lt;/code&gt; and &lt;code&gt;devDependencies&lt;/code&gt;, there's an article you can check out &lt;a href="https://medium.com/@dylanavery720/npmmmm-1-dev-dependencies-dependencies-8931c2583b0c#:~:text=The%20difference%20between%20these%20two,an%20npm%20install%20%2D%2Dsave."&gt;right here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4:&lt;/strong&gt; After that's installed, we'll need to create ourselves a configuration file for TypeScript to use. &lt;/p&gt;

&lt;p&gt;To create that, enter the following command:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;touch&lt;/span&gt; ./tsconfig.json
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Step 5:&lt;/strong&gt; Next, we'll create a folder to store our TypeScript files in, and create an &lt;code&gt;index.ts&lt;/code&gt; file to get started. Back in your command line, enter the following:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; ./src
&lt;span class="nb"&gt;touch&lt;/span&gt; ./src/index.ts
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Great - now we've created a folder in our project's directory called &lt;code&gt;src&lt;/code&gt;, and created a single file called &lt;code&gt;index.ts&lt;/code&gt; inside.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 6:&lt;/strong&gt; Next, you'll want to open up the &lt;code&gt;tsconfig.json&lt;/code&gt; file that we just created, using VSCode. &lt;/p&gt;

&lt;p&gt;We're going to set our TypeScript's configuration up with the simplest settings possible, with the idea being that you can add to and extend this. Feel free to copy and paste the following configuration (feel free to remove the comments - they're not required, more just to let you know what each line does!)&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you're planning on setting this project up with React later down the line, there's a React-specific barebones &lt;code&gt;tsconfig.json&lt;/code&gt; you can refer to &lt;a href="https://gist.github.com/Sarghm/07140fcb4f835571af51b6f977a5e410"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For more information on &lt;code&gt;tsconfig.json&lt;/code&gt; and all of the possible parameters you can use during setup, there's more information on the &lt;a href="https://www.typescriptlang.org/tsconfig"&gt;official TypeScript handbook.&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 7:&lt;/strong&gt; Finally, open up the &lt;strong&gt;root folder&lt;/strong&gt; (not just a single file!) - in VSCode.&lt;/p&gt;

&lt;p&gt;You should now be able to write TypeScript inside of your &lt;code&gt;index.ts&lt;/code&gt; file! Just make sure you create all your &lt;code&gt;.ts&lt;/code&gt; files inside of the &lt;code&gt;src&lt;/code&gt; folder (or a sub-directory inside &lt;code&gt;src&lt;/code&gt;) to ensure the compiler catches everything.&lt;/p&gt;

&lt;p&gt;To build your TypeScript into JavaScript files, simply run the following command from the root directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn tsc &lt;span class="nt"&gt;-p&lt;/span&gt; ./tsconfig.json
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#eslint" class="anchor"&gt;
  &lt;/a&gt;
  ESLint
&lt;/h2&gt;

&lt;p&gt;Alright, let's get our codebase linted with ESLint!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; First, we'll want to install the relevant ESLint plugin for VSCode. Simply search for &lt;strong&gt;ESLint&lt;/strong&gt; in the Extensions bar on the left side of the screen, then hit &lt;strong&gt;Install&lt;/strong&gt; to install it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YrHKLGxB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/cBc3Dvc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YrHKLGxB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/cBc3Dvc.png" alt="Installing ESLint in Visual Studio Code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Open up your command line once again, and navigate to your project's root directory. From there, we want to install all the required libraries to get ESLint up and running.&lt;/p&gt;

&lt;p&gt;To do so, enter the following command:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add eslint @typescript-eslint/eslint-plugin @typescript-eslint/parser --dev
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;This will install:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;eslint&lt;/strong&gt; - The ESLint core package&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;@typescript-eslint/eslint-plugin&lt;/strong&gt; - A plugin for ESLint to support TypeScript specifically&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;@typescript-eslint/parser&lt;/strong&gt; - Further support for ESLint to lint TypeScript source files&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; Next, whilst we're still in the command line, we'll need to set up our configuration file for ESLint.&lt;/p&gt;

&lt;p&gt;To do so, enter the following command:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;touch&lt;/span&gt; .eslintrc
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;(Note the &lt;code&gt;.&lt;/code&gt; at the beginning of the &lt;code&gt;eslintrc&lt;/code&gt;. That's really important - make sure you don't miss it!)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4:&lt;/strong&gt; To finish up the setup, we'll need to make some changes to the &lt;code&gt;.eslintrc&lt;/code&gt; file that we've just created. If you already have VSCode open, you should now be able to navigate to &lt;code&gt;.eslintrc&lt;/code&gt; in your project tree. &lt;/p&gt;

&lt;p&gt;Here's what that looks like on Visual Studio Code:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n80hItxj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/yfitNxH.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n80hItxj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/yfitNxH.png" alt="Opening .eslintrc file up from the project tree in Visual Studio Code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that &lt;code&gt;.eslintrc&lt;/code&gt; is open, update it so that it looks like the following:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;This configuration applies all of the libraries that we've just installed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 5:&lt;/strong&gt; Restart VSCode!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 6:&lt;/strong&gt; You should now be able to observe an &lt;code&gt;ESLint&lt;/code&gt; marker in the status bar (bottom right corner of the screen).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iTyOfsCf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Iw5jfzL.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iTyOfsCf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Iw5jfzL.png" alt="Positive state for ESLint"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If it looks like the image above - great! You're all set!&lt;/p&gt;

&lt;p&gt;However, if it looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P0QDqXmm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/8T2rTYm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P0QDqXmm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/8T2rTYm.png" alt="Error state for ESLint"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;...you'll need to click it, and then grant the workspace the necessary permissions to use ESLint. After that, one last IDE restart should get you up and running!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prettier" class="anchor"&gt;
  &lt;/a&gt;
  Prettier
&lt;/h2&gt;

&lt;p&gt;Almost there! Let's get our environment configured to use Prettier...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; Once again, open up your command line, and navigate to your project's root directory. We'll be installing a few new packages to add support for Prettier...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add prettier eslint-config-prettier eslint-plugin-prettier &lt;span class="nt"&gt;--dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Next, let's open up our &lt;code&gt;.eslintrc&lt;/code&gt; file and add those new libraries to the &lt;code&gt;extends&lt;/code&gt; array in our configuration...&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;(&lt;strong&gt;Note:&lt;/strong&gt; The order in which the content of the &lt;code&gt;extends&lt;/code&gt; array is very important to ensure you don't have any trouble later on down the line!)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; Finally - restart VSCode one last time.&lt;/p&gt;

&lt;p&gt;And that's it - feel free to breathe a sigh of relief. You've done it! You've set up a project with &lt;strong&gt;TypeScript&lt;/strong&gt;, &lt;strong&gt;ESLint&lt;/strong&gt; and &lt;strong&gt;Prettier!&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary" class="anchor"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;It feels like a hell of a lot to do &lt;em&gt;just&lt;/em&gt; to get your environment ready, but I honestly believe that once you've gone through this process once and have an understanding as to how all the separate components come together, it really makes things a lot more straightforward in the event that any of these tools fail. Now that you've braved the storm, you should also be in a great position to customise ESLint and Prettier to your heart's content.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#one-last-thing" class="anchor"&gt;
  &lt;/a&gt;
  One last thing...
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Tf5kUAzS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/TlmEDgZ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Tf5kUAzS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/TlmEDgZ.png" alt="CodeSnap promo image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I've made a &lt;strong&gt;16-part&lt;/strong&gt; TypeScript course, written specifically for JavaScript developers - and it's totally free. If you're interested, it's available to view on my &lt;a href="https://www.youtube.com/watch?v=vugSEGpPsEo&amp;amp;list=PL7siRj7spTbBfiNQ1kBVuytL8-I8DZWZq"&gt;YouTube channel right here&lt;/a&gt;. You can also support this content by subscribing to me, or just following me on here for more TypeScript content.&lt;/p&gt;

&lt;p&gt;Thanks so much for reading!&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
    </item>
    <item>
      <title>Deploying React App on Surge using Github Actions</title>
      <author>Shaurya Vardhan Singh</author>
      <pubDate>Fri, 11 Dec 2020 08:17:05 +0000</pubDate>
      <link>https://dev.to/wulforr/deploying-react-app-on-surge-using-github-actions-4036</link>
      <guid>https://dev.to/wulforr/deploying-react-app-on-surge-using-github-actions-4036</guid>
      <description>&lt;p&gt;Today we are going to set up an automation which will deploy our react code on surge whenever a push request is made to main branch of the github repository.&lt;/p&gt;

&lt;p&gt;First step would be to create a React app using create-react-app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-react-app react-github-surge
cd react-github-surge
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now set up a github repository and push your code to the repository.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git init
$ git add .
$ git commit -m "initial commit"
$ git branch -M main
$ git remote add origin REPOSITORY_URL
$ git push origin main
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;After creating a repository on github login to surge account and create a token for surge which will be used by github action to deploy to surge using your account.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;surge login
&lt;span class="nv"&gt;$ &lt;/span&gt;surge token
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Go to github repository and add the token as a secret&lt;/p&gt;

&lt;p&gt;Github actions are stored in &lt;code&gt;.github/workflows/&lt;/code&gt; directory.&lt;br&gt;
so create this directory and add a yaml file to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir .github/worflows
touch .github/worflows/deploy.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Open this file and add the below code to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deploy&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;

    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="c1"&gt;# Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="c1"&gt;# Install node version 12&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-node@v2-beta&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;node-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;12'&lt;/span&gt;

      &lt;span class="c1"&gt;# Install npm packages&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install packages&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm install&lt;/span&gt;

      &lt;span class="c1"&gt;# Build react app&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build the app&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm run build&lt;/span&gt;

      &lt;span class="c1"&gt;# Install Surge &lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install Surge&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm install -g surge&lt;/span&gt;

      &lt;span class="c1"&gt;# Deploy to the defined URL using the token&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deploy to surge&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;surge ./build URL_TO_DEPLOY_TO --token ${{secrets.TOKEN}}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So let's see what is going on over here.&lt;br&gt;
In first line we are giving a name to our action so that we can identify it easily.&lt;/p&gt;

&lt;p&gt;Then we have &lt;code&gt;on:&lt;/code&gt; block&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;here we are defining when we want our function to run i.e. whenever a push request is made on main branch.We can specify more than one branch inside the array using comma seperated values.&lt;/p&gt;

&lt;p&gt;Now whenever a push request will be made to main branch of the github repository the github action will execute this job and deploy the react app to surge.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Inside the jobs we write the platform on which our code will run. Here we are using latest version of ubuntu.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="c1"&gt;# Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;

      &lt;span class="c1"&gt;# Install node version 12&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-node@v2-beta&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;node-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;12'&lt;/span&gt;

      &lt;span class="c1"&gt;# Install npm packages&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install packages&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm install&lt;/span&gt;

      &lt;span class="c1"&gt;# Build react app&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build the app&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm run build&lt;/span&gt;

      &lt;span class="c1"&gt;# Install Surge &lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install Surge&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm install -g surge&lt;/span&gt;

      &lt;span class="c1"&gt;# Deploy to the defined URL using the token&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deploy to surge&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;surge ./build URL_TO_DEPLOY_TO --token ${{secrets.TOKEN}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then we declare the steps to be followed. Each step will run synchronously.&lt;br&gt;
First step is to load our repository in our latest ubuntu version.&lt;/p&gt;

&lt;p&gt;Second step is to install node, we are installing node version 12 here.&lt;/p&gt;

&lt;p&gt;Then we write steps to install npm packages and build our react app.&lt;/p&gt;

&lt;p&gt;Next we will install surge and lastly we will deploy our build directory to surge using the token.&lt;/p&gt;

&lt;p&gt;Now whenever a push request is made on main branch of our repository github will automatically deploy it to the url provided.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>github</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Developer On A Job Interview</title>
      <author>Tomas Tulka</author>
      <pubDate>Fri, 11 Dec 2020 08:11:25 +0000</pubDate>
      <link>https://dev.to/ttulka/developer-on-a-job-interview-5h7p</link>
      <guid>https://dev.to/ttulka/developer-on-a-job-interview-5h7p</guid>
      <description>&lt;p&gt;In the last few months, I was looking for a new job as a software developer.&lt;/p&gt;

&lt;p&gt;I attended various interviews, talked to a lot of diverse people, had to solve different tasks, answered plenty of questions, and asked at least as many.&lt;/p&gt;

&lt;p&gt;In this post, I will share with you what I have learned, and tell you some useful tips for doing well at your interview to get the job of your dreams.&lt;/p&gt;

&lt;p&gt;I won‚Äôt give you an exhaustive list of technical questions, brainteasers and riddles. Instead, I‚Äôll tell you how to make the most sense out of them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#software-today" class="anchor"&gt;
  &lt;/a&gt;
  Software Today
&lt;/h2&gt;

&lt;p&gt;Software development nowadays is &lt;strong&gt;less about technology and more about people&lt;/strong&gt;. Good communication skills, knowledge sharing, and team spirit are essential qualities of software professionals in modern organizations. Software becomes more and more a people problem.&lt;/p&gt;

&lt;p&gt;Good code is driven by simple, easy-to-understand design with human factors in mind. Perfectly &lt;strong&gt;working code is no more enough&lt;/strong&gt;, as far as it is incomprehensible to other teammates. Great programming skills are not sufficient as far as you‚Äôre unable to &lt;strong&gt;communicate your work&lt;/strong&gt; clearly.&lt;/p&gt;

&lt;p&gt;This fact has been slowly understood by software companies and the interview process has been adapted accordingly. That is, a flawlessly coded quick-sort algorithm is no guarantee for getting a job offer anymore, and it is actually good.&lt;/p&gt;

&lt;p&gt;You spend a great piece of life at work. Not only is it no fun to spend this time with asocial, uncommunicative, or even rude, geeks; it is also pretty unproductive at the same time. Software development became too extensive to fit into a single head entirely, and there are &lt;a href="https://blog.ttulka.com/devops-ad-absurdum"&gt;no unicorns&lt;/a&gt;. &lt;strong&gt;Teamwork is a fundamental prerequisite for a successful (software) product&lt;/strong&gt;. From experience, just one unsuitable person on a team could cause immeasurable damage to the outcome. I bet you know exactly what I'm talking about.&lt;/p&gt;

&lt;p&gt;The extra effort at the interview to ensure you‚Äôre a good match for the team means the team is a good fit for you, too.&lt;/p&gt;

&lt;p&gt;Soft skills became an important part of your professional profile. Some of them are even more significant than the hard skills you put first in your resume. In fact, &lt;strong&gt;any technology can be learned, but it‚Äôs really difficult to unlearn being a jerk&lt;/strong&gt;. Deep knowledge of a particular programming language is not as valuable if you can‚Äôt use your potential as a team member to create a great product together. &lt;strong&gt;Crucial is the ability and will to learn, communicate, and exchange knowledge&lt;/strong&gt; with others.&lt;/p&gt;

&lt;p&gt;Reputable organizations today are not looking for lone wolves or cowboy developers. Rather, team players and excellent communicators are appreciated.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tell-me-about-yourself" class="anchor"&gt;
  &lt;/a&gt;
  Tell me about yourself
&lt;/h2&gt;

&lt;p&gt;A few honest sentences about yourself, your background, &lt;strong&gt;personal values&lt;/strong&gt;, and what you are looking for, a nice photo, hobbies and interests are more valuable than an overwhelming list of technologies and programming languages you touched since your studies.&lt;/p&gt;

&lt;p&gt;Of course, hard skills are still very important, but your professional profile should tell your potential employer &lt;em&gt;who&lt;/em&gt; you are. Forget things like UML or XML, no one is interested, strike off all exotic languages you used to be programming in as a kid, you barely remember them, focus on what‚Äôs important and &lt;strong&gt;relevant to the position&lt;/strong&gt; you currently apply for.&lt;/p&gt;

&lt;p&gt;Structure your profile hierarchically, start with concepts and then go deeper. Have you designed distributed systems or developed machine learning algorithms? Start with telling that. Continue by diving into concrete technologies, languages, methods. Mention them in the list of working experiences, too. &lt;strong&gt;Be consistent and integrous&lt;/strong&gt;. Focus, structure, remove fluff.&lt;/p&gt;

&lt;p&gt;Your professional profile is a sample of your work. Being done poorly tells your potential employer you‚Äôre probably no good worker. Your professional profile must be professional.&lt;/p&gt;

&lt;p&gt;Sometimes an obligatory question comes up:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Characterize yourself using only three words.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Albeit such a question would fit more to an interview for a job in the marketing department, it‚Äôs a good idea to be able to characterize yourself with a few significant properties or values. &lt;em&gt;Open, creative and focusing&lt;/em&gt; could be a good try. You can explain those in detail afterward, ideally with some practical examples.&lt;/p&gt;

&lt;p&gt;I personally characterize myself with the help of three values I identify with: &lt;em&gt;people, quality and learning&lt;/em&gt;. People stands for teamwork, knowledge exchange, trust, and intensive transparent communication not only within the team, but also between teams; quality stands for simplicity, maintainability, product-thinking, and focus on purpose; and finally learning stands for continuous improvement, and exploring new things.&lt;/p&gt;

&lt;p&gt;Also, it might be nice to have a life motto that drives your personal characteristics on a very abstract level. Like this one by Albert Einstein: &lt;em&gt;‚ÄúEverything should be made as simple as possible, but no simpler.‚Äù&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#personal-integrity" class="anchor"&gt;
  &lt;/a&gt;
  Personal integrity
&lt;/h2&gt;

&lt;p&gt;It‚Äôs easy to make things up. There‚Äôs mostly no way how the interviewers could possibly check if all that you say is true. Well, there is a way. We can call it an &lt;em&gt;integrity check&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;First, &lt;strong&gt;there‚Äôs no point in lying&lt;/strong&gt;. Don‚Äôt do that, I mean it. If you make a different person from yourself, that person would be expected to remain as such afterward. But one can‚Äôt lie forever. Soon or later, the truth comes up and the consequences are drastic. Losing the job and all the opportunities that you had to cancel due to this one and that could‚Äôve matched your dreams much better. Broken trust, shame, and a black hole in your resume. Definitely not worth it. What‚Äôs more, telling the truth is much easier as you don‚Äôt have to memorize anything.&lt;/p&gt;

&lt;p&gt;Even if everything you say is true, you have to be ready to prove it. You have to watch the integrity of your words. For each and every statement there must be a concrete example from your experience.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;You say, you‚Äôre creative? Tell me about your best ideas in your previous work. You say, you‚Äôre a leader? Tell me a story where you take over a control. Are you good at conflicts resolving? Tell me about a conflict in your team and how you managed to resolve it. You like learning new things? Tell me about a piece of technology you read about recently.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Questions about resolving conflicts and disagreements in the team or on the organization level are very popular among interviewers. They help them to test your integrity as a team player. A true &lt;strong&gt;team player welcomes diversity and disagreements&lt;/strong&gt;. Different opinions are opportunities for exchange, to learn something new, or to refine your own thoughts. Conflicts should never become purely emotional and must be resolved rationally through discourse with the whole team.&lt;/p&gt;

&lt;p&gt;As the ability and will to learn is one of the most important characteristics of a good developer, you may expect a lot of questions touching on this aspect:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;How do you learn new things? What was the last lecture you attended and what did you learn? How would you explain a particular technology to a younger coworker?&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Another interesting sort of questions focuses on legacy software. While, as the old joke says, a new JavaScript framework is born every day, a successful software product could live over ten years. This means most stable &lt;strong&gt;companies deal with legacy systems of some kind&lt;/strong&gt;. A question about how you get on with this is definitely about to come.&lt;/p&gt;

&lt;p&gt;While it is good to be keen on shiny new stuff, it‚Äôs necessary not to forget about the purpose. You should not adopt a new technology just because of the technology itself, but because &lt;strong&gt;it solves a problem you actually have&lt;/strong&gt;. &lt;a href="https://blog.ttulka.com/you-are-not-gonna-need-microservices"&gt;Microservices&lt;/a&gt; or machine learning are cool, but not a silver bullet. You should aim to use good and &lt;strong&gt;appropriate technology that fits your context&lt;/strong&gt;, and communicate it so towards your interviewers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Be honest with your weaknesses&lt;/strong&gt; as well. Don‚Äôt be afraid to admit that you don‚Äôt know everything. It‚Äôs perfectly fine to be aware of room for improvements and way better than being caught lying. Much more important is to show the will to learn and to get continuously better.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-how-and-why" class="anchor"&gt;
  &lt;/a&gt;
  What, how and why
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;What&lt;/em&gt; and &lt;em&gt;how&lt;/em&gt; questions are familiar to every developer. There are plenty of interview questions over the Internet everyone can just print and learn at bedtime as a poem:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;How does merge-sort work? What transaction isolation levels do you know? How to check two strings for equality? What does &lt;a href="https://blog.ttulka.com/solid-principles-in-java-by-example"&gt;SOLID&lt;/a&gt; mean?&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I bet you have already been asked all of those questions and you definitely know the correct answers by heart. As this is good, it‚Äôs not enough.&lt;/p&gt;

&lt;p&gt;Good companies will test your &lt;strong&gt;understanding and solving skills rather than encyclopedic knowledge&lt;/strong&gt; of definitions and algorithms. That is, you should also expect why questions, such as:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Why is bubble sort ineffective and why is it not possible to fix it? In which cases could bubble-sort do make sense? Why is the Repeatable reads isolation level not sufficient to avoid phantom reads? Why do we not use the Serializable level everywhere? Why is the == operator not adequate for checking strings equality in Java? Why does the Dependency inversion principle lead to loosely decoupled code?&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Knowing what and how is necessary, but a good engineer must know why, too.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#analyze-be-creative" class="anchor"&gt;
  &lt;/a&gt;
  Analyze, be creative
&lt;/h2&gt;

&lt;p&gt;A lot of questions are not meant to be answered directly or even correctly. Many of them have an &lt;strong&gt;open ending or no solution&lt;/strong&gt; at all. Interviewers are interested more in your thought process and solving skills than in a precise answer.&lt;/p&gt;

&lt;p&gt;There is no shame in taking some time to think. Nobody expects you to come up with a brilliant solution instantly. Take a deep breath, &lt;strong&gt;analyze the question, be creative, and share your thoughts&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;What profession would you do if you were not a developer? What is your favorite phone app? What color would you be?&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There is no correct answer to the above questions. They all test your creativity and ability to think out of the box. Analyze the hypothetical situation first:&lt;/p&gt;

&lt;p&gt;Maybe you always wanted to be a musician and now you have an opportunity to sell your dream. But if you always wanted to be a programmer it‚Äôs unlikely that you have a list of alternative professions in mind. Why would you be someone else? Maybe because there is no such job whatsoever! So, what would you likely be in medieval years? Or in a parallel universe where physical laws are not constant and humans communicate via music. Show that &lt;strong&gt;you‚Äôre not boring&lt;/strong&gt;. Nobody wants to work with a tedious person.&lt;/p&gt;

&lt;p&gt;Some questions are put unclearly on purpose and &lt;strong&gt;interviewers expect you to ask additional questions&lt;/strong&gt; to make the problem clear. Take the interviewers into account as equal partners, try to work it out together, collaborate:&lt;/p&gt;

&lt;p&gt;What does ‚Äúfavorite‚Äù actually mean? Most beloved or mostly used? What would be the app I would keep if I could keep only one? You can talk about the newest game you had really fun playing, or be practical saying that your favorite app is the internet browser because you can do practically everything with it.&lt;/p&gt;

&lt;p&gt;There is no need to study psychology and emotional values hidden under different colors. Your interviewers did certainly not. If you want, say you would like to be blue as it is your favorite color remaining you of the sky. Or maybe yellow like the dress of your child on its first school day. You may also say that you‚Äôd like to be white because white is used only little and by only true artists, which means you would participate in as many great paintings as possible. Options are infinite.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#youre-supposed-to-be-happy-too" class="anchor"&gt;
  &lt;/a&gt;
  You‚Äôre supposed to be happy too
&lt;/h2&gt;

&lt;p&gt;The task of an interviewer is to find out if you‚Äôre a good fit for the team and the organization she represents. Your task is to figure out &lt;strong&gt;if the team and the organization is a good fit for you&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This aspect of the interview is often underrated which can easily lead to disappointment, or even anxiety and burnout. &lt;strong&gt;You spend at work way too much time to be unhappy there&lt;/strong&gt;. If nothing else, please, remember this.&lt;/p&gt;

&lt;p&gt;Make sure that the job fits your expectations and there is consistency in what the interviewer offers. &lt;strong&gt;Ask questions&lt;/strong&gt;. A lot of them. &lt;strong&gt;Show your interest&lt;/strong&gt; in the organization, the team, and the product. Ask about company values and check if they match yours. Ask about challenges and how they solve them. Check answers for openness and consistency. I used to ask this very same question to every interviewer:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;What is the worst thing about working for the company?&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Some companies would promise the earth but the reality turns out to be very different. Do they have concrete examples to share with you? How does the organization support your ambitions and needs? Do they offer lectures and training? Will you have time to experiment and try new things out?&lt;/p&gt;

&lt;p&gt;Interviewers often over-use buzzwords they barely understand. Try to address this as well:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;What do you understand under Agile? What does DevOps mean to you? How do you do Scrum?&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It‚Äôs always a good idea to ask about your potential role and organizational structure. An unclear and inconsistent understanding of the role responsibilities, high and opaque hierarchy, or cumbersome processes are signs of a dysfunctional organization.&lt;/p&gt;

&lt;p&gt;To show interest brings points for you as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-do-your-homework" class="anchor"&gt;
  &lt;/a&gt;
  How to do your homework
&lt;/h2&gt;

&lt;p&gt;Last but not least is a technical task, usually given as homework with limited time in the first phases of the interview process.&lt;/p&gt;

&lt;p&gt;This kind of examination became very popular the last time and replaced typical multiple-choice tests almost completely.&lt;/p&gt;

&lt;p&gt;The point is not only to see your skills in action, it‚Äôs also a good check of your thinking in an unusual situation.&lt;/p&gt;

&lt;p&gt;What is so different about such homework? The conditions are pretty unnatural. It‚Äôs no real problem you have to solve. You‚Äôre missing context and typically a lot of other information. You might ask additional questions, but &lt;strong&gt;you‚Äôre also supposed to make assumptions&lt;/strong&gt; by yourself.&lt;/p&gt;

&lt;p&gt;There are several rules I‚Äôd recommend:&lt;/p&gt;

&lt;p&gt;First, if you‚Äôve got some code to extend, study it. &lt;strong&gt;Never do any changes&lt;/strong&gt;, except you have found a bug or been told otherwise.&lt;/p&gt;

&lt;p&gt;Don‚Äôt over-engineer. This is time to shine, but it doesn‚Äôt mean you should use every piece of technology you know. Rather, make your solution extensible, so it‚Äôs open for further improvements. You don‚Äôt have to use each design pattern from the GoF catalog, it‚Äôs much better to use only one, but properly. &lt;strong&gt;Use best practices, but keep it simple&lt;/strong&gt;. Think in terms of MVP (Minimal Viable Product): What‚Äôs the minimal solution it could possibly work?&lt;/p&gt;

&lt;p&gt;Always &lt;strong&gt;write tests&lt;/strong&gt;. Not only tests increase your assurance that the code is doing well, but they will also make you more productive and help you get things done quickly. Every change, every requirement and condition must be found in the test suite.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Use static code analysis tools&lt;/strong&gt;. In this case, the tool that comes along with your IDE will be sufficient. This will be probably the first thing your reviewers will do. Don‚Äôt let them find any code smells. It‚Äôs easy money.&lt;/p&gt;

&lt;p&gt;Consider options, make notes. Your solution will be discussed later, so it‚Äôs important to know why you did as you did. There could be more than one right solution, but it‚Äôs important to explain why you have chosen this over that. Everything is about trade-offs, you should &lt;strong&gt;understand the benefits&lt;/strong&gt; of your solution and &lt;strong&gt;be aware of its drawbacks&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary" class="anchor"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Let‚Äôs summarize the most important points to be aware of when preparing for an interview as a software developer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Software today is less about technology and more about people.&lt;/li&gt;
&lt;li&gt;Working code is no more enough, you have to communicate your work.&lt;/li&gt;
&lt;li&gt;Teamwork is a fundamental prerequisite for success.&lt;/li&gt;
&lt;li&gt;Ability and will to learn is crucial.&lt;/li&gt;
&lt;li&gt;Your personal profile is at least as important as your hard skills.&lt;/li&gt;
&lt;li&gt;Be honest, consistent and integrous. Don‚Äôt lie.&lt;/li&gt;
&lt;li&gt;A good engineer must know why and understand trade-offs.&lt;/li&gt;
&lt;li&gt;Analyze, be creative, and share your thoughts.&lt;/li&gt;
&lt;li&gt;Ask questions, show interest.&lt;/li&gt;
&lt;li&gt;When working on a task, use best practices, but keep it simple.&lt;/li&gt;
&lt;li&gt;The job must fit you.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I wish you good luck with the interview, getting your dream job, and having a lot of fun developing software!&lt;/p&gt;

</description>
      <category>career</category>
      <category>agile</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to Use Airtable as a Production Database (Analyzing Airtable Performance)</title>
      <author>Jacob Lee</author>
      <pubDate>Fri, 11 Dec 2020 07:56:03 +0000</pubDate>
      <link>https://dev.to/hacubu/how-to-use-airtable-as-a-production-database-analyzing-airtable-performance-41e9</link>
      <guid>https://dev.to/hacubu/how-to-use-airtable-as-a-production-database-analyzing-airtable-performance-41e9</guid>
      <description>&lt;p&gt;I've been an &lt;a href="https://airtable.com"&gt;Airtable&lt;/a&gt; user for around three years now, and over that span I've recommended it to more people than any other SaaS product. It "Just Works‚Ñ¢" ‚Äî while it has its limitations and doesn't provide all the flexibility of a relational database, the sheer quality of the UX often makes up for any shortcomings. Like &lt;a href="https://dev.to/hacubu/how-to-use-google-sheets-as-a-database-responsibly-3ohk"&gt;Google Sheets&lt;/a&gt;, Airtable particularly shines as a backend for apps where non-technical team members might need to examine or edit data, and the structure it provides through features like types, access control, views, and computed fields make working with it pleasant.&lt;/p&gt;

&lt;p&gt;In this article, we'll go over:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to use Airtable as a database with some pseudo-join capabilities&lt;/li&gt;
&lt;li&gt;How to set up an HTTP-accessible API for your Airtable base that you can send requests to from a frontend&lt;/li&gt;
&lt;li&gt;Some trade-offs to consider when selecting Airtable for your project (like how the Airtable API scales)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DrC-e-7S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/z2cyjcrjk6frlsltanx6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DrC-e-7S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/z2cyjcrjk6frlsltanx6.png" alt="The example Airtable base"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Returns all records from the "My Books" table with genre "Fantasy", case-sensitive&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;curl &lt;span class="nt"&gt;--request&lt;/span&gt; GET &lt;span class="nt"&gt;--url&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="s1"&gt;'https://YOUR_USERNAME.api.stdlib.com/airtable-db-examples@dev/select/my_books/genre/is/?query=Fantasy'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Rhythm of War"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Genre"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Fantasy"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Published On"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2020-11-17"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Author Id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"rec00000000000000"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Author"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Brandon Sanderson"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"The Doors of Stone"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Genre"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Fantasy"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Published On"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Author Id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"rec00000000000000"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Author"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Patrick Rothfuss"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To host the sample app and handle authentication to the Airtable API, we'll use &lt;a href="https://autocode.com"&gt;Autocode&lt;/a&gt;, a Node.js app platform and editor with built-in autocomplete. Both &lt;a href="https://airtable.com/pricing/"&gt;Airtable&lt;/a&gt; and &lt;a href="https://autocode.com/pricing/"&gt;Autocode&lt;/a&gt; are free to start, so let's dive in!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tldr-30s" class="anchor"&gt;
  &lt;/a&gt;
  TL;DR (30s)
&lt;/h1&gt;

&lt;p&gt;First, create your own copy of the &lt;a href="https://airtable.com/addBaseFromShare/shrkGIiwUFcIz4Te4"&gt;demo Airtable base by clicking here&lt;/a&gt; and following the prompt.&lt;/p&gt;

&lt;p&gt;Once you've done that, &lt;a href="https://autocode.com/app/airtable/airtable-db-examples/"&gt;click here to open the Airtable cookbook in Autocode&lt;/a&gt;, then press the green button to install the cookbook to your Autocode account. When asked to link an Airtable base, supply your API key and select the base you just cloned.&lt;/p&gt;

&lt;p&gt;After that, you're live! You can try hitting some of the endpoints from your browser or cURL right away (the URLs will look something like &lt;code&gt;https://YOUR_USERNAME.api.stdlib.com/airtable-db-examples@dev/select/my_books/genre/is/?query=Fantasy&lt;/code&gt;. You can also check out the &lt;a href="https://autocode.com/app/airtable/airtable-db-examples/"&gt;README for the Airtable cookbook&lt;/a&gt; for more concrete examples.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#limitations" class="anchor"&gt;
  &lt;/a&gt;
  Limitations
&lt;/h1&gt;

&lt;p&gt;Now that we've got a basic example set up, let's talk about some things you should consider when choosing between Airtable and other solutions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#performance" class="anchor"&gt;
  &lt;/a&gt;
  Performance
&lt;/h2&gt;

&lt;p&gt;To gauge performance, I ran three experiments: &lt;strong&gt;single record retrieval&lt;/strong&gt;, &lt;strong&gt;full table retrieval&lt;/strong&gt;, and a &lt;strong&gt;50,000 record table query test&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#single-record-retrieval" class="anchor"&gt;
  &lt;/a&gt;
  Single Record Retrieval
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#methodology" class="anchor"&gt;
  &lt;/a&gt;
  Methodology
&lt;/h4&gt;

&lt;p&gt;For this experiment, I created tables containing various numbers of records with a with an autonumber field called &lt;code&gt;Key&lt;/code&gt; and a text field called &lt;code&gt;Value&lt;/code&gt;. I populated each &lt;code&gt;Value&lt;/code&gt; with a single character. I then changed an arbitrary record's &lt;code&gt;Value&lt;/code&gt; field to the string &lt;code&gt;"testing"&lt;/code&gt;, then queried for records matching that &lt;code&gt;Value&lt;/code&gt; using the &lt;a href="https://autocode.com/lib/airtable/query"&gt;airtable.query&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#results" class="anchor"&gt;
  &lt;/a&gt;
  Results
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yqGpR3uo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/apiwaq9iyazghds99cfz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yqGpR3uo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/apiwaq9iyazghds99cfz.png" alt="Single record retrieval test results"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Airtable API performed spectacularly on this test, retrieving a single record in about the same time for table sizes from 10 to 50,000 records. There was a small increase in query time as the number of records in the table grew, but overall stayed fairly consistent. This result suggests that the Airtable API is well optimized for queries that return a small number of results.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#full-table-retrieval" class="anchor"&gt;
  &lt;/a&gt;
  Full Table Retrieval
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#methodology" class="anchor"&gt;
  &lt;/a&gt;
  Methodology
&lt;/h4&gt;

&lt;p&gt;For this experiment, I used the same tables as the previous experiment, but left the &lt;code&gt;where&lt;/code&gt; parameter blank in my &lt;a href="https://autocode.com/lib/airtable/query"&gt;airtable.query&lt;/a&gt; API call to select for all records in the table.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#results" class="anchor"&gt;
  &lt;/a&gt;
  Results
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DKnMEvBG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/h4eb42q10lovd16dpkus.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DKnMEvBG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/h4eb42q10lovd16dpkus.png" alt="Full table retrieval test results"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Airtable API performed worse on this test, crossing the 2s mark after retrieving 500 records and quickly becoming impractically slow after ~1,000 records.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#50000-record-table-queries" class="anchor"&gt;
  &lt;/a&gt;
  50,000 Record Table Queries
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#methodology" class="anchor"&gt;
  &lt;/a&gt;
  Methodology
&lt;/h4&gt;

&lt;p&gt;For this experiment, I wanted to see if querying with parameters would perform better than retrieving an entire table. Starting with the same table structure, I added a third field that I populated with the following (hacky) formula to simulate an even distribution of numbers (Airtable does not have a built-in random function):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;MOD((MOD(VALUE(RECORD_ID()), 50000) + 1) * {Key}, 50000)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;code&gt;{Key}&lt;/code&gt; is the autonumbered field we defined earlier. &lt;code&gt;RECORD_ID()&lt;/code&gt;, a function returning a random looking id that Airtable internally assigns each record, did not contain enough entropy on its own to evenly distribute numbers, and often evaluated to zero when evaluated as a number using the &lt;code&gt;VALUE()&lt;/code&gt; Airtable formula operator, hence the hack of adding 1.&lt;/p&gt;

&lt;p&gt;In practice, this formula returned values spread out sufficiently to ensure a roughly even distribution from 0 to 50,000 for each record, though using the generated values as random numbers for any important application is not recommended. I then queried the base for records where this third computed field was below a certain threshold to simulate a query matching a given number of "randomly selected" records.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sidenote:&lt;/strong&gt; For more on Airtable formula operators, &lt;a href="https://support.airtable.com/hc/en-us/articles/203255215-Formula-field-reference"&gt;check out their official reference here&lt;/a&gt;. The endpoints in the sample app all use &lt;a href="https://github.com/FunctionScript/KeyQL"&gt;KeyQL parameters&lt;/a&gt; to make queries, but if you'd prefer to query Airtable using formulas, you can use &lt;a href="https://autocode.com/lib/airtable/query/#records-find-formula"&gt;this endpoint on Autocode&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#results" class="anchor"&gt;
  &lt;/a&gt;
  Results
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e3nb0cQV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/l3mqzfz87yzr417oj71t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e3nb0cQV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/l3mqzfz87yzr417oj71t.png" alt="50,000 record table query test results"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The results for this test were similar to the full table retrieval test, showing that performance correlated mostly with the number of returned records.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusions" class="anchor"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h3&gt;

&lt;p&gt;The Airtable API's performance scales, surprisingly, with the number of records returned in a given query rather than the size of the table. Even at table sizes at plan limits, the Airtable API performs well for queries that return small numbers of records. Unfortunately, Airtable formulas don't have a built-in concept of pagination, and the &lt;a href="https://github.com/FunctionScript/KeyQL"&gt;KeyQL parameters translate to formulas&lt;/a&gt; under the hood, so the KeyQL limit parameter does not get around this issue.&lt;/p&gt;

&lt;p&gt;Adding extra fields to the records in the table seemed to have a negligible impact on performance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#capacity-and-throughput" class="anchor"&gt;
  &lt;/a&gt;
  Capacity and Throughput
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://support.airtable.com/hc/en-us/articles/115010928147-Airtable-plans#pro"&gt;Airtable's top non-enterprise plan&lt;/a&gt; is $24 a month and has an upper limit of 50,000 records per base. For free plan users, this limit is 1,200 records per base. &lt;/p&gt;

&lt;p&gt;Even for projects where you expect to exceed these limits, it may be better to avoid premature optimization and choose Airtable for ease-of-use, migrating if and when scale becomes a problem.&lt;/p&gt;

&lt;p&gt;Airtable sets a &lt;a href="https://community.airtable.com/t/api-request-daily-limit/34175"&gt;rate limit of 5 requests per second per base&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#relationships-between-tables" class="anchor"&gt;
  &lt;/a&gt;
  Relationships Between Tables
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#linked-record-fields" class="anchor"&gt;
  &lt;/a&gt;
  Linked Record Fields
&lt;/h3&gt;

&lt;p&gt;Airtable allows you to associate records in one table with records in another through a special type of field called a &lt;a href="https://support.airtable.com/hc/en-us/articles/360021502354#h_0c3d1a65-1f35-4e67-9b14-6213d4d2bca9"&gt;linked record field&lt;/a&gt;. In the &lt;a href="https://autocode.com/app/airtable/airtable-db-examples/"&gt;example base&lt;/a&gt; from the TL;DR above, the &lt;code&gt;Author Id&lt;/code&gt; field on the &lt;code&gt;My Books&lt;/code&gt; table is an example of a linked record field, associating records from the &lt;code&gt;My Books&lt;/code&gt; table with those from the &lt;code&gt;Authors&lt;/code&gt; table.&lt;/p&gt;

&lt;p&gt;If you're familiar with frameworks like &lt;a href="https://rubyonrails.org/"&gt;Ruby on Rails&lt;/a&gt; or &lt;a href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt;, you'll immediately think of a linked record as creating a relationship between the two tables. And it does, with the following caveats:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You can't select the field you're joining on. It must be the primary field for the table you're joining to.&lt;/li&gt;
&lt;li&gt;When querying via API, all relationships are represented as many-to-many and are returned as arrays.&lt;/li&gt;
&lt;li&gt;You can't make queries that use joins.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;#3&lt;/strong&gt; is a particular bummer if you were hoping to use Airtable as a drop-in replacement for something like &lt;a href="https://www.postgresql.org/"&gt;Postgres&lt;/a&gt;. However, there are some neat tricks we can use!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lookup-fields" class="anchor"&gt;
  &lt;/a&gt;
  Lookup Fields
&lt;/h3&gt;

&lt;p&gt;You may have also noticed in the example base that there is a field called &lt;code&gt;Author&lt;/code&gt; in the &lt;code&gt;My Books&lt;/code&gt; table. &lt;code&gt;Author&lt;/code&gt; is another special type of field called a &lt;a href="https://support.airtable.com/hc/en-us/articles/360042312194-Lookup-field-overview"&gt;lookup field&lt;/a&gt; which, as the name implies, allows a record in one table to lookup data from another field. In this case, the &lt;code&gt;Author&lt;/code&gt; field on records in &lt;code&gt;My Books&lt;/code&gt; contains the value of the &lt;code&gt;Name&lt;/code&gt; field for the proper linked record in the &lt;code&gt;Authors&lt;/code&gt; table. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DrC-e-7S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/z2cyjcrjk6frlsltanx6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DrC-e-7S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/z2cyjcrjk6frlsltanx6.png" alt="The example Airtable base"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Those familiar with database theory will red-flag this as &lt;a href="https://en.wikipedia.org/wiki/Database_normalization"&gt;denormalization of data&lt;/a&gt;¬†‚Äî essentially caching copies of a field in two places. This is usually difficult to deal with, but Airtable populates and updates lookup fields automatically, handling the complexity for you.&lt;/p&gt;

&lt;p&gt;Airtable returns the value of lookup fields along with other types of fields on a record. You can use the &lt;a href="https://autocode.com/lib/airtable/query"&gt;airtable.query&lt;/a&gt; API to query records by the value of a lookup field like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;bookQueryResult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;lib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;airtable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@1.0.0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;table&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;My Books&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Author__contains&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;
  &lt;span class="p"&gt;}]&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; As previously mentioned, Airtable treats lookup fields as arrays, even if they only contain one value. Therefore, you should prefer &lt;code&gt;contains&lt;/code&gt; or &lt;code&gt;icontains&lt;/code&gt; when querying them with &lt;a href="https://github.com/FunctionScript/KeyQL"&gt;KeyQL&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Through smart use of lookup fields, you can achieve results similar to basic joins in a traditional relational database. Of course, the more lookup fields you add, the more complex your base will become. If you find yourself needing to do this too often, it might make sense to make multiple queries for data from different tables or to choose a different database solution.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-it-works" class="anchor"&gt;
  &lt;/a&gt;
  How It Works
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://docs.autocode.com/introduction-to-autocode/components-of-autocode/api-authentication-management/"&gt;Autocode automatically handles authentication&lt;/a&gt; between your app and your Airtable account. When you link an Airtable base, Autocode associates your provided Airtable key and the linked base to your app's token (see the &lt;code&gt;const lib = require('lib')({token: process.env.STDLIB_SECRET_TOKEN})&lt;/code&gt; line at the top of all the endpoints in the sample cookbook). When you call an Airtable API with &lt;code&gt;await lib.airtable&lt;/code&gt;, Autocode makes the appropriate credentials available to the API, allowing it act as a proxy and use your credentials to call Airtable on your behalf.&lt;/p&gt;

&lt;p&gt;You'll notice each endpoint contains Node.js code that calls a method from the &lt;a href="https://autocode.com/lib/airtable/query/"&gt;airtable.query API&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;bookQueryResult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;lib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;airtable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@1.0.0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;table&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;My Books&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Genre__is&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;
  &lt;span class="p"&gt;}]&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Though there is an Airtable endpoint on Autocode that allows you to use &lt;a href="https://autocode.com/lib/airtable/query/#records-find-formula"&gt;Airtable formulas directly&lt;/a&gt;, the API calls in the sample project use the &lt;a href="https://github.com/FunctionScript/KeyQL"&gt;KeyQL query language&lt;/a&gt;. Check it out if you're interested in seeing more ways you can use KeyQL, including other available operators, and how it converts parameters to Airtable formulas.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#calling-endpoints" class="anchor"&gt;
  &lt;/a&gt;
  Calling Endpoints
&lt;/h1&gt;

&lt;p&gt;Because these API endpoints are accessible via HTTP, so you can make calls to them via fetch, cURL, or whatever other HTTP client you prefer. You can use your web browser directly:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EmUXd2dc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1xfinq574v7aic88rit1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EmUXd2dc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1xfinq574v7aic88rit1.png" alt="Airtable records returned from calling API endpoint from the web browser"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And you can even use the same &lt;a href="https://github.com/stdlib/lib-node"&gt;lib-node&lt;/a&gt; package that the endpoints use to call the Airtable APIs:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qo_e_dgM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/95ehwwp75lezndy58kdk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qo_e_dgM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/95ehwwp75lezndy58kdk.png" alt="Calling API endpoints with the lib package"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your endpoints will respond to either GET or POST requests. Parameters are parsed from the querystring for GET requests and the request body for POST requests. Each endpoint has default parameters set for the sake of clarity.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#endpoints" class="anchor"&gt;
  &lt;/a&gt;
  Endpoints
&lt;/h1&gt;

&lt;p&gt;For a full explanation of each endpoint in the example cookbook, along with usage examples, check out the &lt;a href="https://autocode.com/app/airtable/airtable-db-examples/"&gt;Autocode Airtable cookbook page&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#thank-you" class="anchor"&gt;
  &lt;/a&gt;
  Thank You!
&lt;/h1&gt;

&lt;p&gt;If you have any questions or feedback, the best thing to do is to join the Autocode community Slack channel. You can get an invite from the question mark tab in the top bar on &lt;a href="https://autocode.com"&gt;autocode.com&lt;/a&gt;. You can also reach out to me directly on Twitter &lt;a href="https://twitter.com/hacubu"&gt;@Hacubu&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you want to stay up to date on the latest from Autocode, you can follow &lt;a href="https://twitter.com/AutocodeHQ"&gt;@AutocodeHQ&lt;/a&gt;. Happy hacking!&lt;/p&gt;

</description>
      <category>airtable</category>
      <category>api</category>
      <category>database</category>
      <category>autocode</category>
    </item>
  </channel>
</rss>
