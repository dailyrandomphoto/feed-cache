<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Terraform Trello integration</title>
      <author>marco-bertelli</author>
      <pubDate>Wed, 11 Aug 2021 09:12:43 +0000</pubDate>
      <link>https://dev.to/marcobertelli/terraform-trello-integration-jjb</link>
      <guid>https://dev.to/marcobertelli/terraform-trello-integration-jjb</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--INhiQGOT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mtag4node77raa5hfk38.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--INhiQGOT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mtag4node77raa5hfk38.png" alt="amazing go"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hello to all, today we are going to watch my first open-source terraform custom provider in collaboration with Runelab (an italian custom software and project agency).&lt;/p&gt;

&lt;p&gt;but first what do this provider?&lt;/p&gt;

&lt;p&gt;allow you to create a workspace,board and custom list when you create a normal project on terraform!&lt;/p&gt;

&lt;p&gt;this automate the process of creating a trello workspace, board and lists when you create a normal project.&lt;/p&gt;

&lt;p&gt;see an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#other resources creations like server and cloudfront

  required_providers {
    trello = {
      source = "marco-bertelli/trello"
      version = "0.2.3"
    }
  }
}


resource "trello_board" "my-board-name" {
    key = "your-key"
  token = "your-token"
  workspace_name = "terraform-trello"
  board_name = "test"
  cards = ["new","todo","custom"]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;you must put this code into main.tf&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;how you can see you need a trello api key and a trello token of the account in who you want to create the workspace and board (you can find key and token here &lt;a href="https://trello.com/app-key"&gt;link&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;and later chose a name for workspace the board name and the lists names and is all! &lt;br&gt;
run:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;terraform init&lt;/li&gt;
&lt;li&gt;terraform apply 
and you will see all online&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;here the result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N9PyT1K9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vf8n301hixuhlmk7n7e1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N9PyT1K9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vf8n301hixuhlmk7n7e1.png" alt="final result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;if you like this like and share to the community!&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>terraform</category>
      <category>productivity</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Applications of Python</title>
      <author>Ifihan Olusheye</author>
      <pubDate>Wed, 11 Aug 2021 08:57:47 +0000</pubDate>
      <link>https://dev.to/ifihan/applications-of-python-g0b</link>
      <guid>https://dev.to/ifihan/applications-of-python-g0b</guid>
      <description>&lt;p&gt;It is well established that Python has become one of the most popular programming languages. Created by Guido Van Rossum in 1989, it is beginner friendly and easy to read. Python is also portable, extensible and embeddable, object-oriented and functional, and an interpreted high-level language. There are a lot of areas Python can be used and in this article, I will be talking about some of the applications. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-data-science"&gt;
  &lt;/a&gt;
  1. Data Science.
&lt;/h4&gt;

&lt;p&gt;Python can also be used to perform data analysis for specific purposes, extract, and draw insight from data. Libraries like Matplotlib and Seaborn to create beautiful graphs. Pandas for data manipulation, can be used.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-machine-learningai"&gt;
  &lt;/a&gt;
  2. Machine Learning/AI.
&lt;/h4&gt;

&lt;p&gt;In this field, Python is the most popular language used. With great libraries like Pandas, Numpy, TensorFlow, Matplotlib, Keras and the likes built with Python, ML applications are created with relative ease. Also, AI/ML applications require a language that is stable, secure, and flexible. Python has all these qualities.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-scripting"&gt;
  &lt;/a&gt;
  3. Scripting.
&lt;/h4&gt;

&lt;p&gt;Scripting is used to automate the execution of tasks that could be done by humans. Since the languages used for scripting are rather interpreted than compiled, Python comes in handy as it is known for speed. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#4-web-development"&gt;
  &lt;/a&gt;
  4. Web Development.
&lt;/h4&gt;

&lt;p&gt;When it comes to web development, Python can be your go-to tool. Why? This is because Python web frameworks are known for scalability, security, and flexibility. There are tons of libraries for web development but the most popular ones are: Django and Flask. We have other frameworks such as Bottle, Pyramid, Web2py, and CherryPy.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#5-web-scraping"&gt;
  &lt;/a&gt;
  5. Web scraping.
&lt;/h4&gt;

&lt;p&gt;For extracting information from the web, Python comes in handy for that. It is easy to use and has great tools for that. Some of them are: BeautifulSoup, Scrapy, Selenium, and Urlib.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#6-game-development"&gt;
  &lt;/a&gt;
  6. Game development.
&lt;/h4&gt;

&lt;p&gt;For developing interactive games, there are libraries for that in Python. PySoy (a 3D game engine that supports Python 3) and PyGame are two Python-based libraries used widely for game development.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#7-desktop-gui"&gt;
  &lt;/a&gt;
  7. Desktop GUI.
&lt;/h4&gt;

&lt;p&gt;Python offers many Graphical User Interfaces (GUIs) toolkits and frameworks that can be used in desktop application development. PyQt, Kivy, Tkinter, PyGUI, and PySide are some of the best Python-based GUI frameworks that allow developers to create highly functional GUIs.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#8-cybersecurity"&gt;
  &lt;/a&gt;
  8. Cybersecurity.
&lt;/h4&gt;

&lt;p&gt;Python is an extremely useful programming language for cybersecurity professionals because it can perform a multitude of cybersecurity functions, including malware analysis, scanning, and penetration testing.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#9-raspberry-pi"&gt;
  &lt;/a&gt;
  9. Raspberry pi.
&lt;/h4&gt;

&lt;p&gt;As Python is known for its versatility, it can also be used to program a Raspberry pi. The Raspberry Pi Foundation specifically selected Python as the main language because of its power, versatility, and ease of use. Python comes preinstalled on Raspbian, so you‚Äôll be ready to start from the get-go.&lt;/p&gt;

&lt;p&gt;With this article, it is safe to say that Python is very versatile and can perform almost any development.&lt;/p&gt;

&lt;p&gt;Picking it as your main language is highly recommended as it would make it easy to delve into or switch to any field without hassle.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>5 Best JetBrains Extensions for Refactoring &amp; Code QualityüèÜ</title>
      <author>Alex Omeyer</author>
      <pubDate>Wed, 11 Aug 2021 08:57:06 +0000</pubDate>
      <link>https://dev.to/alexomeyer/5-best-jetbrains-extensions-for-refactoring-code-quality-cpb</link>
      <guid>https://dev.to/alexomeyer/5-best-jetbrains-extensions-for-refactoring-code-quality-cpb</guid>
      <description>&lt;p&gt;If you care about code quality ‚Äî then these 5 JetBrains IDEs Plugins are for you! They'll help you clean up your code, refactor easier, report tech debt, and ultimately write quality code faster.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-stepsize"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://www.stepsize.com/r/jetbrains"&gt;Stepsize&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Stepsize is an editor-first issue tracker for a healthy codebase. It allows you to bookmark and report technical debt and code to refactor. If you come across code that requires refactoring but you don‚Äôt have time to do it right away you can make it visible and raise an issue directly in VS Code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-can-you-do"&gt;
  &lt;/a&gt;
  What can you do?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Create &amp;amp; view code issues directly from your editor&lt;/li&gt;
&lt;li&gt;Track &amp;amp; prioritise code improvements like technical debt&lt;/li&gt;
&lt;li&gt;Add key issues to your sprints with Jira integration&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Language support: any language&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---XyMIZVh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/na0qcdpr5vrjquyzoadg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---XyMIZVh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/na0qcdpr5vrjquyzoadg.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-codestream"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://plugins.jetbrains.com/plugin/12206-codestream-github-gitlab-bitbucket-prs-and-code-review"&gt;CodeStream&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;CodeStream eliminates context-switching and simplifies code discussion and code review by putting collaboration tools in your IDE.&lt;/p&gt;

&lt;p&gt;It supports pull requests from GitHub, BitBucket and GitLab, issue management from Jira, Trello, Asana and 9 others, and provides code discussion that ties it all together, integrated with Slack, MS Teams, email, and in-editor notifications.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-can-you-do"&gt;
  &lt;/a&gt;
  What can you do?
&lt;/h3&gt;

&lt;p&gt;‚Ä¢ Create, review and merge GitHub pull requests&lt;br&gt;
‚Ä¢ Get feedback on work-in-progress with pre-PR code reviews&lt;br&gt;
‚Ä¢ Have discussions with your teammates about your code&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Language support: any language&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---d_k6vdf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/acgk368dnxmjcegolqzh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---d_k6vdf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/acgk368dnxmjcegolqzh.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-refactorinsight"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://plugins.jetbrains.com/plugin/14704-refactorinsight"&gt;RefactorInsight&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;RefactorInsight enhances IDE representation of code changes with refactoring information that supports Java and Kotlin.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-can-you-do"&gt;
  &lt;/a&gt;
  What can you do?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Identify refactorings in Pull Requests&lt;/li&gt;
&lt;li&gt;Label the commits that contain refactorings&lt;/li&gt;
&lt;li&gt;See refactorings at any specific commit selected in the Git Log tab&lt;/li&gt;
&lt;li&gt;Look at the refactoring history for classes, methods, and fields&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Language support: Java and Kotlin&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6XRG28vp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lig1vd8fwtqj8ri4m935.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6XRG28vp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lig1vd8fwtqj8ri4m935.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-snyk-vulnerability-scanner"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://plugins.jetbrains.com/plugin/10972-snyk-vulnerability-scanner"&gt;Snyk Vulnerability Scanner&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Snyk‚Äôs Vulnerability Scanner helps you find and fix security vulnerabilities and code quality issues in your projects.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-can-you-do"&gt;
  &lt;/a&gt;
  What can you do?
&lt;/h3&gt;

&lt;p&gt;‚Ä¢ Find and fix security issues&lt;br&gt;
‚Ä¢ See a list of different types of issues, bucketed into categories,&lt;br&gt;
‚Ä¢ Get an actionable fix advice&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Language support: any language&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yhWBwWKP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mu58hqy2vip6msvd95xk.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yhWBwWKP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mu58hqy2vip6msvd95xk.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-spotbugs"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://plugins.jetbrains.com/plugin/14014-spotbugs"&gt;SpotBugs&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;IntelliJ SpotBugs plugin provides static byte code analysis to look for bugs in Java code from within IntelliJ IDEA. SpotBugs is a defect detection tool for Java that uses static analysis to look for more than 400 bug patterns, such as null pointer dereferences, infinite recursive loops, bad uses of the Java libraries and deadlocks. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-can-you-do"&gt;
  &lt;/a&gt;
  What can you do?
&lt;/h3&gt;

&lt;p&gt;‚Ä¢ Identify hundreds of serious defects in large applications within IntelliJ IDEA&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Language support: Java&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7xnSGmYh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gctj7mr3f64b7ztfjbfo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7xnSGmYh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gctj7mr3f64b7ztfjbfo.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;em&gt;What are your fav JetBrains extensions? Share in the comments belowüëá&lt;/em&gt;&lt;/p&gt;

</description>
      <category>refactorit</category>
      <category>codequality</category>
      <category>tooling</category>
      <category>codereview</category>
    </item>
    <item>
      <title>How To Increase The Size Of An Array In C.</title>
      <author>Gaurav</author>
      <pubDate>Wed, 11 Aug 2021 08:53:11 +0000</pubDate>
      <link>https://dev.to/crazysamurai/how-to-increase-the-size-of-an-array-in-c-50o0</link>
      <guid>https://dev.to/crazysamurai/how-to-increase-the-size-of-an-array-in-c-50o0</guid>
      <description>&lt;p&gt;To understand this better let's see how you would resize an array in JavaScript with a simple example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;someArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;someArray&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;someArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;someArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;someArray&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which when executed gives this output: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z3_2zhw8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2anjy8nfjlyohs2iz2j5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z3_2zhw8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2anjy8nfjlyohs2iz2j5.png" alt="Output of array"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This was a straight forward and easy example of how you would do that in JavaScript but this is not the case with some other languages like C.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So how would you do that in C?&lt;/strong&gt;&lt;br&gt;
I'm glad you asked. But first we need to understand what the problem is or why isn't it this simple in C.&lt;/p&gt;

&lt;p&gt;In C we need to understand that memory for an array is allocated at compile time and not at runtime which means we cannot increase it once the array size is declared in the code.&lt;br&gt;
We know to create an array we need a contiguous memory allocation or in simpler terms the next element in an array must be placed adjacent or after the previous one. After specifying the size of an array we can't determine if the memory location adjacent to the last element in an array is empty or not and hence we can't increase the size of the array.I hope that made sense. Now you might be thinking why were we able to do this in JavaScript, then the simple answer is JavaScript arrays are just objects with special properties. JavaScript is a wired language and I love it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Steps to get the job done:&lt;/strong&gt;&lt;br&gt;
1.Create an array (lets say p) with n items inside of it in heap.&lt;br&gt;
2.Create another array (lets say q) but an empty one which is larger than array p.&lt;br&gt;
3.Now copy the elements of p into q by a simple for loop.&lt;br&gt;
4.Delete the memory held by pointer p using &lt;code&gt;free(p);&lt;/code&gt; so that array p no longer exists.&lt;br&gt;
5.Assign the address of array q in p.&lt;br&gt;
6.Assign q the value NULL so that it can't access array q.&lt;br&gt;
7.And that's it. The array size is now increased.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Please read the code for better understanding.&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;Code&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&amp;lt;stdio.h&amp;gt;
#include&amp;lt;stdlib.h&amp;gt;
&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
&lt;span class="c1"&gt;//Two pointers for two different arrays in heap&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;//declaring array at pointer p&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//Printing the elements of p&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Array p: &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%d &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;//declaring array at pointer q&lt;/span&gt;
    &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="c1"&gt;//assigning elements of p to q&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//releasing the memory held by pointer p&lt;/span&gt;

    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//assigning the address held by q to p for the array&lt;/span&gt;
    &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//removing the address of array from q&lt;/span&gt;

&lt;span class="c1"&gt;//printing the elements of p&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Array q converted to p: &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%d &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cW2Q0ieu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g9ynmaxd7l33dmwgdieh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cW2Q0ieu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g9ynmaxd7l33dmwgdieh.png" alt="output of c"&gt;&lt;/a&gt;&lt;br&gt;
So we can clearly see that the array p in the beginning was of size 5 but after all that code its increased to 7.&lt;br&gt;
&lt;em&gt;The 0 at the end of the array after size increase is added by C automatically if no data is entered at that index.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let's understand with this example.&lt;/strong&gt;&lt;br&gt;
Let a guy named P has a car (array 1). But now he has kids due to which he needs a bigger car. He has a  friend named Q who is moving to a different country and wants to sell his car (array 2). P realizes that his friend's car will be just the perfect size for him so he makes his friend Q an offer and buys his car (array2) and Q leaves the country &lt;code&gt;q=NULL;&lt;/code&gt;. Now P has 2 cars and since he doesn't need his old car (array 1) he gets rid of it &lt;code&gt;free(p);&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I hope this was clear and easy to understand. Thanks for your time.&lt;/p&gt;

</description>
      <category>c</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>Best programming languages to learn as a begginer</title>
      <author>Luca Predoi</author>
      <pubDate>Wed, 11 Aug 2021 08:44:56 +0000</pubDate>
      <link>https://dev.to/luca_predoi/best-programming-languages-to-learn-as-a-begginer-277p</link>
      <guid>https://dev.to/luca_predoi/best-programming-languages-to-learn-as-a-begginer-277p</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;In this article, I am going to briefly present to you the top five programming languages to learn as a beginner programmer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Whatever programming language you choose, the most important thing is to learn the concepts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-c"&gt;
  &lt;/a&gt;
  5. C++
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.cplusplus.com/"&gt;https://www.cplusplus.com/&lt;/a&gt;&lt;br&gt;
Though old, c++ is one of the best programming languages out there. It's object-oriented and perfect for many use cases, including embedded programming, game programming, and GUI development. C++ adds OOP concepts to the c programming language. You may find it a bit hard to learn it as a first language, but it will help you establish a solid base in OOP and statically typed languages.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-go-go-lang"&gt;
  &lt;/a&gt;
  4. Go (Go Lang)
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://golang.org/"&gt;https://golang.org/&lt;/a&gt;&lt;br&gt;
Go is a fairly new programming language made by google. It's somewhat similar to python but it's statically typed. Go is one of the 4 tolerated programming languages at google and it's widely used. Go is used in many different cases, including back-end web development. Go strikes as an easy and elegant language to learn.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-python"&gt;
  &lt;/a&gt;
  3. Python
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.python.org/"&gt;https://www.python.org/&lt;/a&gt;&lt;br&gt;
Python is a widely use dynamically typed programming/scripting language. It's very popular and easy to learn with its English-like syntax. Python is very powerful and it can be used in many different scenarios, including web development, game dev(Godot), scripting, hacking, etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-java"&gt;
  &lt;/a&gt;
  2. Java
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.java.com/en/"&gt;https://www.java.com/en/&lt;/a&gt;&lt;br&gt;
Java is a very popular programming language, perhaps the most popular. It is widely used by enterprises because of its reliability. It runs on the JVM(Java Virtual Machine), meaning that it can run almost everywhere. It's used for backend web dev, game dev (ex. Minecraft Java Edition), GUI dev, and general software dev.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#honorable-mentions"&gt;
  &lt;/a&gt;
  Honorable mentions
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#rust"&gt;
  &lt;/a&gt;
  Rust
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.rust-lang.org/"&gt;https://www.rust-lang.org/&lt;/a&gt;&lt;br&gt;
Rust is a multi-paradigm, high-level, general-purpose programming language designed for performance and safety, especially safe concurrency. Rust is syntactically similar to C++ but can guarantee memory safety by using a borrow checker to validate references.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3QcIOGuA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/snbstu1qbdd9bqyk6tra.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3QcIOGuA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/snbstu1qbdd9bqyk6tra.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-javascript"&gt;
  &lt;/a&gt;
  1. Javascript
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.javascript.com/"&gt;https://www.javascript.com/&lt;/a&gt;&lt;br&gt;
Javascript, also known as ECMAScript, is one of the most popular programming languages out there. Javascript is dynamically typed and it runs natively on web browsers. It's very popular because you can use it anywhere (front end, backend, mobile, etc.). It has a very simple syntax and implements concepts from OOP and FP.&lt;/p&gt;

&lt;p&gt;==================&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Learning your first programming language is not easy, but you will eventually succeed and you will find the cs concepts transferable from a programming language to another.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Some Powerful Js One-liners</title>
      <author>Ajithmadhan</author>
      <pubDate>Wed, 11 Aug 2021 07:34:49 +0000</pubDate>
      <link>https://dev.to/ajithmadhan11/some-powerful-js-one-liners-600</link>
      <guid>https://dev.to/ajithmadhan11/some-powerful-js-one-liners-600</guid>
      <description>&lt;p&gt;Javascript is one of the most powerful language in this modern world.In this article we will go through some of the useful js one-liners.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#remove-duplicates-in-an-array"&gt;
  &lt;/a&gt;
  Remove Duplicates in an Array.
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;69&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//¬†[12, 23, 54, 69, 4, 12, 23]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;RemoveDuplicates&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;RemoveDuplicates&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// [12, 23, 54, 69, 4]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#generate-a-random-id"&gt;
  &lt;/a&gt;
  Generate a random Id
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;randomId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;randomId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ituzp41cq08&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#shuffle-an-array"&gt;
  &lt;/a&gt;
  shuffle an Array
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;alpha&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;A&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;B&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;C&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;D&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;E&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;F&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;alpha&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ["A", "B", "C", "D", "E", "F"]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;alpha&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// ["B", "A", "C", "E", "F", "D"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#swapping-two-variables"&gt;
  &lt;/a&gt;
  Swapping two variables
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 10 5&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 5 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#assign-multiple-variables"&gt;
  &lt;/a&gt;
  Assign Multiple variables
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Ajith&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//4 0.5 "Ajith" ¬†["a", "b"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#reverse-a-string"&gt;
  &lt;/a&gt;
  Reverse a String
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reverseString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reverseString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I love to code in javascript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;//tpircsavaj ni edoc ot evol I&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#merge-multiple-arrays"&gt;
  &lt;/a&gt;
  Merge multiple arrays
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;languages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;go&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;java&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;frameworks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;angular&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ruby on rails&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;larvel&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;combined&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;languages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;frameworks&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;combined&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//["js", "c", "go", "java", "react", "angular", "ruby on rails", "larvel"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#do-like-and-save-this-post-for-future-reference"&gt;
  &lt;/a&gt;
  Do like and save this post for future reference üöÄüíØ
&lt;/h2&gt;

</description>
      <category>javascript</category>
      <category>array</category>
      <category>react</category>
      <category>node</category>
    </item>
    <item>
      <title>Buenas practicas en CSS</title>
      <author>Marcial Ambriz</author>
      <pubDate>Wed, 11 Aug 2021 07:26:13 +0000</pubDate>
      <link>https://dev.to/marskdev/buenas-practicas-en-css-4a8d</link>
      <guid>https://dev.to/marskdev/buenas-practicas-en-css-4a8d</guid>
      <description>&lt;p&gt;Esta es una recopilaci√≥n que considero como buenas pr√°cticas en la codificaci√≥n de estilos en CSS. &lt;/p&gt;

&lt;p&gt;A lo largo de mi camino como desarrollador frontend he tratado de llevar un uso de pr√°cticas que me ayuden a optimizar y mejorar cada proyecto que hago.&lt;/p&gt;

&lt;p&gt;Estas son las actuales pr√°cticas que uso en mis proyectos:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#reinicio-de-estilos"&gt;Reinicio de estilos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#incluir-informacion-descriptiva"&gt;Incluir informaci√≥n descriptiva&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#definir-variables"&gt;Definir variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#organizar-elementos"&gt;Organizar elementos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#agrupar-selectores"&gt;Agrupar selectores&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#usar-anotaciones-en-componentes"&gt;Usar anotaciones en componentes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#combinar-elementos"&gt;Combinar elementos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#usar-valores-relativos"&gt;Usar valores relativos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#usar-shorthands"&gt;Usar shorthands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conocer-el-display-inicial-de-los-elementos"&gt;Conocer el display inicial de los elementos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#crear-primero-la-estructura-html"&gt;Crear primero la estructura HTML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#modularizar-los-estilos"&gt;Modularizar los estilos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#usar-metodologias-css"&gt;Usar metodolog√≠as CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#usar-prefijos-de-los-navegadores"&gt;Usar prefijos de los navegadores&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#validar-el-codigo"&gt;Validar el codigo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#minificar-el-codigo"&gt;Minificar el codigo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#utilizar-preprocesadores"&gt;Utilizar preprocesadores&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#utilizar-post-procesadores"&gt;Utilizar post procesadores&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#reinicio-de-estilos"&gt;
  &lt;/a&gt;
  Reinicio de estilos
&lt;/h2&gt;

&lt;p&gt;La mayor meta de un archivo de reinicio de estilos es reducir las incompatibilidades de los diferentes navegadores. Provee estilos generales que hacen m√°s f√°cil editar y personalizar elementos.&lt;/p&gt;

&lt;p&gt;El reinicio es esencial para eliminar las inconsistencias comunes de los navegadores tales como heights, headings, margins, font sizes, etc.&lt;/p&gt;

&lt;p&gt;El mayor reto en el desarrollo web frontend es la compatibilidad de los estilos entre los diferentes navegadores. Aqu√≠ es donde toma partido un reinicio de estilos.&lt;/p&gt;

&lt;p&gt;Un ejemplo de este tipo de hojas de reinicio es &lt;a href="https://github.com/necolas/normalize.css"&gt;Normalize.css de Nicolas Gallagher&lt;/a&gt;, es una forma moderna de reiniciar CSS. Este preserva los valores iniciales √∫tiles, a diferencia de otras hojas de reinicio de estilos. Adem√°s de eliminar las inconsistencias comunes de los navegadores tambi√©n corrige algunos errores.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#incluir-informacion-descriptiva"&gt;
  &lt;/a&gt;
  Incluir informacion descriptiva
&lt;/h2&gt;

&lt;p&gt;Es √∫til incluir informaci√≥n que nos permita conocer m√°s sobre el proyecto, datos tales como el autor, t√≠tulos, descripci√≥n, URLs informativas y otros de talles dentro de la hoja de estilos. Si el usuario o el desarrollador requiere una referencia o m√°s detalles en el futuro, le ser√° sencillo encontrar el contacto de la persona as√≠ como otros detalles que buscan.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/*
Project: Portfolio
Description: Portafolio web personal
Project URI: https://github.com/marskdev/portfolio
Author: Marcial Ambriz
Author URI: https://marskdev.netlify.app
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#definir-variables"&gt;
  &lt;/a&gt;
  Definir variables
&lt;/h2&gt;

&lt;p&gt;CSS ahora cuenta con &lt;a href="https://developer.mozilla.org/es/docs/Web/CSS/Using_CSS_custom_properties"&gt;propiedades personalizadas&lt;/a&gt; (variables) que podemos utilizar para guardar valores espec√≠ficos como typefaces, tama√±os, colores, incluso hasta configuraciones de propiedades.&lt;/p&gt;

&lt;p&gt;En sitios y proyectos donde hay una gran cantidad de estilos, en general con muchos valores repetidos. Como ejemplo, un color puede ser usado por distintos elementos que sin el uso de la variables ser√≠a una tarea tediosa cambiarlo en el futuro, por otro lado las variables nos permitir√° reemplazar el valor del color en todos los elementos que hagan referencia a la variable.&lt;/p&gt;

&lt;p&gt;Otro beneficio son los identificadores sem√°nticos haciendo que sea m√°s f√°cil de entender y nos permite identificar con mayor precisi√≥n cada valor que usemos en los estilos.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;/* theme */&lt;/span&gt;
    &lt;span class="py"&gt;--dark-base&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#282A3E&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;--base&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#2B2D42&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;--slate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#A8A8C7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;--light-slate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#C7C7DB&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c"&gt;/* Branding */&lt;/span&gt;
    &lt;span class="py"&gt;--primary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#F6BE5F&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;--gradient&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;109.8deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#F6BE5F&lt;/span&gt; &lt;span class="m"&gt;-6.35%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#FA9875&lt;/span&gt; &lt;span class="m"&gt;105.29%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c"&gt;/* Typeface */&lt;/span&gt;
    &lt;span class="py"&gt;--font-headline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'Lato'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;--font-body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'Open Sans'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--font-headline&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#organizar-elementos"&gt;
  &lt;/a&gt;
  Organizar elementos
&lt;/h2&gt;

&lt;p&gt;Organizar elementos en la hoja de estilos de arriba hacia abajo no es tan f√°cil como podr√≠a serlo. Sin una estructura que organice los elementos podr√≠a ser dif√≠cil localizar un elemento dentro de un desorden. &lt;/p&gt;

&lt;p&gt;Adem√°s crea una legibilidad incre√≠ble que hace mucho m√°s sencillo mantener en el futuro, permitir√° encontrar elementos m√°s r√°pidos. Adem√°s no sabes quien en el futuro podr√≠a necesitar mirar el c√≥digo.&lt;/p&gt;

&lt;p&gt;Una buena estructura puede iniciar incluyendo los estilos generales, seguidos por un comentario que divide un componente de otro e indicando el nombre dentro del comentario.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/****** General Styles *********/&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;‚Ä¶&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;h3&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;‚Ä¶&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;‚Ä¶&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;‚Ä¶&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;/****** Header Style *********/&lt;/span&gt;
&lt;span class="nf"&gt;#header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;‚Ä¶&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;/****** Navigation Style *********/&lt;/span&gt;
&lt;span class="nf"&gt;#nav&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;‚Ä¶&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;/****** Footer Style *********/&lt;/span&gt;
&lt;span class="nf"&gt;#footer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;‚Ä¶&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#agrupar-selectores"&gt;
  &lt;/a&gt;
  Agrupar selectores
&lt;/h2&gt;

&lt;p&gt;Si tienes diferentes selectores para un mismo componente, ser√≠a ideal agruparlos todos juntos para que parezca m√°s organizado. Esto te ayudar√° a localizar errores f√°cilmente.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Cylinder */&lt;/span&gt;

&lt;span class="nc"&gt;.cylinder&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;960px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.cylinder&lt;/span&gt; &lt;span class="nf"&gt;#new&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Arial&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.cylinder&lt;/span&gt; &lt;span class="nf"&gt;#tagline&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Verdana&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#usar-anotaciones-en-componentes"&gt;
  &lt;/a&gt;
  Usar anotaciones en componentes
&lt;/h2&gt;

&lt;p&gt;Es recomendable colocar detalles sobre el c√≥digo CSS que se est√° utilizando que revelen el prop√≥sito o describan el comportamiento de las propiedades en donde sea dif√≠cil a la vista entenderlo. Ser√° de mucha ayuda en componentes muy complejos.&lt;/p&gt;

&lt;p&gt;La mejor manera de hacerlo es colocar un comentario para cada grupo o componente. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#combinar-elementos"&gt;
  &lt;/a&gt;
  Combinar elementos
&lt;/h2&gt;

&lt;p&gt;Algunos elementos algunas veces comparten propiedades, en lugar de asignar propiedades a cada uno de forma independiente puedes optar por asignar las mismas propiedades a diferentes elementos, de esta forma evitar√°s la repetici√≥n de c√≥digo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;.headline&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;.title&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;tahoma&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#333&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#usar-valores-relativos"&gt;
  &lt;/a&gt;
  Usar valores relativos
&lt;/h2&gt;

&lt;p&gt;El uso de valores relativos como &lt;strong&gt;em&lt;/strong&gt; (font-size element) o &lt;strong&gt;rem&lt;/strong&gt; (root font-size element) en lugar de valores absolutos como &lt;strong&gt;px&lt;/strong&gt; (p√≠xeles) permite que los tama√±os sean m√°s flexibles en diferentes tama√±os de pantalla.&lt;/p&gt;

&lt;p&gt;Las unidades &lt;strong&gt;em&lt;/strong&gt; toman el valor de font-size del elemento donde se declara y &lt;strong&gt;rem&lt;/strong&gt; toma el valor del elemento ra√≠z.&lt;/p&gt;

&lt;p&gt;Para cambiar los valores de los elementos para diferentes tama√±os de pantalla solo necesitar√°s redefinir el valor de font-size del elemento ra√≠z a trav√©s de una media query cuando el tama√±o de la pantalla cambie y en consecuencia se ajustaran los demas tama√±os.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Default body font-size 16px

  Screen size | body | headline
     400px    | 19px |   42px
     800px    | 21px |   46px
*/&lt;/span&gt;

&lt;span class="nc"&gt;.headline&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2.2em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/*35px*/&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;118.8%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;800px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;131.3%&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#usar-shorthands"&gt;
  &lt;/a&gt;
  Usar shorthands
&lt;/h2&gt;

&lt;p&gt;Puedes reducir la cantidad de c√≥digo considerablemente usando shorthands. Para elementos como padding, margin, font, etc, puedes combinar estilos en una sola l√≠nea.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.noShorthand&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;7px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Arial&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;18px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.withShorthand&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt; &lt;span class="m"&gt;7px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nl"&gt;font&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600&lt;/span&gt; &lt;span class="m"&gt;18px&lt;/span&gt; &lt;span class="n"&gt;Arial&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conocer-el-display-inicial-de-los-elementos"&gt;
  &lt;/a&gt;
  Conocer el display inicial de los elementos
&lt;/h2&gt;

&lt;p&gt;Cada elemento HTML tiene un display inicial, dependiendo el tipo de  elemento, el valor inicial ser√° diferente por ello es importante entender el valor inicial de cada uno.&lt;/p&gt;

&lt;p&gt;Tener en cuenta este dato nos permitir√° saber cu√°ndo cambiar el display dependiendo el contexto. Algunas propiedades requieren de un display espec√≠fico como block para ser aplicadas.&lt;/p&gt;

&lt;p&gt;Estos son los elementos m√°s comunes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/*Default display: inline*/&lt;/span&gt;
&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;strong&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;em&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;img&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;br&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;abbr&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;acronym&lt;/span&gt;

&lt;span class="c"&gt;/*Default display: block*/&lt;/span&gt;
&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="nc"&gt;.h6&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;table&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;blockquote&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;form&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Encuentra la lista completa de los elementos &lt;a href="https://www.w3schools.com/htmL/html_blocks.asp"&gt;aqu√≠.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#crear-primero-la-estructura-html"&gt;
  &lt;/a&gt;
  Crear primero la estructura HTML
&lt;/h2&gt;

&lt;p&gt;Algunos desarrolladores crean los estilos al mismo tiempo que van creando la estructura HTML. &lt;/p&gt;

&lt;p&gt;Es l√≥gico crear ambos al mismo tiempo, pero actualmente podr√≠as ahorrar tiempo si primero creas la estructura. La raz√≥n de esto es que ya tienes en mente la estructura de todos los elementos del sitio. &lt;/p&gt;

&lt;p&gt;Crear primero la estructura te permite visualizar el sitio entero. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#modularizar-los-estilos"&gt;
  &lt;/a&gt;
  Modularizar los estilos
&lt;/h2&gt;

&lt;p&gt;Dependiendo de la complejidad del dise√±o y el tama√±o del sitio es recomendable separar los estilos en m√≥dulos en diferentes archivos que despu√©s se incorporan en uno solo importando los m√≥dulos, ser√° m√°s sencillo de mantener y editar que una √∫nica hoja gigante. &lt;/p&gt;

&lt;p&gt;Permitir√° gestionar los estilos que solo necesita una pagina especifica y evitar√° cargar estilos innecesarios para las diferentes vistas.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* This file: main.css */&lt;/span&gt;

&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="sx"&gt;url("components.css")&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="sx"&gt;url("layout.css")&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="sx"&gt;url("header.css")&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="sx"&gt;url("footer.css")&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#usar-metodologias-css"&gt;
  &lt;/a&gt;
  Usar metodologias CSS
&lt;/h2&gt;

&lt;p&gt;Las &lt;a href="https://dev.to/marskdev/metodologias-css-2pg2"&gt;metodolog√≠as CSS&lt;/a&gt; son una serie de indicaciones para escribir, modularizar, escalar y reutilizar c√≥digo que permiten resolver problemas de implementaci√≥n. Usarlo te ayudar√° a escalar el proyecto y mantenerlo en un futuro. Algunas metodolog√≠as son BEM, ITCSS, OOCSS, SMACSS, etc.&lt;/p&gt;

&lt;p&gt;Incluso podemos combinar metodolog√≠as tomando lo mejor de cada una.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usar-prefijos-de-los-navegadores"&gt;
  &lt;/a&gt;
  Usar prefijos de los navegadores
&lt;/h2&gt;

&lt;p&gt;Usar los prefijos crear√° mejor compatibilidad en el despliegue del sitio entre los diferentes navegadores. Omitir los prefijos es encontrarse con problemas de compatibilidad de las caracter√≠sticas implementadas en navegadores espec√≠ficos.&lt;/p&gt;

&lt;p&gt;Algunas de las propiedades no son compatibles con ciertos navegadores, las cuales necesitan de prefijos para ser usadas en algunos navegadores. Para ello tenemos que definir m√∫ltiples l√≠neas a la vez para una misma propiedad.&lt;/p&gt;

&lt;p&gt;Estos son los prefijos de los navegadores m√°s comunes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;iOS&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;-webkit-&lt;/span&gt;

&lt;span class="nt"&gt;Safari&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;-webkit-&lt;/span&gt;

&lt;span class="nt"&gt;Firefox&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;-moz-&lt;/span&gt;

&lt;span class="nt"&gt;Chrome&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;-webkit-&lt;/span&gt;

&lt;span class="nt"&gt;Opera&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;-o-&lt;/span&gt;

&lt;span class="nt"&gt;IE-Microsoft-Edge&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;-ms-&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#validar-el-codigo"&gt;
  &lt;/a&gt;
  Validar el codigo
&lt;/h2&gt;

&lt;p&gt;Siempre puedes usar &lt;a href="https://jigsaw.w3.org/css-validator/validator.html.en"&gt;W3C free CSS Validator&lt;/a&gt; para examinar si tu c√≥digo ha sido organizado y estructurado apropiadamente. Otro beneficio de usarlo es ayudarte a encontrar errores dentro del c√≥digo. Esto te ahorrar√° todo el tiempo que gastar√≠as encontrando el problema de manera manual.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#minificar-el-codigo"&gt;
  &lt;/a&gt;
  Minificar el codigo
&lt;/h2&gt;

&lt;p&gt;Si sientes que va lento mientras se cargan los estilos en los navegadores. Entonces es momento de intentar comprimir el tama√±o del archivo css. Muchos elementos incluyen saltos de l√≠nea y espacios en blanco, que nos permiten hacer de la hoja de estilos legible no son necesarios, estos podr√≠an crear un retraso al momento de cargar el sitio. &lt;/p&gt;

&lt;p&gt;Una forma de sacar el m√°ximo potencial de una hoja de estilos es eliminando esos elementos que a nosotros como desarrolladores nos permite leer con facilidad los estilos, al navegador no le importara si no se encuentran. Una forma de hacerlo es minificar el c√≥digo, esto har√° que la carga de estilos sea m√°s r√°pida.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#utilizar-preprocesadores"&gt;
  &lt;/a&gt;
  Utilizar preprocesadores
&lt;/h2&gt;

&lt;p&gt;El uso de un procesador puede ser beneficioso de varias maneras. Un procesador es una herramienta que te deja usar caracter√≠sticas avanzadas que no existen en CSS. Estas pueden ser variables, loops e incluso funciones.&lt;/p&gt;

&lt;p&gt;Los preprocesadores ayudan a organizar tu hoja de estilos de mejor manera. Tienen la habilidad de romper los estilos en peque√±os archivos reutilizables. Los cuales pueden ser importados dentro de otros o implementarlos de forma separada.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#anidar-selectores"&gt;
  &lt;/a&gt;
  Anidar selectores
&lt;/h3&gt;

&lt;p&gt;Otra gran ventaja es que mejora la legibilidad anidando los selectores. Es una simple y poderosa caracter√≠stica que CSS no tiene. La jerarqu√≠a estructural hace m√°s sencillo de visualizar.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sass"&gt;&lt;code&gt;&lt;span class="nc"&gt;.wrapper&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;.sidebar&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nc"&gt;.collapsed&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
            &lt;span class="nc"&gt;...&lt;/span&gt;
        &lt;span class="err"&gt;}&lt;/span&gt;
        &lt;span class="nc"&gt;.list&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;-item&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
                &lt;span class="nc"&gt;...&lt;/span&gt;
                &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;--active&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
                    &lt;span class="nc"&gt;...&lt;/span&gt;
                &lt;span class="err"&gt;}&lt;/span&gt;
            &lt;span class="err"&gt;}&lt;/span&gt;
        &lt;span class="err"&gt;}&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#vendor-prefix-autom%C3%A1ticos"&gt;
  &lt;/a&gt;
  Vendor prefix autom√°ticos
&lt;/h3&gt;

&lt;p&gt;Esta es una caracter√≠stica experimental. Como m√°s arriba explico, algunas propiedades no son compatibles con algunos navegadores.&lt;/p&gt;

&lt;p&gt;Para que nuestros estilos tengan soporte para la mayor√≠a de los navegadores, tenemos que definir m√∫ltiples l√≠neas a la vez para una misma propiedad.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sass"&gt;&lt;code&gt;&lt;span class="nc"&gt;.gradient&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;87&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;153&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;-moz-linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;top&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;87&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;153&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;41&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;137&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;216&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;124&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;202&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;51%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;125&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;185&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;232&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;-webkit-linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;top&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;87&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;153&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;41&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;137&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;216&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;124&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;202&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;51%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;125&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;185&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;232&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;bottom&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;87&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;153&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;41&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;137&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;216&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;124&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;202&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;51%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;125&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;185&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;232&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#utilizar-post-procesadores"&gt;
  &lt;/a&gt;
  Utilizar post procesadores
&lt;/h2&gt;

&lt;p&gt;Una mejor opci√≥n es un port-procesador. Este puede crear un paso de optimizaci√≥n adicional una vez que el CSS fue generado por un preprocesador. Unos de los m√°s populares post-preprocesadores son &lt;a href="https://postcss.org"&gt;postCSS&lt;/a&gt; o &lt;a href="https://cssnano.co"&gt;CSSnano&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Puedes usarlo para colocar prefijos autom√°ticamente a las propiedades, ya no tendr√°s que preocuparte por dar soporte a todos los navegadores. Ya no habr√° excusas de "Eso no lo puedo usar".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusi%C3%B3n"&gt;
  &lt;/a&gt;
  Conclusi√≥n
&lt;/h2&gt;

&lt;p&gt;El uso de estas pr√°cticas te ayudar√°n a optimizar y escribir estilos CSS que te brindar√°n ventajas y beneficios aumentando la calidad de tus proyectos. Adem√°s evitar√°n malas pr√°cticas que podr√≠an perjudicar tu proyecto.&lt;/p&gt;

&lt;p&gt;Entre los beneficios se encuentran: una escritura r√°pida y lectura legible, mayor soporte entre navegadores, optimizaci√≥n de c√≥digo, mejor escalabilidad y mantenimiento sencillo en el futuro.&lt;/p&gt;

&lt;p&gt;Dime que opinas y si tienes otra buena pr√°ctica compartela.&lt;/p&gt;

&lt;p&gt;Puedes encontrarme en otros sitios como &lt;a href="https://twitter.com/marskdev/"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.instagram.com/marskdev/"&gt;Instagram&lt;/a&gt; y &lt;a href="https://www.linkedin.com/in/marskdev/"&gt;Linkedin&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>html</category>
    </item>
    <item>
      <title>üî• React Hooks.üòé</title>
      <author>Shaik Dawood</author>
      <pubDate>Wed, 11 Aug 2021 07:23:38 +0000</pubDate>
      <link>https://dev.to/dawoodxp97/react-hooks-5eop</link>
      <guid>https://dev.to/dawoodxp97/react-hooks-5eop</guid>
      <description>&lt;p&gt;Hello everyone,üëã&lt;/p&gt;

&lt;p&gt;In this article we'll discuss about React Hooks. Before the release of React Hooks, its functional components were a bit limited in usage. I mean, when it comes to working with State, context API, and some Lifecycle methods there was nothing we could do.&lt;br&gt;
But, starting from React 16.8, we have a lot more flexibility to reuse an existing piece of code.&lt;/p&gt;

&lt;p&gt;‚ú®Hooks are the new feature introduced in the React 16.8 version. It allows you to use state and other React features without writing a class. Hooks are the functions which "hook into" React state and lifecycle features from function components.&lt;/p&gt;

&lt;p&gt;‚ú® Hooks don't work inside class components. They let you use React without the class.&lt;/p&gt;

&lt;p&gt;‚ú® Hooks will reduce your component size significantly and have many other benefits.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-rules-of-using-hooks"&gt;
  &lt;/a&gt;
  üî• 3 Rules of using Hooks:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You can use hooks only inside a &lt;strong&gt;function components&lt;/strong&gt;. Not inside class components because classes already have features what hooks enable you to do.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You should call hooks only at the &lt;strong&gt;Top Level&lt;/strong&gt; of the function. Don't call Hooks inside loops, conditions, or nested functions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There is just one other valid place to call Hooks is your &lt;strong&gt;Custom Hooks&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's get Started with the top most great React Hooks.üî•&lt;/p&gt;

&lt;p&gt;‚ö° 1. &lt;strong&gt;useState( ) Hook:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;üëâ The useState( ) hook lets you add react state to function components. So function components are &lt;strong&gt;no longer&lt;/strong&gt; stateless.&lt;/p&gt;

&lt;p&gt;üëâ The useState( ) is the most commonly used Hook that allows you to &lt;strong&gt;create, read and update&lt;/strong&gt; simple internal state variables in your react function component.&lt;/p&gt;

&lt;p&gt;Sounds great right, Stay tuned then.üòé&lt;/p&gt;

&lt;p&gt;ü§∑‚Äç‚ôÇÔ∏è Why useState( ) is not named as createState( ) ?ü§î&lt;/p&gt;

&lt;p&gt;üëâ &lt;strong&gt;Create&lt;/strong&gt; would imply that the state was created for the first time when the component renders. But the useState( ) executes every time the function component re-renders.&lt;/p&gt;

&lt;p&gt;üëâ During the subsequent re-renders, the useState( ) hook will give  us the &lt;strong&gt;Current State.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;üëâ So &lt;strong&gt;"use"&lt;/strong&gt;State( ) is appropriate name.&lt;/p&gt;

&lt;p&gt;Let's look at the syntax of &lt;strong&gt;useState( ):&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hgyZo5qu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0i27cloa2u8pyyvzwqy5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hgyZo5qu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0i27cloa2u8pyyvzwqy5.png" alt="useState"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üëâ useState hook always returns an array with 2 values.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The State variable itself.&lt;/li&gt;
&lt;li&gt;A function to update the state variable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;üëâ If you use this state variable inside JSX, the component re-renders every time the value changes.&lt;/p&gt;

&lt;p&gt;üëâ The &lt;strong&gt;setVariable&lt;/strong&gt; function is used to update the state variable whenever needed in the component.&lt;/p&gt;

&lt;p&gt;üëâ The &lt;strong&gt;"setVariable"&lt;/strong&gt; name doesn't really matter. You can name it anything you want.&lt;/p&gt;

&lt;p&gt;Let's look at few examples of the useState( ):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Een6moCZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1l3yr1p1z00857jbwapn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Een6moCZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1l3yr1p1z00857jbwapn.png" alt="examples of useState"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚ö° 1. &lt;strong&gt;useEffect( ) Hook:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;üëâ The Effect Hook lets you perform side effects in function components. If you‚Äôre familiar with React class lifecycle methods, you can think of &lt;strong&gt;useEffect&lt;/strong&gt; Hook as &lt;strong&gt;componentDidMount&lt;/strong&gt;, &lt;strong&gt;componentDidUpdate&lt;/strong&gt;, and &lt;strong&gt;componentWillUnmount&lt;/strong&gt; combined.&lt;/p&gt;

&lt;p&gt;üëâ It is like a Functional programming concept, where we try to encapsulate side effects in other functions so that other Functions can stay pure/unaffected.&lt;/p&gt;

&lt;p&gt;üëâ &lt;strong&gt;useEffect&lt;/strong&gt; hook must declare inside the component (top-level, don't declare them in the block), it will give several advantages (Thanks to closure):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It will have accessibility to those data that are required to use in side effects.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It can also update the data later, based on the dependencies and changes.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The syntax of Effect hook is below:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8S_y3rTE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sb3sa645fa36mmnsxqrs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8S_y3rTE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sb3sa645fa36mmnsxqrs.png" alt="useEffect Syntax"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The first argument in &lt;em&gt;useEffect&lt;/em&gt; is to give side effects function.&lt;/li&gt;
&lt;li&gt;The second argument is the dependencies array which gives instructions to &lt;em&gt;useEffect&lt;/em&gt; hook when to run and when to not. Let's see this more closely:

&lt;ul&gt;
&lt;li&gt;If you don't give dependences array, only pass the first argument, then &lt;em&gt;useEffect&lt;/em&gt; runs whenever your component renders/re-renders.&lt;/li&gt;
&lt;li&gt;If you give an empty dependences array, then &lt;em&gt;useEffect&lt;/em&gt; runs once(when your component renders the first time, after that, it will not run unless you refresh the page).&lt;/li&gt;
&lt;li&gt;If you give something in the dependencies array, then &lt;em&gt;useEffect&lt;/em&gt; will run once by default after the component finish rendering. After that, whenever the value of elements in the dependences array change, then &lt;em&gt;useEffect&lt;/em&gt; will run again. Example: [isItemHidden].&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;üëâ Well, whenever your components finish rendering, useEffects run unless you specified dependencies in the dependencies array.&lt;/p&gt;

&lt;p&gt;ü§∑‚Äç‚ôÇÔ∏è &lt;strong&gt;Why should we use useEffects( )?&lt;/strong&gt; ü§î&lt;/p&gt;

&lt;p&gt;There are several cases where you should consider useEffects. Some of them are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Suppose you are fetching some data online to display movie titles, ratings &amp;amp; you have used handler(Function with the synthetic event) or used inline Functions to get that data. So, what will happen is your component rendering will be stuck when the thread of execution reaches this point until you get the data from outside of the world.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;By seeing the first point, we can move those side effects to the useEffect hook so that our components can load/render. After completing the rendering process, React Engine will fire the useEffect hook to run the side effects code and update the component data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We should useEffect, when your component depends on the outside world data, and we can not guarantee that data will come or not (maybe the server is down there). So, Instead of throwing errors and stop other components from being rendered, move them into useEffect hook.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When you are using browser API (including Timer function, fetch API, local storage and for more browser API, refer to this: &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API"&gt;MDN Browser API&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;üåà &lt;strong&gt;Some use cases of React useEffect hook:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Always run whenever component renders/re-renders.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7OI9Y-xu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/accnnrp4iarrvg6rkg1h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7OI9Y-xu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/accnnrp4iarrvg6rkg1h.png" alt="usecase1"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run once after that if component re-renders, then it will not run.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_3LhY4DB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qcnpsqytok5wmxffehub.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_3LhY4DB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qcnpsqytok5wmxffehub.png" alt="usecase2"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run once by default after that if prop values changes, then run.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gAEReVNO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lsynsti2ejohwmlzqxyi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gAEReVNO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lsynsti2ejohwmlzqxyi.png" alt="usecase3"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run once by default after that if state changes than run.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a84omf0E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c9407rzaewb61dp7h8ga.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a84omf0E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c9407rzaewb61dp7h8ga.png" alt="usecase4"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#and-much-more"&gt;
  &lt;/a&gt;
  And Much More‚Ä¶üî•üòé
&lt;/h2&gt;

&lt;p&gt;üëâ There are other Hooks as well in React. Will try to continue it as series. Stay Tuned.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#if-you-liked-this-post-please-react-and-let-me-know-what-you-think-in-the-comments-see-you-in-next-article-goodbye"&gt;
  &lt;/a&gt;
  If you liked this post, please react and let me know what you think in the comments! See you in next Article. Goodbye.
&lt;/h3&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>hooks</category>
    </item>
    <item>
      <title>Java Question Bank with Solutions</title>
      <author>Mansi Saxena</author>
      <pubDate>Wed, 11 Aug 2021 07:09:42 +0000</pubDate>
      <link>https://dev.to/saxenamansi/java-question-bank-with-solutions-30o3</link>
      <guid>https://dev.to/saxenamansi/java-question-bank-with-solutions-30o3</guid>
      <description>&lt;p&gt;Want to practice those newly learned Java concepts, but do not have a question bank with solutions? Look no further! &lt;a href="https://github.com/saxenamansi/Java-Beginner-To-Intermediate"&gt;This&lt;/a&gt;  GitHub repository has it all!&lt;/p&gt;

&lt;p&gt;The concepts covered are - &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Basic Java Questions&lt;/li&gt;
&lt;li&gt;Arrays &lt;/li&gt;
&lt;li&gt;Strings&lt;/li&gt;
&lt;li&gt;Object Oriented Questions - Classes and Objects&lt;/li&gt;
&lt;li&gt;Object Oriented Questions - Interfaces, Inheritance, Abstract Classes, Packages&lt;/li&gt;
&lt;li&gt;Exception Handling Questions &lt;/li&gt;
&lt;li&gt;Multi-Threading Questions&lt;/li&gt;
&lt;li&gt;File Handling Questions&lt;/li&gt;
&lt;li&gt;Collections - ArrayList&lt;/li&gt;
&lt;li&gt;JDBC Concepts&lt;/li&gt;
&lt;li&gt;JavaFX Questions&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If these solutions help you, let me know and reach out to me for any further help/doubts. Happy Learning!&lt;/p&gt;

</description>
      <category>java</category>
      <category>learning</category>
      <category>programming</category>
    </item>
    <item>
      <title>Step Functions Workflow Studio with Serverless Framework</title>
      <author>Sebastian Bille</author>
      <pubDate>Wed, 11 Aug 2021 07:02:06 +0000</pubDate>
      <link>https://dev.to/aws-builders/step-functions-workflow-studio-with-serverless-framework-4j8m</link>
      <guid>https://dev.to/aws-builders/step-functions-workflow-studio-with-serverless-framework-4j8m</guid>
      <description>&lt;p&gt;The &lt;a href="https://www.serverless.com/plugins/serverless-step-functions"&gt;serverless-step-functions plugin&lt;/a&gt; is a nifty &lt;a href="https://github.com/serverless/serverless"&gt;Serverless Framework&lt;/a&gt; extension that allows you to define step functions directly within the &lt;code&gt;serverless.yml&lt;/code&gt;. However, the definitions for step functions tend to get messy fast and it's hard to visualize how a workflow actually looks and flows just from looking at the YAML. The &lt;a href="https://aws.amazon.com/blogs/aws/new-aws-step-functions-workflow-studio-a-low-code-visual-tool-for-building-state-machines/"&gt;Step Functions Workflow Studio&lt;/a&gt; helps you with exactly this by allowing you to interactively sketch out your state machine. In this post, I'll give you a brief walkthrough of how we can use the Workflow Studio together with the Step Functions plugin.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-state-machine"&gt;
  &lt;/a&gt;
  Creating a State Machine
&lt;/h2&gt;

&lt;p&gt;To get started, navigate to the &lt;a href="//console.aws.amazon.com/states/"&gt;Step Functions&lt;/a&gt; page in the AWS Console and press "&lt;strong&gt;Create state machine&lt;/strong&gt;".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DnrF9fxm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jrou3d3cevtvwxhjwex0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DnrF9fxm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jrou3d3cevtvwxhjwex0.png" alt="image-20210716221315868"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, choose "&lt;strong&gt;Design your workflow visually&lt;/strong&gt;", then go to &lt;strong&gt;Next&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QP3m_yqc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qhz8uwx9rugwt8gxo05f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QP3m_yqc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qhz8uwx9rugwt8gxo05f.png" alt="image-20210716221446618"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From here, you can drag and drop &lt;em&gt;Actions&lt;/em&gt; and &lt;em&gt;Flows&lt;/em&gt;, tinker with the properties, flow, and error handling until you're happy with the design.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LaeHp2kt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5xdounm9kcb24jtrjdr1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LaeHp2kt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5xdounm9kcb24jtrjdr1.png" alt="image-20210716221527803"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Set any resources that you want to eventually define in your serverless app to refer to a made-up value in the meantime - setting the Lambda &lt;em&gt;Function name&lt;/em&gt; to just a string name for example. Once you're done, click "&lt;strong&gt;Next&lt;/strong&gt;".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KE-5-Tr0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k45mi92v2fkiwxljuse6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KE-5-Tr0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k45mi92v2fkiwxljuse6.png" alt="image-20210811082837045"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At last, we have our generated JSON schema for the state machine! But wait. Our Serverless template is in YAML, not JSON - how do we translate this into something that we can actually use? &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aI5fDpht--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dhrgz7numjjne5bujv7g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aI5fDpht--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dhrgz7numjjne5bujv7g.png" alt="image-20210716221635101"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As it turns out, &lt;a href="https://www.geeksforgeeks.org/what-is-the-difference-between-yaml-and-json/"&gt;YAML is just a superset of JSON&lt;/a&gt;, meaning all JSON is valid YAML. The JSON that was generated is in the form of &lt;a href="https://states-language.net/spec.html"&gt;Amazon State Languages spec&lt;/a&gt;, and that same spec is used by our serverless-step-functions plugin. This means that we can translate our JSON snippet to YAML using an online tool, such as &lt;a href="https://codebeautify.org/json-to-yaml"&gt;Code Beatify&lt;/a&gt;, or a CLI tool such as &lt;a href="https://mikefarah.gitbook.io/yq/usage/convert"&gt;yq&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eT2Qy4e3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qeoq7f9h7giuu206p9nz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eT2Qy4e3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qeoq7f9h7giuu206p9nz.png" alt="image-20210716221957330"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that we've got the state machine defined in YAML, all we need to do is actually use it in the &lt;code&gt;serverless.yml&lt;/code&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#putting-it-together"&gt;
  &lt;/a&gt;
  Putting it together
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;If you don't already have a serverless project set up, check out my &lt;a href="https://dev.to/aws-builders/lightning-fast-simple-typescript-serverless-builds-33ed"&gt;guide to a simple esbuild setup&lt;/a&gt; or just run &lt;code&gt;serverless&lt;/code&gt; in your terminal to choose from one of the boilerplates.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The serverless-step-functions plugin extends the &lt;code&gt;serverless.yml&lt;/code&gt; format with a root &lt;code&gt;stepFunctions&lt;/code&gt; property. We'll use that to define our step function by pasting in our YAML snippet as the definition of the state machine.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="s"&gt;// serverless.yml&lt;/span&gt;
&lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;...&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;

&lt;span class="na"&gt;stepFunctions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;stateMachines&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;myStateMachine&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;MyStateMachine&lt;/span&gt;
        &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;your generated state machine goes here&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Keep in mind that any references to Lambda functions or other services that we used placeholder references for needs to be updated to refer to the actual resources we want them to point to. As an example, a Lambda definition might look like this when generated:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;FirstFunction&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Task&lt;/span&gt;
  &lt;span class="na"&gt;Resource&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;arn:aws:states:::lambda:invoke&lt;/span&gt;
  &lt;span class="na"&gt;OutputPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;$.Payload&lt;/span&gt;
  &lt;span class="na"&gt;Parameters&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;Payload.$&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;$&lt;/span&gt;
    &lt;span class="na"&gt;FunctionName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;firstFunction&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and we can change that to instead refer to a &lt;code&gt;firstFunction&lt;/code&gt; Lambda defined in our stack by changing it to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;FirstFunction&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Task&lt;/span&gt;
  &lt;span class="na"&gt;Resource&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!GetAtt&lt;/span&gt; &lt;span class="s"&gt;firstFunction.Arn&lt;/span&gt;
  &lt;span class="na"&gt;OutputPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;$.Payload"&lt;/span&gt;
  &lt;span class="na"&gt;Parameters&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="s"&gt;Payload.$&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;$"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the workflow from the examples above, this is what the full &lt;code&gt;serverless.yml&lt;/code&gt; might look like.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;service&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;step-functions-demo&lt;/span&gt;

&lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;serverless-step-functions&lt;/span&gt;

&lt;span class="na"&gt;provider&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;aws&lt;/span&gt;
  &lt;span class="na"&gt;runtime&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nodejs14.x&lt;/span&gt;

&lt;span class="na"&gt;stepFunctions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;stateMachines&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;myStateMachine&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;MyStateMachine&lt;/span&gt;
      &lt;span class="na"&gt;definition&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;Comment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;This is your state machine&lt;/span&gt;
        &lt;span class="na"&gt;StartAt&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;First function&lt;/span&gt;
        &lt;span class="na"&gt;States&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;First function&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Task&lt;/span&gt;
            &lt;span class="na"&gt;Resource&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!GetAtt&lt;/span&gt; &lt;span class="s"&gt;firstFunction.Arn&lt;/span&gt;
            &lt;span class="na"&gt;OutputPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;$.Payload"&lt;/span&gt;
            &lt;span class="na"&gt;Parameters&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="s"&gt;Payload.$&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;$"&lt;/span&gt;
            &lt;span class="na"&gt;Retry&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;ErrorEquals&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;Lambda.ServiceException&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;Lambda.AWSLambdaException&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;Lambda.SdkClientException&lt;/span&gt;
              &lt;span class="na"&gt;IntervalSeconds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;
              &lt;span class="na"&gt;MaxAttempts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt;
              &lt;span class="na"&gt;BackoffRate&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;
            &lt;span class="na"&gt;Next&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Wait&lt;/span&gt;
          &lt;span class="na"&gt;Wait&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Wait&lt;/span&gt;
            &lt;span class="na"&gt;Seconds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;
            &lt;span class="na"&gt;Next&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Second function&lt;/span&gt;
          &lt;span class="na"&gt;Second function&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Task&lt;/span&gt;
            &lt;span class="na"&gt;Resource&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!GetAtt&lt;/span&gt; &lt;span class="s"&gt;secondFunction.Arn&lt;/span&gt;
            &lt;span class="na"&gt;OutputPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;$.Payload"&lt;/span&gt;
            &lt;span class="na"&gt;Parameters&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="s"&gt;Payload.$&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;$"&lt;/span&gt;
            &lt;span class="na"&gt;Retry&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;ErrorEquals&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;Lambda.ServiceException&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;Lambda.AWSLambdaException&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;Lambda.SdkClientException&lt;/span&gt;
              &lt;span class="na"&gt;IntervalSeconds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;
              &lt;span class="na"&gt;MaxAttempts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt;
              &lt;span class="na"&gt;BackoffRate&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;
            &lt;span class="na"&gt;End&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;

&lt;span class="na"&gt;functions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;firstFunction&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;src/functions/first.handler&lt;/span&gt;
  &lt;span class="na"&gt;secondFunction&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;src/functions/second.handler&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;If you enjoyed this post and want to see more&lt;/strong&gt;, follow me on Twitter at &lt;a href="https://twitter.com/tastefulelk"&gt;@TastefulElk&lt;/a&gt; where I frequently write about serverless tech, AWS, and developer productivity! üëã&lt;/p&gt;

</description>
      <category>serverless</category>
      <category>aws</category>
      <category>tutorial</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Learning Python- Intermediate course: Day 6, Math Exercises </title>
      <author>Aatmaj</author>
      <pubDate>Wed, 11 Aug 2021 06:49:38 +0000</pubDate>
      <link>https://dev.to/aatmaj/learning-python-intermediate-course-day-6-math-exercises-12ge</link>
      <guid>https://dev.to/aatmaj/learning-python-intermediate-course-day-6-math-exercises-12ge</guid>
      <description>&lt;h2&gt;
  &lt;a href="#in-the-last-part-we-covered-the-math-module-in-this-part-we-will-solve-some-questions-related-to-it"&gt;
  &lt;/a&gt;
  In the last part we covered the math module. In this part, we will solve some questions related to it.
&lt;/h2&gt;




&lt;h3&gt;
  &lt;a href="#sample-questions"&gt;
  &lt;/a&gt;
  Sample questions.
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Write a program to check if a number is an &lt;a href="https://en.wikipedia.org/wiki/Narcissistic_number"&gt;"Armstrong number"&lt;/a&gt; or not
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;armstrong&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#convert int to string to make it iteratable
&lt;/span&gt;    &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;Sum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;Sum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Sum&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Sum&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;armstrong&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;153&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;armstrong&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1723&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;True
False
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#alternative"&gt;
  &lt;/a&gt;
  Alternative
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;armstrong&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
    &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
    &lt;span class="n"&gt;Sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
        &lt;span class="n"&gt;Sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Sum&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Sum&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#shorthand for if Sum==x return True else return False
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;armstrong&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;153&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;armstrong&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1723&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;True
False
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Write the function power which returns the number raise to a power without using the math function &lt;code&gt;pow()&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;power&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;      
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;power&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;power&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;      
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;power&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;power&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;power&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;8
8
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Logic&lt;/strong&gt; The function power is a function which makes use of recursion in Python. The power is raised using recursive multiplication. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#alternative"&gt;
  &lt;/a&gt;
  Alternative-
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;power&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;power&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;81
81
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#exercise"&gt;
  &lt;/a&gt;
  Exercise.
&lt;/h3&gt;

&lt;p&gt;Write the following functions without using their predefined math versions.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hypot()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sqrt()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;asinh()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Answers in the &lt;a href="https://github.com/Aatmaj-Zephyr/Learning-Python"&gt;Learning Python Repository&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;So friends that's all for this part. üòä Hope you all are enjoying.üòé Please let me know in the comment section if you liked it or not. üßê And don't forget to like the post if you did. üòç I am open to any suggestions or doubts. ü§† Just post in the comments below or Gmail me. üòâ&lt;br&gt;
Thank you for being so patient.üëç&lt;br&gt;
Also please visit the &lt;a href="https://github.com/Aatmaj-Zephyr/Learning-Python"&gt;Learning-Python repo&lt;/a&gt; made especially for this course and don't forget to star it too!!!&lt;/p&gt;

</description>
      <category>learningpython</category>
      <category>programming</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>üöÄ Posts on Javascript features üöÄ</title>
      <author>Akash Shah</author>
      <pubDate>Wed, 11 Aug 2021 06:31:45 +0000</pubDate>
      <link>https://dev.to/akash_dev/posts-on-javascript-features-3kgd</link>
      <guid>https://dev.to/akash_dev/posts-on-javascript-features-3kgd</guid>
      <description>&lt;p&gt;You might be using Javascript development for a long time but sometimes you might not be updated with newest beautiful features that it offers which can solve your issues without writing extra codes. These techniques can help you write clean and optimized JavaScript Code. Moreover, these topics can help you to prepare yourself for JavaScript interviews in 2021.&lt;/p&gt;

&lt;p&gt;JavaScript is the front-hand language as we know. JavaScript is using for web designing, mobile apps, game development, crate web servers, and JavaScript is Client Site Scripting Language(CSSL). That's one of the most used languages by developers, programmers, and coders.&lt;/p&gt;

&lt;p&gt;In 2021, JavaScript has more updated new features that can help to make your work easier. Some of them are most used in development or programming. Here, I've listed them below.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://cmsinstallation.blogspot.com/2021/07/5-best-features-of-javascript-2021-that.html"&gt;5 Best Features of JavaScript 2021-That You Should Know About&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://cmsinstallation.blogspot.com/2021/06/useful-tips-in-javascript.html"&gt;Useful Tips &amp;amp; Tricks In JavaScript &lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://apoorvtyagi.tech/javascript-tips-and-best-practices"&gt;JavaScript Tips and Best Practices&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/blessingartcreator/17-javascript-optimization-tips-3gil"&gt;17 Javascript optimization tips to know in 2021&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>javascript</category>
      <category>php</category>
      <category>programming</category>
      <category>frontend</category>
    </item>
  </channel>
</rss>
