<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>When should I use code?</title>
      <author>Vicki (she/they)</author>
      <pubDate>Fri, 12 Nov 2021 21:12:39 +0000</pubDate>
      <link>https://dev.to/vickilanger/when-should-i-use-code-2jef</link>
      <guid>https://dev.to/vickilanger/when-should-i-use-code-2jef</guid>
      <description>&lt;p&gt;You can use code whenever you want. Programmers often joke that they’ll take 20 hours to code something that would have taken them only 20 minutes to do. Imagine the person who programmed the robot vacuum.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XQdkRfjv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgs.xkcd.com/comics/the_general_problem.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XQdkRfjv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgs.xkcd.com/comics/the_general_problem.png" alt="an XKCD comic strip with 3 boxes. &amp;lt;br&amp;gt;
1st box: stick figure 1 asks &amp;quot;can you pass the salt?&amp;quot;&amp;lt;br&amp;gt;
2nd box: stick figure 1 sits there waiting for the salt&amp;lt;br&amp;gt;
3rd box: stick figure 1 says &amp;quot;I said-&amp;quot; and stick figure 2 responds &amp;quot;I know! I'm developing a system to pass you arbitrary condiments&amp;quot;. stick figure 1 responds &amp;quot;It's been 20 minutes!&amp;quot; lastly, stick figure 2 says &amp;quot; It'll save time in the long run!&amp;quot;" width="550" height="230"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#does-it-make-sense-timewise"&gt;
  &lt;/a&gt;
  Does it make sense, timewise?
&lt;/h2&gt;

&lt;p&gt;Personally, I’d count how often I do it, estimate how long it would take to automate or code the thing, then see if the hours programming is going worth the effort. For example, if it takes 10 minutes to do dishes and you have to do it every day that would be 3650 hours per year. Would 100s hours of programming be worth coaxing a computer to do dishes for you?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a2YLrk7w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgs.xkcd.com/comics/is_it_worth_the_time.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a2YLrk7w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgs.xkcd.com/comics/is_it_worth_the_time.png" alt="an XKCD comic &amp;quot;Is it worth the time&amp;quot; chart. &amp;quot;How long can you work on making a routine more efficient before you're spending more time than you save.&amp;quot; Don't forget the time you spend finding the chart to look up what you save. And the time spent reading this reminder about the time spent. And the time trying to figure out if either of those actually make sense. Remember, every second counts toward your life total, including these right now." width="571" height="464"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Xkcd.com made this chart to show how much time is saved by automating something. Let’s look at making an automatic cat snack dispenser. Let’s say it takes 5 seconds to open a bag of treats and give them to the cat. We’ll also say you give the cat some snacks 1 time per week. The snack dispenser would cut 5 seconds from your snack process because you don’t have to do it anymore. This chart shows that over 5 years, our cat snack dispenser would only save 2 hours. Is it worth it? That’s up to you. It probably depends on how long it would take to code the snack dispenser and how demanding your cat is.&lt;/p&gt;

&lt;p&gt;Going back to the dishes example, after programming a computer to do dishes, it now only takes 5 minutes. So, 5 minutes have been shaved off of the time it takes to do the daily task. This would save 6 days over 5 years. Is it worth it? That’s up to you. Though, it may depend on how long it takes to code this automatic dish washing machine.&lt;/p&gt;

&lt;p&gt;Typically, when the gain from your code is more than your loss, get to coding.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#an-exception-to-the-rule"&gt;
  &lt;/a&gt;
  An exception to the rule
&lt;/h2&gt;

&lt;p&gt;When we are learning, this may be a little different. You’re also gaining a better understanding of code every time you use code to do something. In this case, you would gain the benefit of the code and the knowledge on how to do the things you learned to build that code. So, it may very well be worth building that automatic cat snack dispenser even if it doesn’t fit my &lt;code&gt;gain &amp;gt; loss&lt;/code&gt; rule. The cat would really appreciate it.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>programming</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>The 3 most interesting C++ posts of October 2021</title>
      <author>Sandor Dargo</author>
      <pubDate>Fri, 12 Nov 2021 20:59:11 +0000</pubDate>
      <link>https://dev.to/sandordargo/the-3-most-interesting-c-posts-of-october-2021-23p6</link>
      <guid>https://dev.to/sandordargo/the-3-most-interesting-c-posts-of-october-2021-23p6</guid>
      <description>&lt;p&gt;Let me share with you 3 interesting &lt;a href="https://dev.to/t/cpp"&gt;#cpp&lt;/a&gt; posts from October. I know, it's the middle of November. I've been on vacation, then this week there was &lt;a href="https://meetingcpp.com/"&gt;Meeting C++&lt;/a&gt; so I had little time.&lt;/p&gt;

&lt;p&gt;As I wrote during the earlier months, I don't take the most popular articles anymore, because I find that while some articles do meet the criteria to add #cpp as a tag, but they are not mostly about C++. So there is a bit of subjectivity to this list. I also try not to include multiple articles from the same author and I don't include the wrap-up of the previous month either ;)&lt;/p&gt;

&lt;p&gt;Feel free to share your favourite one in the comments.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://dev.to/aboss123"&gt;Ashish&lt;/a&gt; wrote many popular posts in October, I picked the one that explains the difference between implicit and explicit constructors. Keep up the good work!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/aboss123" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YeUsHCVO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--1TjiwDlw--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/720677/4d96b5bd-7555-4446-8466-b7d5cf70b057.png" alt="aboss123"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/aboss123/c-programming-implicit-and-explicit-constructors-27be" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;C++ Programming:  Implicit and Explicit Constructors&lt;/h2&gt;
      &lt;h3&gt;Ashish Bailkeri ・ Oct 18 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#cpp&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#computerscience&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;&lt;a href="https://dev.to/elvisoric"&gt;Elvis&lt;/a&gt; picked an interesting topic about lambdas. He answered the question that you probably wouldn't even have thought about; how to inherit from them?&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/elvisoric" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4ENFv_c---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--5uE8bdq2--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/506731/9f050cc7-2d51-49f4-b8f1-55da24aaa17c.jpeg" alt="elvisoric"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/elvisoric/inheriting-from-lambdas-5cac" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to inherit from lambdas?&lt;/h2&gt;
      &lt;h3&gt;Elvis Oric ・ Oct 13 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#cpp&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#oop&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;Last but not least, &lt;a href="https://dev.to/deciduously"&gt;Ben&lt;/a&gt; shared a very interesting article on creating a compiled binary, using source code hosted on GitHub, for other people to include in their environments.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/deciduously" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZeeUe55H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Jq_3CU64--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/63000/2c770bec-a282-4dce-a8a1-9de749786416.jpg" alt="deciduously"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/deciduously/workstation-management-with-nix-flakes-build-a-cmake-c-package-21lp" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Workstation Management With Nix Flakes: Build a Cmake C++ Package&lt;/h2&gt;
      &lt;h3&gt;Ben Lovy ・ Oct 31 ・ 8 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#cpp&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#nix&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Happy coding!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connect-deeper"&gt;
  &lt;/a&gt;
  Connect deeper
&lt;/h2&gt;

&lt;p&gt;If you liked this article, please &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;hit on the like button,
&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://eepurl.com/gvcv1j"&gt;subscribe to my newsletter&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;and let's connect on &lt;a href="https://twitter.com/SandorDargo"&gt;Twitter&lt;/a&gt;!&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>bestofdev</category>
      <category>cpp</category>
    </item>
    <item>
      <title>Learn Materialize by running streaming SQL on your nginx logs</title>
      <author>Bobby Iliev</author>
      <pubDate>Fri, 12 Nov 2021 20:32:35 +0000</pubDate>
      <link>https://dev.to/bobbyiliev/learn-materialize-by-running-streaming-sql-on-your-nginx-logs-3n32</link>
      <guid>https://dev.to/bobbyiliev/learn-materialize-by-running-streaming-sql-on-your-nginx-logs-3n32</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;In this tutorial, I will show you how &lt;a href="https://materialize.com"&gt;Materialize&lt;/a&gt; works by using it to run SQL queries on continuously produced nginx logs. By the end of the tutorial, you will have a better idea of what Materialize is, how it's different than other SQL engines, and how to use it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h1&gt;

&lt;p&gt;For the sake of simplicity, I will use a brand new Ubuntu 21.04 server where I will install nginx, Materialize and &lt;code&gt;mzcli&lt;/code&gt;, a CLI tool similar to &lt;code&gt;psql&lt;/code&gt; used to connect to Materialize and execute SQL on it.&lt;/p&gt;

&lt;p&gt;If you want to follow along you could spin up a new Ubuntu 21.04 server on your favorite could provider. &lt;/p&gt;

&lt;p&gt;If you prefer running Materialize on a different operating system, you can follow the steps on how to install Materialize here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://materialize.com/docs/install/"&gt;How to install Materialize&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#what-is-materialize"&gt;
  &lt;/a&gt;
  What is Materialize
&lt;/h1&gt;

&lt;p&gt;Materialize is a streaming database for real-time analytics. &lt;/p&gt;

&lt;p&gt;It is not a substitution for your transactional database, instead it accepts input data from a variety of sources like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Messages from streaming sources like Kafka&lt;/li&gt;
&lt;li&gt;Archived data from object stores like S3&lt;/li&gt;
&lt;li&gt;Change feeds from databases like PostgreSQL&lt;/li&gt;
&lt;li&gt;Data in Files: CSV, JSON and even unstructured files like logs &lt;em&gt;(what we'll be using today.)&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And it maintains the answers to your SQL queries over time, keeping them up-to-date as new data flows in (using &lt;em&gt;materialized views&lt;/em&gt;), instead of running them against a static snapshot at a point in time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D0uJV0b0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/MU5IHOV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D0uJV0b0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/MU5IHOV.png" alt="Materialize Landing Page" width="880" height="435"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to learn more about Materialize, make sure to check out their official documentation here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://materialize.com/docs/"&gt;Materialize Documentation&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#installing-materialize"&gt;
  &lt;/a&gt;
  Installing Materialize
&lt;/h1&gt;

&lt;p&gt;Materialize runs as a single binary called &lt;code&gt;materialized&lt;/code&gt; &lt;em&gt;(d for daemon, following Unix conventions)&lt;/em&gt;. Since we're running on Linux, we'll just install Materialize directly. To install it, run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt install materialized
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once it's installed, start Materialize (with sudo so it has access to nginx logs):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo materialized
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have the &lt;code&gt;materialized&lt;/code&gt; running, we need to open a new terminal to install and run a CLI tool that we use to interact with our Materialize instance! &lt;/p&gt;

&lt;p&gt;There are other ways that you could use in order to run Materialize as described &lt;a href="https://materialize.com/docs/install/"&gt;here&lt;/a&gt;. For a production-ready Materialize instance, I would recommend giving &lt;a href="https://materialize.com/product"&gt;Materialize Cloud&lt;/a&gt; a try!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#installing-raw-mzcli-endraw-"&gt;
  &lt;/a&gt;
  Installing &lt;code&gt;mzcli&lt;/code&gt;
&lt;/h1&gt;

&lt;p&gt;The &lt;a href="https://github.com/MaterializeInc/mzcli#quick-start"&gt;&lt;code&gt;mzcli&lt;/code&gt; tool&lt;/a&gt; lets us connect to Materialize similar to how we would use a SQL client to connect to any other database.&lt;/p&gt;

&lt;p&gt;Materialize is wire-compatible with PostgreSQL, so if you have &lt;code&gt;psql&lt;/code&gt; already installed you could use it instead of &lt;code&gt;mzcli&lt;/code&gt;, but with &lt;code&gt;mzcli&lt;/code&gt; you get nice syntax highlighting and autocomplete when writing your queries.&lt;/p&gt;

&lt;p&gt;To learn the main differences between the two, make sure to check out the official documentation here: &lt;a href="https://materialize.com/docs/connect/cli/"&gt;Materialize CLI Connections&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The easiest way to install &lt;code&gt;mzcli&lt;/code&gt; is via &lt;code&gt;pipx&lt;/code&gt;, so first run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apt install pipx
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and, once &lt;code&gt;pipx&lt;/code&gt; is installed, install &lt;code&gt;mzcli&lt;/code&gt; with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pipx install mzcli
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have &lt;code&gt;mzcli&lt;/code&gt; we can connect to &lt;code&gt;materialized&lt;/code&gt; with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mzcli -U materialize -h localhost -p 6875 materialize
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TTZzk7pD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/SyLQvlT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TTZzk7pD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/SyLQvlT.png" alt="Materialize mzcli autocompletion" width="262" height="67"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For this demo, let's quickly install nginx and use Regex to parse the log and create Materialized Views.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-nginx"&gt;
  &lt;/a&gt;
  Installing nginx
&lt;/h2&gt;

&lt;p&gt;If you don't already have nginx installed, install it with the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt install nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, let's populate the access log with some entries with a Bash loop:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for i in {1..200} ; do curl -s 'localhost/materialize'  &amp;gt; /dev/null ; echo $i ; done
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;If you have an actual nginx &lt;code&gt;access.log&lt;/code&gt;, you can skip the step above.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now we'll have some entries in the &lt;code&gt;/var/log/nginx/access.log&lt;/code&gt; access log file that we would be able to able to feed into Materialize.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-a-materialize-source"&gt;
  &lt;/a&gt;
  Adding a Materialize Source
&lt;/h2&gt;

&lt;p&gt;By creating a Source you are essentially telling Materialize to connect to some external data source. As described in the introduction, you could connect a wide variety of sources to Materialize. &lt;/p&gt;

&lt;p&gt;For the full list of source types make sure to check out the official documentation here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://materialize.com/docs/sql/create-source/"&gt;Materialize source types&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's start by creating a &lt;a href="https://materialize.com/docs/sql/create-source/text-file/"&gt;text file source&lt;/a&gt; from our nginx access log.&lt;/p&gt;

&lt;p&gt;First, access the Materialize instance with the &lt;code&gt;mzcli&lt;/code&gt; command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mzcli -U materialize -h localhost -p 6875 materialize
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then run the following statement to create the source:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE SOURCE nginx_log 
FROM FILE '/var/log/nginx/access.log'  
WITH (tail = true)  
FORMAT REGEX '(?P&amp;lt;ipaddress&amp;gt;[^ ]+) - - \[(?P&amp;lt;time&amp;gt;[^\]]+)\] "(?P&amp;lt;request&amp;gt;[^ ]+) (?P&amp;lt;url&amp;gt;[^ ]+)[^"]+" (?P&amp;lt;statuscode&amp;gt;\d{3})';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A quick rundown:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;CREATE SOURCE&lt;/code&gt;: First we specify that we want to create a source&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;FROM FILE&lt;/code&gt;: Then we specify that this source will read from a local file, and we provide the path to that file&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;WITH (tail = true)&lt;/code&gt;: Continually check the file for new content&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;FORMAT REGEX&lt;/code&gt;: as this is an unstructured file we need to specify regex as the format so that we could get only the specific parts of the log that we need. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's quickly review the Regex itself as well.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Materialize-specific behavior to note here is the &lt;code&gt;?P&amp;lt;NAME_HERE&amp;gt;&lt;/code&gt; pattern extracts the matched text into a column named &lt;code&gt;NAME_HERE&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To make this a bit more clear, a standard entry in your nginx access log file would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;123.123.123.119 - - [13/Oct/2021:10:54:22 +0000] "GET / HTTP/1.1" 200 396 "-" "Mozilla/5.0 zgrab/0.x"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;(?P&amp;lt;ipaddress&amp;gt;[^ ]+)&lt;/code&gt;: With this pattern we match the IP address for each line of the nginx log, e.g. &lt;code&gt;123.123.123.119&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;\[(?P&amp;lt;time&amp;gt;[^\]]+)\]&lt;/code&gt;: the timestamp string from inside square brackets, e.g. &lt;code&gt;[13/Oct/2021:10:54:22 +0000]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"(?P&amp;lt;request&amp;gt;[^ ]+)&lt;/code&gt;: the type of request like &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt; etc.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;(?P&amp;lt;url&amp;gt;[^ ]+)&lt;/code&gt;: the relative URL, eg. &lt;code&gt;/favicon.ico&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;(?P&amp;lt;statuscode&amp;gt;\d{3})&lt;/code&gt;: the three digit HTTP status code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once you execute the create source statement, you can confirm the source was created successfully by running the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mz&amp;gt; SHOW SOURCES;
// Output
+-----------+
| name      |
|-----------|
| nginx_log |
+-----------+
SELECT 1
Time: 0.021s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have our source in place, let's go ahead and create a view!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#creating-a-materialized-view"&gt;
  &lt;/a&gt;
  Creating a Materialized View
&lt;/h1&gt;

&lt;p&gt;You may be familiar with &lt;a href="https://en.wikipedia.org/wiki/Materialized_view"&gt;Materialized Views&lt;/a&gt; from the world of traditional databases like PostgreSQL, which are essentially cached queries. The unique feature here is the materialized view we are about to create is &lt;strong&gt;automatically kept up-to-date&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In order to create a materialized view, we will use the following statement:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE MATERIALIZED VIEW aggregated_logs AS
  SELECT
    ipaddress,
    request,
    url,
    statuscode::int,
    COUNT(*) as count
  FROM nginx_log GROUP BY 1,2,3,4;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The important things to note are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Materialize will keep the results of the embedded query in memory, so you'll always get a fast and up-to-date answer&lt;/li&gt;
&lt;li&gt;The results are incrementally updated as new log events arrive &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Under the hood, &lt;strong&gt;Materialize compiles your SQL query into a dataflow&lt;/strong&gt; and then takes care of all the heavy lifting for you. This is incredibly powerful, as it allows you to process data in real-time using &lt;em&gt;just&lt;/em&gt; SQL.&lt;/p&gt;

&lt;p&gt;A quick rundown of the statement itself:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First we start with the &lt;code&gt;CREATE MATERIALIZED VIEW aggregated_logs&lt;/code&gt; which identifies that we want to create a new Materialized view named &lt;code&gt;aggregated_logs&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Then we specify the &lt;code&gt;SELECT&lt;/code&gt; statement that we are interested in keeping track of over time. In this case we are aggregating the data in our log file by &lt;code&gt;ipaddress&lt;/code&gt;, &lt;code&gt;request&lt;/code&gt;, &lt;code&gt;url&lt;/code&gt; and &lt;code&gt;statuscode&lt;/code&gt;, and we are counting the total instances of each combo with a &lt;code&gt;COUNT(*)&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When creating a Materialized View, it could be based on multiple sources like a stream from Kafka, a raw data file that you have on an S3 bucket, or your PostgreSQL database. This single statement will give you the power to analyze your data in real-time.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We specified a simple &lt;code&gt;SELECT&lt;/code&gt; that we want the view to be based on but this could include complex operations like &lt;code&gt;JOIN&lt;/code&gt;s, however for the sake of this tutorial we are keeping things simple.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For more information about Materialized Views check out the official documentation here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://materialize.com/docs/sql/create-materialized-view/"&gt;Creating Materialized views&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you could use this new view and interact with the data from the nginx log with pure SQL!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#reading-from-the-view"&gt;
  &lt;/a&gt;
  Reading from the view
&lt;/h1&gt;

&lt;p&gt;If we do a &lt;code&gt;SELECT&lt;/code&gt; on this Materialized view, we get a nice aggregated summary of stats:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;aggregated_logs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

   &lt;span class="n"&gt;ipaddress&lt;/span&gt;    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;           &lt;span class="n"&gt;url&lt;/span&gt;            &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;statuscode&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;count&lt;/span&gt;
&lt;span class="c1"&gt;----------------+---------+--------------------------+------------+-------&lt;/span&gt;
 &lt;span class="mi"&gt;127&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;      &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;GET&lt;/span&gt;     &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;materialize&lt;/span&gt;             &lt;span class="o"&gt;|&lt;/span&gt;        &lt;span class="mi"&gt;404&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="mi"&gt;200&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As more requests come in to the nginx server, the aggregated stats in the view are kept up-to-date.&lt;/p&gt;

&lt;p&gt;We could also write queries that do further aggregation and filtering on top of the materialized view, for example, counting requests by route only:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT url, SUM(count) as total FROM aggregated_logs GROUP BY 1 ORDER BY 2 DESC;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we were re-run the query over and over again, we could see the numbers change instantly as soon as we get new data in the log as Materialize processes each line of the log and keeps listening for new lines:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;+--------------------------+-------+
| url                      | total |
|--------------------------+-------|
| /materialize/demo-page-2 | 1255  |
| /materialize/demo-page   | 1957  |
| /materialize             | 400   |
+--------------------------+-------+
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As another example, let's use &lt;code&gt;psql&lt;/code&gt; together with the &lt;code&gt;watch&lt;/code&gt; command to see this in action. &lt;/p&gt;

&lt;p&gt;If you don't have &lt;code&gt;psql&lt;/code&gt; already isntalled you can install it with the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt install postgresql-client
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, let's run the &lt;code&gt;SELECT * FROM aggregated_logs&lt;/code&gt; statement every second using the &lt;code&gt;watch&lt;/code&gt; command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;watch -n1 "psql -c 'select * from aggregated_logs' -U materialize -h localhost -p 6875 materialize"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In &lt;strong&gt;another terminal window&lt;/strong&gt;, you could run another &lt;code&gt;for&lt;/code&gt; loop to generate some new nginx logs and see how the results change:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for i in {1..2000} ; do curl -s 'localhost/materialize/demo-page-2' &amp;gt; /dev/null ; echo $i ; done
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output of the &lt;code&gt;watch&lt;/code&gt; command would look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nAkopN1U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/21223421/141499876-58fdf03e-fb68-4966-ad12-b3708d50bb91.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nAkopN1U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/21223421/141499876-58fdf03e-fb68-4966-ad12-b3708d50bb91.gif" alt="Materialize nginx logs demo" width="880" height="395"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feel free to experiment with more complex queries and analyze your nginx access log for suspicious activity using pure SQL and keep track of the results in real time!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;By now, hopefully you have a hands-on understanding of how incrementally maintained materialized views work in Materialize.  In case that you like the project, make sure to star it on GitHub:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/MaterializeInc/materialize"&gt;https://github.com/MaterializeInc/materialize&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are totally new to SQL, make sure to check out this free eBook here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/bobbyiliev/introduction-to-sql"&gt;Free introduction to SQL basics eBook&lt;/a&gt;&lt;/p&gt;

</description>
      <category>database</category>
      <category>sql</category>
      <category>devops</category>
      <category>nginx</category>
    </item>
    <item>
      <title>Seeding Postgres with Docker</title>
      <author>Karan Pratap Singh</author>
      <pubDate>Fri, 12 Nov 2021 19:50:19 +0000</pubDate>
      <link>https://dev.to/karanpratapsingh/seeding-postgres-with-docker-19n7</link>
      <guid>https://dev.to/karanpratapsingh/seeding-postgres-with-docker-19n7</guid>
      <description>&lt;p&gt;Seeding postgres container during local development can be bit cumbersome, at least during the initial setup. Usually, we connect to the container and execute the seed script.&lt;/p&gt;

&lt;p&gt;But now, let's see how we can automate that by using &lt;code&gt;docker-entrypoint-initdb.d&lt;/code&gt;, which runs all the &lt;code&gt;*.sh&lt;/code&gt; or &lt;code&gt;*.sql&lt;/code&gt; scripts on initialization. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Setup&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's assume we have this folder structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;├── Dockerfile
├── docker-compose.yml
└── scripts
    └── db
        ├── dump.sql
        └── init.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, &lt;code&gt;dump.sql&lt;/code&gt; can be sql script that we want to seed the db with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="c1"&gt;-- CreateTable&lt;/span&gt;
&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;IF&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;EXISTS&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nv"&gt;"id"&lt;/span&gt; &lt;span class="nb"&gt;TEXT&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nv"&gt;"name"&lt;/span&gt; &lt;span class="nb"&gt;TEXT&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nv"&gt;"email"&lt;/span&gt; &lt;span class="nb"&gt;TEXT&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

  &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;-- Seed&lt;/span&gt;
&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;VALUES&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'userid'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Gopher'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'hello@gopher.com'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the &lt;code&gt;init.sh&lt;/code&gt;, we will just execute our &lt;code&gt;*.sql&lt;/code&gt; script.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

psql &lt;span class="nt"&gt;-U&lt;/span&gt; &lt;span class="nv"&gt;$POSTGRES_USER&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="nv"&gt;$POSTGRES_DB&lt;/span&gt; &lt;span class="nt"&gt;-a&lt;/span&gt; &lt;span class="nt"&gt;-f&lt;/span&gt; /app/scripts/db/dump.sql
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the &lt;code&gt;Dockerfile&lt;/code&gt;, we will copy our &lt;code&gt;init.sh&lt;/code&gt; to &lt;code&gt;docker-entrypoint-initdb.d&lt;/code&gt; directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; postgres:12 as db&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; ./scripts/db/init.sh /docker-entrypoint-initdb.d&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; ./scripts/db/dump.sql ./scripts/db/dump.sql&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will define our &lt;code&gt;docker-compose.yml&lt;/code&gt; like below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;3.8"&lt;/span&gt;

&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;db&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;db&lt;/span&gt;
    &lt;span class="na"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;db&lt;/span&gt;
    &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;context&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.&lt;/span&gt;
      &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;db&lt;/span&gt;
    &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;POSTGRES_USER=user&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;POSTGRES_PASSWORD=password&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;POSTGRES_DB=database&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;5432:5432&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's start our containers!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ docker compose up
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IIZK3LUj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l58wtcv4a9kzk8g4hfvu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IIZK3LUj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l58wtcv4a9kzk8g4hfvu.png" alt="output" width="880" height="410"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I hope this was helpful, feel free to reach out to me on &lt;a href="https://twitter.com/karan_6864"&gt;twitter&lt;/a&gt; if you face any issues. Thanks for reading!&lt;/p&gt;

</description>
      <category>docker</category>
      <category>postgres</category>
      <category>productivity</category>
    </item>
    <item>
      <title>VSCode + Terraform Provider Development: Setup Debugging</title>
      <author>drewmullen</author>
      <pubDate>Fri, 12 Nov 2021 19:43:52 +0000</pubDate>
      <link>https://dev.to/drewmullen/vscode-terraform-provider-development-setup-debugging-6bn</link>
      <guid>https://dev.to/drewmullen/vscode-terraform-provider-development-setup-debugging-6bn</guid>
      <description>&lt;p&gt;To setup debugging while writing to the AWS Terraform Provider, create a &lt;code&gt;.vscode&lt;/code&gt; dir in the root of your clone &lt;code&gt;terraform-provider-aws&lt;/code&gt; local repo then create a &lt;code&gt;launch.json&lt;/code&gt; &amp;amp; &lt;code&gt;private.env&lt;/code&gt; inside that &lt;code&gt;.vscode&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Notice you will have to &lt;strong&gt;update&lt;/strong&gt; &lt;code&gt;PKG_NAME&lt;/code&gt; to the specific service you're developing to. &lt;strong&gt;Bonus points&lt;/strong&gt; to anyone who can figure out a smoother way to set that dynamically based on the location of your test file.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git clone git@github.com:hashicorp/terraform-provider-aws.git
$ mkdir terraform-provider-aws/.vscode
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#create-launchjson"&gt;
  &lt;/a&gt;
  Create launch.json
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cat &amp;lt;&amp;lt; 'EOF' &amp;gt; terraform-provider-aws/.vscode/launch.json
{
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "configurations": [
        {
            "name": "Launch a test function",
            "type": "go",
            "request": "launch",
            "mode": "auto",
            "program": "${fileDirname}",
            "args": [
                "-test.v",
                "-test.run",
                "^${selectedText}$"
            ],
            "showLog": true,
            "envFile": "${workspaceFolder}/.vscode/private.env"
        }
    ]
}
EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#create-privateenv"&gt;
  &lt;/a&gt;
  Create private.env
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cat &amp;lt;&amp;lt; 'EOF' &amp;gt; terraform-provider-aws/.vscode/private.env
TF_ACC=1
TF_LOG=INFO
GOFLAGS='-mod=readonly'
PKG_NAME='internal/service/ec2'
EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;

&lt;p&gt;Reload VSCode and source a profile for terraform's acc tests to use. You can do this by either opening vscode from a terminal with a profile set or by using &lt;a href="https://marketplace.visualstudio.com/items?itemName=AmazonWebServices.aws-toolkit-vscode"&gt;the AWS Toolkit&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Set break-points in your &lt;code&gt;&amp;lt;resource_name&amp;gt;.go&lt;/code&gt; file, highlight the test you want to run and click the green "play" button in VSCode debug panel. &lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;

</description>
      <category>terraform</category>
      <category>aws</category>
      <category>development</category>
      <category>debugging</category>
    </item>
    <item>
      <title>Why Software Engineering? What's the appeal?</title>
      <author>Guosa</author>
      <pubDate>Fri, 12 Nov 2021 19:35:11 +0000</pubDate>
      <link>https://dev.to/guosae/why-software-engineering-whats-the-appeal-3p5o</link>
      <guid>https://dev.to/guosae/why-software-engineering-whats-the-appeal-3p5o</guid>
      <description>&lt;p&gt;In this post I am going to reflect on the different aspects of software engineering that drew me towards choosing software development as a career path. When I think back to what first drew me to the field of software development, there are probably some things that appealed to me about it that I can no longer recall, but for the most part the five things I will discuss below stand out. These are not necessarily listed in order of their importance for why they made me choose software engineering as a career, but rather they are just in the order in which I was able to recall them.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A Love of Problem Solving&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cnpaco9Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/neu6xgsagj788l78go0c.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cnpaco9Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/neu6xgsagj788l78go0c.jpg" alt="Chess Board" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since middle school and high school I have had an appreciation for the challenge and thrill involved in tackling difficult problems. In high school I was in the math club, where at the end of every week we would work through problem sets with difficult math problems and attempt to solve them, and every several weeks we would participate in local and regional math competitions. I was also an avid chess player and in my last years of high school I drifted towards choosing a science subject as my major in college. In college I eventually settled on math as my major and graduated with bachelor of science in mathematics with a minor in physics. Throughout my college years I spent most of my time working on difficult problems for homework, tests, and occasionally projects or labs. Although I did not major in computer science or get very far into programming at all during college, I did take two courses for my major that that required me to learn the basics of, and use, two programming languages: C++ and Python. This was my first exposure to using programming languages to solve problems and although I did not get involved in anything relating to software at that point, I gained an appreciation for the way programming could be used to solve real problems using logic.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An Affinity for Abstract Thought&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZU7HdQvT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vt61j79l9iiqqjp9z736.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZU7HdQvT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vt61j79l9iiqqjp9z736.jpg" alt="mc escher" width="454" height="560"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the things I love most about programming and software development is the abstract thought involved - the use of variables and methods and classes and other components of programming languages to create software that can create general solutions to problems. By focusing on abstract, or more general, ideas and concepts when designing software, software engineers are able to create really remarkable products and services that have a lot more power and adaptability than products or services that are only focused on, and only capable of dealing with, one very specific problem or scenario. As someone who was already familiar with the power of abstraction in higher mathematics, it was easy for me to appreciate this aspect of software development and it was one of the things that I found most appealing about software development.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Ability to Create Things with Your Mind&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dc_eumL7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v5c9e2m3czqi61mjgu0p.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dc_eumL7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v5c9e2m3czqi61mjgu0p.gif" alt="alchemist" width="220" height="215"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When I was younger I wanted to be either an architect, a fiction writer (novelist), or a mathematician. Each of these fields appealed to me because they allow a person to basically create new and interesting ideas and concepts with just one's mind. Although I did not end up pursuing any of those careers when I grew into adulthood, I did find that same appealing aspect of being able to create something interesting and important with just one's mind in software engineering. The ability to create almost anything one can conceive of, with essentially no limits on what sort of product or service one can bring into reality, simply with thought and hard work, is one of the most appealing things to me about software engineering. In some sense, being a software engineer is like being an alchemist working with a modern day "philosopher's stone": with some starting ideas, materials, technologies, and the necessary programming languages, people can create (or transmute) seemingly inanimate and lifeless text, images, and numbers into a working, responsive, active system capable of implementing nearly anything that the creators wish it to implement, as long as the creators have sufficient skill, knowledge and hard work to make that product or service work.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A Stable and Rewarding Career Path&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RFMErRjB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9t5kq2bim68d4i5n3yzx.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RFMErRjB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9t5kq2bim68d4i5n3yzx.gif" alt="mad men discussing" width="400" height="228"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the things that appealed to me about software engineering as a career is the stability and the rewarding opportunities available as a software engineer. Many jobs are available for software engineers in many different specialties (front-end, back-end, full stack, machine learning, embedded software, etc.) so there is a lot of variety, and most of these jobs pay very well, especially as one advances further in one's position. Furthermore, many new jobs are emerging or being created in software engineering over time, as technology progresses, unlike in some other industries where jobs are being gradually eliminated as technology advances and the use of automation increases. This means that software is a more stable career field than some other jobs such as certain factory jobs. Software engineering is also rewarding mentally, in addition to being financially rewarding. The ability to feel like what one applies one's thoughts and hard work towards really matters and helps people or provides a useful or enjoyable service is also mentally rewarding.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An Opportunity to be at the Cutting Edge of Technology and Innovation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nRDiR686--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7jkiur3vrp322r0wmbki.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nRDiR686--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7jkiur3vrp322r0wmbki.jpg" alt="robotic geisha from ghost in the shell" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Being a software engineer also means that one is at the forefront of innovation in technology and business if one wants to be or chooses to go that route. In today's increasingly technologically sophisticated world, software is relevant for everything from robotics to e-commerce, finance, biotechnology or space exploration. Practically no field of human endeavor where important innovations are happening, or new technologies are being created or used, is without use for software engineers. This means that software engineers have a big role to play in advancing already existing fields by applying new or existing technologies to those fields and also in creating new technologies and new innovations that will create new opportunities and new areas of human activity.&lt;/p&gt;

&lt;p&gt;These five aspects discussed above are the primary things (that I can recall) that drew me to software engineering as a career path. I hope it was an interesting read and hopefully someone out there who was considering software engineering as a career path will take something valuable away from my reflections on what drew me toward software engineering.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>React Flask Authentication - Free Sample</title>
      <author>Sm0ke</author>
      <pubDate>Fri, 12 Nov 2021 19:32:08 +0000</pubDate>
      <link>https://dev.to/sm0ke/react-flask-authentication-free-sample-4if6</link>
      <guid>https://dev.to/sm0ke/react-flask-authentication-free-sample-4if6</guid>
      <description>&lt;p&gt;Hello Coders! &lt;/p&gt;

&lt;p&gt;This article presents an open-source sample that implements a JWT &lt;strong&gt;[Authentication using React and Flask]&lt;/strong&gt;(&lt;a href="https://blog.appseed.us/react-flask-authentication/"&gt;https://blog.appseed.us/react-flask-authentication/&lt;/a&gt;). The source code for the &lt;strong&gt;React&lt;/strong&gt; Frontend and the &lt;strong&gt;Flask API&lt;/strong&gt; is available for download on Github under the MIT license (permits unlimited copies, no footer credit). For newcomers, &lt;strong&gt;React&lt;/strong&gt; is a popular Javascript library for coding UI interfaces baked by Facebook and &lt;strong&gt;Flask&lt;/strong&gt; is a leading web framework written in Python.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt; - Content provided by &lt;strong&gt;&lt;a href="https://appseed.us/"&gt;App Generator&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;✨ &lt;a href="https://github.com/app-generator/react-flask-authentication"&gt;React Flask Authentication&lt;/a&gt; - Source code (published on Github)&lt;/li&gt;
&lt;li&gt;✨ &lt;a href="https://react-flask-authentication.appseed-srv1.com/"&gt;React Flask Authentication&lt;/a&gt; - LIVE Demo&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1ggAMQC1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pvsf573iwsgywgbhzd6a.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1ggAMQC1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pvsf573iwsgywgbhzd6a.gif" alt="React Flask Authentication - Free Sample" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#topics"&gt;
  &lt;/a&gt;
  ✨Topics
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;👉 Project Overview and Features&lt;/li&gt;
&lt;li&gt;👉 What is React&lt;/li&gt;
&lt;li&gt;👉 What is Flask&lt;/li&gt;
&lt;li&gt;👉 Start the project in Docker&lt;/li&gt;
&lt;li&gt;👉 Resources &amp;amp; Links&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#project-overview"&gt;
  &lt;/a&gt;
  ✨ Project Overview
&lt;/h2&gt;

&lt;p&gt;Coding a full-stack project might be a challenging task even for experienced programmers and this article aims to provide a little bit of help regarding this hot topic. The main goal of this article is to provide a tested full-stack codebase enhanced with minimal features and a nice UI powered by React.  &lt;/p&gt;

&lt;p&gt;The project is built using a two-tier pattern where the frontend is physically and logically decoupled from the backend API server.  The features provided by both parts of this open-source product can be found below.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Flask API Features&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Simple codebase&lt;/li&gt;
&lt;li&gt;SQLite persistence, SqlAlchemy ORM&lt;/li&gt;
&lt;li&gt;API &amp;amp; token management: Flask-RestX and Flask-JWT&lt;/li&gt;
&lt;li&gt;Docker Support&lt;/li&gt;
&lt;/ul&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;React UI Features&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Modern UI build with M-UI Library: Berry Template&lt;/li&gt;
&lt;li&gt;Dependencies: Axios, Redux, and Formik&lt;/li&gt;
&lt;li&gt;Docker Support&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#what-is-react"&gt;
  &lt;/a&gt;
  ✨ What is React
&lt;/h2&gt;

&lt;p&gt;In 2021 the stats shows that React is used as the primary technology in frontend development superseding other frameworks like Vue, Angular or Svelte. React is actively supported and versioned by Facebook and is widely adopted by big companies and many developers across the globe.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Tmkpxxro--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o1zqwkusp0p4e52qq62v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Tmkpxxro--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o1zqwkusp0p4e52qq62v.png" alt="React - Official Banner." width="500" height="168"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;In our sample, we will use an open-source template where the authentication code is added on top of an existing project initially created using the CRA tool. For more resources related to React, please access:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;👉 &lt;a href="https://reactjs.org/docs/getting-started.html"&gt;React&lt;/a&gt; official documentation&lt;/li&gt;
&lt;li&gt;👉 &lt;a href="https://reactjs.org/docs/create-a-new-react-app.html"&gt;How to create a new React App&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#what-is-flask"&gt;
  &lt;/a&gt;
  ✨ What is Flask
&lt;/h2&gt;

&lt;p&gt;Flask is a popular Python Framework designed to a project quick and easy, with the ability to scale up to complex applications. Flask can be used to code from simple one-page sites to APIs and complex eCommerce solutions.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--msrd1Zgy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6eheuekwg86wvs9kf4m0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--msrd1Zgy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6eheuekwg86wvs9kf4m0.png" alt="Flask - Open-source Python Framework." width="600" height="274"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;In our API sample Flask is used to expose a simple Authentication API and manage users and the associated JWT tokens. For more resources linked to this amazing library, please access:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;👉 &lt;a href="https://palletsprojects.com/p/flask/"&gt;Flask&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;👉 &lt;a href="https://flask.palletsprojects.com/en/2.0.x/"&gt;Flask&lt;/a&gt; - the official documentation&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#start-in-docker"&gt;
  &lt;/a&gt;
  ✨ Start in Docker
&lt;/h2&gt;

&lt;p&gt;To make the project really useful, the source code comes with Docker support for both parts (frontend and the backend).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #1&lt;/strong&gt; - Clone the source code&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone  https://github.com/app-generator/react-flask-authentication.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #2&lt;/strong&gt; - Start the Flask API&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;flask-api
&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose pull   &lt;span class="c"&gt;# download dependencies &lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose build  &lt;span class="c"&gt;# local set up&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose up     &lt;span class="c"&gt;# start the app &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;At this point, the API should be up &amp;amp; running at &lt;code&gt;http://localhost:5000&lt;/code&gt;, and we can test the interface using POSTMAN or &lt;code&gt;curl&lt;/code&gt;.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #3&lt;/strong&gt; - Start the React UI&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt; &lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;react-ui
 &lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose pull   &lt;span class="c"&gt;# download dependencies&lt;/span&gt;
 &lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose build  &lt;span class="c"&gt;# local set up&lt;/span&gt;
 &lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose up     &lt;span class="c"&gt;# start the app &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once all the above commands are executed, the React UI should be visible in the browser. By default, the app redirects the guest users to authenticate. After we register a new user and sign in, all the private pages become accessible.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4QX3vsKr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zj6ivakctv4cp6mt5ii4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4QX3vsKr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zj6ivakctv4cp6mt5ii4.png" alt="React Flask Authentication - Login Page." width="880" height="469"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;React Flask Authentication&lt;/strong&gt; - Icons Page&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---Vd11uET--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zx24pha8uakcetusd6c0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Vd11uET--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zx24pha8uakcetusd6c0.png" alt="React Flask Authentication - Icons Page." width="880" height="476"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;React Flask Authentication&lt;/strong&gt; - Dashboard Page&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y0oCgUJR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/atxfkc2am1cnhqfuw5ky.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y0oCgUJR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/atxfkc2am1cnhqfuw5ky.png" alt="React Flask Authentication - Dashboard Page." width="880" height="473"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;React Flask Authentication&lt;/strong&gt; - UI Colors&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o-UYkrge--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sstzi5qn1cipwd8moaz1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o-UYkrge--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sstzi5qn1cipwd8moaz1.png" alt="React Flask Authentication - Colors Page" width="880" height="476"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Thanks for reading! For more resources, please access:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;AppSeed for &lt;a href="https://appseed.us/support"&gt;support&lt;/a&gt; via email and &lt;a href="https://appseed.us/support"&gt;Discord&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://appseed.us/apps/react"&gt;React Apps&lt;/a&gt; - a curated index with Full-Stack Starters&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://blog.appseed.us/flask-react-full-stack-seed-projects/"&gt;Flask and React&lt;/a&gt; - From Zero to Full-Stack&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>flask</category>
      <category>webdev</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Note Taking 101</title>
      <author>loren-michael</author>
      <pubDate>Fri, 12 Nov 2021 19:11:33 +0000</pubDate>
      <link>https://dev.to/lorenmichael/note-taking-101-5b05</link>
      <guid>https://dev.to/lorenmichael/note-taking-101-5b05</guid>
      <description>&lt;p&gt;While going through Flatiron's Pre-Work and part of Phase 1, I've been taking notes in a Moleskine. While it's my favorite way to retain information (I learn well by writing things down in my own handwriting) it definitely leaves much to be desired. Writing out JS by hand is a pain if you're trying to show yourself examples of the concept you're studying. It takes up a lot of paper very quickly with how many lines it takes up, and the hand cramps!&lt;/p&gt;

&lt;p&gt;I've started to experiment with different ways to take notes while going through class. My newest method will be to keep notes organized in .js files that give examples of how different functions work. The latest concept I've gone over are Arrow Functions, so I built a file that shows progression from a regular function to a function expression then to an arrow function. It came in handy while doing my lab work, so I will likely continue this to see if it is helpful with more complex concepts.&lt;/p&gt;

&lt;p&gt;Long term I'm hoping it will be a go-to resource of my own notes and code examples so that when I come across these concepts later on I have a file that I can go to if I'm having trouble.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Product developer’s guide to model training: Scaling numerical data</title>
      <author>Mage</author>
      <pubDate>Fri, 12 Nov 2021 18:47:17 +0000</pubDate>
      <link>https://dev.to/mage_ai/product-developers-guide-to-model-training-scaling-numerical-data-1dk1</link>
      <guid>https://dev.to/mage_ai/product-developers-guide-to-model-training-scaling-numerical-data-1dk1</guid>
      <description>&lt;h1&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TLDR
&lt;/h1&gt;

&lt;p&gt;While machines may have an easy time understanding numbers, it means nothing if there’s no meaning behind them. Learn techniques to scale to your numerical data, such as standardization and normalization to better grasp the correlation of your data.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#outline"&gt;
  &lt;/a&gt;
  Outline
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Recap&lt;/li&gt;
&lt;li&gt;Before we begin&lt;/li&gt;
&lt;li&gt;Numerical data types&lt;/li&gt;
&lt;li&gt;Why we scale&lt;/li&gt;
&lt;li&gt;Types of scaling&lt;/li&gt;
&lt;li&gt;Scaling with Pandas&lt;/li&gt;
&lt;li&gt;Use of numerical data&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#recap"&gt;
  &lt;/a&gt;
  Recap
&lt;/h1&gt;

&lt;p&gt;Last time, we looked at qualitative data, where we labeled the categories and assigned weights to data to make it machine readable. This time, we’re going to look at quantifiable data, aka numbers, and assign meanings to them through applying scales.&lt;/p&gt;

&lt;p&gt;We’ll be looking at the different types of numerical data, discrete and continuous, as well as the algorithm or mathematical formula behind it. Finally, we’ll wrap it up by scaling all numerical values in our dataset.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#before-we-begin"&gt;
  &lt;/a&gt;
  Before we begin
&lt;/h1&gt;

&lt;p&gt;This guide will use the &lt;a href="https://app.box.com/s/ktd1t87fl925hjxkzsclp1343eq822f1"&gt;big_data&lt;/a&gt; dataset, collected for a marketing campaign. It contains data on a customer’s personal life, to analyze and replicate their decision making. It is recommended to read the introductory guide first to understand how to calculate min, max, and standard deviation as we’ll be using it in our equations to scale the data.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#numerical-data-types"&gt;
  &lt;/a&gt;
  Numerical data types
&lt;/h1&gt;

&lt;p&gt;Quantitative data, also known as numerical data, is data that is represented by a numerical value. This can be discrete data, which represents a count of how many times something happened. On the other hand, there’s continuous data that stretches infinitely and is uncountable, such as time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#discrete-data"&gt;
  &lt;/a&gt;
  Discrete data
&lt;/h2&gt;

&lt;p&gt;This type of data is fixed and each value in between can be represented as an equal amount of meaning. Due to this, examples of data that answers “how many” make great samples of discrete data. For a marketing campaign, this is usually how many times something is clicked, or how much something costs. &lt;/p&gt;

&lt;p&gt;It’s easy to compare discrete data across two users. A user who clicks more on the webpage is likely to be more engaged than the other user that visits the website and doesn’t click on anything. There’s a bit more special math we can do to assign difference in meanings to discrete data, such as a user clicking on the purchase button versus a user clicking on the logout button, but we won’t go too into detail in this guide.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#continuous-data"&gt;
  &lt;/a&gt;
  Continuous data
&lt;/h2&gt;

&lt;p&gt;This data is contrary to discrete. Continuous data doesn’t answer the question of “how many”, because it’s a value that’s measured in a unit that is infinite. Most datasets that have continuous data would be a measure of time. Time is considered to be infinite because the meaning between finishing an hour due before, and hour after starting. For instance, I may want to reward someone for completing early, or take note of someone procrastinating until the last minute. In the end, the treatment or behavioral pattern the data reveals is different.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-we-scale"&gt;
  &lt;/a&gt;
  Why we scale
&lt;/h1&gt;

&lt;p&gt;In order to fully grasp why knowing which type of numerical data matters, we must first understand how machines think. Machines are very literal, as we saw when working with categorical data, numbers will inherently carry a weight, and in practice these numbers can grow large and require a long time to do calculations or plot if left unchecked. This is where scaling comes in. Scaling reduces the values so that the data is easier to calculate, visualize, and remove bias.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#systematic-bias"&gt;
  &lt;/a&gt;
  Systematic bias
&lt;/h2&gt;

&lt;p&gt;Systematic bias occurs when there is a large amount of data with respect to another part of the data. In this case, it can be an outlier, where the data contains areas with anomalies, a datapoint with a larger deviation compared to others. In this case, we can apply a technique called normalization which reduces the impact of outliers on our data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#range-of-data"&gt;
  &lt;/a&gt;
  Range of Data
&lt;/h2&gt;

&lt;p&gt;In addition, scaling plays a big role in training time by shrinking the ranges. By reducing values that are extremely large into smaller values within a much smaller range, the calculations of each value is also decreased which helps with speed. A common example we’ll get into next is normalization, which shrinks all values into the range of [0,1], 0 to 1 inclusive.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#types-of-scaling"&gt;
  &lt;/a&gt;
  Types of Scaling
&lt;/h1&gt;

&lt;p&gt;Now that we understand the differences between the two types of numerical data and why we should scale, we may begin to identify a scaling approach that best fits each type of data. There are two scaling methods that we’ll go through, standardization, and normalization.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#normalization-minmax"&gt;
  &lt;/a&gt;
  Normalization (Min-Max)
&lt;/h2&gt;

&lt;p&gt;The 1st type of scaling we’ll go over is normalization, which compares the current value against the highest and lowest values and finds the average. Due to needing a max and a min value, Min-Max normalization is used for discrete sets of data which are countable and finite. &lt;/p&gt;

&lt;p&gt;The pros of using Min-Max is that it’s faster to calculate, due to using simple mathematical operations, and easy to graphically view as the result is very linear. &lt;/p&gt;

&lt;p&gt;On the downside, it has many restrictions when choosing to use it. In the case of continuous sets of data, you are unable to use normalization since the meaning behind the difference in values isn’t consistent. In addition, calculating normalization uses the minimum and maximum, so any outliers or abnormal minimums and maximums can greatly skew the output.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CR1kssUE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c51daaznyta87aqerpio.png" alt="Image description" width="452" height="256"&gt;&lt;em&gt;Formula for Min-Max Normalization&lt;/em&gt;
&lt;/center&gt;
&lt;h2&gt;
  &lt;a href="#standardization-zscore"&gt;
  &lt;/a&gt;
  Standardization (Z-Score)
&lt;/h2&gt;

&lt;p&gt;Another type of scaling is through standardization. This is useful for continuous datasets that have no end in sight, but can also be used on discrete data. By standardizing the values you can assign meaning with respect to each other datapoint instead of a human assumption. &lt;/p&gt;

&lt;p&gt;For this guide, we’ll be following the Z-score method of standardization, which takes the value and subtracts the mean to find the difference, then divides it by the standard deviation. When choosing standardization, it’s worth noting that since there’s no min or value, outliers won’t affect your data as much.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EodOyQrw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0e6o4v0vjpvmm8yl5kuz.png" alt="Image description" width="235" height="92"&gt;&lt;em&gt;Formula for Z-Score Standardization&lt;/em&gt;
&lt;/center&gt;
&lt;h1&gt;
  &lt;a href="#scaling-with-pandas"&gt;
  &lt;/a&gt;
  Scaling with Pandas
&lt;/h1&gt;

&lt;p&gt;Looking back at our dataset, we’ll begin to scale the numbers to assign meaning. Starting off by looking at the dataset, let’s break down the columns into only the relevant numerical data. Then break it down further into discrete data that can be normalized, and continuous data which cannot be normalized. Sklearn has functions that calculate &lt;a href="https://scikitlearn.org/stable/modules/generated/sklearn.preprocessing.StandardScaler.html"&gt;standardization&lt;/a&gt; and &lt;a href="https://scikitlearn.org/stable/modules/generated/sklearn.preprocessing.MinMaxScaler.html"&gt;min-max normalization&lt;/a&gt;, but for this guide we’ll be implementing it with the raw functions of Pandas to practice understanding and implementing the equation.&lt;/p&gt;


&lt;center&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B7hK39yg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3kevg82higxe0mip8voc.png" alt="Image description" width="762" height="840"&gt;&lt;/center&gt;

&lt;p&gt;According to the output of df.info, we’ll want to keep any relevant values that are an int or float data type. This consists of “Year_Birth, Income, Kidhome, Teenhome, Recency, MntWines, MntFruits, MntMeat, MntFish, MntSweet, and NumPurchases”. We exclude ID here because even though it’s a number it has nothing to do with the customer’s behavior. This results in our new filtered data of only numerical data, df_numerical.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YxkNSDqj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q88h9f4kjpdvtgygq6rp.png" alt="Image description" width="880" height="54"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fLWptgFp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8pwdlp9fvtadrfepovh4.png" alt="Image description" width="880" height="437"&gt;&lt;em&gt;All the columns are an numerical data type&lt;/em&gt;
&lt;/center&gt;
&lt;h2&gt;
  &lt;a href="#pandas-normalization"&gt;
  &lt;/a&gt;
  Pandas Normalization
&lt;/h2&gt;

&lt;p&gt;First, we take note of the columns that are finite, and countable. In our data, these are the Kidhome, Teenhome, Income, Recency, MntWines, MntFruits, MntFish, MntSweets, and NumPurchases columns.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iNp2KnnP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/81tfmnooy1jb09tb41rr.png" alt="Image description" width="880" height="53"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MXNIgbPz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tntjy9yavc5xfoglwac6.png" alt="Image description" width="880" height="492"&gt;
&lt;/center&gt;

&lt;p&gt;Once we have the data we want, we can begin normalizing it following the equation.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VsYLks16--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/upx7rdrxtpr1q19gcqxl.png" alt="Image description" width="880" height="85"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yi60czGi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pzjaw6afbvuf53c0s9bn.png" alt="Image description" width="880" height="434"&gt;&lt;em&gt;After normalizing, the data should range from [0,1]&lt;/em&gt;
&lt;/center&gt; 

&lt;p&gt;The results don’t look the best, some values like Kidhome and Teenhome turned out to lack in variance. In this case, we can repeat scaling but with standardization.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pandas-standardization"&gt;
  &lt;/a&gt;
  Pandas Standardization
&lt;/h2&gt;

&lt;p&gt;All numerical columns can be standardized, so we’ll be looking at all of the data. Following the equation for standardization, we take the value, subtract it by the mean, then divide by the standard deviation.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yUNroBCu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9gds9prcadmrj093f0zq.png" alt="Image description" width="880" height="87"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WnpDgroZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v4hdzuacfok450lj2rwn.png" alt="Image description" width="880" height="427"&gt;&lt;em&gt;Standardization has no range, but tries to fit in on a bell curve&lt;/em&gt;
&lt;/center&gt;

&lt;p&gt;Based on the results, creating the best scaled dataset would take a combination of the results from normalization and standardization. We’ll start by concatenating the values from the df_norm that had low variance, then the remainder of numerical columns from df_standard. So we take the Year_Birth, Kidhome, and Teenhome columns from df_standard, and concat them with Income, Recency, MntWines, MntFruits, MntFish, MntSweet, and NumPurchases columns from df_norm.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--djBcTQin--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p6efca0m4dreipapfzt8.png" alt="Image description" width="880" height="431"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vy3CSvKa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/skgk42hqrh98j7pbq53y.png" alt="Image description" width="880" height="101"&gt;&lt;em&gt;Our fully scaled numerical data&lt;/em&gt;
&lt;/center&gt;
&lt;h1&gt;
  &lt;a href="#use-of-numerical-data"&gt;
  &lt;/a&gt;
  Use of Numerical Data
&lt;/h1&gt;

&lt;p&gt;Machines like numbers a lot, and while humans aren’t able to understand what the 1’s and 0’s represent, they can still define what it means. Likewise, as numbers increase towards infinity, the meaning behind it is blurred for both humans and machines alike. On the other hand, you may want to create a ranking system in place to find out which customers are bringing in the big bucks. All this big data is useful in developing a machine learning model that can rank each of your customers and find out patterns hidden within the data. You’ve converted all the big data, but is all of that data necessary to train a good model? In our next part, we’ll look at how to impute data to clean the data further.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Iniciando com Next.JS</title>
      <author>NuryCaroline</author>
      <pubDate>Fri, 12 Nov 2021 18:29:58 +0000</pubDate>
      <link>https://dev.to/devgirlsmentor/iniciando-com-nextjs-43dm</link>
      <guid>https://dev.to/devgirlsmentor/iniciando-com-nextjs-43dm</guid>
      <description>&lt;p&gt;Olá dev! &lt;/p&gt;

&lt;p&gt;O intuito desse post é explicar um pouquinho o que é Next.js e o que podemos fazer com ele. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#o-que-%C3%A9-nextjs"&gt;
  &lt;/a&gt;
  O que é Next.js?
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;É um &lt;strong&gt;Framework React para Produção&lt;/strong&gt;.&lt;br&gt;
Next.js oferece a melhor experiência de desenvolvedor com todos os recursos de que você precisa para produção: renderização híbrida estática e de servidor, suporte a TypeScript, agrupamento inteligente, pré-busca de rota e muito mais. Nenhuma configuração necessária.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#vantagens"&gt;
  &lt;/a&gt;
  Vantagens:
&lt;/h2&gt;

&lt;p&gt;Next.js tem várias ferramentas para te auxiliar, algumas delas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://nextjs.org/docs/basic-features/image-optimization"&gt;Otimização de imagem&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Com o Next.js podemos trocar a tag &lt;code&gt;&amp;lt;img src="" /&amp;gt;&lt;/code&gt; pelo componente &lt;code&gt;&amp;lt;Image  src="" /&amp;gt;&lt;/code&gt;, assim é incluído uma variedade de otimizações como: carregar somente o tamanho utilizado e quando a imagem for utilizada.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://nextjs.org/analytics"&gt;Next.js Analytics&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Ao publicar a sua aplicação na &lt;a href="https://vercel.com/home?utm_source=next-site&amp;amp;utm_medium=banner&amp;amp;utm_campaign=next-website"&gt;Vercel&lt;/a&gt; você tem acesso a uma ferramenta de analise em tempo real. Podendo assim, medir quantidade de visitantes, tempo de carregamento da página, entre outros.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://nextjs.org/docs/getting-started"&gt;Zero Config&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Utilizando um simples comando no terminal, é criado uma estrutura pronta para iniciar um projeto.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://nextjs.org/docs/basic-features/built-in-css-support"&gt;Suporte a CSS e&lt;/a&gt; &lt;a href="https://github.com/css-modules/css-modules"&gt;CSS Modules&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;O CSS Modules nos permitem separar o css em escopos, para evitar colisões.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://nextjs.org/docs/routing/introduction"&gt;Roteamento&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;A navegação entre paginas é bem simplificado, basta criar um novo arquivo com o nome da pagina desejada e o roteador já identifica como uma página.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://nextjs.org/docs/api-routes/introduction"&gt;Rotas Api&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Com as Rotas você pode criar endpoints para retornar informações para sua aplicação.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;a href="https://nextjs.org/docs/basic-features/data-fetching"&gt;Híbrido SSG e SSR&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;SSR (Server Side Render) - Renderização do lado do Servidor:&lt;/p&gt;

&lt;p&gt;Ao solicitarmos uma página de perfil de usuário, por exemplo, o servidor efetua as buscas necessárias na aplicação e banco de dados, e retorna ao navegador um HTML pronto para ser apresentado ao usuário.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sgG8cJeD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d33wubrfki0l68.cloudfront.net/ed387a6bc4f3abf8e8bd06bc006cd297a923d8c2/9f11e/images/posts/arquitetura_ssr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sgG8cJeD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d33wubrfki0l68.cloudfront.net/ed387a6bc4f3abf8e8bd06bc006cd297a923d8c2/9f11e/images/posts/arquitetura_ssr.png" alt="SSR" width="587" height="340"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Fonte: &lt;a href="https://woliveiras.com.br/posts/qual-diferenca-server-side-render-ssr-e-static-site-generator-ssg/"&gt;https://woliveiras.com.br/posts/qual-diferenca-server-side-render-ssr-e-static-site-generator-ssg/&lt;/a&gt;&lt;/em&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SSG (Static Site Generator) - Geração de Site Estático:&lt;/p&gt;

&lt;p&gt;São sites que não possuem conteúdos dinâmicos, uma pagina de apresentação de uma empresa, por exemplo. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--duy7CQ1H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d33wubrfki0l68.cloudfront.net/40b1eaa12605bdfa28328b9dc2ee5f384cbe1632/106dc/images/posts/arquitetura_ssg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--duy7CQ1H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d33wubrfki0l68.cloudfront.net/40b1eaa12605bdfa28328b9dc2ee5f384cbe1632/106dc/images/posts/arquitetura_ssg.png" alt="SSG" width="388" height="199"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Fonte: &lt;a href="https://woliveiras.com.br/posts/qual-diferenca-server-side-render-ssr-e-static-site-generator-ssg/"&gt;https://woliveiras.com.br/posts/qual-diferenca-server-side-render-ssr-e-static-site-generator-ssg/&lt;/a&gt;&lt;/em&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#como-aprender-nextjs"&gt;
  &lt;/a&gt;
  Como aprender Next.js
&lt;/h2&gt;

&lt;p&gt;No próprio site do Next.js (&lt;a href="https://nextjs.org/learn/basics/create-nextjs-app"&gt;https://nextjs.org/learn/basics/create-nextjs-app&lt;/a&gt;) há um curso interativo com os fundamentos de Next.js, como monitorar a performance, SEO e outras funcionalidades.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#refer%C3%AAncias"&gt;
  &lt;/a&gt;
  Referências
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://nextjs.org/"&gt;Nextjs.org&lt;/a&gt;&lt;br&gt;
&lt;a href="https://woliveiras.com.br/posts/qual-diferenca-server-side-render-ssr-e-static-site-generator-ssg/"&gt;Qual a diferença entre SSR e SSG&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>An Application for Short Term Planning using a React/Redux frontend and a Rails API backend</title>
      <author>Guosa</author>
      <pubDate>Fri, 12 Nov 2021 18:25:43 +0000</pubDate>
      <link>https://dev.to/guosae/an-application-for-short-term-planning-using-a-reactredux-frontend-and-a-rails-api-backend-3ji3</link>
      <guid>https://dev.to/guosae/an-application-for-short-term-planning-using-a-reactredux-frontend-and-a-rails-api-backend-3ji3</guid>
      <description>&lt;p&gt;I built a weekly planning app which utilized React and Redux for its frontend and a Rails API for its backend.&lt;/p&gt;

&lt;p&gt;I decided to make an application which could be used as a short term planner or scheduler where the main events or activities of the immediate upcoming week could be entered. I figured that this was more relevant than a long term calendar style application for most scheduling/planning that one needs to actually carry out.&lt;/p&gt;

&lt;p&gt;Although I do have long term plans outlined in document files or in notes on my phone, I usually need to make plans or schedule activities for more immediate upcoming events on a short term basis (a week or at most two weeks ahead) since plans are very frequently changed to adapt to changing circumstances or events that come up unexpectedly that need to be taken care of or resolved sooner.&lt;/p&gt;

&lt;p&gt;I thought it would make sense to make an application which could handle this issue in a more organized and simple manner and with a more minimalist approach than keeping dozens of random disorganized notes in a note application for short term planning.&lt;/p&gt;

&lt;p&gt;I decided that each event or activity needed to have a day it was assigned to, a location where it would occur, a name for the event, a description of the importance of the event (such as whether it was a low, medium, or high importance event), and a category for the event (such as whether it was about business, recreation, or was a creative activity for example).&lt;/p&gt;

&lt;p&gt;I set up the Rails API backend for the application by navigating to the directory where I wanted to create the application and entering into terminal the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rails new planner --api
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then I set up the necessary migrations, models and controllers for the events and the categories that these activities belonged to.&lt;/p&gt;

&lt;p&gt;I ran the migrations, then defined the models and the necessary methods for the controllers. Then I seeded the database with some example events and event categories. After this I moved all the files and folders except the README.md file into a new backend folder.&lt;/p&gt;

&lt;p&gt;While in the uppermost folder, or root directory, of the application, I used the create-react-app generator to create a new React application in a new frontend folder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-react-app planner-frontend
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the src folder in the frontend I created a components folder and then created presentation component files and container component files in that folder. Then I built out the presentation components and part of the container components for the application in JSX. &lt;/p&gt;

&lt;p&gt;I then imported these components to the App.js file, and modified the App.css file to add some CSS styling. Next I installed React Router by running the following code while in the frontend folder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install react-router-dom@5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This installed version 5 of React Router. I then imported BrowserRouter and Route into the index.js file and set up three different routes in the index.js file.&lt;/p&gt;

&lt;p&gt;I then installed Redux in order to use it for state management by running the following commands in the terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install redux

npm install react-redux
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I also installed Redux Thunk in order to use it for asynchronous requests in my application with the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install --save redux-thunk
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From there I continued to build out and design the components of the project until it had the functionality and appearance I needed it to have for its use as a short term planner.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Firebase Authentication with Next</title>
      <author>Chinwendu Agbaetuo</author>
      <pubDate>Fri, 12 Nov 2021 18:15:22 +0000</pubDate>
      <link>https://dev.to/dindustack/firebase-authentication-with-next-4ckp</link>
      <guid>https://dev.to/dindustack/firebase-authentication-with-next-4ckp</guid>
      <description>&lt;p&gt;I had to work on a project that required me to setup Firebase authentication. This is my first time using Firebase, after countless research and numerous YouTube tutorials. I finally got a hang of it, so I would love to share how I was able to configure it as well as setup protected routes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step One: Setup Firebase Console&lt;/strong&gt;&lt;br&gt;
To setup the console this &lt;a href="https://www.youtube.com/watch?v=awd_oYcmrRA&amp;amp;t=528s"&gt;tutorial&lt;/a&gt; was helpful.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step Two: Install Firebase packages&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn add firebase&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;



&lt;p&gt;&lt;code&gt;yarn add react-firebase-hooks&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step Three: Create .env.local file and add setup Firebase configuration&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// .env.local &lt;/span&gt;
&lt;span class="nx"&gt;NEXT_PUBLIC_FIREBASE_API_KEY&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;YOUR&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="nx"&gt;KEY&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;YOUR&lt;/span&gt; &lt;span class="nx"&gt;AUTH&lt;/span&gt; &lt;span class="nx"&gt;DOMAIN&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;NEXT_PUBLIC_FIREBASE_PROJECT_ID&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;YOUR&lt;/span&gt; &lt;span class="nx"&gt;PROJECT&lt;/span&gt; &lt;span class="nx"&gt;ID&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;YOUR&lt;/span&gt; &lt;span class="nx"&gt;STORAGE&lt;/span&gt; &lt;span class="nx"&gt;BUCKET&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;YOUR&lt;/span&gt; &lt;span class="nx"&gt;SENDER&lt;/span&gt; &lt;span class="nx"&gt;ID&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;NEXT_PUBLIC_FIREBASE_APP_ID&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;YOUR&lt;/span&gt; &lt;span class="nx"&gt;APP&lt;/span&gt; &lt;span class="nx"&gt;ID&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;YOUR&lt;/span&gt; &lt;span class="nx"&gt;MEASUREMENT&lt;/span&gt; &lt;span class="nx"&gt;ID&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step Four: Setup Firebase configuration file&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//firebaseClient.tsx&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;firebase&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;firebase/compat/app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;firebase/compat/auth&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;firebase/compat/firestore&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Nextjs Web Firebase configuration&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firebaseConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="na"&gt;apiKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NEXT_PUBLIC_FIREBASE_API_KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;authDomain&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;projectId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NEXT_PUBLIC_FIREBASE_PROJECT_ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;storageBucket&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;messagingSenderId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;appId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NEXT_PUBLIC_FIREBASE_APP_ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;measurementId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;firebase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initializeApp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firebaseConfig&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="sr"&gt;/already exists/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Firebase initialization error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;googleProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;firebase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GoogleAuthProvider&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;firebase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step Five: Pass firebase auth state where it is needed&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// google-login.tsx&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useAuthState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-firebase-hooks/auth&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;firebase&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;googleProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;config/firebaseClient&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next/link&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;GoogleSignIn&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleLogin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;auth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;firebase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;signInWithPopup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;googleProvider&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useAuthState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firebase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;        &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;                
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt; 
                  &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;photoURL&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                  &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;              &lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;                &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleLogin&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                  &lt;span class="nx"&gt;Login&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;              &lt;span class="p"&gt;)}&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="p"&gt;)}&lt;/span&gt;
     &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step Six: Protected routes&lt;/strong&gt;&lt;br&gt;
Protecting routes that can only be accessed when user is authenticated.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// profile.tsx&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useAuthState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-firebase-hooks/auth&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;firebase&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;googleProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;config/firebaseClient&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next/link&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Profile&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useAuthState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firebase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;This&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;profile&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Navigate to login page if user isn't authenticated &lt;/span&gt;
&lt;span class="nx"&gt;Profile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getInitialProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;firebase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;currentUser&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeHead&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;302&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;Location&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/login&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step Seven: Pass Environment variables&lt;/strong&gt;&lt;br&gt;
The &lt;code&gt;.env.local&lt;/code&gt; file is included in the &lt;code&gt;.gitignore&lt;/code&gt; file, that means it needs to be configured on the hosting platform. If hosting with &lt;a href="https://www.vercel.com"&gt;vercel&lt;/a&gt;, got the &lt;code&gt;project settings&lt;/code&gt;, proceed to the &lt;code&gt;Environment Variables&lt;/code&gt; and fill in the Firebase configuration.&lt;/p&gt;

&lt;p&gt;Please, let me know, if this method worked for you, or what can be improved. Thanks for reading!!! &lt;/p&gt;

</description>
      <category>firebase</category>
      <category>authentication</category>
      <category>nextjs</category>
      <category>vercel</category>
    </item>
  </channel>
</rss>
