<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>5 Ways To Drive Engagement In 2021 With This One Neat Trick</title>
      <author>Tim Myers</author>
      <pubDate>Sat, 10 Apr 2021 03:24:05 +0000</pubDate>
      <link>https://dev.to/denvercoder/5-ways-to-drive-engagement-in-2021-with-this-one-neat-trick-1agh</link>
      <guid>https://dev.to/denvercoder/5-ways-to-drive-engagement-in-2021-with-this-one-neat-trick-1agh</guid>
      <description>&lt;h2&gt;
  &lt;a href="#use-a-fiver"&gt;
  &lt;/a&gt;
  Use a Fiver
&lt;/h2&gt;

&lt;p&gt;1.) Write a title with the number 5 in it. People like the number 5 because it's not too big and it's not too small.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#set-it-and-forget-it"&gt;
  &lt;/a&gt;
  Set It and Forget It
&lt;/h2&gt;

&lt;p&gt;2.) Write your post and then forget about that shit. Don't look at it, don't respond to comments, basically don't engage at all.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#get-your-grifter-friends-to-share-your-post"&gt;
  &lt;/a&gt;
  Get Your Grifter Friends to Share Your Post
&lt;/h2&gt;

&lt;p&gt;3.) It's not good grift if no one sees it. Make a deal with your friends that if they share your grift, then you'll share their grift.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#keep-it-general-and-worthless"&gt;
  &lt;/a&gt;
  Keep It General and Worthless
&lt;/h2&gt;

&lt;p&gt;4.) Don't ever give away any valuable information. Why would someone buy your course or eBook if they've read it already. Make sure not to hamper your profits by posting any ACTUAL useful information.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reduce-reuse-recycle"&gt;
  &lt;/a&gt;
  Reduce, Reuse, Recycle
&lt;/h2&gt;

&lt;p&gt;5.) Don't ever dispose of your grift. Keep juggling your posts over and over again. Just make a small change like changing the date from 2020 to 2021. Share 10 items instead of 5. Share 8 items. You get the picture. Don't &lt;strong&gt;ever&lt;/strong&gt; throw anything away.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#always-make-it-look-like-youre-helping"&gt;
  &lt;/a&gt;
  Always Make It Look Like You're Helping
&lt;/h2&gt;

&lt;p&gt;6.) Don't forget to drop that bonus tip. People will really think you care. They won't know that you're following rule 5 and you just cut a post of 10 tips down to 6. You'll be giving less but they thing they'll be getting more.&lt;/p&gt;

&lt;p&gt;Thanks for reading and that's all y'all.&lt;/p&gt;

</description>
      <category>grifting</category>
      <category>grifter</category>
      <category>grift</category>
      <category>griftish</category>
    </item>
    <item>
      <title>Why I don't like to use Styled-Components</title>
      <author>Daniel Silva</author>
      <pubDate>Sat, 10 Apr 2021 02:28:49 +0000</pubDate>
      <link>https://dev.to/ucvdesh/why-i-don-t-like-to-use-styled-components-22k3</link>
      <guid>https://dev.to/ucvdesh/why-i-don-t-like-to-use-styled-components-22k3</guid>
      <description>&lt;p&gt;It's been a while since I post something here (Really busy, sorry!) and I will start to do it again with a polemic opinion. First, it's important to say that this is completely an opinion and I'm not trying to say "Don't use it!!", but creating a space to discuss some things I do not like about StyledComponents and why I don't use it. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-not-a-natural-syntax"&gt;
  &lt;/a&gt;
  &lt;em&gt;- Not a natural syntax:&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;This is probably the main reason and I mean, it's weird...There is no natural syntax about&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Wrapper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
   width: 30px;
`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What the heck is that string template after the div?! (I know what it is, but come on). It's used to do function callings, method callings, prop passing, but it's weird to get used to tagged template literals for CSS at least.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-theres-no-clear-convention-to-use-it"&gt;
  &lt;/a&gt;
  &lt;em&gt;- There's no clear convention to use it:&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;If you see this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's &lt;code&gt;&amp;lt;Button /&amp;gt;&lt;/code&gt; a component or a Styled-Component? Can be both and we have to search for it and, depending on how big your project is, can be a pain in the a$$. &lt;/p&gt;

&lt;p&gt;Some code editors (sometimes VsCode does this) even have problems going to the code line when you &lt;code&gt;cmd + click&lt;/code&gt; the Styled-Components making it a little awkward to track. &lt;/p&gt;

&lt;p&gt;Sometimes even it's exported from a "General" style file and that makes it even harder to know what you have to do or fix.&lt;/p&gt;

&lt;p&gt;Some projects use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;StyledWrapper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;``&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;to differentiate between a React Component and a Styled-Component, but there's not a real convention. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-you-can-do-theming-without-it"&gt;
  &lt;/a&gt;
  &lt;em&gt;- You can do theming without it:&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;You can easily build a &lt;code&gt;ThemeProvider&lt;/code&gt; using &lt;code&gt;React Context API&lt;/code&gt; that could manage the theming for the whole app and can be accessed anywhere you want. You can even build a simple &lt;code&gt;useTheme()&lt;/code&gt; custom hook to make it more descriptive and can manage a lot of things without installing another dependency on your project. &lt;/p&gt;




&lt;p&gt;Again, I'm not saying that Styled-Components are bad or that the creators are bad people or something, this is just my personal opinion based on projects that I've been working with. &lt;/p&gt;

&lt;p&gt;Do you have a different opinion? Do you think just like me? Do you like to add something to the post? Do it in the comments below!&lt;/p&gt;

&lt;p&gt;I do this completely non-profit, but if you want to help me you can go &lt;a href="https://www.buymeacoffee.com/danielsilva"&gt;here and buy me a coffee&lt;/a&gt; ;)&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How to Set Environment Variables in Next.js</title>
      <author>Hulya</author>
      <pubDate>Sat, 10 Apr 2021 02:12:43 +0000</pubDate>
      <link>https://dev.to/hulyakarakaya/how-to-set-environment-variables-in-next-js-3n3k</link>
      <guid>https://dev.to/hulyakarakaya/how-to-set-environment-variables-in-next-js-3n3k</guid>
      <description>&lt;p&gt;Hello friends, today I was trying to use environment variables inside a Next.js project, and it is really easy to work with.&lt;/p&gt;

&lt;p&gt;First of all, you don't need to download &lt;a href="https://www.npmjs.com/package/dotenv"&gt;&lt;code&gt;dotenv&lt;/code&gt; &lt;/a&gt; package anymore.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#steps-to-work-with-environment-variables"&gt;
  &lt;/a&gt;
  Steps to work with Environment Variables
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create a &lt;code&gt;.env.local&lt;/code&gt; file inside the root of your project.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Put your private keys inside the file in this format:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// .env.local
API_KEY="...."
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;3.Save the file and add it to the &lt;code&gt;.gitignore&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// .gitignore
.env*.local
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;4.Access your keys with &lt;code&gt;process.env&lt;/code&gt;. You can access your environment variables inside the &lt;code&gt;pages&lt;/code&gt; directory or while you are fetching data with the &lt;code&gt;getServerSideProps&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getServerSideProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;API_KEY&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/api/?key=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;API_KEY&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;articles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;articles&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;5.Add your environment variables in Vercel deployment.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c3i6XYMk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p91lrigz3cuna3knlinr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c3i6XYMk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p91lrigz3cuna3knlinr.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can store your environment variables on Vercel, shown in the picture.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;I hope you will not have any trouble storing your environment variables in your Next.js projects. Whenever I try to use environment variables, something goes wrong; but Next.js worked perfectly. &lt;/p&gt;

&lt;p&gt;If you like this post, share it on your Twitter account to support me writing more, also you can support me by &lt;a href="https://www.buymeacoffee.com/hulya"&gt;buying  a coffee.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/hulya"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kA3wM6t6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/default-red.png" alt="Buy Me A Coffee" height="40" width="170"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can follow me on &lt;a href="https://twitter.com/hulyakarkya"&gt;Twitter&lt;/a&gt;, and &lt;a href="https://github.com/hulyak"&gt;Github&lt;/a&gt;. We can connect with each other. Also, you can check out my other posts. I have shared resources that can help you learn Next.js.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/hulyakarakaya" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LF4uM7bO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--HjISEBSW--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/278302/e90a2e74-68c7-4187-9daf-bc745c96192f.png" alt="hulyakarakaya image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/hulyakarakaya/learn-next-js-for-free-with-these-resources-jfi" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Learn Next.js For Free with These Resources&lt;/h2&gt;
      &lt;h3&gt;Hulya ・ Mar 29 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#nextjs&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



</description>
      <category>nextjs</category>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>8 developer habits that help you progress</title>
      <author>Mehdi Zed</author>
      <pubDate>Sat, 10 Apr 2021 02:07:29 +0000</pubDate>
      <link>https://dev.to/jesuisundev/8-developer-habits-that-help-you-progress-24fc</link>
      <guid>https://dev.to/jesuisundev/8-developer-habits-that-help-you-progress-24fc</guid>
      <description>&lt;p&gt;Over time, I came to understand that one of the most important thing as a developer are habits. All the little decisions, the ways of doing things, the way you look at things. It may not seem like much from a day to day point of view. This is the secret for greatness.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#going-into-the-unknown"&gt;
  &lt;/a&gt;
  Going into the unknown
&lt;/h3&gt;

&lt;p&gt;Let's be honest, I haven't always done this. I was not that kind of person. I would take the task made for me. With my go-to language, on the part of the app that I know perfectly. I knew exactly what i needed to do before I even looked at it. &lt;strong&gt;Choosing the easy way, when it becomes a habit, is very dangerous.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;One day, I decided I was going to do the opposite. As soon as the opportunity arises to do something totally unknown, I'll jump on it. &lt;strong&gt;And the first time I finally did it, it was a disaster !&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YyUALsdi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/K3RK5zx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YyUALsdi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/K3RK5zx.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The time estimate ? I blew it up. It was a task estimated for one day or two. Took the whole week ! My company at that time was not happy. Me neither. But something more important happened. &lt;strong&gt;Something that seemed impossible and out of reach for me became commonplace.&lt;/strong&gt; And this alone changed everything.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you take the habit of getting into uncomfortable situations all the time, nothing will be uncomfortable anymore.&lt;/strong&gt; If you get out of your comfort zone, you'll stretch it out. And doing it frequently will gradually make you feel better all the time. You really win when the uncomfortable becomes your new norm. It's a lot easier than it sounds.&lt;/p&gt;

&lt;p&gt;What I suggest you do right now is look at the to-do tasks at your job. &lt;strong&gt;Take the one with a title you don't even understand&lt;/strong&gt;. And throw yourself in there in angel jump mode. For damage control, let's discuss how to handle the unknown.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#take-time-for-understanding"&gt;
  &lt;/a&gt;
  Take time for understanding
&lt;/h3&gt;

&lt;p&gt;For a long time, upon receiving a new task, i would start to write code immediately. The goal was to go fast. &lt;strong&gt;What could be faster than coding the solution right away ?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;And I totally understand if you do that too. We're pushed by tight deadlines and we're judged on our speed. &lt;strong&gt;But it's the worst possible habit.&lt;/strong&gt; It's really gonna hit you in the face sooner or later. To avoid that, you need a plan.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G2O_PIcN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/277pvVd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G2O_PIcN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/277pvVd.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The habit I'm advising you to follow is very simple. &lt;strong&gt;Don't do any lines of code until you have a complete solution of the problem.&lt;/strong&gt; It doesn't mean you have to go into detail and write a novel.&lt;/p&gt;

&lt;p&gt;It just means that, at least you know where you're going. &lt;strong&gt;Understanding, defining and solving the problem up front.&lt;/strong&gt; Just invest time beforehand! The code part will only be the application of a problem that has already been fixed.&lt;/p&gt;

&lt;p&gt;What you can do right now to start this habit is &lt;strong&gt;making diagrams for everything&lt;/strong&gt;. Before coding, use a paper and pencil. Or even better : whiteboard. Just draw your solution and make it work on paper. That all you need to do and it's terribly efficient!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#always-keep-it-simple"&gt;
  &lt;/a&gt;
  Always keep it simple
&lt;/h3&gt;

&lt;p&gt;I'm still amaze when i run into hyper-complex code for basic needs. We developers love making everything complex when we code. &lt;strong&gt;We have to abstract, decouple and above all show that we know how to do complex things.&lt;/strong&gt; It's a shitty habit.&lt;/p&gt;

&lt;p&gt;What I'm advising you here is a change of mindset. &lt;strong&gt;You have to get into the habit of asking yourself how to do the simplest things all the time.&lt;/strong&gt; Cut out the complexity, make classes with less responsibility, more functions, shorter that do one thing. Do everything you can to make it simple and readable. Your whole team should instantly understand what's going on in your code!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_gBADQto--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thumbs.gfycat.com/GratefulAthleticGalapagostortoise-size_restricted.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_gBADQto--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thumbs.gfycat.com/GratefulAthleticGalapagostortoise-size_restricted.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can apply this very simply today by making a conscious effort to simplify everything you code. &lt;strong&gt;The main advantage of doing this is maintainability.&lt;/strong&gt; It will save you and your entire team a lot of time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#be-careful-with-deadlines"&gt;
  &lt;/a&gt;
  Be careful with deadlines
&lt;/h3&gt;

&lt;p&gt;I've dedicated an entire article to this subject because it's such a source of anxiety in our profession. &lt;a href="https://www.jesuisundev.com/en/your-time-estimate-is-a-joke/"&gt;&lt;strong&gt;Your time estimate is a joke.&lt;/strong&gt;&lt;/a&gt; A good estimate is almost impossible to come out with.&lt;/p&gt;

&lt;p&gt;Problem is : you have to make estimates. A lot of them, all the time. &lt;strong&gt;Like most developers, you tend to underestimate those timelines.&lt;/strong&gt; It puts you in a world of trouble. And you regularly find yourself having to justify your estimate.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sb2x-yHz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Ani7Egq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sb2x-yHz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Ani7Egq.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To overcome that, I've established two habits. &lt;strong&gt;The first habit is that I always ask for more information.&lt;/strong&gt; More details, more precision, more context, more history, for whom ? why? is it possible to simplify ? is it possible to deliver using steps (alpha, beta and so on)? Yeah, I'm a big pain in the ass. But any information is critical and could save my life.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The second habit is that I never give a fixed estimate.&lt;/strong&gt; Always a range, a min/max. If I think it's going to take two days, I say it's going to take between two to four days. And if I have no choice but to give fixed number, then I say four days. Fuck it if it's too long, that's my estimate.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stepbystep-learning"&gt;
  &lt;/a&gt;
  Step-by-step learning
&lt;/h3&gt;

&lt;p&gt;When I was first introduced to Git, I was told that it was the basis for any respectable developer. Not knowing absolutely everything about Git was a disgrace as a developer. It put a lot of pressure on me. &lt;strong&gt;So I read the whole doc and tried to swallow it all in a few hours.&lt;/strong&gt; Of course, the next day, I was staring the console like an idiot after git status.&lt;/p&gt;

&lt;p&gt;I see a lot of people trying to do the same thing. Learn as much as possible as quickly as possible. &lt;strong&gt;You have to understand that your brain doesn't give a fuck if you want to go fast.&lt;/strong&gt; It'll come out as fast as it went in. People don't want to believe it, but it's true. You turn into a goldfish when you get too much information too fast. You can run as much as you want, you'll forget all about it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x6SxB9vr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/NdcYttr.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x6SxB9vr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/NdcYttr.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So how do you learn a lot of things then? &lt;strong&gt;Just study by reasonable lengths, give your brain time to print out the information, and come back to it the next day.&lt;/strong&gt; To do that, you can apply today a habit I picked up years ago that has done wonders.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Every time I hear a term or concept I don't understand, I write it down in a google doc.&lt;/strong&gt; When I have some time, I open this google doc, I take the first term/concept and I learn about it. And that's it, I stop there, we'll see another day for the rest. You don't realize how good it is in the long run. And it's in the long run that you have to invest your time. Development is a marathon, not a sprint.&lt;/p&gt;

&lt;p&gt;Another habit I've picked up is doing the same thing, but with bits of code and commands. &lt;strong&gt;I have long snippets on GitLab filled with complicated commands and other boring syntax to remember.&lt;/strong&gt; I use these snippets every day and it frees my head for something else while remaining efficient.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#taking-a-step-back"&gt;
  &lt;/a&gt;
  Taking a step back
&lt;/h3&gt;

&lt;p&gt;At the beginning of my career, very frequently, I insulted my computer out loud while working. Yeah, so without context, it's weird. Like all developers, I had bugs in my applications. &lt;strong&gt;Being stuck for a long period of time, my frustration was so high that I ended up losing it.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Tenacity, perseverance and resilience in the face of a problem are essential for all developers. I'm sure you've already lost your temper in front of your PC. We all have.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The secret is to step back and keep a logical and methodical approach.&lt;/strong&gt; Most of the time, when you go crazy over something, you're so into it that you can't see anything. When you get angry, you lose the focus that allows you to think normally. You need to approach things coldly and methodically. You can practice a very simple first habit to start with.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Next time you feel this, instead of imploding, get up and do something completely different.&lt;/strong&gt; Every time I do that, I'm gonna get coffee and/or see a colleague. When I get back to my seat : my brain is reset. I've taken a step back from what's going on and it's immediately clearer.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W0lsR0SO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/7RbzpVg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W0lsR0SO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/7RbzpVg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Then my second habit is to reduce the parameters and context of the problem to an extreme level.&lt;/strong&gt; In a methodical way, I remove the complexity of my problem to arrive in a simple context that works. Finally, I put back parameters one by one until it crashes. When it crashes, I find the culprit, I fix the bug and I don't insult anyone.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-concentration-tunnels"&gt;
  &lt;/a&gt;
  Creating concentration tunnels
&lt;/h3&gt;

&lt;p&gt;I often hear that to be an effective developer you have to be able to focus NON-STOP on a topic for several hours. I'll tell you right now: it's impossible. &lt;strong&gt;If you can hold 25 minutes on a single topic without flinching, it's already incredible.&lt;/strong&gt; I think it's more efficient to create concentration tunnels (20 to 30 minutes) and to take breaks between each tunnel.&lt;/p&gt;

&lt;p&gt;I've developed several habits over time to do that. &lt;strong&gt;The first habit I've established is the Pomodoro Technique.&lt;/strong&gt; Concretely I set a timer of 25 minutes and I work without pause and without interruption during this time. At the end of the timer, I take a 5 minute break, no matter where I am. You become absolutely imperturbable during the tunnels and it changes everything.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qm6_E3ZC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/CIL9awS.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qm6_E3ZC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/CIL9awS.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another super simple habit that you can put into practice right away: &lt;strong&gt;the next time you want to concentrate, turn your phone over or put it somewhere you can't see it&lt;/strong&gt;. You don't realize how much the notifications on your phone are messing with your brain. Seriously, just try it for one day and see. It's unbelievable.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#control-your-ego"&gt;
  &lt;/a&gt;
  Control your ego
&lt;/h3&gt;

&lt;p&gt;I mean, I'm bound to end this article on the ego. &lt;strong&gt;&lt;a href="https://www.jesuisundev.com/en/the-unbelievable-developers-ego/"&gt;The unbelievable developer ego is very real.&lt;/a&gt;&lt;/strong&gt; If I dedicated an entire article on it, it's because there is something to discuss.&lt;/p&gt;

&lt;p&gt;The main problem for a developer with an overflowing ego is that he has no room for improvement. &lt;strong&gt;If you can't control your ego, you feel you have nothing left to learn.&lt;/strong&gt; If you don't learn, you don't progress. If you don't progress, you regress. And believe me, you don't want to regress as a developer.&lt;/p&gt;

&lt;p&gt;Besides, beyond your regression, if you're really full of ego, you're an asshole. &lt;strong&gt;You piss people off and nobody wants to work with you.&lt;/strong&gt; That's not good for your career either. The good news is that you can easily control that oversized ego.&lt;/p&gt;

&lt;p&gt;The very easy to practice habit is very much in line with what I advise you in the first point. &lt;strong&gt;Get out of your comfort zone and fail.&lt;/strong&gt; Nothing better than a good old fail to put your ideas back in place and start afresh on your personal progress.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#epilogue"&gt;
  &lt;/a&gt;
  Epilogue
&lt;/h3&gt;

&lt;p&gt;It's a lot to take in all at once, but believe me, it's worth it. I read a book that gave some tips on how to absorb good habits. The secret is to take it slowly in stages by applying part of the habit a little bit every day. &lt;strong&gt;&lt;a href="https://amzn.to/2zCvuHP"&gt;It's called Atomic Habit, it helped me a lot&lt;/a&gt;&lt;/strong&gt;, I highly recommend it! I promise it will pay off in the long run.&lt;/p&gt;

</description>
      <category>motivation</category>
      <category>habits</category>
      <category>productivity</category>
      <category>beginners</category>
    </item>
    <item>
      <title>What I know about SSH</title>
      <author>michaeldrrc</author>
      <pubDate>Sat, 10 Apr 2021 00:37:07 +0000</pubDate>
      <link>https://dev.to/michaeldrrc/what-i-know-about-ssh-5ckk</link>
      <guid>https://dev.to/michaeldrrc/what-i-know-about-ssh-5ckk</guid>
      <description>&lt;p&gt;Authentication into a server are done in two ways mostly: username and password, and SSH keys. SSH keys are widely known to be more secure than a username and password due to advanced security techniques. So for fun, in my first post I want to discuss some of the details about the SSH protocol, ssh keys, and how to ssh into any server.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ssh-overview"&gt;
  &lt;/a&gt;
  SSH overview
&lt;/h2&gt;

&lt;p&gt;There are two computers involved in ssh. One is the client, who issues the ssh command, and the other is the host, which is running the ssh server. There are two requirements to ssh into a host machine. First, the client must have a ssh key pair. An ssh key pair can be generated using a command 'ssh-keygen' which comes pre-installed on Linux and Windows. This will create two separate files, a public key and a private key. This is known as an ssh key pair. The other requirement to gain access to the host machine is that the host must store the client's public key. The client's public key is stored in a file called 'authorized_keys' on the host&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-public-and-private-key"&gt;
  &lt;/a&gt;
  What is a public and private key?
&lt;/h2&gt;

&lt;p&gt;A public key is able to encrypt messages, and a private key is able to encrypt and decrypt messages. A message encrypted by a public key can only be decrypted by its corresponding private key. A public key and its corresponding private key forms a key pair. It is ok to distribute a public key, but not a private key. The reason for this is that if any third party has access to your private key, they can pretend to be you and authenticate themselves into any server which recognizes your public key. A private key should be kept very secure for this reason.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-ssh-work-simplified"&gt;
  &lt;/a&gt;
  How does SSH work? (simplified)
&lt;/h2&gt;

&lt;p&gt;When the client lets the server know it wants to authenticate, the following steps are carried out. Keep in mind this is simplified but captures the main points of a ssh authentication session. &lt;/p&gt;

&lt;p&gt;This is an example of a successful authentication:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The client informs the server that it wants to start a ssh session&lt;/li&gt;
&lt;li&gt;A session id is created&lt;/li&gt;
&lt;li&gt;The client sends its public key to the host. &lt;/li&gt;
&lt;li&gt;If the client's public key is in the file 'authorized_keys', a random string called a 'seed' is created, and the host encrypts the seed using the client's public key. &lt;/li&gt;
&lt;li&gt;The host sends the encrypted seed to the client. &lt;/li&gt;
&lt;li&gt;The client decrypts the server's message to reveal the seed using its corresponding private key. &lt;/li&gt;
&lt;li&gt;The client combines the seed with the session id, and sends it back to the host.&lt;/li&gt;
&lt;li&gt;The client generates a hash of the combined seed and session id for itself.&lt;/li&gt;
&lt;li&gt;The host generates a hash of the combined seed and session id for itself.&lt;/li&gt;
&lt;li&gt;The host compares its hash with the client's hash. If they are the same, the client must have the corresponding private key, so the client is authenticated.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;An unsuccessful authentication would go wrong at step 5. If the wrong private key is used to try to decrypt the server's message, the result will not be the seed, it will just be a random string. At step 10 the hashes will not be the same so authentication fails.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-ssh-into-any-server-quick"&gt;
  &lt;/a&gt;
  How to ssh into any server (quick)
&lt;/h2&gt;

&lt;p&gt;To ssh into any server, follow these steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Type
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ssh-keygen
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;into the terminal of the ssh client. When asked for a passphrase just press enter.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create a folder called '.ssh' on the host in the home directory of a user of your choice. If the '.ssh' folder is already present ignore this step.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a blank file called 'authorized_keys' in the '.ssh' folder on the host. If the file 'authorized keys' is present ignore this step.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There should be a file called 'id_rsa.pub' in the '.ssh' folder in the home directory of the client. Open this file.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open 'authorized_keys' on the host.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make sure you are on a blank new line in 'authorized_keys'. Paste the contents of 'id_rsa.pub' into 'authorized_keys'. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Type in ssh . You should now be successfully authenticated and running a terminal on the host!&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note: A passphrase in step 1 could be added for extra security but this is just a super quick way to get ssh working.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;That is all. This is my first blog post so thanks for viewing :)&lt;/p&gt;

</description>
      <category>ssh</category>
      <category>host</category>
      <category>client</category>
      <category>keys</category>
    </item>
    <item>
      <title>Create Awesome Product Card | UI Design | E-commerce Card | Using Only Html5 &amp; CSS3</title>
      <author>Ahmad Emran</author>
      <pubDate>Sat, 10 Apr 2021 00:30:00 +0000</pubDate>
      <link>https://dev.to/ahmadbassamemran/create-awesome-product-card-ui-design-e-commerce-card-using-only-html5-css3-553p</link>
      <guid>https://dev.to/ahmadbassamemran/create-awesome-product-card-ui-design-e-commerce-card-using-only-html5-css3-553p</guid>
      <description>

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/3IYlUpjsKfI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/AhmadEmran?sub_confirmation=1"&gt;&lt;strong&gt;Please do not forget to subscribe in my channel:&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ahmadbassamemran/embed/GRryraq?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>css</category>
      <category>showdev</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Fast Connect - New online web-conference platform</title>
      <author>Elman Huseynov</author>
      <pubDate>Sat, 10 Apr 2021 00:24:55 +0000</pubDate>
      <link>https://dev.to/huseyn0w/fast-connect-new-online-web-conference-platform-3p3i</link>
      <guid>https://dev.to/huseyn0w/fast-connect-new-online-web-conference-platform-3p3i</guid>
      <description>&lt;p&gt;This application is developed for creating fast and standalone video conferences without any registration.&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;COVID-19 Changed the world...&lt;/strong&gt; &lt;br&gt; Since year 2020 world is different. Majority of people change the way of workflow from Office to Remote mode. &lt;br&gt;&lt;br&gt;
We are required to use different enterprise applications to create a communication between each other. &lt;br&gt;&lt;br&gt;
Each of them has their own advantages, but in most cases you have to register or download application to use it. &lt;br&gt;&lt;br&gt;
Besides, you have to pay for &lt;strong&gt;"Premium"&lt;/strong&gt; accounts sometimes if you want to have extra options. &lt;br&gt;&lt;br&gt;
Moreover, in some countries, you can not use that popular softwares, because they have been blocked. &lt;br&gt;&lt;br&gt;
&lt;strong&gt;So this is the time when Fast Connect comes around...&lt;/strong&gt; &lt;br&gt;&lt;br&gt;
By using our application you &lt;strong&gt;DO NOT NEED&lt;/strong&gt; to download anything to your device, or pay for anything. &lt;br&gt;&lt;br&gt;
You can create new conference and use all features for &lt;strong&gt;ABSOLUTELY FREE&lt;/strong&gt; and &lt;strong&gt;without registration&lt;/strong&gt; ;) &lt;br&gt;&lt;br&gt;
All you have to do is to make 2 steps: &lt;br&gt;&lt;/span&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create unique ID for conference, send it to all your collegues. 
&lt;/li&gt;
&lt;li&gt;Enter that ID at homepage and start your conference. 

Good luck and have a good time =)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://serene-refuge-81999.herokuapp.com/"&gt;Demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/huseyn0w/Fast-Connect"&gt;Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://linkedin.com/in/huseyn0w"&gt;My Linkedin Profile&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Application features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No registration and NO "PREMIUM" accounts&lt;/li&gt;
&lt;li&gt;Realtime video/audio conference with unlimited number of users&lt;/li&gt;
&lt;li&gt;Different rooms creating option for conferations&lt;/li&gt;
&lt;li&gt;Chat for sending messages&lt;/li&gt;
&lt;li&gt;Screen Sharing option&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Technologies that used in creation of this app:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;React JS&lt;/li&gt;
&lt;li&gt;TypeScript&lt;/li&gt;
&lt;li&gt;Material UI&lt;/li&gt;
&lt;li&gt;Node / Express js&lt;/li&gt;
&lt;li&gt;Socket IO&lt;/li&gt;
&lt;li&gt;Peer JS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Like it ? Please star the project and share in return ;)&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>webrtc</category>
      <category>javascript</category>
      <category>typescript</category>
      <category>react</category>
    </item>
    <item>
      <title>Start with Python</title>
      <author>Shaheryar</author>
      <pubDate>Fri, 09 Apr 2021 23:56:35 +0000</pubDate>
      <link>https://dev.to/shaheryaryousaf/start-with-python-1cg6</link>
      <guid>https://dev.to/shaheryaryousaf/start-with-python-1cg6</guid>
      <description>&lt;p&gt;We will learn about the following concepts of python.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;print()&lt;/li&gt;
&lt;li&gt;input()&lt;/li&gt;
&lt;li&gt;String Concatenation&lt;/li&gt;
&lt;li&gt;String Manipulation&lt;/li&gt;
&lt;li&gt;Variables&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#print"&gt;
  &lt;/a&gt;
  print()
&lt;/h3&gt;

&lt;p&gt;This function is used to print any data (string, integer, a boolean value, etc) in the python console.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Make sure to use single or double quotes in the print function, if you are going to print a string. Don't need quotes if you are going to print any other data type.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;print("Hello World!")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#input"&gt;
  &lt;/a&gt;
  input()
&lt;/h3&gt;

&lt;p&gt;This function is used to get input from the user.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;input("What is your name?")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output will be print next to the input.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#variables"&gt;
  &lt;/a&gt;
  Variables
&lt;/h3&gt;

&lt;p&gt;We can store data values in variables, to use them later. Following are some rules to write variables in python and you should keep them in mind.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A variable name must start with a letter or the underscore character&lt;/li&gt;
&lt;li&gt;A variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ )&lt;/li&gt;
&lt;li&gt;Variable names are case-sensitive (age, Age, and AGE are three different variables)&lt;/li&gt;
&lt;li&gt;A variable name cannot start with a number
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var name = "John Doe"
print(name)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;name value (John Doe) will print in the next line.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can test your code here. &lt;a href="https://www.programiz.com/python-programming/online-compiler/"&gt;https://www.programiz.com/python-programming/online-compiler/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#project"&gt;
  &lt;/a&gt;
  Project
&lt;/h4&gt;

&lt;p&gt;You can check the Brand name generator project, you can check here.&lt;br&gt;
&lt;a href="https://dev.to/shaheryaryousaf/brand-name-generator-in-python-3744"&gt;https://dev.to/shaheryaryousaf/brand-name-generator-in-python-3744&lt;/a&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>python</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Brand Name Generator in Python</title>
      <author>Shaheryar</author>
      <pubDate>Fri, 09 Apr 2021 23:56:19 +0000</pubDate>
      <link>https://dev.to/shaheryaryousaf/brand-name-generator-in-python-3744</link>
      <guid>https://dev.to/shaheryaryousaf/brand-name-generator-in-python-3744</guid>
      <description>&lt;p&gt;We are going to create a Brand name generator project in python, it is a fairly simple project for beginners.&lt;/p&gt;

&lt;p&gt;Users will answer some questions and our program will generate a Brand name for them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;city = input("What is your city name?\n")
pet = input("What is your pet name?\n")
print("Your Band Name can be " + city + " " + pet)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can test the code by going on this link.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.programiz.com/python-programming/online-compiler/"&gt;https://www.programiz.com/python-programming/online-compiler/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>beginners</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>Getting form body data in your SvelteKit endpoints</title>
      <author>Dana Woodman</author>
      <pubDate>Fri, 09 Apr 2021 23:23:45 +0000</pubDate>
      <link>https://dev.to/danawoodman/getting-form-body-data-in-your-sveltekit-endpoints-4a85</link>
      <guid>https://dev.to/danawoodman/getting-form-body-data-in-your-sveltekit-endpoints-4a85</guid>
      <description>&lt;p&gt;Most of the time when working with forms, we opt to override the browser's default behavior (via &lt;code&gt;&amp;lt;form on:submit|preventDefault={handleSubmit}&amp;gt;&lt;/code&gt;), but sometimes we just want a simple form submission. &lt;/p&gt;

&lt;p&gt;In those cases, you may find yourself with an empty body coming into your SvelteKit endpoints. If that is you, read on!&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h1&gt;

&lt;p&gt;Suppose we have an HTML form like this and we want to &lt;code&gt;POST&lt;/code&gt; it's content to our endpoint at &lt;code&gt;/newsletter&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"post"&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"/newsletter"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Submit&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we tried to access &lt;code&gt;req.body&lt;/code&gt; from our endpoint directly, we would get this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ReadOnlyFormData {}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h1&gt;
  &lt;a href="#accessing-form-data"&gt;
  &lt;/a&gt;
  Accessing form data
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;What the heck is this?&lt;/strong&gt; With a little searching, you can see it defined in the SvelteKit types:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;ReadOnlyFormData&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Iterator&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;getAll&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="nl"&gt;has&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Iterator&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Iterator&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;values&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Iterator&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And for the weirdos among us, you can &lt;a href="https://github.com/sveltejs/kit/blob/master/packages/kit/src/core/http/get_body/read_only_form_data.js"&gt;check out the code for the &lt;code&gt;ReadOnlyFormData&lt;/code&gt; class on Github&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;But the tl;dr is that for form data, SvelteKit gives us this little class that we can use to pull out values in our endpoints.&lt;/p&gt;

&lt;p&gt;Here is how to use the basic property accessors:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;username&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// "sveltegroupie3000"&lt;/span&gt;

&lt;span class="c1"&gt;// Get an array of values (useful for checkboxes and selects)&lt;/span&gt;
&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;favIceCreamFlavors&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// ['vanilla', 'toffee', 'caramel']&lt;/span&gt;

&lt;span class="c1"&gt;// Check if a value exists (useful for boolean checkboxes)&lt;/span&gt;
&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;agreeToTerms&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And to get all the form data, you'll need to access the &lt;code&gt;Iterators&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Get all items in the form in an "entries" type array:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;
&lt;span class="c1"&gt;// [ [ "name": "Rich Harris" ], [ "hobbies", "svelte" ], [ "hobbies": "journalism" ] ]&lt;/span&gt;

&lt;span class="c1"&gt;// Get each keys:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;keys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;
&lt;span class="c1"&gt;// [ "name", "hobbies", "hobbies" ]&lt;/span&gt;

&lt;span class="c1"&gt;// Get all values:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;
&lt;span class="c1"&gt;// [ [ "Rich Harris" ], [ "svelte" ], [ "journalism" ] ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you should be able to work with your HTML form data, high five! 🙏&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#going-further"&gt;
  &lt;/a&gt;
  Going further
&lt;/h1&gt;

&lt;p&gt;If you're like me, you'd rather just have a nice little object to play with of all your form data. If you want something like this, try out the following helper function to parse your form data and modify as desired:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getFormBody&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;()].&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;true&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;false&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="c1"&gt;// Usage:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getFormBody&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this you can now access your form data as you're probably use to with thinks like Express.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#fin"&gt;
  &lt;/a&gt;
  Fin
&lt;/h1&gt;

&lt;p&gt;Thanks for reading and hope this was helpful! 🤓&lt;/p&gt;

&lt;p&gt;This post was inspired by a question @Teunminator in Svelte's #svelte-kit Discord channel, thanks for a fun challenge!&lt;/p&gt;

&lt;p&gt;PS: If you're trying to implement file uploads, you'll like see &lt;code&gt;Error: File upload is not yet implemented&lt;/code&gt; which is because SvelteKit does not yet support it (as of this writing). You'll have to upload your files in other ways until then.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Follow me on &lt;a href="https://dev.to/danawoodman"&gt;Dev.to&lt;/a&gt;, &lt;a href="https://twitter.com/DanaWoodman"&gt;Twitter&lt;/a&gt; and &lt;a href="https://github.com/danawoodman"&gt;Github&lt;/a&gt; for more web dev and startup related content&lt;/em&gt; 🤓&lt;/p&gt;

</description>
      <category>svelte</category>
      <category>sveltekit</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Secret Weapons: Pen and Paper</title>
      <author>Anthony</author>
      <pubDate>Fri, 09 Apr 2021 23:17:16 +0000</pubDate>
      <link>https://dev.to/toymachine/secret-weapons-pen-and-paper-1nhb</link>
      <guid>https://dev.to/toymachine/secret-weapons-pen-and-paper-1nhb</guid>
      <description>&lt;p&gt;When doing computer work there is an obvious inclination to doing your note-taking and documenting on the computer. And this makes sense, as it makes your notes accessible from anywhere and you never have to worry about losing them. The problem is that you are making major trade-offs when it come to retention and consideration of your thoughts. &lt;/p&gt;

&lt;p&gt;Any number of studies and articles over the past few years have highlighted the positives of handwritten notes. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.frontiersin.org/articles/10.3389/fpsyg.2020.01810/full"&gt;The Importance of Cursive Handwriting Over Typewriting for Learning in the Classroom&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://journals.sagepub.com/doi/abs/10.1177/0956797614524581"&gt;The Pen Is Mightier Than the Keyboard: Advantages of Longhand Over Laptop Note Taking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://commons.lib.jmu.edu/cgi/viewcontent.cgi?article=1056&amp;amp;context=lexia"&gt;The Benefits of Hand-written Versus Digital Notetaking in College Lectures&lt;/a&gt; [PDF]&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.gse.harvard.edu/news/uk/17/08/note-taking-low-tech-often-best"&gt;For Note Taking, Low-Tech Is Often Best&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It turns out what we learned in grade school was correct: writing things down means you are better able to recall them later. This, it turns out, needs to be done with pen and paper to be effective as typed notes doing see the same level of positive effect. &lt;/p&gt;

&lt;p&gt;This might be disheartening news for many of us who have lost what little handwriting capabilities we had and can type much faster than we can write longhand, but perhaps the slowness of handwritten notes is the key. For example, during a lecture, the slowness of writing requires one to listen, process, and then take abbreviated notes. A strong typist can capture the &lt;a href="https://www.huffingtonpost.com.au/2016/04/21/writing-by-hand-benefits_n_9735384.html"&gt;lecture almost word for word&lt;/a&gt;, focusing only on the typing. &lt;/p&gt;

&lt;p&gt;Studies also point to the laptops as being distracting. Despite your intention to focus on the topic at hand -- be is a lecture, a speech, a presentation, or a Zoom call -- laptops are filled with distractions where a pen and paper has no battery, alerts, pop-ups, or ability to quickly search for more information on a topic. &lt;/p&gt;

&lt;p&gt;Of course notebooks come with their own problems. A misplaced backpack or spilled coffee and lead to a disaster, with dozens of hours of work lost. This is something that would (almost) never happen with Google Docs, or at least would be completely avoidable with digital notes. &lt;/p&gt;

&lt;p&gt;This risk can be mitigated by taking notes by hand first, perhaps &lt;a href="https://unsharpen.com/whats-the-deal-with-moleskine/"&gt;in a nice notebook&lt;/a&gt; with a water-safe, pigmented pen and then to type in the notes later. This would be usefully for important information that is worth considering twice. It is also possible to simply scan in documents, which can be done at incredible speed and accuracy with any document scanner. &lt;/p&gt;

&lt;p&gt;My recommendation? Keep a paper notebook and a reliable pen at handy. Jot down your thoughts there, especially those taken on an important call, during a meeting with stakeholders, and other places where proper retention matters. Don't change your workflow for long pieces of text that you are going to drop into your notepad and search through later -- computers are great at that. So improve your notetaking when it matters and then stay efficient everywhere else. &lt;/p&gt;

</description>
      <category>writing</category>
      <category>notes</category>
      <category>productivity</category>
      <category>webdev</category>
    </item>
    <item>
      <title>A python regex to validate roman numerals</title>
      <author>Alexandre Donciu-Julin</author>
      <pubDate>Fri, 09 Apr 2021 23:13:41 +0000</pubDate>
      <link>https://dev.to/alexdjulin/a-python-regex-to-validate-roman-numerals-2g99</link>
      <guid>https://dev.to/alexdjulin/a-python-regex-to-validate-roman-numerals-2g99</guid>
      <description>&lt;p&gt;&lt;em&gt;Note: This is my first post, I hope you'll like it :)&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#im-not-gonna-lie-to-you-i-love-regex"&gt;
  &lt;/a&gt;
  I'm not gonna lie to you... I LOVE REGEX!
&lt;/h3&gt;

&lt;p&gt;As a kid, I grew up playing adventure games full of puzzles and riddles. Looking for the solution was a personal quest, a treasure hunt. Finding it was so exciting, but not as much as jumping on another riddle!&lt;/p&gt;

&lt;p&gt;When I discovered regular expressions on my journey to become a (good) python programmer, I felt that same excitement. I was blown away by the countless possibilities these were offering. Deciphering one was like suddenly being able to read hieroglyph, writing one was like discovering I could speak a foreign language. Although I know they should be used with caution and in special cases only, I keep pushing myself to use them everywhere I can. &lt;/p&gt;

&lt;p&gt;That's why, when &lt;a href="https://www.codewars.com/kata/51b66044bce5799a7f000003/train/python"&gt;Codewars&lt;/a&gt; challenged me to write a function to convert roman numerals from/to Arabic numbers, I could not resist writing a regex to help me solve that problem.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_GVGQwud--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4s41hungkq8yztw9nsj3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_GVGQwud--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4s41hungkq8yztw9nsj3.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#enough-chitchat-lets-get-our-hands-dirty"&gt;
  &lt;/a&gt;
  Enough chit-chat, let's get our hands dirty.
&lt;/h3&gt;

&lt;p&gt;My first task was to validate if the user input was a valid roman numeral. To sum up, roman numerals consists of the following symbols:&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZbIOaJP---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cte88ws99u84t39vn7uy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZbIOaJP---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cte88ws99u84t39vn7uy.png" alt="image"&gt;&lt;/a&gt;Source: &lt;a href="https://en.wikipedia.org/wiki/Roman_numerals"&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It seems that the thousands unit [M] does not extend past [MMM], which means that the biggest roman number would be [MMMCMXCIX], or 3999. I'm not sure if numbers could go higher than that and why the limit, anyway for the sake of this problem I limited myself with numbers between 1 and 3999.&lt;/p&gt;

&lt;p&gt;Now the trick is that the symbols placement is very important. If you don't put them in the right order, the resulting number would be invalid and unreadable. As listed in the table up there, numerals should start with thousands [M] 1000, followed by hundreds [D/C] 500/100, then dozens [L/X] 50/10, and finally units [V/1] 5/1.&lt;/p&gt;

&lt;p&gt;BUT, that's not it! Numerals can only repeat 3 times like [CCC] 300 before switching to a combo of two numerals like [CD] 400. So you can still have a [C] 100 before an [M] 1000, like in [CM] 900 for instance.&lt;/p&gt;

&lt;p&gt;Bit confusing, isn't it? &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--07jrPsfk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hyd4koybrd8kqlqrf8be.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--07jrPsfk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hyd4koybrd8kqlqrf8be.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#alright-lets-recap-our-conditions"&gt;
  &lt;/a&gt;
  Alright, let's recap our conditions:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Roman numbers are ranging from [I] 1 to [MMMCMXCIX] 3999&lt;/li&gt;
&lt;li&gt;Numerals should follow a precise order: [M] 1000 / [D] 500 / [C] 100 / [L] 50 / [X] 10 / [V] 5 / [I] 1&lt;/li&gt;
&lt;li&gt;A numeral cannot repeat more than 3 times, it then uses a pair&lt;/li&gt;
&lt;li&gt;The following pairs are allowed: [CM] 900 / [ID] 400 / [XC] 90 / [XL] 40 / [IX] 9 / [IV] 4&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Do you start to see our REGEX showing up? :)&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#lets-translate-this-into-code"&gt;
  &lt;/a&gt;
  Let's translate this into code.
&lt;/h3&gt;

&lt;p&gt;For this we are going to use a tag I find really helpful when writing regex is the verbose one (&lt;em&gt;re.VERBOSE&lt;/em&gt; or &lt;em&gt;re.X&lt;/em&gt;) It allows you to spread your pattern on multiple lines and be more readable. Let's try it!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_roman_number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s"&gt;"""   
                                ^M{0,3}
                                (CM|CD|D?C{0,3})?
                                (XC|XL|L?X{0,3})?
                                (IX|IV|V?I{0,3})?$
            """&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VERBOSE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Wow, that looks amazing already! Let's take a closer look at these 4 lines:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;^M{0,3}&lt;/strong&gt; = Between 0 and 3 [M] at the beginning [^] of the string&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;(CM|CD|D?C{0,3})?&lt;/strong&gt; = One pair [CM] or one pair [CD] or [D], followed by up to 3 [C]. Each element is optional [?], as well as the whole block [()?]&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;(XC|XL|L?X{0,3})?&lt;/strong&gt; = One pair [XC] or one pair [XL] or [L], followed by up to 3 [X]. Each element is optional [?], as well as the whole block [()?]&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;(IX|IV|V?I{0,3})?$&lt;/strong&gt; = One pair [IX] or one pair [IV] or [V], followed by up to 3 [I]. Each element is optional [?], as well as the whole block [()?], which should be at the end of the string [$]&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#lets-test-our-code"&gt;
  &lt;/a&gt;
  Let's test our code
&lt;/h3&gt;

&lt;p&gt;I'm using a simple fstring calling my function and comparing the string against our pattern to validate the numeral or not:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="n"&gt;num_valid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'MMDCCLXXIII'&lt;/span&gt;
&lt;span class="n"&gt;num_invalid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'CCCMMVIIVV'&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;num_valid&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; is &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'not'&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;is_roman_number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_valid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;a roman number"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;num_invalid&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; is &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'not '&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;is_roman_number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_invalid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;a roman number"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Output:
# MMDCCLXXIII is a roman number
# CCCMMVIIVV is not a roman number
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That wasn't so bad after all! Now look at this and tell me it's not the most beautiful thing you've seen in your life:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}(&lt;/span&gt;&lt;span class="n"&gt;CM&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;CD&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;XC&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;XL&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IX&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;IV&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="err"&gt;?$&lt;/span&gt;&lt;span class="s"&gt;'
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KTEdWmN9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ubznh8stkc79wcn5njdk.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KTEdWmN9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ubznh8stkc79wcn5njdk.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's all folks! Let me know if you are interested by the second part of the challenge: converting roman numerals from/to Arabic numbers and I will share my solution.&lt;/p&gt;

&lt;p&gt;Stay safe out there and read you soon :)&lt;/p&gt;

</description>
      <category>python</category>
      <category>regex</category>
      <category>beginners</category>
      <category>regularexpressions</category>
    </item>
  </channel>
</rss>
