<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Application factory pattern</title>
      <author>Mwenda Harun Mbaabu</author>
      <pubDate>Tue, 03 Aug 2021 15:47:17 +0000</pubDate>
      <link>https://dev.to/grayhat/application-factory-pattern-3aoj</link>
      <guid>https://dev.to/grayhat/application-factory-pattern-3aoj</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h3yMaeF1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/27kt8mmz5042el2o6414.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h3yMaeF1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/27kt8mmz5042el2o6414.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The application factory pattern in combination with Blueprints and the current_app proxy, provide a scalable, consistent and pluggable structural foundation for many Flask applications.&lt;/p&gt;

&lt;p&gt;In this tutorial, I'll give you a quick high level overview and a few examples of using this pattern.&lt;/p&gt;

&lt;p&gt;It's common to see many Flask applications start out with the following structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;app&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;static&lt;/span&gt;
&lt;span class="err"&gt;└──&lt;/span&gt;&lt;span class="n"&gt;templates&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, we have a &lt;strong&gt;views.py&lt;/strong&gt; file containing the application routes, static and templates directories for our static assets and HTML templates respectively, along with an &lt;strong&gt;&lt;strong&gt;init&lt;/strong&gt;.py&lt;/strong&gt; file to create the app object and register our routes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-minimal-app"&gt;
  &lt;/a&gt;
  &lt;strong&gt;A minimal app&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;In it's most simple form, a Flask application can be created with the following few lines of code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/__init__.py
&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To avoid circular dependency issues, we must import views after creating the &lt;strong&gt;app&lt;/strong&gt; variable, along with any other objects we need to import that reference the app object.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#importing-the-app-object"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Importing the app object&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Many other files in the application will need access to the app object created in the &lt;strong&gt;init&lt;/strong&gt;.py file, such as registering routes, logging or accessing config values.&lt;/p&gt;

&lt;p&gt;To do so, we must import it first:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/views.py
&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;


&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;

    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ENV"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"index.html"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We now have access to the app object for logging, accessing config values and registering the index route.&lt;/p&gt;

&lt;p&gt;While this solution works, it's not particularly elegant or scalable, especially when it comes to writing tests for the app.&lt;/p&gt;

&lt;p&gt;A better solution is to create a function in the &lt;strong&gt;init&lt;/strong&gt;.py file that builds the application object and returns it, often referred to as an application factory.&lt;/p&gt;

&lt;p&gt;The application factory&lt;br&gt;
As your Flask application grows, you'll often find the need to register blueprints, dynamically load configuration, add request handlers etc..&lt;/p&gt;

&lt;p&gt;The application factory is a function that wraps the creating of the app object and returns it.&lt;/p&gt;

&lt;p&gt;Here's an example, we'll go back and refactor our own &lt;strong&gt;init&lt;/strong&gt;.py file shortly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.utils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;""" Application factory

    Args:
        testing (bool): Will load TestingConfig if True, defaults fo False
    Returns:
        The Flask application object
    """&lt;/span&gt;

    &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Dynamically load config based on the testing argument or FLASK_ENV environment variable
&lt;/span&gt;    &lt;span class="n"&gt;flask_env&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"FLASK_ENV"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestingConfig&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;flask_env&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"development"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ProductionConfig&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;flask_env&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"testing"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestingConfig&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ProductionConfig&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Import and register blueprints
&lt;/span&gt;    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app.blueprints.views&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app.blueprints.api&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;

    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register_blueprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register_blueprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Unlike the previous example, we're now unable to directly reference the app variable throughout the aplication, so what now?&lt;/p&gt;

&lt;p&gt;We should take advantage of Flask's Blueprint feature, replacing any @app.route decorators with the newly created blueprint, along with another Flask feature - current_app. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#accessing-the-currentapp"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Accessing the current_app&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Having wrapped the app object inside of the create_app function, we still need a way to access it other than calling the function itself.&lt;/p&gt;

&lt;p&gt;Flask provides an import called current_app, which acts as a proxy to the current application and can be used as if you were calling app itself - Neat!&lt;/p&gt;

&lt;p&gt;Let's recreate the views.py file above using a Blueprint and referencing the current_app proxy:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Blueprint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;current_app&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;

&lt;span class="n"&gt;view&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Blueprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"view"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;

    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ENV"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Hello world!"&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, we didn't have to change much. We can even reference the app object by renaming the import.&lt;/p&gt;

&lt;p&gt;Before we can access the route, we need to register the new Blueprint with the application. We'll do this in the create_app function. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#registering-the-blueprint-in-the-application-factory"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Registering the Blueprint in the application factory&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;I'll now refactor the &lt;strong&gt;init&lt;/strong&gt;.py file to include the create_app function and register the Blueprint:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Here's a good place to load different configurations based on arguments passed to the create_app function or from environment variables
&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestingConfig&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app.views&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register_blueprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running the app gives us the same output as before, however in a much more modular, scalable and testable way.&lt;/p&gt;

&lt;p&gt;The create_app function can now easily be imported to your Python tests, called and take arguments, providing a dynamic way to load different configurations or trigger different behaviour etc..&lt;/p&gt;

&lt;p&gt;In conclusion, application factories such as the create_app function shown in this article, combined with the excellent Blueprint feature are the building blocks of robust and scalable Flask applications. &lt;/p&gt;

</description>
      <category>python</category>
      <category>machinelearning</category>
      <category>datascience</category>
      <category>programming</category>
    </item>
    <item>
      <title>The 2 simple use cases of improving user experience of forms just using HTML</title>
      <author>Stas Melnikov</author>
      <pubDate>Tue, 03 Aug 2021 15:46:03 +0000</pubDate>
      <link>https://dev.to/melnik909/the-2-simple-use-cases-of-improving-user-experience-of-forms-just-using-html-1001</link>
      <guid>https://dev.to/melnik909/the-2-simple-use-cases-of-improving-user-experience-of-forms-just-using-html-1001</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-showhide-password-pattern"&gt;
  &lt;/a&gt;
  The show/hide password pattern
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vTrkwlGS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://c10.patreonusercontent.com/3/eyJ3Ijo2MjB9/patreon-media/p/post/54375969/5654c4c7e7954c349c336abe5e7c3ef0/1.jpg%3Ftoken-time%3D1629158400%26token-hash%3Da55AdGf9N1gjMZc0hXK7gvhtu5NWeun1AnQG4xYqiLQ%253D" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vTrkwlGS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://c10.patreonusercontent.com/3/eyJ3Ijo2MjB9/patreon-media/p/post/54375969/5654c4c7e7954c349c336abe5e7c3ef0/1.jpg%3Ftoken-time%3D1629158400%26token-hash%3Da55AdGf9N1gjMZc0hXK7gvhtu5NWeun1AnQG4xYqiLQ%253D" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the last years, the hide/show button pattern became very popular. But a lot of people use it wrong. The mistake is in choosing the right HTML element. &lt;/p&gt;

&lt;p&gt;People think users will interact with an element only using a mouse. Just click one time, two, etc. But the value of this pattern is more important.&lt;/p&gt;

&lt;p&gt;Firstly, users use the keyboard quickly focusing from the field to the button using the tab key. Then they push the enter key for showing or hiding the password. &lt;/p&gt;

&lt;p&gt;Secondly, screen readers have to detect this element is interactive. Then users can use it.&lt;/p&gt;

&lt;p&gt;So only one element meets all these requirements — the button element. Use it and your users will be happy to use your interface.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#showing-the-correct-virtual-keyboard-when-you-ask-to-enter-a-code"&gt;
  &lt;/a&gt;
  Showing the correct virtual keyboard when you ask to enter a code
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aQk_ZAAW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://c10.patreonusercontent.com/3/eyJ3Ijo2MjB9/patreon-media/p/post/54375684/ffe486076c174da29946eb5b3fe99d1f/1.jpg%3Ftoken-time%3D1629158400%26token-hash%3DBsLdISRPEFuilBqpLQxPa0Cv62j1L50bKIM6KICYInA%253D" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aQk_ZAAW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://c10.patreonusercontent.com/3/eyJ3Ijo2MjB9/patreon-media/p/post/54375684/ffe486076c174da29946eb5b3fe99d1f/1.jpg%3Ftoken-time%3D1629158400%26token-hash%3DBsLdISRPEFuilBqpLQxPa0Cv62j1L50bKIM6KICYInA%253D" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to make UX of forms more simple and user-friendly you should right choose the type attribute. That's important because the attribute helps browsers show the most appropriate virtual keyboard. Thus users can more quickly fill forms. For example, if users fill in a phone number type="tel" shows the keyboard with digits and other special symbols.&lt;/p&gt;

&lt;p&gt;But there are cases when existing values can't be applied. For example, when you sign in you want to ask users to enter a numeric code. &lt;/p&gt;

&lt;p&gt;In these cases, you can use the special inputmode attribute that helps browsers display a correct keyboard as well. In the cases with a numeric code, you should use the numeric value. Then browsers will display the keyboard with digits only and users will fill the field quickly as well as with the type attribute.``&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt;&lt;br&gt;
😊 If you like this post, please, &lt;a href="https://twitter.com/intent/tweet?text=Stas%20Melnikov%20told%20about%20how%20we%20can%20improve%20UX%20of%20forms%20using%20only%20HTML%20on%20%40ThePracticalDev%20www.dev.to/melnik909/the-2-simple-use-cases-of-improving-user-experience-of-forms-just-using-html-1001"&gt;share on Twitter&lt;/a&gt;&lt;br&gt;
🖐 I make free written accessibility review so that you don't make common mistakes. If you're interested in that chat me on &lt;a href="mailto:melnik909@ya.ru"&gt;melnik909@ya.ru&lt;/a&gt; or dev.to direct. Please, specify the subject of the email "Stas, need help" &lt;/p&gt;

&lt;p&gt;🥇 If you want to be first who take my tips get &lt;a href="https://www.patreon.com/melnik909"&gt;my paid subscription on Patreon&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🎁 Make a gift yourself or friends who like frontends: 👕 &lt;a href="https://www.redbubble.com/i/t-shirt/Front-End-developer-by-melnik909/79109127.FPE53"&gt;T-Shirt&lt;/a&gt;, 🎁 &lt;a href="https://www.redbubble.com/i/sticker/Front-End-developer-by-melnik909/79109127.EJUG5"&gt;Stickers&lt;/a&gt;, 🥽 &lt;a href="https://www.redbubble.com/i/mask/Front-End-developer-by-melnik909/79109127.6BSL1"&gt;Masks&lt;/a&gt;, 🧩 &lt;a href="https://www.redbubble.com/i/magnet/Front-End-developer-by-melnik909/79109127.TBCTK"&gt;Magnets&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P.S.S.&lt;/strong&gt; This post was written with the support of my sponsors: Ben Rinehart, Sergio Kagiema, Jesse Willard, Tanya Ten.&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>a11y</category>
      <category>ux</category>
    </item>
    <item>
      <title>How does a QR code work ?</title>
      <author>Clément Gaudinière</author>
      <pubDate>Tue, 03 Aug 2021 15:45:11 +0000</pubDate>
      <link>https://dev.to/clementgaudiniere/how-does-a-qr-code-work-c2a</link>
      <guid>https://dev.to/clementgaudiniere/how-does-a-qr-code-work-c2a</guid>
      <description>&lt;p&gt;Hello everyone, as you have seen in the title, today we are going to go back to the origins of the QR code. Nowadays, QR codes are used all the time, they allow you to link something physical to something digital. For example, you can simply scan a QR code to access a link, rather than copying the whole link.&lt;br&gt;
That's why it's important to understand how they work, and why not in a future article how to create one !&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-long-has-it-been-around-"&gt;
  &lt;/a&gt;
  How long has it been around ?
&lt;/h3&gt;

&lt;p&gt;Firstly, since when have qr codes existed ? They have been around longer than you might think, in fact they were invented in 1994 by the company Denso-Wave.  They were used to track the transport of spare parts in Toyota factories. Denso Wave made the qr code free in 1999, but it was not really used until the rise of smartphones, about ten years later.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#principle"&gt;
  &lt;/a&gt;
  Principle
&lt;/h3&gt;

&lt;p&gt;Now we will discuss the principle of qr code. To do this, we will use this qr code, which refers to the dev.to link :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KAFV_IaB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nwa4yvpw7zw3t6yvluxf.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KAFV_IaB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nwa4yvpw7zw3t6yvluxf.jpg" alt="dev.to qr code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To begin with, a qr code is made up of large white and black squares in three of its corners. These squares are called modules. Some of these modules must not be covered or modified, otherwise the code cannot be scanned. These are the position markers. They tell the scanner where the edges of the QR Code are. The modules are shown here with a red overlay :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--opMpw-Zj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pt3dptdhcvprogwgqust.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--opMpw-Zj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pt3dptdhcvprogwgqust.jpg" alt="dev.to qr code modul"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we're going to take a slightly longer link and generate a qr code, so I've chosen to generate the qr code from youtube.com :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_3OvmKzl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q91gcktivq21vyot29m3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_3OvmKzl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q91gcktivq21vyot29m3.jpg" alt="youtube.com qr code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One can notice inside this new qr code an alignment marker, in red in the image below :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fSA9CNfK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fodfz4iz1h4fmubrq3pz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fSA9CNfK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fodfz4iz1h4fmubrq3pz.jpg" alt="youtube.com qr code alignment marker"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It acts as a reference point for the scanner, ensuring that everything lines up correctly. On larger codes there are several reference points.&lt;/p&gt;

&lt;p&gt;In this qr code, from the systemid.com website :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iHZUCCsj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/87alze5i0mznkzv3igu1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iHZUCCsj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/87alze5i0mznkzv3igu1.jpg" alt="systemid.com qr code legende"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Red stripes can be observed which are called timing patterns. They define the positioning of the rows and columns. In addition, the green sections indicate to the reader the format of the QR Code, whether it is a website, a text or other. Finally, the blue modules represent the version number, i.e. the more modules there are, the higher the version.Until v40 which represents 177 * 177 modules. Once all these modules are deconstructed we are left with the grey part :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6BPPwNpj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jf7da0l25f1izdwkugeb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6BPPwNpj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jf7da0l25f1izdwkugeb.jpg" alt="systemid.com qr code grey part"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The remaining modules are grouped in 8 groups, thus forming a byte. (A byte was composed of 8 bits).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#error-correction"&gt;
  &lt;/a&gt;
  Error correction
&lt;/h3&gt;

&lt;p&gt;QR codes are practical, they are so fast that it sometimes takes less than a second to flash one, their secret ? They don't need to be scanned in full to be read. So if part of the code is damaged it doesn't matter, and the QR code can be read. But how does it do that ? The qr code has a self-correcting error system based on the Reed-Solomon code which is a so-called perfect code invented by mathematicians Irving S. Reed and Gustave Solomon. The fact that part of the code can be covered without preventing its correct reading allows us to make the Qr code more attractive by integrating graphic elements :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BodX2zDX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/drnruuwj5on2uccnatws.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BodX2zDX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/drnruuwj5on2uccnatws.jpg" alt="custom qr code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to create your own qr code, I recommend the &lt;a href="https://www.unitag.io/qrcode"&gt;Unitag.io&lt;/a&gt;  website, which allows you to manage many customization effects. &lt;/p&gt;

&lt;p&gt;In a next tutorial, we will see how to create a QR code generator in javascript. I hope this tutorial has helped you understand the different processes behind QR codes, if you have any questions, feel free to ask me in the comments. 👍&lt;/p&gt;

</description>
      <category>qrcodes</category>
      <category>flashcodes</category>
      <category>tech</category>
      <category>programming</category>
    </item>
    <item>
      <title>Por quê Leitora Incomum?</title>
      <author>Fernanda Souza</author>
      <pubDate>Tue, 03 Aug 2021 15:34:20 +0000</pubDate>
      <link>https://dev.to/leitoraincomum/por-que-leitora-incomum-35ec</link>
      <guid>https://dev.to/leitoraincomum/por-que-leitora-incomum-35ec</guid>
      <description>&lt;p&gt;Sim, é isso mesmo, vamos falar nesse primeiro post aqui no &lt;strong&gt;&lt;em&gt;Dev.to&lt;/em&gt;&lt;/strong&gt; sobre o meu nome de usuário nas redes sociais que tem rendido curiosidade de algumas pessoas desde que passei a falar mais sobre minhas aventuras como graduanda de &lt;strong&gt;Análise e Desenvolvimento de Sistemas&lt;/strong&gt;, mesmo que algumas achem meio óbvio, não é tanto assim.&lt;/p&gt;

&lt;p&gt;Impossível falar sobre isso sem falar sobre mim, sobre a minha trajetória de vida pois sempre fui considerada uma pessoa incomum. Segundo o dicionário temos a seguinte definição de incomum:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Algo que não é comum; anormal, extraordinário, fora do comum, invulgar.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;E foi assim mesmo que fui denominada e me senti durante boa parte da vida, sempre fora do comum, anormal aos ambientes em que eu estava e isso fez com que eu demorasse a encontrar meu espaço nesse mundo.&lt;/p&gt;

&lt;p&gt;E quais eram as razões de ser considerada incomum? Pensem numa menina apaixonada por saladas desde que começou a engatinhar, por fliperamas e jogos desde que aprendeu a andar e que começou a ler de tanto insistir com a mãe com quatro anos, sem ter pisado na escola ainda. Não bastando tudo isso tão cedo, eu estava no bairro de Itaquera (aquele mesmo do estádio do Corinthians) na Zona Leste, periferia de São Paulo. Tudo isso não era direcionado para aquelas pessoas de jeito nenhum no fim dos anos 80 ou anos 90, a gente tinha que subverter o comum para ocupar esses espaços e a minha mãe lutou até onde pode comigo para que isso fosse possível.&lt;/p&gt;

&lt;p&gt;Na vida adulta, eu logo parei um pouco com a parte de games quando casei e me tornei mãe do Arthur, mas ainda restou um hábito incomum nas minhas leituras. Eu até gosto de livros de fantasia e ficção científica, mas são os dramas e terrores psicológicos que realmente me prendem, além de biografias e textos sobre situações reais. E foi para encontrar com quem falar desses hábitos de leitura que em novembro de 2011, surgiu o &lt;a href="//www.leitoraincomum.com.br"&gt;www.leitoraincomum.com.br&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Escrever as resenhas para aprimorar a escrita, era só uma pequena parte do blog, eu queria ver se conseguiria me conectar com pessoas com gostos parecidos com os meus ou que pelo menos conversassem comigo de mente aberta sobre isso. E assim, o blog caminhou até o fim de 2015, quando entrei na graduação de &lt;strong&gt;Gestão de Tecnologia da Informação&lt;/strong&gt; e comecei a ter que escolher para onde ia a dedicação tanto com leituras quanto com a escrita, pois sim a gente lê bastante em cursos de tecnologia.&lt;/p&gt;

&lt;p&gt;Foi também aí que comecei a falar mais de outras coisas que eu gosto como séries, filmes e jogos, pois foi a fase que Arthur começou a se apaixonar pelo mundo de jogos também. E em 2018 começou o questionamento se ainda fazia sentido manter o &lt;strong&gt;leitora&lt;/strong&gt; no apelido, afinal eu definitivamente não ia ser só uma pessoa falando de livros na internet, falaria de mais coisas que fazem parte de quem eu sou.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AMIBERvg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n2ntkqavl1w945cazzdw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AMIBERvg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n2ntkqavl1w945cazzdw.png" alt='Imagem dividida em três fotos, a esquerda uma criança negra com o cabelo crespo partido ao meio e preso em dois pufs, segurando uma colher de pau na direita e usando um vestidinho branco, logo abaixo dessa escrito "Baby Fê". Ao meio, uma moça negra com o cabelo penteado e amarrado para festa com um topete, usando beca de formatura preta com babado branco e detalhe vermelho, com a bochecha apoiada na mão e sorrindo, logo abaixo escrito "Jovem Fê". A direita, uma mulher negra de cabelo com tranças longas azuis com duas mexas rosa, usando óculos de grau, olhando de lado e no fundo prateleiras com um sapo de pelúcia, usando uma camiseta branca com uma jaqueta verde por cima, abaixo escrito "Atual Fê"'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;E no início de 2020, após muito refletir e quando eu troquei de curso na faculdade, percebi que sim vai fazer sentido sempre ser a &lt;strong&gt;Leitora Incomum&lt;/strong&gt;, pois eu leio por amor, leio pra aprender algo, leio códigos para consertar erros, amo livrarias e cheirar livros, etc. Ser leitora é uma parte de absolutamente tudo que eu faço, até das músicas que escuto e sempre estou conectada nas letras, no que elas significam independente do idioma. O incomum, ficará sempre em respeito a minha história desde a baby Fê até a idosa Fê. É também uma forma de sempre manter todas as versões da minha história em tudo que eu faço.&lt;/p&gt;

&lt;p&gt;Espero que tenham gostado de saber mais sobre isso.&lt;/p&gt;

</description>
      <category>devlive</category>
      <category>career</category>
      <category>softskills</category>
      <category>braziliandevs</category>
    </item>
    <item>
      <title>Writing Javascript from the future. A brief intro to Rescript.</title>
      <author>Guilherme Luiz</author>
      <pubDate>Tue, 03 Aug 2021 15:05:53 +0000</pubDate>
      <link>https://dev.to/guilhermells/writing-javascript-from-the-future-a-brief-intro-to-rescript-44p6</link>
      <guid>https://dev.to/guilhermells/writing-javascript-from-the-future-a-brief-intro-to-rescript-44p6</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-ignition-point"&gt;
  &lt;/a&gt;
  The ignition point
&lt;/h2&gt;

&lt;p&gt;Rescript is a strongly and statically typed functional programming language.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#alright-so-what"&gt;
  &lt;/a&gt;
  Alright, so what?
&lt;/h2&gt;

&lt;p&gt;Part of Rescript's magic comes from its interoperablity and similarity with the well known Javascript. This means you can use JS libraries in Rescript code and use Rescript code in projects with JS. The compiler transforms the Rescript code into readable JS or TS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#showing-the-code"&gt;
  &lt;/a&gt;
  Showing the code
&lt;/h2&gt;

&lt;p&gt;Here is an example of interop with external JS libs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rescript"&gt;&lt;code&gt;&lt;span class="nd"&gt;@module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"@headlessui/react"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;external&lt;/span&gt; &lt;span class="nc"&gt;Transition&lt;/span&gt;: &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Transition"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pretty simple, I'd say.&lt;/p&gt;

&lt;p&gt;Here are some code chunks showing off some syntax.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rescript"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;student&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;"name"&lt;/span&gt;: &lt;span class="s2"&gt;"John Cena"&lt;/span&gt;,
  &lt;span class="s2"&gt;"id"&lt;/span&gt;: &lt;span class="mi"&gt;123456&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// this is both valid JS and Rescript&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rescript"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;multiply&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;, &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;,&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// this is also both valid JS and Rescript&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#why-should-you-use-it"&gt;
  &lt;/a&gt;
  Why should you use it?
&lt;/h2&gt;

&lt;p&gt;Until now, i've only said its similarities to Javascript, I have not given any examples on why is it usefull or even worth using. Here are some Rescript built-in features that I find extremelly usefull.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Strong, static and inferred type system&lt;br&gt;
Rescript is a language that uses the ML family type system behind the scenes, that is why it is bullet proof. Here is a small comparison between Rescript and Typescript type inference.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight rescript"&gt;&lt;code&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;sumIfTrue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;, &lt;span class="n"&gt;a&lt;/span&gt;, &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;term1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;term2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="n"&gt;term1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;term2&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;isEven&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="ow"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;,&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sumIfTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isEven&lt;/span&gt;, &lt;span class="s2"&gt;"string"&lt;/span&gt;, &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;The code above has an error, the rescript compiler knows that the parameter &lt;code&gt;a&lt;/code&gt; must be a number. (&lt;a href="https://rescript-lang.org/try?code=DYUwLgBAzgrgtgSQGYBUBOMQQLwQBRghRgA0EAhmQEYCUOAfBAN4BQEEokhacAjDhACWSCIWJ5ydJuQC+EEMChYmABhlsO4USB4AmAcO3jazKnIVLmajRu58IAam16W6lpyFQAogDcQAOwEADwYIOAB7ABM8IJJdOmxEiBUWdy00IhhgSFxYRFQMEDxBbz9-MgAiYjRBfwBzCrJ4oA"&gt;Example in Rescript Playground&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sumIfTrue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;term1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;term2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;term1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;term2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isEven&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sumIfTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isEven&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;The Typescript compiler will not automatically infer the types of any function, hence this is valid TS and might break in a real world app. (&lt;a href="https://www.typescriptlang.org/play?#code/MYewdgzgLgBBCuBbAkgMwCoCd4FMYF4YAKKHaAGhgENKAjASgID4YBvAKBhgBsdZTMiAIwEYpaESqMA-NRgAuGAAYA3Jx58xOQQCZR4qEQYxZtBcrXrMfeJjBbBIgNQPEOtQF927UJFgBLCABRADcce0IiAA9GfBYOLmsoW3somABSGD18HIt2Lx9waDlCBBQMbBwiQNDwygAiaEx-MABzevIdenYgA"&gt;Example in Typescript Playground&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;The examples above are really simple and the mistakes are easily identifiable, but we must consider that in larger and more complex applications these mistakes gets harder and harder to identify manually.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fast compile time&lt;br&gt;
Many developers do not feel the need of this feature, because they have high-end machines and build times in big TS projects already gotten so high, that we migh have lost perception of speed in this case. Rescript's compiler makes type checking fast again.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JSX&lt;br&gt;
React can be used out of the box with rescript, since JSX is part of Rescript's syntax. I will talk a little bit more about this in a future article. If you are super interested, checkout out the &lt;a href="https://rescript-lang.org/docs/react/latest/introduction"&gt;official docs&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;No null or undefined&lt;br&gt;
This wipes out a big amount of bugs, since there are not &lt;code&gt;Cannot read property foo of undefined&lt;/code&gt; or &lt;code&gt;undefined is not a function&lt;/code&gt; in rescript code. However, rescript has the concept of nullish and optional values safely implemented in the language core.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pattern Matching and Labelled arguments&lt;br&gt;
They are not something that you look for until you realize how usefull they are. After that, you will miss these features in any other language that does not have them.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rescript"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;getIshColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;~&lt;span class="n"&gt;color&lt;/span&gt;,~&lt;span class="n"&gt;suffix&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;ish&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s2"&gt;"blue"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"blueish"&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s2"&gt;"red"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"redish"&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s2"&gt;"yellow"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"yellowish"&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"unknownish"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; 
  &lt;span class="n"&gt;ish&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;suffix&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getIshColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;~&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"red"&lt;/span&gt;,~&lt;span class="n"&gt;suffix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"car"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// no more confusing argument orderantion!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#why-not-to-use-it"&gt;
  &lt;/a&gt;
  Why not to use it
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Using something new and not tested at scale.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is natural that human beings reject something that changes their day to day directlly. The principles of rescript might be a pain in the beginning, even tought they will pay off in a medium/long term. About the "tested at scale": rescript is used by Facebook's team and many other companies, such as Drafbit. The technical quality of their products cannot be contested, so the point here is about quantity. We only know something can be safelly used until many people start using it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#outro"&gt;
  &lt;/a&gt;
  Outro
&lt;/h2&gt;

&lt;p&gt;For this article, that is all. I am probably going to cover other important points of rescript in future posts, but for the introduction I feel like this is enought.&lt;/p&gt;

&lt;p&gt;Thanks for the reading and see you in the next one.&lt;/p&gt;

</description>
      <category>rescript</category>
      <category>react</category>
      <category>javascript</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Checkbox CSS : how to Style Gradient Checkbox with pure CSS.</title>
      <author>Modern Web</author>
      <pubDate>Tue, 03 Aug 2021 14:29:34 +0000</pubDate>
      <link>https://dev.to/kunaal438/checkbox-css-style-gradient-checkbox-with-pure-css-custom-input-css-3gko</link>
      <guid>https://dev.to/kunaal438/checkbox-css-style-gradient-checkbox-with-pure-css-custom-input-css-3gko</guid>
      <description>&lt;p&gt;Hello, welcome. In toady's article you'll learn to style checkbox. You'll learn to make custom checkbox for your site.&lt;/p&gt;

&lt;p&gt;Checkbox are widely use in these days to collect data from user. We all have seen checkbox a lot. Today in this article you'll learn to style checkbox and give it a gradient background. This checkbox looks really good.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#video-tutorial"&gt;
  &lt;/a&gt;
  Video Tutorial
&lt;/h1&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/XyKMOR0l8zo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;So, without wasting more time let's see how to code this.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h1&gt;

&lt;p&gt;First, for this project we have 2 files &lt;code&gt;index.html&lt;/code&gt; and &lt;code&gt;style.css&lt;/code&gt;. Start by writing basic HTML structure. After that, create a checkbox.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And center it with CSS using flex box.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#f8f7f7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3fTlpe28--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/od4g8nbc4lu0p8oqsm3k.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3fTlpe28--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/od4g8nbc4lu0p8oqsm3k.PNG" alt="Capture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now Style Checkbox.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.checkbox&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;-webkit-appearance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#f8f7f7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iiHPHFdu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/66cvajnfenryrkg1v54n.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iiHPHFdu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/66cvajnfenryrkg1v54n.PNG" alt="Capture-2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-webkit-appearance&lt;/code&gt; property is used to hide default input styles.&lt;/p&gt;

&lt;p&gt;Now use &lt;code&gt;:checked&lt;/code&gt; event to check that checkbox is checked or not. And set it's background to gradient color.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.checkbox&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;140deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#ff6a6a&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#e6ff59&lt;/span&gt; &lt;span class="m"&gt;40%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#41c4fc&lt;/span&gt; &lt;span class="m"&gt;98%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#output-when-it-is-checked"&gt;
  &lt;/a&gt;
  Output (when it is checked)
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GDVKTOFB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n1dt7c9h8gwd45ru4crt.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GDVKTOFB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n1dt7c9h8gwd45ru4crt.PNG" alt="Capture-3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we have to make check sign. For this I'll use an image but you can create a check sign with pure CSS. It's totally up to you.&lt;/p&gt;

&lt;p&gt;Use &lt;code&gt;::before&lt;/code&gt; pseudo element to add check image.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.checkbox&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;140deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#ff6a6a&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#e6ff59&lt;/span&gt; &lt;span class="m"&gt;40%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#41c4fc&lt;/span&gt; &lt;span class="m"&gt;98%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.checkbox&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;55%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;pointer-events&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url(check.png)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;contain&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-repeat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;no-repeat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#outputnot-checked"&gt;
  &lt;/a&gt;
  Output(Not Checked)
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D_SjZQId--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lai2eawjqbxfrsyksvvi.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D_SjZQId--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lai2eawjqbxfrsyksvvi.PNG" alt="Capture-4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see we have check sign also. Now set it's &lt;code&gt;display&lt;/code&gt; property to none to hide this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.checkbox&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;previous&lt;/span&gt; &lt;span class="err"&gt;styles&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And again use &lt;code&gt;:checked&lt;/code&gt; event to check for input check.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.checkbox&lt;/span&gt;&lt;span class="nd"&gt;:checked::before&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F6X2uL6c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zxp01ezpfjh35tjgh2r9.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F6X2uL6c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zxp01ezpfjh35tjgh2r9.gif" alt="Gradient Checkbox"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are done.&lt;/p&gt;

&lt;p&gt;So, that's it. I hope you understood each and everything. If you have doubt or I missed some thing let me know in the comments.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#articles-you-may-found-useful"&gt;
  &lt;/a&gt;
  Articles you may found Useful
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/css-position-everything-you-need-for-good-developer-pfh"&gt;CSS Positions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/create-awesome-wavy-button-hover-effect-pure-css-wavy-design-1722"&gt;Pure CSS Wavy Button&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/css-the-best-css-effects-of-all-time-most-underrated-web-ux-2chj"&gt;Top 10 CSS Effects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/quick-css-make-infinity-loading-animation-for-your-next-website-187k"&gt;Infinte CSS loader&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/create-working-youtube-clone-with-search-box-youtube-api-2a6e"&gt;Youtube Clone : Youtube API&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you like, you can subscribe my youtube channel. I create awesome web contents. &lt;a href="https://www.youtube.com/c/modern_web?sub_confirmation=1"&gt;Subscribe&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks For reading.&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Python Dictionary- all you need to know (part -1)</title>
      <author>computer_geek77</author>
      <pubDate>Tue, 03 Aug 2021 13:53:50 +0000</pubDate>
      <link>https://dev.to/computergeek/python-dictionary-all-you-need-to-know-part-1-19ac</link>
      <guid>https://dev.to/computergeek/python-dictionary-all-you-need-to-know-part-1-19ac</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Parameter Details&lt;/p&gt;

&lt;p&gt;key = The desired key to lookup&lt;br&gt;
value = The value to set or return&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h3&gt;
  &lt;a href="#what-exactly-is-a-dictionary"&gt;
  &lt;/a&gt;
  What exactly is a dictionary?
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;A real-life dictionary holds words and their meanings. As you can imagine, likewise, a Python dictionary holds key-value pairs. Also to be noted that they are Unordered and mutable.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#how-to-create-one-"&gt;
  &lt;/a&gt;
  How to create one ?
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;mydict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;                &lt;span class="c1"&gt;#Empty dictionary
&lt;/span&gt;&lt;span class="n"&gt;mydict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'key'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'value'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;#Initialized dictionary
&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;'xyz'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'age'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#built-in-function-for-creating-a-dictionary-dict"&gt;
  &lt;/a&gt;
  Built in Function for creating a dictionary: dict()
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="n"&gt;myperson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;#empty dictionary
&lt;/span&gt;&lt;span class="n"&gt;myperson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"xyz"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#here we have given value to dict function
&lt;/span&gt;
&lt;span class="c1"&gt;# while using dict function we dont need quotes or colons. 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#modifying-a-dictionary"&gt;
  &lt;/a&gt;
  Modifying a dictionary
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;myperson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"xyz"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#creating a dict
&lt;/span&gt;
&lt;span class="n"&gt;myperson&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"xyz@gmail.com"&lt;/span&gt; &lt;span class="c1"&gt;#adding email as key and its value to dict
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#adding-list-to-a-dictionary"&gt;
  &lt;/a&gt;
  Adding list to a dictionary
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;myperson&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'new_list'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;#adding new_list as key and [1,2,3] as value
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#adding-dictionary-to-a-dictionary"&gt;
  &lt;/a&gt;
  Adding Dictionary to a dictionary
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;myperson&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'new_dict'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'nested_dict'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;#new_dict is the key and {'nested_dict': 1} is the value
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#to-delete-an-item-delete-the-key-from-the-dictionary"&gt;
  &lt;/a&gt;
  To delete an item, delete the key from the dictionary
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;myperson&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'email'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;#here key is deleted
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#iterating-over-a-dictionary"&gt;
  &lt;/a&gt;
  Iterating Over a Dictionary
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;Yes, we can iterate over dictionary. Such structures on which we can iterate are called ITERABLE and things which iterates, like 'i' in for loop, that 'i' is called ITERATOR(abstract explanation).&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;myperson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;'xyz'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'age'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;myperson&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;myperson&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;" : "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# key is iterated , so key is iterator here
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#the-items-method-can-be-used-to-loop-over-both-the-key-and-value-simultaneously"&gt;
  &lt;/a&gt;
  The items() method can be used to loop over both the key and value simultaneously
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;myperson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;'xyz'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'age'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;myperson&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#while-the-values-method-can-be-used-to-iterate-over-only-the-values"&gt;
  &lt;/a&gt;
  While the values() method can be used to iterate over only the values
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;myperson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;'xyz'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'age'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;myperson&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#soon"&gt;
  &lt;/a&gt;
  Soon.
&lt;/h4&gt;

</description>
      <category>beginners</category>
      <category>python</category>
      <category>tutorial</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>How to setup a DR for your K8s cluster with Velero?</title>
      <author>Maxime Guilbert</author>
      <pubDate>Tue, 03 Aug 2021 13:49:15 +0000</pubDate>
      <link>https://dev.to/adaendra/how-to-setup-a-dr-for-your-k8s-cluster-with-velero-1l77</link>
      <guid>https://dev.to/adaendra/how-to-setup-a-dr-for-your-k8s-cluster-with-velero-1l77</guid>
      <description>&lt;p&gt;&lt;em&gt;All the definitions are at the bottom.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Depending the criticity of your project and/or your &lt;strong&gt;SLA&lt;/strong&gt; &lt;em&gt;(Service Level Agreements)&lt;/em&gt;, you may need a &lt;strong&gt;Disaster Recovery&lt;/strong&gt; &lt;em&gt;(DR)&lt;/em&gt; plan to keep your services up and running. &lt;/p&gt;

&lt;p&gt;So here is &lt;a href="https://velero.io/"&gt;&lt;strong&gt;Velero&lt;/strong&gt;&lt;/a&gt;, a simple tool to make backups of some elements &lt;em&gt;(or all)&lt;/em&gt; in your cluster, and do a recover from one of them.&lt;/p&gt;

&lt;p&gt;With Velero, you can do massive backups for a complete cluster or be more granular and do backups by namespaces for example.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;NOTE : It can also be used to do some cluster migrations.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h1&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h1&gt;

&lt;p&gt;First, you need to install velero in a dedicated pod. &lt;/p&gt;

&lt;p&gt;Download the release that you want with a curl and setup it to make it executable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Download the Velero release&lt;/span&gt;
curl &lt;span class="nt"&gt;-L&lt;/span&gt; &lt;span class="nt"&gt;-o&lt;/span&gt; /tmp/velero.tar.gz https://github.com/vmware-tanzu/velero/releases/download/v1.5.1/velero-v1.5.1-linux-amd64.tar.gz 

&lt;span class="c"&gt;# Unzip it&lt;/span&gt;
&lt;span class="nb"&gt;tar&lt;/span&gt; &lt;span class="nt"&gt;-C&lt;/span&gt; /tmp &lt;span class="nt"&gt;-xvf&lt;/span&gt; /tmp/velero.tar.gz

&lt;span class="c"&gt;# Move to the local/bin folder&lt;/span&gt;
&lt;span class="nb"&gt;mv&lt;/span&gt; /tmp/velero-v1.5.1-linux-amd64/velero /usr/local/bin/velero
&lt;span class="nb"&gt;chmod&lt;/span&gt; +x /usr/local/bin/velero

&lt;span class="c"&gt;# Test the velero command, and it should work!&lt;/span&gt;
velero &lt;span class="nt"&gt;--help&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h1&gt;
  &lt;a href="#set-your-backup-storage"&gt;
  &lt;/a&gt;
  Set your backup storage
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#plugins-list"&gt;
  &lt;/a&gt;
  Plugins List
&lt;/h2&gt;

&lt;p&gt;Depending what you want/need and where your cluster is deployed, you will use a different way to configure your backup storage.&lt;/p&gt;

&lt;p&gt;When I write this post, 13 plugins are available and only the next 5 are supported by Velero :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/vmware-tanzu/velero-plugin-for-aws"&gt;Amazon Web Services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vmware-tanzu/velero-plugin-for-gcp"&gt;Google Cloud Platform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vmware-tanzu/velero-plugin-for-microsoft-azure"&gt;Microsoft Azure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vmware-tanzu/velero-plugin-for-vsphere"&gt;VMWare vSphere&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vmware-tanzu/velero-plugin-for-csi"&gt;Container Storage Interface&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#plugin-installation"&gt;
  &lt;/a&gt;
  Plugin installation
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Now, we will continue with AWS.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;1/ First, we need to create the S3 bucket and create credentials for Velero.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;For this demo, our bucket will be called "mg-demo-velero" and will be in "ca-central-1"&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;2/ Then, create a file with the AWS Credentials&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cat&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; /tmp/credentials-velero &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="no"&gt;EOF&lt;/span&gt;&lt;span class="sh"&gt;
[default]
aws_access_key_id=&lt;/span&gt;&lt;span class="nv"&gt;$AWS_ACCESS_ID&lt;/span&gt;&lt;span class="sh"&gt;
aws_secret_access_key=&lt;/span&gt;&lt;span class="nv"&gt;$AWS_ACCESS_KEY&lt;/span&gt;&lt;span class="sh"&gt;
&lt;/span&gt;&lt;span class="no"&gt;EOF
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3/ Install the AWS plugin using the credentials file and the other informations about your bucket&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;velero &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--provider&lt;/span&gt; aws &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--plugins&lt;/span&gt; velero/velero-plugin-for-aws:v1.1.0 &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--bucket&lt;/span&gt; mg-demo-velero &lt;span class="se"&gt;\ &lt;/span&gt;&lt;span class="c"&gt;# Name of your bucket&lt;/span&gt;
    &lt;span class="nt"&gt;--backup-location-config&lt;/span&gt; &lt;span class="nv"&gt;region&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ca-central-1 &lt;span class="se"&gt;\ &lt;/span&gt;&lt;span class="c"&gt;# Region where your bucket is created&lt;/span&gt;
    &lt;span class="nt"&gt;--snapshot-location-config&lt;/span&gt; &lt;span class="nv"&gt;region&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ca-central-1 &lt;span class="se"&gt;\ &lt;/span&gt;&lt;span class="c"&gt;# Region where your bucket is created&lt;/span&gt;
    &lt;span class="nt"&gt;--secret-file&lt;/span&gt; /tmp/credentials-velero &lt;span class="c"&gt;# Path to your credential file&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;4/ Check the list of backups&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;velero backup get
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this moment, if it's your first experience with Velero, you will see that you don't have any backups. &lt;em&gt;(And it's normal)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;But if you already use this bucket to store backup, you must see something like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;NAME               STATUS      ERRORS   WARNINGS   CREATED                         EXPIRES   STORAGE LOCATION   SELECTOR
test-backup        Completed   0        0          2021-07-21 14:45:51 &lt;span class="nt"&gt;-0700&lt;/span&gt; PDT   29d       default            &amp;lt;none&amp;gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h1&gt;
  &lt;a href="#life-cycle-commands"&gt;
  &lt;/a&gt;
  Life cycle commands
&lt;/h1&gt;

&lt;p&gt;Now that we have a complete setup of Velero ready, we will see all the commands to use it to its full capability.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#simple-backup"&gt;
  &lt;/a&gt;
  Simple Backup
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#create-backup"&gt;
  &lt;/a&gt;
  Create Backup
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;velero backup create &lt;em&gt;[backup name]&lt;/em&gt; &lt;em&gt;[options]&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Options&lt;/strong&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;parameter&lt;/th&gt;
&lt;th&gt;default&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;th&gt;example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;--ttl &lt;em&gt;[DURATION]&lt;/em&gt;
&lt;/td&gt;
&lt;td&gt;30d&lt;/td&gt;
&lt;td&gt;Retention duration of the backup&lt;/td&gt;
&lt;td&gt;--ttl 24h0m0s &lt;br&gt; &lt;em&gt;To retain the backup only 24h&lt;/em&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--include-cluster-resources=&lt;em&gt;[boolean]&lt;/em&gt;
&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;Check to know if you want to include cluster-scoped resources&lt;/td&gt;
&lt;td&gt;--include-cluster-resources=true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--include-namespaces &lt;em&gt;[namespaces]&lt;/em&gt;
&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;List of namespaces to include in the backup separated by a comma&lt;/td&gt;
&lt;td&gt;--include-namespaces test,default&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--exclude-namespaces &lt;em&gt;[namespaces]&lt;/em&gt;
&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;List of namespaces to exclude in the backup separated by a comma&lt;/td&gt;
&lt;td&gt;--exclude-namespaces test,default&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--include-resources &lt;em&gt;[resource names]&lt;/em&gt;
&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;List of resources to include in the backup separated by a comma&lt;/td&gt;
&lt;td&gt;--include-resources storageclasses&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--exclude-resources &lt;em&gt;[resource names]&lt;/em&gt;
&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;List of resources to exclude in the backup separated by a comma&lt;/td&gt;
&lt;td&gt;--exclude-resources storageclasses&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--ordered-resources '&lt;em&gt;[resources]&lt;/em&gt;'&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;List of exact resources to include in the backup. Resource names are separated by a semi-colon and resources are separated by a comma.&lt;/td&gt;
&lt;td&gt;--ordered-resources 'pods=ns1/pod1,ns1/pod2;persistentvolumes=pv4,pv8'&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--selector &lt;em&gt;[labels]&lt;/em&gt;
&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;List of labels separated by a comma that resources needs to be include in the backup.&lt;/td&gt;
&lt;td&gt;--selector app=elasticsearch-master,env=test&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;velero backup create backup1 &lt;span class="nt"&gt;--include-cluster-resources&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="nt"&gt;--ordered-resources&lt;/span&gt; &lt;span class="s1"&gt;'pods=ns1/pod1,ns1/pod2;persistentvolumes=pv4,pv8'&lt;/span&gt; &lt;span class="nt"&gt;--include-namespaces&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ns1
velero backup create backup2 &lt;span class="nt"&gt;--ordered-resources&lt;/span&gt; &lt;span class="s1"&gt;'statefulsets=ns1/sts1,ns1/sts0'&lt;/span&gt; &lt;span class="nt"&gt;--include-namespaces&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ns1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#delete-backup"&gt;
  &lt;/a&gt;
  Delete backup
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;velero backup delete &lt;em&gt;[backup name]&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;velero backup delete backup1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#list-backups"&gt;
  &lt;/a&gt;
  List backups
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;velero backup get&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;velero backup get

NAME               STATUS      ERRORS   WARNINGS   CREATED                         EXPIRES   STORAGE LOCATION   SELECTOR
test-backup        Completed   0        0          2021-07-21 14:45:51 &lt;span class="nt"&gt;-0700&lt;/span&gt; PDT   29d       default            &amp;lt;none&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#get-logs"&gt;
  &lt;/a&gt;
  Get logs
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;velero backup logs &lt;em&gt;[backup name]&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;velero backup logs backup1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#schedule-backup"&gt;
  &lt;/a&gt;
  Schedule backup
&lt;/h2&gt;

&lt;p&gt;As a great tool to create backup, you can create a schedule to automate it! Depending your project and your needs, it can be an hourly one or a daily one!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create"&gt;
  &lt;/a&gt;
  Create
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;velero schedule create &lt;em&gt;[schedule name]&lt;/em&gt; --schedule="&lt;em&gt;[schedule]&lt;/em&gt;" &lt;em&gt;[options]&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Schedule&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can use a CRON or the annotation &lt;strong&gt;@every&lt;/strong&gt;. The two following example will create a backup every 6 hours.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;velero schedule create test1 --schedule="0 */6 * * *"

velero schedule create test2 --schedule="@every 6h"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Options&lt;/strong&gt; &lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;parameter&lt;/th&gt;
&lt;th&gt;default&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;th&gt;example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;--ttl &lt;em&gt;[DURATION]&lt;/em&gt;
&lt;/td&gt;
&lt;td&gt;30d&lt;/td&gt;
&lt;td&gt;Retention duration of the backup&lt;/td&gt;
&lt;td&gt;--ttl 24h0m0s &lt;br&gt; &lt;em&gt;To retain the backup only 24h&lt;/em&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--include-namespaces &lt;em&gt;[namespaces]&lt;/em&gt;
&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;List of namespaces to include in the restore separated by a comma&lt;/td&gt;
&lt;td&gt;--include-namespaces test,default&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--exclude-namespaces &lt;em&gt;[namespaces]&lt;/em&gt;
&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;List of namespaces to exclude in the restore separated by a comma&lt;/td&gt;
&lt;td&gt;--exclude-namespaces test,default&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--include-resources &lt;em&gt;[resource names]&lt;/em&gt;
&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;List of resources to include in the restore separated by a comma&lt;/td&gt;
&lt;td&gt;--include-resources storageclasses&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--exclude-resources &lt;em&gt;[resource names]&lt;/em&gt;
&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;List of resources to exclude in the restore separated by a comma&lt;/td&gt;
&lt;td&gt;--exclude-resources storageclasses&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--selector &lt;em&gt;[labels]&lt;/em&gt;
&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;List of labels separated by a comma that resources needs to be include in the restore.&lt;/td&gt;
&lt;td&gt;--selector app=elasticsearch-master,env=test&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#delete"&gt;
  &lt;/a&gt;
  Delete
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;velero delete schedule &lt;em&gt;[schedule name]&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;velero delete schedule test1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#list"&gt;
  &lt;/a&gt;
  List
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;velero get schedules&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#recovery"&gt;
  &lt;/a&gt;
  Recovery
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#from-backup"&gt;
  &lt;/a&gt;
  From Backup
&lt;/h3&gt;

&lt;p&gt;To restore from a backup.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;velero restore create &lt;em&gt;[Name of the restore]&lt;/em&gt; --from-backup &lt;em&gt;[Name of the backup]&lt;/em&gt; &lt;em&gt;[options]&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Options&lt;/strong&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;parameter&lt;/th&gt;
&lt;th&gt;default&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;th&gt;example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;--include-namespaces &lt;em&gt;[namespaces]&lt;/em&gt;
&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;List of namespaces to include in the restore separated by a comma&lt;/td&gt;
&lt;td&gt;--include-namespaces test,default&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--exclude-namespaces &lt;em&gt;[namespaces]&lt;/em&gt;
&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;List of namespaces to exclude in the restore separated by a comma&lt;/td&gt;
&lt;td&gt;--exclude-namespaces test,default&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--include-resources &lt;em&gt;[resource names]&lt;/em&gt;
&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;List of resources to include in the restore separated by a comma&lt;/td&gt;
&lt;td&gt;--include-resources storageclasses&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--exclude-resources &lt;em&gt;[resource names]&lt;/em&gt;
&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;List of resources to exclude in the restore separated by a comma&lt;/td&gt;
&lt;td&gt;--exclude-resources storageclasses&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--selector &lt;em&gt;[labels]&lt;/em&gt;
&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;List of labels separated by a comma that resources needs to be include in the restore.&lt;/td&gt;
&lt;td&gt;--selector app=elasticsearch-master,env=test&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;velero restore create restore1 &lt;span class="nt"&gt;--from-backup&lt;/span&gt; backup1

&lt;span class="c"&gt;# Create a restore with a default name ("backup1-&amp;lt;timestamp&amp;gt;") from backup "backup1"&lt;/span&gt;
velero restore create &lt;span class="nt"&gt;--from-backup&lt;/span&gt; backup1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#from-schedule"&gt;
  &lt;/a&gt;
  From Schedule
&lt;/h3&gt;

&lt;p&gt;To restore from the last backup of a schedule.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;velero restore create &lt;em&gt;[Name of the restore]&lt;/em&gt; --from-schedule &lt;em&gt;[Name of the backup]&lt;/em&gt; &lt;em&gt;[options]&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Options&lt;/strong&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;parameter&lt;/th&gt;
&lt;th&gt;default&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;th&gt;example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;--include-namespaces &lt;em&gt;[namespaces]&lt;/em&gt;
&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;List of namespaces to include in the restore separated by a comma&lt;/td&gt;
&lt;td&gt;--include-namespaces test,default&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--exclude-namespaces &lt;em&gt;[namespaces]&lt;/em&gt;
&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;List of namespaces to exclude in the restore separated by a comma&lt;/td&gt;
&lt;td&gt;--exclude-namespaces test,default&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--include-resources &lt;em&gt;[resource names]&lt;/em&gt;
&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;List of resources to include in the restore separated by a comma&lt;/td&gt;
&lt;td&gt;--include-resources storageclasses&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--exclude-resources &lt;em&gt;[resource names]&lt;/em&gt;
&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;List of resources to exclude in the restore separated by a comma&lt;/td&gt;
&lt;td&gt;--exclude-resources storageclasses&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--selector &lt;em&gt;[labels]&lt;/em&gt;
&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;List of labels separated by a comma that resources needs to be include in the restore.&lt;/td&gt;
&lt;td&gt;--selector app=elasticsearch-master,env=test&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--allow-partially-failed&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Allow to do a restore from a partially failed backup triggered by a schedule&lt;/td&gt;
&lt;td&gt;--allow-partially-failed&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# As from a backup, if you don't specify a restore name, one will be generated&lt;/span&gt;
velero restore create &lt;span class="nt"&gt;--from-schedule&lt;/span&gt; schedule-1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#list"&gt;
  &lt;/a&gt;
  List
&lt;/h3&gt;

&lt;p&gt;To list all the restore which have been done.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;velero restore get&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#describe"&gt;
  &lt;/a&gt;
  Describe
&lt;/h3&gt;

&lt;p&gt;Allow you to get more informations from specific restores.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;velero restore describe &lt;em&gt;[Restore name 1]&lt;/em&gt; &lt;em&gt;[Restore name 2]&lt;/em&gt; ...&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;velero restore describe restore1 restore2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#logs"&gt;
  &lt;/a&gt;
  Logs
&lt;/h3&gt;

&lt;p&gt;To get the logs of a specific restore. Useful for troubleshooting.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;velero restore logs &lt;em&gt;[Restore name 1]&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;velero restore logs restore1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#exclude-specific-resources-from-backup"&gt;
  &lt;/a&gt;
  Exclude specific resources from backup
&lt;/h2&gt;

&lt;p&gt;To exclude a specific resource from all your backups, you can add the label &lt;strong&gt;velero.io/exclude-from-backup=true&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;kubectl label -n &lt;em&gt;[namespace]&lt;/em&gt; &lt;em&gt;[resource]&lt;/em&gt;/&lt;em&gt;[name]&lt;/em&gt; velero.io/exclude-from-backup=true&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h1&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#velero"&gt;
  &lt;/a&gt;
  Velero
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;WebSite : &lt;a href="https://velero.io/"&gt;https://velero.io/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Plugins : &lt;a href="https://velero.io/plugins/"&gt;https://velero.io/plugins/&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#tutorial"&gt;
  &lt;/a&gt;
  Tutorial
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Full tutorial with AWS and Azure (by That DevOps Guy): 
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/zybLTQER0yY"&gt;
&lt;/iframe&gt;
&lt;/li&gt;
&lt;li&gt;VMWare webinar about Velero :
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/csrSPt3HFtg"&gt;
&lt;/iframe&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;h1&gt;
  &lt;a href="#definitions"&gt;
  &lt;/a&gt;
  Definitions
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#dr-disaster-recovery"&gt;
  &lt;/a&gt;
  DR - Disaster Recovery
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Definition based on the &lt;a href="https://www.vmware.com/topics/glossary/content/disaster-recovery"&gt;VMWare&lt;/a&gt; one.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Disaster recovery is an organization’s method of :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;regaining access and functionality to its IT infrastructure &lt;/li&gt;
&lt;li&gt;keep a backup of your data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;after events like a natural disaster, cyber attack...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sla-service-level-agreements"&gt;
  &lt;/a&gt;
  SLA - Service Level Agreements
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Definition of &lt;a href="https://www.atlassian.com/incident-management/kpis/sla-vs-slo-vs-sli"&gt;Atlassian&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;An SLA (service level agreement) is an agreement between provider and client about measurable metrics like uptime, responsiveness, and responsibilities. &lt;/p&gt;




&lt;p&gt;In my opinion, Velero is a good and simple tool which will help us a lot! To be able to do so quickly backups and restores is really amazing!&lt;/p&gt;

&lt;p&gt;I hope it will help you! &lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>devops</category>
      <category>sre</category>
    </item>
    <item>
      <title>How to build a chat similar to Upwork with TalkJS</title>
      <author>Aswin Rajeev</author>
      <pubDate>Tue, 03 Aug 2021 13:41:15 +0000</pubDate>
      <link>https://dev.to/talkjs/how-to-build-a-chat-similar-to-upwork-with-talkjs-4la9</link>
      <guid>https://dev.to/talkjs/how-to-build-a-chat-similar-to-upwork-with-talkjs-4la9</guid>
      <description>&lt;p&gt;We have been pushing the boundaries of the TalkJS Chat API for a while now. In our previous article, we looked at how to make a &lt;a href="https://dev.to/talkjs/how-to-create-direct-messages-like-on-twitter-with-the-talkjs-chat-api-3jo6"&gt;Twitter DM&lt;/a&gt; lookalike using the &lt;a href="https://talkjs.com/"&gt;TalkJS Chat API&lt;/a&gt; and we’ve also seen another article on how to integrate &lt;a href="https://talkjs.com/resources/how-to-add-audio-and-video-calls-to-a-talkjs-chat-by-using-the-daily-api/"&gt;Voice and Video&lt;/a&gt; calls in TalkJS using the Daily API. Today, we will be creating a chat similar to Upwork with TalkJS. For those of you who are not familiar with Upwork, it is the world’s largest freelancer marketplace and is even listed on NASDAQ.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#things-to-do"&gt;
  &lt;/a&gt;
  Things to do
&lt;/h2&gt;

&lt;p&gt;The Upwork chat looks as shown below. We have quite a few changes to be made here. Let’s review all of them first.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cGwWfwib--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8prvog3qfa9tu2t6g1dm.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cGwWfwib--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8prvog3qfa9tu2t6g1dm.PNG" alt="Upwork Chat"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Change the header background to white, correct the title and subtitle sizes&lt;/li&gt;
&lt;li&gt;Remove avatar from header&lt;/li&gt;
&lt;li&gt;Add a new section under the header to view the contract&lt;/li&gt;
&lt;li&gt;Change user message styling&lt;/li&gt;
&lt;li&gt;Add user’s name above the message&lt;/li&gt;
&lt;li&gt;Add timestamp to the right end of the message&lt;/li&gt;
&lt;li&gt;Add system messages to approve milestones, end contract, etc&lt;/li&gt;
&lt;li&gt;Change color scheme all over&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before going over all the changes, it is important to have a working inbox ready. You can check out our &lt;a href="https://talkjs.com/docs/Getting_Started/"&gt;Getting Started&lt;/a&gt; guide to set this up in no time. Unlike the previous articles, you need to make one small change to the &lt;code&gt;talkjs-container&lt;/code&gt;. Remove the existing styles from the HTML and add the following.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#talkjs-container&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;7rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The end result of all these changes looks like this. As you can see, we’ve been able to achieve a near lookalike of the Upwork chat using the TalkJS Chat API and its powerful &lt;a href="https://talkjs.com/docs/Features/Themes/The_Theme_Editor/"&gt;Theme Editor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Nr9NdNdW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dvbkajjt1iz6vq6dd2qf.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Nr9NdNdW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dvbkajjt1iz6vq6dd2qf.PNG" alt="Upwork Clone TalkJS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#chatheader"&gt;
  &lt;/a&gt;
  ChatHeader
&lt;/h2&gt;

&lt;p&gt;Start off by deleting lines 38-40. This will remove the avatar from the header. After the &lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt; tag, add the following lines of code. This is to add a new section under the header to view the contract. It will be an empty link as of now but can be populated with the data once it is available.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;contract&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;contract-link&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;View&lt;/span&gt; &lt;span class="nx"&gt;Contract&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Change the &lt;code&gt;.header&lt;/code&gt; class’s CSS as shown below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;75px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#FFF&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#e0e0e0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;flex-shrink&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;22px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the new contract div and the contract-link class, add the following styles.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.contract&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;border-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#e0e0e0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.contract-link&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;14px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#14a800&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the &lt;code&gt;.title&lt;/code&gt; class remove the &lt;code&gt;font-weight: bold&lt;/code&gt; style and add a &lt;code&gt;padding-left&lt;/code&gt; of &lt;code&gt;15px&lt;/code&gt; and also add a &lt;code&gt;font-size&lt;/code&gt; of &lt;code&gt;22px&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usermessage"&gt;
  &lt;/a&gt;
  UserMessage
&lt;/h2&gt;

&lt;p&gt;Open up the UserMessage component and replace lines 67-71 with the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;t:if=&lt;/span&gt;&lt;span class="s"&gt;"{{ sender.id != previousSenderId and conversation.others.length &amp;gt; 0 }}"&lt;/span&gt;
    &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"message-author"&lt;/span&gt;
    &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color: #000"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   {{ sender.name }}
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will ensure that the user’s name will be displayed above every message and the text color will be black. From the &lt;code&gt;&amp;lt;MessageBody&amp;gt;&lt;/code&gt; tag remove &lt;code&gt;timestamp&lt;/code&gt;, &lt;code&gt;floatTimestamp&lt;/code&gt; and &lt;code&gt;showStatus&lt;/code&gt; attributes. After the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; on line 74, add the following bit to display the timestamp.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class = &lt;/span&gt;&lt;span class="s"&gt;"timestamp {{ body.type }} {{ sender.id == previousSenderId | then: 'previous-same' }}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    {{ timestamp |  date: "%l:%M %p"}} 
 &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the &lt;code&gt;.message-row&lt;/code&gt; class add a &lt;code&gt;margin-bottom&lt;/code&gt; of &lt;code&gt;0.5rem&lt;/code&gt;. For the &lt;code&gt;.message-row.previous-same&lt;/code&gt; class change the &lt;code&gt;margin-top&lt;/code&gt; to &lt;code&gt;0.1rem&lt;/code&gt;. Delete the styles from inside the &lt;code&gt;.message-row.by-me&lt;/code&gt; class.&lt;br&gt;
Now, let’s alter the message styles. Use the following styles for the &lt;code&gt;.message&lt;/code&gt; class. This will remove all the borders and background colors from both the user’s and the other user’s messages.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.message&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;white-space&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;word-wrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;break-word&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="m"&gt;6rem&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="m"&gt;0.25rem&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="m"&gt;0.25rem&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#FFF&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;14px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.by-me&lt;/span&gt; &lt;span class="nc"&gt;.message&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c"&gt;/* Space between avatar and the message */&lt;/span&gt;
    &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.25rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the &lt;code&gt;.by-me.previous-same&lt;/code&gt; class, we need to add a &lt;code&gt;padding-left&lt;/code&gt; of &lt;code&gt;3rem&lt;/code&gt; instead of a &lt;code&gt;padding-right&lt;/code&gt;. For the &lt;code&gt;message-author&lt;/code&gt; class we need to completely replace all the existing styles. Use the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.message-author&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;14px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;12px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add the following styles for the timestamps.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.timestamp&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;12px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"Helvetica"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.timestamp.previous-same&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#systemmessage"&gt;
  &lt;/a&gt;
  SystemMessage
&lt;/h2&gt;

&lt;p&gt;We will be using the TalkJS REST API to send system messages that show different stages of a contract on Upwork. The awesome thing with these System Messages is that they allow formatting within them and we will show you how that works in just a second.&lt;br&gt;
Select the SystemMessage component from the left side menu and add the following line after the &lt;code&gt;&amp;lt;MessageBody&amp;gt;&lt;/code&gt;. Don’t forget to delete the timestamp and floatTimestamp attributes from the &lt;code&gt;&amp;lt;MessageBody&amp;gt;&lt;/code&gt; tag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;span&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class = &lt;/span&gt;&lt;span class="s"&gt;"view-details"&lt;/span&gt; &lt;span class="na"&gt;href = &lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;View Details&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now add the following styles for the &lt;code&gt;.message&lt;/code&gt; and the &lt;code&gt;.view-details&lt;/code&gt; class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.message&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;22px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;white-space&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#414649&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#F2F2F2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;14px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.view-details&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;13px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#14a800&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To send System Messages using the TalkJS REST API, we need to use the following URL.&lt;br&gt;
&lt;a href="https://api.talkjs.com/v1/%7BappI%7D/conversations/%7BconversationId%7D/messages"&gt;https://api.talkjs.com/v1/{appI}/conversations/{conversationId}/messages&lt;/a&gt;&lt;br&gt;
It is a POST request and the request body should be as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Jack Hendlin approved the milestone&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;Milestone 1: &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;How to create direct messages like on Twitter with the TalkJS chat API&lt;/span&gt;&lt;span class="se"&gt;\"\n&lt;/span&gt;&lt;span class="s2"&gt;Due: Friday, July 23, 2021&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;Amount paid: $200.00"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"SystemMessage"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above JSON payload, you can see that we have added newlines using the &lt;code&gt;\n&lt;/code&gt; escape sequence within the payload and this will be rendered perfectly inside TalkJS. Based on the different stages of the contract, we can change the contents of the message and it will be rendered accordingly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conversationlistheader"&gt;
  &lt;/a&gt;
  ConversationListHeader
&lt;/h2&gt;

&lt;p&gt;Remove lines 15 and 16 to remove the desktop toggle as well as the heading. This will give us a plain header on the left-hand side. Change the style of the &lt;code&gt;.conversation-list-header&lt;/code&gt; class to the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.conversation-list-header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#e0e0e0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#F9F9F9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5.6rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#layout"&gt;
  &lt;/a&gt;
  Layout
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#global"&gt;
  &lt;/a&gt;
  Global
&lt;/h3&gt;

&lt;p&gt;In the global sub-section of layout, remove the &lt;code&gt;Open Sans&lt;/code&gt; font family.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#panels"&gt;
  &lt;/a&gt;
  Panels
&lt;/h3&gt;

&lt;p&gt;Set the &lt;code&gt;borderRadius&lt;/code&gt; as &lt;code&gt;0px&lt;/code&gt; and &lt;code&gt;borderColor&lt;/code&gt; as &lt;code&gt;#e0e0e0&lt;/code&gt; in the panels sub-section.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#inbox-conversation-list-panel"&gt;
  &lt;/a&gt;
  Inbox conversation list panel
&lt;/h3&gt;

&lt;p&gt;Change the &lt;code&gt;width&lt;/code&gt;, &lt;code&gt;maxWidth&lt;/code&gt; and &lt;code&gt;minWidth&lt;/code&gt; to &lt;code&gt;300px&lt;/code&gt; for the inbox conversation list panel.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#inbox-chat-panel"&gt;
  &lt;/a&gt;
  Inbox chat panel
&lt;/h3&gt;

&lt;p&gt;For the inbox chat panel, change the &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;maxWidth&lt;/code&gt; to &lt;code&gt;1200px&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#panel-footers"&gt;
  &lt;/a&gt;
  Panel footers
&lt;/h3&gt;

&lt;p&gt;There’s only one change here and that is to change the &lt;code&gt;backgroundColor&lt;/code&gt; to &lt;code&gt;#F9F9F9&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#message-field"&gt;
  &lt;/a&gt;
  Message field
&lt;/h3&gt;

&lt;p&gt;For the message field, we need to set the &lt;code&gt;borderColor&lt;/code&gt; to &lt;code&gt;#EFEFEF&lt;/code&gt; and the &lt;code&gt;borderRadius&lt;/code&gt; to &lt;code&gt;0px&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#highlights"&gt;
  &lt;/a&gt;
  Highlights
&lt;/h3&gt;

&lt;p&gt;Change the &lt;code&gt;backgroundColor&lt;/code&gt; to &lt;code&gt;#F9F9F9&lt;/code&gt; and the &lt;code&gt;color&lt;/code&gt; to &lt;code&gt;#000&lt;/code&gt; (black).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;That’s it for this one. We hope you had a great time coding this one up. You may be already aware of the strength of the Theme Editor on TalkJS, and we’re just getting started. Whatever your application may be, TalkJS can be themed according to it with all the identical functionalities. So, until the next one, happy coding!&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Deploying CI/CD For NodeJS Serverless Applications Workshop: Part I</title>
      <author>Salah Elhossiny</author>
      <pubDate>Tue, 03 Aug 2021 12:50:17 +0000</pubDate>
      <link>https://dev.to/aws-builders/deploying-ci-cd-for-nodejs-serverless-applications-workshop-4ia6</link>
      <guid>https://dev.to/aws-builders/deploying-ci-cd-for-nodejs-serverless-applications-workshop-4ia6</guid>
      <description>&lt;p&gt;In this workshop series, we build CI/CD for NodeJS serverless applications. &lt;/p&gt;

&lt;p&gt;In order to complete this workshop, you’ll need access to an AWS account. Your access needs to have sufficient permissions to create resources in IAM, CloudFormation, API Gateway, CodeCommit, CodePipeline, CodeBuild, CodeDeploy and S3.&lt;/p&gt;

&lt;p&gt;If you currently don’t have an AWS account, you can create one &lt;a href="https://aws.amazon.com/premiumsupport/knowledge-center/create-and-activate-aws-account"&gt; here. &lt;/a&gt; &lt;/p&gt;

&lt;p&gt;If you prefer to run the workshop from your local computer without using Cloud9, make sure you install the following tools which are available for Linux, MacOS and Windows.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Docker Desktop - Required to simulate the Lambda runtime locally.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SAM CLI v0.31.0+ - To run functions locally and package/deploy SAM apps.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AWS CLI - To create resources in your AWS account.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Git Client - To interact with the CodeCommit repository by pushing code changes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;NodeJS and npm - The sample app you will create is NodeJs-based.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#create-a-new-sam-app"&gt;
  &lt;/a&gt;
  CREATE A NEW SAM APP
&lt;/h3&gt;

&lt;p&gt;The AWS Serverless Application Model (AWS SAM) is an open-source framework that developers use to build production-grade serverless applications on AWS.&lt;/p&gt;

&lt;p&gt;A serverless application is a combination of Lambda functions, event sources, and other resources that work together to perform tasks. But a serverless application is more than just a Lambda function—it can include additional resources such as APIs, databases, and event source mappings.&lt;/p&gt;

&lt;p&gt;In this first part of workshop series, you will learn how to quickly scaffold a SAM application and understand how it is structured.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#initialize-project"&gt;
  &lt;/a&gt;
  INITIALIZE PROJECT
&lt;/h3&gt;

&lt;p&gt;AWS SAM provides you with a command line tool, the AWS SAM CLI, that makes it easy for you to create and manage serverless applications. It particularly makes easy the scaffolding of a new project, as it creates the initial skeleton of a hello world application, so you can use it as a baseline and continue building your project from there.&lt;/p&gt;

&lt;p&gt;Run the following command to scaffold a new project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;sam init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will prompt for project configuration parameters:&lt;/p&gt;

&lt;p&gt;Type 1 to select AWS Quick Start Template&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1Ov2E9kQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/buim1ibl3poew18l2rkr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1Ov2E9kQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/buim1ibl3poew18l2rkr.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Type 1 to select Zip as the package type&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bFimgH6G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4vzx9mzageqkko8hk3ig.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bFimgH6G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4vzx9mzageqkko8hk3ig.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Choose nodejs12.x for runtime&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XAt3pEJ8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hdqu99kh89lrrqmgxgmb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XAt3pEJ8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hdqu99kh89lrrqmgxgmb.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Leave default sam-app for project name&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uA6aOVQr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n634rs30b5e0bvrts3fh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uA6aOVQr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n634rs30b5e0bvrts3fh.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Type 1 to select the Hello World Example&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--omOBUpCM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n652c6yug8a1s5ndftnd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--omOBUpCM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n652c6yug8a1s5ndftnd.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Project should now be initialized &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f_WfCBH4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3upvp57d09gg0asm6lno.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f_WfCBH4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3upvp57d09gg0asm6lno.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#project-architecture"&gt;
  &lt;/a&gt;
  PROJECT ARCHITECTURE
&lt;/h2&gt;

&lt;p&gt;The Hello World SAM project you just created will create the following architecture when deployed. It has a single Lambda function, an API Gateway that exposes a /hello resource and invokes the Lambda function when called with an HTTP GET request. The Lambda function assumes an IAM role that can have permissions to interact with other AWS resources, like a database for example.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rhq2pZdR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/47qw49usfemy7hrkyzpa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rhq2pZdR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/47qw49usfemy7hrkyzpa.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, let's explore the the SAM template. &lt;/p&gt;

&lt;p&gt;Go ahead and open the sam-app/template.yaml file. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zonwW-T_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8dkpz01q1aoganzgnor5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zonwW-T_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8dkpz01q1aoganzgnor5.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It should have a structure like the following.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--isRfSncN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lepr8tafy8iqleoaeykl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--isRfSncN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lepr8tafy8iqleoaeykl.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You may notice that the syntax looks exactly like AWS CloudFormation, this is because SAM templates are an extension of CloudFormation templates. That is, any resource that you can declare in CloudFormation, you can also declare in a SAM template. Let’s take a closer look at the components of the template.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#transform"&gt;
  &lt;/a&gt;
  Transform
&lt;/h4&gt;

&lt;p&gt;Notice the transform line of the template, it tells CloudFormation that this template adheres to the open source AWS Serverless Application Model specification. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tZfOfz3H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tpnmodfzqgg1mo463z7d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tZfOfz3H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tpnmodfzqgg1mo463z7d.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#globals"&gt;
  &lt;/a&gt;
  Globals
&lt;/h4&gt;

&lt;p&gt;This section defines properties common to all your Serverless functions and APIs. In this case, it’s specifying that all functions in this project will have a default timeout of 3 seconds.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FMiiamaT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h6fpuraet75cc96cc2ac.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FMiiamaT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h6fpuraet75cc96cc2ac.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#hello-world-function"&gt;
  &lt;/a&gt;
  Hello World Function
&lt;/h4&gt;

&lt;p&gt;The following section creates a Lambda function with an IAM execution role. It also specifies that the code for this Lambda function is located under a folder named hello-world, and that its entrypoint is a function named lambdaHandler within a file named app.js.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6Akpt4QQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m4v7981yduwfopnznhw0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6Akpt4QQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m4v7981yduwfopnznhw0.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notice that the IAM role is not explicitly specified, this is because SAM will create a new one by default. You can override this behavior and pass your own role by specifying the Role parameter. For a complete list of the parameters you can specify for a Lambda function check the &lt;a href="https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction"&gt; SAM reference. &lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#event-triggers"&gt;
  &lt;/a&gt;
  Event Triggers
&lt;/h4&gt;

&lt;p&gt;This section is part of the function definition and it specifies the different events that will trigger the Lambda function. In this case, we are specifying the event to be an API Gateway with an endpoint on /hello that will listen on HTTP method GET.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--92hLe3zd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/11eucum004qox4pxjz64.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--92hLe3zd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/11eucum004qox4pxjz64.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#outputs"&gt;
  &lt;/a&gt;
  Outputs
&lt;/h4&gt;

&lt;p&gt;The Outputs section is optional and it declares output values that you can import into other CloudFormation stacks (to create cross-stack references), or simply to view them on the CloudFormation console. In this case we are making the API Gateway endpoint URL, the Lambda function ARN and the IAM Role ARN available as Outputs to make them easier to find.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ABPi4Clw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/in2as02vbfxpv5jbsowf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ABPi4Clw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/in2as02vbfxpv5jbsowf.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#explore-the-lambda-code"&gt;
  &lt;/a&gt;
  EXPLORE THE LAMBDA CODE
&lt;/h2&gt;

&lt;p&gt;Let’s take a look at the code of the Hello World Lambda function. Open the file app.js under the hello-world folder. Note that your function may have additional commented out code, those lines have been removed from the following example for clarity:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lYXYtXHK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ld7wdb5iffwa9wlzzsy7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lYXYtXHK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ld7wdb5iffwa9wlzzsy7.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;#### The Lambda handler&lt;br&gt;
The handler is the method in your Lambda function that processes events. When you invoke a function, the runtime runs the handler method. When the handler exits or returns a response, it becomes available to handle another event. In this case, the lambda handler is the lambdaHandler function, as specified in the SAM template.yaml.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#event-object"&gt;
  &lt;/a&gt;
  Event object
&lt;/h4&gt;

&lt;p&gt;The first argument passed to the handler function is the event object, which contains information from the invoker. In this case, the invoker is API Gateway, which passes the HTTP request information as a JSON-formatted string, and the Lambda runtime converts it to an object.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#context-object"&gt;
  &lt;/a&gt;
  Context object
&lt;/h4&gt;

&lt;p&gt;The second argument is the context object, which contains information about the invocation, function, and execution environment. You can get information like the CloudWatch log stream name or the remaining execution time for the function.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#handler-response"&gt;
  &lt;/a&gt;
  Handler Response
&lt;/h4&gt;

&lt;p&gt;API Gateway expects the handler to return a response object that contains statusCode and body, but it can also contain optional headers.&lt;/p&gt;

</description>
      <category>serverless</category>
      <category>aws</category>
      <category>cicd</category>
      <category>node</category>
    </item>
    <item>
      <title>Create a Netflix clone from Scratch: JavaScript PHP + MySQL Day 8</title>
      <author>Christopher Glikpo</author>
      <pubDate>Tue, 03 Aug 2021 12:49:09 +0000</pubDate>
      <link>https://dev.to/cglikpo/create-a-netflix-clone-from-scratch-javascript-php-mysql-day-8-4c3g</link>
      <guid>https://dev.to/cglikpo/create-a-netflix-clone-from-scratch-javascript-php-mysql-day-8-4c3g</guid>
      <description>&lt;p&gt;Netflix provides streaming movies and TV shows to over 75 million subscribers across the globe. Customers can watch as many shows/ movies as they want as long as they are connected to the internet for a monthly subscription fee of about ten dollars. Netflix produces original content and also pays for the rights to stream feature films and shows.&lt;/p&gt;

&lt;p&gt;In this video,we will  create Database Class&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/iXNKCWSKq9Q"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;In this video,we will create a method to make Database class accessible&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Rv_9mhF0nKQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you like my work, please consider&lt;br&gt;
&lt;a href="https://www.buymeacoffee.com/cglikpo"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c23TxQOF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jm11knj7d8zwcvo150q2.png" alt="Buy me a coffee"&gt;&lt;/a&gt;&lt;br&gt;
so that I can bring more projects, more articles for you&lt;/p&gt;

&lt;p&gt;If you want to learn more about Web Development, feel free to &lt;a href="https://www.youtube.com/c/ChristopherGlikpo"&gt;follow me on Youtube!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>php</category>
    </item>
    <item>
      <title>Create a wordcloud of news headlines in python!</title>
      <author>Code_Jedi</author>
      <pubDate>Tue, 03 Aug 2021 12:33:23 +0000</pubDate>
      <link>https://dev.to/code_jedi/create-a-wordcloud-of-news-headlines-in-python-5549</link>
      <guid>https://dev.to/code_jedi/create-a-wordcloud-of-news-headlines-in-python-5549</guid>
      <description>&lt;h3&gt;
  &lt;a href="#today-ill-be-showing-you-a-simple-way-to-make-a-wordcloud-of-news-headlines-in-python"&gt;
  &lt;/a&gt;
  Today, I'll be showing you a simple way to make a wordcloud of news headlines in python!
&lt;/h3&gt;




&lt;p&gt;If you haven't read &lt;a href="https://dev.to/code_jedi/scrape-news-headlines-with-python-1go6"&gt;this tutorial&lt;/a&gt; explaining how to scrape news headlines in python, make sure you do.&lt;br&gt;
In summary, here's the code for scraping news headlines in python:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import requests
from bs4 import BeautifulSoup

url='https://www.bbc.com/news'
response = requests.get(url)

soup = BeautifulSoup(response.text, 'html.parser')
headlines = soup.find('body').find_all('h3')
for x in headlines:
    print(x.text.strip())

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To create a wordcloud out of these news headlines, first import these 2 libraries beside the libraries needed to scrape our news source:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import requests
from bs4 import BeautifulSoup
from wordcloud import WordCloud #add wordcloud
import matplotlib.pyplot as plt #add pyplot from matplotlib
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, replace&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for x in headlines:
    print(x.text.strip())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;h3text = ''
for x in el:
    h3text = h3text + ' ' + x.text.strip()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;em&gt;This will first define the "h3text" string, then add every news headline to the string and seperate them with spaces.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;strong&gt;Before we make the wordcloud, you can check the news headlines by using &lt;code&gt;print(h3text)&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#to-make-the-wordcloud-add-these-lines-of-code-to-the-end-of-your-script"&gt;
  &lt;/a&gt;
  To make the wordcloud, add these lines of code to the end of your script:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;wordcloud = WordCloud(width=500, height=500, margin=0).generate(soup.get_text(h3text))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis("off")
plt.margins(x=0, y=0)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Let me explain...&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;First create a wordcloud(well, more like a box in this case) sized 500 by 500.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Next, our wordcloud will be created using "plt.imshow()" (&lt;code&gt;interpolation='bilinear'&lt;/code&gt; just makes the words in the wordcloud easier to read).&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;code&gt;plt.axis("off")&lt;/code&gt; and &lt;code&gt;plt.margins(x=0, y=0)&lt;/code&gt; make sure our wordcloud isn't displayed as a graph.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;_Finally, our wordcloud is displayed using "plt.show()".&lt;/li&gt;
&lt;/ul&gt;




&lt;h4&gt;
  &lt;a href="#if-you-run-your-code-your-wordcloud-should-look-something-like-this"&gt;
  &lt;/a&gt;
  If you run your code, your wordcloud should look something like this:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g6x50tCd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jrw1zwfc14j7mkin3u12.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g6x50tCd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jrw1zwfc14j7mkin3u12.png" alt="wordcloud"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Of course, your wordcloud will probably be quite different since news headlines change all the time.&lt;/em&gt; &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#thats-it-for-this-tutorialminiproject"&gt;
  &lt;/a&gt;
  That's it for this Tutorial/Mini-project!
&lt;/h3&gt;







&lt;p&gt;If you're a beginner who likes discovering new things about python, try &lt;a href="https://rebrand.ly/Python_Explore"&gt;my weekly python newsletter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8UJC9uHS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d3tzwrb1iw2wesc8gdc5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8UJC9uHS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d3tzwrb1iw2wesc8gdc5.png" alt="Newsletter thumbnail"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Byeeeee👋&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>beginners</category>
      <category>sideprojects</category>
    </item>
  </channel>
</rss>
